{
  "name": "strsim::levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:269:1:271:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: Both strings must be valid UTF-8 sequences, with lengths ranging from 0 to 1000 characters, including edge cases where one or both strings are empty or identical, and ensuring at least one string is different for non-zero return values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"identical\";",
                "    let b = \"identical\";",
                "    let result = levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0, result);"
              ],
              "code": [
                "{",
                "    let a = \"identical\";",
                "    let b = \"identical\";",
                "    let result = levenshtein(a, b);",
                "    assert_eq!(0, result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"\";",
                "    let b = \"\";",
                "    let result = levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0, result);"
              ],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"\";",
                "    let result = levenshtein(a, b);",
                "    assert_eq!(0, result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"\";",
                "    let b = \"nonempty\";",
                "    let result = levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 9);",
                "    assert_eq!(levenshtein(\"kitten\", \"sitting\"), 3);",
                "    assert_eq!(levenshtein(\"flaw\", \"lawn\"), 2);",
                "    assert_eq!(levenshtein(\"intention\", \"execution\"), 5);",
                "    assert_eq!(levenshtein(\"\", \"\"), 0);",
                "    assert_eq!(levenshtein(\"a\", \"\"), 1);",
                "    assert_eq!(levenshtein(\"\", \"a\"), 1);",
                "    assert_eq!(levenshtein(\"abc\", \"abc\"), 0);",
                "    assert_eq!(levenshtein(\"abcdef\", \"azced\"), 3);",
                "    assert_eq!(levenshtein(\"kitten\", \"\"), 6);",
                "    assert_eq!(levenshtein(\"\", \"sitting\"), 7);"
              ],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"nonempty\";",
                "    let result = levenshtein(a, b);",
                "    assert_eq!(result, 9);",
                "    assert_eq!(levenshtein(\"kitten\", \"sitting\"), 3);",
                "    assert_eq!(levenshtein(\"flaw\", \"lawn\"), 2);",
                "    assert_eq!(levenshtein(\"intention\", \"execution\"), 5);",
                "    assert_eq!(levenshtein(\"\", \"\"), 0);",
                "    assert_eq!(levenshtein(\"a\", \"\"), 1);",
                "    assert_eq!(levenshtein(\"\", \"a\"), 1);",
                "    assert_eq!(levenshtein(\"abc\", \"abc\"), 0);",
                "    assert_eq!(levenshtein(\"abcdef\", \"azced\"), 3);",
                "    assert_eq!(levenshtein(\"kitten\", \"\"), 6);",
                "    assert_eq!(levenshtein(\"\", \"sitting\"), 7);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"nonempty\";",
                "    let b = \"\";",
                "    let result = levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(levenshtein(\"nonempty\", \"\"), 9);"
              ],
              "code": [
                "{",
                "    let a = \"nonempty\";",
                "    let b = \"\";",
                "    let result = levenshtein(a, b);",
                "    assert_eq!(levenshtein(\"nonempty\", \"\"), 9);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"a\";",
                "    let b = \"b\";",
                "    let result = levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(1, result);",
                "    assert_eq!(0, levenshtein(\"\", \"\"));",
                "    assert_eq!(5, levenshtein(\"abcde\", \"fghij\"));",
                "    assert_eq!(3, levenshtein(\"kitten\", \"sitting\"));",
                "    assert_eq!(2, levenshtein(\"flaw\", \"lawn\"));",
                "    assert_eq!(4, levenshtein(\"intention\", \"execution\"));",
                "    assert_eq!(2, levenshtein(\"abc\", \"ab\"));",
                "    assert_eq!(6, levenshtein(\"abc\", \"defghi\"));",
                "    assert_eq!(3, levenshtein(\"saturday\", \"sunday\"));",
                "    assert_eq!(1, levenshtein(\"\", \"a\"));"
              ],
              "code": [
                "{",
                "    let a = \"a\";",
                "    let b = \"b\";",
                "    let result = levenshtein(a, b);",
                "    assert_eq!(1, result);",
                "    assert_eq!(0, levenshtein(\"\", \"\"));",
                "    assert_eq!(5, levenshtein(\"abcde\", \"fghij\"));",
                "    assert_eq!(3, levenshtein(\"kitten\", \"sitting\"));",
                "    assert_eq!(2, levenshtein(\"flaw\", \"lawn\"));",
                "    assert_eq!(4, levenshtein(\"intention\", \"execution\"));",
                "    assert_eq!(2, levenshtein(\"abc\", \"ab\"));",
                "    assert_eq!(6, levenshtein(\"abc\", \"defghi\"));",
                "    assert_eq!(3, levenshtein(\"saturday\", \"sunday\"));",
                "    assert_eq!(1, levenshtein(\"\", \"a\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"kitten\";",
                "    let b = \"sitting\";",
                "    let result = levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 3);"
              ],
              "code": [
                "{",
                "    let a = \"kitten\";",
                "    let b = \"sitting\";",
                "    let result = levenshtein(a, b);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"flaw\";",
                "    let b = \"lawn\";",
                "    let result = levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 2);"
              ],
              "code": [
                "{",
                "    let a = \"flaw\";",
                "    let b = \"lawn\";",
                "    let result = levenshtein(a, b);",
                "    assert_eq!(result, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"a\".repeat(1000);",
                "    let b = \"b\".repeat(1000);",
                "    let result = levenshtein(&a, &b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(1000, result);"
              ],
              "code": [
                "{",
                "    let a = \"a\".repeat(1000);",
                "    let b = \"b\".repeat(1000);",
                "    let result = levenshtein(&a, &b);",
                "    assert_eq!(1000, result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"abcdef\";",
                "    let b = \"abfceg\";",
                "    let result = levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 3);",
                "    assert_eq!(levenshtein(\"kitten\", \"sitting\"), 3);",
                "    assert_eq!(levenshtein(\"flaw\", \"lawn\"), 2);",
                "    assert_eq!(levenshtein(\"intention\", \"execution\"), 5);",
                "    assert_eq!(levenshtein(\"test\", \"test\"), 0);",
                "    assert_eq!(levenshtein(\"\", \"nonempty\"), 9);",
                "    assert_eq!(levenshtein(\"nonempty\", \"\"), 9);",
                "    assert_eq!(levenshtein(\"\", \"\"), 0);",
                "    assert_eq!(levenshtein(\"a\", \"b\"), 1);",
                "    assert_eq!(levenshtein(\"abc\", \"yabc\"), 1);",
                "    assert_eq!(levenshtein(\"abc\", \"xyz\"), 3);"
              ],
              "code": [
                "{",
                "    let a = \"abcdef\";",
                "    let b = \"abfceg\";",
                "    let result = levenshtein(a, b);",
                "    assert_eq!(result, 3);",
                "    assert_eq!(levenshtein(\"kitten\", \"sitting\"), 3);",
                "    assert_eq!(levenshtein(\"flaw\", \"lawn\"), 2);",
                "    assert_eq!(levenshtein(\"intention\", \"execution\"), 5);",
                "    assert_eq!(levenshtein(\"test\", \"test\"), 0);",
                "    assert_eq!(levenshtein(\"\", \"nonempty\"), 9);",
                "    assert_eq!(levenshtein(\"nonempty\", \"\"), 9);",
                "    assert_eq!(levenshtein(\"\", \"\"), 0);",
                "    assert_eq!(levenshtein(\"a\", \"b\"), 1);",
                "    assert_eq!(levenshtein(\"abc\", \"yabc\"), 1);",
                "    assert_eq!(levenshtein(\"abc\", \"xyz\"), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}