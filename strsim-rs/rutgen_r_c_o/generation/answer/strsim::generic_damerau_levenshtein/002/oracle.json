[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = vec![1];",
          "    generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, generic_damerau_levenshtein(&[], &[1]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = vec![1];",
          "    generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, generic_damerau_levenshtein(&[], &[1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = (1..=10).collect();",
          "    generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[5, 6, 7]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[3, 4, 8, 9, 10]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = (1..=10).collect();",
          "    generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[5, 6, 7]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[3, 4, 8, 9, 10]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = (1..=100).collect();",
          "    generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &vec![5, 6, 7, 8, 9]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[10, 11, 12]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[20]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = (1..=100).collect();",
          "    generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &vec![5, 6, 7, 8, 9]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[10, 11, 12]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[20]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]