[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = vec![1];",
          "    let b = vec![2, 3, 1];",
          "    generic_damerau_levenshtein(&a, &b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(2, generic_damerau_levenshtein(&[1], &[2, 3, 1]));"
        ],
        "code": [
          "{",
          "    let a = vec![1];",
          "    let b = vec![2, 3, 1];",
          "    generic_damerau_levenshtein(&a, &b);",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1], &[2, 3, 1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = vec![1, 2, 3];",
          "    let b = vec![2, 3, 1];",
          "    generic_damerau_levenshtein(&a, &b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[2, 3, 1]));"
        ],
        "code": [
          "{",
          "    let a = vec![1, 2, 3];",
          "    let b = vec![2, 3, 1];",
          "    generic_damerau_levenshtein(&a, &b);",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[2, 3, 1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = vec![1];",
          "    let b = vec![1];",
          "    generic_damerau_levenshtein(&a, &b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[1]));"
        ],
        "code": [
          "{",
          "    let a = vec![1];",
          "    let b = vec![1];",
          "    generic_damerau_levenshtein(&a, &b);",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: Vec<i32> = (1..=100).collect();",
          "    let b: Vec<i32> = (100..=200).collect();",
          "    generic_damerau_levenshtein(&a, &b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(100, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(50, generic_damerau_levenshtein(&(1..=50).collect::<Vec<i32>>(), &[2; 100]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 4]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2], &[1, 2, 3, 4, 5]));"
        ],
        "code": [
          "{",
          "    let a: Vec<i32> = (1..=100).collect();",
          "    let b: Vec<i32> = (100..=200).collect();",
          "    generic_damerau_levenshtein(&a, &b);",
          "    assert_eq!(100, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(50, generic_damerau_levenshtein(&(1..=50).collect::<Vec<i32>>(), &[2; 100]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 4]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2], &[1, 2, 3, 4, 5]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = vec![1, 2];",
          "    let b = vec![3, 4];",
          "    generic_damerau_levenshtein(&a, &b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[1, 2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[], &[1, 2, 3, 4]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[2, 1], &[1, 2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 3], &[3, 1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[1]));"
        ],
        "code": [
          "{",
          "    let a = vec![1, 2];",
          "    let b = vec![3, 4];",
          "    generic_damerau_levenshtein(&a, &b);",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[1, 2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[], &[1, 2, 3, 4]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[2, 1], &[1, 2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 3], &[3, 1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = vec![1, 2, 3];",
          "    let b = vec![1, 3];",
          "    generic_damerau_levenshtein(&a, &b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[1, 3]));"
        ],
        "code": [
          "{",
          "    let a = vec![1, 2, 3];",
          "    let b = vec![1, 3];",
          "    generic_damerau_levenshtein(&a, &b);",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[1, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = vec![1, 2, 3, 4];",
          "    let b = vec![4, 3, 2, 1];",
          "    generic_damerau_levenshtein(&a, &b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3, 4], &[4, 3, 2, 1]));"
        ],
        "code": [
          "{",
          "    let a = vec![1, 2, 3, 4];",
          "    let b = vec![4, 3, 2, 1];",
          "    generic_damerau_levenshtein(&a, &b);",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3, 4], &[4, 3, 2, 1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]