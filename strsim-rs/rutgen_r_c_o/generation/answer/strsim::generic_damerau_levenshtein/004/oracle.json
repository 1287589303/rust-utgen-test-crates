[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = vec![];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, result);",
          "    assert!(result.is_a::<usize>());",
          "    assert!(result >= 0);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1], &[1, 2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 1], &[2, 3]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[2]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[1, 2, 3]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = vec![];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, result);",
          "    assert!(result.is_a::<usize>());",
          "    assert!(result >= 0);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1], &[1, 2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 1], &[2, 3]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[2]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[1, 2, 3]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, result);",
          "    assert!(result >= 0);",
          "    assert!(result <= a_elems.len() + b_elems.len());",
          "    assert_eq!(result, generic_damerau_levenshtein(&[], &b_elems));",
          "    assert_eq!(result, generic_damerau_levenshtein(&a_elems, &[]));"
        ],
        "code": [
          "{",
          "    let a_elems = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(3, result);",
          "    assert!(result >= 0);",
          "    assert!(result <= a_elems.len() + b_elems.len());",
          "    assert_eq!(result, generic_damerau_levenshtein(&[], &b_elems));",
          "    assert_eq!(result, generic_damerau_levenshtein(&a_elems, &[]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems = vec![4, 5, 6];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, result);",
          "    ",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems = vec![2, 3, 1];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(2, result);",
          "    ",
          "    let a_elems: Vec<char> = vec!['a', 'b', 'c'];",
          "    let b_elems = vec!['a', 'b'];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, result);",
          "    ",
          "    let a_elems: Vec<&str> = vec![\"hello\"];",
          "    let b_elems = vec![\"hello\", \"world\"];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, result);",
          "    ",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems = vec![1, 2, 3];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, result);",
          "    ",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems = vec![];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, result);"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems = vec![4, 5, 6];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(3, result);",
          "    ",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems = vec![2, 3, 1];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(2, result);",
          "    ",
          "    let a_elems: Vec<char> = vec!['a', 'b', 'c'];",
          "    let b_elems = vec!['a', 'b'];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, result);",
          "    ",
          "    let a_elems: Vec<&str> = vec![\"hello\"];",
          "    let b_elems = vec![\"hello\", \"world\"];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, result);",
          "    ",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems = vec![1, 2, 3];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, result);",
          "    ",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems = vec![];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems = vec![1];",
          "    let b_elems = vec![2];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, generic_damerau_levenshtein(&[], &[2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1], &[1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1], &[1, 2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[1, 2]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(5, generic_damerau_levenshtein(&[1, 2, 3, 4], &[4, 3, 2, 1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 1, 1, 1], &[1, 2, 2, 2]));"
        ],
        "code": [
          "{",
          "    let a_elems = vec![1];",
          "    let b_elems = vec![2];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, generic_damerau_levenshtein(&[], &[2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1], &[1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1], &[1, 2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[1, 2]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(5, generic_damerau_levenshtein(&[1, 2, 3, 4], &[4, 3, 2, 1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 1, 1, 1], &[1, 2, 2, 2]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems = vec![1];",
          "    let b_elems = vec![1];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[1, 2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2], &[2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[1, 3]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2], &[3, 4, 5]));"
        ],
        "code": [
          "{",
          "    let a_elems = vec![1];",
          "    let b_elems = vec![1];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[1, 2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2], &[2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[1, 3]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2], &[3, 4, 5]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems = vec!['a', 'b'];",
          "    let b_elems = vec!['b', 'c', 'a'];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &vec!['b', 'c', 'a'])); // precondition: a_len == 0 true",
          "    assert_eq!(2, generic_damerau_levenshtein(&vec!['a', 'b'], &[])); // precondition: b_len == 0 true",
          "    assert_eq!(1, generic_damerau_levenshtein(&vec!['a', 'b'], &vec!['b'])); // precondition i in 0..(a_len + 1) true, j in 0..(b_len + 1) true",
          "    assert_eq!(3, generic_damerau_levenshtein(&vec!['a', 'b'], &vec!['b', 'b'])); // precondition i in 1..(a_len + 1) true, j in 0..(b_len + 1) false",
          "    assert_eq!(3, generic_damerau_levenshtein(&vec!['a', 'b'], &vec!['c', 'd', 'e'])); // precondition: a_elems[i - 1] == b_elems[j - 1] false",
          "    assert_eq!(1, generic_damerau_levenshtein(&vec!['a'], &vec!['a'])); // same characters",
          "    assert_eq!(4, generic_damerau_levenshtein(&vec!['a'], &vec!['b', 'c', 'd', 'e'])); // a_len == 1 and b_len > 1",
          "    assert_eq!(3, generic_damerau_levenshtein(&vec!['a', 'b'], &vec!['b', 'a', 'c'])); //:test transposition case",
          "    assert_eq!(4, generic_damerau_levenshtein(&vec!['a', 'b', 'c'], &vec!['x', 'y', 'z'])); // completely different characters",
          "    assert_eq!(2, generic_damerau_levenshtein(&vec!['x', 'y'], &vec!['x', 'y', 'z'])); // precondition i in 1..(a_len + 1) false",
          "    assert_eq!(5, generic_damerau_levenshtein(&vec!['x', 'y', 'z'], &vec!['a', 'b', 'c', 'd', 'e'])); // precondition j in 1..(b_len + 1) false"
        ],
        "code": [
          "{",
          "    let a_elems = vec!['a', 'b'];",
          "    let b_elems = vec!['b', 'c', 'a'];",
          "    let result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &vec!['b', 'c', 'a'])); // precondition: a_len == 0 true",
          "    assert_eq!(2, generic_damerau_levenshtein(&vec!['a', 'b'], &[])); // precondition: b_len == 0 true",
          "    assert_eq!(1, generic_damerau_levenshtein(&vec!['a', 'b'], &vec!['b'])); // precondition i in 0..(a_len + 1) true, j in 0..(b_len + 1) true",
          "    assert_eq!(3, generic_damerau_levenshtein(&vec!['a', 'b'], &vec!['b', 'b'])); // precondition i in 1..(a_len + 1) true, j in 0..(b_len + 1) false",
          "    assert_eq!(3, generic_damerau_levenshtein(&vec!['a', 'b'], &vec!['c', 'd', 'e'])); // precondition: a_elems[i - 1] == b_elems[j - 1] false",
          "    assert_eq!(1, generic_damerau_levenshtein(&vec!['a'], &vec!['a'])); // same characters",
          "    assert_eq!(4, generic_damerau_levenshtein(&vec!['a'], &vec!['b', 'c', 'd', 'e'])); // a_len == 1 and b_len > 1",
          "    assert_eq!(3, generic_damerau_levenshtein(&vec!['a', 'b'], &vec!['b', 'a', 'c'])); //:test transposition case",
          "    assert_eq!(4, generic_damerau_levenshtein(&vec!['a', 'b', 'c'], &vec!['x', 'y', 'z'])); // completely different characters",
          "    assert_eq!(2, generic_damerau_levenshtein(&vec!['x', 'y'], &vec!['x', 'y', 'z'])); // precondition i in 1..(a_len + 1) false",
          "    assert_eq!(5, generic_damerau_levenshtein(&vec!['x', 'y', 'z'], &vec!['a', 'b', 'c', 'd', 'e'])); // precondition j in 1..(b_len + 1) false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]