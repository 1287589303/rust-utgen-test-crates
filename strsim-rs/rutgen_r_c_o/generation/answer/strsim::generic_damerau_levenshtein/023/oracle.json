[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = Vec::new();",
          "    let b_elems: Vec<i32> = Vec::new();",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![];",
          "    assert_eq!(3, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = vec![4, 5];",
          "    assert_eq!(2, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![2, 3, 1];",
          "    assert_eq!(2, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![1];",
          "    assert_eq!(0, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![1, 2];",
          "    assert_eq!(0, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![2, 1];",
          "    assert_eq!(1, generic_damerau_levenshtein(&a_elems, &b_elems));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = Vec::new();",
          "    let b_elems: Vec<i32> = Vec::new();",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![];",
          "    assert_eq!(3, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = vec![4, 5];",
          "    assert_eq!(2, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![2, 3, 1];",
          "    assert_eq!(2, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![1];",
          "    assert_eq!(0, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![1, 2];",
          "    assert_eq!(0, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![2, 1];",
          "    assert_eq!(1, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = Vec::new();",
          "    let b_elems: Vec<i32> = vec![1, 2, 3];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = Vec::new();",
          "    assert_eq!(3, generic_damerau_levenshtein(&a_elems, &[]));",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![1];",
          "    assert_eq!(0, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![2];",
          "    assert_eq!(1, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![2, 1];",
          "    assert_eq!(2, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![1, 2];",
          "    assert_eq!(1, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![3, 2];",
          "    assert_eq!(1, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = vec![];",
          "    assert_eq!(0, generic_damerau_levenshtein(&a_elems, &b_elems));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = Vec::new();",
          "    let b_elems: Vec<i32> = vec![1, 2, 3];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = Vec::new();",
          "    assert_eq!(3, generic_damerau_levenshtein(&a_elems, &[]));",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![1];",
          "    assert_eq!(0, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![2];",
          "    assert_eq!(1, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![2, 1];",
          "    assert_eq!(2, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![1, 2];",
          "    assert_eq!(1, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = vec![3, 2];",
          "    assert_eq!(1, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "    let a_elems: Vec<i32> = vec![];",
          "    let b_elems: Vec<i32> = vec![];",
          "    assert_eq!(0, generic_damerau_levenshtein(&a_elems, &b_elems));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = Vec::new();",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 3], &[1, 2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2], &[1, 3]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![1, 2];",
          "    let b_elems: Vec<i32> = Vec::new();",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[2]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 3], &[1, 2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2], &[1, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![1];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 1], &[1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[3, 2, 1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2], &[2, 3]));",
          "    assert_eq!(5, generic_damerau_levenshtein(&[1, 2, 3, 4], &[1, 3, 2, 4]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 1, 2], &[1, 2, 1]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![1];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[1]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 1], &[1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[3, 2, 1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2], &[2, 3]));",
          "    assert_eq!(5, generic_damerau_levenshtein(&[1, 2, 3, 4], &[1, 3, 2, 4]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 1, 2], &[1, 2, 1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![2];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, generic_damerau_levenshtein(&[], &[2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 1], &[2]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1], &[2, 2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[2], &[2]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[2, 3, 1]));",
          "    assert_eq!(5, generic_damerau_levenshtein(&[1, 2, 3, 4], &[1, 4, 5, 6]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![1];",
          "    let b_elems: Vec<i32> = vec![2];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(1, generic_damerau_levenshtein(&[], &[2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 1], &[2]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1], &[2, 2]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[2], &[2]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[2, 3, 1]));",
          "    assert_eq!(5, generic_damerau_levenshtein(&[1, 2, 3, 4], &[1, 4, 5, 6]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![1, 2, 3];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1], &[1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[3, 2, 1]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2, 3], &[1, 3]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 2, 3]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[2]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![1, 2, 3];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1], &[1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3], &[3, 2, 1]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2, 3], &[1, 3]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 2, 3]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[2]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![3, 2, 1];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[3, 2, 1]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 3], &[2, 3]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2], &[1, 2]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 1, 1], &[1, 2, 3]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![1, 2, 3];",
          "    let b_elems: Vec<i32> = vec![3, 2, 1];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[3, 2, 1]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 3], &[2, 3]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1, 2], &[1, 2]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 1, 1], &[1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<&str> = vec![\"a\", \"b\", \"c\"];",
          "    let b_elems: Vec<&str> = vec![\"b\", \"a\", \"c\"];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[\"a\", \"b\", \"c\"]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[\"a\", \"b\", \"c\"], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[\"a\", \"b\", \"c\"], &[\"b\", \"a\", \"c\"]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[\"a\"], &[\"a\"]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[\"a\"], &[\"b\"]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[\"a\", \"b\"], &[\"b\", \"a\"]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[\"a\", \"b\"], &[\"c\", \"d\"]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[\"a\", \"b\"], &[\"a\", \"b\"]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[\"a\", \"b\", \"c\"], &[\"c\", \"b\", \"a\"]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[\"a\", \"x\", \"b\", \"c\"], &[\"b\", \"a\", \"c\"]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<&str> = vec![\"a\", \"b\", \"c\"];",
          "    let b_elems: Vec<&str> = vec![\"b\", \"a\", \"c\"];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[], &[\"a\", \"b\", \"c\"]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[\"a\", \"b\", \"c\"], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[\"a\", \"b\", \"c\"], &[\"b\", \"a\", \"c\"]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[\"a\"], &[\"a\"]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[\"a\"], &[\"b\"]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[\"a\", \"b\"], &[\"b\", \"a\"]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[\"a\", \"b\"], &[\"c\", \"d\"]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[\"a\", \"b\"], &[\"a\", \"b\"]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[\"a\", \"b\", \"c\"], &[\"c\", \"b\", \"a\"]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[\"a\", \"x\", \"b\", \"c\"], &[\"b\", \"a\", \"c\"]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a_elems: Vec<i32> = vec![1, 2, 3, 4];",
          "    let b_elems: Vec<i32> = vec![1, 3, 4];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[1, 2]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3, 4], &[1, 3, 4]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[], &[1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1], &[1]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3, 4], &[5, 6, 7, 8]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[10, 20], &[10, 20]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 1, 2], &[1, 2, 2]));",
          "    assert_eq!(5, generic_damerau_levenshtein(&[1, 2, 3], &[3, 2, 1]));"
        ],
        "code": [
          "{",
          "    let a_elems: Vec<i32> = vec![1, 2, 3, 4];",
          "    let b_elems: Vec<i32> = vec![1, 3, 4];",
          "    let _result = generic_damerau_levenshtein(&a_elems, &b_elems);",
          "    assert_eq!(0, generic_damerau_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[], &[1, 2]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2], &[2, 3, 1]));",
          "    assert_eq!(2, generic_damerau_levenshtein(&[1, 2, 3, 4], &[1, 3, 4]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[1], &[]));",
          "    assert_eq!(1, generic_damerau_levenshtein(&[], &[1]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[1], &[1]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(4, generic_damerau_levenshtein(&[1, 2, 3, 4], &[5, 6, 7, 8]));",
          "    assert_eq!(0, generic_damerau_levenshtein(&[10, 20], &[10, 20]));",
          "    assert_eq!(3, generic_damerau_levenshtein(&[1, 1, 2], &[1, 2, 2]));",
          "    assert_eq!(5, generic_damerau_levenshtein(&[1, 2, 3], &[3, 2, 1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]