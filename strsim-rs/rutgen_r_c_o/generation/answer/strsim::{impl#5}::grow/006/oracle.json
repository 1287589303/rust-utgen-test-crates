[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 3,",
          "        fill: 3,",
          "        mask: 3,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 10 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 20 },",
          "            GrowingHashmapMapElemChar { key: 3, value: 30 },",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.used, 3);",
          "    assert_eq!(hashmap.fill, 3);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert!(hashmap.map.as_ref().unwrap().len() == 8);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].key, 1);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, 10);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].key, 2);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, 20);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2].key, 3);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2].value, 30);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[3].value, Default::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[3].key, 0);"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 3,",
          "        fill: 3,",
          "        mask: 3,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 10 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 20 },",
          "            GrowingHashmapMapElemChar { key: 3, value: 30 },",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(8);",
          "    assert_eq!(hashmap.used, 3);",
          "    assert_eq!(hashmap.fill, 3);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert!(hashmap.map.as_ref().unwrap().len() == 8);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].key, 1);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, 10);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].key, 2);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, 20);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2].key, 3);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2].value, 30);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[3].value, Default::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[3].key, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 3,",
          "        fill: 3,",
          "        mask: 3,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 10 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 20 },",
          "            GrowingHashmapMapElemChar { key: 3, value: 30 },",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(4);",
          "}"
        ],
        "oracle": [
          "    hashmap.used == 3",
          "    hashmap.fill == 3",
          "    hashmap.mask == 7",
          "    hashmap.map.as_ref().unwrap()[0].key == 1",
          "    hashmap.map.as_ref().unwrap()[0].value == 10",
          "    hashmap.map.as_ref().unwrap()[1].key == 2",
          "    hashmap.map.as_ref().unwrap()[1].value == 20",
          "    hashmap.map.as_ref().unwrap()[2].key == 3",
          "    hashmap.map.as_ref().unwrap()[2].value == 30",
          "    hashmap.map.as_ref().unwrap()[3].value == Default::default()",
          "    hashmap.map.as_ref().unwrap().len() == 8",
          "    hashmap.used == 3 after grow call",
          "    hashmap.fill == 3 after grow call",
          "    hashmap.mask == 7 after grow call"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 3,",
          "        fill: 3,",
          "        mask: 3,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 10 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 20 },",
          "            GrowingHashmapMapElemChar { key: 3, value: 30 },",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(4);",
          "    hashmap.used == 3",
          "    hashmap.fill == 3",
          "    hashmap.mask == 7",
          "    hashmap.map.as_ref().unwrap()[0].key == 1",
          "    hashmap.map.as_ref().unwrap()[0].value == 10",
          "    hashmap.map.as_ref().unwrap()[1].key == 2",
          "    hashmap.map.as_ref().unwrap()[1].value == 20",
          "    hashmap.map.as_ref().unwrap()[2].key == 3",
          "    hashmap.map.as_ref().unwrap()[2].value == 30",
          "    hashmap.map.as_ref().unwrap()[3].value == Default::default()",
          "    hashmap.map.as_ref().unwrap().len() == 8",
          "    hashmap.used == 3 after grow call",
          "    hashmap.fill == 3 after grow call",
          "    hashmap.mask == 7 after grow call",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 2,",
          "        fill: 2,",
          "        mask: 3,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 10 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 20 },",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.used, 2);",
          "    assert_eq!(hashmap.fill, 2);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].key, 1);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, 10);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].key, 2);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, 20);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2].value, Default::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[3].value, Default::default());"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 2,",
          "        fill: 2,",
          "        mask: 3,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 10 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 20 },",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(5);",
          "    assert_eq!(hashmap.used, 2);",
          "    assert_eq!(hashmap.fill, 2);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].key, 1);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, 10);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].key, 2);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, 20);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2].value, Default::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[3].value, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar::<i32>::default(),",
          "            GrowingHashmapMapElemChar::<i32>::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.used, 1);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.mask, 3);",
          "    assert!(hashmap.map.as_ref().unwrap().iter().all(|elem| elem.value == 0));",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 4);",
          "    assert!(hashmap.map.as_ref().unwrap()[0].value != Default::default() || hashmap.map.as_ref().unwrap()[0].key != 0);",
          "    assert!(hashmap.map.as_ref().unwrap()[1].value == Default::default());"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar::<i32>::default(),",
          "            GrowingHashmapMapElemChar::<i32>::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(3);",
          "    assert_eq!(hashmap.used, 1);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.mask, 3);",
          "    assert!(hashmap.map.as_ref().unwrap().iter().all(|elem| elem.value == 0));",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 4);",
          "    assert!(hashmap.map.as_ref().unwrap()[0].value != Default::default() || hashmap.map.as_ref().unwrap()[0].key != 0);",
          "    assert!(hashmap.map.as_ref().unwrap()[1].value == Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]