[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: Some(vec![GrowingHashmapMapElemChar::default(); 1]),",
          "    };",
          "    hashmap.grow(0);",
          "}"
        ],
        "oracle": [
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 0, fill: 0, mask: 0, map: Some(vec![GrowingHashmapMapElemChar::default(); 1]) };",
          "    hashmap.grow(1);",
          "    assert_eq!(hashmap.mask, 1);",
          "    assert_eq!(hashmap.fill, 0);",
          "    assert_eq!(hashmap.used, 0);",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 1, fill: 1, mask: 1, map: Some(vec![GrowingHashmapMapElemChar { key: 1, value: 2 }, GrowingHashmapMapElemChar::default()]) };",
          "    hashmap.grow(1);",
          "    assert_eq!(hashmap.mask, 3);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.used, 1);",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 1, fill: 1, mask: 1, map: Some(vec![GrowingHashmapMapElemChar { key: 1, value: 2 }, GrowingHashmapMapElemChar { key: 2, value: 3 }]) };",
          "    hashmap.grow(1);",
          "    assert_eq!(hashmap.mask, 3);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.used, 1);",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 2, fill: 2, mask: 3, map: Some(vec![GrowingHashmapMapElemChar { key: 1, value: 2 }, GrowingHashmapMapElemChar { key: 2, value: 3 }, GrowingHashmapMapElemChar::default(), GrowingHashmapMapElemChar::default()]) };",
          "    hashmap.grow(3);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert_eq!(hashmap.fill, 2);",
          "    assert_eq!(hashmap.used, 2);"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: Some(vec![GrowingHashmapMapElemChar::default(); 1]),",
          "    };",
          "    hashmap.grow(0);",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 0, fill: 0, mask: 0, map: Some(vec![GrowingHashmapMapElemChar::default(); 1]) };",
          "    hashmap.grow(1);",
          "    assert_eq!(hashmap.mask, 1);",
          "    assert_eq!(hashmap.fill, 0);",
          "    assert_eq!(hashmap.used, 0);",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 1, fill: 1, mask: 1, map: Some(vec![GrowingHashmapMapElemChar { key: 1, value: 2 }, GrowingHashmapMapElemChar::default()]) };",
          "    hashmap.grow(1);",
          "    assert_eq!(hashmap.mask, 3);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.used, 1);",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 1, fill: 1, mask: 1, map: Some(vec![GrowingHashmapMapElemChar { key: 1, value: 2 }, GrowingHashmapMapElemChar { key: 2, value: 3 }]) };",
          "    hashmap.grow(1);",
          "    assert_eq!(hashmap.mask, 3);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.used, 1);",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 2, fill: 2, mask: 3, map: Some(vec![GrowingHashmapMapElemChar { key: 1, value: 2 }, GrowingHashmapMapElemChar { key: 2, value: 3 }, GrowingHashmapMapElemChar::default(), GrowingHashmapMapElemChar::default()]) };",
          "    hashmap.grow(3);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert_eq!(hashmap.fill, 2);",
          "    assert_eq!(hashmap.used, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 42 },",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(2);",
          "}"
        ],
        "oracle": [
          "    hashmap.used == 1",
          "    hashmap.fill == 1",
          "    hashmap.mask == 1",
          "    hashmap.map.is_some()",
          "    hashmap.map.as_ref().unwrap().len() == 2",
          "    hashmap.map.as_ref().unwrap()[0].key == 1",
          "    hashmap.map.as_ref().unwrap()[0].value == 42",
          "    hashmap.map.as_ref().unwrap()[1].key == 0",
          "    hashmap.map.as_ref().unwrap()[1].value == 0",
          "    hashmap.map.as_ref().unwrap()[0].value != Default::default()",
          "    hashmap.map.as_ref().unwrap()[1].value == Default::default()"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 42 },",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(2);",
          "    hashmap.used == 1",
          "    hashmap.fill == 1",
          "    hashmap.mask == 1",
          "    hashmap.map.is_some()",
          "    hashmap.map.as_ref().unwrap().len() == 2",
          "    hashmap.map.as_ref().unwrap()[0].key == 1",
          "    hashmap.map.as_ref().unwrap()[0].value == 42",
          "    hashmap.map.as_ref().unwrap()[1].key == 0",
          "    hashmap.map.as_ref().unwrap()[1].value == 0",
          "    hashmap.map.as_ref().unwrap()[0].value != Default::default()",
          "    hashmap.map.as_ref().unwrap()[1].value == Default::default()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 42 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 84 },",
          "        ]),",
          "    };",
          "    hashmap.grow(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.used, 1);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.mask, 3);",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 4);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].key, 1);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, 42);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].key, 2);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, 84);"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 42 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 84 },",
          "        ]),",
          "    };",
          "    hashmap.grow(3);",
          "    assert_eq!(hashmap.used, 1);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.mask, 3);",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 4);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].key, 1);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, 42);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].key, 2);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, 84);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 42 },",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(2);",
          "}"
        ],
        "oracle": [
          "    hashmap.mask == 1",
          "    hashmap.fill == 1",
          "    hashmap.used == 1",
          "    hashmap.map.as_ref().unwrap()[0].key == 1",
          "    hashmap.map.as_ref().unwrap()[0].value == 42",
          "    hashmap.map.as_ref().unwrap()[1].key == 0",
          "    hashmap.map.as_ref().unwrap()[1].value == 0",
          "    ",
          "    let mut hashmap_2: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "    used: 1,",
          "    fill: 1,",
          "    mask: 1,",
          "    map: Some(vec![",
          "    GrowingHashmapMapElemChar { key: 2, value: 100 },",
          "    GrowingHashmapMapElemChar::default(),",
          "    ]),",
          "    };",
          "    hashmap_2.grow(1);",
          "    assert_eq!(hashmap_2.mask, 1);",
          "    assert_eq!(hashmap_2.fill, 1);",
          "    assert_eq!(hashmap_2.used, 1);",
          "    assert_eq!(hashmap_2.map.as_ref().unwrap()[0].key, 2);",
          "    assert_eq!(hashmap_2.map.as_ref().unwrap()[0].value, 100);",
          "    assert_eq!(hashmap_2.map.as_ref().unwrap()[1].key, 0);",
          "    assert_eq!(hashmap_2.map.as_ref().unwrap()[1].value, 0);",
          "    ",
          "    let mut hashmap_3: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "    used: 0,",
          "    fill: 0,",
          "    mask: 3,",
          "    map: Some(vec![",
          "    GrowingHashmapMapElemChar { key: 3, value: 200 },",
          "    GrowingHashmapMapElemChar::default(),",
          "    GrowingHashmapMapElemChar::default(),",
          "    GrowingHashmapMapElemChar::default(),",
          "    ]),",
          "    };",
          "    hashmap_3.grow(0);",
          "    assert_eq!(hashmap_3.used, 0);",
          "    assert!(hashmap_3.map.as_ref().unwrap().iter().all(|elem| elem.value == Default::default()));"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 1, value: 42 },",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "    hashmap.grow(2);",
          "    hashmap.mask == 1",
          "    hashmap.fill == 1",
          "    hashmap.used == 1",
          "    hashmap.map.as_ref().unwrap()[0].key == 1",
          "    hashmap.map.as_ref().unwrap()[0].value == 42",
          "    hashmap.map.as_ref().unwrap()[1].key == 0",
          "    hashmap.map.as_ref().unwrap()[1].value == 0",
          "    ",
          "    let mut hashmap_2: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "    used: 1,",
          "    fill: 1,",
          "    mask: 1,",
          "    map: Some(vec![",
          "    GrowingHashmapMapElemChar { key: 2, value: 100 },",
          "    GrowingHashmapMapElemChar::default(),",
          "    ]),",
          "    };",
          "    hashmap_2.grow(1);",
          "    assert_eq!(hashmap_2.mask, 1);",
          "    assert_eq!(hashmap_2.fill, 1);",
          "    assert_eq!(hashmap_2.used, 1);",
          "    assert_eq!(hashmap_2.map.as_ref().unwrap()[0].key, 2);",
          "    assert_eq!(hashmap_2.map.as_ref().unwrap()[0].value, 100);",
          "    assert_eq!(hashmap_2.map.as_ref().unwrap()[1].key, 0);",
          "    assert_eq!(hashmap_2.map.as_ref().unwrap()[1].value, 0);",
          "    ",
          "    let mut hashmap_3: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "    used: 0,",
          "    fill: 0,",
          "    mask: 3,",
          "    map: Some(vec![",
          "    GrowingHashmapMapElemChar { key: 3, value: 200 },",
          "    GrowingHashmapMapElemChar::default(),",
          "    GrowingHashmapMapElemChar::default(),",
          "    GrowingHashmapMapElemChar::default(),",
          "    ]),",
          "    };",
          "    hashmap_3.grow(0);",
          "    assert_eq!(hashmap_3.used, 0);",
          "    assert!(hashmap_3.map.as_ref().unwrap().iter().all(|elem| elem.value == Default::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: Some(vec![GrowingHashmapMapElemChar::default(); 2]),",
          "    };",
          "    hashmap.grow(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.used, 0);",
          "    assert_eq!(hashmap.fill, 0);",
          "    assert_eq!(hashmap.mask, 1);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 2);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, Default::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, Default::default());",
          "    ",
          "    let mut hashmap2: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "    used: 1,",
          "    fill: 1,",
          "    mask: 0,",
          "    map: Some(vec![GrowingHashmapMapElemChar { key: 1, value: 1 }, GrowingHashmapMapElemChar::default()]),",
          "    };",
          "    hashmap2.grow(1);",
          "    assert_eq!(hashmap2.used, 1);",
          "    assert_eq!(hashmap2.fill, 1);",
          "    assert_eq!(hashmap2.mask, 1);",
          "    assert_eq!(hashmap2.map.as_ref().unwrap()[0].key, 1);",
          "    assert_eq!(hashmap2.map.as_ref().unwrap()[0].value, 1);",
          "    assert_eq!(hashmap2.map.as_ref().unwrap()[1].value, Default::default());"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: Some(vec![GrowingHashmapMapElemChar::default(); 2]),",
          "    };",
          "    hashmap.grow(1);",
          "    assert_eq!(hashmap.used, 0);",
          "    assert_eq!(hashmap.fill, 0);",
          "    assert_eq!(hashmap.mask, 1);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 2);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, Default::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, Default::default());",
          "    ",
          "    let mut hashmap2: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "    used: 1,",
          "    fill: 1,",
          "    mask: 0,",
          "    map: Some(vec![GrowingHashmapMapElemChar { key: 1, value: 1 }, GrowingHashmapMapElemChar::default()]),",
          "    };",
          "    hashmap2.grow(1);",
          "    assert_eq!(hashmap2.used, 1);",
          "    assert_eq!(hashmap2.fill, 1);",
          "    assert_eq!(hashmap2.mask, 1);",
          "    assert_eq!(hashmap2.map.as_ref().unwrap()[0].key, 1);",
          "    assert_eq!(hashmap2.map.as_ref().unwrap()[0].value, 1);",
          "    assert_eq!(hashmap2.map.as_ref().unwrap()[1].value, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]