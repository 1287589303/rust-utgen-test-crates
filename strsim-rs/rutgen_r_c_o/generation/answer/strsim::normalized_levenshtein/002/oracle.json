[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"\";",
          "    let b = \"a\";",
          "    normalized_levenshtein(a, b);",
          "}"
        ],
        "oracle": [
          "    assert!((normalized_levenshtein(\"\", \"a\") - (1.0 - (levenshtein(\"\", \"a\") as f64) / (0.max(1) as f64))).abs() < 0.00001);"
        ],
        "code": [
          "{",
          "    let a = \"\";",
          "    let b = \"a\";",
          "    normalized_levenshtein(a, b);",
          "    assert!((normalized_levenshtein(\"\", \"a\") - (1.0 - (levenshtein(\"\", \"a\") as f64) / (0.max(1) as f64))).abs() < 0.00001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"\";",
          "    let b = \"abcdefghij\";",
          "    normalized_levenshtein(a, b);",
          "}"
        ],
        "oracle": [
          "    assert!((normalized_levenshtein(\"\", \"abcdefghij\") - (1.0 - (levenshtein(\"\", \"abcdefghij\") as f64) / (0.max(10) as f64))).abs() < 0.00001);"
        ],
        "code": [
          "{",
          "    let a = \"\";",
          "    let b = \"abcdefghij\";",
          "    normalized_levenshtein(a, b);",
          "    assert!((normalized_levenshtein(\"\", \"abcdefghij\") - (1.0 - (levenshtein(\"\", \"abcdefghij\") as f64) / (0.max(10) as f64))).abs() < 0.00001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"\";",
          "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
          "    normalized_levenshtein(a, b);",
          "}"
        ],
        "oracle": [
          "    let a = \"\";",
          "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
          "    assert!((normalized_levenshtein(a, b) - (1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64))).abs() < 0.00001);"
        ],
        "code": [
          "{",
          "    let a = \"\";",
          "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
          "    normalized_levenshtein(a, b);",
          "    let a = \"\";",
          "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
          "    assert!((normalized_levenshtein(a, b) - (1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64))).abs() < 0.00001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"\";",
          "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
          "    normalized_levenshtein(a, b);",
          "}"
        ],
        "oracle": [
          "    assert!((normalized_levenshtein(\"\", \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") - (1.0 - (levenshtein(\"\", \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") as f64) / (0.max(66) as f64))).abs() < 0.00001);"
        ],
        "code": [
          "{",
          "    let a = \"\";",
          "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
          "    normalized_levenshtein(a, b);",
          "    assert!((normalized_levenshtein(\"\", \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") - (1.0 - (levenshtein(\"\", \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") as f64) / (0.max(66) as f64))).abs() < 0.00001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]