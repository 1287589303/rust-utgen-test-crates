[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = normalized_levenshtein(\"abc\", \"def\");",
          "}"
        ],
        "oracle": [
          "    assert!((result - 1.0).abs() < 0.00001);",
          "    assert!((result - (3.0 / 3.0)).abs() < 0.00001);",
          "    assert!((result - (levenshtein(\"abc\", \"def\") as f64) / 3.0).abs() < 0.00001);",
          "    assert!(result >= 0.0 && result <= 1.0);",
          "    assert!((result - 0.0).abs() < 0.00001);"
        ],
        "code": [
          "{",
          "    let result = normalized_levenshtein(\"abc\", \"def\");",
          "    assert!((result - 1.0).abs() < 0.00001);",
          "    assert!((result - (3.0 / 3.0)).abs() < 0.00001);",
          "    assert!((result - (levenshtein(\"abc\", \"def\") as f64) / 3.0).abs() < 0.00001);",
          "    assert!(result >= 0.0 && result <= 1.0);",
          "    assert!((result - 0.0).abs() < 0.00001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = normalized_levenshtein(\"abc\", \"abc\");",
          "}"
        ],
        "oracle": [
          "    assert!((result - 1.0).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"abc\", \"ab\");",
          "    assert!((result - 0.66667).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"abc\", \"a\");",
          "    assert!((result - 0.33333).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"abc\", \"de\");",
          "    assert!((result - 0.0).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"a long string\", \"a string\");",
          "    assert!((result - 0.61538).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"rust\", \"dust\");",
          "    assert!((result - 0.75).abs() < 0.00001);"
        ],
        "code": [
          "{",
          "    let result = normalized_levenshtein(\"abc\", \"abc\");",
          "    assert!((result - 1.0).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"abc\", \"ab\");",
          "    assert!((result - 0.66667).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"abc\", \"a\");",
          "    assert!((result - 0.33333).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"abc\", \"de\");",
          "    assert!((result - 0.0).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"a long string\", \"a string\");",
          "    assert!((result - 0.61538).abs() < 0.00001);",
          "    let result = normalized_levenshtein(\"rust\", \"dust\");",
          "    assert!((result - 0.75).abs() < 0.00001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = normalized_levenshtein(\"abcd\", \"abcde\");",
          "}"
        ],
        "oracle": [
          "    assert!((result - 0.8).abs() < 0.00001);"
        ],
        "code": [
          "{",
          "    let result = normalized_levenshtein(\"abcd\", \"abcde\");",
          "    assert!((result - 0.8).abs() < 0.00001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = normalized_levenshtein(\"a\", \"b\");",
          "}"
        ],
        "oracle": [
          "    assert!((result - 1.0).abs() < 0.00001);",
          "    assert!((result - 0.0).abs() < 0.00001);"
        ],
        "code": [
          "{",
          "    let result = normalized_levenshtein(\"a\", \"b\");",
          "    assert!((result - 1.0).abs() < 0.00001);",
          "    assert!((result - 0.0).abs() < 0.00001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]