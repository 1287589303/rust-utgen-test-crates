[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let i = 0;",
          "    let j = 0;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    ",
          "    let i = 1;",
          "    let j = 0;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 1);",
          "    ",
          "    let i = 0;",
          "    let j = 1;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 1);",
          "    ",
          "    let i = 0;",
          "    let j = 0;",
          "    let width = 2;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 0);",
          "    ",
          "    let i = 1;",
          "    let j = 1;",
          "    let width = 2;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 3);",
          "    ",
          "    let i = 2;",
          "    let j = 1;",
          "    let width = 3;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 5);"
        ],
        "code": [
          "{",
          "    let i = 0;",
          "    let j = 0;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 0);",
          "    ",
          "    let i = 1;",
          "    let j = 0;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 1);",
          "    ",
          "    let i = 0;",
          "    let j = 1;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 1);",
          "    ",
          "    let i = 0;",
          "    let j = 0;",
          "    let width = 2;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 0);",
          "    ",
          "    let i = 1;",
          "    let j = 1;",
          "    let width = 2;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 3);",
          "    ",
          "    let i = 2;",
          "    let j = 1;",
          "    let width = 3;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let i = 1;",
          "    let j = 2;",
          "    let width = 3;",
          "    let result = flat_index(i, j, width);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 7);"
        ],
        "code": [
          "{",
          "    let i = 1;",
          "    let j = 2;",
          "    let width = 3;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let i = 10;",
          "    let j = 5;",
          "    let width = 20;",
          "    let result = flat_index(i, j, width);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 5 * 20 + 10);"
        ],
        "code": [
          "{",
          "    let i = 10;",
          "    let j = 5;",
          "    let width = 20;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 5 * 20 + 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let i = 1;",
          "    let j = 3;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4);"
        ],
        "code": [
          "{",
          "    let i = 1;",
          "    let j = 3;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let i = 0;",
          "    let j = 0;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert_eq!(result, 0 * 1 + 0);",
          "    ",
          "    let i = 1;",
          "    let j = 0;",
          "    let width = 2;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(result, 0 * 2 + 1);",
          "    ",
          "    let i = 0;",
          "    let j = 1;",
          "    let width = 2;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 2);",
          "    assert_eq!(result, 1 * 2 + 0);",
          "    ",
          "    let i = 2;",
          "    let j = 3;",
          "    let width = 4;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 14);",
          "    assert_eq!(result, 3 * 4 + 2);",
          "    ",
          "    let i = 3;",
          "    let j = 2;",
          "    let width = 5;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 13);",
          "    assert_eq!(result, 2 * 5 + 3);"
        ],
        "code": [
          "{",
          "    let i = 0;",
          "    let j = 0;",
          "    let width = 1;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 0);",
          "    assert_eq!(result, 0 * 1 + 0);",
          "    ",
          "    let i = 1;",
          "    let j = 0;",
          "    let width = 2;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 1);",
          "    assert_eq!(result, 0 * 2 + 1);",
          "    ",
          "    let i = 0;",
          "    let j = 1;",
          "    let width = 2;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 2);",
          "    assert_eq!(result, 1 * 2 + 0);",
          "    ",
          "    let i = 2;",
          "    let j = 3;",
          "    let width = 4;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 14);",
          "    assert_eq!(result, 3 * 4 + 2);",
          "    ",
          "    let i = 3;",
          "    let j = 2;",
          "    let width = 5;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 13);",
          "    assert_eq!(result, 2 * 5 + 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let i = 0;",
          "    let j = 10;",
          "    let width = 10;",
          "    let result = flat_index(i, j, width);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 100);"
        ],
        "code": [
          "{",
          "    let i = 0;",
          "    let j = 10;",
          "    let width = 10;",
          "    let result = flat_index(i, j, width);",
          "    assert_eq!(result, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]