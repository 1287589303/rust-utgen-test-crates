[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = generic_levenshtein(&[], &[]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4, 5, 6]);",
          "    assert_eq!(3, result);",
          "    let result = generic_levenshtein(&[1], &[2]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[1], &[]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[], &[1]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[1, 2], &[1, 2]);",
          "    assert_eq!(0, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[3, 2, 1]);",
          "    assert_eq!(3, result);"
        ],
        "code": [
          "{",
          "    let result = generic_levenshtein(&[], &[]);",
          "    assert_eq!(0, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4, 5, 6]);",
          "    assert_eq!(3, result);",
          "    let result = generic_levenshtein(&[1], &[2]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[1], &[]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[], &[1]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[1, 2], &[1, 2]);",
          "    assert_eq!(0, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[3, 2, 1]);",
          "    assert_eq!(3, result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2, 3]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4, 5, 6]);",
          "    assert_eq!(3, result);",
          "    let result = generic_levenshtein(&[], &[1, 2, 3]);",
          "    assert_eq!(3, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[]);",
          "    assert_eq!(3, result);",
          "    let result = generic_levenshtein(&[1], &[2]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[1, 2], &[2, 1]);",
          "    assert_eq!(2, result);",
          "    let result = generic_levenshtein(&[1, 2, 3, 4], &[1, 2]);",
          "    assert_eq!(2, result);"
        ],
        "code": [
          "{",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2, 3]);",
          "    assert_eq!(0, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4, 5, 6]);",
          "    assert_eq!(3, result);",
          "    let result = generic_levenshtein(&[], &[1, 2, 3]);",
          "    assert_eq!(3, result);",
          "    let result = generic_levenshtein(&[1, 2, 3], &[]);",
          "    assert_eq!(3, result);",
          "    let result = generic_levenshtein(&[1], &[2]);",
          "    assert_eq!(1, result);",
          "    let result = generic_levenshtein(&[1, 2], &[2, 1]);",
          "    assert_eq!(2, result);",
          "    let result = generic_levenshtein(&[1, 2, 3, 4], &[1, 2]);",
          "    assert_eq!(2, result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = generic_levenshtein(&[1, 2], &[1, 2, 3, 4]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(2, result);",
          "    assert_eq!(3, generic_levenshtein(&[1], &[2, 3, 4]));",
          "    assert_eq!(4, generic_levenshtein(&[], &[1, 2, 3, 4]));",
          "    assert_eq!(0, generic_levenshtein(&[], &[]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[2]));",
          "    assert_eq!(5, generic_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4, 5]));",
          "    assert_eq!(6, generic_levenshtein(&[1, 1, 1, 1, 1], &[2, 2, 2, 2, 2, 2]));",
          "    assert_eq!(0, generic_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3, 4], &[1, 2]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[1]));",
          "    assert_eq!(5, generic_levenshtein(&[1, 2, 3], &[4, 5, 6, 7, 8]));"
        ],
        "code": [
          "{",
          "    let result = generic_levenshtein(&[1, 2], &[1, 2, 3, 4]);",
          "    assert_eq!(2, result);",
          "    assert_eq!(3, generic_levenshtein(&[1], &[2, 3, 4]));",
          "    assert_eq!(4, generic_levenshtein(&[], &[1, 2, 3, 4]));",
          "    assert_eq!(0, generic_levenshtein(&[], &[]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[2]));",
          "    assert_eq!(5, generic_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4, 5]));",
          "    assert_eq!(6, generic_levenshtein(&[1, 1, 1, 1, 1], &[2, 2, 2, 2, 2, 2]));",
          "    assert_eq!(0, generic_levenshtein(&[1, 2, 3], &[1, 2, 3]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3, 4], &[1, 2]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[1]));",
          "    assert_eq!(5, generic_levenshtein(&[1, 2, 3], &[4, 5, 6, 7, 8]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, result);",
          "    assert_eq!(2, generic_levenshtein(&[1, 2, 3], &[1, 2]));",
          "    assert_eq!(4, generic_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(0, generic_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[2]));",
          "    assert_eq!(4, generic_levenshtein(&[1, 2, 3, 4], &[1, 2, 3]));",
          "    assert_eq!(5, generic_levenshtein(&[1, 2], &[1, 2, 3, 4, 5]));",
          "    assert_eq!(0, generic_levenshtein(&[1, 2], &[1, 2]));",
          "    assert_eq!(6, generic_levenshtein(&[1, 4, 3], &[2, 5, 6, 7]));"
        ],
        "code": [
          "{",
          "    let result = generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4]);",
          "    assert_eq!(3, result);",
          "    assert_eq!(2, generic_levenshtein(&[1, 2, 3], &[1, 2]));",
          "    assert_eq!(4, generic_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(0, generic_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3], &[4, 5, 6]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[2]));",
          "    assert_eq!(4, generic_levenshtein(&[1, 2, 3, 4], &[1, 2, 3]));",
          "    assert_eq!(5, generic_levenshtein(&[1, 2], &[1, 2, 3, 4, 5]));",
          "    assert_eq!(0, generic_levenshtein(&[1, 2], &[1, 2]));",
          "    assert_eq!(6, generic_levenshtein(&[1, 4, 3], &[2, 5, 6, 7]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = generic_levenshtein(&[1, 2, 3], &[4, 5, 6]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, result);",
          "    assert_eq!(0, generic_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(3, generic_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4, 5, 6]));",
          "    assert_eq!(2, generic_levenshtein(&[1, 2, 3], &[1, 2]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[2]));",
          "    assert_eq!(0, generic_levenshtein(&[1], &[1]));"
        ],
        "code": [
          "{",
          "    let result = generic_levenshtein(&[1, 2, 3], &[4, 5, 6]);",
          "    assert_eq!(3, result);",
          "    assert_eq!(0, generic_levenshtein(&[], &[]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3], &[]));",
          "    assert_eq!(3, generic_levenshtein(&[], &[1, 2, 3]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2, 3], &[1, 2, 3, 4, 5, 6]));",
          "    assert_eq!(2, generic_levenshtein(&[1, 2, 3], &[1, 2]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[2]));",
          "    assert_eq!(0, generic_levenshtein(&[1], &[1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = generic_levenshtein(&[], &[1, 2, 3]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, result);",
          "    assert_eq!(0, generic_levenshtein(&[], &[]));",
          "    assert_eq!(2, generic_levenshtein(&[1, 2], &[]));",
          "    assert_eq!(8, generic_levenshtein(&[1, 2, 3, 4, 5, 6, 7, 8], &[]));",
          "    assert_eq!(6, generic_levenshtein(&[], &[1, 2, 3, 4, 5, 6]));",
          "    assert_eq!(0, generic_levenshtein(&[1], &[1]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[2]));",
          "    assert_eq!(5, generic_levenshtein(&[1, 2, 3, 4, 5], &[1, 2, 3]));",
          "    assert_eq!(2, generic_levenshtein(&[1, 3], &[1, 2, 3]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2], &[0, 2, 3]));"
        ],
        "code": [
          "{",
          "    let result = generic_levenshtein(&[], &[1, 2, 3]);",
          "    assert_eq!(3, result);",
          "    assert_eq!(0, generic_levenshtein(&[], &[]));",
          "    assert_eq!(2, generic_levenshtein(&[1, 2], &[]));",
          "    assert_eq!(8, generic_levenshtein(&[1, 2, 3, 4, 5, 6, 7, 8], &[]));",
          "    assert_eq!(6, generic_levenshtein(&[], &[1, 2, 3, 4, 5, 6]));",
          "    assert_eq!(0, generic_levenshtein(&[1], &[1]));",
          "    assert_eq!(1, generic_levenshtein(&[1], &[2]));",
          "    assert_eq!(5, generic_levenshtein(&[1, 2, 3, 4, 5], &[1, 2, 3]));",
          "    assert_eq!(2, generic_levenshtein(&[1, 3], &[1, 2, 3]));",
          "    assert_eq!(3, generic_levenshtein(&[1, 2], &[0, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = generic_levenshtein(&[1, 2, 3], &[]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(3, result);",
          "    assert!(result >= 0);",
          "    assert!(result <= 3);",
          "    assert_eq!(generic_levenshtein(&[], &[1, 2, 3]), 3);",
          "    assert_eq!(generic_levenshtein(&[], &[]), 0);",
          "    assert_eq!(generic_levenshtein(&[1, 2, 3], &[1, 2]), 1);",
          "    assert_eq!(generic_levenshtein(&[1, 2], &[1, 2, 3]), 1);",
          "    assert_eq!(generic_levenshtein(&[1, 3], &[1, 2]), 1);",
          "    assert_eq!(generic_levenshtein(&[1], &[2]), 1);",
          "    assert_eq!(generic_levenshtein(&[1, 2, 3], &[4, 5, 6]), 6);"
        ],
        "code": [
          "{",
          "    let result = generic_levenshtein(&[1, 2, 3], &[]);",
          "    assert_eq!(3, result);",
          "    assert!(result >= 0);",
          "    assert!(result <= 3);",
          "    assert_eq!(generic_levenshtein(&[], &[1, 2, 3]), 3);",
          "    assert_eq!(generic_levenshtein(&[], &[]), 0);",
          "    assert_eq!(generic_levenshtein(&[1, 2, 3], &[1, 2]), 1);",
          "    assert_eq!(generic_levenshtein(&[1, 2], &[1, 2, 3]), 1);",
          "    assert_eq!(generic_levenshtein(&[1, 3], &[1, 2]), 1);",
          "    assert_eq!(generic_levenshtein(&[1], &[2]), 1);",
          "    assert_eq!(generic_levenshtein(&[1, 2, 3], &[4, 5, 6]), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]