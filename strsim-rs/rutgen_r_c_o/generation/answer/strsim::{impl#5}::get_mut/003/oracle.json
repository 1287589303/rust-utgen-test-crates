[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue(u32);",
          "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "",
          "    let key: u32 = 42;",
          "    let value = hashmap.get_mut(key);",
          "    *value = TestValue(1);",
          "}"
        ],
        "oracle": [
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.used, 1);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[hashmap.lookup(key)].key, key);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[hashmap.lookup(key)].value, TestValue(1));",
          "    assert!(hashmap.map.as_ref().unwrap()[hashmap.lookup(key)].value != Default::default());"
        ],
        "code": [
          "{",
          "    struct TestValue(u32);",
          "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "",
          "    let key: u32 = 42;",
          "    let value = hashmap.get_mut(key);",
          "    *value = TestValue(1);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.used, 1);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[hashmap.lookup(key)].key, key);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[hashmap.lookup(key)].value, TestValue(1));",
          "    assert!(hashmap.map.as_ref().unwrap()[hashmap.lookup(key)].value != Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue(u32);",
          "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "",
          "    let key: u32 = 100;",
          "    let value = hashmap.get_mut(key);",
          "    *value = TestValue(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.used, 1);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].key, key);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, TestValue(5));",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, TestValue(0));"
        ],
        "code": [
          "{",
          "    struct TestValue(u32);",
          "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "",
          "    let key: u32 = 100;",
          "    let value = hashmap.get_mut(key);",
          "    *value = TestValue(5);",
          "    assert_eq!(hashmap.used, 1);",
          "    assert_eq!(hashmap.fill, 1);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].key, key);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0].value, TestValue(5));",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, TestValue(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue(u32);",
          "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
          "        used: 6,",
          "        fill: 6,",
          "        mask: 7,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar { key: 1, value: TestValue(1) },",
          "            GrowingHashmapMapElemChar { key: 2, value: TestValue(2) },",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar { key: 4, value: TestValue(4) },",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "",
          "    let key: u32 = 99;",
          "    let value = hashmap.get_mut(key);",
          "    *value = TestValue(10);",
          "}"
        ],
        "oracle": [
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.used, 6);",
          "    assert_eq!(hashmap.fill, 6);",
          "    assert!(hashmap.map.as_ref().unwrap()[6].value == TestValue(10));",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[6].key, key);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, TestValue(1));",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2].value, TestValue(2));",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[4].value, TestValue(4));",
          "    assert!(hashmap.map.as_ref().unwrap()[0].value == Default::default());",
          "    assert!(hashmap.map.as_ref().unwrap()[3].value == Default::default());",
          "    assert!(hashmap.map.as_ref().unwrap()[5].value == Default::default());",
          "    assert!(hashmap.map.as_ref().unwrap()[7].value == Default::default());",
          "    assert!(hashmap.used > 6);"
        ],
        "code": [
          "{",
          "    struct TestValue(u32);",
          "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
          "        used: 6,",
          "        fill: 6,",
          "        mask: 7,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar { key: 1, value: TestValue(1) },",
          "            GrowingHashmapMapElemChar { key: 2, value: TestValue(2) },",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar { key: 4, value: TestValue(4) },",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "",
          "    let key: u32 = 99;",
          "    let value = hashmap.get_mut(key);",
          "    *value = TestValue(10);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.used, 6);",
          "    assert_eq!(hashmap.fill, 6);",
          "    assert!(hashmap.map.as_ref().unwrap()[6].value == TestValue(10));",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[6].key, key);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1].value, TestValue(1));",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2].value, TestValue(2));",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[4].value, TestValue(4));",
          "    assert!(hashmap.map.as_ref().unwrap()[0].value == Default::default());",
          "    assert!(hashmap.map.as_ref().unwrap()[3].value == Default::default());",
          "    assert!(hashmap.map.as_ref().unwrap()[5].value == Default::default());",
          "    assert!(hashmap.map.as_ref().unwrap()[7].value == Default::default());",
          "    assert!(hashmap.used > 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]