[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 4,",
          "        fill: 4,",
          "        mask: 7,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "",
          "    // Trigger to a default value at a specific key",
          "    let key: u32 = 3;",
          "",
          "    let value: &mut i32 = hashmap.get_mut(key);",
          "}"
        ],
        "oracle": [
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 4, fill: 4, mask: 7, map: Some(vec![GrowingHashmapMapElemChar::default(); 8]) };",
          "    let key: u32 = 3;",
          "    assert_eq!(hashmap.get_mut(key), &mut 0);",
          "    hashmap.fill = 4;",
          "    hashmap.fill *= 3;",
          "    hashmap.mask = 7;",
          "    assert!(hashmap.fill * 3 >= (hashmap.mask + 1) * 2);",
          "    hashmap.get_mut(key);"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 4,",
          "        fill: 4,",
          "        mask: 7,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "        ]),",
          "    };",
          "",
          "    // Trigger to a default value at a specific key",
          "    let key: u32 = 3;",
          "",
          "    let value: &mut i32 = hashmap.get_mut(key);",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 4, fill: 4, mask: 7, map: Some(vec![GrowingHashmapMapElemChar::default(); 8]) };",
          "    let key: u32 = 3;",
          "    assert_eq!(hashmap.get_mut(key), &mut 0);",
          "    hashmap.fill = 4;",
          "    hashmap.fill *= 3;",
          "    hashmap.mask = 7;",
          "    assert!(hashmap.fill * 3 >= (hashmap.mask + 1) * 2);",
          "    hashmap.get_mut(key);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 4,",
          "        fill: 4,",
          "        mask: 7,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar { key: 1, value: 10 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 20 },",
          "            GrowingHashmapMapElemChar { key: 3, value: 30 },",
          "        ]),",
          "    };",
          "",
          "    let key: u32 = 4; // This key should trigger the resize condition",
          "",
          "    let value: &mut i32 = hashmap.get_mut(key);",
          "}"
        ],
        "oracle": [
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.fill, 4);",
          "    assert_eq!(hashmap.used, 4);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[hashmap.lookup(4)].value, Default::default());",
          "    assert!(hashmap.fill * 3 >= (hashmap.mask + 1) * 2);",
          "    assert_eq!(*value, 0);",
          "    hashmap.get_mut(4);",
          "    assert_eq!(hashmap.used, 5);",
          "    assert!(hashmap.map.as_ref().unwrap()[hashmap.lookup(4)].value != Default::default());"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 4,",
          "        fill: 4,",
          "        mask: 7,",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar::default(),",
          "            GrowingHashmapMapElemChar { key: 1, value: 10 },",
          "            GrowingHashmapMapElemChar { key: 2, value: 20 },",
          "            GrowingHashmapMapElemChar { key: 3, value: 30 },",
          "        ]),",
          "    };",
          "",
          "    let key: u32 = 4; // This key should trigger the resize condition",
          "",
          "    let value: &mut i32 = hashmap.get_mut(key);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.fill, 4);",
          "    assert_eq!(hashmap.used, 4);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[hashmap.lookup(4)].value, Default::default());",
          "    assert!(hashmap.fill * 3 >= (hashmap.mask + 1) * 2);",
          "    assert_eq!(*value, 0);",
          "    hashmap.get_mut(4);",
          "    assert_eq!(hashmap.used, 5);",
          "    assert!(hashmap.map.as_ref().unwrap()[hashmap.lookup(4)].value != Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]