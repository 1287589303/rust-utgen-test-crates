[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 0, // map length of 1, mask is 0",
          "        map: Some(vec![GrowingHashmapMapElemChar { key: 0, value: Default::default() }]), // only index 0 has default value",
          "    };",
          "    let key: u32 = 0;",
          "    let index = hashmap.lookup(key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index, 0);"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 0, // map length of 1, mask is 0",
          "        map: Some(vec![GrowingHashmapMapElemChar { key: 0, value: Default::default() }]), // only index 0 has default value",
          "    };",
          "    let key: u32 = 0;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1, // map length of 2, mask is 1",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 0, value: Default::default() }, // index 0 has default value",
          "            GrowingHashmapMapElemChar { key: 1, value: 42 }, // index 1 has non-default value",
          "        ]),",
          "    };",
          "    let key: u32 = 0;",
          "    let index = hashmap.lookup(key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index, 0);"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1, // map length of 2, mask is 1",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 0, value: Default::default() }, // index 0 has default value",
          "            GrowingHashmapMapElemChar { key: 1, value: 42 }, // index 1 has non-default value",
          "        ]),",
          "    };",
          "    let key: u32 = 0;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1, // map length of 2, mask is 1",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 0, value: 42 }, // index 0 has non-default value",
          "            GrowingHashmapMapElemChar { key: 1, value: Default::default() }, // index 1 has default value",
          "        ]),",
          "    };",
          "    let key: u32 = 1;",
          "    let index = hashmap.lookup(key);",
          "}"
        ],
        "oracle": [
          "    let hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 1, fill: 1, mask: 1, map: Some(vec![GrowingHashmapMapElemChar { key: 0, value: 42 }, GrowingHashmapMapElemChar { key: 1, value: Default::default() }]) };",
          "    let key: u32 = 1;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 1);"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 1, // map length of 2, mask is 1",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 0, value: 42 }, // index 0 has non-default value",
          "            GrowingHashmapMapElemChar { key: 1, value: Default::default() }, // index 1 has default value",
          "        ]),",
          "    };",
          "    let key: u32 = 1;",
          "    let index = hashmap.lookup(key);",
          "    let hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar { used: 1, fill: 1, mask: 1, map: Some(vec![GrowingHashmapMapElemChar { key: 0, value: 42 }, GrowingHashmapMapElemChar { key: 1, value: Default::default() }]) };",
          "    let key: u32 = 1;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 3, // map length of 4, mask is 3",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 0, value: Default::default() }, // index 0 has default value",
          "            GrowingHashmapMapElemChar { key: 1, value: Default::default() }, // index 1 has default value",
          "            GrowingHashmapMapElemChar { key: 2, value: 42 }, // index 2 has non-default value",
          "            GrowingHashmapMapElemChar { key: 3, value: 99 }, // index 3 has non-default value",
          "        ]),",
          "    };",
          "    let key: u32 = 0;",
          "    let index = hashmap.lookup(key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(index, 0); // check if the index returned is 0 as expected since map[0].value is Default::default()",
          "    let key: u32 = 1;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 1); // check if the index returned is 1 as expected since map[1].value is Default::default()",
          "    let key: u32 = 2;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 2); // check if the index returned is 2 for non-default value",
          "    let key: u32 = 3;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 3); // check if the index returned is 3 for non-default value"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 3, // map length of 4, mask is 3",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 0, value: Default::default() }, // index 0 has default value",
          "            GrowingHashmapMapElemChar { key: 1, value: Default::default() }, // index 1 has default value",
          "            GrowingHashmapMapElemChar { key: 2, value: 42 }, // index 2 has non-default value",
          "            GrowingHashmapMapElemChar { key: 3, value: 99 }, // index 3 has non-default value",
          "        ]),",
          "    };",
          "    let key: u32 = 0;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 0); // check if the index returned is 0 as expected since map[0].value is Default::default()",
          "    let key: u32 = 1;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 1); // check if the index returned is 1 as expected since map[1].value is Default::default()",
          "    let key: u32 = 2;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 2); // check if the index returned is 2 for non-default value",
          "    let key: u32 = 3;",
          "    let index = hashmap.lookup(key);",
          "    assert_eq!(index, 3); // check if the index returned is 3 for non-default value",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 7, // map length of 8, mask is 7",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 0, value: 42 }, // index 0 has non-default value",
          "            GrowingHashmapMapElemChar { key: 1, value: 99 }, // index 1 has non-default value",
          "            GrowingHashmapMapElemChar { key: 2, value: Default::default() }, // index 2 has default value",
          "            GrowingHashmapMapElemChar { key: 3, value: 85 }, // index 3 has non-default value",
          "            GrowingHashmapMapElemChar { key: 4, value: 100 }, // index 4 has non-default value",
          "            GrowingHashmapMapElemChar { key: 5, value: Default::default() }, // index 5 has default value",
          "            GrowingHashmapMapElemChar { key: 6, value: 57 }, // index 6 has non-default value",
          "            GrowingHashmapMapElemChar { key: 7, value: Default::default() }, // index 7 has default value",
          "        ]),",
          "    };",
          "    let key: u32 = 2;",
          "    let index = hashmap.lookup(key);",
          "}"
        ],
        "oracle": [
          "    let expected_index: usize = 2;",
          "    assert_eq!(index, expected_index);",
          "    assert_ne!(index, 0);",
          "    assert_ne!(index, 1);",
          "    assert_ne!(index, 3);",
          "    assert_ne!(index, 4);",
          "    assert_ne!(index, 5);",
          "    assert_ne!(index, 6);",
          "    assert_ne!(index, 7);"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
          "        used: 1,",
          "        fill: 1,",
          "        mask: 7, // map length of 8, mask is 7",
          "        map: Some(vec![",
          "            GrowingHashmapMapElemChar { key: 0, value: 42 }, // index 0 has non-default value",
          "            GrowingHashmapMapElemChar { key: 1, value: 99 }, // index 1 has non-default value",
          "            GrowingHashmapMapElemChar { key: 2, value: Default::default() }, // index 2 has default value",
          "            GrowingHashmapMapElemChar { key: 3, value: 85 }, // index 3 has non-default value",
          "            GrowingHashmapMapElemChar { key: 4, value: 100 }, // index 4 has non-default value",
          "            GrowingHashmapMapElemChar { key: 5, value: Default::default() }, // index 5 has default value",
          "            GrowingHashmapMapElemChar { key: 6, value: 57 }, // index 6 has non-default value",
          "            GrowingHashmapMapElemChar { key: 7, value: Default::default() }, // index 7 has default value",
          "        ]),",
          "    };",
          "    let key: u32 = 2;",
          "    let index = hashmap.lookup(key);",
          "    let expected_index: usize = 2;",
          "    assert_eq!(index, expected_index);",
          "    assert_ne!(index, 0);",
          "    assert_ne!(index, 1);",
          "    assert_ne!(index, 3);",
          "    assert_ne!(index, 4);",
          "    assert_ne!(index, 5);",
          "    assert_ne!(index, 6);",
          "    assert_ne!(index, 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]