[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"abcd\";",
          "    let b = \"abdc\";",
          "    let result = osa_distance(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, osa_distance(\"abcd\", \"abdc\"));",
          "    assert_eq!(0, osa_distance(\"\", \"\"));",
          "    assert_eq!(3, osa_distance(\"abc\", \"def\"));",
          "    assert_eq!(4, osa_distance(\"abcd\", \"abc\"));",
          "    assert_eq!(2, osa_distance(\"abcde\", \"abdc\"));",
          "    assert_eq!(1, osa_distance(\"a\", \"b\"));",
          "    assert_eq!(5, osa_distance(\"abcdef\", \"fedcba\"));",
          "    assert_eq!(2, osa_distance(\"hello\", \"holle\"));",
          "    assert_eq!(3, osa_distance(\"kitten\", \"sitting\"));",
          "    assert_eq!(2, osa_distance(\"ab\", \"b\"));",
          "    assert_eq!(0, osa_distance(\"b\", \"b\"));"
        ],
        "code": [
          "{",
          "    let a = \"abcd\";",
          "    let b = \"abdc\";",
          "    let result = osa_distance(a, b);",
          "    assert_eq!(1, osa_distance(\"abcd\", \"abdc\"));",
          "    assert_eq!(0, osa_distance(\"\", \"\"));",
          "    assert_eq!(3, osa_distance(\"abc\", \"def\"));",
          "    assert_eq!(4, osa_distance(\"abcd\", \"abc\"));",
          "    assert_eq!(2, osa_distance(\"abcde\", \"abdc\"));",
          "    assert_eq!(1, osa_distance(\"a\", \"b\"));",
          "    assert_eq!(5, osa_distance(\"abcdef\", \"fedcba\"));",
          "    assert_eq!(2, osa_distance(\"hello\", \"holle\"));",
          "    assert_eq!(3, osa_distance(\"kitten\", \"sitting\"));",
          "    assert_eq!(2, osa_distance(\"ab\", \"b\"));",
          "    assert_eq!(0, osa_distance(\"b\", \"b\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"hello\";",
          "    let b = \"holle\";",
          "    let result = osa_distance(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let a = \"hello\";",
          "    let b = \"holle\";",
          "    let result = osa_distance(a, b);",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"rust\";",
          "    let b = \"ruts\";",
          "    let result = osa_distance(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(osa_distance(\"rust\", \"ruts\"), 1);",
          "    assert_eq!(osa_distance(\"abc\", \"acb\"), 1);",
          "    assert_eq!(osa_distance(\"hello\", \"hlelo\"), 1);",
          "    assert_eq!(osa_distance(\"abcd\", \"abdc\"), 1);",
          "    assert_eq!(osa_distance(\"a\", \"a\"), 0);",
          "    assert_eq!(osa_distance(\"a\", \"b\"), 1);",
          "    assert_eq!(osa_distance(\"\", \"abc\"), 3);",
          "    assert_eq!(osa_distance(\"abc\", \"\"), 3);",
          "    assert_eq!(osa_distance(\"abc\", \"abc\"), 0);",
          "    assert_eq!(osa_distance(\"ab\", \"ba\"), 2);"
        ],
        "code": [
          "{",
          "    let a = \"rust\";",
          "    let b = \"ruts\";",
          "    let result = osa_distance(a, b);",
          "    assert_eq!(osa_distance(\"rust\", \"ruts\"), 1);",
          "    assert_eq!(osa_distance(\"abc\", \"acb\"), 1);",
          "    assert_eq!(osa_distance(\"hello\", \"hlelo\"), 1);",
          "    assert_eq!(osa_distance(\"abcd\", \"abdc\"), 1);",
          "    assert_eq!(osa_distance(\"a\", \"a\"), 0);",
          "    assert_eq!(osa_distance(\"a\", \"b\"), 1);",
          "    assert_eq!(osa_distance(\"\", \"abc\"), 3);",
          "    assert_eq!(osa_distance(\"abc\", \"\"), 3);",
          "    assert_eq!(osa_distance(\"abc\", \"abc\"), 0);",
          "    assert_eq!(osa_distance(\"ab\", \"ba\"), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"ab\";",
          "    let b = \"ba\";",
          "    let result = osa_distance(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, result);",
          "    assert!(result.is::<usize>());",
          "    assert!(result <= a.len() + b.len());",
          "    assert!(result >= 0);",
          "    assert_eq!(osa_distance(\"aaa\", \"aaa\"), 0);",
          "    assert!(osa_distance(\"\", \"abc\") > 0);",
          "    assert_eq!(osa_distance(\"abc\", \"\"), 3);",
          "    assert_eq!(osa_distance(\"\", \"\"), 0);",
          "    assert_eq!(osa_distance(\"ab\", \"b\"), 1);",
          "    assert_eq!(osa_distance(\"abc\", \"cab\"), 2);",
          "    assert_eq!(osa_distance(\"abc\", \"abc\"), 0);",
          "    assert_eq!(osa_distance(\"abcde\", \"abcede\"), 1);",
          "    assert_eq!(osa_distance(\"abcdef\", \"aefcd\"), 2);",
          "    assert_eq!(osa_distance(\"abcd\", \"dcba\"), 4);"
        ],
        "code": [
          "{",
          "    let a = \"ab\";",
          "    let b = \"ba\";",
          "    let result = osa_distance(a, b);",
          "    assert_eq!(1, result);",
          "    assert!(result.is::<usize>());",
          "    assert!(result <= a.len() + b.len());",
          "    assert!(result >= 0);",
          "    assert_eq!(osa_distance(\"aaa\", \"aaa\"), 0);",
          "    assert!(osa_distance(\"\", \"abc\") > 0);",
          "    assert_eq!(osa_distance(\"abc\", \"\"), 3);",
          "    assert_eq!(osa_distance(\"\", \"\"), 0);",
          "    assert_eq!(osa_distance(\"ab\", \"b\"), 1);",
          "    assert_eq!(osa_distance(\"abc\", \"cab\"), 2);",
          "    assert_eq!(osa_distance(\"abc\", \"abc\"), 0);",
          "    assert_eq!(osa_distance(\"abcde\", \"abcede\"), 1);",
          "    assert_eq!(osa_distance(\"abcdef\", \"aefcd\"), 2);",
          "    assert_eq!(osa_distance(\"abcd\", \"dcba\"), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = \"testing\";",
          "    let b = \"setitng\";",
          "    let result = osa_distance(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(4, result);",
          "    assert_eq!(osa_distance(\"abc\", \"abd\"), 1);",
          "    assert_eq!(osa_distance(\"kitten\", \"sitting\"), 3);",
          "    assert_eq!(osa_distance(\"flaw\", \"lawn\"), 2);",
          "    assert_eq!(osa_distance(\"abcde\", \"abcde\"), 0);",
          "    assert_eq!(osa_distance(\"a\", \"\"), 1);",
          "    assert_eq!(osa_distance(\"\", \"a\"), 1);",
          "    assert_eq!(osa_distance(\"\", \"\"), 0);",
          "    assert_eq!(osa_distance(\"ab\", \"bca\"), 3);"
        ],
        "code": [
          "{",
          "    let a = \"testing\";",
          "    let b = \"setitng\";",
          "    let result = osa_distance(a, b);",
          "    assert_eq!(4, result);",
          "    assert_eq!(osa_distance(\"abc\", \"abd\"), 1);",
          "    assert_eq!(osa_distance(\"kitten\", \"sitting\"), 3);",
          "    assert_eq!(osa_distance(\"flaw\", \"lawn\"), 2);",
          "    assert_eq!(osa_distance(\"abcde\", \"abcde\"), 0);",
          "    assert_eq!(osa_distance(\"a\", \"\"), 1);",
          "    assert_eq!(osa_distance(\"\", \"a\"), 1);",
          "    assert_eq!(osa_distance(\"\", \"\"), 0);",
          "    assert_eq!(osa_distance(\"ab\", \"bca\"), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]