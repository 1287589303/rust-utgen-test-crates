[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<u32> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "    hashmap.allocate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.used, 0);",
          "    assert_eq!(hashmap.fill, 0);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
          "    for elem in hashmap.map.as_ref().unwrap() {",
          "    assert_eq!(elem, &GrowingHashmapMapElemChar::<u32>::default());",
          "    }"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<u32> = GrowingHashmapChar {",
          "        used: 0,",
          "        fill: 0,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "    hashmap.allocate();",
          "    assert_eq!(hashmap.used, 0);",
          "    assert_eq!(hashmap.fill, 0);",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
          "    for elem in hashmap.map.as_ref().unwrap() {",
          "    assert_eq!(elem, &GrowingHashmapMapElemChar::<u32>::default());",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<u32> = GrowingHashmapChar {",
          "        used: 3,",
          "        fill: 3,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "    hashmap.allocate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.mask, 7);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[3], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[4], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[5], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[6], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[7], GrowingHashmapMapElemChar::<u32>::default());"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<u32> = GrowingHashmapChar {",
          "        used: 3,",
          "        fill: 3,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "    hashmap.allocate();",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[0], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[1], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[2], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[3], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[4], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[5], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[6], GrowingHashmapMapElemChar::<u32>::default());",
          "    assert_eq!(hashmap.map.as_ref().unwrap()[7], GrowingHashmapMapElemChar::<u32>::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<u32> = GrowingHashmapChar {",
          "        used: 7,",
          "        fill: 7,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "    hashmap.allocate();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashmap.mask, 7);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
          "    assert!(hashmap.map.as_ref().unwrap().iter().all(|elem| elem == &GrowingHashmapMapElemChar::default()));"
        ],
        "code": [
          "{",
          "    let mut hashmap: GrowingHashmapChar<u32> = GrowingHashmapChar {",
          "        used: 7,",
          "        fill: 7,",
          "        mask: 0,",
          "        map: None,",
          "    };",
          "    hashmap.allocate();",
          "    assert_eq!(hashmap.mask, 7);",
          "    assert!(hashmap.map.is_some());",
          "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
          "    assert!(hashmap.map.as_ref().unwrap().iter().all(|elem| elem == &GrowingHashmapMapElemChar::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]