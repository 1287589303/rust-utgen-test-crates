[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"test\", \"test\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(jaro(\"test\", \"test\"), 1.0);",
          "    assert!((jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\") - 0.392).abs() < 0.001);",
          "    assert!((jaro(\"hello\", \"hallo\") - 0.866).abs() < 0.001);",
          "    assert_eq!(jaro(\"\", \"\"), 1.0);",
          "    assert_eq!(jaro(\"abc\", \"\"), 0.0);",
          "    assert_eq!(jaro(\"\", \"abc\"), 0.0);",
          "    assert_eq!(jaro(\"a\", \"b\"), 0.0);",
          "    assert_eq!(jaro(\"kitten\", \"sitting\"), 0.0);",
          "    assert!((jaro(\"string\", \"sring\") - 0.933).abs() < 0.001);",
          "    assert!((jaro(\"Dwayne\", \"Duane\") - 0.84).abs() < 0.001);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"test\", \"test\");",
          "    assert_eq!(jaro(\"test\", \"test\"), 1.0);",
          "    assert!((jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\") - 0.392).abs() < 0.001);",
          "    assert!((jaro(\"hello\", \"hallo\") - 0.866).abs() < 0.001);",
          "    assert_eq!(jaro(\"\", \"\"), 1.0);",
          "    assert_eq!(jaro(\"abc\", \"\"), 0.0);",
          "    assert_eq!(jaro(\"\", \"abc\"), 0.0);",
          "    assert_eq!(jaro(\"a\", \"b\"), 0.0);",
          "    assert_eq!(jaro(\"kitten\", \"sitting\"), 0.0);",
          "    assert!((jaro(\"string\", \"sring\") - 0.933).abs() < 0.001);",
          "    assert!((jaro(\"Dwayne\", \"Duane\") - 0.84).abs() < 0.001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"hello\", \"world\");",
          "}"
        ],
        "oracle": [
          "    assert!(result >= 0.0 && result <= 1.0);",
          "    assert!((0.0 - jaro(\"\", \"\")).abs() < 0.001);",
          "    assert!((0.0 - jaro(\"a\", \"\")).abs() < 0.001);",
          "    assert!((0.0 - jaro(\"\", \"a\")).abs() < 0.001);",
          "    assert!((1.0 - jaro(\"test\", \"test\")).abs() < 0.001);",
          "    assert!((0.833 - jaro(\"martha\", \"marhta\")).abs() < 0.001);",
          "    assert!((0.0 - jaro(\"kitten\", \"sitting\")).abs() < 0.001);",
          "    assert!((0.0 - jaro(\"abc\", \"def\")).abs() < 0.001);",
          "    assert!((0.5 - jaro(\"abc\", \"acb\")).abs() < 0.001);",
          "    assert!((0.672 - jaro(\"DWAYNE\", \"DUANE\")).abs() < 0.001);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"hello\", \"world\");",
          "    assert!(result >= 0.0 && result <= 1.0);",
          "    assert!((0.0 - jaro(\"\", \"\")).abs() < 0.001);",
          "    assert!((0.0 - jaro(\"a\", \"\")).abs() < 0.001);",
          "    assert!((0.0 - jaro(\"\", \"a\")).abs() < 0.001);",
          "    assert!((1.0 - jaro(\"test\", \"test\")).abs() < 0.001);",
          "    assert!((0.833 - jaro(\"martha\", \"marhta\")).abs() < 0.001);",
          "    assert!((0.0 - jaro(\"kitten\", \"sitting\")).abs() < 0.001);",
          "    assert!((0.0 - jaro(\"abc\", \"def\")).abs() < 0.001);",
          "    assert!((0.5 - jaro(\"abc\", \"acb\")).abs() < 0.001);",
          "    assert!((0.672 - jaro(\"DWAYNE\", \"DUANE\")).abs() < 0.001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"\", \"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(jaro(\"\", \"\"), 1.0);",
          "    let result = jaro(\"test\", \"test\");",
          "    assert_eq!(jaro(\"test\", \"test\"), 1.0);",
          "    let result = jaro(\"abc\", \"abc\");",
          "    assert_eq!(jaro(\"abc\", \"abc\"), 1.0);",
          "    let result = jaro(\"abc\", \"\");",
          "    assert_eq!(jaro(\"abc\", \"\"), 0.0);",
          "    let result = jaro(\"\", \"abc\");",
          "    assert_eq!(jaro(\"\", \"abc\"), 0.0);",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\");",
          "    assert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() < 0.001);",
          "    let result = jaro(\"abcd\", \"ab\");",
          "    assert!((0.75 - jaro(\"abcd\", \"ab\")).abs() < 0.001);",
          "    let result = jaro(\"ab\", \"abcd\");",
          "    assert!((0.75 - jaro(\"ab\", \"abcd\")).abs() < 0.001);",
          "    let result = jaro(\"abc\", \"ac\");",
          "    assert!((0.666 - jaro(\"abc\", \"ac\")).abs() < 0.001);",
          "    let result = jaro(\"night\", \"nacht\");",
          "    assert!((0.4 - jaro(\"night\", \"nacht\")).abs() < 0.001);",
          "    let result = jaro(\"hello\", \"hey\");",
          "    assert!((0.2 - jaro(\"hello\", \"hey\")).abs() < 0.001);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"\", \"\");",
          "    assert_eq!(jaro(\"\", \"\"), 1.0);",
          "    let result = jaro(\"test\", \"test\");",
          "    assert_eq!(jaro(\"test\", \"test\"), 1.0);",
          "    let result = jaro(\"abc\", \"abc\");",
          "    assert_eq!(jaro(\"abc\", \"abc\"), 1.0);",
          "    let result = jaro(\"abc\", \"\");",
          "    assert_eq!(jaro(\"abc\", \"\"), 0.0);",
          "    let result = jaro(\"\", \"abc\");",
          "    assert_eq!(jaro(\"\", \"abc\"), 0.0);",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\");",
          "    assert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() < 0.001);",
          "    let result = jaro(\"abcd\", \"ab\");",
          "    assert!((0.75 - jaro(\"abcd\", \"ab\")).abs() < 0.001);",
          "    let result = jaro(\"ab\", \"abcd\");",
          "    assert!((0.75 - jaro(\"ab\", \"abcd\")).abs() < 0.001);",
          "    let result = jaro(\"abc\", \"ac\");",
          "    assert!((0.666 - jaro(\"abc\", \"ac\")).abs() < 0.001);",
          "    let result = jaro(\"night\", \"nacht\");",
          "    assert!((0.4 - jaro(\"night\", \"nacht\")).abs() < 0.001);",
          "    let result = jaro(\"hello\", \"hey\");",
          "    assert!((0.2 - jaro(\"hello\", \"hey\")).abs() < 0.001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"\", \"nonempty\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0.0);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"\", \"nonempty\");",
          "    assert_eq!(result, 0.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"nonempty\", \"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(jaro(\"nonempty\", \"\"), 0.0);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"nonempty\", \"\");",
          "    assert_eq!(jaro(\"nonempty\", \"\"), 0.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"abc\", \"acb\");",
          "}"
        ],
        "oracle": [
          "    assert!((0.933 - result).abs() < 0.001);",
          "    result = jaro(\"\", \"\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"test\", \"test\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\");",
          "    assert!((0.392 - result).abs() < 0.001);",
          "    result = jaro(\"abc\", \"def\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"a\", \"\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"\", \"a\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"strawberry\", \"strawberry\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"martha\", \"marhta\");",
          "    assert!((0.961 - result).abs() < 0.001);",
          "    result = jaro(\"hello\", \"hallo\");",
          "    assert!((0.866 - result).abs() < 0.001);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"abc\", \"acb\");",
          "    assert!((0.933 - result).abs() < 0.001);",
          "    result = jaro(\"\", \"\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"test\", \"test\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\");",
          "    assert!((0.392 - result).abs() < 0.001);",
          "    result = jaro(\"abc\", \"def\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"a\", \"\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"\", \"a\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"strawberry\", \"strawberry\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"martha\", \"marhta\");",
          "    assert!((0.961 - result).abs() < 0.001);",
          "    result = jaro(\"hello\", \"hallo\");",
          "    assert!((0.866 - result).abs() < 0.001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"café\", \"cafe\");",
          "}"
        ],
        "oracle": [
          "    assert!((0.94 - result).abs() < 0.01);",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\");",
          "    assert!((0.392 - result).abs() < 0.001);",
          "    let result = jaro(\"\", \"\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    let result = jaro(\"test\", \"test\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    let result = jaro(\"a\", \"b\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    let result = jaro(\"Dixon\", \"Dicken\");",
          "    assert!((0.8 - result).abs() < 0.01);",
          "    let result = jaro(\"night\", \"nacht\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    let result = jaro(\"martha\", \"marhta\");",
          "    assert!((0.961 - result).abs() < 0.001);",
          "    let result = jaro(\"hello\", \"hallo\");",
          "    assert!((0.866 - result).abs() < 0.01);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"café\", \"cafe\");",
          "    assert!((0.94 - result).abs() < 0.01);",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\");",
          "    assert!((0.392 - result).abs() < 0.001);",
          "    let result = jaro(\"\", \"\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    let result = jaro(\"test\", \"test\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    let result = jaro(\"a\", \"b\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    let result = jaro(\"Dixon\", \"Dicken\");",
          "    assert!((0.8 - result).abs() < 0.01);",
          "    let result = jaro(\"night\", \"nacht\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    let result = jaro(\"martha\", \"marhta\");",
          "    assert!((0.961 - result).abs() < 0.001);",
          "    let result = jaro(\"hello\", \"hallo\");",
          "    assert!((0.866 - result).abs() < 0.01);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"abcdefghij\", \"klmnopqrst\");",
          "}"
        ],
        "oracle": [
          "    assert!(jaro(\"abcdefghij\", \"klmnopqrst\") == 0.0);",
          "    ",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Friedrich Nietzsche\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    ",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Friedrich N\");",
          "    assert!((0.92 - result).abs() < 0.01);",
          "    ",
          "    let result = jaro(\"\", \"\");",
          "    assert!(result == 1.0);",
          "    ",
          "    let result = jaro(\"A test string\", \"A test string\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    ",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Nietzsche Friedrich\");",
          "    assert!((0.74 - result).abs() < 0.01);",
          "    ",
          "    let result = jaro(\"Hello\", \"Hello, World!\");",
          "    assert!((0.67 - result).abs() < 0.01);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"abcdefghij\", \"klmnopqrst\");",
          "    assert!(jaro(\"abcdefghij\", \"klmnopqrst\") == 0.0);",
          "    ",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Friedrich Nietzsche\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    ",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Friedrich N\");",
          "    assert!((0.92 - result).abs() < 0.01);",
          "    ",
          "    let result = jaro(\"\", \"\");",
          "    assert!(result == 1.0);",
          "    ",
          "    let result = jaro(\"A test string\", \"A test string\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    ",
          "    let result = jaro(\"Friedrich Nietzsche\", \"Nietzsche Friedrich\");",
          "    assert!((0.74 - result).abs() < 0.01);",
          "    ",
          "    let result = jaro(\"Hello\", \"Hello, World!\");",
          "    assert!((0.67 - result).abs() < 0.01);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = jaro(\"abcdefghij\", \"abcdefgxyz\");",
          "}"
        ],
        "oracle": [
          "    assert!((0.933 - result).abs() < 0.001);",
          "    result = jaro(\"Friedrich Nietzsche\", \"Friedrich Nietzsche\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"test\", \"TEST\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"\", \"\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"a\", \"b\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"abc\", \"a\");",
          "    assert!((0.666 - result).abs() < 0.001);",
          "    result = jaro(\"a\", \"abc\");",
          "    assert!((0.666 - result).abs() < 0.001);",
          "    result = jaro(\"abcde\", \"abcdef\");",
          "    assert!((0.833 - result).abs() < 0.001);"
        ],
        "code": [
          "{",
          "    let result = jaro(\"abcdefghij\", \"abcdefgxyz\");",
          "    assert!((0.933 - result).abs() < 0.001);",
          "    result = jaro(\"Friedrich Nietzsche\", \"Friedrich Nietzsche\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"test\", \"TEST\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"\", \"\");",
          "    assert!((1.0 - result).abs() < 0.001);",
          "    result = jaro(\"a\", \"b\");",
          "    assert!((0.0 - result).abs() < 0.001);",
          "    result = jaro(\"abc\", \"a\");",
          "    assert!((0.666 - result).abs() < 0.001);",
          "    result = jaro(\"a\", \"abc\");",
          "    assert!((0.666 - result).abs() < 0.001);",
          "    result = jaro(\"abcde\", \"abcdef\");",
          "    assert!((0.833 - result).abs() < 0.001);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]