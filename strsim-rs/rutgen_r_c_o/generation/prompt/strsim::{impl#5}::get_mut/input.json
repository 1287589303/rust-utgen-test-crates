{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\nstruct GrowingHashmapChar<ValueType> {\n    used: i32,\n    fill: i32,\n    mask: i32,\n    map: Option<Vec<GrowingHashmapMapElemChar<ValueType>>>,\n}\n#[derive(Default, Clone)]\nstruct GrowingHashmapMapElemChar<ValueType> {\n    key: u32,\n    value: ValueType,\n}\nimpl<ValueType> GrowingHashmapChar<ValueType>\nwhere\n    ValueType: Default + Clone + Eq + Copy,\n{\n    fn get(&self, key: u32) -> ValueType {}\n    fn get_mut(&mut self, key: u32) -> &mut ValueType {\n        if self.map.is_none() {\n            self.allocate();\n        }\n        let mut i = self.lookup(key);\n        if self.map.as_ref().expect(\"map should have been created above\")[i].value\n            == Default::default()\n        {\n            self.fill += 1;\n            if self.fill * 3 >= (self.mask + 1) * 2 {\n                self.grow((self.used + 1) * 2);\n                i = self.lookup(key);\n            }\n            self.used += 1;\n        }\n        let elem = &mut self\n            .map\n            .as_mut()\n            .expect(\"map should have been created above\")[i];\n        elem.key = key;\n        &mut elem.value\n    }\n    fn allocate(&mut self) {\n        self.mask = 8 - 1;\n        self.map = Some(vec![GrowingHashmapMapElemChar::default(); 8]);\n    }\n    fn lookup(&self, key: u32) -> usize {\n        let hash = key;\n        let mut i = hash as usize & self.mask as usize;\n        let map = self.map.as_ref().expect(\"callers have to ensure map is allocated\");\n        if map[i].value == Default::default() || map[i].key == key {\n            return i;\n        }\n        let mut perturb = key;\n        loop {\n            i = (i * 5 + perturb as usize + 1) & self.mask as usize;\n            if map[i].value == Default::default() || map[i].key == key {\n                return i;\n            }\n            perturb >>= 5;\n        }\n    }\n    fn grow(&mut self, min_used: i32) {\n        let mut new_size = self.mask + 1;\n        while new_size <= min_used {\n            new_size <<= 1;\n        }\n        self.fill = self.used;\n        self.mask = new_size - 1;\n        let old_map = std::mem::replace(\n            self.map.as_mut().expect(\"callers have to ensure map is allocated\"),\n            vec![GrowingHashmapMapElemChar::< ValueType >::default(); new_size as usize],\n        );\n        for elem in old_map {\n            if elem.value != Default::default() {\n                let j = self.lookup(elem.key);\n                let new_elem = &mut self.map.as_mut().expect(\"map created above\")[j];\n                new_elem.key = elem.key;\n                new_elem.value = elem.value;\n                self.used -= 1;\n                if self.used == 0 {\n                    break;\n                }\n            }\n        }\n        self.used = self.fill;\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n471 fn get_mut(&mut self, key: u32) -> &mut ValueType {\n472     if self.map.is_none() {\n473         self.allocate();\n474     }\n475 \n476     let mut i = self.lookup(key);\n477     if self\n478         .map\n479         .as_ref()\n480         .expect(\"map should have been created above\")[i]\n481         .value\n482         == Default::default()\n483     {\n484         self.fill += 1;\n485         // resize when 2/3 full\n486         if self.fill * 3 >= (self.mask + 1) * 2 {\n487             self.grow((self.used + 1) * 2);\n488             i = self.lookup(key);\n489         }\n490 \n491         self.used += 1;\n492     }\n493 \n494     let elem = &mut self\n495         .map\n496         .as_mut()\n497         .expect(\"map should have been created above\")[i];\n498     elem.key = key;\n499     &mut elem.value\n500 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}