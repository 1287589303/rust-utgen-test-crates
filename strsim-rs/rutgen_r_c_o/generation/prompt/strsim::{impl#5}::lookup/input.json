{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\nstruct GrowingHashmapChar<ValueType> {\n    used: i32,\n    fill: i32,\n    mask: i32,\n    map: Option<Vec<GrowingHashmapMapElemChar<ValueType>>>,\n}\n#[derive(Default, Clone)]\nstruct GrowingHashmapMapElemChar<ValueType> {\n    key: u32,\n    value: ValueType,\n}\nimpl<ValueType> GrowingHashmapChar<ValueType>\nwhere\n    ValueType: Default + Clone + Eq + Copy,\n{\n    fn get(&self, key: u32) -> ValueType {}\n    fn get_mut(&mut self, key: u32) -> &mut ValueType {}\n    fn allocate(&mut self) {}\n    fn lookup(&self, key: u32) -> usize {\n        let hash = key;\n        let mut i = hash as usize & self.mask as usize;\n        let map = self.map.as_ref().expect(\"callers have to ensure map is allocated\");\n        if map[i].value == Default::default() || map[i].key == key {\n            return i;\n        }\n        let mut perturb = key;\n        loop {\n            i = (i * 5 + perturb as usize + 1) & self.mask as usize;\n            if map[i].value == Default::default() || map[i].key == key {\n                return i;\n            }\n            perturb >>= 5;\n        }\n    }\n    fn grow(&mut self, min_used: i32) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// lookup key inside the hashmap using a similar collision resolution\n/// strategy to `CPython` and `Ruby`\n509 fn lookup(&self, key: u32) -> usize {\n510     let hash = key;\n511     let mut i = hash as usize & self.mask as usize;\n512 \n513     let map = self\n514         .map\n515         .as_ref()\n516         .expect(\"callers have to ensure map is allocated\");\n517 \n518     if map[i].value == Default::default() || map[i].key == key {\n519         return i;\n520     }\n521 \n522     let mut perturb = key;\n523     loop {\n524         i = (i * 5 + perturb as usize + 1) & self.mask as usize;\n525 \n526         if map[i].value == Default::default() || map[i].key == key {\n527             return i;\n528         }\n529 \n530         perturb >>= 5;\n531     }\n532 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}