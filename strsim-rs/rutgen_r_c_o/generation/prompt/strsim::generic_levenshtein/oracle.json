{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\npub fn generic_levenshtein<'a, 'b, Iter1, Iter2, Elem1, Elem2>(\n    a: &'a Iter1,\n    b: &'b Iter2,\n) -> usize\nwhere\n    &'a Iter1: IntoIterator<Item = Elem1>,\n    &'b Iter2: IntoIterator<Item = Elem2>,\n    Elem1: PartialEq<Elem2>,\n{\n    let b_len = b.into_iter().count();\n    let mut cache: Vec<usize> = (1..b_len + 1).collect();\n    let mut result = b_len;\n    for (i, a_elem) in a.into_iter().enumerate() {\n        result = i + 1;\n        let mut distance_b = i;\n        for (j, b_elem) in b.into_iter().enumerate() {\n            let cost = usize::from(a_elem != b_elem);\n            let distance_a = distance_b + cost;\n            distance_b = cache[j];\n            result = min(result + 1, min(distance_a, distance_b + 1));\n            cache[j] = result;\n        }\n    }\n    result\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculates the minimum number of insertions, deletions, and substitutions\n/// required to change one sequence into the other.\n///\n/// ```\n/// use strsim::generic_levenshtein;\n///\n/// assert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n/// ```\n233 pub fn generic_levenshtein<'a, 'b, Iter1, Iter2, Elem1, Elem2>(a: &'a Iter1, b: &'b Iter2) -> usize\n234 where\n235     &'a Iter1: IntoIterator<Item = Elem1>,\n236     &'b Iter2: IntoIterator<Item = Elem2>,\n237     Elem1: PartialEq<Elem2>,\n238 {\n239     let b_len = b.into_iter().count();\n240 \n241     let mut cache: Vec<usize> = (1..b_len + 1).collect();\n242 \n243     let mut result = b_len;\n244 \n245     for (i, a_elem) in a.into_iter().enumerate() {\n246         result = i + 1;\n247         let mut distance_b = i;\n248 \n249         for (j, b_elem) in b.into_iter().enumerate() {\n250             let cost = usize::from(a_elem != b_elem);\n251             let distance_a = distance_b + cost;\n252             distance_b = cache[j];\n253             result = min(result + 1, min(distance_a, distance_b + 1));\n254             cache[j] = result;\n255         }\n256     }\n257 \n258     result\n259 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}