{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\npub fn sorensen_dice(a: &str, b: &str) -> f64 {\n    let a: String = a.chars().filter(|&x| !char::is_whitespace(x)).collect();\n    let b: String = b.chars().filter(|&x| !char::is_whitespace(x)).collect();\n    if a == b {\n        return 1.0;\n    }\n    if a.len() < 2 || b.len() < 2 {\n        return 0.0;\n    }\n    let mut a_bigrams: HashMap<(char, char), usize> = HashMap::new();\n    for bigram in bigrams(&a) {\n        *a_bigrams.entry(bigram).or_insert(0) += 1;\n    }\n    let mut intersection_size = 0_usize;\n    for bigram in bigrams(&b) {\n        a_bigrams\n            .entry(bigram)\n            .and_modify(|bi| {\n                if *bi > 0 {\n                    *bi -= 1;\n                    intersection_size += 1;\n                }\n            });\n    }\n    (2 * intersection_size) as f64 / (a.len() + b.len() - 2) as f64\n}\nfn bigrams(s: &str) -> impl Iterator<Item = (char, char)> + '_ {\n    s.chars().zip(s.chars().skip(1))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculates a SÃ¸rensen-Dice similarity distance using bigrams.\n/// See <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n///\n/// ```\n/// use strsim::sorensen_dice;\n///\n/// assert_eq!(1.0, sorensen_dice(\"\", \"\"));\n/// assert_eq!(0.0, sorensen_dice(\"\", \"a\"));\n/// assert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\n/// assert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\n/// assert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n/// ```\n721 pub fn sorensen_dice(a: &str, b: &str) -> f64 {\n722     // implementation guided by\n723     // https://github.com/aceakash/string-similarity/blob/f83ba3cd7bae874c20c429774e911ae8cff8bced/src/index.js#L6\n724 \n725     let a: String = a.chars().filter(|&x| !char::is_whitespace(x)).collect();\n726     let b: String = b.chars().filter(|&x| !char::is_whitespace(x)).collect();\n727 \n728     if a == b {\n729         return 1.0;\n730     }\n731 \n732     if a.len() < 2 || b.len() < 2 {\n733         return 0.0;\n734     }\n735 \n736     let mut a_bigrams: HashMap<(char, char), usize> = HashMap::new();\n737 \n738     for bigram in bigrams(&a) {\n739         *a_bigrams.entry(bigram).or_insert(0) += 1;\n740     }\n741 \n742     let mut intersection_size = 0_usize;\n743 \n744     for bigram in bigrams(&b) {\n745         a_bigrams.entry(bigram).and_modify(|bi| {\n746             if *bi > 0 {\n747                 *bi -= 1;\n748                 intersection_size += 1;\n749             }\n750         });\n751     }\n752 \n753     (2 * intersection_size) as f64 / (a.len() + b.len() - 2) as f64\n754 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}