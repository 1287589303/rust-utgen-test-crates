{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\n#[derive(Debug, PartialEq)]\npub enum StrSimError {\n    DifferentLengthArgs,\n}\npub fn hamming(a: &str, b: &str) -> HammingResult {\n    generic_hamming(a.chars(), b.chars())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculates the number of positions in the two strings where the characters\n/// differ. Returns an error if the strings have different lengths.\n///\n/// ```\n/// use strsim::{hamming, StrSimError::DifferentLengthArgs};\n///\n/// assert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n///\n/// assert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n/// ```\n84 pub fn hamming(a: &str, b: &str) -> HammingResult {\n85     generic_hamming(a.chars(), b.chars())\n86 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}