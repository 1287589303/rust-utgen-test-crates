{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\npub fn osa_distance(a: &str, b: &str) -> usize {\n    let b_len = b.chars().count();\n    let mut prev_two_distances: Vec<usize> = (0..b_len + 1).collect();\n    let mut prev_distances: Vec<usize> = (0..b_len + 1).collect();\n    let mut curr_distances: Vec<usize> = vec![0; b_len + 1];\n    let mut prev_a_char = char::MAX;\n    let mut prev_b_char = char::MAX;\n    for (i, a_char) in a.chars().enumerate() {\n        curr_distances[0] = i + 1;\n        for (j, b_char) in b.chars().enumerate() {\n            let cost = usize::from(a_char != b_char);\n            curr_distances[j + 1] = min(\n                curr_distances[j] + 1,\n                min(prev_distances[j + 1] + 1, prev_distances[j] + cost),\n            );\n            if i > 0 && j > 0 && a_char != b_char && a_char == prev_b_char\n                && b_char == prev_a_char\n            {\n                curr_distances[j + 1] = min(\n                    curr_distances[j + 1],\n                    prev_two_distances[j - 1] + 1,\n                );\n            }\n            prev_b_char = b_char;\n        }\n        mem::swap(&mut prev_two_distances, &mut prev_distances);\n        mem::swap(&mut prev_distances, &mut curr_distances);\n        prev_a_char = a_char;\n    }\n    prev_distances[b_len]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like Levenshtein but allows for adjacent transpositions. Each substring can\n/// only be edited once.\n///\n/// ```\n/// use strsim::osa_distance;\n///\n/// assert_eq!(3, osa_distance(\"ab\", \"bca\"));\n/// ```\n300 pub fn osa_distance(a: &str, b: &str) -> usize {\n301     let b_len = b.chars().count();\n302     // 0..=b_len behaves like 0..b_len.saturating_add(1) which could be a different size\n303     // this leads to significantly worse code gen when swapping the vectors below\n304     let mut prev_two_distances: Vec<usize> = (0..b_len + 1).collect();\n305     let mut prev_distances: Vec<usize> = (0..b_len + 1).collect();\n306     let mut curr_distances: Vec<usize> = vec![0; b_len + 1];\n307 \n308     let mut prev_a_char = char::MAX;\n309     let mut prev_b_char = char::MAX;\n310 \n311     for (i, a_char) in a.chars().enumerate() {\n312         curr_distances[0] = i + 1;\n313 \n314         for (j, b_char) in b.chars().enumerate() {\n315             let cost = usize::from(a_char != b_char);\n316             curr_distances[j + 1] = min(\n317                 curr_distances[j] + 1,\n318                 min(prev_distances[j + 1] + 1, prev_distances[j] + cost),\n319             );\n320             if i > 0 && j > 0 && a_char != b_char && a_char == prev_b_char && b_char == prev_a_char\n321             {\n322                 curr_distances[j + 1] = min(curr_distances[j + 1], prev_two_distances[j - 1] + 1);\n323             }\n324 \n325             prev_b_char = b_char;\n326         }\n327 \n328         mem::swap(&mut prev_two_distances, &mut prev_distances);\n329         mem::swap(&mut prev_distances, &mut curr_distances);\n330         prev_a_char = a_char;\n331     }\n332 \n333     // access prev_distances instead of curr_distances since we swapped\n334     // them above. In case a is empty this would still contain the correct value\n335     // from initializing the last element to b_len\n336     prev_distances[b_len]\n337 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}