{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\nstruct HybridGrowingHashmapChar<ValueType> {\n    map: GrowingHashmapChar<ValueType>,\n    extended_ascii: [ValueType; 256],\n}\nstruct GrowingHashmapChar<ValueType> {\n    used: i32,\n    fill: i32,\n    mask: i32,\n    map: Option<Vec<GrowingHashmapMapElemChar<ValueType>>>,\n}\nimpl<ValueType> HybridGrowingHashmapChar<ValueType>\nwhere\n    ValueType: Default + Clone + Copy + Eq,\n{\n    fn get(&self, key: char) -> ValueType {}\n    fn get_mut(&mut self, key: char) -> &mut ValueType {\n        let value = key as u32;\n        if value <= 255 {\n            let val_u8 = u8::try_from(value).expect(\"we check the bounds above\");\n            &mut self.extended_ascii[usize::from(val_u8)]\n        } else {\n            self.map.get_mut(value)\n        }\n    }\n}\nimpl<ValueType> GrowingHashmapChar<ValueType>\nwhere\n    ValueType: Default + Clone + Eq + Copy,\n{\n    fn get(&self, key: u32) -> ValueType {}\n    fn get_mut(&mut self, key: u32) -> &mut ValueType {\n        if self.map.is_none() {\n            self.allocate();\n        }\n        let mut i = self.lookup(key);\n        if self.map.as_ref().expect(\"map should have been created above\")[i].value\n            == Default::default()\n        {\n            self.fill += 1;\n            if self.fill * 3 >= (self.mask + 1) * 2 {\n                self.grow((self.used + 1) * 2);\n                i = self.lookup(key);\n            }\n            self.used += 1;\n        }\n        let elem = &mut self\n            .map\n            .as_mut()\n            .expect(\"map should have been created above\")[i];\n        elem.key = key;\n        &mut elem.value\n    }\n    fn allocate(&mut self) {}\n    fn lookup(&self, key: u32) -> usize {}\n    fn grow(&mut self, min_used: i32) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n586 fn get_mut(&mut self, key: char) -> &mut ValueType {\n587     let value = key as u32;\n588     if value <= 255 {\n589         let val_u8 = u8::try_from(value).expect(\"we check the bounds above\");\n590         &mut self.extended_ascii[usize::from(val_u8)]\n591     } else {\n592         self.map.get_mut(value)\n593     }\n594 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}