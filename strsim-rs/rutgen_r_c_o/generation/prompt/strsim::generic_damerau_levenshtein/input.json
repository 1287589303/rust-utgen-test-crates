{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\npub fn generic_damerau_levenshtein<Elem>(a_elems: &[Elem], b_elems: &[Elem]) -> usize\nwhere\n    Elem: Eq + Hash + Clone,\n{\n    let a_len = a_elems.len();\n    let b_len = b_elems.len();\n    if a_len == 0 {\n        return b_len;\n    }\n    if b_len == 0 {\n        return a_len;\n    }\n    let width = a_len + 2;\n    let mut distances = vec![0; (a_len + 2) * (b_len + 2)];\n    let max_distance = a_len + b_len;\n    distances[0] = max_distance;\n    for i in 0..(a_len + 1) {\n        distances[flat_index(i + 1, 0, width)] = max_distance;\n        distances[flat_index(i + 1, 1, width)] = i;\n    }\n    for j in 0..(b_len + 1) {\n        distances[flat_index(0, j + 1, width)] = max_distance;\n        distances[flat_index(1, j + 1, width)] = j;\n    }\n    let mut elems: HashMap<Elem, usize> = HashMap::with_capacity(64);\n    for i in 1..(a_len + 1) {\n        let mut db = 0;\n        for j in 1..(b_len + 1) {\n            let k = match elems.get(&b_elems[j - 1]) {\n                Some(&value) => value,\n                None => 0,\n            };\n            let insertion_cost = distances[flat_index(i, j + 1, width)] + 1;\n            let deletion_cost = distances[flat_index(i + 1, j, width)] + 1;\n            let transposition_cost = distances[flat_index(k, db, width)] + (i - k - 1)\n                + 1 + (j - db - 1);\n            let mut substitution_cost = distances[flat_index(i, j, width)] + 1;\n            if a_elems[i - 1] == b_elems[j - 1] {\n                db = j;\n                substitution_cost -= 1;\n            }\n            distances[flat_index(i + 1, j + 1, width)] = min(\n                substitution_cost,\n                min(insertion_cost, min(deletion_cost, transposition_cost)),\n            );\n        }\n        elems.insert(a_elems[i - 1].clone(), i);\n    }\n    distances[flat_index(a_len + 1, b_len + 1, width)]\n}\nfn flat_index(i: usize, j: usize, width: usize) -> usize {\n    j * width + i\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like optimal string alignment, but substrings can be edited an unlimited\n/// number of times, and the triangle inequality holds.\n///\n/// ```\n/// use strsim::generic_damerau_levenshtein;\n///\n/// assert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n/// ```\n353 pub fn generic_damerau_levenshtein<Elem>(a_elems: &[Elem], b_elems: &[Elem]) -> usize\n354 where\n355     Elem: Eq + Hash + Clone,\n356 {\n357     let a_len = a_elems.len();\n358     let b_len = b_elems.len();\n359 \n360     if a_len == 0 {\n361         return b_len;\n362     }\n363     if b_len == 0 {\n364         return a_len;\n365     }\n366 \n367     let width = a_len + 2;\n368     let mut distances = vec![0; (a_len + 2) * (b_len + 2)];\n369     let max_distance = a_len + b_len;\n370     distances[0] = max_distance;\n371 \n372     for i in 0..(a_len + 1) {\n373         distances[flat_index(i + 1, 0, width)] = max_distance;\n374         distances[flat_index(i + 1, 1, width)] = i;\n375     }\n376 \n377     for j in 0..(b_len + 1) {\n378         distances[flat_index(0, j + 1, width)] = max_distance;\n379         distances[flat_index(1, j + 1, width)] = j;\n380     }\n381 \n382     let mut elems: HashMap<Elem, usize> = HashMap::with_capacity(64);\n383 \n384     for i in 1..(a_len + 1) {\n385         let mut db = 0;\n386 \n387         for j in 1..(b_len + 1) {\n388             let k = match elems.get(&b_elems[j - 1]) {\n389                 Some(&value) => value,\n390                 None => 0,\n391             };\n392 \n393             let insertion_cost = distances[flat_index(i, j + 1, width)] + 1;\n394             let deletion_cost = distances[flat_index(i + 1, j, width)] + 1;\n395             let transposition_cost =\n396                 distances[flat_index(k, db, width)] + (i - k - 1) + 1 + (j - db - 1);\n397 \n398             let mut substitution_cost = distances[flat_index(i, j, width)] + 1;\n399             if a_elems[i - 1] == b_elems[j - 1] {\n400                 db = j;\n401                 substitution_cost -= 1;\n402             }\n403 \n404             distances[flat_index(i + 1, j + 1, width)] = min(\n405                 substitution_cost,\n406                 min(insertion_cost, min(deletion_cost, transposition_cost)),\n407             );\n408         }\n409 \n410         elems.insert(a_elems[i - 1].clone(), i);\n411     }\n412 \n413     distances[flat_index(a_len + 1, b_len + 1, width)]\n414 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}