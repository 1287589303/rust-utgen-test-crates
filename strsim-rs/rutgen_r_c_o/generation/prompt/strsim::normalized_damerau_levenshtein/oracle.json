{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\npub fn normalized_damerau_levenshtein(a: &str, b: &str) -> f64 {\n    if a.is_empty() && b.is_empty() {\n        return 1.0;\n    }\n    let len1 = a.chars().count();\n    let len2 = b.chars().count();\n    let dist = damerau_levenshtein_impl(a.chars(), len1, b.chars(), len2);\n    1.0 - (dist as f64) / (max(len1, len2) as f64)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculates a normalized score of the Damerau–Levenshtein algorithm between\n/// 0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n///\n/// ```\n/// use strsim::normalized_damerau_levenshtein;\n///\n/// assert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\n/// assert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\n/// assert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\n/// assert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\n/// assert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n/// ```\n693 pub fn normalized_damerau_levenshtein(a: &str, b: &str) -> f64 {\n694     if a.is_empty() && b.is_empty() {\n695         return 1.0;\n696     }\n697 \n698     let len1 = a.chars().count();\n699     let len2 = b.chars().count();\n700     let dist = damerau_levenshtein_impl(a.chars(), len1, b.chars(), len2);\n701     1.0 - (dist as f64) / (max(len1, len2) as f64)\n702 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}