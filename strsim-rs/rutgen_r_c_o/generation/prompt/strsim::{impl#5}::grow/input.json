{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\nstruct GrowingHashmapChar<ValueType> {\n    used: i32,\n    fill: i32,\n    mask: i32,\n    map: Option<Vec<GrowingHashmapMapElemChar<ValueType>>>,\n}\n#[derive(Default, Clone)]\nstruct GrowingHashmapMapElemChar<ValueType> {\n    key: u32,\n    value: ValueType,\n}\nimpl<ValueType> GrowingHashmapChar<ValueType>\nwhere\n    ValueType: Default + Clone + Eq + Copy,\n{\n    fn get(&self, key: u32) -> ValueType {}\n    fn get_mut(&mut self, key: u32) -> &mut ValueType {}\n    fn allocate(&mut self) {}\n    fn lookup(&self, key: u32) -> usize {\n        let hash = key;\n        let mut i = hash as usize & self.mask as usize;\n        let map = self.map.as_ref().expect(\"callers have to ensure map is allocated\");\n        if map[i].value == Default::default() || map[i].key == key {\n            return i;\n        }\n        let mut perturb = key;\n        loop {\n            i = (i * 5 + perturb as usize + 1) & self.mask as usize;\n            if map[i].value == Default::default() || map[i].key == key {\n                return i;\n            }\n            perturb >>= 5;\n        }\n    }\n    fn grow(&mut self, min_used: i32) {\n        let mut new_size = self.mask + 1;\n        while new_size <= min_used {\n            new_size <<= 1;\n        }\n        self.fill = self.used;\n        self.mask = new_size - 1;\n        let old_map = std::mem::replace(\n            self.map.as_mut().expect(\"callers have to ensure map is allocated\"),\n            vec![GrowingHashmapMapElemChar::< ValueType >::default(); new_size as usize],\n        );\n        for elem in old_map {\n            if elem.value != Default::default() {\n                let j = self.lookup(elem.key);\n                let new_elem = &mut self.map.as_mut().expect(\"map created above\")[j];\n                new_elem.key = elem.key;\n                new_elem.value = elem.value;\n                self.used -= 1;\n                if self.used == 0 {\n                    break;\n                }\n            }\n        }\n        self.used = self.fill;\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n534 fn grow(&mut self, min_used: i32) {\n535     let mut new_size = self.mask + 1;\n536     while new_size <= min_used {\n537         new_size <<= 1;\n538     }\n539 \n540     self.fill = self.used;\n541     self.mask = new_size - 1;\n542 \n543     let old_map = std::mem::replace(\n544         self.map\n545             .as_mut()\n546             .expect(\"callers have to ensure map is allocated\"),\n547         vec![GrowingHashmapMapElemChar::<ValueType>::default(); new_size as usize],\n548     );\n549 \n550     for elem in old_map {\n551         if elem.value != Default::default() {\n552             let j = self.lookup(elem.key);\n553             let new_elem = &mut self.map.as_mut().expect(\"map created above\")[j];\n554             new_elem.key = elem.key;\n555             new_elem.value = elem.value;\n556             self.used -= 1;\n557             if self.used == 0 {\n558                 break;\n559             }\n560         }\n561     }\n562 \n563     self.used = self.fill;\n564 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}