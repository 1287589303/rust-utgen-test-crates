{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\nstruct GrowingHashmapChar<ValueType> {\n    used: i32,\n    fill: i32,\n    mask: i32,\n    map: Option<Vec<GrowingHashmapMapElemChar<ValueType>>>,\n}\n#[derive(Default, Clone)]\nstruct GrowingHashmapMapElemChar<ValueType> {\n    key: u32,\n    value: ValueType,\n}\nimpl<ValueType> Default for GrowingHashmapChar<ValueType>\nwhere\n    ValueType: Default + Clone + Eq,\n{\n    fn default() -> Self {\n        Self {\n            used: 0,\n            fill: 0,\n            mask: -1,\n            map: None,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n451 fn default() -> Self {\n452     Self {\n453         used: 0,\n454         fill: 0,\n455         mask: -1,\n456         map: None,\n457     }\n458 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}