{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\nstruct HybridGrowingHashmapChar<ValueType> {\n    map: GrowingHashmapChar<ValueType>,\n    extended_ascii: [ValueType; 256],\n}\nstruct GrowingHashmapChar<ValueType> {\n    used: i32,\n    fill: i32,\n    mask: i32,\n    map: Option<Vec<GrowingHashmapMapElemChar<ValueType>>>,\n}\nimpl<ValueType> HybridGrowingHashmapChar<ValueType>\nwhere\n    ValueType: Default + Clone + Copy + Eq,\n{\n    fn get(&self, key: char) -> ValueType {\n        let value = key as u32;\n        if value <= 255 {\n            let val_u8 = u8::try_from(value).expect(\"we check the bounds above\");\n            self.extended_ascii[usize::from(val_u8)]\n        } else {\n            self.map.get(value)\n        }\n    }\n    fn get_mut(&mut self, key: char) -> &mut ValueType {}\n}\nimpl<ValueType> GrowingHashmapChar<ValueType>\nwhere\n    ValueType: Default + Clone + Eq + Copy,\n{\n    fn get(&self, key: u32) -> ValueType {\n        self.map\n            .as_ref()\n            .map_or_else(|| Default::default(), |map| map[self.lookup(key)].value)\n    }\n    fn get_mut(&mut self, key: u32) -> &mut ValueType {}\n    fn allocate(&mut self) {}\n    fn lookup(&self, key: u32) -> usize {}\n    fn grow(&mut self, min_used: i32) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n576 fn get(&self, key: char) -> ValueType {\n577     let value = key as u32;\n578     if value <= 255 {\n579         let val_u8 = u8::try_from(value).expect(\"we check the bounds above\");\n580         self.extended_ascii[usize::from(val_u8)]\n581     } else {\n582         self.map.get(value)\n583     }\n584 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}