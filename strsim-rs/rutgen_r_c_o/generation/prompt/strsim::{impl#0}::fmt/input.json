{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\n#[derive(Debug, PartialEq)]\npub enum StrSimError {\n    DifferentLengthArgs,\n}\nimpl Display for StrSimError {\n    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n        let text = match self {\n            StrSimError::DifferentLengthArgs => \"Differing length arguments provided\",\n        };\n        write!(fmt, \"{}\", text)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n38 fn fmt(&self, fmt: &mut Formatter<'_>) -> Result<(), fmt::Error> {\n39     let text = match self {\n40         StrSimError::DifferentLengthArgs => \"Differing length arguments provided\",\n41     };\n42 \n43     write!(fmt, \"{}\", text)\n44 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}