{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\n#[derive(Debug, PartialEq)]\npub enum StrSimError {\n    DifferentLengthArgs,\n}\npub fn generic_hamming<Iter1, Iter2, Elem1, Elem2>(a: Iter1, b: Iter2) -> HammingResult\nwhere\n    Iter1: IntoIterator<Item = Elem1>,\n    Iter2: IntoIterator<Item = Elem2>,\n    Elem1: PartialEq<Elem2>,\n{\n    let (mut ita, mut itb) = (a.into_iter(), b.into_iter());\n    let mut count = 0;\n    loop {\n        match (ita.next(), itb.next()) {\n            (Some(x), Some(y)) => {\n                if x != y {\n                    count += 1;\n                }\n            }\n            (None, None) => return Ok(count),\n            _ => return Err(StrSimError::DifferentLengthArgs),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculates the number of positions in the two sequences where the elements\n/// differ. Returns an error if the sequences have different lengths.\n53 pub fn generic_hamming<Iter1, Iter2, Elem1, Elem2>(a: Iter1, b: Iter2) -> HammingResult\n54 where\n55     Iter1: IntoIterator<Item = Elem1>,\n56     Iter2: IntoIterator<Item = Elem2>,\n57     Elem1: PartialEq<Elem2>,\n58 {\n59     let (mut ita, mut itb) = (a.into_iter(), b.into_iter());\n60     let mut count = 0;\n61     loop {\n62         match (ita.next(), itb.next()) {\n63             (Some(x), Some(y)) => {\n64                 if x != y {\n65                     count += 1;\n66                 }\n67             }\n68             (None, None) => return Ok(count),\n69             _ => return Err(StrSimError::DifferentLengthArgs),\n70         }\n71     }\n72 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}