{
  "name": "strsim::normalized_levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:285:1:290:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: a.is_empty() at line 286 is true\n",
        "precondition: b.is_empty() at line 286 is true\n",
        "expected return value/type: 1.0\n"
      ],
      "input_infer": "a = \"\", b = \"\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"\", \"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1.0);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"\", \"\");",
                "    assert_eq!(result, 1.0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"\", \"second\");",
                "}"
              ],
              "oracle": [
                "    assert!(result.abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"\", \"second\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"first\", \"\");",
                "}"
              ],
              "oracle": [
                "    assert!((result - 1.0).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"first\", \"\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"string\", \"string\");",
                "}"
              ],
              "oracle": [
                "    assert!((result - 1.0).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"string\", \"string\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"kitten\", \"sitting\");",
                "}"
              ],
              "oracle": [
                "    assert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);",
                "    assert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);",
                "    assert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);",
                "    assert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);",
                "    assert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"kitten\", \"sitting\");",
                "    assert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);",
                "    assert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);",
                "    assert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);",
                "    assert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);",
                "    assert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: a.is_empty() at line 286 is true\n",
        "precondition: b.is_empty() at line 286 is false\n",
        "expected return value/type: 1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64)\n"
      ],
      "input_infer": "a = \"\"; b = non-empty string with varying lengths (1 to 100 characters)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"\";",
                "    let b = \"a\";",
                "    normalized_levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert!((normalized_levenshtein(\"\", \"a\") - (1.0 - (levenshtein(\"\", \"a\") as f64) / (0.max(1) as f64))).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"a\";",
                "    normalized_levenshtein(a, b);",
                "    assert!((normalized_levenshtein(\"\", \"a\") - (1.0 - (levenshtein(\"\", \"a\") as f64) / (0.max(1) as f64))).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"\";",
                "    let b = \"abcdefghij\";",
                "    normalized_levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert!((normalized_levenshtein(\"\", \"abcdefghij\") - (1.0 - (levenshtein(\"\", \"abcdefghij\") as f64) / (0.max(10) as f64))).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"abcdefghij\";",
                "    normalized_levenshtein(a, b);",
                "    assert!((normalized_levenshtein(\"\", \"abcdefghij\") - (1.0 - (levenshtein(\"\", \"abcdefghij\") as f64) / (0.max(10) as f64))).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"\";",
                "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
                "    normalized_levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    let a = \"\";",
                "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
                "    assert!((normalized_levenshtein(a, b) - (1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64))).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
                "    normalized_levenshtein(a, b);",
                "    let a = \"\";",
                "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
                "    assert!((normalized_levenshtein(a, b) - (1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64))).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a = \"\";",
                "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
                "    normalized_levenshtein(a, b);",
                "}"
              ],
              "oracle": [
                "    assert!((normalized_levenshtein(\"\", \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") - (1.0 - (levenshtein(\"\", \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") as f64) / (0.max(66) as f64))).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";",
                "    normalized_levenshtein(a, b);",
                "    assert!((normalized_levenshtein(\"\", \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") - (1.0 - (levenshtein(\"\", \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") as f64) / (0.max(66) as f64))).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: a.is_empty() at line 286 is false\n",
        "expected return value/type: 1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64)\n"
      ],
      "input_infer": "Test input conditions or ranges: a and b are non-empty strings with varying lengths (e.g., a = \"abc\", b = \"def\"), a = \"abc\", b = \"abc\", a = \"abcd\", b = \"abcde\", and a = \"a\", b = \"b\".\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"abc\", \"def\");",
                "}"
              ],
              "oracle": [
                "    assert!((result - 1.0).abs() < 0.00001);",
                "    assert!((result - (3.0 / 3.0)).abs() < 0.00001);",
                "    assert!((result - (levenshtein(\"abc\", \"def\") as f64) / 3.0).abs() < 0.00001);",
                "    assert!(result >= 0.0 && result <= 1.0);",
                "    assert!((result - 0.0).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"abc\", \"def\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "    assert!((result - (3.0 / 3.0)).abs() < 0.00001);",
                "    assert!((result - (levenshtein(\"abc\", \"def\") as f64) / 3.0).abs() < 0.00001);",
                "    assert!(result >= 0.0 && result <= 1.0);",
                "    assert!((result - 0.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"abc\", \"abc\");",
                "}"
              ],
              "oracle": [
                "    assert!((result - 1.0).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"abc\", \"ab\");",
                "    assert!((result - 0.66667).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"abc\", \"a\");",
                "    assert!((result - 0.33333).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"abc\", \"de\");",
                "    assert!((result - 0.0).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"a long string\", \"a string\");",
                "    assert!((result - 0.61538).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"rust\", \"dust\");",
                "    assert!((result - 0.75).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"abc\", \"abc\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"abc\", \"ab\");",
                "    assert!((result - 0.66667).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"abc\", \"a\");",
                "    assert!((result - 0.33333).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"abc\", \"de\");",
                "    assert!((result - 0.0).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"a long string\", \"a string\");",
                "    assert!((result - 0.61538).abs() < 0.00001);",
                "    let result = normalized_levenshtein(\"rust\", \"dust\");",
                "    assert!((result - 0.75).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"abcd\", \"abcde\");",
                "}"
              ],
              "oracle": [
                "    assert!((result - 0.8).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"abcd\", \"abcde\");",
                "    assert!((result - 0.8).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = normalized_levenshtein(\"a\", \"b\");",
                "}"
              ],
              "oracle": [
                "    assert!((result - 1.0).abs() < 0.00001);",
                "    assert!((result - 0.0).abs() < 0.00001);"
              ],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"a\", \"b\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "    assert!((result - 0.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}