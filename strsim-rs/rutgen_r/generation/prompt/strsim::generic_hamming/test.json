{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/lib.rs\n// crate name is strsim\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculates the number of positions in the two sequences where the elements\n/// differ. Returns an error if the sequences have different lengths.\n53 pub fn generic_hamming<Iter1, Iter2, Elem1, Elem2>(a: Iter1, b: Iter2) -> HammingResult\n54 where\n55     Iter1: IntoIterator<Item = Elem1>,\n56     Iter2: IntoIterator<Item = Elem2>,\n57     Elem1: PartialEq<Elem2>,\n58 {\n59     let (mut ita, mut itb) = (a.into_iter(), b.into_iter());\n60     let mut count = 0;\n61     loop {\n62         match (ita.next(), itb.next()) {\n63             (Some(x), Some(y)) => {\n64                 if x != y {\n65                     count += 1;\n66                 }\n67             }\n68             (None, None) => return Ok(count),\n69             _ => return Err(StrSimError::DifferentLengthArgs),\n70         }\n71     }\n72 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}