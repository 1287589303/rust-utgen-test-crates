{
  "name": "strsim::damerau_levenshtein_impl",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:609:1:667:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is true\n",
        "precondition: (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) at line 637 is true\n",
        "precondition: ch1 == ch2 at line 643 is true\n",
        "precondition: (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) at line 637 is false\n",
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is false\n",
        "expected return value/type: r[len2 + 1] as usize\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"test\".chars();",
                "    let s2 = \"test\".chars();",
                "    let len1 = 4;",
                "    let len2 = 4;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"test\".chars();",
                "    let s2 = \"tests\".chars();",
                "    let len1 = 4;",
                "    let len2 = 5;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"tests\".chars();",
                "    let s2 = \"test\".chars();",
                "    let len1 = 5;",
                "    let len2 = 4;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"test\".chars();",
                "    let s2 = \"best\".chars();",
                "    let len1 = 4;",
                "    let len2 = 4;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abc\".chars();",
                "    let s2 = \"xyc\".chars();",
                "    let len1 = 3;",
                "    let len2 = 3;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"kitten\".chars();",
                "    let s2 = \"sitting\".chars();",
                "    let len1 = 6;",
                "    let len2 = 7;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"\".chars();",
                "    let s2 = \"\".chars();",
                "    let len1 = 0;",
                "    let len2 = 0;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"nonempty\".chars();",
                "    let s2 = \"\".chars();",
                "    let len1 = 9;",
                "    let len2 = 0;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, len1); ",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"kitten\".chars();",
                "    let s2 = \"sittingdifferently\".chars();",
                "    let len1 = 6;",
                "    let len2 = 19;",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 15);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is true\n",
        "precondition: (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) at line 637 is true\n",
        "precondition: ch1 == ch2 at line 643 is false\n",
        "precondition: j as isize - l == 1 at line 651 is false\n",
        "precondition: (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) at line 637 is false\n",
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is false\n",
        "expected return value/type: r[len2 + 1] as usize\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abcde\".chars();",
                "    let s2 = \"fghij\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"a\".chars();",
                "    let s2 = \"b\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"\".chars();",
                "    let s2 = \"abc\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"hello\".chars();",
                "    let s2 = \"world\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 8);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abcdefghij\".chars();",
                "    let s2 = \"klmnopqrst\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 20);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is true\n",
        "precondition: (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) at line 637 is true\n",
        "precondition: ch1 == ch2 at line 643 is false\n",
        "precondition: j as isize - l == 1 at line 651 is true\n",
        "precondition: i as isize - k == 1 at line 654 is false\n",
        "precondition: (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) at line 637 is false\n",
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is false\n",
        "expected return value/type: r[len2 + 1] as usize\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"kitten\".chars();",
                "    let s2 = \"sitting\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 3); // Expected distance for \"kitten\" to \"sitting\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"flaw\".chars();",
                "    let s2 = \"lawn\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 2); // Expected distance for \"flaw\" to \"lawn\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"intention\".chars();",
                "    let s2 = \"execution\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 5); // Expected distance for \"intention\" to \"execution\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"\".chars();",
                "    let s2 = \"abc\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 3); // Expected distance for \"\" to \"abc\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abcde\".chars();",
                "    let s2 = \"abfde\".chars();",
                "    let len1 = s1.clone().count();",
                "    let len2 = s2.clone().count();",
                "    let result = damerau_levenshtein_impl(s1, len1, s2, len2);",
                "    assert_eq!(result, 1); // Expected distance for \"abcde\" to \"abfde\"",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is true\n",
        "precondition: (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) at line 637 is true\n",
        "precondition: ch1 == ch2 at line 643 is false\n",
        "precondition: j as isize - l == 1 at line 651 is true\n",
        "precondition: i as isize - k == 1 at line 654 is true\n",
        "precondition: (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) at line 637 is false\n",
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is false\n",
        "expected return value/type: r[len2 + 1] as usize\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct HybridGrowingHashmapChar<RowId> {",
                "        map: std::collections::HashMap<char, RowId>,",
                "    }",
                "",
                "    impl Default for HybridGrowingHashmapChar<isize> {",
                "        fn default() -> Self {",
                "            HybridGrowingHashmapChar {",
                "                map: std::collections::HashMap::new(),",
                "            }",
                "        }",
                "    }",
                "",
                "    impl HybridGrowingHashmapChar<isize> {",
                "        fn get(&self, key: char) -> &RowId {",
                "            self.map.get(&key).unwrap_or(&-1)",
                "        }",
                "        ",
                "        fn get_mut(&mut self, key: char) -> &mut RowId {",
                "            self.map.entry(key).or_insert(-1)",
                "        }",
                "    }",
                "",
                "    fn damerau_levenshtein_impl<Iter1, Iter2>(s1: Iter1, len1: usize, s2: Iter2, len2: usize) -> usize",
                "    where",
                "        Iter1: Iterator<Item = char> + Clone,",
                "        Iter2: Iterator<Item = char> + Clone,",
                "    {",
                "        let max_val = std::cmp::max(len1, len2) as isize + 1;",
                "        let mut last_row_id = HybridGrowingHashmapChar::default();",
                "        let size = len2 + 2;",
                "        let mut fr = vec![max_val; size];",
                "        let mut r1 = vec![max_val; size];",
                "        let mut r: Vec<isize> = (max_val..max_val + 1).chain(0..(size - 1) as isize).collect();",
                "",
                "        for (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) {",
                "            std::mem::swap(&mut r, &mut r1);",
                "            let mut last_col_id: isize = -1;",
                "            let mut last_i2l1 = r[1];",
                "            r[1] = i as isize;",
                "            let mut t = max_val;",
                "",
                "            for (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) {",
                "                let diag = r1[j] + isize::from(ch1 != ch2);",
                "                let left = r[j] + 1;",
                "                let up = r1[j + 1] + 1;",
                "                let mut temp = std::cmp::min(diag, std::cmp::min(left, up));",
                "",
                "                if ch1 == ch2 { continue; }",
                "",
                "                last_col_id = j as isize; ",
                "                fr[j + 1] = r1[j - 1]; ",
                "                t = last_i2l1; ",
                "",
                "                if j as isize - last_col_id == 1 {",
                "                    let k = last_row_id.get(ch2);",
                "                    let transpose = fr[j + 1] + (i as isize - k);",
                "                    temp = std::cmp::min(temp, transpose);",
                "                } ",
                "",
                "                last_i2l1 = r[j + 1];",
                "                r[j + 1] = temp;",
                "            }",
                "",
                "            last_row_id.get_mut(ch1) = i as isize;",
                "        }",
                "",
                "        r[len2 + 1] as usize",
                "    }",
                "",
                "    let s1 = \"kitten\".chars();",
                "    let s2 = \"sitting\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 6, s2, 7);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) at line 630 is false\n",
        "expected return value/type: r[len2 + 1] as usize\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"\".chars();",
                "    let s2 = \"\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 0, s2, 0);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"\".chars();",
                "    let s2 = \"abc\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 0, s2, 3);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abc\".chars();",
                "    let s2 = \"\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 3, s2, 0);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"a\".chars();",
                "    let s2 = \"ab\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 1, s2, 2);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"ab\".chars();",
                "    let s2 = \"a\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 2, s2, 1);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"a\".chars();",
                "    let s2 = \"b\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 1, s2, 1);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abc\".chars();",
                "    let s2 = \"abc\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 3, s2, 3);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"ab\".chars();",
                "    let s2 = \"ba\".chars();",
                "    let result = damerau_levenshtein_impl(s1, 2, s2, 2);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}