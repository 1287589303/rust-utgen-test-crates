{
  "name": "strsim::{impl#2}::into_iter",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:172:5:174:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Wrapper(String);",
                "    impl Wrapper {",
                "        fn into_iter(self) -> impl Iterator<Item = char> {",
                "            self.0.chars()",
                "        }",
                "    }",
                "    ",
                "    let wrapper = Wrapper(\"\".to_string());",
                "    let mut iter = wrapper.into_iter();",
                "    assert_eq!(iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Wrapper(String);",
                "    impl Wrapper {",
                "        fn into_iter(self) -> impl Iterator<Item = char> {",
                "            self.0.chars()",
                "        }",
                "    }",
                "    ",
                "    let wrapper = Wrapper(\"a\".to_string());",
                "    let mut iter = wrapper.into_iter();",
                "    assert_eq!(iter.next(), Some('a'));",
                "    assert_eq!(iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Wrapper(String);",
                "    impl Wrapper {",
                "        fn into_iter(self) -> impl Iterator<Item = char> {",
                "            self.0.chars()",
                "        }",
                "    }",
                "    ",
                "    let wrapper = Wrapper(\"abc\".to_string());",
                "    let mut iter = wrapper.into_iter();",
                "    assert_eq!(iter.next(), Some('a'));",
                "    assert_eq!(iter.next(), Some('b'));",
                "    assert_eq!(iter.next(), Some('c'));",
                "    assert_eq!(iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Wrapper(String);",
                "    impl Wrapper {",
                "        fn into_iter(self) -> impl Iterator<Item = char> {",
                "            self.0.chars()",
                "        }",
                "    }",
                "    ",
                "    let wrapper = Wrapper(\"αβγ\".to_string());",
                "    let mut iter = wrapper.into_iter();",
                "    assert_eq!(iter.next(), Some('α'));",
                "    assert_eq!(iter.next(), Some('β'));",
                "    assert_eq!(iter.next(), Some('γ'));",
                "    assert_eq!(iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}