{
  "name": "strsim::normalized_damerau_levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:693:1:702:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: a.is_empty() at line 694 is true\n",
        "precondition: b.is_empty() at line 694 is true\n",
        "expected return value/type: 1.0\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"\", \"\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"\", \"flower\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"tree\", \"\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\");",
                "    assert!((result - 0.27272).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: a.is_empty() at line 694 is true\n",
        "precondition: b.is_empty() at line 694 is false\n",
        "expected return value/type: 1.0 - (dist as f64) / (max(len1, len2) as f64)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = strsim::normalized_damerau_levenshtein(\"\", \"flower\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = strsim::normalized_damerau_levenshtein(\"\", \"test\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: a.is_empty() at line 694 is false\n",
        "expected return value/type: 1.0 - (dist as f64) / (max(len1, len2) as f64)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\");",
                "    assert!((result - 0.27272).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"tree\", \"\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"\", \"flower\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_damerau_levenshtein(\"\", \"\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}