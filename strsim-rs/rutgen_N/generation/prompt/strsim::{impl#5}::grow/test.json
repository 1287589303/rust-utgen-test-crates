{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/lib.rs\n// crate name is strsim\nThe function to be tested is presented with each line formatted as 'line number + code':\n534 fn grow(&mut self, min_used: i32) {\n535     let mut new_size = self.mask + 1;\n536     while new_size <= min_used {\n537         new_size <<= 1;\n538     }\n539 \n540     self.fill = self.used;\n541     self.mask = new_size - 1;\n542 \n543     let old_map = std::mem::replace(\n544         self.map\n545             .as_mut()\n546             .expect(\"callers have to ensure map is allocated\"),\n547         vec![GrowingHashmapMapElemChar::<ValueType>::default(); new_size as usize],\n548     );\n549 \n550     for elem in old_map {\n551         if elem.value != Default::default() {\n552             let j = self.lookup(elem.key);\n553             let new_elem = &mut self.map.as_mut().expect(\"map created above\")[j];\n554             new_elem.key = elem.key;\n555             new_elem.value = elem.value;\n556             self.used -= 1;\n557             if self.used == 0 {\n558                 break;\n559             }\n560         }\n561     }\n562 \n563     self.used = self.fill;\n564 }\n\n",
  "depend_pt": ""
}