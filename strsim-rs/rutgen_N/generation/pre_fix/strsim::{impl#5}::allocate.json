{
  "name": "strsim::{impl#5}::allocate",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:502:5:505:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct GrowingHashmap {",
                "        mask: usize,",
                "        map: Option<Vec<GrowingHashmapMapElemChar>>,",
                "    }",
                "",
                "    #[derive(Default)]",
                "    struct GrowingHashmapMapElemChar;",
                "",
                "    impl GrowingHashmap {",
                "        fn allocate(&mut self) {",
                "            self.mask = 8 - 1;",
                "            self.map = Some(vec![GrowingHashmapMapElemChar::default(); 8]);",
                "        }",
                "    }",
                "",
                "    let mut hashmap = GrowingHashmap {",
                "        mask: 0,",
                "        map: None,",
                "    };",
                "",
                "    hashmap.allocate();",
                "",
                "    assert_eq!(hashmap.mask, 7);",
                "    assert!(hashmap.map.is_some());",
                "    assert_eq!(hashmap.map.as_ref().unwrap().len(), 8);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}