{
  "name": "strsim::{impl#2}::into_iter",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:172:5:174:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct MyStruct(String);",
            "",
            "impl MyStruct {",
            "    fn into_iter(self) -> std::str::Chars<'static> {",
            "        self.0.chars()",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let my_struct = MyStruct(\"hello\".to_string());",
                "    let iter = my_struct.into_iter();",
                "    let result: Vec<char> = iter.collect();",
                "    assert_eq!(result, vec!['h', 'e', 'l', 'l', 'o']);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let my_struct = MyStruct(\"\".to_string());",
                "    let iter = my_struct.into_iter();",
                "    let result: Vec<char> = iter.collect();",
                "    assert_eq!(result, Vec::<char>::new());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}