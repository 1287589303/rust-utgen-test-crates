{
  "name": "strsim::damerau_levenshtein_impl",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:609:1:667:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"\".chars();",
                "    let s2 = \"\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 0, s2, 0), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abc\".chars();",
                "    let s2 = \"\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 3, s2, 0), 3);",
                "",
                "    let s1 = \"\".chars();",
                "    let s2 = \"abc\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 0, s2, 3), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"hello\".chars();",
                "    let s2 = \"hello\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 5, s2, 5), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abc\".chars();",
                "    let s2 = \"abcd\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 3, s2, 4), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abcd\".chars();",
                "    let s2 = \"abc\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 4, s2, 3), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"abc\".chars();",
                "    let s2 = \"axc\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 3, s2, 3), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"ab\".chars();",
                "    let s2 = \"ba\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 2, s2, 2), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let s1 = \"kitten\".chars();",
                "    let s2 = \"sitting\".chars();",
                "    assert_eq!(damerau_levenshtein_impl(s1, 6, s2, 7), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}