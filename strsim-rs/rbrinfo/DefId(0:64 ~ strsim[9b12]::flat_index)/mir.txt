bb0
  0: StorageLive(_4)
    SourceInfo(src/lib.rs:342:5-342:14)
  1: StorageLive(_5)
    SourceInfo(src/lib.rs:342:5-342:6)
  2: _5 = _2
    SourceInfo(src/lib.rs:342:5-342:6)
  3: StorageLive(_6)
    SourceInfo(src/lib.rs:342:9-342:14)
  4: _6 = _3
    SourceInfo(src/lib.rs:342:9-342:14)
  5: _7 = MulWithOverflow(_5, _6)
    SourceInfo(src/lib.rs:342:5-342:14)
  Terminator {
      source_info: SourceInfo(src/lib.rs:342:5-342:14)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _5, move _6) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _4 = move (_7.0: usize)
    SourceInfo(src/lib.rs:342:5-342:14)
  1: StorageDead(_6)
    SourceInfo(src/lib.rs:342:13-342:14)
  2: StorageDead(_5)
    SourceInfo(src/lib.rs:342:13-342:14)
  3: StorageLive(_8)
    SourceInfo(src/lib.rs:342:17-342:18)
  4: _8 = _1
    SourceInfo(src/lib.rs:342:17-342:18)
  5: _9 = AddWithOverflow(_4, _8)
    SourceInfo(src/lib.rs:342:5-342:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:342:5-342:18)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _8) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = move (_9.0: usize)
    SourceInfo(src/lib.rs:342:5-342:18)
  1: StorageDead(_8)
    SourceInfo(src/lib.rs:342:17-342:18)
  2: StorageDead(_4)
    SourceInfo(src/lib.rs:342:17-342:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:343:2-343:2)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/lib.rs:341:1-343:2)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

