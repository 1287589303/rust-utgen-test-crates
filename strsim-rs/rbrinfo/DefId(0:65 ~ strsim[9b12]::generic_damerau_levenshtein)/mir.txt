bb0
  0: StorageLive(_3)
    SourceInfo(src/lib.rs:357:9-357:14)
  1: StorageLive(_4)
    SourceInfo(src/lib.rs:357:17-357:24)
  2: _4 = &(*_1)
    SourceInfo(src/lib.rs:357:17-357:24)
  Terminator {
      source_info: SourceInfo(src/lib.rs:357:17-357:30)
      kind: _3 = core::slice::<impl [Elem]>::len(move _4) -> [return: bb1, unwind: bb122]
  }
  preds []
  succs [bb1, bb122]

bb1
  0: StorageDead(_4)
    SourceInfo(src/lib.rs:357:29-357:30)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(src/lib.rs:357:9-357:14)
  2: StorageLive(_5)
    SourceInfo(src/lib.rs:358:9-358:14)
  3: StorageLive(_6)
    SourceInfo(src/lib.rs:358:17-358:24)
  4: _6 = &(*_2)
    SourceInfo(src/lib.rs:358:17-358:24)
  Terminator {
      source_info: SourceInfo(src/lib.rs:358:17-358:30)
      kind: _5 = core::slice::<impl [Elem]>::len(move _6) -> [return: bb2, unwind: bb122]
  }
  preds [bb0]
  succs [bb2, bb122]

bb2
  0: StorageDead(_6)
    SourceInfo(src/lib.rs:358:29-358:30)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(src/lib.rs:358:9-358:14)
  2: StorageLive(_7)
    SourceInfo(src/lib.rs:360:5-362:6)
  3: StorageLive(_8)
    SourceInfo(src/lib.rs:360:8-360:18)
  4: StorageLive(_9)
    SourceInfo(src/lib.rs:360:8-360:13)
  5: _9 = _3
    SourceInfo(src/lib.rs:360:8-360:13)
  6: _8 = Eq(move _9, const 0_usize)
    SourceInfo(src/lib.rs:360:8-360:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:360:8-360:18)
      kind: switchInt(move _8) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_9)
    SourceInfo(src/lib.rs:360:17-360:18)
  1: _0 = _5
    SourceInfo(src/lib.rs:361:16-361:21)
  2: StorageDead(_8)
    SourceInfo(src/lib.rs:362:5-362:6)
  3: StorageDead(_7)
    SourceInfo(src/lib.rs:362:5-362:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb117
  }
  preds [bb2]
  succs [bb117]

bb4
  0: StorageDead(_9)
    SourceInfo(src/lib.rs:360:17-360:18)
  1: _7 = const ()
    SourceInfo(src/lib.rs:362:6-362:6)
  2: StorageDead(_8)
    SourceInfo(src/lib.rs:362:5-362:6)
  3: StorageDead(_7)
    SourceInfo(src/lib.rs:362:5-362:6)
  4: StorageLive(_11)
    SourceInfo(src/lib.rs:363:5-365:6)
  5: StorageLive(_12)
    SourceInfo(src/lib.rs:363:8-363:18)
  6: StorageLive(_13)
    SourceInfo(src/lib.rs:363:8-363:13)
  7: _13 = _5
    SourceInfo(src/lib.rs:363:8-363:13)
  8: _12 = Eq(move _13, const 0_usize)
    SourceInfo(src/lib.rs:363:8-363:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:363:8-363:18)
      kind: switchInt(move _12) -> [0: bb6, otherwise: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageDead(_13)
    SourceInfo(src/lib.rs:363:17-363:18)
  1: _0 = _3
    SourceInfo(src/lib.rs:364:16-364:21)
  2: StorageDead(_12)
    SourceInfo(src/lib.rs:365:5-365:6)
  3: StorageDead(_11)
    SourceInfo(src/lib.rs:365:5-365:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb117
  }
  preds [bb4]
  succs [bb117]

bb6
  0: StorageDead(_13)
    SourceInfo(src/lib.rs:363:17-363:18)
  1: _11 = const ()
    SourceInfo(src/lib.rs:365:6-365:6)
  2: StorageDead(_12)
    SourceInfo(src/lib.rs:365:5-365:6)
  3: StorageDead(_11)
    SourceInfo(src/lib.rs:365:5-365:6)
  4: StorageLive(_15)
    SourceInfo(src/lib.rs:367:9-367:14)
  5: StorageLive(_16)
    SourceInfo(src/lib.rs:367:17-367:22)
  6: _16 = _3
    SourceInfo(src/lib.rs:367:17-367:22)
  7: _17 = AddWithOverflow(_16, const 2_usize)
    SourceInfo(src/lib.rs:367:17-367:26)
  Terminator {
      source_info: SourceInfo(src/lib.rs:367:17-367:26)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, const 2_usize) -> [success: bb7, unwind: bb122]
  }
  preds [bb4]
  succs [bb7, bb122]

bb7
  0: _15 = move (_17.0: usize)
    SourceInfo(src/lib.rs:367:17-367:26)
  1: StorageDead(_16)
    SourceInfo(src/lib.rs:367:25-367:26)
  2: FakeRead(ForLet(None), _15)
    SourceInfo(src/lib.rs:367:9-367:14)
  3: StorageLive(_18)
    SourceInfo(src/lib.rs:368:9-368:22)
  4: StorageLive(_19)
    SourceInfo(src/lib.rs:368:33-368:58)
  5: StorageLive(_20)
    SourceInfo(src/lib.rs:368:33-368:44)
  6: StorageLive(_21)
    SourceInfo(src/lib.rs:368:34-368:39)
  7: _21 = _3
    SourceInfo(src/lib.rs:368:34-368:39)
  8: _22 = AddWithOverflow(_21, const 2_usize)
    SourceInfo(src/lib.rs:368:33-368:44)
  Terminator {
      source_info: SourceInfo(src/lib.rs:368:33-368:44)
      kind: assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _21, const 2_usize) -> [success: bb8, unwind: bb122]
  }
  preds [bb6]
  succs [bb8, bb122]

bb8
  0: _20 = move (_22.0: usize)
    SourceInfo(src/lib.rs:368:33-368:44)
  1: StorageDead(_21)
    SourceInfo(src/lib.rs:368:43-368:44)
  2: StorageLive(_23)
    SourceInfo(src/lib.rs:368:47-368:58)
  3: StorageLive(_24)
    SourceInfo(src/lib.rs:368:48-368:53)
  4: _24 = _5
    SourceInfo(src/lib.rs:368:48-368:53)
  5: _25 = AddWithOverflow(_24, const 2_usize)
    SourceInfo(src/lib.rs:368:47-368:58)
  Terminator {
      source_info: SourceInfo(src/lib.rs:368:47-368:58)
      kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", move _24, const 2_usize) -> [success: bb9, unwind: bb122]
  }
  preds [bb7]
  succs [bb9, bb122]

bb9
  0: _23 = move (_25.0: usize)
    SourceInfo(src/lib.rs:368:47-368:58)
  1: StorageDead(_24)
    SourceInfo(src/lib.rs:368:57-368:58)
  2: _26 = MulWithOverflow(_20, _23)
    SourceInfo(src/lib.rs:368:33-368:58)
  Terminator {
      source_info: SourceInfo(src/lib.rs:368:33-368:58)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} * {}`, which would overflow", move _20, move _23) -> [success: bb10, unwind: bb122]
  }
  preds [bb8]
  succs [bb10, bb122]

bb10
  0: _19 = move (_26.0: usize)
    SourceInfo(src/lib.rs:368:33-368:58)
  1: StorageDead(_23)
    SourceInfo(src/lib.rs:368:57-368:58)
  2: StorageDead(_20)
    SourceInfo(src/lib.rs:368:57-368:58)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9-47:42)
      kind: _18 = std::vec::from_elem::<usize>(const 0_usize, move _19) -> [return: bb11, unwind: bb122]
  }
  preds [bb9]
  succs [bb11, bb122]

bb11
  0: StorageDead(_19)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:41-47:42)
  1: FakeRead(ForLet(None), _18)
    SourceInfo(src/lib.rs:368:9-368:22)
  2: StorageLive(_27)
    SourceInfo(src/lib.rs:369:9-369:21)
  3: StorageLive(_28)
    SourceInfo(src/lib.rs:369:24-369:29)
  4: _28 = _3
    SourceInfo(src/lib.rs:369:24-369:29)
  5: StorageLive(_29)
    SourceInfo(src/lib.rs:369:32-369:37)
  6: _29 = _5
    SourceInfo(src/lib.rs:369:32-369:37)
  7: _30 = AddWithOverflow(_28, _29)
    SourceInfo(src/lib.rs:369:24-369:37)
  Terminator {
      source_info: SourceInfo(src/lib.rs:369:24-369:37)
      kind: assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, move _29) -> [success: bb12, unwind: bb121]
  }
  preds [bb10]
  succs [bb12, bb121]

bb12
  0: _27 = move (_30.0: usize)
    SourceInfo(src/lib.rs:369:24-369:37)
  1: StorageDead(_29)
    SourceInfo(src/lib.rs:369:36-369:37)
  2: StorageDead(_28)
    SourceInfo(src/lib.rs:369:36-369:37)
  3: FakeRead(ForLet(None), _27)
    SourceInfo(src/lib.rs:369:9-369:21)
  4: StorageLive(_31)
    SourceInfo(src/lib.rs:370:20-370:32)
  5: _31 = _27
    SourceInfo(src/lib.rs:370:20-370:32)
  6: StorageLive(_32)
    SourceInfo(src/lib.rs:370:14-370:17)
  7: StorageLive(_33)
    SourceInfo(src/lib.rs:370:5-370:14)
  8: _33 = &mut _18
    SourceInfo(src/lib.rs:370:5-370:14)
  Terminator {
      source_info: SourceInfo(src/lib.rs:370:14-370:17)
      kind: _32 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _33, const 0_usize) -> [return: bb13, unwind: bb121]
  }
  preds [bb11]
  succs [bb13, bb121]

bb13
  0: StorageDead(_33)
    SourceInfo(src/lib.rs:370:16-370:17)
  1: (*_32) = move _31
    SourceInfo(src/lib.rs:370:5-370:32)
  2: StorageDead(_31)
    SourceInfo(src/lib.rs:370:31-370:32)
  3: StorageDead(_32)
    SourceInfo(src/lib.rs:370:32-370:33)
  4: StorageLive(_34)
    SourceInfo(src/lib.rs:372:5-375:6)
  5: StorageLive(_35)
    SourceInfo(src/lib.rs:372:14-372:28)
  6: StorageLive(_36)
    SourceInfo(src/lib.rs:372:14-372:28)
  7: StorageLive(_37)
    SourceInfo(src/lib.rs:372:17-372:28)
  8: StorageLive(_38)
    SourceInfo(src/lib.rs:372:18-372:23)
  9: _38 = _3
    SourceInfo(src/lib.rs:372:18-372:23)
  10: _39 = AddWithOverflow(_38, const 1_usize)
    SourceInfo(src/lib.rs:372:17-372:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:17-372:28)
      kind: assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, const 1_usize) -> [success: bb14, unwind: bb121]
  }
  preds [bb12]
  succs [bb14, bb121]

bb14
  0: _37 = move (_39.0: usize)
    SourceInfo(src/lib.rs:372:17-372:28)
  1: StorageDead(_38)
    SourceInfo(src/lib.rs:372:27-372:28)
  2: _36 = std::ops::Range::<usize> { start: const 0_usize, end: move _37 }
    SourceInfo(src/lib.rs:372:14-372:28)
  3: StorageDead(_37)
    SourceInfo(src/lib.rs:372:27-372:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:14-372:28)
      kind: _35 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _36) -> [return: bb15, unwind: bb121]
  }
  preds [bb13]
  succs [bb15, bb121]

bb15
  0: StorageDead(_36)
    SourceInfo(src/lib.rs:372:27-372:28)
  1: PlaceMention(_35)
    SourceInfo(src/lib.rs:372:14-372:28)
  2: StorageLive(_40)
    SourceInfo(src/lib.rs:372:14-372:28)
  3: _40 = move _35
    SourceInfo(src/lib.rs:372:14-372:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:5-375:6)
      kind: goto -> bb16
  }
  preds [bb14]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:5-375:6)
      kind: falseUnwind -> [real: bb17, unwind: bb121]
  }
  preds [bb15, bb28]
  succs [bb17, bb121]

bb17
  0: StorageLive(_42)
    SourceInfo(src/lib.rs:372:14-372:28)
  1: StorageLive(_43)
    SourceInfo(src/lib.rs:372:14-372:28)
  2: StorageLive(_44)
    SourceInfo(src/lib.rs:372:14-372:28)
  3: StorageLive(_45)
    SourceInfo(src/lib.rs:372:14-372:28)
  4: _45 = &mut _40
    SourceInfo(src/lib.rs:372:14-372:28)
  5: _44 = &mut (*_45)
    SourceInfo(src/lib.rs:372:14-372:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:14-372:28)
      kind: _43 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _44) -> [return: bb18, unwind: bb121]
  }
  preds [bb16]
  succs [bb18, bb121]

bb18
  0: StorageDead(_44)
    SourceInfo(src/lib.rs:372:27-372:28)
  1: PlaceMention(_43)
    SourceInfo(src/lib.rs:372:14-372:28)
  2: _46 = discriminant(_43)
    SourceInfo(src/lib.rs:372:14-372:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:14-372:28)
      kind: switchInt(move _46) -> [0: bb20, 1: bb21, otherwise: bb19]
  }
  preds [bb17]
  succs [bb19, bb20, bb21]

bb19
  0: FakeRead(ForMatchedPlace(None), _43)
    SourceInfo(src/lib.rs:372:14-372:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:14-372:28)
      kind: unreachable
  }
  preds [bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:5-375:6)
      kind: falseEdge -> [real: bb22, imaginary: bb21]
  }
  preds [bb18]
  succs [bb21, bb22]

bb21
  0: StorageLive(_48)
    SourceInfo(src/lib.rs:372:9-372:10)
  1: _48 = ((_43 as Some).0: usize)
    SourceInfo(src/lib.rs:372:9-372:10)
  2: StorageLive(_49)
    SourceInfo(src/lib.rs:373:50-373:62)
  3: _49 = _27
    SourceInfo(src/lib.rs:373:50-373:62)
  4: StorageLive(_50)
    SourceInfo(src/lib.rs:373:18-373:47)
  5: StorageLive(_51)
    SourceInfo(src/lib.rs:373:9-373:18)
  6: _51 = &mut _18
    SourceInfo(src/lib.rs:373:9-373:18)
  7: StorageLive(_52)
    SourceInfo(src/lib.rs:373:19-373:46)
  8: StorageLive(_53)
    SourceInfo(src/lib.rs:373:30-373:35)
  9: StorageLive(_54)
    SourceInfo(src/lib.rs:373:30-373:31)
  10: _54 = _48
    SourceInfo(src/lib.rs:373:30-373:31)
  11: _55 = AddWithOverflow(_54, const 1_usize)
    SourceInfo(src/lib.rs:373:30-373:35)
  Terminator {
      source_info: SourceInfo(src/lib.rs:373:30-373:35)
      kind: assert(!move (_55.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, const 1_usize) -> [success: bb23, unwind: bb121]
  }
  preds [bb18, bb20]
  succs [bb23, bb121]

bb22
  0: _34 = const ()
    SourceInfo(src/lib.rs:372:5-375:6)
  1: StorageDead(_45)
    SourceInfo(src/lib.rs:375:5-375:6)
  2: StorageDead(_43)
    SourceInfo(src/lib.rs:375:5-375:6)
  3: StorageDead(_42)
    SourceInfo(src/lib.rs:375:5-375:6)
  4: StorageDead(_40)
    SourceInfo(src/lib.rs:375:5-375:6)
  5: StorageDead(_35)
    SourceInfo(src/lib.rs:375:5-375:6)
  6: StorageDead(_34)
    SourceInfo(src/lib.rs:375:5-375:6)
  7: StorageLive(_65)
    SourceInfo(src/lib.rs:377:5-380:6)
  8: StorageLive(_66)
    SourceInfo(src/lib.rs:377:14-377:28)
  9: StorageLive(_67)
    SourceInfo(src/lib.rs:377:14-377:28)
  10: StorageLive(_68)
    SourceInfo(src/lib.rs:377:17-377:28)
  11: StorageLive(_69)
    SourceInfo(src/lib.rs:377:18-377:23)
  12: _69 = _5
    SourceInfo(src/lib.rs:377:18-377:23)
  13: _70 = AddWithOverflow(_69, const 1_usize)
    SourceInfo(src/lib.rs:377:17-377:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:17-377:28)
      kind: assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", move _69, const 1_usize) -> [success: bb29, unwind: bb121]
  }
  preds [bb20]
  succs [bb29, bb121]

bb23
  0: _53 = move (_55.0: usize)
    SourceInfo(src/lib.rs:373:30-373:35)
  1: StorageDead(_54)
    SourceInfo(src/lib.rs:373:34-373:35)
  2: StorageLive(_56)
    SourceInfo(src/lib.rs:373:40-373:45)
  3: _56 = _15
    SourceInfo(src/lib.rs:373:40-373:45)
  Terminator {
      source_info: SourceInfo(src/lib.rs:373:19-373:46)
      kind: _52 = flat_index(move _53, const 0_usize, move _56) -> [return: bb24, unwind: bb121]
  }
  preds [bb21]
  succs [bb24, bb121]

bb24
  0: StorageDead(_56)
    SourceInfo(src/lib.rs:373:45-373:46)
  1: StorageDead(_53)
    SourceInfo(src/lib.rs:373:45-373:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:373:18-373:47)
      kind: _50 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _51, move _52) -> [return: bb25, unwind: bb121]
  }
  preds [bb23]
  succs [bb25, bb121]

bb25
  0: StorageDead(_52)
    SourceInfo(src/lib.rs:373:46-373:47)
  1: StorageDead(_51)
    SourceInfo(src/lib.rs:373:46-373:47)
  2: (*_50) = move _49
    SourceInfo(src/lib.rs:373:9-373:62)
  3: StorageDead(_49)
    SourceInfo(src/lib.rs:373:61-373:62)
  4: StorageDead(_50)
    SourceInfo(src/lib.rs:373:62-373:63)
  5: StorageLive(_57)
    SourceInfo(src/lib.rs:374:50-374:51)
  6: _57 = _48
    SourceInfo(src/lib.rs:374:50-374:51)
  7: StorageLive(_58)
    SourceInfo(src/lib.rs:374:18-374:47)
  8: StorageLive(_59)
    SourceInfo(src/lib.rs:374:9-374:18)
  9: _59 = &mut _18
    SourceInfo(src/lib.rs:374:9-374:18)
  10: StorageLive(_60)
    SourceInfo(src/lib.rs:374:19-374:46)
  11: StorageLive(_61)
    SourceInfo(src/lib.rs:374:30-374:35)
  12: StorageLive(_62)
    SourceInfo(src/lib.rs:374:30-374:31)
  13: _62 = _48
    SourceInfo(src/lib.rs:374:30-374:31)
  14: _63 = AddWithOverflow(_62, const 1_usize)
    SourceInfo(src/lib.rs:374:30-374:35)
  Terminator {
      source_info: SourceInfo(src/lib.rs:374:30-374:35)
      kind: assert(!move (_63.1: bool), "attempt to compute `{} + {}`, which would overflow", move _62, const 1_usize) -> [success: bb26, unwind: bb121]
  }
  preds [bb24]
  succs [bb26, bb121]

bb26
  0: _61 = move (_63.0: usize)
    SourceInfo(src/lib.rs:374:30-374:35)
  1: StorageDead(_62)
    SourceInfo(src/lib.rs:374:34-374:35)
  2: StorageLive(_64)
    SourceInfo(src/lib.rs:374:40-374:45)
  3: _64 = _15
    SourceInfo(src/lib.rs:374:40-374:45)
  Terminator {
      source_info: SourceInfo(src/lib.rs:374:19-374:46)
      kind: _60 = flat_index(move _61, const 1_usize, move _64) -> [return: bb27, unwind: bb121]
  }
  preds [bb25]
  succs [bb27, bb121]

bb27
  0: StorageDead(_64)
    SourceInfo(src/lib.rs:374:45-374:46)
  1: StorageDead(_61)
    SourceInfo(src/lib.rs:374:45-374:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:374:18-374:47)
      kind: _58 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _59, move _60) -> [return: bb28, unwind: bb121]
  }
  preds [bb26]
  succs [bb28, bb121]

bb28
  0: StorageDead(_60)
    SourceInfo(src/lib.rs:374:46-374:47)
  1: StorageDead(_59)
    SourceInfo(src/lib.rs:374:46-374:47)
  2: (*_58) = move _57
    SourceInfo(src/lib.rs:374:9-374:51)
  3: StorageDead(_57)
    SourceInfo(src/lib.rs:374:50-374:51)
  4: StorageDead(_58)
    SourceInfo(src/lib.rs:374:51-374:52)
  5: _42 = const ()
    SourceInfo(src/lib.rs:372:29-375:6)
  6: StorageDead(_48)
    SourceInfo(src/lib.rs:375:5-375:6)
  7: StorageDead(_45)
    SourceInfo(src/lib.rs:375:5-375:6)
  8: StorageDead(_43)
    SourceInfo(src/lib.rs:375:5-375:6)
  9: StorageDead(_42)
    SourceInfo(src/lib.rs:375:5-375:6)
  10: _41 = const ()
    SourceInfo(src/lib.rs:372:5-375:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:372:5-375:6)
      kind: goto -> bb16
  }
  preds [bb27]
  succs [bb16]

bb29
  0: _68 = move (_70.0: usize)
    SourceInfo(src/lib.rs:377:17-377:28)
  1: StorageDead(_69)
    SourceInfo(src/lib.rs:377:27-377:28)
  2: _67 = std::ops::Range::<usize> { start: const 0_usize, end: move _68 }
    SourceInfo(src/lib.rs:377:14-377:28)
  3: StorageDead(_68)
    SourceInfo(src/lib.rs:377:27-377:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:14-377:28)
      kind: _66 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _67) -> [return: bb30, unwind: bb121]
  }
  preds [bb22]
  succs [bb30, bb121]

bb30
  0: StorageDead(_67)
    SourceInfo(src/lib.rs:377:27-377:28)
  1: PlaceMention(_66)
    SourceInfo(src/lib.rs:377:14-377:28)
  2: StorageLive(_71)
    SourceInfo(src/lib.rs:377:14-377:28)
  3: _71 = move _66
    SourceInfo(src/lib.rs:377:14-377:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:5-380:6)
      kind: goto -> bb31
  }
  preds [bb29]
  succs [bb31]

bb31
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:5-380:6)
      kind: falseUnwind -> [real: bb32, unwind: bb121]
  }
  preds [bb30, bb43]
  succs [bb32, bb121]

bb32
  0: StorageLive(_72)
    SourceInfo(src/lib.rs:377:14-377:28)
  1: StorageLive(_73)
    SourceInfo(src/lib.rs:377:14-377:28)
  2: StorageLive(_74)
    SourceInfo(src/lib.rs:377:14-377:28)
  3: StorageLive(_75)
    SourceInfo(src/lib.rs:377:14-377:28)
  4: _75 = &mut _71
    SourceInfo(src/lib.rs:377:14-377:28)
  5: _74 = &mut (*_75)
    SourceInfo(src/lib.rs:377:14-377:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:14-377:28)
      kind: _73 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _74) -> [return: bb33, unwind: bb121]
  }
  preds [bb31]
  succs [bb33, bb121]

bb33
  0: StorageDead(_74)
    SourceInfo(src/lib.rs:377:27-377:28)
  1: PlaceMention(_73)
    SourceInfo(src/lib.rs:377:14-377:28)
  2: _76 = discriminant(_73)
    SourceInfo(src/lib.rs:377:14-377:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:14-377:28)
      kind: switchInt(move _76) -> [0: bb35, 1: bb36, otherwise: bb34]
  }
  preds [bb32]
  succs [bb34, bb35, bb36]

bb34
  0: FakeRead(ForMatchedPlace(None), _73)
    SourceInfo(src/lib.rs:377:14-377:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:14-377:28)
      kind: unreachable
  }
  preds [bb33]
  succs []

bb35
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:5-380:6)
      kind: falseEdge -> [real: bb37, imaginary: bb36]
  }
  preds [bb33]
  succs [bb36, bb37]

bb36
  0: StorageLive(_78)
    SourceInfo(src/lib.rs:377:9-377:10)
  1: _78 = ((_73 as Some).0: usize)
    SourceInfo(src/lib.rs:377:9-377:10)
  2: StorageLive(_79)
    SourceInfo(src/lib.rs:378:50-378:62)
  3: _79 = _27
    SourceInfo(src/lib.rs:378:50-378:62)
  4: StorageLive(_80)
    SourceInfo(src/lib.rs:378:18-378:47)
  5: StorageLive(_81)
    SourceInfo(src/lib.rs:378:9-378:18)
  6: _81 = &mut _18
    SourceInfo(src/lib.rs:378:9-378:18)
  7: StorageLive(_82)
    SourceInfo(src/lib.rs:378:19-378:46)
  8: StorageLive(_83)
    SourceInfo(src/lib.rs:378:33-378:38)
  9: StorageLive(_84)
    SourceInfo(src/lib.rs:378:33-378:34)
  10: _84 = _78
    SourceInfo(src/lib.rs:378:33-378:34)
  11: _85 = AddWithOverflow(_84, const 1_usize)
    SourceInfo(src/lib.rs:378:33-378:38)
  Terminator {
      source_info: SourceInfo(src/lib.rs:378:33-378:38)
      kind: assert(!move (_85.1: bool), "attempt to compute `{} + {}`, which would overflow", move _84, const 1_usize) -> [success: bb38, unwind: bb121]
  }
  preds [bb33, bb35]
  succs [bb38, bb121]

bb37
  0: _65 = const ()
    SourceInfo(src/lib.rs:377:5-380:6)
  1: StorageDead(_75)
    SourceInfo(src/lib.rs:380:5-380:6)
  2: StorageDead(_73)
    SourceInfo(src/lib.rs:380:5-380:6)
  3: StorageDead(_72)
    SourceInfo(src/lib.rs:380:5-380:6)
  4: StorageDead(_71)
    SourceInfo(src/lib.rs:380:5-380:6)
  5: StorageDead(_66)
    SourceInfo(src/lib.rs:380:5-380:6)
  6: StorageDead(_65)
    SourceInfo(src/lib.rs:380:5-380:6)
  7: StorageLive(_95)
    SourceInfo(src/lib.rs:382:9-382:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:382:43-382:69)
      kind: _95 = std::collections::HashMap::<Elem, usize>::with_capacity(const 64_usize) -> [return: bb44, unwind: bb121]
  }
  preds [bb35]
  succs [bb44, bb121]

bb38
  0: _83 = move (_85.0: usize)
    SourceInfo(src/lib.rs:378:33-378:38)
  1: StorageDead(_84)
    SourceInfo(src/lib.rs:378:37-378:38)
  2: StorageLive(_86)
    SourceInfo(src/lib.rs:378:40-378:45)
  3: _86 = _15
    SourceInfo(src/lib.rs:378:40-378:45)
  Terminator {
      source_info: SourceInfo(src/lib.rs:378:19-378:46)
      kind: _82 = flat_index(const 0_usize, move _83, move _86) -> [return: bb39, unwind: bb121]
  }
  preds [bb36]
  succs [bb39, bb121]

bb39
  0: StorageDead(_86)
    SourceInfo(src/lib.rs:378:45-378:46)
  1: StorageDead(_83)
    SourceInfo(src/lib.rs:378:45-378:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:378:18-378:47)
      kind: _80 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _81, move _82) -> [return: bb40, unwind: bb121]
  }
  preds [bb38]
  succs [bb40, bb121]

bb40
  0: StorageDead(_82)
    SourceInfo(src/lib.rs:378:46-378:47)
  1: StorageDead(_81)
    SourceInfo(src/lib.rs:378:46-378:47)
  2: (*_80) = move _79
    SourceInfo(src/lib.rs:378:9-378:62)
  3: StorageDead(_79)
    SourceInfo(src/lib.rs:378:61-378:62)
  4: StorageDead(_80)
    SourceInfo(src/lib.rs:378:62-378:63)
  5: StorageLive(_87)
    SourceInfo(src/lib.rs:379:50-379:51)
  6: _87 = _78
    SourceInfo(src/lib.rs:379:50-379:51)
  7: StorageLive(_88)
    SourceInfo(src/lib.rs:379:18-379:47)
  8: StorageLive(_89)
    SourceInfo(src/lib.rs:379:9-379:18)
  9: _89 = &mut _18
    SourceInfo(src/lib.rs:379:9-379:18)
  10: StorageLive(_90)
    SourceInfo(src/lib.rs:379:19-379:46)
  11: StorageLive(_91)
    SourceInfo(src/lib.rs:379:33-379:38)
  12: StorageLive(_92)
    SourceInfo(src/lib.rs:379:33-379:34)
  13: _92 = _78
    SourceInfo(src/lib.rs:379:33-379:34)
  14: _93 = AddWithOverflow(_92, const 1_usize)
    SourceInfo(src/lib.rs:379:33-379:38)
  Terminator {
      source_info: SourceInfo(src/lib.rs:379:33-379:38)
      kind: assert(!move (_93.1: bool), "attempt to compute `{} + {}`, which would overflow", move _92, const 1_usize) -> [success: bb41, unwind: bb121]
  }
  preds [bb39]
  succs [bb41, bb121]

bb41
  0: _91 = move (_93.0: usize)
    SourceInfo(src/lib.rs:379:33-379:38)
  1: StorageDead(_92)
    SourceInfo(src/lib.rs:379:37-379:38)
  2: StorageLive(_94)
    SourceInfo(src/lib.rs:379:40-379:45)
  3: _94 = _15
    SourceInfo(src/lib.rs:379:40-379:45)
  Terminator {
      source_info: SourceInfo(src/lib.rs:379:19-379:46)
      kind: _90 = flat_index(const 1_usize, move _91, move _94) -> [return: bb42, unwind: bb121]
  }
  preds [bb40]
  succs [bb42, bb121]

bb42
  0: StorageDead(_94)
    SourceInfo(src/lib.rs:379:45-379:46)
  1: StorageDead(_91)
    SourceInfo(src/lib.rs:379:45-379:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:379:18-379:47)
      kind: _88 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _89, move _90) -> [return: bb43, unwind: bb121]
  }
  preds [bb41]
  succs [bb43, bb121]

bb43
  0: StorageDead(_90)
    SourceInfo(src/lib.rs:379:46-379:47)
  1: StorageDead(_89)
    SourceInfo(src/lib.rs:379:46-379:47)
  2: (*_88) = move _87
    SourceInfo(src/lib.rs:379:9-379:51)
  3: StorageDead(_87)
    SourceInfo(src/lib.rs:379:50-379:51)
  4: StorageDead(_88)
    SourceInfo(src/lib.rs:379:51-379:52)
  5: _72 = const ()
    SourceInfo(src/lib.rs:377:29-380:6)
  6: StorageDead(_78)
    SourceInfo(src/lib.rs:380:5-380:6)
  7: StorageDead(_75)
    SourceInfo(src/lib.rs:380:5-380:6)
  8: StorageDead(_73)
    SourceInfo(src/lib.rs:380:5-380:6)
  9: StorageDead(_72)
    SourceInfo(src/lib.rs:380:5-380:6)
  10: _41 = const ()
    SourceInfo(src/lib.rs:377:5-380:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:377:5-380:6)
      kind: goto -> bb31
  }
  preds [bb42]
  succs [bb31]

bb44
  0: FakeRead(ForLet(None), _95)
    SourceInfo(src/lib.rs:382:9-382:18)
  1: AscribeUserType(_95, o, UserTypeProjection { base: UserType(2), projs: [] })
    SourceInfo(src/lib.rs:382:20-382:40)
  2: StorageLive(_96)
    SourceInfo(src/lib.rs:384:5-411:6)
  3: StorageLive(_97)
    SourceInfo(src/lib.rs:384:14-384:28)
  4: StorageLive(_98)
    SourceInfo(src/lib.rs:384:14-384:28)
  5: StorageLive(_99)
    SourceInfo(src/lib.rs:384:17-384:28)
  6: StorageLive(_100)
    SourceInfo(src/lib.rs:384:18-384:23)
  7: _100 = _3
    SourceInfo(src/lib.rs:384:18-384:23)
  8: _101 = AddWithOverflow(_100, const 1_usize)
    SourceInfo(src/lib.rs:384:17-384:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:17-384:28)
      kind: assert(!move (_101.1: bool), "attempt to compute `{} + {}`, which would overflow", move _100, const 1_usize) -> [success: bb45, unwind: bb120]
  }
  preds [bb37]
  succs [bb45, bb120]

bb45
  0: _99 = move (_101.0: usize)
    SourceInfo(src/lib.rs:384:17-384:28)
  1: StorageDead(_100)
    SourceInfo(src/lib.rs:384:27-384:28)
  2: _98 = std::ops::Range::<usize> { start: const 1_usize, end: move _99 }
    SourceInfo(src/lib.rs:384:14-384:28)
  3: StorageDead(_99)
    SourceInfo(src/lib.rs:384:27-384:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:14-384:28)
      kind: _97 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _98) -> [return: bb46, unwind: bb120]
  }
  preds [bb44]
  succs [bb46, bb120]

bb46
  0: StorageDead(_98)
    SourceInfo(src/lib.rs:384:27-384:28)
  1: PlaceMention(_97)
    SourceInfo(src/lib.rs:384:14-384:28)
  2: StorageLive(_102)
    SourceInfo(src/lib.rs:384:14-384:28)
  3: _102 = move _97
    SourceInfo(src/lib.rs:384:14-384:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:5-411:6)
      kind: goto -> bb47
  }
  preds [bb45]
  succs [bb47]

bb47
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:5-411:6)
      kind: falseUnwind -> [real: bb48, unwind: bb120]
  }
  preds [bb46, bb110]
  succs [bb48, bb120]

bb48
  0: StorageLive(_103)
    SourceInfo(src/lib.rs:384:14-384:28)
  1: StorageLive(_104)
    SourceInfo(src/lib.rs:384:14-384:28)
  2: StorageLive(_105)
    SourceInfo(src/lib.rs:384:14-384:28)
  3: StorageLive(_106)
    SourceInfo(src/lib.rs:384:14-384:28)
  4: _106 = &mut _102
    SourceInfo(src/lib.rs:384:14-384:28)
  5: _105 = &mut (*_106)
    SourceInfo(src/lib.rs:384:14-384:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:14-384:28)
      kind: _104 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _105) -> [return: bb49, unwind: bb120]
  }
  preds [bb47]
  succs [bb49, bb120]

bb49
  0: StorageDead(_105)
    SourceInfo(src/lib.rs:384:27-384:28)
  1: PlaceMention(_104)
    SourceInfo(src/lib.rs:384:14-384:28)
  2: _107 = discriminant(_104)
    SourceInfo(src/lib.rs:384:14-384:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:14-384:28)
      kind: switchInt(move _107) -> [0: bb51, 1: bb52, otherwise: bb50]
  }
  preds [bb48]
  succs [bb50, bb51, bb52]

bb50
  0: FakeRead(ForMatchedPlace(None), _104)
    SourceInfo(src/lib.rs:384:14-384:28)
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:14-384:28)
      kind: unreachable
  }
  preds [bb49]
  succs []

bb51
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:5-411:6)
      kind: falseEdge -> [real: bb53, imaginary: bb52]
  }
  preds [bb49]
  succs [bb52, bb53]

bb52
  0: StorageLive(_109)
    SourceInfo(src/lib.rs:384:9-384:10)
  1: _109 = ((_104 as Some).0: usize)
    SourceInfo(src/lib.rs:384:9-384:10)
  2: StorageLive(_110)
    SourceInfo(src/lib.rs:385:13-385:19)
  3: _110 = const 0_usize
    SourceInfo(src/lib.rs:385:22-385:23)
  4: FakeRead(ForLet(None), _110)
    SourceInfo(src/lib.rs:385:13-385:19)
  5: StorageLive(_111)
    SourceInfo(src/lib.rs:387:9-408:10)
  6: StorageLive(_112)
    SourceInfo(src/lib.rs:387:18-387:32)
  7: StorageLive(_113)
    SourceInfo(src/lib.rs:387:18-387:32)
  8: StorageLive(_114)
    SourceInfo(src/lib.rs:387:21-387:32)
  9: StorageLive(_115)
    SourceInfo(src/lib.rs:387:22-387:27)
  10: _115 = _5
    SourceInfo(src/lib.rs:387:22-387:27)
  11: _116 = AddWithOverflow(_115, const 1_usize)
    SourceInfo(src/lib.rs:387:21-387:32)
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:21-387:32)
      kind: assert(!move (_116.1: bool), "attempt to compute `{} + {}`, which would overflow", move _115, const 1_usize) -> [success: bb54, unwind: bb120]
  }
  preds [bb49, bb51]
  succs [bb54, bb120]

bb53
  0: _96 = const ()
    SourceInfo(src/lib.rs:384:5-411:6)
  1: StorageDead(_106)
    SourceInfo(src/lib.rs:411:5-411:6)
  2: StorageDead(_104)
    SourceInfo(src/lib.rs:411:5-411:6)
  3: StorageDead(_103)
    SourceInfo(src/lib.rs:411:5-411:6)
  4: StorageDead(_102)
    SourceInfo(src/lib.rs:411:5-411:6)
  5: StorageDead(_97)
    SourceInfo(src/lib.rs:411:5-411:6)
  6: StorageDead(_96)
    SourceInfo(src/lib.rs:411:5-411:6)
  7: StorageLive(_236)
    SourceInfo(src/lib.rs:413:14-413:55)
  8: StorageLive(_237)
    SourceInfo(src/lib.rs:413:5-413:14)
  9: _237 = &_18
    SourceInfo(src/lib.rs:413:5-413:14)
  10: StorageLive(_238)
    SourceInfo(src/lib.rs:413:15-413:54)
  11: StorageLive(_239)
    SourceInfo(src/lib.rs:413:26-413:35)
  12: StorageLive(_240)
    SourceInfo(src/lib.rs:413:26-413:31)
  13: _240 = _3
    SourceInfo(src/lib.rs:413:26-413:31)
  14: _241 = AddWithOverflow(_240, const 1_usize)
    SourceInfo(src/lib.rs:413:26-413:35)
  Terminator {
      source_info: SourceInfo(src/lib.rs:413:26-413:35)
      kind: assert(!move (_241.1: bool), "attempt to compute `{} + {}`, which would overflow", move _240, const 1_usize) -> [success: bb111, unwind: bb120]
  }
  preds [bb51]
  succs [bb111, bb120]

bb54
  0: _114 = move (_116.0: usize)
    SourceInfo(src/lib.rs:387:21-387:32)
  1: StorageDead(_115)
    SourceInfo(src/lib.rs:387:31-387:32)
  2: _113 = std::ops::Range::<usize> { start: const 1_usize, end: move _114 }
    SourceInfo(src/lib.rs:387:18-387:32)
  3: StorageDead(_114)
    SourceInfo(src/lib.rs:387:31-387:32)
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:18-387:32)
      kind: _112 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _113) -> [return: bb55, unwind: bb120]
  }
  preds [bb52]
  succs [bb55, bb120]

bb55
  0: StorageDead(_113)
    SourceInfo(src/lib.rs:387:31-387:32)
  1: PlaceMention(_112)
    SourceInfo(src/lib.rs:387:18-387:32)
  2: StorageLive(_117)
    SourceInfo(src/lib.rs:387:18-387:32)
  3: _117 = move _112
    SourceInfo(src/lib.rs:387:18-387:32)
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:9-408:10)
      kind: goto -> bb56
  }
  preds [bb54]
  succs [bb56]

bb56
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:9-408:10)
      kind: falseUnwind -> [real: bb57, unwind: bb120]
  }
  preds [bb55, bb106]
  succs [bb57, bb120]

bb57
  0: StorageLive(_118)
    SourceInfo(src/lib.rs:387:18-387:32)
  1: StorageLive(_119)
    SourceInfo(src/lib.rs:387:18-387:32)
  2: StorageLive(_120)
    SourceInfo(src/lib.rs:387:18-387:32)
  3: StorageLive(_121)
    SourceInfo(src/lib.rs:387:18-387:32)
  4: _121 = &mut _117
    SourceInfo(src/lib.rs:387:18-387:32)
  5: _120 = &mut (*_121)
    SourceInfo(src/lib.rs:387:18-387:32)
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:18-387:32)
      kind: _119 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _120) -> [return: bb58, unwind: bb120]
  }
  preds [bb56]
  succs [bb58, bb120]

bb58
  0: StorageDead(_120)
    SourceInfo(src/lib.rs:387:31-387:32)
  1: PlaceMention(_119)
    SourceInfo(src/lib.rs:387:18-387:32)
  2: _122 = discriminant(_119)
    SourceInfo(src/lib.rs:387:18-387:32)
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:18-387:32)
      kind: switchInt(move _122) -> [0: bb60, 1: bb61, otherwise: bb59]
  }
  preds [bb57]
  succs [bb59, bb60, bb61]

bb59
  0: FakeRead(ForMatchedPlace(None), _119)
    SourceInfo(src/lib.rs:387:18-387:32)
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:18-387:32)
      kind: unreachable
  }
  preds [bb58]
  succs []

bb60
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:9-408:10)
      kind: falseEdge -> [real: bb62, imaginary: bb61]
  }
  preds [bb58]
  succs [bb61, bb62]

bb61
  0: StorageLive(_124)
    SourceInfo(src/lib.rs:387:13-387:14)
  1: _124 = ((_119 as Some).0: usize)
    SourceInfo(src/lib.rs:387:13-387:14)
  2: StorageLive(_125)
    SourceInfo(src/lib.rs:388:17-388:18)
  3: StorageLive(_126)
    SourceInfo(src/lib.rs:388:27-388:53)
  4: StorageLive(_127)
    SourceInfo(src/lib.rs:388:27-388:32)
  5: _127 = &_95
    SourceInfo(src/lib.rs:388:27-388:32)
  6: StorageLive(_128)
    SourceInfo(src/lib.rs:388:37-388:52)
  7: StorageLive(_129)
    SourceInfo(src/lib.rs:388:37-388:52)
  8: StorageLive(_130)
    SourceInfo(src/lib.rs:388:46-388:51)
  9: StorageLive(_131)
    SourceInfo(src/lib.rs:388:46-388:47)
  10: _131 = _124
    SourceInfo(src/lib.rs:388:46-388:47)
  11: _132 = SubWithOverflow(_131, const 1_usize)
    SourceInfo(src/lib.rs:388:46-388:51)
  Terminator {
      source_info: SourceInfo(src/lib.rs:388:46-388:51)
      kind: assert(!move (_132.1: bool), "attempt to compute `{} - {}`, which would overflow", move _131, const 1_usize) -> [success: bb63, unwind: bb120]
  }
  preds [bb58, bb60]
  succs [bb63, bb120]

bb62
  0: _111 = const ()
    SourceInfo(src/lib.rs:387:9-408:10)
  1: StorageDead(_121)
    SourceInfo(src/lib.rs:408:9-408:10)
  2: StorageDead(_119)
    SourceInfo(src/lib.rs:408:9-408:10)
  3: StorageDead(_118)
    SourceInfo(src/lib.rs:408:9-408:10)
  4: StorageDead(_117)
    SourceInfo(src/lib.rs:408:9-408:10)
  5: StorageDead(_112)
    SourceInfo(src/lib.rs:408:9-408:10)
  6: StorageDead(_111)
    SourceInfo(src/lib.rs:408:9-408:10)
  7: StorageLive(_226)
    SourceInfo(src/lib.rs:410:9-410:48)
  8: StorageLive(_227)
    SourceInfo(src/lib.rs:410:9-410:14)
  9: _227 = &mut _95
    SourceInfo(src/lib.rs:410:9-410:14)
  10: StorageLive(_228)
    SourceInfo(src/lib.rs:410:22-410:44)
  11: StorageLive(_229)
    SourceInfo(src/lib.rs:410:22-410:36)
  12: StorageLive(_230)
    SourceInfo(src/lib.rs:410:30-410:35)
  13: StorageLive(_231)
    SourceInfo(src/lib.rs:410:30-410:31)
  14: _231 = _109
    SourceInfo(src/lib.rs:410:30-410:31)
  15: _232 = SubWithOverflow(_231, const 1_usize)
    SourceInfo(src/lib.rs:410:30-410:35)
  Terminator {
      source_info: SourceInfo(src/lib.rs:410:30-410:35)
      kind: assert(!move (_232.1: bool), "attempt to compute `{} - {}`, which would overflow", move _231, const 1_usize) -> [success: bb107, unwind: bb120]
  }
  preds [bb60]
  succs [bb107, bb120]

bb63
  0: _130 = move (_132.0: usize)
    SourceInfo(src/lib.rs:388:46-388:51)
  1: StorageDead(_131)
    SourceInfo(src/lib.rs:388:50-388:51)
  2: _133 = Len((*_2))
    SourceInfo(src/lib.rs:388:38-388:52)
  3: _134 = Lt(_130, _133)
    SourceInfo(src/lib.rs:388:38-388:52)
  Terminator {
      source_info: SourceInfo(src/lib.rs:388:38-388:52)
      kind: assert(move _134, "index out of bounds: the length is {} but the index is {}", move _133, _130) -> [success: bb64, unwind: bb120]
  }
  preds [bb61]
  succs [bb64, bb120]

bb64
  0: _129 = &(*_2)[_130]
    SourceInfo(src/lib.rs:388:37-388:52)
  1: _128 = &(*_129)
    SourceInfo(src/lib.rs:388:37-388:52)
  Terminator {
      source_info: SourceInfo(src/lib.rs:388:27-388:53)
      kind: _126 = std::collections::HashMap::<Elem, usize>::get::<Elem>(move _127, move _128) -> [return: bb65, unwind: bb120]
  }
  preds [bb63]
  succs [bb65, bb120]

bb65
  0: StorageDead(_128)
    SourceInfo(src/lib.rs:388:52-388:53)
  1: StorageDead(_127)
    SourceInfo(src/lib.rs:388:52-388:53)
  2: PlaceMention(_126)
    SourceInfo(src/lib.rs:388:27-388:53)
  3: _135 = discriminant(_126)
    SourceInfo(src/lib.rs:388:27-388:53)
  Terminator {
      source_info: SourceInfo(src/lib.rs:388:21-388:53)
      kind: switchInt(move _135) -> [0: bb68, 1: bb67, otherwise: bb66]
  }
  preds [bb64]
  succs [bb66, bb67, bb68]

bb66
  0: FakeRead(ForMatchedPlace(None), _126)
    SourceInfo(src/lib.rs:388:27-388:53)
  Terminator {
      source_info: SourceInfo(src/lib.rs:388:27-388:53)
      kind: unreachable
  }
  preds [bb65]
  succs []

bb67
  Terminator {
      source_info: SourceInfo(src/lib.rs:389:17-389:29)
      kind: falseEdge -> [real: bb69, imaginary: bb68]
  }
  preds [bb65]
  succs [bb68, bb69]

bb68
  0: _125 = const 0_usize
    SourceInfo(src/lib.rs:390:25-390:26)
  Terminator {
      source_info: SourceInfo(src/lib.rs:390:25-390:26)
      kind: goto -> bb70
  }
  preds [bb65, bb67]
  succs [bb70]

bb69
  0: StorageLive(_136)
    SourceInfo(src/lib.rs:389:23-389:28)
  1: _136 = (*((_126 as Some).0: &usize))
    SourceInfo(src/lib.rs:389:23-389:28)
  2: _125 = _136
    SourceInfo(src/lib.rs:389:33-389:38)
  3: StorageDead(_136)
    SourceInfo(src/lib.rs:389:37-389:38)
  Terminator {
      source_info: SourceInfo(src/lib.rs:389:37-389:38)
      kind: goto -> bb70
  }
  preds [bb67]
  succs [bb70]

bb70
  0: FakeRead(ForLet(None), _125)
    SourceInfo(src/lib.rs:388:17-388:18)
  1: StorageDead(_130)
    SourceInfo(src/lib.rs:391:14-391:15)
  2: StorageDead(_129)
    SourceInfo(src/lib.rs:391:14-391:15)
  3: StorageDead(_126)
    SourceInfo(src/lib.rs:391:14-391:15)
  4: StorageLive(_137)
    SourceInfo(src/lib.rs:393:17-393:31)
  5: StorageLive(_138)
    SourceInfo(src/lib.rs:393:34-393:72)
  6: StorageLive(_139)
    SourceInfo(src/lib.rs:393:43-393:72)
  7: StorageLive(_140)
    SourceInfo(src/lib.rs:393:34-393:43)
  8: _140 = &_18
    SourceInfo(src/lib.rs:393:34-393:43)
  9: StorageLive(_141)
    SourceInfo(src/lib.rs:393:44-393:71)
  10: StorageLive(_142)
    SourceInfo(src/lib.rs:393:55-393:56)
  11: _142 = _109
    SourceInfo(src/lib.rs:393:55-393:56)
  12: StorageLive(_143)
    SourceInfo(src/lib.rs:393:58-393:63)
  13: StorageLive(_144)
    SourceInfo(src/lib.rs:393:58-393:59)
  14: _144 = _124
    SourceInfo(src/lib.rs:393:58-393:59)
  15: _145 = AddWithOverflow(_144, const 1_usize)
    SourceInfo(src/lib.rs:393:58-393:63)
  Terminator {
      source_info: SourceInfo(src/lib.rs:393:58-393:63)
      kind: assert(!move (_145.1: bool), "attempt to compute `{} + {}`, which would overflow", move _144, const 1_usize) -> [success: bb71, unwind: bb120]
  }
  preds [bb68, bb69]
  succs [bb71, bb120]

bb71
  0: _143 = move (_145.0: usize)
    SourceInfo(src/lib.rs:393:58-393:63)
  1: StorageDead(_144)
    SourceInfo(src/lib.rs:393:62-393:63)
  2: StorageLive(_146)
    SourceInfo(src/lib.rs:393:65-393:70)
  3: _146 = _15
    SourceInfo(src/lib.rs:393:65-393:70)
  Terminator {
      source_info: SourceInfo(src/lib.rs:393:44-393:71)
      kind: _141 = flat_index(move _142, move _143, move _146) -> [return: bb72, unwind: bb120]
  }
  preds [bb70]
  succs [bb72, bb120]

bb72
  0: StorageDead(_146)
    SourceInfo(src/lib.rs:393:70-393:71)
  1: StorageDead(_143)
    SourceInfo(src/lib.rs:393:70-393:71)
  2: StorageDead(_142)
    SourceInfo(src/lib.rs:393:70-393:71)
  Terminator {
      source_info: SourceInfo(src/lib.rs:393:43-393:72)
      kind: _139 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _140, move _141) -> [return: bb73, unwind: bb120]
  }
  preds [bb71]
  succs [bb73, bb120]

bb73
  0: _138 = (*_139)
    SourceInfo(src/lib.rs:393:34-393:72)
  1: StorageDead(_141)
    SourceInfo(src/lib.rs:393:71-393:72)
  2: StorageDead(_140)
    SourceInfo(src/lib.rs:393:71-393:72)
  3: _147 = AddWithOverflow(_138, const 1_usize)
    SourceInfo(src/lib.rs:393:34-393:76)
  Terminator {
      source_info: SourceInfo(src/lib.rs:393:34-393:76)
      kind: assert(!move (_147.1: bool), "attempt to compute `{} + {}`, which would overflow", move _138, const 1_usize) -> [success: bb74, unwind: bb120]
  }
  preds [bb72]
  succs [bb74, bb120]

bb74
  0: _137 = move (_147.0: usize)
    SourceInfo(src/lib.rs:393:34-393:76)
  1: StorageDead(_138)
    SourceInfo(src/lib.rs:393:75-393:76)
  2: FakeRead(ForLet(None), _137)
    SourceInfo(src/lib.rs:393:17-393:31)
  3: StorageDead(_139)
    SourceInfo(src/lib.rs:393:76-393:77)
  4: StorageLive(_148)
    SourceInfo(src/lib.rs:394:17-394:30)
  5: StorageLive(_149)
    SourceInfo(src/lib.rs:394:33-394:71)
  6: StorageLive(_150)
    SourceInfo(src/lib.rs:394:42-394:71)
  7: StorageLive(_151)
    SourceInfo(src/lib.rs:394:33-394:42)
  8: _151 = &_18
    SourceInfo(src/lib.rs:394:33-394:42)
  9: StorageLive(_152)
    SourceInfo(src/lib.rs:394:43-394:70)
  10: StorageLive(_153)
    SourceInfo(src/lib.rs:394:54-394:59)
  11: StorageLive(_154)
    SourceInfo(src/lib.rs:394:54-394:55)
  12: _154 = _109
    SourceInfo(src/lib.rs:394:54-394:55)
  13: _155 = AddWithOverflow(_154, const 1_usize)
    SourceInfo(src/lib.rs:394:54-394:59)
  Terminator {
      source_info: SourceInfo(src/lib.rs:394:54-394:59)
      kind: assert(!move (_155.1: bool), "attempt to compute `{} + {}`, which would overflow", move _154, const 1_usize) -> [success: bb75, unwind: bb120]
  }
  preds [bb73]
  succs [bb75, bb120]

bb75
  0: _153 = move (_155.0: usize)
    SourceInfo(src/lib.rs:394:54-394:59)
  1: StorageDead(_154)
    SourceInfo(src/lib.rs:394:58-394:59)
  2: StorageLive(_156)
    SourceInfo(src/lib.rs:394:61-394:62)
  3: _156 = _124
    SourceInfo(src/lib.rs:394:61-394:62)
  4: StorageLive(_157)
    SourceInfo(src/lib.rs:394:64-394:69)
  5: _157 = _15
    SourceInfo(src/lib.rs:394:64-394:69)
  Terminator {
      source_info: SourceInfo(src/lib.rs:394:43-394:70)
      kind: _152 = flat_index(move _153, move _156, move _157) -> [return: bb76, unwind: bb120]
  }
  preds [bb74]
  succs [bb76, bb120]

bb76
  0: StorageDead(_157)
    SourceInfo(src/lib.rs:394:69-394:70)
  1: StorageDead(_156)
    SourceInfo(src/lib.rs:394:69-394:70)
  2: StorageDead(_153)
    SourceInfo(src/lib.rs:394:69-394:70)
  Terminator {
      source_info: SourceInfo(src/lib.rs:394:42-394:71)
      kind: _150 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _151, move _152) -> [return: bb77, unwind: bb120]
  }
  preds [bb75]
  succs [bb77, bb120]

bb77
  0: _149 = (*_150)
    SourceInfo(src/lib.rs:394:33-394:71)
  1: StorageDead(_152)
    SourceInfo(src/lib.rs:394:70-394:71)
  2: StorageDead(_151)
    SourceInfo(src/lib.rs:394:70-394:71)
  3: _158 = AddWithOverflow(_149, const 1_usize)
    SourceInfo(src/lib.rs:394:33-394:75)
  Terminator {
      source_info: SourceInfo(src/lib.rs:394:33-394:75)
      kind: assert(!move (_158.1: bool), "attempt to compute `{} + {}`, which would overflow", move _149, const 1_usize) -> [success: bb78, unwind: bb120]
  }
  preds [bb76]
  succs [bb78, bb120]

bb78
  0: _148 = move (_158.0: usize)
    SourceInfo(src/lib.rs:394:33-394:75)
  1: StorageDead(_149)
    SourceInfo(src/lib.rs:394:74-394:75)
  2: FakeRead(ForLet(None), _148)
    SourceInfo(src/lib.rs:394:17-394:30)
  3: StorageDead(_150)
    SourceInfo(src/lib.rs:394:75-394:76)
  4: StorageLive(_159)
    SourceInfo(src/lib.rs:395:17-395:35)
  5: StorageLive(_160)
    SourceInfo(src/lib.rs:396:17-396:70)
  6: StorageLive(_161)
    SourceInfo(src/lib.rs:396:17-396:66)
  7: StorageLive(_162)
    SourceInfo(src/lib.rs:396:17-396:52)
  8: StorageLive(_163)
    SourceInfo(src/lib.rs:396:26-396:52)
  9: StorageLive(_164)
    SourceInfo(src/lib.rs:396:17-396:26)
  10: _164 = &_18
    SourceInfo(src/lib.rs:396:17-396:26)
  11: StorageLive(_165)
    SourceInfo(src/lib.rs:396:27-396:51)
  12: StorageLive(_166)
    SourceInfo(src/lib.rs:396:38-396:39)
  13: _166 = _125
    SourceInfo(src/lib.rs:396:38-396:39)
  14: StorageLive(_167)
    SourceInfo(src/lib.rs:396:41-396:43)
  15: _167 = _110
    SourceInfo(src/lib.rs:396:41-396:43)
  16: StorageLive(_168)
    SourceInfo(src/lib.rs:396:45-396:50)
  17: _168 = _15
    SourceInfo(src/lib.rs:396:45-396:50)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:27-396:51)
      kind: _165 = flat_index(move _166, move _167, move _168) -> [return: bb79, unwind: bb120]
  }
  preds [bb77]
  succs [bb79, bb120]

bb79
  0: StorageDead(_168)
    SourceInfo(src/lib.rs:396:50-396:51)
  1: StorageDead(_167)
    SourceInfo(src/lib.rs:396:50-396:51)
  2: StorageDead(_166)
    SourceInfo(src/lib.rs:396:50-396:51)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:26-396:52)
      kind: _163 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _164, move _165) -> [return: bb80, unwind: bb120]
  }
  preds [bb78]
  succs [bb80, bb120]

bb80
  0: _162 = (*_163)
    SourceInfo(src/lib.rs:396:17-396:52)
  1: StorageDead(_165)
    SourceInfo(src/lib.rs:396:51-396:52)
  2: StorageDead(_164)
    SourceInfo(src/lib.rs:396:51-396:52)
  3: StorageLive(_169)
    SourceInfo(src/lib.rs:396:55-396:66)
  4: StorageLive(_170)
    SourceInfo(src/lib.rs:396:56-396:61)
  5: StorageLive(_171)
    SourceInfo(src/lib.rs:396:56-396:57)
  6: _171 = _109
    SourceInfo(src/lib.rs:396:56-396:57)
  7: StorageLive(_172)
    SourceInfo(src/lib.rs:396:60-396:61)
  8: _172 = _125
    SourceInfo(src/lib.rs:396:60-396:61)
  9: _173 = SubWithOverflow(_171, _172)
    SourceInfo(src/lib.rs:396:56-396:61)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:56-396:61)
      kind: assert(!move (_173.1: bool), "attempt to compute `{} - {}`, which would overflow", move _171, move _172) -> [success: bb81, unwind: bb120]
  }
  preds [bb79]
  succs [bb81, bb120]

bb81
  0: _170 = move (_173.0: usize)
    SourceInfo(src/lib.rs:396:56-396:61)
  1: StorageDead(_172)
    SourceInfo(src/lib.rs:396:60-396:61)
  2: StorageDead(_171)
    SourceInfo(src/lib.rs:396:60-396:61)
  3: _174 = SubWithOverflow(_170, const 1_usize)
    SourceInfo(src/lib.rs:396:55-396:66)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:55-396:66)
      kind: assert(!move (_174.1: bool), "attempt to compute `{} - {}`, which would overflow", move _170, const 1_usize) -> [success: bb82, unwind: bb120]
  }
  preds [bb80]
  succs [bb82, bb120]

bb82
  0: _169 = move (_174.0: usize)
    SourceInfo(src/lib.rs:396:55-396:66)
  1: StorageDead(_170)
    SourceInfo(src/lib.rs:396:65-396:66)
  2: _175 = AddWithOverflow(_162, _169)
    SourceInfo(src/lib.rs:396:17-396:66)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:17-396:66)
      kind: assert(!move (_175.1: bool), "attempt to compute `{} + {}`, which would overflow", move _162, move _169) -> [success: bb83, unwind: bb120]
  }
  preds [bb81]
  succs [bb83, bb120]

bb83
  0: _161 = move (_175.0: usize)
    SourceInfo(src/lib.rs:396:17-396:66)
  1: StorageDead(_169)
    SourceInfo(src/lib.rs:396:65-396:66)
  2: StorageDead(_162)
    SourceInfo(src/lib.rs:396:65-396:66)
  3: _176 = AddWithOverflow(_161, const 1_usize)
    SourceInfo(src/lib.rs:396:17-396:70)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:17-396:70)
      kind: assert(!move (_176.1: bool), "attempt to compute `{} + {}`, which would overflow", move _161, const 1_usize) -> [success: bb84, unwind: bb120]
  }
  preds [bb82]
  succs [bb84, bb120]

bb84
  0: _160 = move (_176.0: usize)
    SourceInfo(src/lib.rs:396:17-396:70)
  1: StorageDead(_161)
    SourceInfo(src/lib.rs:396:69-396:70)
  2: StorageLive(_177)
    SourceInfo(src/lib.rs:396:73-396:85)
  3: StorageLive(_178)
    SourceInfo(src/lib.rs:396:74-396:80)
  4: StorageLive(_179)
    SourceInfo(src/lib.rs:396:74-396:75)
  5: _179 = _124
    SourceInfo(src/lib.rs:396:74-396:75)
  6: StorageLive(_180)
    SourceInfo(src/lib.rs:396:78-396:80)
  7: _180 = _110
    SourceInfo(src/lib.rs:396:78-396:80)
  8: _181 = SubWithOverflow(_179, _180)
    SourceInfo(src/lib.rs:396:74-396:80)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:74-396:80)
      kind: assert(!move (_181.1: bool), "attempt to compute `{} - {}`, which would overflow", move _179, move _180) -> [success: bb85, unwind: bb120]
  }
  preds [bb83]
  succs [bb85, bb120]

bb85
  0: _178 = move (_181.0: usize)
    SourceInfo(src/lib.rs:396:74-396:80)
  1: StorageDead(_180)
    SourceInfo(src/lib.rs:396:79-396:80)
  2: StorageDead(_179)
    SourceInfo(src/lib.rs:396:79-396:80)
  3: _182 = SubWithOverflow(_178, const 1_usize)
    SourceInfo(src/lib.rs:396:73-396:85)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:73-396:85)
      kind: assert(!move (_182.1: bool), "attempt to compute `{} - {}`, which would overflow", move _178, const 1_usize) -> [success: bb86, unwind: bb120]
  }
  preds [bb84]
  succs [bb86, bb120]

bb86
  0: _177 = move (_182.0: usize)
    SourceInfo(src/lib.rs:396:73-396:85)
  1: StorageDead(_178)
    SourceInfo(src/lib.rs:396:84-396:85)
  2: _183 = AddWithOverflow(_160, _177)
    SourceInfo(src/lib.rs:396:17-396:85)
  Terminator {
      source_info: SourceInfo(src/lib.rs:396:17-396:85)
      kind: assert(!move (_183.1: bool), "attempt to compute `{} + {}`, which would overflow", move _160, move _177) -> [success: bb87, unwind: bb120]
  }
  preds [bb85]
  succs [bb87, bb120]

bb87
  0: _159 = move (_183.0: usize)
    SourceInfo(src/lib.rs:396:17-396:85)
  1: StorageDead(_177)
    SourceInfo(src/lib.rs:396:84-396:85)
  2: StorageDead(_160)
    SourceInfo(src/lib.rs:396:84-396:85)
  3: FakeRead(ForLet(None), _159)
    SourceInfo(src/lib.rs:395:17-395:35)
  4: StorageDead(_163)
    SourceInfo(src/lib.rs:396:85-396:86)
  5: StorageLive(_184)
    SourceInfo(src/lib.rs:398:17-398:38)
  6: StorageLive(_185)
    SourceInfo(src/lib.rs:398:41-398:75)
  7: StorageLive(_186)
    SourceInfo(src/lib.rs:398:50-398:75)
  8: StorageLive(_187)
    SourceInfo(src/lib.rs:398:41-398:50)
  9: _187 = &_18
    SourceInfo(src/lib.rs:398:41-398:50)
  10: StorageLive(_188)
    SourceInfo(src/lib.rs:398:51-398:74)
  11: StorageLive(_189)
    SourceInfo(src/lib.rs:398:62-398:63)
  12: _189 = _109
    SourceInfo(src/lib.rs:398:62-398:63)
  13: StorageLive(_190)
    SourceInfo(src/lib.rs:398:65-398:66)
  14: _190 = _124
    SourceInfo(src/lib.rs:398:65-398:66)
  15: StorageLive(_191)
    SourceInfo(src/lib.rs:398:68-398:73)
  16: _191 = _15
    SourceInfo(src/lib.rs:398:68-398:73)
  Terminator {
      source_info: SourceInfo(src/lib.rs:398:51-398:74)
      kind: _188 = flat_index(move _189, move _190, move _191) -> [return: bb88, unwind: bb120]
  }
  preds [bb86]
  succs [bb88, bb120]

bb88
  0: StorageDead(_191)
    SourceInfo(src/lib.rs:398:73-398:74)
  1: StorageDead(_190)
    SourceInfo(src/lib.rs:398:73-398:74)
  2: StorageDead(_189)
    SourceInfo(src/lib.rs:398:73-398:74)
  Terminator {
      source_info: SourceInfo(src/lib.rs:398:50-398:75)
      kind: _186 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _187, move _188) -> [return: bb89, unwind: bb120]
  }
  preds [bb87]
  succs [bb89, bb120]

bb89
  0: _185 = (*_186)
    SourceInfo(src/lib.rs:398:41-398:75)
  1: StorageDead(_188)
    SourceInfo(src/lib.rs:398:74-398:75)
  2: StorageDead(_187)
    SourceInfo(src/lib.rs:398:74-398:75)
  3: _192 = AddWithOverflow(_185, const 1_usize)
    SourceInfo(src/lib.rs:398:41-398:79)
  Terminator {
      source_info: SourceInfo(src/lib.rs:398:41-398:79)
      kind: assert(!move (_192.1: bool), "attempt to compute `{} + {}`, which would overflow", move _185, const 1_usize) -> [success: bb90, unwind: bb120]
  }
  preds [bb88]
  succs [bb90, bb120]

bb90
  0: _184 = move (_192.0: usize)
    SourceInfo(src/lib.rs:398:41-398:79)
  1: StorageDead(_185)
    SourceInfo(src/lib.rs:398:78-398:79)
  2: FakeRead(ForLet(None), _184)
    SourceInfo(src/lib.rs:398:17-398:38)
  3: StorageDead(_186)
    SourceInfo(src/lib.rs:398:79-398:80)
  4: StorageLive(_193)
    SourceInfo(src/lib.rs:399:13-402:14)
  5: StorageLive(_194)
    SourceInfo(src/lib.rs:399:16-399:48)
  6: StorageLive(_195)
    SourceInfo(src/lib.rs:399:16-399:30)
  7: StorageLive(_196)
    SourceInfo(src/lib.rs:399:24-399:29)
  8: StorageLive(_197)
    SourceInfo(src/lib.rs:399:24-399:25)
  9: _197 = _109
    SourceInfo(src/lib.rs:399:24-399:25)
  10: _198 = SubWithOverflow(_197, const 1_usize)
    SourceInfo(src/lib.rs:399:24-399:29)
  Terminator {
      source_info: SourceInfo(src/lib.rs:399:24-399:29)
      kind: assert(!move (_198.1: bool), "attempt to compute `{} - {}`, which would overflow", move _197, const 1_usize) -> [success: bb91, unwind: bb120]
  }
  preds [bb89]
  succs [bb91, bb120]

bb91
  0: _196 = move (_198.0: usize)
    SourceInfo(src/lib.rs:399:24-399:29)
  1: StorageDead(_197)
    SourceInfo(src/lib.rs:399:28-399:29)
  2: _199 = Len((*_1))
    SourceInfo(src/lib.rs:399:16-399:30)
  3: _200 = Lt(_196, _199)
    SourceInfo(src/lib.rs:399:16-399:30)
  Terminator {
      source_info: SourceInfo(src/lib.rs:399:16-399:30)
      kind: assert(move _200, "index out of bounds: the length is {} but the index is {}", move _199, _196) -> [success: bb92, unwind: bb120]
  }
  preds [bb90]
  succs [bb92, bb120]

bb92
  0: _195 = &(*_1)[_196]
    SourceInfo(src/lib.rs:399:16-399:30)
  1: StorageLive(_201)
    SourceInfo(src/lib.rs:399:34-399:48)
  2: StorageLive(_202)
    SourceInfo(src/lib.rs:399:42-399:47)
  3: StorageLive(_203)
    SourceInfo(src/lib.rs:399:42-399:43)
  4: _203 = _124
    SourceInfo(src/lib.rs:399:42-399:43)
  5: _204 = SubWithOverflow(_203, const 1_usize)
    SourceInfo(src/lib.rs:399:42-399:47)
  Terminator {
      source_info: SourceInfo(src/lib.rs:399:42-399:47)
      kind: assert(!move (_204.1: bool), "attempt to compute `{} - {}`, which would overflow", move _203, const 1_usize) -> [success: bb93, unwind: bb120]
  }
  preds [bb91]
  succs [bb93, bb120]

bb93
  0: _202 = move (_204.0: usize)
    SourceInfo(src/lib.rs:399:42-399:47)
  1: StorageDead(_203)
    SourceInfo(src/lib.rs:399:46-399:47)
  2: _205 = Len((*_2))
    SourceInfo(src/lib.rs:399:34-399:48)
  3: _206 = Lt(_202, _205)
    SourceInfo(src/lib.rs:399:34-399:48)
  Terminator {
      source_info: SourceInfo(src/lib.rs:399:34-399:48)
      kind: assert(move _206, "index out of bounds: the length is {} but the index is {}", move _205, _202) -> [success: bb94, unwind: bb120]
  }
  preds [bb92]
  succs [bb94, bb120]

bb94
  0: _201 = &(*_2)[_202]
    SourceInfo(src/lib.rs:399:34-399:48)
  Terminator {
      source_info: SourceInfo(src/lib.rs:399:16-399:48)
      kind: _194 = <Elem as std::cmp::PartialEq>::eq(move _195, move _201) -> [return: bb95, unwind: bb120]
  }
  preds [bb93]
  succs [bb95, bb120]

bb95
  Terminator {
      source_info: SourceInfo(src/lib.rs:399:16-399:48)
      kind: switchInt(move _194) -> [0: bb98, otherwise: bb96]
  }
  preds [bb94]
  succs [bb96, bb98]

bb96
  0: StorageDead(_202)
    SourceInfo(src/lib.rs:399:47-399:48)
  1: StorageDead(_201)
    SourceInfo(src/lib.rs:399:47-399:48)
  2: StorageDead(_196)
    SourceInfo(src/lib.rs:399:47-399:48)
  3: StorageDead(_195)
    SourceInfo(src/lib.rs:399:47-399:48)
  4: StorageLive(_207)
    SourceInfo(src/lib.rs:400:22-400:23)
  5: _207 = _124
    SourceInfo(src/lib.rs:400:22-400:23)
  6: _110 = move _207
    SourceInfo(src/lib.rs:400:17-400:23)
  7: StorageDead(_207)
    SourceInfo(src/lib.rs:400:22-400:23)
  8: _208 = SubWithOverflow(_184, const 1_usize)
    SourceInfo(src/lib.rs:401:17-401:39)
  Terminator {
      source_info: SourceInfo(src/lib.rs:401:17-401:39)
      kind: assert(!move (_208.1: bool), "attempt to compute `{} - {}`, which would overflow", _184, const 1_usize) -> [success: bb97, unwind: bb120]
  }
  preds [bb95]
  succs [bb97, bb120]

bb97
  0: _184 = move (_208.0: usize)
    SourceInfo(src/lib.rs:401:17-401:39)
  1: _193 = const ()
    SourceInfo(src/lib.rs:399:49-402:14)
  Terminator {
      source_info: SourceInfo(src/lib.rs:399:13-402:14)
      kind: goto -> bb99
  }
  preds [bb96]
  succs [bb99]

bb98
  0: StorageDead(_202)
    SourceInfo(src/lib.rs:399:47-399:48)
  1: StorageDead(_201)
    SourceInfo(src/lib.rs:399:47-399:48)
  2: StorageDead(_196)
    SourceInfo(src/lib.rs:399:47-399:48)
  3: StorageDead(_195)
    SourceInfo(src/lib.rs:399:47-399:48)
  4: _193 = const ()
    SourceInfo(src/lib.rs:402:14-402:14)
  Terminator {
      source_info: SourceInfo(src/lib.rs:399:13-402:14)
      kind: goto -> bb99
  }
  preds [bb95]
  succs [bb99]

bb99
  0: StorageDead(_194)
    SourceInfo(src/lib.rs:402:13-402:14)
  1: StorageDead(_193)
    SourceInfo(src/lib.rs:402:13-402:14)
  2: StorageLive(_209)
    SourceInfo(src/lib.rs:404:58-407:14)
  3: StorageLive(_210)
    SourceInfo(src/lib.rs:405:17-405:34)
  4: _210 = _184
    SourceInfo(src/lib.rs:405:17-405:34)
  5: StorageLive(_211)
    SourceInfo(src/lib.rs:406:17-406:76)
  6: StorageLive(_212)
    SourceInfo(src/lib.rs:406:21-406:35)
  7: _212 = _137
    SourceInfo(src/lib.rs:406:21-406:35)
  8: StorageLive(_213)
    SourceInfo(src/lib.rs:406:37-406:75)
  9: StorageLive(_214)
    SourceInfo(src/lib.rs:406:41-406:54)
  10: _214 = _148
    SourceInfo(src/lib.rs:406:41-406:54)
  11: StorageLive(_215)
    SourceInfo(src/lib.rs:406:56-406:74)
  12: _215 = _159
    SourceInfo(src/lib.rs:406:56-406:74)
  Terminator {
      source_info: SourceInfo(src/lib.rs:406:37-406:75)
      kind: _213 = std::cmp::min::<usize>(move _214, move _215) -> [return: bb100, unwind: bb120]
  }
  preds [bb97, bb98]
  succs [bb100, bb120]

bb100
  0: StorageDead(_215)
    SourceInfo(src/lib.rs:406:74-406:75)
  1: StorageDead(_214)
    SourceInfo(src/lib.rs:406:74-406:75)
  Terminator {
      source_info: SourceInfo(src/lib.rs:406:17-406:76)
      kind: _211 = std::cmp::min::<usize>(move _212, move _213) -> [return: bb101, unwind: bb120]
  }
  preds [bb99]
  succs [bb101, bb120]

bb101
  0: StorageDead(_213)
    SourceInfo(src/lib.rs:406:75-406:76)
  1: StorageDead(_212)
    SourceInfo(src/lib.rs:406:75-406:76)
  Terminator {
      source_info: SourceInfo(src/lib.rs:404:58-407:14)
      kind: _209 = std::cmp::min::<usize>(move _210, move _211) -> [return: bb102, unwind: bb120]
  }
  preds [bb100]
  succs [bb102, bb120]

bb102
  0: StorageDead(_211)
    SourceInfo(src/lib.rs:407:13-407:14)
  1: StorageDead(_210)
    SourceInfo(src/lib.rs:407:13-407:14)
  2: StorageLive(_216)
    SourceInfo(src/lib.rs:404:22-404:55)
  3: StorageLive(_217)
    SourceInfo(src/lib.rs:404:13-404:22)
  4: _217 = &mut _18
    SourceInfo(src/lib.rs:404:13-404:22)
  5: StorageLive(_218)
    SourceInfo(src/lib.rs:404:23-404:54)
  6: StorageLive(_219)
    SourceInfo(src/lib.rs:404:34-404:39)
  7: StorageLive(_220)
    SourceInfo(src/lib.rs:404:34-404:35)
  8: _220 = _109
    SourceInfo(src/lib.rs:404:34-404:35)
  9: _221 = AddWithOverflow(_220, const 1_usize)
    SourceInfo(src/lib.rs:404:34-404:39)
  Terminator {
      source_info: SourceInfo(src/lib.rs:404:34-404:39)
      kind: assert(!move (_221.1: bool), "attempt to compute `{} + {}`, which would overflow", move _220, const 1_usize) -> [success: bb103, unwind: bb120]
  }
  preds [bb101]
  succs [bb103, bb120]

bb103
  0: _219 = move (_221.0: usize)
    SourceInfo(src/lib.rs:404:34-404:39)
  1: StorageDead(_220)
    SourceInfo(src/lib.rs:404:38-404:39)
  2: StorageLive(_222)
    SourceInfo(src/lib.rs:404:41-404:46)
  3: StorageLive(_223)
    SourceInfo(src/lib.rs:404:41-404:42)
  4: _223 = _124
    SourceInfo(src/lib.rs:404:41-404:42)
  5: _224 = AddWithOverflow(_223, const 1_usize)
    SourceInfo(src/lib.rs:404:41-404:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:404:41-404:46)
      kind: assert(!move (_224.1: bool), "attempt to compute `{} + {}`, which would overflow", move _223, const 1_usize) -> [success: bb104, unwind: bb120]
  }
  preds [bb102]
  succs [bb104, bb120]

bb104
  0: _222 = move (_224.0: usize)
    SourceInfo(src/lib.rs:404:41-404:46)
  1: StorageDead(_223)
    SourceInfo(src/lib.rs:404:45-404:46)
  2: StorageLive(_225)
    SourceInfo(src/lib.rs:404:48-404:53)
  3: _225 = _15
    SourceInfo(src/lib.rs:404:48-404:53)
  Terminator {
      source_info: SourceInfo(src/lib.rs:404:23-404:54)
      kind: _218 = flat_index(move _219, move _222, move _225) -> [return: bb105, unwind: bb120]
  }
  preds [bb103]
  succs [bb105, bb120]

bb105
  0: StorageDead(_225)
    SourceInfo(src/lib.rs:404:53-404:54)
  1: StorageDead(_222)
    SourceInfo(src/lib.rs:404:53-404:54)
  2: StorageDead(_219)
    SourceInfo(src/lib.rs:404:53-404:54)
  Terminator {
      source_info: SourceInfo(src/lib.rs:404:22-404:55)
      kind: _216 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _217, move _218) -> [return: bb106, unwind: bb120]
  }
  preds [bb104]
  succs [bb106, bb120]

bb106
  0: StorageDead(_218)
    SourceInfo(src/lib.rs:404:54-404:55)
  1: StorageDead(_217)
    SourceInfo(src/lib.rs:404:54-404:55)
  2: (*_216) = move _209
    SourceInfo(src/lib.rs:404:13-407:14)
  3: StorageDead(_209)
    SourceInfo(src/lib.rs:407:13-407:14)
  4: StorageDead(_216)
    SourceInfo(src/lib.rs:407:14-407:15)
  5: _118 = const ()
    SourceInfo(src/lib.rs:387:33-408:10)
  6: StorageDead(_184)
    SourceInfo(src/lib.rs:408:9-408:10)
  7: StorageDead(_159)
    SourceInfo(src/lib.rs:408:9-408:10)
  8: StorageDead(_148)
    SourceInfo(src/lib.rs:408:9-408:10)
  9: StorageDead(_137)
    SourceInfo(src/lib.rs:408:9-408:10)
  10: StorageDead(_125)
    SourceInfo(src/lib.rs:408:9-408:10)
  11: StorageDead(_124)
    SourceInfo(src/lib.rs:408:9-408:10)
  12: StorageDead(_121)
    SourceInfo(src/lib.rs:408:9-408:10)
  13: StorageDead(_119)
    SourceInfo(src/lib.rs:408:9-408:10)
  14: StorageDead(_118)
    SourceInfo(src/lib.rs:408:9-408:10)
  15: _41 = const ()
    SourceInfo(src/lib.rs:387:9-408:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:387:9-408:10)
      kind: goto -> bb56
  }
  preds [bb105]
  succs [bb56]

bb107
  0: _230 = move (_232.0: usize)
    SourceInfo(src/lib.rs:410:30-410:35)
  1: StorageDead(_231)
    SourceInfo(src/lib.rs:410:34-410:35)
  2: _233 = Len((*_1))
    SourceInfo(src/lib.rs:410:22-410:36)
  3: _234 = Lt(_230, _233)
    SourceInfo(src/lib.rs:410:22-410:36)
  Terminator {
      source_info: SourceInfo(src/lib.rs:410:22-410:36)
      kind: assert(move _234, "index out of bounds: the length is {} but the index is {}", move _233, _230) -> [success: bb108, unwind: bb120]
  }
  preds [bb62]
  succs [bb108, bb120]

bb108
  0: _229 = &(*_1)[_230]
    SourceInfo(src/lib.rs:410:22-410:36)
  Terminator {
      source_info: SourceInfo(src/lib.rs:410:22-410:44)
      kind: _228 = <Elem as std::clone::Clone>::clone(move _229) -> [return: bb109, unwind: bb120]
  }
  preds [bb107]
  succs [bb109, bb120]

bb109
  0: StorageDead(_229)
    SourceInfo(src/lib.rs:410:43-410:44)
  1: StorageLive(_235)
    SourceInfo(src/lib.rs:410:46-410:47)
  2: _235 = _109
    SourceInfo(src/lib.rs:410:46-410:47)
  Terminator {
      source_info: SourceInfo(src/lib.rs:410:9-410:48)
      kind: _226 = std::collections::HashMap::<Elem, usize>::insert(move _227, move _228, move _235) -> [return: bb110, unwind: bb119]
  }
  preds [bb108]
  succs [bb110, bb119]

bb110
  0: StorageDead(_235)
    SourceInfo(src/lib.rs:410:47-410:48)
  1: StorageDead(_228)
    SourceInfo(src/lib.rs:410:47-410:48)
  2: StorageDead(_227)
    SourceInfo(src/lib.rs:410:47-410:48)
  3: StorageDead(_230)
    SourceInfo(src/lib.rs:410:48-410:49)
  4: StorageDead(_226)
    SourceInfo(src/lib.rs:410:48-410:49)
  5: _103 = const ()
    SourceInfo(src/lib.rs:384:29-411:6)
  6: StorageDead(_110)
    SourceInfo(src/lib.rs:411:5-411:6)
  7: StorageDead(_109)
    SourceInfo(src/lib.rs:411:5-411:6)
  8: StorageDead(_106)
    SourceInfo(src/lib.rs:411:5-411:6)
  9: StorageDead(_104)
    SourceInfo(src/lib.rs:411:5-411:6)
  10: StorageDead(_103)
    SourceInfo(src/lib.rs:411:5-411:6)
  11: _41 = const ()
    SourceInfo(src/lib.rs:384:5-411:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:384:5-411:6)
      kind: goto -> bb47
  }
  preds [bb109]
  succs [bb47]

bb111
  0: _239 = move (_241.0: usize)
    SourceInfo(src/lib.rs:413:26-413:35)
  1: StorageDead(_240)
    SourceInfo(src/lib.rs:413:34-413:35)
  2: StorageLive(_242)
    SourceInfo(src/lib.rs:413:37-413:46)
  3: StorageLive(_243)
    SourceInfo(src/lib.rs:413:37-413:42)
  4: _243 = _5
    SourceInfo(src/lib.rs:413:37-413:42)
  5: _244 = AddWithOverflow(_243, const 1_usize)
    SourceInfo(src/lib.rs:413:37-413:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:413:37-413:46)
      kind: assert(!move (_244.1: bool), "attempt to compute `{} + {}`, which would overflow", move _243, const 1_usize) -> [success: bb112, unwind: bb120]
  }
  preds [bb53]
  succs [bb112, bb120]

bb112
  0: _242 = move (_244.0: usize)
    SourceInfo(src/lib.rs:413:37-413:46)
  1: StorageDead(_243)
    SourceInfo(src/lib.rs:413:45-413:46)
  2: StorageLive(_245)
    SourceInfo(src/lib.rs:413:48-413:53)
  3: _245 = _15
    SourceInfo(src/lib.rs:413:48-413:53)
  Terminator {
      source_info: SourceInfo(src/lib.rs:413:15-413:54)
      kind: _238 = flat_index(move _239, move _242, move _245) -> [return: bb113, unwind: bb120]
  }
  preds [bb111]
  succs [bb113, bb120]

bb113
  0: StorageDead(_245)
    SourceInfo(src/lib.rs:413:53-413:54)
  1: StorageDead(_242)
    SourceInfo(src/lib.rs:413:53-413:54)
  2: StorageDead(_239)
    SourceInfo(src/lib.rs:413:53-413:54)
  Terminator {
      source_info: SourceInfo(src/lib.rs:413:14-413:55)
      kind: _236 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _237, move _238) -> [return: bb114, unwind: bb120]
  }
  preds [bb112]
  succs [bb114, bb120]

bb114
  0: _0 = (*_236)
    SourceInfo(src/lib.rs:413:5-413:55)
  1: StorageDead(_238)
    SourceInfo(src/lib.rs:413:54-413:55)
  2: StorageDead(_237)
    SourceInfo(src/lib.rs:413:54-413:55)
  Terminator {
      source_info: SourceInfo(src/lib.rs:414:1-414:2)
      kind: drop(_95) -> [return: bb115, unwind: bb121]
  }
  preds [bb113]
  succs [bb115, bb121]

bb115
  0: StorageDead(_95)
    SourceInfo(src/lib.rs:414:1-414:2)
  1: StorageDead(_27)
    SourceInfo(src/lib.rs:414:1-414:2)
  Terminator {
      source_info: SourceInfo(src/lib.rs:414:1-414:2)
      kind: drop(_18) -> [return: bb116, unwind: bb122]
  }
  preds [bb114]
  succs [bb116, bb122]

bb116
  0: StorageDead(_18)
    SourceInfo(src/lib.rs:414:1-414:2)
  1: StorageDead(_15)
    SourceInfo(src/lib.rs:414:1-414:2)
  2: StorageDead(_5)
    SourceInfo(src/lib.rs:414:1-414:2)
  3: StorageDead(_3)
    SourceInfo(src/lib.rs:414:1-414:2)
  4: StorageDead(_236)
    SourceInfo(src/lib.rs:414:1-414:2)
  Terminator {
      source_info: SourceInfo(src/lib.rs:414:2-414:2)
      kind: goto -> bb118
  }
  preds [bb115]
  succs [bb118]

bb117
  0: StorageDead(_5)
    SourceInfo(src/lib.rs:414:1-414:2)
  1: StorageDead(_3)
    SourceInfo(src/lib.rs:414:1-414:2)
  Terminator {
      source_info: SourceInfo(src/lib.rs:414:2-414:2)
      kind: goto -> bb118
  }
  preds [bb3, bb5]
  succs [bb118]

bb118
  Terminator {
      source_info: SourceInfo(src/lib.rs:414:2-414:2)
      kind: return
  }
  preds [bb116, bb117]
  succs []

bb119
  Terminator {
      source_info: SourceInfo(src/lib.rs:410:47-410:48)
      kind: drop(_228) -> [return: bb120, unwind terminate(cleanup)]
  }
  preds [bb109]
  succs [bb120]

bb120
  Terminator {
      source_info: SourceInfo(src/lib.rs:414:1-414:2)
      kind: drop(_95) -> [return: bb121, unwind terminate(cleanup)]
  }
  preds [bb44, bb45, bb47, bb48, bb52, bb53, bb54, bb56, bb57, bb61, bb62, bb63, bb64, bb70, bb71, bb72, bb73, bb74, bb75, bb76, bb77, bb78, bb79, bb80, bb81, bb82, bb83, bb84, bb85, bb86, bb87, bb88, bb89, bb90, bb91, bb92, bb93, bb94, bb96, bb99, bb100, bb101, bb102, bb103, bb104, bb105, bb107, bb108, bb111, bb112, bb113, bb119]
  succs [bb121]

bb121
  Terminator {
      source_info: SourceInfo(src/lib.rs:414:1-414:2)
      kind: drop(_18) -> [return: bb122, unwind terminate(cleanup)]
  }
  preds [bb11, bb12, bb13, bb14, bb16, bb17, bb21, bb22, bb23, bb24, bb25, bb26, bb27, bb29, bb31, bb32, bb36, bb37, bb38, bb39, bb40, bb41, bb42, bb114, bb120]
  succs [bb122]

bb122
  Terminator {
      source_info: SourceInfo(src/lib.rs:353:1-414:2)
      kind: resume
  }
  preds [bb0, bb1, bb6, bb7, bb8, bb9, bb10, bb115, bb121]
  succs []

