bb0
  0: StorageLive(_3)
    SourceInfo(src/lib.rs:588:9-593:10)
  1: StorageLive(_4)
    SourceInfo(src/lib.rs:587:13-587:18)
  2: StorageLive(_5)
    SourceInfo(src/lib.rs:587:21-587:24)
  3: _5 = _2
    SourceInfo(src/lib.rs:587:21-587:24)
  4: _4 = move _5 as u32 (IntToInt)
    SourceInfo(src/lib.rs:587:21-587:31)
  5: StorageDead(_5)
    SourceInfo(src/lib.rs:587:30-587:31)
  6: FakeRead(ForLet(None), _4)
    SourceInfo(src/lib.rs:587:13-587:18)
  7: StorageLive(_6)
    SourceInfo(src/lib.rs:588:9-593:10)
  8: StorageLive(_7)
    SourceInfo(src/lib.rs:588:12-588:24)
  9: StorageLive(_8)
    SourceInfo(src/lib.rs:588:12-588:17)
  10: _8 = _4
    SourceInfo(src/lib.rs:588:12-588:17)
  11: _7 = Le(move _8, const 255_u32)
    SourceInfo(src/lib.rs:588:12-588:24)
  Terminator {
      source_info: SourceInfo(src/lib.rs:588:12-588:24)
      kind: switchInt(move _7) -> [0: bb6, otherwise: bb1]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_8)
    SourceInfo(src/lib.rs:588:23-588:24)
  1: StorageLive(_9)
    SourceInfo(src/lib.rs:590:13-590:58)
  2: StorageLive(_10)
    SourceInfo(src/lib.rs:589:17-589:23)
  3: StorageLive(_11)
    SourceInfo(src/lib.rs:589:26-589:45)
  4: StorageLive(_12)
    SourceInfo(src/lib.rs:589:39-589:44)
  5: _12 = _4
    SourceInfo(src/lib.rs:589:39-589:44)
  Terminator {
      source_info: SourceInfo(src/lib.rs:589:26-589:45)
      kind: _11 = <u8 as std::convert::TryFrom<u32>>::try_from(move _12) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_12)
    SourceInfo(src/lib.rs:589:44-589:45)
  1: StorageLive(_13)
    SourceInfo(src/lib.rs:589:53-589:80)
  2: StorageLive(_14)
    SourceInfo(src/lib.rs:589:53-589:80)
  3: _14 = const "we check the bounds above"
    SourceInfo(src/lib.rs:589:53-589:80)
  4: _13 = &(*_14)
    SourceInfo(src/lib.rs:589:53-589:80)
  Terminator {
      source_info: SourceInfo(src/lib.rs:589:26-589:81)
      kind: _10 = std::result::Result::<u8, std::num::TryFromIntError>::expect(move _11, move _13) -> [return: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: StorageDead(_13)
    SourceInfo(src/lib.rs:589:80-589:81)
  1: StorageDead(_11)
    SourceInfo(src/lib.rs:589:80-589:81)
  2: FakeRead(ForLet(None), _10)
    SourceInfo(src/lib.rs:589:17-589:23)
  3: StorageDead(_14)
    SourceInfo(src/lib.rs:589:81-589:82)
  4: StorageLive(_15)
    SourceInfo(src/lib.rs:590:13-590:58)
  5: StorageLive(_16)
    SourceInfo(src/lib.rs:590:38-590:57)
  6: StorageLive(_17)
    SourceInfo(src/lib.rs:590:50-590:56)
  7: _17 = _10
    SourceInfo(src/lib.rs:590:50-590:56)
  Terminator {
      source_info: SourceInfo(src/lib.rs:590:38-590:57)
      kind: _16 = <usize as std::convert::From<u8>>::from(move _17) -> [return: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: StorageDead(_17)
    SourceInfo(src/lib.rs:590:56-590:57)
  1: _18 = Len(((*_1).1: [ValueType; 256]))
    SourceInfo(src/lib.rs:590:18-590:58)
  2: _19 = Lt(_16, _18)
    SourceInfo(src/lib.rs:590:18-590:58)
  Terminator {
      source_info: SourceInfo(src/lib.rs:590:18-590:58)
      kind: assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _16) -> [success: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: _15 = &mut ((*_1).1: [ValueType; 256])[_16]
    SourceInfo(src/lib.rs:590:13-590:58)
  1: _9 = &mut (*_15)
    SourceInfo(src/lib.rs:590:13-590:58)
  2: StorageDead(_10)
    SourceInfo(src/lib.rs:591:9-591:10)
  3: _6 = &mut (*_9)
    SourceInfo(src/lib.rs:590:13-590:58)
  4: StorageDead(_16)
    SourceInfo(src/lib.rs:591:9-591:10)
  5: StorageDead(_15)
    SourceInfo(src/lib.rs:591:9-591:10)
  6: StorageDead(_9)
    SourceInfo(src/lib.rs:591:9-591:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:588:9-593:10)
      kind: goto -> bb8
  }
  preds [bb4]
  succs [bb8]

bb6
  0: StorageDead(_8)
    SourceInfo(src/lib.rs:588:23-588:24)
  1: StorageLive(_20)
    SourceInfo(src/lib.rs:592:13-592:36)
  2: StorageLive(_21)
    SourceInfo(src/lib.rs:592:13-592:21)
  3: _21 = &mut ((*_1).0: GrowingHashmapChar<ValueType>)
    SourceInfo(src/lib.rs:592:13-592:21)
  4: StorageLive(_22)
    SourceInfo(src/lib.rs:592:30-592:35)
  5: _22 = _4
    SourceInfo(src/lib.rs:592:30-592:35)
  Terminator {
      source_info: SourceInfo(src/lib.rs:592:13-592:36)
      kind: _20 = GrowingHashmapChar::<ValueType>::get_mut(move _21, move _22) -> [return: bb7, unwind: bb9]
  }
  preds [bb0]
  succs [bb7, bb9]

bb7
  0: _6 = &mut (*_20)
    SourceInfo(src/lib.rs:592:13-592:36)
  1: StorageDead(_22)
    SourceInfo(src/lib.rs:592:35-592:36)
  2: StorageDead(_21)
    SourceInfo(src/lib.rs:592:35-592:36)
  3: StorageDead(_20)
    SourceInfo(src/lib.rs:593:9-593:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:588:9-593:10)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  0: _3 = &mut (*_6)
    SourceInfo(src/lib.rs:588:9-593:10)
  1: StorageDead(_7)
    SourceInfo(src/lib.rs:593:9-593:10)
  2: StorageDead(_4)
    SourceInfo(src/lib.rs:594:5-594:6)
  3: _0 = &mut (*_3)
    SourceInfo(src/lib.rs:588:9-593:10)
  4: StorageDead(_6)
    SourceInfo(src/lib.rs:594:5-594:6)
  5: StorageDead(_3)
    SourceInfo(src/lib.rs:594:5-594:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:594:6-594:6)
      kind: return
  }
  preds [bb5, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/lib.rs:586:5-594:6)
      kind: resume
  }
  preds [bb1, bb2, bb3, bb4, bb6]
  succs []

