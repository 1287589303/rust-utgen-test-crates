bb0
  0: StorageLive(_3)
    SourceInfo(src/lib.rs:577:13-577:18)
  1: StorageLive(_4)
    SourceInfo(src/lib.rs:577:21-577:24)
  2: _4 = _2
    SourceInfo(src/lib.rs:577:21-577:24)
  3: _3 = move _4 as u32 (IntToInt)
    SourceInfo(src/lib.rs:577:21-577:31)
  4: StorageDead(_4)
    SourceInfo(src/lib.rs:577:30-577:31)
  5: FakeRead(ForLet(None), _3)
    SourceInfo(src/lib.rs:577:13-577:18)
  6: StorageLive(_5)
    SourceInfo(src/lib.rs:578:12-578:24)
  7: StorageLive(_6)
    SourceInfo(src/lib.rs:578:12-578:17)
  8: _6 = _3
    SourceInfo(src/lib.rs:578:12-578:17)
  9: _5 = Le(move _6, const 255_u32)
    SourceInfo(src/lib.rs:578:12-578:24)
  Terminator {
      source_info: SourceInfo(src/lib.rs:578:12-578:24)
      kind: switchInt(move _5) -> [0: bb6, otherwise: bb1]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_6)
    SourceInfo(src/lib.rs:578:23-578:24)
  1: StorageLive(_7)
    SourceInfo(src/lib.rs:579:17-579:23)
  2: StorageLive(_8)
    SourceInfo(src/lib.rs:579:26-579:45)
  3: StorageLive(_9)
    SourceInfo(src/lib.rs:579:39-579:44)
  4: _9 = _3
    SourceInfo(src/lib.rs:579:39-579:44)
  Terminator {
      source_info: SourceInfo(src/lib.rs:579:26-579:45)
      kind: _8 = <u8 as std::convert::TryFrom<u32>>::try_from(move _9) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_9)
    SourceInfo(src/lib.rs:579:44-579:45)
  1: StorageLive(_10)
    SourceInfo(src/lib.rs:579:53-579:80)
  2: StorageLive(_11)
    SourceInfo(src/lib.rs:579:53-579:80)
  3: _11 = const "we check the bounds above"
    SourceInfo(src/lib.rs:579:53-579:80)
  4: _10 = &(*_11)
    SourceInfo(src/lib.rs:579:53-579:80)
  Terminator {
      source_info: SourceInfo(src/lib.rs:579:26-579:81)
      kind: _7 = std::result::Result::<u8, std::num::TryFromIntError>::expect(move _8, move _10) -> [return: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: StorageDead(_10)
    SourceInfo(src/lib.rs:579:80-579:81)
  1: StorageDead(_8)
    SourceInfo(src/lib.rs:579:80-579:81)
  2: FakeRead(ForLet(None), _7)
    SourceInfo(src/lib.rs:579:17-579:23)
  3: StorageDead(_11)
    SourceInfo(src/lib.rs:579:81-579:82)
  4: StorageLive(_12)
    SourceInfo(src/lib.rs:580:33-580:52)
  5: StorageLive(_13)
    SourceInfo(src/lib.rs:580:45-580:51)
  6: _13 = _7
    SourceInfo(src/lib.rs:580:45-580:51)
  Terminator {
      source_info: SourceInfo(src/lib.rs:580:33-580:52)
      kind: _12 = <usize as std::convert::From<u8>>::from(move _13) -> [return: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: StorageDead(_13)
    SourceInfo(src/lib.rs:580:51-580:52)
  1: _14 = Len(((*_1).1: [ValueType; 256]))
    SourceInfo(src/lib.rs:580:13-580:53)
  2: _15 = Lt(_12, _14)
    SourceInfo(src/lib.rs:580:13-580:53)
  Terminator {
      source_info: SourceInfo(src/lib.rs:580:13-580:53)
      kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _12) -> [success: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: _0 = ((*_1).1: [ValueType; 256])[_12]
    SourceInfo(src/lib.rs:580:13-580:53)
  1: StorageDead(_7)
    SourceInfo(src/lib.rs:581:9-581:10)
  2: StorageDead(_12)
    SourceInfo(src/lib.rs:581:9-581:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:578:9-583:10)
      kind: goto -> bb8
  }
  preds [bb4]
  succs [bb8]

bb6
  0: StorageDead(_6)
    SourceInfo(src/lib.rs:578:23-578:24)
  1: StorageLive(_16)
    SourceInfo(src/lib.rs:582:13-582:21)
  2: _16 = &((*_1).0: GrowingHashmapChar<ValueType>)
    SourceInfo(src/lib.rs:582:13-582:21)
  3: StorageLive(_17)
    SourceInfo(src/lib.rs:582:26-582:31)
  4: _17 = _3
    SourceInfo(src/lib.rs:582:26-582:31)
  Terminator {
      source_info: SourceInfo(src/lib.rs:582:13-582:32)
      kind: _0 = GrowingHashmapChar::<ValueType>::get(move _16, move _17) -> [return: bb7, unwind: bb9]
  }
  preds [bb0]
  succs [bb7, bb9]

bb7
  0: StorageDead(_17)
    SourceInfo(src/lib.rs:582:31-582:32)
  1: StorageDead(_16)
    SourceInfo(src/lib.rs:582:31-582:32)
  Terminator {
      source_info: SourceInfo(src/lib.rs:578:9-583:10)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  0: StorageDead(_5)
    SourceInfo(src/lib.rs:583:9-583:10)
  1: StorageDead(_3)
    SourceInfo(src/lib.rs:584:5-584:6)
  Terminator {
      source_info: SourceInfo(src/lib.rs:584:6-584:6)
      kind: return
  }
  preds [bb5, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/lib.rs:576:5-584:6)
      kind: resume
  }
  preds [bb1, bb2, bb3, bb4, bb6]
  succs []

