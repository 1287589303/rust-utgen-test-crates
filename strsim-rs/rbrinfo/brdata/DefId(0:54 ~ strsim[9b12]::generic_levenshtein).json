{
  "name": "strsim::generic_levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:233:1:259:2",
  "doc": "/// Calculates the minimum number of insertions, deletions, and substitutions\n/// required to change one sequence into the other.\n///\n/// ```\n/// use strsim::generic_levenshtein;\n///\n/// assert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n/// ```\n",
  "code": [
    "pub fn generic_levenshtein<'a, 'b, Iter1, Iter2, Elem1, Elem2>(a: &'a Iter1, b: &'b Iter2) -> usize",
    "where",
    "    &'a Iter1: IntoIterator<Item = Elem1>,",
    "    &'b Iter2: IntoIterator<Item = Elem2>,",
    "    Elem1: PartialEq<Elem2>,",
    "{",
    "    let b_len = b.into_iter().count();",
    "",
    "    let mut cache: Vec<usize> = (1..b_len + 1).collect();",
    "",
    "    let mut result = b_len;",
    "",
    "    for (i, a_elem) in a.into_iter().enumerate() {",
    "        result = i + 1;",
    "        let mut distance_b = i;",
    "",
    "        for (j, b_elem) in b.into_iter().enumerate() {",
    "            let cost = usize::from(a_elem != b_elem);",
    "            let distance_a = distance_b + cost;",
    "            distance_b = cache[j];",
    "            result = min(result + 1, min(distance_a, distance_b + 1));",
    "            cache[j] = result;",
    "        }",
    "    }",
    "",
    "    result",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 2,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(i, a_elem) in a.into_iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "(j, b_elem) in b.into_iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 249,
          "bound": null
        },
        {
          "cond": "(j, b_elem) in b.into_iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 249,
          "bound": null
        },
        {
          "cond": "(i, a_elem) in a.into_iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        19,
        20,
        21,
        23,
        25,
        37,
        38,
        39,
        40,
        41,
        8,
        9,
        10,
        12,
        14,
        42,
        43,
        44,
        45
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(i, a_elem) in a.into_iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "(j, b_elem) in b.into_iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 249,
          "bound": null
        },
        {
          "cond": "(i, a_elem) in a.into_iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        37,
        38,
        39,
        40,
        41,
        8,
        9,
        10,
        12,
        14,
        42,
        43,
        44,
        45
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(i, a_elem) in a.into_iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        42,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}