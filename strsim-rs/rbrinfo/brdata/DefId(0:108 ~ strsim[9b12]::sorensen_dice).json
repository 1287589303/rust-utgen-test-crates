{
  "name": "strsim::sorensen_dice",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:721:1:754:2",
  "doc": "/// Calculates a SÃ¸rensen-Dice similarity distance using bigrams.\n/// See <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n///\n/// ```\n/// use strsim::sorensen_dice;\n///\n/// assert_eq!(1.0, sorensen_dice(\"\", \"\"));\n/// assert_eq!(0.0, sorensen_dice(\"\", \"a\"));\n/// assert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\n/// assert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\n/// assert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n/// ```\n",
  "code": [
    "pub fn sorensen_dice(a: &str, b: &str) -> f64 {",
    "    // implementation guided by",
    "    // https://github.com/aceakash/string-similarity/blob/f83ba3cd7bae874c20c429774e911ae8cff8bced/src/index.js#L6",
    "",
    "    let a: String = a.chars().filter(|&x| !char::is_whitespace(x)).collect();",
    "    let b: String = b.chars().filter(|&x| !char::is_whitespace(x)).collect();",
    "",
    "    if a == b {",
    "        return 1.0;",
    "    }",
    "",
    "    if a.len() < 2 || b.len() < 2 {",
    "        return 0.0;",
    "    }",
    "",
    "    let mut a_bigrams: HashMap<(char, char), usize> = HashMap::new();",
    "",
    "    for bigram in bigrams(&a) {",
    "        *a_bigrams.entry(bigram).or_insert(0) += 1;",
    "    }",
    "",
    "    let mut intersection_size = 0_usize;",
    "",
    "    for bigram in bigrams(&b) {",
    "        a_bigrams.entry(bigram).and_modify(|bi| {",
    "            if *bi > 0 {",
    "                *bi -= 1;",
    "                intersection_size += 1;",
    "            }",
    "        });",
    "    }",
    "",
    "    (2 * intersection_size) as f64 / (a.len() + b.len() - 2) as f64",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 3,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "a == b",
          "norm": null,
          "value": "true",
          "line": 728,
          "bound": null
        }
      ],
      "ret": "1.0",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        55,
        56,
        57,
        58
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "a == b",
          "norm": null,
          "value": "false",
          "line": 728,
          "bound": null
        },
        {
          "cond": "a.len() < 2",
          "norm": "2 > a.len()",
          "value": "true",
          "line": 732,
          "bound": null
        }
      ],
      "ret": "0.0",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        11,
        15,
        55,
        56,
        57,
        58
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "a == b",
          "norm": null,
          "value": "false",
          "line": 728,
          "bound": null
        },
        {
          "cond": "a.len() < 2",
          "norm": "2 > a.len()",
          "value": "false",
          "line": 732,
          "bound": "a.len() == 2"
        },
        {
          "cond": "b.len() < 2",
          "norm": "2 > b.len()",
          "value": "true",
          "line": 732,
          "bound": null
        }
      ],
      "ret": "0.0",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        55,
        56,
        57,
        58
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "a == b",
          "norm": null,
          "value": "false",
          "line": 728,
          "bound": null
        },
        {
          "cond": "a.len() < 2",
          "norm": "2 > a.len()",
          "value": "false",
          "line": 732,
          "bound": "a.len() == 2"
        },
        {
          "cond": "b.len() < 2",
          "norm": "2 > b.len()",
          "value": "false",
          "line": 732,
          "bound": "b.len() == 2"
        },
        {
          "cond": "bigram in bigrams(&a)",
          "norm": null,
          "value": "true",
          "line": 738,
          "bound": null
        },
        {
          "cond": "bigram in bigrams(&a)",
          "norm": null,
          "value": "false",
          "line": 738,
          "bound": null
        },
        {
          "cond": "bigram in bigrams(&b)",
          "norm": null,
          "value": "true",
          "line": 744,
          "bound": null
        },
        {
          "cond": "bigram in bigrams(&b)",
          "norm": null,
          "value": "false",
          "line": 744,
          "bound": null
        }
      ],
      "ret": "(2 * intersection_size) as f64 / (a.len() + b.len() - 2) as f64",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        30,
        21,
        22,
        23,
        25,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        43,
        44,
        36,
        37,
        38,
        40,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        58
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "a == b",
          "norm": null,
          "value": "false",
          "line": 728,
          "bound": null
        },
        {
          "cond": "a.len() < 2",
          "norm": "2 > a.len()",
          "value": "false",
          "line": 732,
          "bound": "a.len() == 2"
        },
        {
          "cond": "b.len() < 2",
          "norm": "2 > b.len()",
          "value": "false",
          "line": 732,
          "bound": "b.len() == 2"
        },
        {
          "cond": "bigram in bigrams(&a)",
          "norm": null,
          "value": "true",
          "line": 738,
          "bound": null
        },
        {
          "cond": "bigram in bigrams(&a)",
          "norm": null,
          "value": "false",
          "line": 738,
          "bound": null
        },
        {
          "cond": "bigram in bigrams(&b)",
          "norm": null,
          "value": "false",
          "line": 744,
          "bound": null
        }
      ],
      "ret": "(2 * intersection_size) as f64 / (a.len() + b.len() - 2) as f64",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        30,
        21,
        22,
        23,
        25,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        40,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        58
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "a == b",
          "norm": null,
          "value": "false",
          "line": 728,
          "bound": null
        },
        {
          "cond": "a.len() < 2",
          "norm": "2 > a.len()",
          "value": "false",
          "line": 732,
          "bound": "a.len() == 2"
        },
        {
          "cond": "b.len() < 2",
          "norm": "2 > b.len()",
          "value": "false",
          "line": 732,
          "bound": "b.len() == 2"
        },
        {
          "cond": "bigram in bigrams(&a)",
          "norm": null,
          "value": "false",
          "line": 738,
          "bound": null
        },
        {
          "cond": "bigram in bigrams(&b)",
          "norm": null,
          "value": "true",
          "line": 744,
          "bound": null
        },
        {
          "cond": "bigram in bigrams(&b)",
          "norm": null,
          "value": "false",
          "line": 744,
          "bound": null
        }
      ],
      "ret": "(2 * intersection_size) as f64 / (a.len() + b.len() - 2) as f64",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        43,
        44,
        36,
        37,
        38,
        40,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        58
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "a == b",
          "norm": null,
          "value": "false",
          "line": 728,
          "bound": null
        },
        {
          "cond": "a.len() < 2",
          "norm": "2 > a.len()",
          "value": "false",
          "line": 732,
          "bound": "a.len() == 2"
        },
        {
          "cond": "b.len() < 2",
          "norm": "2 > b.len()",
          "value": "false",
          "line": 732,
          "bound": "b.len() == 2"
        },
        {
          "cond": "bigram in bigrams(&a)",
          "norm": null,
          "value": "false",
          "line": 738,
          "bound": null
        },
        {
          "cond": "bigram in bigrams(&b)",
          "norm": null,
          "value": "false",
          "line": 744,
          "bound": null
        }
      ],
      "ret": "(2 * intersection_size) as f64 / (a.len() + b.len() - 2) as f64",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        27,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        40,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        58
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}