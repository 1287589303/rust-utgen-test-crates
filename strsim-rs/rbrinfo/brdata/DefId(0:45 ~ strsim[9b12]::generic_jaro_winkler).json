{
  "name": "strsim::generic_jaro_winkler",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:191:1:211:2",
  "doc": "/// Like Jaro but gives a boost to sequences that have a common prefix.\n",
  "code": [
    "pub fn generic_jaro_winkler<'a, 'b, Iter1, Iter2, Elem1, Elem2>(a: &'a Iter1, b: &'b Iter2) -> f64",
    "where",
    "    &'a Iter1: IntoIterator<Item = Elem1>,",
    "    &'b Iter2: IntoIterator<Item = Elem2>,",
    "    Elem1: PartialEq<Elem2>,",
    "{",
    "    let sim = generic_jaro(a, b);",
    "",
    "    if sim > 0.7 {",
    "        let prefix_length = a",
    "            .into_iter()",
    "            .take(4)",
    "            .zip(b)",
    "            .take_while(|(a_elem, b_elem)| a_elem == b_elem)",
    "            .count();",
    "",
    "        sim + 0.1 * prefix_length as f64 * (1.0 - sim)",
    "    } else {",
    "        sim",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "sim > 0.7",
          "norm": "0.7 < sim",
          "value": "true",
          "line": 199,
          "bound": null
        }
      ],
      "ret": "sim + 0.1 * prefix_length as f64 * (1.0 - sim)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "sim > 0.7",
          "norm": "0.7 < sim",
          "value": "false",
          "line": 199,
          "bound": "sim == 0.7"
        }
      ],
      "ret": "sim",
      "path": [
        0,
        1,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}