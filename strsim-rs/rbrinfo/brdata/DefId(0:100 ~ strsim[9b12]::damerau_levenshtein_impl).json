{
  "name": "strsim::damerau_levenshtein_impl",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:609:1:667:2",
  "doc": "",
  "code": [
    "fn damerau_levenshtein_impl<Iter1, Iter2>(s1: Iter1, len1: usize, s2: Iter2, len2: usize) -> usize",
    "where",
    "    Iter1: Iterator<Item = char> + Clone,",
    "    Iter2: Iterator<Item = char> + Clone,",
    "{",
    "    // The implementations is based on the paper",
    "    // `Linear space string correction algorithm using the Damerau-Levenshtein distance`",
    "    // from Chunchun Zhao and Sartaj Sahni",
    "    //",
    "    // It has a runtime complexity of `O(N*M)` and a memory usage of `O(N+M)`.",
    "    let max_val = max(len1, len2) as isize + 1;",
    "",
    "    let mut last_row_id = HybridGrowingHashmapChar::<RowId>::default();",
    "",
    "    let size = len2 + 2;",
    "    let mut fr = vec![max_val; size];",
    "    let mut r1 = vec![max_val; size];",
    "    let mut r: Vec<isize> = (max_val..max_val + 1)",
    "        .chain(0..(size - 1) as isize)",
    "        .collect();",
    "",
    "    for (i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1)) {",
    "        mem::swap(&mut r, &mut r1);",
    "        let mut last_col_id: isize = -1;",
    "        let mut last_i2l1 = r[1];",
    "        r[1] = i as isize;",
    "        let mut t = max_val;",
    "",
    "        for (j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2)) {",
    "            let diag = r1[j] + isize::from(ch1 != ch2);",
    "            let left = r[j] + 1;",
    "            let up = r1[j + 1] + 1;",
    "            let mut temp = min(diag, min(left, up));",
    "",
    "            if ch1 == ch2 {",
    "                last_col_id = j as isize; // last occurence of s1_i",
    "                fr[j + 1] = r1[j - 1]; // save H_k-1,j-2",
    "                t = last_i2l1; // save H_i-2,l-1",
    "            } else {",
    "                let k = last_row_id.get(ch2).val;",
    "                let l = last_col_id;",
    "",
    "                if j as isize - l == 1 {",
    "                    let transpose = fr[j + 1] + (i as isize - k);",
    "                    temp = min(temp, transpose);",
    "                } else if i as isize - k == 1 {",
    "                    let transpose = t + (j as isize - l);",
    "                    temp = min(temp, transpose);",
    "                }",
    "            }",
    "",
    "            last_i2l1 = r[j + 1];",
    "            r[j + 1] = temp;",
    "        }",
    "        last_row_id.get_mut(ch1).val = i as isize;",
    "    }",
    "",
    "    r[len2 + 1] as usize",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 5,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "true",
          "line": 637,
          "bound": null
        },
        {
          "cond": "ch1 == ch2",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "false",
          "line": 637,
          "bound": null
        },
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        }
      ],
      "ret": "r[len2 + 1] as usize",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        68,
        69,
        70,
        71,
        72,
        28,
        29,
        30,
        32,
        34,
        73,
        74,
        75,
        14,
        15,
        16,
        18,
        20,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "true",
          "line": 637,
          "bound": null
        },
        {
          "cond": "ch1 == ch2",
          "norm": null,
          "value": "false",
          "line": 643,
          "bound": null
        },
        {
          "cond": "j as isize - l == 1",
          "norm": "1 == j as isize - l",
          "value": "false",
          "line": 651,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "false",
          "line": 637,
          "bound": null
        },
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        }
      ],
      "ret": "r[len2 + 1] as usize",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        28,
        29,
        30,
        32,
        34,
        73,
        74,
        75,
        14,
        15,
        16,
        18,
        20,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "true",
          "line": 637,
          "bound": null
        },
        {
          "cond": "ch1 == ch2",
          "norm": null,
          "value": "false",
          "line": 643,
          "bound": null
        },
        {
          "cond": "j as isize - l == 1",
          "norm": "1 == j as isize - l",
          "value": "true",
          "line": 651,
          "bound": null
        },
        {
          "cond": "i as isize - k == 1",
          "norm": "1 == i as isize - k",
          "value": "false",
          "line": 654,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "false",
          "line": 637,
          "bound": null
        },
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        }
      ],
      "ret": "r[len2 + 1] as usize",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        50,
        51,
        52,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        28,
        29,
        30,
        32,
        34,
        73,
        74,
        75,
        14,
        15,
        16,
        18,
        20,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "true",
          "line": 637,
          "bound": null
        },
        {
          "cond": "ch1 == ch2",
          "norm": null,
          "value": "false",
          "line": 643,
          "bound": null
        },
        {
          "cond": "j as isize - l == 1",
          "norm": "1 == j as isize - l",
          "value": "true",
          "line": 651,
          "bound": null
        },
        {
          "cond": "i as isize - k == 1",
          "norm": "1 == i as isize - k",
          "value": "true",
          "line": 654,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "false",
          "line": 637,
          "bound": null
        },
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        }
      ],
      "ret": "r[len2 + 1] as usize",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        50,
        51,
        52,
        59,
        60,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        28,
        29,
        30,
        32,
        34,
        73,
        74,
        75,
        14,
        15,
        16,
        18,
        20,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "(j, ch2) in s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))",
          "norm": null,
          "value": "false",
          "line": 637,
          "bound": null
        },
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        }
      ],
      "ret": "r[len2 + 1] as usize",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        34,
        73,
        74,
        75,
        14,
        15,
        16,
        18,
        20,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(i, ch1) in s1.enumerate().map(|(i, ch1)| (i + 1, ch1))",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        }
      ],
      "ret": "r[len2 + 1] as usize",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}