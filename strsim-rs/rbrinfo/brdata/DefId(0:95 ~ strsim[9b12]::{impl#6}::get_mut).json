{
  "name": "strsim::{impl#6}::get_mut",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:586:5:594:6",
  "doc": "",
  "code": [
    "fn get_mut(&mut self, key: char) -> &mut ValueType {",
    "    let value = key as u32;",
    "    if value <= 255 {",
    "        let val_u8 = u8::try_from(value).expect(\"we check the bounds above\");",
    "        &mut self.extended_ascii[usize::from(val_u8)]",
    "    } else {",
    "        self.map.get_mut(value)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "value <= 255",
          "norm": "255 >= value",
          "value": "true",
          "line": 588,
          "bound": "value == 255"
        }
      ],
      "ret": "if value <= 255 {\n            let val_u8 = u8::try_from(value).expect(\"we check the bounds above\");\n            &mut self.extended_ascii[usize::from(val_u8)]\n        } else {\n            self.map.get_mut(value)\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "value <= 255",
          "norm": "255 >= value",
          "value": "false",
          "line": 588,
          "bound": null
        }
      ],
      "ret": "if value <= 255 {\n            let val_u8 = u8::try_from(value).expect(\"we check the bounds above\");\n            &mut self.extended_ascii[usize::from(val_u8)]\n        } else {\n            self.map.get_mut(value)\n        }",
      "path": [
        0,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}