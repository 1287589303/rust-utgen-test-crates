{
  "name": "strsim::osa_distance",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:300:1:337:2",
  "doc": "/// Like Levenshtein but allows for adjacent transpositions. Each substring can\n/// only be edited once.\n///\n/// ```\n/// use strsim::osa_distance;\n///\n/// assert_eq!(3, osa_distance(\"ab\", \"bca\"));\n/// ```\n",
  "code": [
    "pub fn osa_distance(a: &str, b: &str) -> usize {",
    "    let b_len = b.chars().count();",
    "    // 0..=b_len behaves like 0..b_len.saturating_add(1) which could be a different size",
    "    // this leads to significantly worse code gen when swapping the vectors below",
    "    let mut prev_two_distances: Vec<usize> = (0..b_len + 1).collect();",
    "    let mut prev_distances: Vec<usize> = (0..b_len + 1).collect();",
    "    let mut curr_distances: Vec<usize> = vec![0; b_len + 1];",
    "",
    "    let mut prev_a_char = char::MAX;",
    "    let mut prev_b_char = char::MAX;",
    "",
    "    for (i, a_char) in a.chars().enumerate() {",
    "        curr_distances[0] = i + 1;",
    "",
    "        for (j, b_char) in b.chars().enumerate() {",
    "            let cost = usize::from(a_char != b_char);",
    "            curr_distances[j + 1] = min(",
    "                curr_distances[j] + 1,",
    "                min(prev_distances[j + 1] + 1, prev_distances[j] + cost),",
    "            );",
    "            if i > 0 && j > 0 && a_char != b_char && a_char == prev_b_char && b_char == prev_a_char",
    "            {",
    "                curr_distances[j + 1] = min(curr_distances[j + 1], prev_two_distances[j - 1] + 1);",
    "            }",
    "",
    "            prev_b_char = b_char;",
    "        }",
    "",
    "        mem::swap(&mut prev_two_distances, &mut prev_distances);",
    "        mem::swap(&mut prev_distances, &mut curr_distances);",
    "        prev_a_char = a_char;",
    "    }",
    "",
    "    // access prev_distances instead of curr_distances since we swapped",
    "    // them above. In case a is empty this would still contain the correct value",
    "    // from initializing the last element to b_len",
    "    prev_distances[b_len]",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 7,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 311,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "j > 0",
          "norm": "0 < j",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "a_char != b_char",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "a_char == prev_b_char",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "b_char == prev_a_char",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 314,
          "bound": null
        },
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 311,
          "bound": null
        }
      ],
      "ret": "prev_distances[b_len]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        62,
        24,
        25,
        26,
        28,
        30,
        63,
        64,
        12,
        13,
        14,
        16,
        18,
        65,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 311,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "j > 0",
          "norm": "0 < j",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "a_char != b_char",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "a_char == prev_b_char",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "b_char == prev_a_char",
          "norm": null,
          "value": "false",
          "line": 320,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 314,
          "bound": null
        },
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 311,
          "bound": null
        }
      ],
      "ret": "prev_distances[b_len]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        56,
        61,
        62,
        24,
        25,
        26,
        28,
        30,
        63,
        64,
        12,
        13,
        14,
        16,
        18,
        65,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 311,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "j > 0",
          "norm": "0 < j",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "a_char != b_char",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "a_char == prev_b_char",
          "norm": null,
          "value": "false",
          "line": 320,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 314,
          "bound": null
        },
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 311,
          "bound": null
        }
      ],
      "ret": "prev_distances[b_len]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        57,
        61,
        62,
        24,
        25,
        26,
        28,
        30,
        63,
        64,
        12,
        13,
        14,
        16,
        18,
        65,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 311,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "j > 0",
          "norm": "0 < j",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "a_char != b_char",
          "norm": null,
          "value": "false",
          "line": 320,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 314,
          "bound": null
        },
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 311,
          "bound": null
        }
      ],
      "ret": "prev_distances[b_len]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        58,
        61,
        62,
        24,
        25,
        26,
        28,
        30,
        63,
        64,
        12,
        13,
        14,
        16,
        18,
        65,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 311,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "j > 0",
          "norm": "0 < j",
          "value": "false",
          "line": 320,
          "bound": "j == 0"
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 314,
          "bound": null
        },
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 311,
          "bound": null
        }
      ],
      "ret": "prev_distances[b_len]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        59,
        61,
        62,
        24,
        25,
        26,
        28,
        30,
        63,
        64,
        12,
        13,
        14,
        16,
        18,
        65,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 311,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 320,
          "bound": "i == 0"
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 314,
          "bound": null
        },
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 311,
          "bound": null
        }
      ],
      "ret": "prev_distances[b_len]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        60,
        61,
        62,
        24,
        25,
        26,
        28,
        30,
        63,
        64,
        12,
        13,
        14,
        16,
        18,
        65,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "true",
          "line": 311,
          "bound": null
        },
        {
          "cond": "(j, b_char) in b.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 314,
          "bound": null
        },
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 311,
          "bound": null
        }
      ],
      "ret": "prev_distances[b_len]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        30,
        63,
        64,
        12,
        13,
        14,
        16,
        18,
        65,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(i, a_char) in a.chars().enumerate()",
          "norm": null,
          "value": "false",
          "line": 311,
          "bound": null
        }
      ],
      "ret": "prev_distances[b_len]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        65,
        66,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}