{
  "name": "strsim::damerau_levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:677:1:679:2",
  "doc": "/// Like optimal string alignment, but substrings can be edited an unlimited\n/// number of times, and the triangle inequality holds.\n///\n/// ```\n/// use strsim::damerau_levenshtein;\n///\n/// assert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n/// ```\n",
  "code": [
    "pub fn damerau_levenshtein(a: &str, b: &str) -> usize {",
    "    damerau_levenshtein_impl(a.chars(), a.chars().count(), b.chars(), b.chars().count())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}