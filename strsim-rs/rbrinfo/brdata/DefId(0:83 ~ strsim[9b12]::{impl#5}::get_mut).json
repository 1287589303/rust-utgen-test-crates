{
  "name": "strsim::{impl#5}::get_mut",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:471:5:500:6",
  "doc": "",
  "code": [
    "fn get_mut(&mut self, key: u32) -> &mut ValueType {",
    "    if self.map.is_none() {",
    "        self.allocate();",
    "    }",
    "",
    "    let mut i = self.lookup(key);",
    "    if self",
    "        .map",
    "        .as_ref()",
    "        .expect(\"map should have been created above\")[i]",
    "        .value",
    "        == Default::default()",
    "    {",
    "        self.fill += 1;",
    "        // resize when 2/3 full",
    "        if self.fill * 3 >= (self.mask + 1) * 2 {",
    "            self.grow((self.used + 1) * 2);",
    "            i = self.lookup(key);",
    "        }",
    "",
    "        self.used += 1;",
    "    }",
    "",
    "    let elem = &mut self",
    "        .map",
    "        .as_mut()",
    "        .expect(\"map should have been created above\")[i];",
    "    elem.key = key;",
    "    &mut elem.value",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.map.is_none()",
          "norm": null,
          "value": "true",
          "line": 472,
          "bound": null
        },
        {
          "cond": "self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value\n            == Default::default()",
          "norm": "Default::default() == self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value",
          "value": "true",
          "line": 477,
          "bound": null
        },
        {
          "cond": "self.fill * 3 >= (self.mask + 1) * 2",
          "norm": "(self.mask + 1) * 2 <= self.fill * 3",
          "value": "true",
          "line": 486,
          "bound": "self.fill * 3 == (self.mask + 1) * 2"
        }
      ],
      "ret": "&mut elem.value",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.map.is_none()",
          "norm": null,
          "value": "true",
          "line": 472,
          "bound": null
        },
        {
          "cond": "self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value\n            == Default::default()",
          "norm": "Default::default() == self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value",
          "value": "true",
          "line": 477,
          "bound": null
        },
        {
          "cond": "self.fill * 3 >= (self.mask + 1) * 2",
          "norm": "(self.mask + 1) * 2 <= self.fill * 3",
          "value": "false",
          "line": 486,
          "bound": null
        }
      ],
      "ret": "&mut elem.value",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        22,
        23,
        24,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.map.is_none()",
          "norm": null,
          "value": "true",
          "line": 472,
          "bound": null
        },
        {
          "cond": "self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value\n            == Default::default()",
          "norm": "Default::default() == self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value",
          "value": "false",
          "line": 477,
          "bound": null
        }
      ],
      "ret": "&mut elem.value",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.map.is_none()",
          "norm": null,
          "value": "false",
          "line": 472,
          "bound": null
        },
        {
          "cond": "self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value\n            == Default::default()",
          "norm": "Default::default() == self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value",
          "value": "true",
          "line": 477,
          "bound": null
        },
        {
          "cond": "self.fill * 3 >= (self.mask + 1) * 2",
          "norm": "(self.mask + 1) * 2 <= self.fill * 3",
          "value": "true",
          "line": 486,
          "bound": "self.fill * 3 == (self.mask + 1) * 2"
        }
      ],
      "ret": "&mut elem.value",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.map.is_none()",
          "norm": null,
          "value": "false",
          "line": 472,
          "bound": null
        },
        {
          "cond": "self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value\n            == Default::default()",
          "norm": "Default::default() == self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value",
          "value": "true",
          "line": 477,
          "bound": null
        },
        {
          "cond": "self.fill * 3 >= (self.mask + 1) * 2",
          "norm": "(self.mask + 1) * 2 <= self.fill * 3",
          "value": "false",
          "line": 486,
          "bound": null
        }
      ],
      "ret": "&mut elem.value",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        22,
        23,
        24,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.map.is_none()",
          "norm": null,
          "value": "false",
          "line": 472,
          "bound": null
        },
        {
          "cond": "self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value\n            == Default::default()",
          "norm": "Default::default() == self\n            .map\n            .as_ref()\n            .expect(\"map should have been created above\")[i]\n            .value",
          "value": "false",
          "line": 477,
          "bound": null
        }
      ],
      "ret": "&mut elem.value",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}