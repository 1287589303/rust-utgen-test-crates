{
  "name": "strsim::normalized_damerau_levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:693:1:702:2",
  "doc": "/// Calculates a normalized score of the Damerau–Levenshtein algorithm between\n/// 0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n///\n/// ```\n/// use strsim::normalized_damerau_levenshtein;\n///\n/// assert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\n/// assert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\n/// assert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\n/// assert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\n/// assert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n/// ```\n",
  "code": [
    "pub fn normalized_damerau_levenshtein(a: &str, b: &str) -> f64 {",
    "    if a.is_empty() && b.is_empty() {",
    "        return 1.0;",
    "    }",
    "",
    "    let len1 = a.chars().count();",
    "    let len2 = b.chars().count();",
    "    let dist = damerau_levenshtein_impl(a.chars(), len1, b.chars(), len2);",
    "    1.0 - (dist as f64) / (max(len1, len2) as f64)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "a.is_empty()",
          "norm": null,
          "value": "true",
          "line": 694,
          "bound": null
        },
        {
          "cond": "b.is_empty()",
          "norm": null,
          "value": "true",
          "line": 694,
          "bound": null
        }
      ],
      "ret": "1.0",
      "path": [
        0,
        1,
        2,
        3,
        4,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "a.is_empty()",
          "norm": null,
          "value": "true",
          "line": 694,
          "bound": null
        },
        {
          "cond": "b.is_empty()",
          "norm": null,
          "value": "false",
          "line": 694,
          "bound": null
        }
      ],
      "ret": "1.0 - (dist as f64) / (max(len1, len2) as f64)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "a.is_empty()",
          "norm": null,
          "value": "false",
          "line": 694,
          "bound": null
        }
      ],
      "ret": "1.0 - (dist as f64) / (max(len1, len2) as f64)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}