{
  "name": "strsim::normalized_levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:285:1:290:2",
  "doc": "/// Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n/// 1.0 (inclusive), where 1.0 means the strings are the same.\n///\n/// ```\n/// use strsim::normalized_levenshtein;\n///\n/// assert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\n/// assert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\n/// assert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\n/// assert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\n/// assert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n/// ```\n",
  "code": [
    "pub fn normalized_levenshtein(a: &str, b: &str) -> f64 {",
    "    if a.is_empty() && b.is_empty() {",
    "        return 1.0;",
    "    }",
    "    1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "a.is_empty()",
          "norm": null,
          "value": "true",
          "line": 286,
          "bound": null
        },
        {
          "cond": "b.is_empty()",
          "norm": null,
          "value": "true",
          "line": 286,
          "bound": null
        }
      ],
      "ret": "1.0",
      "path": [
        0,
        1,
        2,
        3,
        4,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "a.is_empty()",
          "norm": null,
          "value": "true",
          "line": 286,
          "bound": null
        },
        {
          "cond": "b.is_empty()",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        }
      ],
      "ret": "1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "a.is_empty()",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        }
      ],
      "ret": "1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}