{
  "src/lib.rs:638:24:638:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "r1[j] + isize::from(ch1 != ch2)",
          "lhs": "r1[j]",
          "rhs": "isize::from(ch1 != ch2)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:626:39:626:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "max_val + 1",
          "lhs": "max_val",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:666:7:666:15": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "len2 + 1",
          "lhs": "len2",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:643:16:643:26": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "ch1 == ch2",
          "lhs": "ch1",
          "rhs": "ch2",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:651:20:651:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "j as isize - l",
          "lhs": "j as isize",
          "rhs": "l",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:627:19:627:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(size - 1)",
          "lhs": "size",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:661:15:661:20": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "j + 1",
          "lhs": "j",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:623:16:623:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "len2 + 2",
          "lhs": "len2",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:652:49:652:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(i as isize - k)",
          "lhs": "i as isize",
          "rhs": "k",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:630:21:630:64": [
    {
      "For": {
        "iter_var": "(i, ch1)",
        "iter_range": "s1.enumerate().map(|(i, ch1)| (i + 1, ch1))"
      }
    }
  ],
  "src/lib.rs:639:24:639:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "r[j] + 1",
          "lhs": "r[j]",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:640:25:640:30": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "j + 1",
          "lhs": "j",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:652:37:652:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "fr[j + 1] + (i as isize - k)",
          "lhs": "fr[j + 1]",
          "rhs": "(i as isize - k)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:619:19:619:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "max(len1, len2) as isize + 1",
          "lhs": "max(len1, len2) as isize",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:652:40:652:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "j + 1",
          "lhs": "j",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:645:20:645:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "j + 1",
          "lhs": "j",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:655:37:655:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "t + (j as isize - l)",
          "lhs": "t",
          "rhs": "(j as isize - l)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:638:44:638:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "ch1 != ch2",
          "lhs": "ch1",
          "rhs": "ch2",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:654:27:654:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "i as isize - k",
          "lhs": "i as isize",
          "rhs": "k",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:645:32:645:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "j - 1",
          "lhs": "j",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:655:41:655:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(j as isize - l)",
          "lhs": "j as isize",
          "rhs": "l",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/lib.rs:654:27:654:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "i as isize - k == 1",
          "lhs": "i as isize - k",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:660:27:660:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "j + 1",
          "lhs": "j",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:640:22:640:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "r1[j + 1] + 1",
          "lhs": "r1[j + 1]",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:651:20:651:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "j as isize - l == 1",
          "lhs": "j as isize - l",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/lib.rs:637:25:637:76": [
    {
      "For": {
        "iter_var": "(j, ch2)",
        "iter_range": "s2.clone().enumerate().map(|(j, ch2)| (j + 1, ch2))"
      }
    }
  ]
}