{
  "name": "strsim::{impl#2}::into_iter",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:172:5:174:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\"\");",
                "    let chars: Vec<_> = wrapper.into_iter().collect();",
                "    assert_eq!(chars, Vec::<char>::new());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\"A\");",
                "    let chars: Vec<_> = wrapper.into_iter().collect();",
                "    assert_eq!(chars, vec!['A']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\"Hello\");",
                "    let chars: Vec<_> = wrapper.into_iter().collect();",
                "    assert_eq!(chars, vec!['H', 'e', 'l', 'l', 'o']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\" \\t\\n\");",
                "    let chars: Vec<_> = wrapper.into_iter().collect();",
                "    assert_eq!(chars, vec![' ', '\\t', '\\n']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\"こんにちは\");",
                "    let chars: Vec<_> = wrapper.into_iter().collect();",
                "    assert_eq!(chars, vec!['こ', 'ん', 'に', 'ち', 'は']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}