{
  "name": "strsim::normalized_levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:285:1:290:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: a.is_empty() at line 286 is true\n",
        "precondition: b.is_empty() at line 286 is true\n",
        "expected return value/type: 1.0\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    assert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    assert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    assert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: a.is_empty() at line 286 is true\n",
        "precondition: b.is_empty() at line 286 is false\n",
        "expected return value/type: 1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"second\";",
                "    let expected = 1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64);",
                "    ",
                "    assert!((normalized_levenshtein(a, b) - expected).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"different\";",
                "    let expected = 1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64);",
                "    ",
                "    assert!((normalized_levenshtein(a, b) - expected).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"12345\";",
                "    let expected = 1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64);",
                "    ",
                "    assert!((normalized_levenshtein(a, b) - expected).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"\";",
                "    let b = \"@#$%^&*\";",
                "    let expected = 1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64);",
                "",
                "    assert!((normalized_levenshtein(a, b) - expected).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: a.is_empty() at line 286 is false\n",
        "expected return value/type: 1.0 - (levenshtein(a, b) as f64) / (a.chars().count().max(b.chars().count()) as f64)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"kitten\", \"sitting\");",
                "    assert!((result - 0.57142).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"\", \"\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"\", \"second\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"first\", \"\");",
                "    assert!(result.abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = normalized_levenshtein(\"string\", \"string\");",
                "    assert!((result - 1.0).abs() < 0.00001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}