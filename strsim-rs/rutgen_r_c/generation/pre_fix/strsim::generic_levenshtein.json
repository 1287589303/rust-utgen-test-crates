{
  "name": "strsim::generic_levenshtein",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:233:1:259:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (i, a_elem) in a.into_iter().enumerate() at line 245 is true\n",
        "precondition: (j, b_elem) in b.into_iter().enumerate() at line 249 is true\n",
        "precondition: (j, b_elem) in b.into_iter().enumerate() at line 249 is false\n",
        "precondition: (i, a_elem) in a.into_iter().enumerate() at line 245 is false\n",
        "expected return value/type: result\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = &[1, 2, 3];",
                "    let b = &[1, 2, 3, 4, 5, 6];",
                "    assert_eq!(3, generic_levenshtein(&a, &b));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = &[1, 2, 3];",
                "    let b: &[i32] = &[];",
                "    assert_eq!(3, generic_levenshtein(&a, &b));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: &[i32] = &[];",
                "    let b = &[1, 2, 3];",
                "    assert_eq!(3, generic_levenshtein(&a, &b));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = &[1, 2, 3];",
                "    let b = &[1, 2, 3];",
                "    assert_eq!(0, generic_levenshtein(&a, &b));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = &[1, 2, 3];",
                "    let b = &[1, 2, 4];",
                "    assert_eq!(1, generic_levenshtein(&a, &b));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: (i, a_elem) in a.into_iter().enumerate() at line 245 is false\n",
        "expected return value/type: result\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: Vec<u32> = vec![];",
                "    let b: Vec<u32> = vec![];",
                "    assert_eq!(generic_levenshtein(&a, &b), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: Vec<u32> = vec![];",
                "    let b: Vec<u32> = vec![1, 2, 3];",
                "    assert_eq!(generic_levenshtein(&a, &b), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: Vec<u32> = vec![1, 2, 3];",
                "    let b: Vec<u32> = vec![];",
                "    assert_eq!(generic_levenshtein(&a, &b), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: Vec<u32> = vec![1, 2, 3];",
                "    let b: Vec<u32> = vec![1, 2, 3];",
                "    assert_eq!(generic_levenshtein(&a, &b), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: Vec<u32> = vec![1, 2, 3];",
                "    let b: Vec<u32> = vec![1, 2, 4];",
                "    assert_eq!(generic_levenshtein(&a, &b), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: Vec<u32> = vec![1, 2, 3];",
                "    let b: Vec<u32> = vec![4, 5, 6];",
                "    assert_eq!(generic_levenshtein(&a, &b), 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: Vec<u32> = vec![1, 2];",
                "    let b: Vec<u32> = vec![1, 2, 3, 4];",
                "    assert_eq!(generic_levenshtein(&a, &b), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: Vec<u32> = vec![1, 2, 3, 4];",
                "    let b: Vec<u32> = vec![1, 2];",
                "    assert_eq!(generic_levenshtein(&a, &b), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}