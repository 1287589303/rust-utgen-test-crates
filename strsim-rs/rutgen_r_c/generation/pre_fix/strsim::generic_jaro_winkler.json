{
  "name": "strsim::generic_jaro_winkler",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:191:1:211:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: sim > 0.7 at line 199 is true\n",
        "expected return value/type: sim + 0.1 * prefix_length as f64 * (1.0 - sim)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let str_a = \"test\";",
                "    let str_b = \"te\";",
                "    let result = generic_jaro_winkler(&str_a, &str_b);",
                "    assert!((result - 0.79).abs() < 1e-5); // Expecting a value close to 0.79",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let str_a = \"prefix\";",
                "    let str_b = \"pre\";",
                "    let result = generic_jaro_winkler(&str_a, &str_b);",
                "    assert!((result - 0.83).abs() < 1e-5); // Expecting a value close to 0.83",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let str_a = \"example\";",
                "    let str_b = \"sample\";",
                "    let result = generic_jaro_winkler(&str_a, &str_b);",
                "    assert!((result - 0.75).abs() < 1e-5); // Expecting a value close to 0.75, without a strong common prefix",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: sim > 0.7 at line 199 is false, with bound sim == 0.7\n",
        "expected return value/type: sim\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let str1 = \"hello\";",
                "    let str2 = \"hallo\";",
                "    let result = generic_jaro_winkler(&str1, &str2);",
                "    assert_eq!(result, 0.7);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let str1 = \"example\";",
                "    let str2 = \"exemplar\";",
                "    let result = generic_jaro_winkler(&str1, &str2);",
                "    assert!(result > 0.7);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let str1 = \"\";",
                "    let str2 = \"\";",
                "    let result = generic_jaro_winkler(&str1, &str2);",
                "    assert_eq!(result, 1.0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let str1 = \"abc\";",
                "    let str2 = \"xyz\";",
                "    let result = generic_jaro_winkler(&str1, &str2);",
                "    assert_eq!(result, 0.0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let str1 = \"abcdef\";",
                "    let str2 = \"abcfgh\";",
                "    let result = generic_jaro_winkler(&str1, &str2);",
                "    assert!(result < 0.7);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}