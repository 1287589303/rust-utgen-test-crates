{
  "name": "strsim::{impl#7}::default",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:601:5:606:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: HybridGrowingHashmapChar {\n            map: GrowingHashmapChar::default(),\n            extended_ascii: [Default::default(); 256],\n        }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestValueType;",
                "",
                "    impl Default for TestValueType {",
                "        fn default() -> Self {",
                "            TestValueType",
                "        }",
                "    }",
                "",
                "    impl Clone for TestValueType {",
                "        fn clone(&self) -> Self {",
                "            TestValueType",
                "        }",
                "    }",
                "",
                "    impl Copy for TestValueType {}",
                "",
                "    impl PartialEq for TestValueType {",
                "        fn eq(&self, _: &Self) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let default_hybrid: HybridGrowingHashmapChar<TestValueType> = HybridGrowingHashmapChar::default();",
                "    ",
                "    // Check if the map is default",
                "    assert_eq!(default_hybrid.map.used, 0);",
                "    assert_eq!(default_hybrid.map.fill, 0);",
                "    assert_eq!(default_hybrid.map.mask, 0);",
                "    assert!(default_hybrid.map.map.is_none());",
                "    ",
                "    // Check if extended_ascii is filled with default values",
                "    for value in default_hybrid.extended_ascii.iter() {",
                "        assert_eq!(*value, TestValueType::default());",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}