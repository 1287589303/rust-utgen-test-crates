{
  "name": "strsim::{impl#5}::get",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:465:5:469:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
                "        used: 0,",
                "        fill: 0,",
                "        mask: 0,",
                "        map: None,",
                "    };",
                "    let result = hashmap.get(42);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
                "        used: 1,",
                "        fill: 1,",
                "        mask: 1,",
                "        map: Some(vec![GrowingHashmapMapElemChar { key: 42, value: 10 }]),",
                "    };",
                "    let result = hashmap.get(42);",
                "    assert_eq!(result, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut hashmap: GrowingHashmapChar<i32> = GrowingHashmapChar {",
                "        used: 1,",
                "        fill: 1,",
                "        mask: 1,",
                "        map: Some(vec![GrowingHashmapMapElemChar { key: 42, value: 10 }]),",
                "    };",
                "    let result = hashmap.get(99);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}