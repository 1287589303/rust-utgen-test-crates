{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/strsim-rs#strsim@0.11.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/strsim-rs/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strsim","src_path":"/home/abezbm/rust-utgen-test-crates/strsim-rs/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `RowId` doesn't implement `Debug`\n    --> src/lib.rs:1317:5\n     |\n1317 |     assert_eq!(row_id, RowId { val: -1 });\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `RowId` cannot be formatted using `{:?}`\n     |\n     = help: the trait `Debug` is not implemented for `RowId`\n     = note: add `#[derive(Debug)]` to `RowId` or manually `impl Debug for RowId`\n     = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider annotating `RowId` with `#[derive(Debug)]`\n     |\n417  + #[derive(Debug)]\n418  | struct RowId {\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Debug` is not implemented for `RowId`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"add `#[derive(Debug)]` to `RowId` or manually `impl Debug for RowId`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider annotating `RowId` with `#[derive(Debug)]`","rendered":null,"spans":[{"byte_end":12573,"byte_start":12573,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":417,"line_start":417,"suggested_replacement":"#[derive(Debug)]\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"struct RowId {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`RowId` doesn't implement `Debug`","spans":[{"byte_end":1629,"byte_start":1619,"column_end":70,"column_start":60,"expansion":{"def_site_span":{"byte_end":1092,"byte_start":1070,"column_end":23,"column_start":1,"expansion":null,"file_name":"/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","is_primary":false,"label":null,"line_end":36,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":1,"text":"macro_rules! assert_eq {"}]},"macro_decl_name":"assert_eq!","span":{"byte_end":38686,"byte_start":38649,"column_end":42,"column_start":5,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1317,"line_start":1317,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":5,"text":"    assert_eq!(row_id, RowId { val: -1 });"}]}},"file_name":"/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","is_primary":true,"label":"`RowId` cannot be formatted using `{:?}`","line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":70,"highlight_start":60,"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/strsim-rs#strsim@0.11.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/strsim-rs/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strsim","src_path":"/home/abezbm/rust-utgen-test-crates/strsim-rs/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `RowId` doesn't implement `Debug`\n    --> src/lib.rs:1317:5\n     |\n1317 |     assert_eq!(row_id, RowId { val: -1 });\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `RowId` cannot be formatted using `{:?}`\n     |\n     = help: the trait `Debug` is not implemented for `RowId`\n     = note: add `#[derive(Debug)]` to `RowId` or manually `impl Debug for RowId`\n     = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider annotating `RowId` with `#[derive(Debug)]`\n     |\n417  + #[derive(Debug)]\n418  | struct RowId {\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Debug` is not implemented for `RowId`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"add `#[derive(Debug)]` to `RowId` or manually `impl Debug for RowId`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider annotating `RowId` with `#[derive(Debug)]`","rendered":null,"spans":[{"byte_end":12573,"byte_start":12573,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":417,"line_start":417,"suggested_replacement":"#[derive(Debug)]\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"struct RowId {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`RowId` doesn't implement `Debug`","spans":[{"byte_end":1642,"byte_start":1631,"column_end":83,"column_start":72,"expansion":{"def_site_span":{"byte_end":1092,"byte_start":1070,"column_end":23,"column_start":1,"expansion":null,"file_name":"/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","is_primary":false,"label":null,"line_end":36,"line_start":36,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":1,"text":"macro_rules! assert_eq {"}]},"macro_decl_name":"assert_eq!","span":{"byte_end":38686,"byte_start":38649,"column_end":42,"column_start":5,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1317,"line_start":1317,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":5,"text":"    assert_eq!(row_id, RowId { val: -1 });"}]}},"file_name":"/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","is_primary":true,"label":"`RowId` cannot be formatted using `{:?}`","line_end":45,"line_start":45,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":83,"highlight_start":72,"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/strsim-rs#strsim@0.11.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/strsim-rs/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strsim","src_path":"/home/abezbm/rust-utgen-test-crates/strsim-rs/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 2 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 2 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/strsim-rs#strsim@0.11.1","manifest_path":"/home/abezbm/rust-utgen-test-crates/strsim-rs/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strsim","src_path":"/home/abezbm/rust-utgen-test-crates/strsim-rs/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about this error, try `rustc --explain E0277`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about this error, try `rustc --explain E0277`.","spans":[]}}
{"reason":"build-finished","success":false}
