{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is strsim\npub type HammingResult = Result<usize, StrSimError>;\nuse std::char;\nuse std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::convert::TryFrom;\nuse std::error::Error;\nuse std::fmt::{self, Display, Formatter};\nuse std::hash::Hash;\nuse std::mem;\nuse std::str::Chars;\npub fn osa_distance(a: &str, b: &str) -> usize {\n    let b_len = b.chars().count();\n    let mut prev_two_distances: Vec<usize> = (0..b_len + 1).collect();\n    let mut prev_distances: Vec<usize> = (0..b_len + 1).collect();\n    let mut curr_distances: Vec<usize> = vec![0; b_len + 1];\n    let mut prev_a_char = char::MAX;\n    let mut prev_b_char = char::MAX;\n    for (i, a_char) in a.chars().enumerate() {\n        curr_distances[0] = i + 1;\n        for (j, b_char) in b.chars().enumerate() {\n            let cost = usize::from(a_char != b_char);\n            curr_distances[j + 1] = min(\n                curr_distances[j] + 1,\n                min(prev_distances[j + 1] + 1, prev_distances[j] + cost),\n            );\n            if i > 0 && j > 0 && a_char != b_char && a_char == prev_b_char\n                && b_char == prev_a_char\n            {\n                curr_distances[j + 1] = min(\n                    curr_distances[j + 1],\n                    prev_two_distances[j - 1] + 1,\n                );\n            }\n            prev_b_char = b_char;\n        }\n        mem::swap(&mut prev_two_distances, &mut prev_distances);\n        mem::swap(&mut prev_distances, &mut curr_distances);\n        prev_a_char = a_char;\n    }\n    prev_distances[b_len]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like Levenshtein but allows for adjacent transpositions. Each substring can\n/// only be edited once.\n///\n/// ```\n/// use strsim::osa_distance;\n///\n/// assert_eq!(3, osa_distance(\"ab\", \"bca\"));\n/// ```\n300 pub fn osa_distance(a: &str, b: &str) -> usize {\n301     let b_len = b.chars().count();\n302     // 0..=b_len behaves like 0..b_len.saturating_add(1) which could be a different size\n303     // this leads to significantly worse code gen when swapping the vectors below\n304     let mut prev_two_distances: Vec<usize> = (0..b_len + 1).collect();\n305     let mut prev_distances: Vec<usize> = (0..b_len + 1).collect();\n306     let mut curr_distances: Vec<usize> = vec![0; b_len + 1];\n307 \n308     let mut prev_a_char = char::MAX;\n309     let mut prev_b_char = char::MAX;\n310 \n311     for (i, a_char) in a.chars().enumerate() {\n312         curr_distances[0] = i + 1;\n313 \n314         for (j, b_char) in b.chars().enumerate() {\n315             let cost = usize::from(a_char != b_char);\n316             curr_distances[j + 1] = min(\n317                 curr_distances[j] + 1,\n318                 min(prev_distances[j + 1] + 1, prev_distances[j] + cost),\n319             );\n320             if i > 0 && j > 0 && a_char != b_char && a_char == prev_b_char && b_char == prev_a_char\n321             {\n322                 curr_distances[j + 1] = min(curr_distances[j + 1], prev_two_distances[j - 1] + 1);\n323             }\n324 \n325             prev_b_char = b_char;\n326         }\n327 \n328         mem::swap(&mut prev_two_distances, &mut prev_distances);\n329         mem::swap(&mut prev_distances, &mut curr_distances);\n330         prev_a_char = a_char;\n331     }\n332 \n333     // access prev_distances instead of curr_distances since we swapped\n334     // them above. In case a is empty this would still contain the correct value\n335     // from initializing the last element to b_len\n336     prev_distances[b_len]\n337 }\n\n",
  "depend_pt": ""
}