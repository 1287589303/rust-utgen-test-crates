{
  "name": "strsim::{impl#5}::lookup",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:509:5:532:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestValue(i32);",
                "",
                "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
                "        used: 1,",
                "        fill: 2,",
                "        mask: 7,",
                "        map: Some(vec![",
                "            GrowingHashmapMapElemChar { key: 1, value: TestValue(42) },",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "        ]),",
                "    };",
                "",
                "    let result = hashmap.lookup(1);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestValue(i32);",
                "",
                "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
                "        used: 0,",
                "        fill: 2,",
                "        mask: 7,",
                "        map: Some(vec![",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar { key: 2, value: TestValue(13) },",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "        ]),",
                "    };",
                "",
                "    let result = hashmap.lookup(1);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestValue(i32);",
                "",
                "    let mut hashmap: GrowingHashmapChar<TestValue> = GrowingHashmapChar {",
                "        used: 1,",
                "        fill: 2,",
                "        mask: 7,",
                "        map: Some(vec![",
                "            GrowingHashmapMapElemChar { key: 4, value: TestValue(7) },",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar { key: 5, value: TestValue(14) },",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "            GrowingHashmapMapElemChar::default(),",
                "        ]),",
                "    };",
                "",
                "    let result = hashmap.lookup(5);",
                "    assert_eq!(result, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}