{
  "name": "strsim::{impl#2}::into_iter",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:172:5:174:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\"test\");",
                "    let collected_chars: Vec<char> = wrapper.into_iter().collect();",
                "    assert_eq!(collected_chars, vec!['t', 'e', 's', 't']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\"\");",
                "    let collected_chars: Vec<char> = wrapper.into_iter().collect();",
                "    assert_eq!(collected_chars, vec![]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\"a\");",
                "    let collected_chars: Vec<char> = wrapper.into_iter().collect();",
                "    assert_eq!(collected_chars, vec!['a']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let wrapper = StringWrapper(\"!@#\");",
                "    let collected_chars: Vec<char> = wrapper.into_iter().collect();",
                "    assert_eq!(collected_chars, vec!['!', '@', '#']);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}