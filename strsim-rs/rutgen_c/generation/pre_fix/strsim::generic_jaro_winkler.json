{
  "name": "strsim::generic_jaro_winkler",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:191:1:211:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"string\";",
                "    let b = \"string\";",
                "    let result = generic_jaro_winkler(&a, &b);",
                "    assert_eq!(result, 1.0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"string\";",
                "    let b = \"stting\";",
                "    let result = generic_jaro_winkler(&a, &b);",
                "    assert!(result > 0.7);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"string\";",
                "    let b = \"different\";",
                "    let result = generic_jaro_winkler(&a, &b);",
                "    assert!(result < 0.7);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"hello\";",
                "    let b = \"hell\";",
                "    let result = generic_jaro_winkler(&a, &b);",
                "    assert!(result > 0.7);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a: &str = \"\";",
                "    let b: &str = \"\";",
                "    let result = generic_jaro_winkler(&a, &b);",
                "    assert_eq!(result, 1.0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let a = \"nonempty\";",
                "    let b: &str = \"\";",
                "    let result = generic_jaro_winkler(&a, &b);",
                "    assert_eq!(result, 0.0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}