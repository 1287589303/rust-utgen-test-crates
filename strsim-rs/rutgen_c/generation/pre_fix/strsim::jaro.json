{
  "name": "strsim::jaro",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1307:2"
  },
  "visible": true,
  "loc": "src/lib.rs:186:1:188:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = jaro(\"example\", \"example\");",
                "    assert!((1.0 - result).abs() < 0.001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = jaro(\"abc\", \"def\");",
                "    assert!((0.0 - result).abs() < 0.001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = jaro(\"hello\", \"hallo\");",
                "    assert!((0.866 - result).abs() < 0.001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = jaro(\"\", \"nonempty\");",
                "    assert!((0.0 - result).abs() < 0.001);",
                "    let result = jaro(\"nonempty\", \"\");",
                "    assert!((0.0 - result).abs() < 0.001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = jaro(\"a\", \"a\");",
                "    assert!((1.0 - result).abs() < 0.001);",
                "    let result = jaro(\"a\", \"b\");",
                "    assert!((0.0 - result).abs() < 0.001);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}