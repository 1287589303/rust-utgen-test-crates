[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:357:17: 357:30 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [Elem]>::len(move _4) -> [return: bb1, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:358:17: 358:30 (#0),
                    scope: scope[1],
                },
                kind: _5 = core::slice::<impl [Elem]>::len(move _6) -> [return: bb2, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _3,
            _8 = Eq(move _9, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:360:8: 360:18 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _8) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _0 = _5,
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _5,
            _12 = Eq(move _13, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:363:8: 363:18 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [0: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _0 = _3,
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _3,
            _17 = AddWithOverflow(_16, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:367:17: 367:26 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, const 2_usize) -> [success: bb7, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = move (_17.0: usize),
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _3,
            _22 = AddWithOverflow(_21, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:368:33: 368:44 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _21, const 2_usize) -> [success: bb8, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = move (_22.0: usize),
            StorageDead(_21),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _5,
            _25 = AddWithOverflow(_24, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:368:47: 368:58 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", move _24, const 2_usize) -> [success: bb9, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = move (_25.0: usize),
            StorageDead(_24),
            _26 = MulWithOverflow(_20, _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:368:33: 368:58 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_26.1: bool), "attempt to compute `{} * {}`, which would overflow", move _20, move _23) -> [success: bb10, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = move (_26.0: usize),
            StorageDead(_23),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#10),
                    scope: scope[3],
                },
                kind: _18 = std::vec::from_elem::<usize>(const 0_usize, move _19) -> [return: bb11, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_27),
            StorageLive(_28),
            _28 = _3,
            StorageLive(_29),
            _29 = _5,
            _30 = AddWithOverflow(_28, _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:369:24: 369:37 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, move _29) -> [success: bb12, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = move (_30.0: usize),
            StorageDead(_29),
            StorageDead(_28),
            FakeRead(ForLet(None), _27),
            StorageLive(_31),
            _31 = _27,
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:370:14: 370:17 (#0),
                    scope: scope[5],
                },
                kind: _32 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _33, const 0_usize) -> [return: bb13, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            (*_32) = move _31,
            StorageDead(_31),
            StorageDead(_32),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _3,
            _39 = AddWithOverflow(_38, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:17: 372:28 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, const 1_usize) -> [success: bb14, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = move (_39.0: usize),
            StorageDead(_38),
            _36 = std::ops::Range::<usize> { start: const 0_usize, end: move _37 },
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:14: 372:28 (#67),
                    scope: scope[5],
                },
                kind: _35 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _36) -> [return: bb15, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            PlaceMention(_35),
            StorageLive(_40),
            _40 = move _35,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:5: 375:6 (#66),
                    scope: scope[6],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:5: 375:6 (#66),
                    scope: scope[6],
                },
                kind: falseUnwind -> [real: bb17, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &mut _40,
            _44 = &mut (*_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:14: 372:28 (#67),
                    scope: scope[6],
                },
                kind: _43 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _44) -> [return: bb18, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
            _46 = discriminant(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:14: 372:28 (#67),
                    scope: scope[6],
                },
                kind: switchInt(move _46) -> [0: bb20, 1: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:14: 372:28 (#67),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:5: 375:6 (#66),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            _48 = ((_43 as Some).0: usize),
            StorageLive(_49),
            _49 = _27,
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut _18,
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = _48,
            _55 = AddWithOverflow(_54, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:373:30: 373:35 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_55.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, const 1_usize) -> [success: bb23, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = const (),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_40),
            StorageDead(_35),
            StorageDead(_34),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = _5,
            _70 = AddWithOverflow(_69, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:17: 377:28 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", move _69, const 1_usize) -> [success: bb29, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = move (_55.0: usize),
            StorageDead(_54),
            StorageLive(_56),
            _56 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:373:19: 373:46 (#0),
                    scope: scope[7],
                },
                kind: _52 = flat_index(move _53, const 0_usize, move _56) -> [return: bb24, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:373:18: 373:47 (#0),
                    scope: scope[7],
                },
                kind: _50 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _51, move _52) -> [return: bb25, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            (*_50) = move _49,
            StorageDead(_49),
            StorageDead(_50),
            StorageLive(_57),
            _57 = _48,
            StorageLive(_58),
            StorageLive(_59),
            _59 = &mut _18,
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = _48,
            _63 = AddWithOverflow(_62, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:374:30: 374:35 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_63.1: bool), "attempt to compute `{} + {}`, which would overflow", move _62, const 1_usize) -> [success: bb26, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = move (_63.0: usize),
            StorageDead(_62),
            StorageLive(_64),
            _64 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:374:19: 374:46 (#0),
                    scope: scope[7],
                },
                kind: _60 = flat_index(move _61, const 1_usize, move _64) -> [return: bb27, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:374:18: 374:47 (#0),
                    scope: scope[7],
                },
                kind: _58 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _59, move _60) -> [return: bb28, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            (*_58) = move _57,
            StorageDead(_57),
            StorageDead(_58),
            _42 = const (),
            StorageDead(_48),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_42),
            _41 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:372:5: 375:6 (#66),
                    scope: scope[6],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _68 = move (_70.0: usize),
            StorageDead(_69),
            _67 = std::ops::Range::<usize> { start: const 0_usize, end: move _68 },
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:14: 377:28 (#70),
                    scope: scope[5],
                },
                kind: _66 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _67) -> [return: bb30, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            PlaceMention(_66),
            StorageLive(_71),
            _71 = move _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:5: 380:6 (#69),
                    scope: scope[8],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:5: 380:6 (#69),
                    scope: scope[8],
                },
                kind: falseUnwind -> [real: bb32, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            _75 = &mut _71,
            _74 = &mut (*_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:14: 377:28 (#70),
                    scope: scope[8],
                },
                kind: _73 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _74) -> [return: bb33, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            PlaceMention(_73),
            _76 = discriminant(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:14: 377:28 (#70),
                    scope: scope[8],
                },
                kind: switchInt(move _76) -> [0: bb35, 1: bb36, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:14: 377:28 (#70),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:5: 380:6 (#69),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb37, imaginary: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_78),
            _78 = ((_73 as Some).0: usize),
            StorageLive(_79),
            _79 = _27,
            StorageLive(_80),
            StorageLive(_81),
            _81 = &mut _18,
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            _84 = _78,
            _85 = AddWithOverflow(_84, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:378:33: 378:38 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_85.1: bool), "attempt to compute `{} + {}`, which would overflow", move _84, const 1_usize) -> [success: bb38, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _65 = const (),
            StorageDead(_75),
            StorageDead(_73),
            StorageDead(_72),
            StorageDead(_71),
            StorageDead(_66),
            StorageDead(_65),
            StorageLive(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:382:43: 382:69 (#0),
                    scope: scope[5],
                },
                kind: _95 = std::collections::HashMap::<Elem, usize>::with_capacity(const 64_usize) -> [return: bb44, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _83 = move (_85.0: usize),
            StorageDead(_84),
            StorageLive(_86),
            _86 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:378:19: 378:46 (#0),
                    scope: scope[9],
                },
                kind: _82 = flat_index(const 0_usize, move _83, move _86) -> [return: bb39, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:378:18: 378:47 (#0),
                    scope: scope[9],
                },
                kind: _80 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _81, move _82) -> [return: bb40, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            StorageDead(_81),
            (*_80) = move _79,
            StorageDead(_79),
            StorageDead(_80),
            StorageLive(_87),
            _87 = _78,
            StorageLive(_88),
            StorageLive(_89),
            _89 = &mut _18,
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            _92 = _78,
            _93 = AddWithOverflow(_92, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:379:33: 379:38 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_93.1: bool), "attempt to compute `{} + {}`, which would overflow", move _92, const 1_usize) -> [success: bb41, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _91 = move (_93.0: usize),
            StorageDead(_92),
            StorageLive(_94),
            _94 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:379:19: 379:46 (#0),
                    scope: scope[9],
                },
                kind: _90 = flat_index(const 1_usize, move _91, move _94) -> [return: bb42, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:379:18: 379:47 (#0),
                    scope: scope[9],
                },
                kind: _88 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _89, move _90) -> [return: bb43, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            (*_88) = move _87,
            StorageDead(_87),
            StorageDead(_88),
            _72 = const (),
            StorageDead(_78),
            StorageDead(_75),
            StorageDead(_73),
            StorageDead(_72),
            _41 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:377:5: 380:6 (#69),
                    scope: scope[8],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _95),
            AscribeUserType(_95, o, UserTypeProjection { base: UserType(2), projs: [] }),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = _3,
            _101 = AddWithOverflow(_100, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:17: 384:28 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_101.1: bool), "attempt to compute `{} + {}`, which would overflow", move _100, const 1_usize) -> [success: bb45, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _99 = move (_101.0: usize),
            StorageDead(_100),
            _98 = std::ops::Range::<usize> { start: const 1_usize, end: move _99 },
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:14: 384:28 (#73),
                    scope: scope[10],
                },
                kind: _97 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _98) -> [return: bb46, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            PlaceMention(_97),
            StorageLive(_102),
            _102 = move _97,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:5: 411:6 (#72),
                    scope: scope[11],
                },
                kind: goto -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:5: 411:6 (#72),
                    scope: scope[11],
                },
                kind: falseUnwind -> [real: bb48, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = &mut _102,
            _105 = &mut (*_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:14: 384:28 (#73),
                    scope: scope[11],
                },
                kind: _104 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _105) -> [return: bb49, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            PlaceMention(_104),
            _107 = discriminant(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:14: 384:28 (#73),
                    scope: scope[11],
                },
                kind: switchInt(move _107) -> [0: bb51, 1: bb52, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:14: 384:28 (#73),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:5: 411:6 (#72),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb53, imaginary: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_109),
            _109 = ((_104 as Some).0: usize),
            StorageLive(_110),
            _110 = const 0_usize,
            FakeRead(ForLet(None), _110),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            _115 = _5,
            _116 = AddWithOverflow(_115, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:21: 387:32 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_116.1: bool), "attempt to compute `{} + {}`, which would overflow", move _115, const 1_usize) -> [success: bb54, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _96 = const (),
            StorageDead(_106),
            StorageDead(_104),
            StorageDead(_103),
            StorageDead(_102),
            StorageDead(_97),
            StorageDead(_96),
            StorageLive(_236),
            StorageLive(_237),
            _237 = &_18,
            StorageLive(_238),
            StorageLive(_239),
            StorageLive(_240),
            _240 = _3,
            _241 = AddWithOverflow(_240, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:413:26: 413:35 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_241.1: bool), "attempt to compute `{} + {}`, which would overflow", move _240, const 1_usize) -> [success: bb111, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _114 = move (_116.0: usize),
            StorageDead(_115),
            _113 = std::ops::Range::<usize> { start: const 1_usize, end: move _114 },
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:18: 387:32 (#76),
                    scope: scope[13],
                },
                kind: _112 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _113) -> [return: bb55, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            PlaceMention(_112),
            StorageLive(_117),
            _117 = move _112,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:9: 408:10 (#75),
                    scope: scope[14],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:9: 408:10 (#75),
                    scope: scope[14],
                },
                kind: falseUnwind -> [real: bb57, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            StorageLive(_121),
            _121 = &mut _117,
            _120 = &mut (*_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:18: 387:32 (#76),
                    scope: scope[14],
                },
                kind: _119 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _120) -> [return: bb58, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            PlaceMention(_119),
            _122 = discriminant(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:18: 387:32 (#76),
                    scope: scope[14],
                },
                kind: switchInt(move _122) -> [0: bb60, 1: bb61, otherwise: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:18: 387:32 (#76),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:9: 408:10 (#75),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb62, imaginary: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_124),
            _124 = ((_119 as Some).0: usize),
            StorageLive(_125),
            StorageLive(_126),
            StorageLive(_127),
            _127 = &_95,
            StorageLive(_128),
            StorageLive(_129),
            StorageLive(_130),
            StorageLive(_131),
            _131 = _124,
            _132 = SubWithOverflow(_131, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:388:46: 388:51 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_132.1: bool), "attempt to compute `{} - {}`, which would overflow", move _131, const 1_usize) -> [success: bb63, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _111 = const (),
            StorageDead(_121),
            StorageDead(_119),
            StorageDead(_118),
            StorageDead(_117),
            StorageDead(_112),
            StorageDead(_111),
            StorageLive(_226),
            StorageLive(_227),
            _227 = &mut _95,
            StorageLive(_228),
            StorageLive(_229),
            StorageLive(_230),
            StorageLive(_231),
            _231 = _109,
            _232 = SubWithOverflow(_231, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:30: 410:35 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_232.1: bool), "attempt to compute `{} - {}`, which would overflow", move _231, const 1_usize) -> [success: bb107, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _130 = move (_132.0: usize),
            StorageDead(_131),
            _133 = Len((*_2)),
            _134 = Lt(_130, _133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:388:38: 388:52 (#0),
                    scope: scope[15],
                },
                kind: assert(move _134, "index out of bounds: the length is {} but the index is {}", move _133, _130) -> [success: bb64, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _129 = &(*_2)[_130],
            _128 = &(*_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:388:27: 388:53 (#0),
                    scope: scope[15],
                },
                kind: _126 = std::collections::HashMap::<Elem, usize>::get::<Elem>(move _127, move _128) -> [return: bb65, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageDead(_127),
            PlaceMention(_126),
            _135 = discriminant(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:388:21: 388:53 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _135) -> [0: bb68, 1: bb67, otherwise: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:388:27: 388:53 (#0),
                    scope: scope[15],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:389:17: 389:29 (#0),
                    scope: scope[15],
                },
                kind: falseEdge -> [real: bb69, imaginary: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _125 = const 0_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:390:25: 390:26 (#0),
                    scope: scope[15],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_136),
            _136 = (*((_126 as Some).0: &usize)),
            _125 = _136,
            StorageDead(_136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:389:37: 389:38 (#0),
                    scope: scope[15],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _125),
            StorageDead(_130),
            StorageDead(_129),
            StorageDead(_126),
            StorageLive(_137),
            StorageLive(_138),
            StorageLive(_139),
            StorageLive(_140),
            _140 = &_18,
            StorageLive(_141),
            StorageLive(_142),
            _142 = _109,
            StorageLive(_143),
            StorageLive(_144),
            _144 = _124,
            _145 = AddWithOverflow(_144, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:393:58: 393:63 (#0),
                    scope: scope[16],
                },
                kind: assert(!move (_145.1: bool), "attempt to compute `{} + {}`, which would overflow", move _144, const 1_usize) -> [success: bb71, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _143 = move (_145.0: usize),
            StorageDead(_144),
            StorageLive(_146),
            _146 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:393:44: 393:71 (#0),
                    scope: scope[16],
                },
                kind: _141 = flat_index(move _142, move _143, move _146) -> [return: bb72, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_146),
            StorageDead(_143),
            StorageDead(_142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:393:43: 393:72 (#0),
                    scope: scope[16],
                },
                kind: _139 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _140, move _141) -> [return: bb73, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _138 = (*_139),
            StorageDead(_141),
            StorageDead(_140),
            _147 = AddWithOverflow(_138, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:393:34: 393:76 (#0),
                    scope: scope[16],
                },
                kind: assert(!move (_147.1: bool), "attempt to compute `{} + {}`, which would overflow", move _138, const 1_usize) -> [success: bb74, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _137 = move (_147.0: usize),
            StorageDead(_138),
            FakeRead(ForLet(None), _137),
            StorageDead(_139),
            StorageLive(_148),
            StorageLive(_149),
            StorageLive(_150),
            StorageLive(_151),
            _151 = &_18,
            StorageLive(_152),
            StorageLive(_153),
            StorageLive(_154),
            _154 = _109,
            _155 = AddWithOverflow(_154, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:394:54: 394:59 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_155.1: bool), "attempt to compute `{} + {}`, which would overflow", move _154, const 1_usize) -> [success: bb75, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _153 = move (_155.0: usize),
            StorageDead(_154),
            StorageLive(_156),
            _156 = _124,
            StorageLive(_157),
            _157 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:394:43: 394:70 (#0),
                    scope: scope[18],
                },
                kind: _152 = flat_index(move _153, move _156, move _157) -> [return: bb76, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_156),
            StorageDead(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:394:42: 394:71 (#0),
                    scope: scope[18],
                },
                kind: _150 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _151, move _152) -> [return: bb77, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _149 = (*_150),
            StorageDead(_152),
            StorageDead(_151),
            _158 = AddWithOverflow(_149, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:394:33: 394:75 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_158.1: bool), "attempt to compute `{} + {}`, which would overflow", move _149, const 1_usize) -> [success: bb78, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _148 = move (_158.0: usize),
            StorageDead(_149),
            FakeRead(ForLet(None), _148),
            StorageDead(_150),
            StorageLive(_159),
            StorageLive(_160),
            StorageLive(_161),
            StorageLive(_162),
            StorageLive(_163),
            StorageLive(_164),
            _164 = &_18,
            StorageLive(_165),
            StorageLive(_166),
            _166 = _125,
            StorageLive(_167),
            _167 = _110,
            StorageLive(_168),
            _168 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:27: 396:51 (#0),
                    scope: scope[19],
                },
                kind: _165 = flat_index(move _166, move _167, move _168) -> [return: bb79, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
            StorageDead(_167),
            StorageDead(_166),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:26: 396:52 (#0),
                    scope: scope[19],
                },
                kind: _163 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _164, move _165) -> [return: bb80, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _162 = (*_163),
            StorageDead(_165),
            StorageDead(_164),
            StorageLive(_169),
            StorageLive(_170),
            StorageLive(_171),
            _171 = _109,
            StorageLive(_172),
            _172 = _125,
            _173 = SubWithOverflow(_171, _172),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:56: 396:61 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_173.1: bool), "attempt to compute `{} - {}`, which would overflow", move _171, move _172) -> [success: bb81, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _170 = move (_173.0: usize),
            StorageDead(_172),
            StorageDead(_171),
            _174 = SubWithOverflow(_170, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:55: 396:66 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_174.1: bool), "attempt to compute `{} - {}`, which would overflow", move _170, const 1_usize) -> [success: bb82, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _169 = move (_174.0: usize),
            StorageDead(_170),
            _175 = AddWithOverflow(_162, _169),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:17: 396:66 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_175.1: bool), "attempt to compute `{} + {}`, which would overflow", move _162, move _169) -> [success: bb83, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _161 = move (_175.0: usize),
            StorageDead(_169),
            StorageDead(_162),
            _176 = AddWithOverflow(_161, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:17: 396:70 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_176.1: bool), "attempt to compute `{} + {}`, which would overflow", move _161, const 1_usize) -> [success: bb84, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _160 = move (_176.0: usize),
            StorageDead(_161),
            StorageLive(_177),
            StorageLive(_178),
            StorageLive(_179),
            _179 = _124,
            StorageLive(_180),
            _180 = _110,
            _181 = SubWithOverflow(_179, _180),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:74: 396:80 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_181.1: bool), "attempt to compute `{} - {}`, which would overflow", move _179, move _180) -> [success: bb85, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _178 = move (_181.0: usize),
            StorageDead(_180),
            StorageDead(_179),
            _182 = SubWithOverflow(_178, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:73: 396:85 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_182.1: bool), "attempt to compute `{} - {}`, which would overflow", move _178, const 1_usize) -> [success: bb86, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _177 = move (_182.0: usize),
            StorageDead(_178),
            _183 = AddWithOverflow(_160, _177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:396:17: 396:85 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_183.1: bool), "attempt to compute `{} + {}`, which would overflow", move _160, move _177) -> [success: bb87, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _159 = move (_183.0: usize),
            StorageDead(_177),
            StorageDead(_160),
            FakeRead(ForLet(None), _159),
            StorageDead(_163),
            StorageLive(_184),
            StorageLive(_185),
            StorageLive(_186),
            StorageLive(_187),
            _187 = &_18,
            StorageLive(_188),
            StorageLive(_189),
            _189 = _109,
            StorageLive(_190),
            _190 = _124,
            StorageLive(_191),
            _191 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:398:51: 398:74 (#0),
                    scope: scope[20],
                },
                kind: _188 = flat_index(move _189, move _190, move _191) -> [return: bb88, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_191),
            StorageDead(_190),
            StorageDead(_189),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:398:50: 398:75 (#0),
                    scope: scope[20],
                },
                kind: _186 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _187, move _188) -> [return: bb89, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _185 = (*_186),
            StorageDead(_188),
            StorageDead(_187),
            _192 = AddWithOverflow(_185, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:398:41: 398:79 (#0),
                    scope: scope[20],
                },
                kind: assert(!move (_192.1: bool), "attempt to compute `{} + {}`, which would overflow", move _185, const 1_usize) -> [success: bb90, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _184 = move (_192.0: usize),
            StorageDead(_185),
            FakeRead(ForLet(None), _184),
            StorageDead(_186),
            StorageLive(_193),
            StorageLive(_194),
            StorageLive(_195),
            StorageLive(_196),
            StorageLive(_197),
            _197 = _109,
            _198 = SubWithOverflow(_197, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:399:24: 399:29 (#0),
                    scope: scope[21],
                },
                kind: assert(!move (_198.1: bool), "attempt to compute `{} - {}`, which would overflow", move _197, const 1_usize) -> [success: bb91, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _196 = move (_198.0: usize),
            StorageDead(_197),
            _199 = Len((*_1)),
            _200 = Lt(_196, _199),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:399:16: 399:30 (#0),
                    scope: scope[21],
                },
                kind: assert(move _200, "index out of bounds: the length is {} but the index is {}", move _199, _196) -> [success: bb92, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _195 = &(*_1)[_196],
            StorageLive(_201),
            StorageLive(_202),
            StorageLive(_203),
            _203 = _124,
            _204 = SubWithOverflow(_203, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:399:42: 399:47 (#0),
                    scope: scope[21],
                },
                kind: assert(!move (_204.1: bool), "attempt to compute `{} - {}`, which would overflow", move _203, const 1_usize) -> [success: bb93, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _202 = move (_204.0: usize),
            StorageDead(_203),
            _205 = Len((*_2)),
            _206 = Lt(_202, _205),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:399:34: 399:48 (#0),
                    scope: scope[21],
                },
                kind: assert(move _206, "index out of bounds: the length is {} but the index is {}", move _205, _202) -> [success: bb94, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _201 = &(*_2)[_202],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:399:16: 399:48 (#0),
                    scope: scope[21],
                },
                kind: _194 = <Elem as std::cmp::PartialEq>::eq(move _195, move _201) -> [return: bb95, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:399:16: 399:48 (#0),
                    scope: scope[21],
                },
                kind: switchInt(move _194) -> [0: bb98, otherwise: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            StorageDead(_201),
            StorageDead(_196),
            StorageDead(_195),
            StorageLive(_207),
            _207 = _124,
            _110 = move _207,
            StorageDead(_207),
            _208 = SubWithOverflow(_184, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:401:17: 401:39 (#0),
                    scope: scope[21],
                },
                kind: assert(!move (_208.1: bool), "attempt to compute `{} - {}`, which would overflow", _184, const 1_usize) -> [success: bb97, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _184 = move (_208.0: usize),
            _193 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:399:13: 402:14 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            StorageDead(_201),
            StorageDead(_196),
            StorageDead(_195),
            _193 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:399:13: 402:14 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_194),
            StorageDead(_193),
            StorageLive(_209),
            StorageLive(_210),
            _210 = _184,
            StorageLive(_211),
            StorageLive(_212),
            _212 = _137,
            StorageLive(_213),
            StorageLive(_214),
            _214 = _148,
            StorageLive(_215),
            _215 = _159,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:406:37: 406:75 (#0),
                    scope: scope[21],
                },
                kind: _213 = std::cmp::min::<usize>(move _214, move _215) -> [return: bb100, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_215),
            StorageDead(_214),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:406:17: 406:76 (#0),
                    scope: scope[21],
                },
                kind: _211 = std::cmp::min::<usize>(move _212, move _213) -> [return: bb101, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_213),
            StorageDead(_212),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:404:58: 407:14 (#0),
                    scope: scope[21],
                },
                kind: _209 = std::cmp::min::<usize>(move _210, move _211) -> [return: bb102, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_211),
            StorageDead(_210),
            StorageLive(_216),
            StorageLive(_217),
            _217 = &mut _18,
            StorageLive(_218),
            StorageLive(_219),
            StorageLive(_220),
            _220 = _109,
            _221 = AddWithOverflow(_220, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:404:34: 404:39 (#0),
                    scope: scope[21],
                },
                kind: assert(!move (_221.1: bool), "attempt to compute `{} + {}`, which would overflow", move _220, const 1_usize) -> [success: bb103, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _219 = move (_221.0: usize),
            StorageDead(_220),
            StorageLive(_222),
            StorageLive(_223),
            _223 = _124,
            _224 = AddWithOverflow(_223, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:404:41: 404:46 (#0),
                    scope: scope[21],
                },
                kind: assert(!move (_224.1: bool), "attempt to compute `{} + {}`, which would overflow", move _223, const 1_usize) -> [success: bb104, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _222 = move (_224.0: usize),
            StorageDead(_223),
            StorageLive(_225),
            _225 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:404:23: 404:54 (#0),
                    scope: scope[21],
                },
                kind: _218 = flat_index(move _219, move _222, move _225) -> [return: bb105, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_225),
            StorageDead(_222),
            StorageDead(_219),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:404:22: 404:55 (#0),
                    scope: scope[21],
                },
                kind: _216 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _217, move _218) -> [return: bb106, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_218),
            StorageDead(_217),
            (*_216) = move _209,
            StorageDead(_209),
            StorageDead(_216),
            _118 = const (),
            StorageDead(_184),
            StorageDead(_159),
            StorageDead(_148),
            StorageDead(_137),
            StorageDead(_125),
            StorageDead(_124),
            StorageDead(_121),
            StorageDead(_119),
            StorageDead(_118),
            _41 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:387:9: 408:10 (#75),
                    scope: scope[14],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _230 = move (_232.0: usize),
            StorageDead(_231),
            _233 = Len((*_1)),
            _234 = Lt(_230, _233),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:22: 410:36 (#0),
                    scope: scope[13],
                },
                kind: assert(move _234, "index out of bounds: the length is {} but the index is {}", move _233, _230) -> [success: bb108, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _229 = &(*_1)[_230],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:22: 410:44 (#0),
                    scope: scope[13],
                },
                kind: _228 = <Elem as std::clone::Clone>::clone(move _229) -> [return: bb109, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_229),
            StorageLive(_235),
            _235 = _109,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:9: 410:48 (#0),
                    scope: scope[13],
                },
                kind: _226 = std::collections::HashMap::<Elem, usize>::insert(move _227, move _228, move _235) -> [return: bb110, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_235),
            StorageDead(_228),
            StorageDead(_227),
            StorageDead(_230),
            StorageDead(_226),
            _103 = const (),
            StorageDead(_110),
            StorageDead(_109),
            StorageDead(_106),
            StorageDead(_104),
            StorageDead(_103),
            _41 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:384:5: 411:6 (#72),
                    scope: scope[11],
                },
                kind: goto -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _239 = move (_241.0: usize),
            StorageDead(_240),
            StorageLive(_242),
            StorageLive(_243),
            _243 = _5,
            _244 = AddWithOverflow(_243, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:413:37: 413:46 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_244.1: bool), "attempt to compute `{} + {}`, which would overflow", move _243, const 1_usize) -> [success: bb112, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _242 = move (_244.0: usize),
            StorageDead(_243),
            StorageLive(_245),
            _245 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:413:15: 413:54 (#0),
                    scope: scope[10],
                },
                kind: _238 = flat_index(move _239, move _242, move _245) -> [return: bb113, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_245),
            StorageDead(_242),
            StorageDead(_239),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:413:14: 413:55 (#0),
                    scope: scope[10],
                },
                kind: _236 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _237, move _238) -> [return: bb114, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (*_236),
            StorageDead(_238),
            StorageDead(_237),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:414:1: 414:2 (#0),
                    scope: scope[5],
                },
                kind: drop(_95) -> [return: bb115, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:414:1: 414:2 (#0),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb116, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_236),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:414:2: 414:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:414:2: 414:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:414:2: 414:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:410:47: 410:48 (#0),
                    scope: scope[13],
                },
                kind: drop(_228) -> [return: bb120, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:414:1: 414:2 (#0),
                    scope: scope[5],
                },
                kind: drop(_95) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:414:1: 414:2 (#0),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb122, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:353:1: 414:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:353:81: 353:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:353:51: 353:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:353:42: 353:49 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:353:42: 353:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [Elem/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:353:42: 353:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:353:69: 353:76 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:353:60: 353:67 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:353:60: 353:67 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [Elem/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:353:60: 353:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:357:17: 357:30 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:357:9: 357:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:357:9: 357:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Elem/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:357:17: 357:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:358:17: 358:30 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:358:9: 358:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:358:9: 358:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Elem/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:358:17: 358:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:360:5: 362:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:360:8: 360:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:360:8: 360:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:360:19: 362:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:363:5: 365:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:363:8: 363:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:363:8: 363:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:363:19: 365:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:367:17: 367:26 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:367:9: 367:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:367:9: 367:14 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:367:17: 367:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:367:17: 367:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#10),
                            ),
                        ),
                        pat_span: src/lib.rs:368:9: 368:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:9: 368:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:33: 368:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:33: 368:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:34: 368:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:33: 368:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:47: 368:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:48: 368:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:47: 368:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:368:33: 368:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:369:24: 369:37 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:369:9: 369:21 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:369:9: 369:21 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:369:24: 369:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:369:32: 369:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:369:24: 369:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:370:20: 370:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:370:14: 370:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:370:5: 370:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:5: 375:6 (#66),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:14: 372:28 (#67),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:14: 372:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:17: 372:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:18: 372:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:17: 372:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _35,
                                ),
                                src/lib.rs:372:14: 372:28 (#67),
                            ),
                        ),
                        pat_span: src/lib.rs:372:14: 372:28 (#67),
                    },
                ),
            ),
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:14: 372:28 (#67),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:353:1: 414:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:14: 372:28 (#67),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:14: 372:28 (#67),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:14: 372:28 (#67),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:14: 372:28 (#67),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:5: 375:6 (#66),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:5: 375:6 (#66),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                src/lib.rs:372:14: 372:28 (#67),
                            ),
                        ),
                        pat_span: src/lib.rs:372:9: 372:10 (#68),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:372:9: 372:10 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:373:50: 373:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:373:18: 373:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:373:9: 373:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:373:19: 373:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:373:30: 373:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:373:30: 373:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:373:30: 373:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:373:40: 373:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:374:50: 374:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:374:18: 374:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:374:9: 374:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:374:19: 374:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:374:30: 374:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:374:30: 374:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:374:30: 374:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:374:40: 374:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:5: 380:6 (#69),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:14: 377:28 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:14: 377:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:17: 377:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:18: 377:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:17: 377:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _66,
                                ),
                                src/lib.rs:377:14: 377:28 (#70),
                            ),
                        ),
                        pat_span: src/lib.rs:377:14: 377:28 (#70),
                    },
                ),
            ),
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:14: 377:28 (#70),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:14: 377:28 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:14: 377:28 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:14: 377:28 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:14: 377:28 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:5: 380:6 (#69),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:5: 380:6 (#69),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _73,
                                ),
                                src/lib.rs:377:14: 377:28 (#70),
                            ),
                        ),
                        pat_span: src/lib.rs:377:9: 377:10 (#71),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:377:9: 377:10 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:378:50: 378:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:378:18: 378:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:378:9: 378:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:378:19: 378:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:378:33: 378:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:378:33: 378:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:378:33: 378:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:378:40: 378:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:379:50: 379:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:379:18: 379:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:379:9: 379:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:379:19: 379:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:379:33: 379:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:379:33: 379:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:379:33: 379:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:379:40: 379:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:382:43: 382:69 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:382:9: 382:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::collections::HashMap<Elem/#0, usize, std::hash::RandomState>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/lib.rs:382:20: 382:40 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/lib.rs:382:9: 382:18 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:5: 411:6 (#72),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:14: 384:28 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:14: 384:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:17: 384:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:18: 384:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:17: 384:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _97,
                                ),
                                src/lib.rs:384:14: 384:28 (#73),
                            ),
                        ),
                        pat_span: src/lib.rs:384:14: 384:28 (#73),
                    },
                ),
            ),
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:14: 384:28 (#73),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:14: 384:28 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:14: 384:28 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:14: 384:28 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:14: 384:28 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:5: 411:6 (#72),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:5: 411:6 (#72),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                src/lib.rs:384:14: 384:28 (#73),
                            ),
                        ),
                        pat_span: src/lib.rs:384:9: 384:10 (#74),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:384:9: 384:10 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:385:22: 385:23 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:385:13: 385:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:385:13: 385:19 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:9: 408:10 (#75),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:18: 387:32 (#76),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:18: 387:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:21: 387:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:22: 387:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:21: 387:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _112,
                                ),
                                src/lib.rs:387:18: 387:32 (#76),
                            ),
                        ),
                        pat_span: src/lib.rs:387:18: 387:32 (#76),
                    },
                ),
            ),
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:18: 387:32 (#76),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:18: 387:32 (#76),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:18: 387:32 (#76),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:18: 387:32 (#76),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:18: 387:32 (#76),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:9: 408:10 (#75),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:9: 408:10 (#75),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _119,
                                ),
                                src/lib.rs:387:18: 387:32 (#76),
                            ),
                        ),
                        pat_span: src/lib.rs:387:13: 387:14 (#77),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:387:13: 387:14 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:388:21: 391:14 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:388:17: 388:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:17: 388:18 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:27: 388:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::collections::HashMap<Elem/#0, usize, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:27: 388:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:37: 388:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:37: 388:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:46: 388:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:46: 388:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:46: 388:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:38: 388:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:388:38: 388:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:389:17: 389:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _126,
                                ),
                                src/lib.rs:388:27: 388:53 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:389:17: 389:29 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:389:23: 389:28 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:393:34: 393:76 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:393:17: 393:31 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:17: 393:31 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:34: 393:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:43: 393:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:34: 393:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:44: 393:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:55: 393:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:58: 393:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:58: 393:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:58: 393:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:65: 393:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:393:34: 393:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:394:33: 394:75 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:394:17: 394:30 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:17: 394:30 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:33: 394:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:42: 394:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:33: 394:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:43: 394:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:54: 394:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:54: 394:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:54: 394:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:61: 394:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:64: 394:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:394:33: 394:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:396:17: 396:85 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:395:17: 395:35 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:395:17: 395:35 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:17: 396:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:17: 396:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:17: 396:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:26: 396:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:17: 396:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:27: 396:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:38: 396:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:41: 396:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:45: 396:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:55: 396:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:56: 396:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:56: 396:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:60: 396:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:56: 396:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:55: 396:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:17: 396:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:17: 396:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:73: 396:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:74: 396:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:74: 396:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:78: 396:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:74: 396:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:73: 396:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:396:17: 396:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:398:41: 398:79 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:398:17: 398:38 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:17: 398:38 (#0),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:41: 398:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:50: 398:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:41: 398:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:51: 398:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:62: 398:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:65: 398:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:68: 398:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:398:41: 398:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:13: 402:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:16: 399:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:16: 399:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:24: 399:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:24: 399:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:24: 399:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:16: 399:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:16: 399:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:34: 399:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:42: 399:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:42: 399:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:42: 399:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:34: 399:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:399:34: 399:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:400:22: 400:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:401:17: 401:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:58: 407:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:405:17: 405:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:406:17: 406:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:406:21: 406:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:406:37: 406:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:406:41: 406:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:406:56: 406:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:22: 404:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:13: 404:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:23: 404:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:34: 404:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:34: 404:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:34: 404:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:41: 404:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:41: 404:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:41: 404:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:404:48: 404:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:9: 410:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::collections::HashMap<Elem/#0, usize, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:9: 410:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Elem/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:22: 410:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:22: 410:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:30: 410:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:30: 410:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:30: 410:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:22: 410:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:22: 410:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:410:46: 410:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:413:5: 413:55 (#0),
                },
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:14: 413:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:413:5: 413:55 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:5: 413:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:413:5: 413:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:15: 413:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:413:5: 413:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:26: 413:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:413:5: 413:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:26: 413:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:26: 413:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:413:5: 413:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:37: 413:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:413:5: 413:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:37: 413:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:37: 413:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:413:5: 413:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:413:48: 413:53 (#0),
            scope: scope[0],
        },
    },
]