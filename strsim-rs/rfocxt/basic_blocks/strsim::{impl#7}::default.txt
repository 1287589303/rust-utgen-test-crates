[
    BasicBlockData {
        statements: [
            StorageLive(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:603:18: 603:47 (#0),
                    scope: scope[0],
                },
                kind: _1 = <GrowingHashmapChar<ValueType> as std::default::Default>::default() -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:604:30: 604:48 (#0),
                    scope: scope[0],
                },
                kind: _3 = <ValueType as std::default::Default>::default() -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = [move _3; 256],
            StorageDead(_3),
            _0 = HybridGrowingHashmapChar::<ValueType> { map: move _1, extended_ascii: move _2 },
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:605:9: 605:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:606:6: 606:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:605:9: 605:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:601:5: 606:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: HybridGrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:601:21: 601:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:603:18: 603:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [ValueType/#0; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:604:29: 604:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:602:9: 605:10 (#0),
                },
            ),
        ),
        ty: ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:604:30: 604:48 (#0),
            scope: scope[0],
        },
    },
]