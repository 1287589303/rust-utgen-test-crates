[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:197:15: 197:33 (#0),
                    scope: scope[0],
                },
                kind: _3 = generic_jaro::<'_, '_, Iter1, Iter2, Elem1, Elem2>(move _4, move _5) -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _3,
            _6 = Gt(move _7, const 0.69999999999999996f64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:199:8: 199:17 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb8, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:200:29: 201:25 (#0),
                    scope: scope[1],
                },
                kind: _12 = <&Iter1 as std::iter::IntoIterator>::into_iter(move _13) -> [return: bb3, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:200:29: 202:21 (#0),
                    scope: scope[1],
                },
                kind: _11 = <<&Iter1 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::take(move _12, const 4_usize) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_14),
            _14 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:200:29: 203:20 (#0),
                    scope: scope[1],
                },
                kind: _10 = <std::iter::Take<<&Iter1 as std::iter::IntoIterator>::IntoIter> as std::iter::Iterator>::zip::<&Iter2>(move _11, move _14) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageLive(_15),
            _15 = {closure@src/lib.rs:204:25: 204:43},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:200:29: 204:61 (#0),
                    scope: scope[1],
                },
                kind: _9 = <std::iter::Zip<std::iter::Take<<&Iter1 as std::iter::IntoIterator>::IntoIter>, <&Iter2 as std::iter::IntoIterator>::IntoIter> as std::iter::Iterator>::take_while::<{closure@src/lib.rs:204:25: 204:43}>(move _10, move _15) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:200:29: 205:21 (#0),
                    scope: scope[1],
                },
                kind: _8 = <std::iter::TakeWhile<std::iter::Zip<std::iter::Take<<&Iter1 as std::iter::IntoIterator>::IntoIter>, <&Iter2 as std::iter::IntoIterator>::IntoIter>, {closure@src/lib.rs:204:25: 204:43}> as std::iter::Iterator>::count(move _9) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_16),
            _16 = _3,
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _8,
            _19 = move _20 as f64 (IntToFloat),
            StorageDead(_20),
            _18 = Mul(const 0.10000000000000001f64, move _19),
            StorageDead(_19),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _3,
            _21 = Sub(const 1f64, move _22),
            StorageDead(_22),
            _17 = Mul(move _18, move _21),
            StorageDead(_21),
            StorageDead(_18),
            _0 = Add(move _16, move _17),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:199:5: 210:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _0 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:199:5: 210:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:211:2: 211:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:205:20: 205:21 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:204:60: 204:61 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:203:19: 203:20 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:202:20: 202:21 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:191:1: 211:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:191:96: 191:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:191:68: 191:77 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:191:65: 191:66 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:191:65: 191:66 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:191:65: 191:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:191:82: 191:91 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:191:79: 191:80 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:191:79: 191:80 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:191:79: 191:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:197:15: 197:33 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:197:9: 197:12 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:197:9: 197:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:197:28: 197:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:197:31: 197:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:199:5: 210:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:199:8: 199:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:199:5: 210:6 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:199:8: 199:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:200:29: 205:21 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:200:13: 200:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:200:13: 200:26 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::TakeWhile<std::iter::Zip<std::iter::Take<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>, Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>, Closure(DefId(0:52 ~ strsim[9b12]::generic_jaro_winkler::{closure#0}), ['{erased}, '{erased}, Iter1/#2, Iter2/#3, Elem1/#4, Elem2/#5, i16, Binder { value: extern "RustCall" fn((&'^0 (Elem1/#4, Elem2/#5),)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:200:29: 204:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Zip<std::iter::Take<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>, Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:200:29: 203:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Take<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:200:29: 202:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    &'{erased} Iter1/#2,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:200:29: 201:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:200:29: 200:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:203:18: 203:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:52 ~ strsim[9b12]::generic_jaro_winkler::{closure#0}),
            [
                '{erased},
                '{erased},
                Iter1/#2,
                Iter2/#3,
                Elem1/#4,
                Elem2/#5,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 (Elem1/#4, Elem2/#5),)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:204:25: 204:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:207:9: 207:55 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:207:9: 207:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:207:9: 207:55 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:207:15: 207:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:207:9: 207:55 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:207:15: 207:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:207:9: 207:55 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:207:21: 207:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:207:9: 207:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:207:21: 207:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:207:9: 207:55 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:207:44: 207:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:207:9: 207:55 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:207:51: 207:54 (#0),
            scope: scope[0],
        },
    },
]