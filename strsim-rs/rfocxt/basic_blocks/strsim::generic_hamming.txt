[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:31: 59:44 (#0),
                    scope: scope[0],
                },
                kind: _6 = <Iter1 as std::iter::IntoIterator>::into_iter(move _7) -> [return: bb1, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:46: 59:59 (#0),
                    scope: scope[0],
                },
                kind: _8 = <Iter2 as std::iter::IntoIterator>::into_iter(move _9) -> [return: bb2, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _5 = (move _6, move _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:59: 59:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb3, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:59: 59:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb4, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            StorageLive(_3),
            _3 = move (_5.0: <Iter1 as std::iter::IntoIterator>::IntoIter),
            StorageLive(_4),
            _4 = move (_5.1: <Iter2 as std::iter::IntoIterator>::IntoIter),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:60: 59:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb5, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_10),
            _10 = const 0_usize,
            FakeRead(ForLet(None), _10),
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:61:5: 71:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:61:5: 71:6 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:16: 62:26 (#0),
                    scope: scope[2],
                },
                kind: _14 = <<Iter1 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::next(move _15) -> [return: bb8, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:28: 62:38 (#0),
                    scope: scope[2],
                },
                kind: _16 = <<Iter2 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::next(move _17) -> [return: bb9, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _13 = (move _14, move _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:38: 62:39 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb10, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:38: 62:39 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb11, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _20 = discriminant((_13.0: std::option::Option<Elem1>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:9: 62:39 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _20) -> [0: bb15, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = StrSimError::DifferentLengthArgs,
            _0 = std::result::Result::<usize, StrSimError>::Err(move _30),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:69:18: 69:62 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = discriminant((_13.1: std::option::Option<Elem2>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:9: 62:39 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _18) -> [1: bb14, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:63:13: 63:31 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = discriminant((_13.1: std::option::Option<Elem2>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:9: 62:39 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb16, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:68:13: 68:25 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move (((_13.0: std::option::Option<Elem1>) as Some).0: Elem1),
            StorageLive(_22),
            _22 = move (((_13.1: std::option::Option<Elem2>) as Some).0: Elem2),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_21,
            StorageLive(_25),
            _25 = &_22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:64:20: 64:26 (#0),
                    scope: scope[3],
                },
                kind: _23 = <Elem1 as std::cmp::PartialEq<Elem2>>::ne(move _24, move _25) -> [return: bb18, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:64:20: 64:26 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _23) -> [0: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _26 = AddWithOverflow(_10, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:65:21: 65:31 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb20, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_26.0: usize),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:64:17: 66:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:64:17: 66:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:67:13: 67:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_22) -> [return: bb23, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:67:13: 67:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb24, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:71:5: 71:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb26, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = _10,
            _0 = std::result::Result::<usize, StrSimError>::Ok(move _28),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:68:29: 68:45 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:61:5: 71:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:71:5: 71:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb28, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb29, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb30, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb31, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb32, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:2: 72:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:67:13: 67:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_22) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:67:13: 67:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:38: 62:39 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:71:5: 71:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:62:38: 62:39 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:59: 59:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:60: 59:61 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:58: 59:59 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:59: 59:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:59:43: 59:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:72:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:53:1: 72:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<usize, StrSimError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:53:75: 53:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:53:55: 53:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:53:52: 53:53 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:53:52: 53:53 (#0),
                    },
                ),
            ),
        ),
        ty: Iter1/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:53:52: 53:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:53:65: 53:70 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:53:62: 53:63 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:53:62: 53:63 (#0),
                    },
                ),
            ),
        ),
        ty: Iter2/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:53:62: 53:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/lib.rs:59:30: 59:60 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:59:9: 59:27 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Iter1/#0,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:59:10: 59:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/lib.rs:59:30: 59:60 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:59:9: 59:27 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Iter2/#1,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:59:19: 59:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (Alias(Projection, AliasTy { args: [Iter1/#0], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }), Alias(Projection, AliasTy { args: [Iter2/#1], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:59:30: 59:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Iter1/#0,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:59:31: 59:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Iter1/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:59:31: 59:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Iter2/#1,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:59:46: 59:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Iter2/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:59:46: 59:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:60:21: 60:22 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:60:9: 60:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:60:9: 60:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:61:5: 71:6 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:61:5: 71:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:53:1: 72:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:62:9: 70:10 (#0),
                },
            ),
        ),
        ty: (std::option::Option<Elem1/#2>, std::option::Option<Elem2/#3>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:62:15: 62:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:62:9: 70:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<Elem1/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:62:16: 62:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:62:9: 70:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [Iter1/#0], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:62:16: 62:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:62:9: 70:10 (#0),
                },
            ),
        ),
        ty: std::option::Option<Elem2/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:62:28: 62:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:62:9: 70:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [Iter2/#1], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:62:28: 62:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:63:23: 63:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:68:20: 68:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:63:14: 63:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                src/lib.rs:62:15: 62:39 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:63:13: 63:31 (#0),
                    },
                ),
            ),
        ),
        ty: Elem1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:63:19: 63:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                src/lib.rs:62:15: 62:39 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:63:13: 63:31 (#0),
                    },
                ),
            ),
        ),
        ty: Elem2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:63:28: 63:29 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:64:17: 66:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:64:20: 64:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:64:17: 66:18 (#0),
                },
            ),
        ),
        ty: &'{erased} Elem1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:64:20: 64:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:64:17: 66:18 (#0),
                },
            ),
        ),
        ty: &'{erased} Elem2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:64:25: 64:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:65:21: 65:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:62:9: 70:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:68:29: 68:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:68:39: 68:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:62:9: 70:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:69:18: 69:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: StrSimError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:69:29: 69:61 (#0),
            scope: scope[0],
        },
    },
]