[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:239:17: 239:30 (#0),
                    scope: scope[0],
                },
                kind: _4 = <&Iter2 as std::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:239:17: 239:38 (#0),
                    scope: scope[0],
                },
                kind: _3 = <<&Iter2 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::count(move _4) -> [return: bb2, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _3,
            _10 = AddWithOverflow(_9, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:241:37: 241:46 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb3, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_10.0: usize),
            StorageDead(_9),
            _7 = std::ops::Range::<usize> { start: const 1_usize, end: move _8 },
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:241:33: 241:57 (#0),
                    scope: scope[1],
                },
                kind: _6 = <std::ops::Range<usize> as std::iter::Iterator>::collect::<std::vec::Vec<usize>>(move _7) -> [return: bb4, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            AscribeUserType(_6, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_11),
            _11 = _3,
            FakeRead(ForLet(None), _11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:24: 245:37 (#0),
                    scope: scope[3],
                },
                kind: _15 = <&Iter1 as std::iter::IntoIterator>::into_iter(move _16) -> [return: bb5, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:24: 245:49 (#0),
                    scope: scope[3],
                },
                kind: _14 = <<&Iter1 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::enumerate(move _15) -> [return: bb6, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:24: 245:49 (#51),
                    scope: scope[3],
                },
                kind: _13 = <std::iter::Enumerate<<&Iter1 as std::iter::IntoIterator>::IntoIter> as std::iter::IntoIterator>::into_iter(move _14) -> [return: bb7, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            StorageLive(_17),
            _17 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:5: 256:6 (#50),
                    scope: scope[4],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:5: 256:6 (#50),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb9, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut _17,
            _21 = &mut (*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:24: 245:49 (#51),
                    scope: scope[4],
                },
                kind: _20 = <std::iter::Enumerate<<&Iter1 as std::iter::IntoIterator>::IntoIter> as std::iter::Iterator>::next(move _21) -> [return: bb10, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            PlaceMention(_20),
            _23 = discriminant(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:24: 245:49 (#51),
                    scope: scope[4],
                },
                kind: switchInt(move _23) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:24: 245:49 (#51),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:5: 256:6 (#50),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = (((_20 as Some).0: (usize, Elem1)).0: usize),
            StorageLive(_26),
            _26 = move (((_20 as Some).0: (usize, Elem1)).1: Elem1),
            StorageLive(_27),
            _27 = _25,
            _28 = AddWithOverflow(_27, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:246:18: 246:23 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, const 1_usize) -> [success: bb15, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#50),
                    scope: scope[4],
                },
                kind: drop(_20) -> [return: bb42, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move (_28.0: usize),
            StorageDead(_27),
            StorageLive(_29),
            _29 = _25,
            FakeRead(ForLet(None), _29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:28: 249:41 (#0),
                    scope: scope[6],
                },
                kind: _32 = <&Iter2 as std::iter::IntoIterator>::into_iter(move _33) -> [return: bb16, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:28: 249:53 (#0),
                    scope: scope[6],
                },
                kind: _31 = <<&Iter2 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::enumerate(move _32) -> [return: bb17, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:28: 249:53 (#54),
                    scope: scope[6],
                },
                kind: _30 = <std::iter::Enumerate<<&Iter2 as std::iter::IntoIterator>::IntoIter> as std::iter::IntoIterator>::into_iter(move _31) -> [return: bb18, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            PlaceMention(_30),
            StorageLive(_34),
            _34 = move _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:9: 255:10 (#53),
                    scope: scope[7],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:9: 255:10 (#53),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb20, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &mut _34,
            _37 = &mut (*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:28: 249:53 (#54),
                    scope: scope[7],
                },
                kind: _36 = <std::iter::Enumerate<<&Iter2 as std::iter::IntoIterator>::IntoIter> as std::iter::Iterator>::next(move _37) -> [return: bb21, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            PlaceMention(_36),
            _39 = discriminant(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:28: 249:53 (#54),
                    scope: scope[7],
                },
                kind: switchInt(move _39) -> [0: bb23, 1: bb24, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:28: 249:53 (#54),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:9: 255:10 (#53),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = (((_36 as Some).0: (usize, Elem2)).0: usize),
            StorageLive(_42),
            _42 = move (((_36 as Some).0: (usize, Elem2)).1: Elem2),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &_26,
            StorageLive(_46),
            _46 = &_42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:250:36: 250:52 (#0),
                    scope: scope[8],
                },
                kind: _44 = <Elem1 as std::cmp::PartialEq<Elem2>>::ne(move _45, move _46) -> [return: bb26, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#53),
                    scope: scope[7],
                },
                kind: drop(_36) -> [return: bb37, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:250:24: 250:53 (#0),
                    scope: scope[8],
                },
                kind: _43 = <usize as std::convert::From<bool>>::from(move _44) -> [return: bb27, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            FakeRead(ForLet(None), _43),
            StorageLive(_47),
            StorageLive(_48),
            _48 = _29,
            StorageLive(_49),
            _49 = _43,
            _50 = AddWithOverflow(_48, _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:251:30: 251:47 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", move _48, move _49) -> [success: bb28, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _47 = move (_50.0: usize),
            StorageDead(_49),
            StorageDead(_48),
            FakeRead(ForLet(None), _47),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &_6,
            StorageLive(_54),
            _54 = _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:252:31: 252:34 (#0),
                    scope: scope[10],
                },
                kind: _52 = <std::vec::Vec<usize> as std::ops::Index<usize>>::index(move _53, move _54) -> [return: bb29, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _51 = (*_52),
            StorageDead(_54),
            StorageDead(_53),
            _29 = move _51,
            StorageDead(_51),
            StorageDead(_52),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _11,
            _58 = AddWithOverflow(_57, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:253:26: 253:36 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", move _57, const 1_usize) -> [success: bb30, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = move (_58.0: usize),
            StorageDead(_57),
            StorageLive(_59),
            StorageLive(_60),
            _60 = _47,
            StorageLive(_61),
            StorageLive(_62),
            _62 = _29,
            _63 = AddWithOverflow(_62, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:253:54: 253:68 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_63.1: bool), "attempt to compute `{} + {}`, which would overflow", move _62, const 1_usize) -> [success: bb31, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = move (_63.0: usize),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:253:38: 253:69 (#0),
                    scope: scope[10],
                },
                kind: _59 = std::cmp::min::<usize>(move _60, move _61) -> [return: bb32, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:253:22: 253:70 (#0),
                    scope: scope[10],
                },
                kind: _55 = std::cmp::min::<usize>(move _56, move _59) -> [return: bb33, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_56),
            _11 = move _55,
            StorageDead(_55),
            StorageLive(_64),
            _64 = _11,
            StorageLive(_65),
            StorageLive(_66),
            _66 = &mut _6,
            StorageLive(_67),
            _67 = _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:254:18: 254:21 (#0),
                    scope: scope[10],
                },
                kind: _65 = <std::vec::Vec<usize> as std::ops::IndexMut<usize>>::index_mut(move _66, move _67) -> [return: bb34, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            (*_65) = move _64,
            StorageDead(_64),
            StorageDead(_65),
            _35 = const (),
            StorageDead(_47),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_42) -> [return: bb35, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#53),
                    scope: scope[7],
                },
                kind: drop(_36) -> [return: bb36, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_36),
            StorageDead(_35),
            _18 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:9: 255:10 (#53),
                    scope: scope[7],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#53),
                    scope: scope[6],
                },
                kind: drop(_34) -> [return: bb38, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#53),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb39, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb40, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#50),
                    scope: scope[4],
                },
                kind: drop(_20) -> [return: bb41, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
            _18 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:5: 256:6 (#50),
                    scope: scope[4],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#50),
                    scope: scope[3],
                },
                kind: drop(_17) -> [return: bb43, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#50),
                    scope: scope[3],
                },
                kind: drop(_13) -> [return: bb44, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _0 = _11,
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:259:1: 259:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb45, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:259:2: 259:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_42) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#53),
                    scope: scope[7],
                },
                kind: drop(_36) -> [return: bb48, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#53),
                    scope: scope[6],
                },
                kind: drop(_34) -> [return: bb49, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:255:9: 255:10 (#53),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:52: 249:53 (#54),
                    scope: scope[6],
                },
                kind: drop(_31) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:249:52: 249:53 (#0),
                    scope: scope[6],
                },
                kind: drop(_32) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#50),
                    scope: scope[4],
                },
                kind: drop(_20) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#50),
                    scope: scope[3],
                },
                kind: drop(_17) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:256:5: 256:6 (#50),
                    scope: scope[3],
                },
                kind: drop(_13) -> [return: bb58, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:48: 245:49 (#51),
                    scope: scope[3],
                },
                kind: drop(_14) -> [return: bb58, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:245:48: 245:49 (#0),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb58, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:259:1: 259:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb60, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:239:37: 239:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb60, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:233:1: 259:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:233:95: 233:100 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:233:67: 233:76 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:233:64: 233:65 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:233:64: 233:65 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:233:64: 233:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:233:81: 233:90 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:233:78: 233:79 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:233:78: 233:79 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:233:78: 233:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:239:17: 239:38 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:239:9: 239:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:239:9: 239:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    &'{erased} Iter2/#3,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:239:17: 239:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:239:17: 239:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:241:33: 241:57 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:241:9: 241:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<usize, std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/lib.rs:241:20: 241:30 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/lib.rs:241:9: 241:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:241:33: 241:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:241:37: 241:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:241:37: 241:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:241:37: 241:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:243:22: 243:27 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:243:9: 243:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:243:9: 243:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:5: 256:6 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:49 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    &'{erased} Iter1/#2,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                src/lib.rs:245:24: 245:49 (#51),
                            ),
                        ),
                        pat_span: src/lib.rs:245:24: 245:49 (#51),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:49 (#51),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:233:1: 259:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:49 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, Elem1/#4)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:49 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:49 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:24: 245:49 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:5: 256:6 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:5: 256:6 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                src/lib.rs:245:24: 245:49 (#51),
                            ),
                        ),
                        pat_span: src/lib.rs:245:9: 245:20 (#52),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:10: 245:11 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                src/lib.rs:245:24: 245:49 (#51),
                            ),
                        ),
                        pat_span: src/lib.rs:245:9: 245:20 (#52),
                    },
                ),
            ),
        ),
        ty: Elem1/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:245:13: 245:19 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:246:18: 246:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:246:18: 246:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:247:30: 247:31 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:247:13: 247:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:247:13: 247:27 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:249:9: 255:10 (#53),
                },
            ),
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:53 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:249:9: 255:10 (#53),
                },
            ),
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:249:9: 255:10 (#53),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    &'{erased} Iter2/#3,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:249:9: 255:10 (#53),
                },
            ),
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _30,
                                ),
                                src/lib.rs:249:28: 249:53 (#54),
                            ),
                        ),
                        pat_span: src/lib.rs:249:28: 249:53 (#54),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:53 (#54),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:53 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, Elem2/#5)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:53 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:53 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:28: 249:53 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:9: 255:10 (#53),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:9: 255:10 (#53),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                src/lib.rs:249:28: 249:53 (#54),
                            ),
                        ),
                        pat_span: src/lib.rs:249:13: 249:24 (#55),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:14: 249:15 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                src/lib.rs:249:28: 249:53 (#54),
                            ),
                        ),
                        pat_span: src/lib.rs:249:13: 249:24 (#55),
                    },
                ),
            ),
        ),
        ty: Elem2/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:249:17: 249:23 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:250:24: 250:53 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:250:17: 250:21 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:250:17: 250:21 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:250:36: 250:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem1/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:250:36: 250:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem2/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:250:46: 250:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:251:30: 251:47 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:251:17: 251:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:251:17: 251:27 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:251:30: 251:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:251:43: 251:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:251:30: 251:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:252:26: 252:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:252:31: 252:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:252:26: 252:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:252:32: 252:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:22: 253:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:26: 253:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:26: 253:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:26: 253:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:38: 253:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:42: 253:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:54: 253:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:54: 253:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:253:54: 253:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:254:24: 254:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:254:18: 254:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<usize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:254:13: 254:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:254:19: 254:20 (#0),
            scope: scope[0],
        },
    },
]