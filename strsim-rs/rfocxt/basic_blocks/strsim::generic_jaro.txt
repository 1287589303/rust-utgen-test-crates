[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:96:17: 96:30 (#0),
                    scope: scope[0],
                },
                kind: _4 = <&Iter1 as std::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:96:17: 96:38 (#0),
                    scope: scope[0],
                },
                kind: _3 = <<&Iter1 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::count(move _4) -> [return: bb2, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:97:17: 97:30 (#0),
                    scope: scope[1],
                },
                kind: _7 = <&Iter2 as std::iter::IntoIterator>::into_iter(move _8) -> [return: bb3, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:97:17: 97:38 (#0),
                    scope: scope[1],
                },
                kind: _6 = <<&Iter2 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::count(move _7) -> [return: bb4, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _3,
            _10 = Eq(move _11, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:99:8: 99:18 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _10) -> [0: bb8, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _6,
            _12 = Eq(move _13, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:99:22: 99:32 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _0 = const 1f64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:100:9: 100:19 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            StorageLive(_16),
            _16 = _3,
            _15 = Eq(move _16, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:101:15: 101:25 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _15) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:101:40: 103:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _6,
            _17 = Eq(move _18, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:101:29: 101:39 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _17) -> [0: bb14, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:101:40: 103:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const 0f64,
            StorageDead(_17),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            _9 = const (),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _3,
            StorageLive(_23),
            _23 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:105:28: 105:45 (#0),
                    scope: scope[2],
                },
                kind: _21 = std::cmp::max::<usize>(move _22, move _23) -> [return: bb15, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            _24 = Eq(const 2_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:105:28: 105:49 (#0),
                    scope: scope[2],
                },
                kind: assert(!move _24, "attempt to divide `{}` by zero", _21) -> [success: bb16, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = Div(move _21, const 2_usize),
            StorageDead(_21),
            FakeRead(ForLet(None), _20),
            StorageLive(_25),
            StorageLive(_26),
            _26 = _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:106:20: 106:50 (#0),
                    scope: scope[3],
                },
                kind: _25 = core::num::<impl usize>::saturating_sub(move _26, const 1_usize) -> [return: bb17, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            _20 = move _25,
            StorageDead(_25),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _3,
            StorageLive(_30),
            _30 = _6,
            _31 = AddWithOverflow(_29, _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:109:40: 109:53 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _29, move _30) -> [success: bb18, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = move (_31.0: usize),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#8),
                    scope: scope[3],
                },
                kind: _27 = std::vec::from_elem::<bool>(const false, move _28) -> [return: bb19, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            FakeRead(ForLet(None), _27),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:110:30: 110:62 (#0),
                    scope: scope[4],
                },
                kind: _36 = <std::vec::Vec<bool> as std::ops::DerefMut>::deref_mut(move _37) -> [return: bb20, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = &mut (*_36),
            StorageDead(_37),
            StorageLive(_38),
            _38 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:110:30: 110:62 (#0),
                    scope: scope[4],
                },
                kind: _34 = core::slice::<impl [bool]>::split_at_mut(move _35, move _38) -> [return: bb21, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_35),
            PlaceMention(_34),
            StorageLive(_32),
            _32 = move (_34.0: &mut [bool]),
            StorageLive(_33),
            _33 = move (_34.1: &mut [bool]),
            StorageDead(_36),
            StorageDead(_34),
            StorageLive(_39),
            _39 = const 0_usize,
            FakeRead(ForLet(None), _39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:24: 114:37 (#0),
                    scope: scope[6],
                },
                kind: _43 = <&Iter1 as std::iter::IntoIterator>::into_iter(move _44) -> [return: bb22, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:24: 114:49 (#0),
                    scope: scope[6],
                },
                kind: _42 = <<&Iter1 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::enumerate(move _43) -> [return: bb23, unwind: bb143],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:24: 114:49 (#34),
                    scope: scope[6],
                },
                kind: _41 = <std::iter::Enumerate<<&Iter1 as std::iter::IntoIterator>::IntoIter> as std::iter::IntoIterator>::into_iter(move _42) -> [return: bb24, unwind: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            PlaceMention(_41),
            StorageLive(_45),
            _45 = move _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:5: 132:6 (#33),
                    scope: scope[7],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:5: 132:6 (#33),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb26, unwind: bb140],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &mut _45,
            _49 = &mut (*_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:24: 114:49 (#34),
                    scope: scope[7],
                },
                kind: _48 = <std::iter::Enumerate<<&Iter1 as std::iter::IntoIterator>::IntoIter> as std::iter::Iterator>::next(move _49) -> [return: bb27, unwind: bb140],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            PlaceMention(_48),
            _51 = discriminant(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:24: 114:49 (#34),
                    scope: scope[7],
                },
                kind: switchInt(move _51) -> [0: bb29, 1: bb30, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:24: 114:49 (#34),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:5: 132:6 (#33),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_53),
            _53 = (((_48 as Some).0: (usize, Elem1)).0: usize),
            StorageLive(_54),
            _54 = move (((_48 as Some).0: (usize, Elem1)).1: Elem1),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _53,
            StorageLive(_58),
            _58 = _20,
            _56 = Gt(move _57, move _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:116:28: 116:44 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _56) -> [0: bb34, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#33),
                    scope: scope[7],
                },
                kind: drop(_48) -> [return: bb71, unwind: bb140],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageLive(_59),
            _59 = _53,
            StorageLive(_60),
            _60 = _20,
            _61 = SubWithOverflow(_59, _60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:117:13: 117:29 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_61.1: bool), "attempt to compute `{} - {}`, which would overflow", move _59, move _60) -> [success: bb33, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = move (_61.0: usize),
            StorageDead(_60),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:116:25: 120:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            _55 = const 0_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:116:25: 120:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            FakeRead(ForLet(None), _55),
            StorageLive(_62),
            StorageLive(_63),
            _63 = _6,
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = _53,
            StorageLive(_67),
            _67 = _20,
            _68 = AddWithOverflow(_66, _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:122:36: 122:52 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_68.1: bool), "attempt to compute `{} + {}`, which would overflow", move _66, move _67) -> [success: bb36, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _65 = move (_68.0: usize),
            StorageDead(_67),
            StorageDead(_66),
            _69 = AddWithOverflow(_65, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:122:36: 122:56 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_69.1: bool), "attempt to compute `{} + {}`, which would overflow", move _65, const 1_usize) -> [success: bb37, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _64 = move (_69.0: usize),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:122:25: 122:57 (#0),
                    scope: scope[9],
                },
                kind: _62 = std::cmp::min::<usize>(move _63, move _64) -> [return: bb38, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
            FakeRead(ForLet(None), _62),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            _74 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:28: 124:41 (#0),
                    scope: scope[10],
                },
                kind: _73 = <&Iter2 as std::iter::IntoIterator>::into_iter(move _74) -> [return: bb39, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:28: 124:53 (#0),
                    scope: scope[10],
                },
                kind: _72 = <<&Iter2 as std::iter::IntoIterator>::IntoIter as std::iter::Iterator>::enumerate(move _73) -> [return: bb40, unwind: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageLive(_75),
            _75 = _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:28: 124:69 (#0),
                    scope: scope[10],
                },
                kind: _71 = <std::iter::Enumerate<<&Iter2 as std::iter::IntoIterator>::IntoIter> as std::iter::Iterator>::take(move _72, move _75) -> [return: bb41, unwind: bb136],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:28: 124:69 (#38),
                    scope: scope[10],
                },
                kind: _70 = <std::iter::Take<std::iter::Enumerate<<&Iter2 as std::iter::IntoIterator>::IntoIter>> as std::iter::IntoIterator>::into_iter(move _71) -> [return: bb42, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            PlaceMention(_70),
            StorageLive(_76),
            _76 = move _70,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:9: 131:10 (#37),
                    scope: scope[11],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:9: 131:10 (#37),
                    scope: scope[11],
                },
                kind: falseUnwind -> [real: bb44, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &mut _76,
            _79 = &mut (*_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:28: 124:69 (#38),
                    scope: scope[11],
                },
                kind: _78 = <std::iter::Take<std::iter::Enumerate<<&Iter2 as std::iter::IntoIterator>::IntoIter>> as std::iter::Iterator>::next(move _79) -> [return: bb45, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            PlaceMention(_78),
            _81 = discriminant(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:28: 124:69 (#38),
                    scope: scope[11],
                },
                kind: switchInt(move _81) -> [0: bb47, 1: bb48, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:28: 124:69 (#38),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:9: 131:10 (#37),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_83),
            _83 = (((_78 as Some).0: (usize, Elem2)).0: usize),
            StorageLive(_84),
            _84 = move (((_78 as Some).0: (usize, Elem2)).1: Elem2),
            StorageLive(_85),
            StorageLive(_86),
            _86 = _55,
            StorageLive(_87),
            _87 = _83,
            _85 = Le(move _86, move _87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:125:16: 125:30 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _85) -> [0: bb60, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _47 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:9: 131:10 (#37),
                    scope: scope[11],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &_54,
            StorageLive(_90),
            _90 = &_84,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:125:34: 125:50 (#0),
                    scope: scope[12],
                },
                kind: _88 = <Elem1 as std::cmp::PartialEq<Elem2>>::eq(move _89, move _90) -> [return: bb51, unwind: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:125:34: 125:50 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _88) -> [0: bb59, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            StorageLive(_91),
            StorageLive(_92),
            _92 = _83,
            _93 = Len((*_33)),
            _94 = Lt(_92, _93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:125:55: 125:65 (#0),
                    scope: scope[12],
                },
                kind: assert(move _94, "index out of bounds: the length is {} but the index is {}", move _93, _92) -> [success: bb53, unwind: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _91 = (*_33)[_92],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:125:55: 125:65 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _91) -> [0: bb54, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageLive(_96),
            _96 = _53,
            _97 = Len((*_32)),
            _98 = Lt(_96, _97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:126:17: 126:27 (#0),
                    scope: scope[12],
                },
                kind: assert(move _98, "index out of bounds: the length is {} but the index is {}", move _97, _96) -> [success: bb55, unwind: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_96] = const true,
            StorageDead(_96),
            StorageLive(_99),
            _99 = _83,
            _100 = Len((*_33)),
            _101 = Lt(_99, _100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:127:17: 127:27 (#0),
                    scope: scope[12],
                },
                kind: assert(move _101, "index out of bounds: the length is {} but the index is {}", move _100, _99) -> [success: bb56, unwind: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_33)[_99] = const true,
            StorageDead(_99),
            _102 = AddWithOverflow(_39, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:128:17: 128:29 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_102.1: bool), "attempt to compute `{} + {}`, which would overflow", _39, const 1_usize) -> [success: bb57, unwind: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = move (_102.0: usize),
            _47 = const (),
            StorageDead(_91),
            StorageDead(_88),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#0),
                    scope: scope[11],
                },
                kind: drop(_84) -> [return: bb64, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _77 = const (),
            StorageDead(_91),
            StorageDead(_88),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#0),
                    scope: scope[11],
                },
                kind: drop(_84) -> [return: bb62, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#37),
                    scope: scope[11],
                },
                kind: drop(_78) -> [return: bb63, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_78),
            StorageDead(_77),
            _46 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:9: 131:10 (#37),
                    scope: scope[11],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#37),
                    scope: scope[11],
                },
                kind: drop(_78) -> [return: bb66, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_78),
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#37),
                    scope: scope[10],
                },
                kind: drop(_76) -> [return: bb67, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#37),
                    scope: scope[10],
                },
                kind: drop(_70) -> [return: bb68, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_62),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_54) -> [return: bb69, unwind: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#33),
                    scope: scope[7],
                },
                kind: drop(_48) -> [return: bb70, unwind: bb140],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_48),
            StorageDead(_47),
            _46 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:5: 132:6 (#33),
                    scope: scope[7],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_48),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#33),
                    scope: scope[6],
                },
                kind: drop(_45) -> [return: bb72, unwind: bb141],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#33),
                    scope: scope[6],
                },
                kind: drop(_41) -> [return: bb73, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            StorageLive(_103),
            _103 = const 0_usize,
            FakeRead(ForLet(None), _103),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = _39,
            _105 = Ne(move _106, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:135:8: 135:20 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _105) -> [0: bb113, otherwise: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageLive(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = &(*_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:26: 136:40 (#0),
                    scope: scope[13],
                },
                kind: _108 = core::slice::<impl [bool]>::iter(move _109) -> [return: bb75, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageLive(_110),
            _110 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:26: 136:47 (#0),
                    scope: scope[13],
                },
                kind: _107 = <std::slice::Iter<'_, bool> as std::iter::Iterator>::zip::<&Iter2>(move _108, move _110) -> [return: bb76, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_110),
            StorageDead(_108),
            FakeRead(ForLet(None), _107),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            _114 = &(*_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:30: 137:44 (#0),
                    scope: scope[14],
                },
                kind: _113 = core::slice::<impl [bool]>::iter(move _114) -> [return: bb77, unwind: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            StorageLive(_115),
            _115 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:30: 137:51 (#0),
                    scope: scope[14],
                },
                kind: _112 = <std::slice::Iter<'_, bool> as std::iter::Iterator>::zip::<&Iter1>(move _113, move _115) -> [return: bb78, unwind: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:30: 137:51 (#43),
                    scope: scope[14],
                },
                kind: _111 = <std::iter::Zip<std::slice::Iter<'_, bool>, <&Iter1 as std::iter::IntoIterator>::IntoIter> as std::iter::IntoIterator>::into_iter(move _112) -> [return: bb79, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            PlaceMention(_111),
            StorageLive(_116),
            _116 = move _111,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:9: 152:10 (#42),
                    scope: scope[15],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:9: 152:10 (#42),
                    scope: scope[15],
                },
                kind: falseUnwind -> [real: bb81, unwind: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_117),
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = &mut _116,
            _119 = &mut (*_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:30: 137:51 (#43),
                    scope: scope[15],
                },
                kind: _118 = <std::iter::Zip<std::slice::Iter<'_, bool>, <&Iter1 as std::iter::IntoIterator>::IntoIter> as std::iter::Iterator>::next(move _119) -> [return: bb82, unwind: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            PlaceMention(_118),
            _121 = discriminant(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:30: 137:51 (#43),
                    scope: scope[15],
                },
                kind: switchInt(move _121) -> [0: bb84, 1: bb85, otherwise: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:30: 137:51 (#43),
                    scope: scope[15],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:9: 152:10 (#42),
                    scope: scope[15],
                },
                kind: falseEdge -> [real: bb86, imaginary: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_123),
            _123 = (((_118 as Some).0: (&bool, Elem1)).0: &bool),
            StorageLive(_124),
            _124 = move (((_118 as Some).0: (&bool, Elem1)).1: Elem1),
            StorageLive(_125),
            _125 = (*_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:138:16: 138:23 (#0),
                    scope: scope[16],
                },
                kind: switchInt(move _125) -> [0: bb105, otherwise: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _104 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#42),
                    scope: scope[15],
                },
                kind: drop(_118) -> [return: bb109, unwind: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:139:17: 150:18 (#0),
                    scope: scope[16],
                },
                kind: falseUnwind -> [real: bb88, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_126),
            StorageLive(_127),
            _127 = &mut _107,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:140:50: 140:63 (#0),
                    scope: scope[17],
                },
                kind: _126 = <std::iter::Zip<std::slice::Iter<'_, bool>, <&Iter2 as std::iter::IntoIterator>::IntoIter> as std::iter::Iterator>::next(move _127) -> [return: bb89, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            PlaceMention(_126),
            _128 = discriminant(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:140:28: 140:47 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _128) -> [1: bb90, otherwise: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:140:28: 140:47 (#0),
                    scope: scope[17],
                },
                kind: falseEdge -> [real: bb91, imaginary: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_129),
            _129 = (((_126 as Some).0: (&bool, Elem2)).0: &bool),
            StorageLive(_130),
            _130 = move (((_126 as Some).0: (&bool, Elem2)).1: Elem2),
            StorageLive(_132),
            StorageLive(_133),
            _133 = (*_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:141:29: 141:36 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _133) -> [0: bb102, otherwise: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _132 = const (),
            StorageDead(_133),
            StorageDead(_132),
            StorageLive(_135),
            StorageLive(_136),
            StorageLive(_137),
            _137 = &_124,
            StorageLive(_138),
            _138 = &_130,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:145:28: 145:38 (#0),
                    scope: scope[17],
                },
                kind: _136 = <Elem1 as std::cmp::PartialEq<Elem2>>::ne(move _137, move _138) -> [return: bb93, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:145:28: 145:38 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _136) -> [0: bb96, otherwise: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageDead(_137),
            _139 = AddWithOverflow(_103, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:146:29: 146:48 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_139.1: bool), "attempt to compute `{} + {}`, which would overflow", _103, const 1_usize) -> [success: bb95, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _103 = move (_139.0: usize),
            _135 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:145:25: 147:26 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageDead(_137),
            _135 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:145:25: 147:26 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
            _117 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:149:21: 149:22 (#0),
                    scope: scope[16],
                },
                kind: drop(_130) -> [return: bb100, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:150:17: 150:18 (#0),
                    scope: scope[16],
                },
                kind: drop(_126) -> [return: bb99, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:139:17: 150:18 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:150:17: 150:18 (#0),
                    scope: scope[16],
                },
                kind: drop(_126) -> [return: bb101, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:138:13: 151:14 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb106,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            StorageDead(_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:149:21: 149:22 (#0),
                    scope: scope[16],
                },
                kind: drop(_130) -> [return: bb103, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:150:17: 150:18 (#0),
                    scope: scope[16],
                },
                kind: drop(_126) -> [return: bb104, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[16],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _117 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:138:13: 151:14 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb106,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#0),
                    scope: scope[15],
                },
                kind: drop(_124) -> [return: bb107, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#42),
                    scope: scope[15],
                },
                kind: drop(_118) -> [return: bb108, unwind: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageDead(_118),
            StorageDead(_117),
            _46 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:9: 152:10 (#42),
                    scope: scope[15],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageDead(_118),
            StorageDead(_117),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#42),
                    scope: scope[14],
                },
                kind: drop(_116) -> [return: bb110, unwind: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#42),
                    scope: scope[14],
                },
                kind: drop(_111) -> [return: bb111, unwind: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:153:5: 153:6 (#0),
                    scope: scope[13],
                },
                kind: drop(_107) -> [return: bb112, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:135:5: 153:6 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb114,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            _104 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:135:5: 153:6 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb114,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageDead(_104),
            _140 = Eq(const 2_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:154:5: 154:24 (#0),
                    scope: scope[13],
                },
                kind: assert(!move _140, "attempt to divide `{}` by zero", _103) -> [success: bb115, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _103 = Div(_103, const 2_usize),
            StorageLive(_141),
            StorageLive(_142),
            _142 = _39,
            _141 = Eq(move _142, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:156:8: 156:20 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _141) -> [0: bb117, otherwise: bb116],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            _0 = const 0f64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:156:5: 163:6 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageLive(_143),
            StorageLive(_144),
            StorageLive(_145),
            StorageLive(_146),
            StorageLive(_147),
            _147 = _39,
            _146 = move _147 as f64 (IntToFloat),
            StorageDead(_147),
            StorageLive(_148),
            StorageLive(_149),
            _149 = _3,
            _148 = move _149 as f64 (IntToFloat),
            StorageDead(_149),
            _145 = Div(move _146, move _148),
            StorageDead(_148),
            StorageDead(_146),
            StorageLive(_150),
            StorageLive(_151),
            StorageLive(_152),
            _152 = _39,
            _151 = move _152 as f64 (IntToFloat),
            StorageDead(_152),
            StorageLive(_153),
            StorageLive(_154),
            _154 = _6,
            _153 = move _154 as f64 (IntToFloat),
            StorageDead(_154),
            _150 = Div(move _151, move _153),
            StorageDead(_153),
            StorageDead(_151),
            _144 = Add(move _145, move _150),
            StorageDead(_150),
            StorageDead(_145),
            StorageLive(_155),
            StorageLive(_156),
            StorageLive(_157),
            StorageLive(_158),
            _158 = _39,
            StorageLive(_159),
            _159 = _103,
            _160 = SubWithOverflow(_158, _159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:161:16: 161:42 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_160.1: bool), "attempt to compute `{} - {}`, which would overflow", move _158, move _159) -> [success: bb118, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _157 = move (_160.0: usize),
            StorageDead(_159),
            StorageDead(_158),
            _156 = move _157 as f64 (IntToFloat),
            StorageDead(_157),
            StorageLive(_161),
            StorageLive(_162),
            _162 = _39,
            _161 = move _162 as f64 (IntToFloat),
            StorageDead(_162),
            _155 = Div(move _156, move _161),
            StorageDead(_161),
            StorageDead(_156),
            _143 = Add(move _144, move _155),
            StorageDead(_155),
            StorageDead(_144),
            _0 = Div(move _143, const 3f64),
            StorageDead(_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:156:5: 163:6 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageDead(_103),
            StorageDead(_39),
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:164:1: 164:2 (#0),
                    scope: scope[3],
                },
                kind: drop(_27) -> [return: bb120, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_20),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:164:2: 164:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb122,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:164:2: 164:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb122,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:164:2: 164:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:149:21: 149:22 (#0),
                    scope: scope[16],
                },
                kind: drop(_130) -> [return: bb124, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:150:17: 150:18 (#0),
                    scope: scope[16],
                },
                kind: drop(_126) -> [return: bb125, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#0),
                    scope: scope[15],
                },
                kind: drop(_124) -> [return: bb126, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#42),
                    scope: scope[15],
                },
                kind: drop(_118) -> [return: bb127, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#42),
                    scope: scope[14],
                },
                kind: drop(_116) -> [return: bb128, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:152:9: 152:10 (#42),
                    scope: scope[14],
                },
                kind: drop(_111) -> [return: bb130, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:50: 137:51 (#43),
                    scope: scope[14],
                },
                kind: drop(_112) -> [return: bb130, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:153:5: 153:6 (#0),
                    scope: scope[13],
                },
                kind: drop(_107) -> [return: bb144, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#0),
                    scope: scope[11],
                },
                kind: drop(_84) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#37),
                    scope: scope[11],
                },
                kind: drop(_78) -> [return: bb133, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#37),
                    scope: scope[10],
                },
                kind: drop(_76) -> [return: bb134, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:131:9: 131:10 (#37),
                    scope: scope[10],
                },
                kind: drop(_70) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:68: 124:69 (#38),
                    scope: scope[10],
                },
                kind: drop(_71) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:68: 124:69 (#0),
                    scope: scope[10],
                },
                kind: drop(_72) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:124:52: 124:53 (#0),
                    scope: scope[10],
                },
                kind: drop(_73) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_54) -> [return: bb139, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#33),
                    scope: scope[7],
                },
                kind: drop(_48) -> [return: bb140, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#33),
                    scope: scope[6],
                },
                kind: drop(_45) -> [return: bb141, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:132:5: 132:6 (#33),
                    scope: scope[6],
                },
                kind: drop(_41) -> [return: bb144, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:48: 114:49 (#34),
                    scope: scope[6],
                },
                kind: drop(_42) -> [return: bb144, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:114:48: 114:49 (#0),
                    scope: scope[6],
                },
                kind: drop(_43) -> [return: bb144, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:164:1: 164:2 (#0),
                    scope: scope[3],
                },
                kind: drop(_27) -> [return: bb147, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:97:37: 97:38 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb147, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:96:37: 96:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb147, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:90:1: 164:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:90:88: 90:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:90:60: 90:69 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:90:57: 90:58 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:90:57: 90:58 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:90:57: 90:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:90:74: 90:83 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:90:71: 90:72 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:90:71: 90:72 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:90:71: 90:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:96:17: 96:38 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:96:9: 96:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:96:9: 96:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    &'{erased} Iter1/#2,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:96:17: 96:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:96:17: 96:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:97:17: 97:38 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:97:9: 97:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:97:9: 97:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    &'{erased} Iter2/#3,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:97:17: 97:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:97:17: 97:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:5: 103:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:8: 99:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:8: 99:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:22: 99:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:22: 99:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:99:33: 101:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:101:15: 101:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:101:15: 101:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:101:29: 101:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:101:29: 101:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:101:40: 103:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:105:28: 105:49 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:105:9: 105:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:105:9: 105:25 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:105:28: 105:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:105:32: 105:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:105:39: 105:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:105:28: 105:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:106:20: 106:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:106:20: 106:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#8),
                            ),
                        ),
                        pat_span: src/lib.rs:109:9: 109:25 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<bool, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:109:9: 109:25 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:109:40: 109:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:109:40: 109:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:109:48: 109:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:109:40: 109:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                src/lib.rs:110:30: 110:62 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:110:9: 110:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:110:10: 110:17 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                src/lib.rs:110:30: 110:62 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:110:9: 110:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:110:19: 110:26 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut [bool], &'{erased} mut [bool]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:110:30: 110:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:110:30: 110:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:110:30: 110:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<bool, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:110:30: 110:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:110:56: 110:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:112:23: 112:30 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:112:9: 112:20 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:112:9: 112:20 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:5: 132:6 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:49 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    &'{erased} Iter1/#2,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                src/lib.rs:114:24: 114:49 (#34),
                            ),
                        ),
                        pat_span: src/lib.rs:114:24: 114:49 (#34),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:49 (#34),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:90:1: 164:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:49 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, Elem1/#4)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:49 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:49 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:24: 114:49 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:5: 132:6 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:5: 132:6 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _48,
                                ),
                                src/lib.rs:114:24: 114:49 (#34),
                            ),
                        ),
                        pat_span: src/lib.rs:114:9: 114:20 (#35),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:10: 114:11 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _48,
                                ),
                                src/lib.rs:114:24: 114:49 (#34),
                            ),
                        ),
                        pat_span: src/lib.rs:114:9: 114:20 (#35),
                    },
                ),
            ),
        ),
        ty: Elem1/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:114:13: 114:19 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:116:25: 120:10 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:116:13: 116:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:116:13: 116:22 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:116:28: 116:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:116:28: 116:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:116:32: 116:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:117:13: 117:29 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:117:13: 117:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:117:13: 117:29 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:117:17: 117:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:117:13: 117:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:122:25: 122:57 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:122:13: 122:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:122:13: 122:22 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:122:29: 122:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:122:36: 122:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:122:36: 122:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:122:36: 122:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:122:40: 122:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:122:36: 122:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:122:36: 122:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:124:9: 131:10 (#37),
                },
            ),
        ),
        ty: std::iter::Take<std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:69 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:124:9: 131:10 (#37),
                },
            ),
        ),
        ty: std::iter::Take<std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:124:9: 131:10 (#37),
                },
            ),
        ),
        ty: std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:124:9: 131:10 (#37),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    &'{erased} Iter2/#3,
                ],
                def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:124:9: 131:10 (#37),
                },
            ),
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:124:9: 131:10 (#37),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:59: 124:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _70,
                                ),
                                src/lib.rs:124:28: 124:69 (#38),
                            ),
                        ),
                        pat_span: src/lib.rs:124:28: 124:69 (#38),
                    },
                ),
            ),
        ),
        ty: std::iter::Take<std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:69 (#38),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:69 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, Elem2/#5)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:69 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Take<std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:69 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Take<std::iter::Enumerate<Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:28: 124:69 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:9: 131:10 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:9: 131:10 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                src/lib.rs:124:28: 124:69 (#38),
                            ),
                        ),
                        pat_span: src/lib.rs:124:13: 124:24 (#39),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:14: 124:15 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                src/lib.rs:124:28: 124:69 (#38),
                            ),
                        ),
                        pat_span: src/lib.rs:124:13: 124:24 (#39),
                    },
                ),
            ),
        ),
        ty: Elem2/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:124:17: 124:23 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:16: 125:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:16: 125:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:29: 125:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:34: 125:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: &'{erased} Elem1/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:34: 125:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: &'{erased} Elem2/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:44: 125:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:55: 125:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:63: 125:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:55: 125:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:55: 125:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:125:13: 130:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:125:66: 130:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:126:25: 126:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:126:17: 126:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:126:17: 126:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:127:25: 127:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:127:17: 127:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:127:17: 127:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:128:17: 128:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:134:30: 134:37 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:134:9: 134:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:134:9: 134:27 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:135:5: 153:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:135:8: 135:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:135:8: 135:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:136:26: 136:47 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:136:13: 136:23 (#0),
                    },
                ),
            ),
        ),
        ty: std::iter::Zip<std::slice::Iter<'{erased}, bool>, Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:136:13: 136:23 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:136:26: 136:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:136:26: 136:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter2/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:136:45: 136:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:137:9: 152:10 (#42),
                },
            ),
        ),
        ty: std::iter::Zip<std::slice::Iter<'{erased}, bool>, Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:51 (#43),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:137:9: 152:10 (#42),
                },
            ),
        ),
        ty: std::iter::Zip<std::slice::Iter<'{erased}, bool>, Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:137:9: 152:10 (#42),
                },
            ),
        ),
        ty: std::slice::Iter<'{erased}, bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:137:9: 152:10 (#42),
                },
            ),
        ),
        ty: &'{erased} [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:137:9: 152:10 (#42),
                },
            ),
        ),
        ty: &'{erased} Iter1/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:49: 137:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _111,
                                ),
                                src/lib.rs:137:30: 137:51 (#43),
                            ),
                        ),
                        pat_span: src/lib.rs:137:30: 137:51 (#43),
                    },
                ),
            ),
        ),
        ty: std::iter::Zip<std::slice::Iter<'{erased}, bool>, Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:51 (#43),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:51 (#43),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(&'{erased} bool, Elem1/#4)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:51 (#43),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Zip<std::slice::Iter<'{erased}, bool>, Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:51 (#43),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Zip<std::slice::Iter<'{erased}, bool>, Alias(Projection, AliasTy { args: [&'{erased} Iter1/#2], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:30: 137:51 (#43),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:9: 152:10 (#42),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:9: 152:10 (#42),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _118,
                                ),
                                src/lib.rs:137:30: 137:51 (#43),
                            ),
                        ),
                        pat_span: src/lib.rs:137:13: 137:26 (#44),
                    },
                ),
            ),
        ),
        ty: &'{erased} bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:14: 137:20 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _118,
                                ),
                                src/lib.rs:137:30: 137:51 (#43),
                            ),
                        ),
                        pat_span: src/lib.rs:137:13: 137:26 (#44),
                    },
                ),
            ),
        ),
        ty: Elem1/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:137:22: 137:25 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:138:13: 151:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:138:16: 138:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:140:21: 149:22 (#0),
                },
            ),
        ),
        ty: std::option::Option<(&'{erased} bool, Elem2/#5)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:140:50: 140:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:140:21: 149:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::iter::Zip<std::slice::Iter<'{erased}, bool>, Alias(Projection, AliasTy { args: [&'{erased} Iter2/#3], def_id: DefId(2:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:140:50: 140:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:140:28: 140:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _126,
                                ),
                                src/lib.rs:140:50: 140:63 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:140:28: 140:47 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:140:34: 140:40 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _126,
                                ),
                                src/lib.rs:140:50: 140:63 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:140:28: 140:47 (#0),
                    },
                ),
            ),
        ),
        ty: Elem2/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:140:42: 140:45 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:140:21: 149:22 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:140:64: 149:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:141:25: 143:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:141:29: 141:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:141:37: 143:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:145:25: 147:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:145:28: 145:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem1/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:145:28: 145:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Elem2/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:145:35: 145:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:146:29: 146:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:154:5: 154:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:156:5: 163:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:156:8: 156:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:156:5: 163:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:156:8: 156:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:159:9: 161:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:159:10: 160:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:159:10: 159:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:159:11: 159:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:159:11: 159:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:159:28: 159:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:159:28: 159:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:160:15: 160:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:160:16: 160:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:160:16: 160:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:160:33: 160:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:160:33: 160:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:161:15: 161:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:161:16: 161:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:161:16: 161:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:161:17: 161:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:161:27: 161:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:161:16: 161:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:161:52: 161:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:159:9: 162:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:161:52: 161:59 (#0),
            scope: scope[0],
        },
    },
]