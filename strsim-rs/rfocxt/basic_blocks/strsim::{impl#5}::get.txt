[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:466:9: 467:22 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::option::Option::<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::as_ref(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            _5 = {closure@src/lib.rs:468:26: 468:28},
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
            StorageLive(_8),
            _8 = &_2,
            _6 = {closure@src/lib.rs:468:49: 468:54} { self: move _7, key: move _8 },
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:466:9: 468:83 (#0),
                    scope: scope[0],
                },
                kind: _0 = std::option::Option::<&std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::map_or_else::<ValueType, {closure@src/lib.rs:468:26: 468:28}, {closure@src/lib.rs:468:49: 468:54}>(move _3, move _5, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:469:6: 469:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:465:5: 469:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:465:32: 465:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:465:12: 465:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:465:24: 465:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:465:19: 465:22 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:465:19: 465:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:465:19: 465:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:466:9: 468:83 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:466:9: 467:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:466:9: 468:83 (#0),
                },
            ),
        ),
        ty: &'{erased} std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:466:9: 466:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:466:9: 468:83 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:81 ~ strsim[9b12]::{impl#5}::get::{closure#0}),
            [
                ValueType/#0,
                i32,
                Binder { value: extern "RustCall" fn(()) -> ValueType/#0, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:468:26: 468:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:466:9: 468:83 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:82 ~ strsim[9b12]::{impl#5}::get::{closure#1}),
            [
                ValueType/#0,
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,)) -> ValueType/#0, bound_vars: [] },
                (&'{erased} GrowingHashmapChar<ValueType/#0>, &'{erased} u32),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:468:49: 468:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:466:9: 468:83 (#0),
                },
            ),
        ),
        ty: &'{erased} GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:468:49: 468:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:466:9: 468:83 (#0),
                },
            ),
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:468:49: 468:82 (#0),
            scope: scope[0],
        },
    },
]