[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:725:21: 725:30 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::str::<impl str>::chars(move _6) -> [return: bb1, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = {closure@src/lib.rs:725:38: 725:42},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:725:21: 725:67 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::str::Chars<'_> as std::iter::Iterator>::filter::<{closure@src/lib.rs:725:38: 725:42}>(move _5, move _7) -> [return: bb2, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:725:21: 725:77 (#0),
                    scope: scope[0],
                },
                kind: _3 = <std::iter::Filter<std::str::Chars<'_>, {closure@src/lib.rs:725:38: 725:42}> as std::iter::Iterator>::collect::<std::string::String>(move _4) -> [return: bb3, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            AscribeUserType(_3, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:726:21: 726:30 (#0),
                    scope: scope[1],
                },
                kind: _10 = core::str::<impl str>::chars(move _11) -> [return: bb4, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_12),
            _12 = {closure@src/lib.rs:726:38: 726:42},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:726:21: 726:67 (#0),
                    scope: scope[1],
                },
                kind: _9 = <std::str::Chars<'_> as std::iter::Iterator>::filter::<{closure@src/lib.rs:726:38: 726:42}>(move _10, move _12) -> [return: bb5, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:726:21: 726:77 (#0),
                    scope: scope[1],
                },
                kind: _8 = <std::iter::Filter<std::str::Chars<'_>, {closure@src/lib.rs:726:38: 726:42}> as std::iter::Iterator>::collect::<std::string::String>(move _9) -> [return: bb6, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            AscribeUserType(_8, o, UserTypeProjection { base: UserType(3), projs: [] }),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_3,
            StorageLive(_16),
            _16 = &_8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:728:8: 728:14 (#0),
                    scope: scope[2],
                },
                kind: _14 = <std::string::String as std::cmp::PartialEq>::eq(move _15, move _16) -> [return: bb7, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:728:8: 728:14 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _14) -> [0: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            _0 = const 1f64,
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            _13 = const (),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:732:8: 732:15 (#0),
                    scope: scope[2],
                },
                kind: _20 = std::string::String::len(move _21) -> [return: bb10, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _19 = Lt(move _20, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:732:8: 732:19 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:732:35: 734:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:732:23: 732:30 (#0),
                    scope: scope[2],
                },
                kind: _23 = std::string::String::len(move _24) -> [return: bb13, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _22 = Lt(move _23, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:732:23: 732:34 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _22) -> [0: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:732:35: 734:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const 0f64,
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            _18 = const (),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:736:55: 736:69 (#0),
                    scope: scope[2],
                },
                kind: _26 = std::collections::HashMap::<(char, char), usize>::new() -> [return: bb17, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _26),
            AscribeUserType(_26, o, UserTypeProjection { base: UserType(6), projs: [] }),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &_3,
            _32 = &(*_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:27: 738:29 (#0),
                    scope: scope[3],
                },
                kind: _31 = <std::string::String as std::ops::Deref>::deref(move _32) -> [return: bb18, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = &(*_31),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:19: 738:30 (#0),
                    scope: scope[3],
                },
                kind: _29 = bigrams(move _30) -> [return: bb19, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:19: 738:30 (#107),
                    scope: scope[3],
                },
                kind: _28 = <impl std::iter::Iterator<Item = (char, char)> + '_ as std::iter::IntoIterator>::into_iter(move _29) -> [return: bb20, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            PlaceMention(_28),
            StorageLive(_34),
            _34 = move _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:5: 740:6 (#106),
                    scope: scope[4],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:5: 740:6 (#106),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb22, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut _34,
            _38 = &mut (*_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:19: 738:30 (#107),
                    scope: scope[4],
                },
                kind: _37 = <impl std::iter::Iterator<Item = (char, char)> + '_ as std::iter::Iterator>::next(move _38) -> [return: bb23, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            PlaceMention(_37),
            _40 = discriminant(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:19: 738:30 (#107),
                    scope: scope[4],
                },
                kind: switchInt(move _40) -> [0: bb25, 1: bb26, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:19: 738:30 (#107),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:5: 740:6 (#106),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = ((_37 as Some).0: (char, char)),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &mut _26,
            StorageLive(_46),
            _46 = _42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:739:10: 739:33 (#0),
                    scope: scope[5],
                },
                kind: _44 = std::collections::HashMap::<(char, char), usize>::entry(move _45, move _46) -> [return: bb28, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = const (),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:740:5: 740:6 (#106),
                    scope: scope[3],
                },
                kind: drop(_34) -> [return: bb31, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:739:10: 739:46 (#0),
                    scope: scope[5],
                },
                kind: _43 = std::collections::hash_map::Entry::<'_, (char, char), usize>::or_insert(move _44, const 0_usize) -> [return: bb29, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _47 = AddWithOverflow((*_43), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:739:9: 739:51 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_43), const 1_usize) -> [success: bb30, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_43) = move (_47.0: usize),
            StorageDead(_43),
            _36 = const (),
            StorageDead(_42),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
            _35 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:5: 740:6 (#106),
                    scope: scope[4],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:740:5: 740:6 (#106),
                    scope: scope[3],
                },
                kind: drop(_28) -> [return: bb32, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_48),
            _48 = const 0_usize,
            FakeRead(ForLet(None), _48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &_8,
            _54 = &(*_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:27: 744:29 (#0),
                    scope: scope[6],
                },
                kind: _53 = <std::string::String as std::ops::Deref>::deref(move _54) -> [return: bb33, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = &(*_53),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:19: 744:30 (#0),
                    scope: scope[6],
                },
                kind: _51 = bigrams(move _52) -> [return: bb34, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:19: 744:30 (#110),
                    scope: scope[6],
                },
                kind: _50 = <impl std::iter::Iterator<Item = (char, char)> + '_ as std::iter::IntoIterator>::into_iter(move _51) -> [return: bb35, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            PlaceMention(_50),
            StorageLive(_56),
            _56 = move _50,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:5: 751:6 (#109),
                    scope: scope[7],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:5: 751:6 (#109),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb37, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut _56,
            _59 = &mut (*_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:19: 744:30 (#110),
                    scope: scope[7],
                },
                kind: _58 = <impl std::iter::Iterator<Item = (char, char)> + '_ as std::iter::Iterator>::next(move _59) -> [return: bb38, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            PlaceMention(_58),
            _61 = discriminant(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:19: 744:30 (#110),
                    scope: scope[7],
                },
                kind: switchInt(move _61) -> [0: bb40, 1: bb41, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:19: 744:30 (#110),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:5: 751:6 (#109),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = ((_58 as Some).0: (char, char)),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &mut _26,
            StorageLive(_67),
            _67 = _63,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:745:9: 745:32 (#0),
                    scope: scope[8],
                },
                kind: _65 = std::collections::HashMap::<(char, char), usize>::entry(move _66, move _67) -> [return: bb43, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _49 = const (),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:751:5: 751:6 (#109),
                    scope: scope[6],
                },
                kind: drop(_56) -> [return: bb45, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            StorageLive(_68),
            StorageLive(_69),
            _69 = &mut _48,
            _68 = {closure@src/lib.rs:745:44: 745:48} { intersection_size: move _69 },
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:745:9: 750:11 (#0),
                    scope: scope[8],
                },
                kind: _64 = std::collections::hash_map::Entry::<'_, (char, char), usize>::and_modify::<{closure@src/lib.rs:745:44: 745:48}>(move _65, move _68) -> [return: bb44, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_65),
            StorageDead(_64),
            _57 = const (),
            StorageDead(_63),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_57),
            _35 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:5: 751:6 (#109),
                    scope: scope[7],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:751:5: 751:6 (#109),
                    scope: scope[6],
                },
                kind: drop(_50) -> [return: bb46, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_50),
            StorageDead(_49),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = _48,
            _73 = MulWithOverflow(const 2_usize, _72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:753:5: 753:28 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_73.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _72) -> [success: bb47, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = move (_73.0: usize),
            StorageDead(_72),
            _70 = move _71 as f64 (IntToFloat),
            StorageDead(_71),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:753:39: 753:46 (#0),
                    scope: scope[6],
                },
                kind: _77 = std::string::String::len(move _78) -> [return: bb48, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &_8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:753:49: 753:56 (#0),
                    scope: scope[6],
                },
                kind: _79 = std::string::String::len(move _80) -> [return: bb49, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            _81 = AddWithOverflow(_77, _79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:753:39: 753:56 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", move _77, move _79) -> [success: bb50, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _76 = move (_81.0: usize),
            StorageDead(_79),
            StorageDead(_77),
            _82 = SubWithOverflow(_76, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:753:38: 753:61 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_82.1: bool), "attempt to compute `{} - {}`, which would overflow", move _76, const 2_usize) -> [success: bb51, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _75 = move (_82.0: usize),
            StorageDead(_76),
            _74 = move _75 as f64 (IntToFloat),
            StorageDead(_75),
            _0 = Div(move _70, move _74),
            StorageDead(_74),
            StorageDead(_70),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:1: 754:2 (#0),
                    scope: scope[2],
                },
                kind: drop(_26) -> [return: bb52, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:1: 754:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb53, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:1: 754:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb54, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:2: 754:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:1: 754:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb56, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:1: 754:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb57, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:2: 754:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:2: 754:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:751:5: 751:6 (#109),
                    scope: scope[6],
                },
                kind: drop(_56) -> [return: bb60, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:751:5: 751:6 (#109),
                    scope: scope[6],
                },
                kind: drop(_50) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:744:29: 744:30 (#110),
                    scope: scope[6],
                },
                kind: drop(_51) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:740:5: 740:6 (#106),
                    scope: scope[3],
                },
                kind: drop(_34) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:740:5: 740:6 (#106),
                    scope: scope[3],
                },
                kind: drop(_28) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:738:29: 738:30 (#107),
                    scope: scope[3],
                },
                kind: drop(_29) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:1: 754:2 (#0),
                    scope: scope[2],
                },
                kind: drop(_26) -> [return: bb66, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:1: 754:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb67, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:754:1: 754:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb68, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:721:1: 754:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:721:43: 721:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:721:25: 721:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:721:22: 721:23 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:721:22: 721:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:721:22: 721:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:721:34: 721:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:721:31: 721:32 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:721:31: 721:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:721:31: 721:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:725:21: 725:77 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:725:9: 725:10 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/lib.rs:725:12: 725:18 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/lib.rs:725:9: 725:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Filter<std::str::Chars<'{erased}>, Closure(DefId(0:109 ~ strsim[9b12]::sorensen_dice::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:725:21: 725:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:725:21: 725:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:725:21: 725:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:109 ~ strsim[9b12]::sorensen_dice::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:725:38: 725:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:726:21: 726:77 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:726:9: 726:10 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [],
                        },
                        src/lib.rs:726:12: 726:18 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/lib.rs:726:9: 726:10 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Filter<std::str::Chars<'{erased}>, Closure(DefId(0:110 ~ strsim[9b12]::sorensen_dice::{closure#1}), [i16, Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:726:21: 726:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:726:21: 726:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:726:21: 726:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:110 ~ strsim[9b12]::sorensen_dice::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:726:38: 726:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:728:5: 730:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:728:8: 728:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:728:8: 728:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:728:13: 728:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:728:15: 730:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:732:5: 734:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:732:8: 732:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:732:8: 732:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:732:8: 732:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:732:23: 732:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:732:23: 732:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:732:23: 732:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:732:35: 734:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:736:55: 736:69 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:736:9: 736:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::collections::HashMap<(char, char), usize, std::hash::RandomState>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(4),
                            projs: [],
                        },
                        src/lib.rs:736:24: 736:52 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/lib.rs:736:9: 736:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:5: 740:6 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    '{erased},
                ],
                def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:19: 738:30 (#107),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    '{erased},
                ],
                def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:19: 738:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:27: 738:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:27: 738:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:27: 738:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:27: 738:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _28,
                                ),
                                src/lib.rs:738:19: 738:30 (#107),
                            ),
                        ),
                        pat_span: src/lib.rs:738:19: 738:30 (#107),
                    },
                ),
            ),
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    '{erased},
                ],
                def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:19: 738:30 (#107),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:721:1: 754:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:19: 738:30 (#107),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(char, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:19: 738:30 (#107),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Opaque, AliasTy { args: ['{erased}], def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:19: 738:30 (#107),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Opaque, AliasTy { args: ['{erased}], def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:19: 738:30 (#107),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:5: 740:6 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:5: 740:6 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _37,
                                ),
                                src/lib.rs:738:19: 738:30 (#107),
                            ),
                        ),
                        pat_span: src/lib.rs:738:9: 738:15 (#108),
                    },
                ),
            ),
        ),
        ty: (char, char),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:738:9: 738:15 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:739:10: 739:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::collections::hash_map::Entry<'{erased}, (char, char), usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:739:10: 739:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::collections::HashMap<(char, char), usize, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:739:10: 739:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (char, char),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:739:26: 739:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:739:9: 739:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:742:33: 742:40 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:742:9: 742:30 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:742:9: 742:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:5: 751:6 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    '{erased},
                ],
                def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:19: 744:30 (#110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    '{erased},
                ],
                def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:19: 744:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:27: 744:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:27: 744:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:27: 744:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:27: 744:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                src/lib.rs:744:19: 744:30 (#110),
                            ),
                        ),
                        pat_span: src/lib.rs:744:19: 744:30 (#110),
                    },
                ),
            ),
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    '{erased},
                ],
                def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:19: 744:30 (#110),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:19: 744:30 (#110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(char, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:19: 744:30 (#110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Opaque, AliasTy { args: ['{erased}], def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:19: 744:30 (#110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Opaque, AliasTy { args: ['{erased}], def_id: DefId(0:169 ~ strsim[9b12]::bigrams::{opaque#0}) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:19: 744:30 (#110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:5: 751:6 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:5: 751:6 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                src/lib.rs:744:19: 744:30 (#110),
                            ),
                        ),
                        pat_span: src/lib.rs:744:9: 744:15 (#111),
                    },
                ),
            ),
        ),
        ty: (char, char),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:744:9: 744:15 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::collections::hash_map::Entry<'{erased}, (char, char), usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:745:9: 750:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::collections::hash_map::Entry<'{erased}, (char, char), usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:745:9: 745:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::collections::HashMap<(char, char), usize, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:745:9: 745:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (char, char),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:745:25: 745:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:111 ~ strsim[9b12]::sorensen_dice::{closure#2}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'^0 mut usize,)), bound_vars: [Region(BrAnon)] },
                (&'{erased} mut usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:745:44: 750:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:745:44: 750:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:5: 753:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:5: 753:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:10: 753:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:5: 753:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:38: 753:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:38: 753:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:39: 753:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:39: 753:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:39: 753:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:49: 753:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:753:5: 753:68 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:49: 753:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:39: 753:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:753:38: 753:61 (#0),
            scope: scope[0],
        },
    },
]