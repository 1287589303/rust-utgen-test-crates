[
    BasicBlockData {
        statements: [
            _2 = SubWithOverflow(const 8_i32, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:21: 503:26 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 8_i32, const 1_i32) -> [success: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).2: i32) = move (_2.0: i32),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:504:30: 504:66 (#0),
                    scope: scope[0],
                },
                kind: _5 = <GrowingHashmapMapElemChar<ValueType> as std::default::Default>::default() -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#17),
                    scope: scope[0],
                },
                kind: _4 = std::vec::from_elem::<GrowingHashmapMapElemChar<ValueType>>(move _5, const 8_usize) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = std::option::Option::<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::Some(move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:504:70: 504:71 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:504:9: 504:17 (#0),
                    scope: scope[0],
                },
                kind: drop(((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>)) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>) = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:504:70: 504:71 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>) = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:504:9: 504:17 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:505:6: 505:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:504:70: 504:71 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:502:5: 505:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:502:27: 502:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:502:17: 502:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:503:21: 503:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:504:20: 504:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#17),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: GrowingHashmapMapElemChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:504:30: 504:66 (#0),
            scope: scope[0],
        },
    },
]