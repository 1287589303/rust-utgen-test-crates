[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
            StorageLive(_9),
            _9 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:619:19: 619:34 (#0),
                    scope: scope[0],
                },
                kind: _7 = std::cmp::max::<usize>(move _8, move _9) -> [return: bb1, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            _6 = move _7 as isize (IntToInt),
            StorageDead(_7),
            _10 = AddWithOverflow(_6, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:619:19: 619:47 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_isize) -> [success: bb2, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_10.0: isize),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:621:27: 621:71 (#0),
                    scope: scope[1],
                },
                kind: _11 = <HybridGrowingHashmapChar<RowId> as std::default::Default>::default() -> [return: bb3, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _4,
            _14 = AddWithOverflow(_13, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:623:16: 623:24 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 2_usize) -> [success: bb4, unwind: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_14.0: usize),
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _5,
            StorageLive(_17),
            _17 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#19),
                    scope: scope[3],
                },
                kind: _15 = std::vec::from_elem::<isize>(move _16, move _17) -> [return: bb5, unwind: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_18),
            StorageLive(_19),
            _19 = _5,
            StorageLive(_20),
            _20 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#20),
                    scope: scope[4],
                },
                kind: _18 = std::vec::from_elem::<isize>(move _19, move _20) -> [return: bb6, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _5,
            StorageLive(_25),
            StorageLive(_26),
            _26 = _5,
            _27 = AddWithOverflow(_26, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:626:39: 626:50 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", move _26, const 1_isize) -> [success: bb7, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = move (_27.0: isize),
            StorageDead(_26),
            _23 = std::ops::Range::<isize> { start: move _24, end: move _25 },
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _12,
            _32 = SubWithOverflow(_31, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:627:19: 627:29 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_32.1: bool), "attempt to compute `{} - {}`, which would overflow", move _31, const 1_usize) -> [success: bb8, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = move (_32.0: usize),
            StorageDead(_31),
            _29 = move _30 as isize (IntToInt),
            StorageDead(_30),
            _28 = std::ops::Range::<isize> { start: const 0_isize, end: move _29 },
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:626:29: 627:39 (#0),
                    scope: scope[5],
                },
                kind: _22 = <std::ops::Range<isize> as std::iter::Iterator>::chain::<std::ops::Range<isize>>(move _23, move _28) -> [return: bb9, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:626:29: 628:19 (#0),
                    scope: scope[5],
                },
                kind: _21 = <std::iter::Chain<std::ops::Range<isize>, std::ops::Range<isize>> as std::iter::Iterator>::collect::<std::vec::Vec<isize>>(move _22) -> [return: bb10, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            FakeRead(ForLet(None), _21),
            AscribeUserType(_21, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:21: 630:35 (#0),
                    scope: scope[6],
                },
                kind: _36 = <Iter1 as std::iter::Iterator>::enumerate(move _37) -> [return: bb11, unwind: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageLive(_38),
            _38 = {closure@src/lib.rs:630:40: 630:50},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:21: 630:64 (#0),
                    scope: scope[6],
                },
                kind: _35 = <std::iter::Enumerate<Iter1> as std::iter::Iterator>::map::<(usize, char), {closure@src/lib.rs:630:40: 630:50}>(move _36, move _38) -> [return: bb12, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:21: 630:64 (#94),
                    scope: scope[6],
                },
                kind: _34 = <std::iter::Map<std::iter::Enumerate<Iter1>, {closure@src/lib.rs:630:40: 630:50}> as std::iter::IntoIterator>::into_iter(move _35) -> [return: bb13, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            PlaceMention(_34),
            StorageLive(_39),
            _39 = move _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:5: 664:6 (#93),
                    scope: scope[7],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:5: 664:6 (#93),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb15, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &mut _39,
            _43 = &mut (*_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:21: 630:64 (#94),
                    scope: scope[7],
                },
                kind: _42 = <std::iter::Map<std::iter::Enumerate<Iter1>, {closure@src/lib.rs:630:40: 630:50}> as std::iter::Iterator>::next(move _43) -> [return: bb16, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            PlaceMention(_42),
            _45 = discriminant(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:21: 630:64 (#94),
                    scope: scope[7],
                },
                kind: switchInt(move _45) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:21: 630:64 (#94),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:5: 664:6 (#93),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = (((_42 as Some).0: (usize, char)).0: usize),
            StorageLive(_48),
            _48 = (((_42 as Some).0: (usize, char)).1: char),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut _21,
            _50 = &mut (*_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &mut _18,
            _52 = &mut (*_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:631:9: 631:35 (#0),
                    scope: scope[8],
                },
                kind: _49 = std::mem::swap::<std::vec::Vec<isize>>(move _50, move _52) -> [return: bb21, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = const (),
            StorageDead(_44),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:664:5: 664:6 (#93),
                    scope: scope[6],
                },
                kind: drop(_39) -> [return: bb76, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_50),
            StorageDead(_53),
            StorageDead(_51),
            StorageDead(_49),
            StorageLive(_54),
            _54 = const -1_isize,
            FakeRead(ForLet(None), _54),
            AscribeUserType(_54, o, UserTypeProjection { base: UserType(3), projs: [] }),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &_21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:633:30: 633:33 (#0),
                    scope: scope[9],
                },
                kind: _56 = <std::vec::Vec<isize> as std::ops::Index<usize>>::index(move _57, const 1_usize) -> [return: bb22, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = (*_56),
            StorageDead(_57),
            FakeRead(ForLet(None), _55),
            StorageDead(_56),
            StorageLive(_58),
            _58 = _47,
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:634:10: 634:13 (#0),
                    scope: scope[10],
                },
                kind: _59 = <std::vec::Vec<isize> as std::ops::IndexMut<usize>>::index_mut(move _60, const 1_usize) -> [return: bb23, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            (*_59) = move _58 as isize (IntToInt),
            StorageDead(_58),
            StorageDead(_59),
            StorageLive(_61),
            _61 = _5,
            FakeRead(ForLet(None), _61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:25: 637:35 (#0),
                    scope: scope[11],
                },
                kind: _66 = <Iter2 as std::clone::Clone>::clone(move _67) -> [return: bb24, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:25: 637:47 (#0),
                    scope: scope[11],
                },
                kind: _65 = <Iter2 as std::iter::Iterator>::enumerate(move _66) -> [return: bb25, unwind: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageLive(_68),
            _68 = {closure@src/lib.rs:637:52: 637:62},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:25: 637:76 (#0),
                    scope: scope[11],
                },
                kind: _64 = <std::iter::Enumerate<Iter2> as std::iter::Iterator>::map::<(usize, char), {closure@src/lib.rs:637:52: 637:62}>(move _65, move _68) -> [return: bb26, unwind: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:25: 637:76 (#97),
                    scope: scope[11],
                },
                kind: _63 = <std::iter::Map<std::iter::Enumerate<Iter2>, {closure@src/lib.rs:637:52: 637:62}> as std::iter::IntoIterator>::into_iter(move _64) -> [return: bb27, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            PlaceMention(_63),
            StorageLive(_69),
            _69 = move _63,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:9: 662:10 (#96),
                    scope: scope[12],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:9: 662:10 (#96),
                    scope: scope[12],
                },
                kind: falseUnwind -> [real: bb29, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = &mut _69,
            _72 = &mut (*_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:25: 637:76 (#97),
                    scope: scope[12],
                },
                kind: _71 = <std::iter::Map<std::iter::Enumerate<Iter2>, {closure@src/lib.rs:637:52: 637:62}> as std::iter::Iterator>::next(move _72) -> [return: bb30, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            PlaceMention(_71),
            _74 = discriminant(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:25: 637:76 (#97),
                    scope: scope[12],
                },
                kind: switchInt(move _74) -> [0: bb32, 1: bb33, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:25: 637:76 (#97),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:9: 662:10 (#96),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            _76 = (((_71 as Some).0: (usize, char)).0: usize),
            StorageLive(_77),
            _77 = (((_71 as Some).0: (usize, char)).1: char),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = &_18,
            StorageLive(_82),
            _82 = _76,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:638:26: 638:29 (#0),
                    scope: scope[13],
                },
                kind: _80 = <std::vec::Vec<isize> as std::ops::Index<usize>>::index(move _81, move _82) -> [return: bb35, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _62 = const (),
            StorageDead(_73),
            StorageDead(_71),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:662:9: 662:10 (#96),
                    scope: scope[11],
                },
                kind: drop(_69) -> [return: bb73, unwind: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _79 = (*_80),
            StorageDead(_82),
            StorageDead(_81),
            StorageLive(_83),
            StorageLive(_84),
            StorageLive(_85),
            _85 = _48,
            StorageLive(_86),
            _86 = _77,
            _84 = Ne(move _85, move _86),
            StorageDead(_86),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:638:32: 638:55 (#0),
                    scope: scope[13],
                },
                kind: _83 = <isize as std::convert::From<bool>>::from(move _84) -> [return: bb36, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            _87 = AddWithOverflow(_79, _83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:638:24: 638:55 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_87.1: bool), "attempt to compute `{} + {}`, which would overflow", move _79, move _83) -> [success: bb37, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _78 = move (_87.0: isize),
            StorageDead(_83),
            StorageDead(_79),
            FakeRead(ForLet(None), _78),
            StorageDead(_80),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            StorageLive(_91),
            _91 = &_21,
            StorageLive(_92),
            _92 = _76,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:639:25: 639:28 (#0),
                    scope: scope[14],
                },
                kind: _90 = <std::vec::Vec<isize> as std::ops::Index<usize>>::index(move _91, move _92) -> [return: bb38, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _89 = (*_90),
            StorageDead(_92),
            StorageDead(_91),
            _93 = AddWithOverflow(_89, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:639:24: 639:32 (#0),
                    scope: scope[14],
                },
                kind: assert(!move (_93.1: bool), "attempt to compute `{} + {}`, which would overflow", move _89, const 1_isize) -> [success: bb39, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _88 = move (_93.0: isize),
            StorageDead(_89),
            FakeRead(ForLet(None), _88),
            StorageDead(_90),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            _97 = &_18,
            StorageLive(_98),
            StorageLive(_99),
            _99 = _76,
            _100 = AddWithOverflow(_99, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:640:25: 640:30 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_100.1: bool), "attempt to compute `{} + {}`, which would overflow", move _99, const 1_usize) -> [success: bb40, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _98 = move (_100.0: usize),
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:640:24: 640:31 (#0),
                    scope: scope[15],
                },
                kind: _96 = <std::vec::Vec<isize> as std::ops::Index<usize>>::index(move _97, move _98) -> [return: bb41, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _95 = (*_96),
            StorageDead(_98),
            StorageDead(_97),
            _101 = AddWithOverflow(_95, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:640:22: 640:35 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_101.1: bool), "attempt to compute `{} + {}`, which would overflow", move _95, const 1_isize) -> [success: bb42, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _94 = move (_101.0: isize),
            StorageDead(_95),
            FakeRead(ForLet(None), _94),
            StorageDead(_96),
            StorageLive(_102),
            StorageLive(_103),
            _103 = _78,
            StorageLive(_104),
            StorageLive(_105),
            _105 = _88,
            StorageLive(_106),
            _106 = _94,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:641:38: 641:51 (#0),
                    scope: scope[16],
                },
                kind: _104 = std::cmp::min::<isize>(move _105, move _106) -> [return: bb43, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:641:28: 641:52 (#0),
                    scope: scope[16],
                },
                kind: _102 = std::cmp::min::<isize>(move _103, move _104) -> [return: bb44, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
            FakeRead(ForLet(None), _102),
            StorageLive(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = _48,
            StorageLive(_110),
            _110 = _77,
            _108 = Eq(move _109, move _110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:643:16: 643:26 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _108) -> [0: bb50, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_110),
            StorageDead(_109),
            StorageLive(_111),
            _111 = _76,
            _54 = move _111 as isize (IntToInt),
            StorageDead(_111),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            _114 = &_18,
            StorageLive(_115),
            StorageLive(_116),
            _116 = _76,
            _117 = SubWithOverflow(_116, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:645:32: 645:37 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_117.1: bool), "attempt to compute `{} - {}`, which would overflow", move _116, const 1_usize) -> [success: bb46, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _115 = move (_117.0: usize),
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:645:31: 645:38 (#0),
                    scope: scope[17],
                },
                kind: _113 = <std::vec::Vec<isize> as std::ops::Index<usize>>::index(move _114, move _115) -> [return: bb47, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _112 = (*_113),
            StorageDead(_115),
            StorageDead(_114),
            StorageLive(_118),
            StorageLive(_119),
            _119 = &mut _15,
            StorageLive(_120),
            StorageLive(_121),
            _121 = _76,
            _122 = AddWithOverflow(_121, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:645:20: 645:25 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_122.1: bool), "attempt to compute `{} + {}`, which would overflow", move _121, const 1_usize) -> [success: bb48, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _120 = move (_122.0: usize),
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:645:19: 645:26 (#0),
                    scope: scope[17],
                },
                kind: _118 = <std::vec::Vec<isize> as std::ops::IndexMut<usize>>::index_mut(move _119, move _120) -> [return: bb49, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageDead(_119),
            (*_118) = move _112,
            StorageDead(_112),
            StorageDead(_118),
            StorageDead(_113),
            StorageLive(_123),
            _123 = _55,
            _61 = move _123,
            StorageDead(_123),
            _107 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:643:13: 658:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_110),
            StorageDead(_109),
            StorageLive(_124),
            StorageLive(_125),
            StorageLive(_126),
            _126 = &_11,
            StorageLive(_127),
            _127 = _77,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:648:25: 648:45 (#0),
                    scope: scope[17],
                },
                kind: _125 = HybridGrowingHashmapChar::<RowId>::get(move _126, move _127) -> [return: bb51, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            StorageDead(_126),
            _124 = (_125.0: isize),
            FakeRead(ForLet(None), _124),
            StorageDead(_125),
            StorageLive(_128),
            _128 = _54,
            FakeRead(ForLet(None), _128),
            StorageLive(_129),
            StorageLive(_130),
            StorageLive(_131),
            StorageLive(_132),
            _132 = _76,
            _131 = move _132 as isize (IntToInt),
            StorageDead(_132),
            StorageLive(_133),
            _133 = _128,
            _134 = SubWithOverflow(_131, _133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:651:20: 651:34 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_134.1: bool), "attempt to compute `{} - {}`, which would overflow", move _131, move _133) -> [success: bb52, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _130 = move (_134.0: isize),
            StorageDead(_133),
            StorageDead(_131),
            _129 = Eq(move _130, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:651:20: 651:39 (#0),
                    scope: scope[19],
                },
                kind: switchInt(move _129) -> [0: bb59, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            StorageLive(_135),
            StorageLive(_136),
            StorageLive(_137),
            StorageLive(_138),
            _138 = &_15,
            StorageLive(_139),
            StorageLive(_140),
            _140 = _76,
            _141 = AddWithOverflow(_140, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:652:40: 652:45 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_141.1: bool), "attempt to compute `{} + {}`, which would overflow", move _140, const 1_usize) -> [success: bb54, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _139 = move (_141.0: usize),
            StorageDead(_140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:652:39: 652:46 (#0),
                    scope: scope[19],
                },
                kind: _137 = <std::vec::Vec<isize> as std::ops::Index<usize>>::index(move _138, move _139) -> [return: bb55, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _136 = (*_137),
            StorageDead(_139),
            StorageDead(_138),
            StorageLive(_142),
            StorageLive(_143),
            StorageLive(_144),
            _144 = _47,
            _143 = move _144 as isize (IntToInt),
            StorageDead(_144),
            StorageLive(_145),
            _145 = _124,
            _146 = SubWithOverflow(_143, _145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:652:49: 652:65 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_146.1: bool), "attempt to compute `{} - {}`, which would overflow", move _143, move _145) -> [success: bb56, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _142 = move (_146.0: isize),
            StorageDead(_145),
            StorageDead(_143),
            _147 = AddWithOverflow(_136, _142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:652:37: 652:65 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_147.1: bool), "attempt to compute `{} + {}`, which would overflow", move _136, move _142) -> [success: bb57, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _135 = move (_147.0: isize),
            StorageDead(_142),
            StorageDead(_136),
            FakeRead(ForLet(None), _135),
            StorageDead(_137),
            StorageLive(_148),
            StorageLive(_149),
            _149 = _102,
            StorageLive(_150),
            _150 = _135,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:653:28: 653:48 (#0),
                    scope: scope[20],
                },
                kind: _148 = std::cmp::min::<isize>(move _149, move _150) -> [return: bb58, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
            StorageDead(_149),
            _102 = move _148,
            StorageDead(_148),
            _107 = const (),
            StorageDead(_135),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:651:17: 657:18 (#0),
                    scope: scope[19],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            StorageLive(_151),
            StorageLive(_152),
            StorageLive(_153),
            StorageLive(_154),
            _154 = _47,
            _153 = move _154 as isize (IntToInt),
            StorageDead(_154),
            StorageLive(_155),
            _155 = _124,
            _156 = SubWithOverflow(_153, _155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:654:27: 654:41 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_156.1: bool), "attempt to compute `{} - {}`, which would overflow", move _153, move _155) -> [success: bb60, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _152 = move (_156.0: isize),
            StorageDead(_155),
            StorageDead(_153),
            _151 = Eq(move _152, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:654:27: 654:46 (#0),
                    scope: scope[19],
                },
                kind: switchInt(move _151) -> [0: bb65, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_152),
            StorageLive(_157),
            StorageLive(_158),
            _158 = _61,
            StorageLive(_159),
            StorageLive(_160),
            StorageLive(_161),
            _161 = _76,
            _160 = move _161 as isize (IntToInt),
            StorageDead(_161),
            StorageLive(_162),
            _162 = _128,
            _163 = SubWithOverflow(_160, _162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:655:41: 655:57 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_163.1: bool), "attempt to compute `{} - {}`, which would overflow", move _160, move _162) -> [success: bb62, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _159 = move (_163.0: isize),
            StorageDead(_162),
            StorageDead(_160),
            _164 = AddWithOverflow(_158, _159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:655:37: 655:57 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_164.1: bool), "attempt to compute `{} + {}`, which would overflow", move _158, move _159) -> [success: bb63, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _157 = move (_164.0: isize),
            StorageDead(_159),
            StorageDead(_158),
            FakeRead(ForLet(None), _157),
            StorageLive(_165),
            StorageLive(_166),
            _166 = _102,
            StorageLive(_167),
            _167 = _157,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:656:28: 656:48 (#0),
                    scope: scope[21],
                },
                kind: _165 = std::cmp::min::<isize>(move _166, move _167) -> [return: bb64, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_167),
            StorageDead(_166),
            _102 = move _165,
            StorageDead(_165),
            _107 = const (),
            StorageDead(_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:654:24: 657:18 (#0),
                    scope: scope[19],
                },
                kind: goto -> bb66,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_152),
            _107 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:654:24: 657:18 (#0),
                    scope: scope[19],
                },
                kind: goto -> bb66,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:651:17: 657:18 (#0),
                    scope: scope[19],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            StorageDead(_128),
            StorageDead(_124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:643:13: 658:14 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_107),
            StorageLive(_168),
            StorageLive(_169),
            StorageLive(_170),
            _170 = &_21,
            StorageLive(_171),
            StorageLive(_172),
            _172 = _76,
            _173 = AddWithOverflow(_172, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:660:27: 660:32 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_173.1: bool), "attempt to compute `{} + {}`, which would overflow", move _172, const 1_usize) -> [success: bb69, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _171 = move (_173.0: usize),
            StorageDead(_172),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:660:26: 660:33 (#0),
                    scope: scope[17],
                },
                kind: _169 = <std::vec::Vec<isize> as std::ops::Index<usize>>::index(move _170, move _171) -> [return: bb70, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _168 = (*_169),
            StorageDead(_171),
            StorageDead(_170),
            _55 = move _168,
            StorageDead(_168),
            StorageDead(_169),
            StorageLive(_174),
            _174 = _102,
            StorageLive(_175),
            StorageLive(_176),
            _176 = &mut _21,
            StorageLive(_177),
            StorageLive(_178),
            _178 = _76,
            _179 = AddWithOverflow(_178, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:661:15: 661:20 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_179.1: bool), "attempt to compute `{} + {}`, which would overflow", move _178, const 1_usize) -> [success: bb71, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _177 = move (_179.0: usize),
            StorageDead(_178),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:661:14: 661:21 (#0),
                    scope: scope[17],
                },
                kind: _175 = <std::vec::Vec<isize> as std::ops::IndexMut<usize>>::index_mut(move _176, move _177) -> [return: bb72, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_177),
            StorageDead(_176),
            (*_175) = move _174,
            StorageDead(_174),
            StorageDead(_175),
            _70 = const (),
            StorageDead(_102),
            StorageDead(_94),
            StorageDead(_88),
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
            StorageDead(_73),
            StorageDead(_71),
            StorageDead(_70),
            _40 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:9: 662:10 (#96),
                    scope: scope[12],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:662:9: 662:10 (#96),
                    scope: scope[11],
                },
                kind: drop(_63) -> [return: bb74, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_62),
            StorageLive(_180),
            _180 = _47,
            StorageLive(_181),
            StorageLive(_182),
            _182 = &mut _11,
            StorageLive(_183),
            _183 = _48,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:663:9: 663:33 (#0),
                    scope: scope[11],
                },
                kind: _181 = HybridGrowingHashmapChar::<RowId>::get_mut(move _182, move _183) -> [return: bb75, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            StorageDead(_182),
            ((*_181).0: isize) = move _180 as isize (IntToInt),
            StorageDead(_180),
            StorageDead(_181),
            _41 = const (),
            StorageDead(_61),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_44),
            StorageDead(_42),
            StorageDead(_41),
            _40 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:5: 664:6 (#93),
                    scope: scope[7],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:664:5: 664:6 (#93),
                    scope: scope[6],
                },
                kind: drop(_34) -> [return: bb77, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageLive(_184),
            StorageLive(_185),
            StorageLive(_186),
            _186 = &_21,
            StorageLive(_187),
            StorageLive(_188),
            _188 = _4,
            _189 = AddWithOverflow(_188, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:666:7: 666:15 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_189.1: bool), "attempt to compute `{} + {}`, which would overflow", move _188, const 1_usize) -> [success: bb78, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _187 = move (_189.0: usize),
            StorageDead(_188),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:666:6: 666:16 (#0),
                    scope: scope[6],
                },
                kind: _185 = <std::vec::Vec<isize> as std::ops::Index<usize>>::index(move _186, move _187) -> [return: bb79, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _184 = (*_185),
            StorageDead(_187),
            StorageDead(_186),
            _0 = move _184 as usize (IntToInt),
            StorageDead(_184),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[5],
                },
                kind: drop(_21) -> [return: bb80, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb81, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb82, unwind: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb83, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_5),
            StorageDead(_185),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb84, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb85, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:2: 667:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:662:9: 662:10 (#96),
                    scope: scope[11],
                },
                kind: drop(_69) -> [return: bb87, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:662:9: 662:10 (#96),
                    scope: scope[11],
                },
                kind: drop(_63) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:75: 637:76 (#97),
                    scope: scope[11],
                },
                kind: drop(_64) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:75: 637:76 (#0),
                    scope: scope[11],
                },
                kind: drop(_65) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:637:46: 637:47 (#0),
                    scope: scope[11],
                },
                kind: drop(_66) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:664:5: 664:6 (#93),
                    scope: scope[6],
                },
                kind: drop(_39) -> [return: bb92, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:664:5: 664:6 (#93),
                    scope: scope[6],
                },
                kind: drop(_34) -> [return: bb96, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:63: 630:64 (#94),
                    scope: scope[6],
                },
                kind: drop(_35) -> [return: bb96, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:63: 630:64 (#0),
                    scope: scope[6],
                },
                kind: drop(_36) -> [return: bb96, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:630:34: 630:35 (#0),
                    scope: scope[6],
                },
                kind: drop(_37) -> [return: bb96, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[5],
                },
                kind: drop(_21) -> [return: bb97, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb98, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb99, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb100, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb101, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:667:1: 667:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb102, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:609:1: 667:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:609:94: 609:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:609:47: 609:52 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:609:43: 609:45 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:609:43: 609:45 (#0),
                    },
                ),
            ),
        ),
        ty: Iter1/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:609:43: 609:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:609:60: 609:65 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:609:54: 609:58 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:609:54: 609:58 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:609:54: 609:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:609:71: 609:76 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:609:67: 609:69 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:609:67: 609:69 (#0),
                    },
                ),
            ),
        ),
        ty: Iter2/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:609:67: 609:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:609:84: 609:89 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:609:78: 609:82 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:609:78: 609:82 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:609:78: 609:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:619:19: 619:47 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:619:9: 619:16 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:619:9: 619:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:619:19: 619:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:619:19: 619:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:619:23: 619:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:619:29: 619:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:619:19: 619:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:621:27: 621:71 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:621:9: 621:24 (#0),
                    },
                ),
            ),
        ),
        ty: HybridGrowingHashmapChar<RowId>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:621:9: 621:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:623:16: 623:24 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:623:9: 623:13 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:623:9: 623:13 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:623:16: 623:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:623:16: 623:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#19),
                            ),
                        ),
                        pat_span: src/lib.rs:624:9: 624:15 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:624:9: 624:15 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:624:23: 624:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:624:32: 624:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#20),
                            ),
                        ),
                        pat_span: src/lib.rs:625:9: 625:15 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:625:9: 625:15 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:625:23: 625:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:625:32: 625:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:626:29: 628:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:626:9: 626:14 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<isize, std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/lib.rs:626:16: 626:26 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/lib.rs:626:9: 626:14 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Chain<std::ops::Range<isize>, std::ops::Range<isize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:626:29: 627:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:626:29: 626:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:626:30: 626:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:626:39: 626:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:626:39: 626:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:626:39: 626:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:627:16: 627:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:627:19: 627:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:627:19: 627:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:627:20: 627:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:627:19: 627:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:5: 664:6 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Map<std::iter::Enumerate<Iter1/#0>, Closure(DefId(0:103 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#0}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:64 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Map<std::iter::Enumerate<Iter1/#0>, Closure(DefId(0:103 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#0}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<Iter1/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Iter1/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:103 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#0}),
            [
                Iter1/#0,
                Iter2/#1,
                i16,
                Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:40: 630:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                src/lib.rs:630:21: 630:64 (#94),
                            ),
                        ),
                        pat_span: src/lib.rs:630:21: 630:64 (#94),
                    },
                ),
            ),
        ),
        ty: std::iter::Map<std::iter::Enumerate<Iter1/#0>, Closure(DefId(0:103 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#0}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:64 (#94),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:609:1: 667:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:64 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:64 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Map<std::iter::Enumerate<Iter1/#0>, Closure(DefId(0:103 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#0}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:64 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Map<std::iter::Enumerate<Iter1/#0>, Closure(DefId(0:103 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#0}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:21: 630:64 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:5: 664:6 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:5: 664:6 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                src/lib.rs:630:21: 630:64 (#94),
                            ),
                        ),
                        pat_span: src/lib.rs:630:9: 630:17 (#95),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:10: 630:11 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                src/lib.rs:630:21: 630:64 (#94),
                            ),
                        ),
                        pat_span: src/lib.rs:630:9: 630:17 (#95),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:630:13: 630:16 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:631:9: 631:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:631:19: 631:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:631:19: 631:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:631:27: 631:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:631:27: 631:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:632:38: 632:40 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:632:13: 632:28 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [],
                        },
                        src/lib.rs:632:30: 632:35 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/lib.rs:632:13: 632:28 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:633:29: 633:33 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:633:13: 633:26 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:633:13: 633:26 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:633:30: 633:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:633:29: 633:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:634:16: 634:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:634:10: 634:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:634:9: 634:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:635:21: 635:28 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:635:13: 635:18 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:635:13: 635:18 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:9: 662:10 (#96),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Map<std::iter::Enumerate<Iter2/#1>, Closure(DefId(0:104 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#1}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:76 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Map<std::iter::Enumerate<Iter2/#1>, Closure(DefId(0:104 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#1}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<Iter2/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Iter2/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Iter2/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:104 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#1}),
            [
                Iter1/#0,
                Iter2/#1,
                i16,
                Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:52: 637:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _63,
                                ),
                                src/lib.rs:637:25: 637:76 (#97),
                            ),
                        ),
                        pat_span: src/lib.rs:637:25: 637:76 (#97),
                    },
                ),
            ),
        ),
        ty: std::iter::Map<std::iter::Enumerate<Iter2/#1>, Closure(DefId(0:104 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#1}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:76 (#97),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:76 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:76 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Map<std::iter::Enumerate<Iter2/#1>, Closure(DefId(0:104 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#1}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:76 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Map<std::iter::Enumerate<Iter2/#1>, Closure(DefId(0:104 ~ strsim[9b12]::damerau_levenshtein_impl::{closure#1}), [Iter1/#0, Iter2/#1, i16, Binder { value: extern "RustCall" fn(((usize, char),)) -> (usize, char), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:25: 637:76 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:9: 662:10 (#96),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:9: 662:10 (#96),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _71,
                                ),
                                src/lib.rs:637:25: 637:76 (#97),
                            ),
                        ),
                        pat_span: src/lib.rs:637:13: 637:21 (#98),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:14: 637:15 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _71,
                                ),
                                src/lib.rs:637:25: 637:76 (#97),
                            ),
                        ),
                        pat_span: src/lib.rs:637:13: 637:21 (#98),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:637:17: 637:20 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:638:24: 638:55 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:638:17: 638:21 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:17: 638:21 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:24: 638:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:26: 638:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:24: 638:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:27: 638:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:32: 638:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:44: 638:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:44: 638:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:51: 638:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:638:24: 638:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:639:24: 639:32 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:639:17: 639:21 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:639:17: 639:21 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:639:24: 639:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:639:25: 639:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:639:24: 639:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:639:26: 639:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:639:24: 639:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:640:22: 640:35 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:640:17: 640:19 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:640:17: 640:19 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:640:22: 640:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:640:24: 640:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:640:22: 640:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:640:25: 640:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:640:25: 640:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:640:25: 640:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:640:22: 640:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:641:28: 641:52 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:641:17: 641:25 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:641:17: 641:25 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:641:32: 641:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:641:38: 641:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:641:42: 641:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:641:48: 641:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:643:13: 658:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:643:16: 643:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:643:16: 643:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:643:23: 643:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:644:31: 644:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:29: 645:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:31: 645:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:29: 645:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:32: 645:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:32: 645:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:32: 645:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:19: 645:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:17: 645:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:20: 645:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:20: 645:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:645:20: 645:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:646:21: 646:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:648:25: 648:49 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:648:21: 648:22 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:648:21: 648:22 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: RowId,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:648:25: 648:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} HybridGrowingHashmapChar<RowId>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:648:25: 648:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:648:41: 648:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:649:25: 649:36 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:649:21: 649:22 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:649:21: 649:22 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:651:20: 651:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:651:20: 651:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:651:20: 651:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:651:20: 651:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:651:33: 651:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:651:20: 651:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:652:37: 652:65 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:652:25: 652:34 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:25: 652:34 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:37: 652:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:39: 652:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:37: 652:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:40: 652:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:40: 652:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:40: 652:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:49: 652:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:50: 652:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:50: 652:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:63: 652:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:49: 652:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:652:37: 652:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:653:28: 653:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:653:32: 653:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:653:38: 653:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:654:27: 654:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:654:27: 654:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:654:27: 654:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:654:27: 654:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:651:17: 657:18 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:654:40: 654:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:654:27: 654:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:655:37: 655:57 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:655:25: 655:34 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:655:25: 655:34 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:655:37: 655:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:655:41: 655:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:655:42: 655:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:655:42: 655:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:655:55: 655:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:655:41: 655:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:655:37: 655:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:656:28: 656:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:656:32: 656:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:656:38: 656:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:660:25: 660:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:660:26: 660:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:660:25: 660:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:660:27: 660:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:660:27: 660:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:660:27: 660:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:661:24: 661:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:661:14: 661:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:661:13: 661:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:661:15: 661:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:661:15: 661:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:661:15: 661:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:663:40: 663:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut RowId,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:663:9: 663:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut HybridGrowingHashmapChar<RowId>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:663:9: 663:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:663:29: 663:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:666:5: 666:25 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:666:5: 666:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:666:5: 666:25 (#0),
                },
            ),
        ),
        ty: &'{erased} isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:666:6: 666:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:666:5: 666:25 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<isize, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:666:5: 666:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:666:5: 666:25 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:666:7: 666:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:666:5: 666:25 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:666:7: 666:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:666:7: 666:15 (#0),
            scope: scope[0],
        },
    },
]