[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:472:12: 472:30 (#0),
                    scope: scope[0],
                },
                kind: _5 = std::option::Option::<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::is_none(move _6) -> [return: bb1, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:472:12: 472:30 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:473:13: 473:28 (#0),
                    scope: scope[0],
                },
                kind: _7 = GrowingHashmapChar::<ValueType>::allocate(move _8) -> [return: bb3, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            _4 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:472:9: 474:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:472:9: 474:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
            StorageLive(_11),
            _11 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:476:21: 476:37 (#0),
                    scope: scope[0],
                },
                kind: _9 = GrowingHashmapChar::<ValueType>::lookup(move _10, move _11) -> [return: bb6, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:477:12: 479:22 (#0),
                    scope: scope[1],
                },
                kind: _18 = std::option::Option::<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::as_ref(move _19) -> [return: bb7, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = const "map should have been created above",
            _20 = &(*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:477:12: 480:58 (#0),
                    scope: scope[1],
                },
                kind: _17 = std::option::Option::<&std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::expect(move _18, move _20) -> [return: bb8, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = &(*_17),
            StorageDead(_20),
            StorageDead(_18),
            StorageLive(_22),
            _22 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:480:58: 480:61 (#0),
                    scope: scope[1],
                },
                kind: _15 = <std::vec::Vec<GrowingHashmapMapElemChar<ValueType>> as std::ops::Index<usize>>::index(move _16, move _22) -> [return: bb9, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_16),
            _14 = &((*_15).1: ValueType),
            StorageLive(_23),
            StorageLive(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:482:16: 482:34 (#0),
                    scope: scope[1],
                },
                kind: _24 = <ValueType as std::default::Default>::default() -> [return: bb10, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = &_24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:477:12: 482:34 (#0),
                    scope: scope[1],
                },
                kind: _13 = <ValueType as std::cmp::PartialEq>::eq(move _14, move _23) -> [return: bb11, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:477:12: 482:34 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _13) -> [0: bb25, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
            _25 = AddWithOverflow(((*_1).1: i32), const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:484:13: 484:27 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: i32), const 1_i32) -> [success: bb13, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: i32) = move (_25.0: i32),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = ((*_1).1: i32),
            _30 = MulWithOverflow(_29, const 3_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:486:16: 486:29 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_30.1: bool), "attempt to compute `{} * {}`, which would overflow", move _29, const 3_i32) -> [success: bb14, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = move (_30.0: i32),
            StorageDead(_29),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = ((*_1).2: i32),
            _34 = AddWithOverflow(_33, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:486:33: 486:48 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_34.1: bool), "attempt to compute `{} + {}`, which would overflow", move _33, const 1_i32) -> [success: bb15, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _32 = move (_34.0: i32),
            StorageDead(_33),
            _35 = MulWithOverflow(_32, const 2_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:486:33: 486:52 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_35.1: bool), "attempt to compute `{} * {}`, which would overflow", move _32, const 2_i32) -> [success: bb16, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move (_35.0: i32),
            StorageDead(_32),
            _27 = Ge(move _28, move _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:486:16: 486:52 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _27) -> [0: bb22, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_28),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut (*_1),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = ((*_1).0: i32),
            _41 = AddWithOverflow(_40, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:487:27: 487:42 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _40, const 1_i32) -> [success: bb18, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = move (_41.0: i32),
            StorageDead(_40),
            _42 = MulWithOverflow(_39, const 2_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:487:27: 487:46 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_42.1: bool), "attempt to compute `{} * {}`, which would overflow", move _39, const 2_i32) -> [success: bb19, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = move (_42.0: i32),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:487:17: 487:47 (#0),
                    scope: scope[1],
                },
                kind: _36 = GrowingHashmapChar::<ValueType>::grow(move _37, move _38) -> [return: bb20, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_1),
            StorageLive(_45),
            _45 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:488:21: 488:37 (#0),
                    scope: scope[1],
                },
                kind: _43 = GrowingHashmapChar::<ValueType>::lookup(move _44, move _45) -> [return: bb21, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            _9 = move _43,
            StorageDead(_43),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:486:13: 489:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_28),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:486:13: 489:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            _46 = AddWithOverflow(((*_1).0: i32), const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:491:13: 491:27 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: i32), const 1_i32) -> [success: bb24, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).0: i32) = move (_46.0: i32),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:477:9: 492:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:477:9: 492:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &mut ((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:494:25: 496:22 (#0),
                    scope: scope[1],
                },
                kind: _51 = std::option::Option::<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::as_mut(move _52) -> [return: bb27, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = const "map should have been created above",
            _53 = &(*_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:494:25: 497:58 (#0),
                    scope: scope[1],
                },
                kind: _50 = std::option::Option::<&mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::expect(move _51, move _53) -> [return: bb28, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _49 = &mut (*_50),
            StorageDead(_53),
            StorageDead(_51),
            StorageLive(_55),
            _55 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:497:58: 497:61 (#0),
                    scope: scope[1],
                },
                kind: _48 = <std::vec::Vec<GrowingHashmapMapElemChar<ValueType>> as std::ops::IndexMut<usize>>::index_mut(move _49, move _55) -> [return: bb29, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_49),
            _47 = &mut (*_48),
            FakeRead(ForLet(None), _47),
            StorageDead(_54),
            StorageLive(_56),
            _56 = _2,
            ((*_47).0: u32) = move _56,
            StorageDead(_56),
            StorageLive(_57),
            _57 = &mut ((*_47).1: ValueType),
            _3 = &mut (*_57),
            StorageDead(_50),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_9),
            _0 = &mut (*_3),
            StorageDead(_57),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:500:6: 500:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:471:5: 500:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:471:40: 471:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:471:16: 471:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:471:32: 471:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:471:27: 471:30 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:471:27: 471:30 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:471:27: 471:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:499:9: 499:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:472:9: 474:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:472:12: 472:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:472:12: 472:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:473:13: 473:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:473:13: 473:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:476:21: 476:37 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:476:13: 476:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:476:13: 476:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:476:21: 476:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:476:33: 476:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:477:9: 492:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:477:12: 482:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:477:12: 481:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} GrowingHashmapMapElemChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:480:58: 480:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:477:12: 480:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:477:12: 480:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:477:12: 479:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:477:12: 478:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:480:21: 480:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:480:21: 480:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:480:59: 480:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:482:16: 482:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:482:16: 482:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:484:13: 484:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:13: 489:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:16: 486:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:16: 486:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:16: 486:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:16: 486:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:33: 486:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:33: 486:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:34: 486:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:33: 486:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:486:33: 486:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:487:17: 487:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:487:17: 487:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:487:27: 487:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:487:27: 487:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:487:28: 487:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:487:27: 487:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:487:27: 487:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:488:21: 488:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:488:21: 488:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:488:33: 488:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:491:13: 491:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:494:20: 497:61 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:494:13: 494:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut GrowingHashmapMapElemChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:494:13: 494:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut GrowingHashmapMapElemChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:497:58: 497:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:494:25: 497:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:494:25: 497:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:494:25: 496:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:494:25: 495:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:497:21: 497:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:497:21: 497:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:497:59: 497:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:498:20: 498:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:499:9: 499:24 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:499:9: 499:24 (#0),
            scope: scope[0],
        },
    },
]