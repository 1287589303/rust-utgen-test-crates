[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = ((*_1).2: i32),
            _5 = AddWithOverflow(_4, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:535:28: 535:41 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_i32) -> [success: bb1, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_5.0: i32),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:536:9: 538:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:536:9: 538:10 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = _3,
            StorageLive(_10),
            _10 = _2,
            _8 = Le(move _9, move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:536:15: 536:35 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [0: bb6, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            _11 = const 1_i32 as u32 (IntToInt),
            _12 = Lt(move _11, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:537:13: 537:27 (#0),
                    scope: scope[1],
                },
                kind: assert(move _12, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb5, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = Shl(_3, const 1_i32),
            _7 = const (),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:536:9: 538:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_14),
            _6 = const (),
            StorageDead(_14),
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_16),
            _16 = ((*_1).0: i32),
            ((*_1).1: i32) = move _16,
            StorageDead(_16),
            StorageLive(_17),
            _17 = _3,
            _18 = SubWithOverflow(_17, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:541:21: 541:33 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _17, const 1_i32) -> [success: bb7, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).2: i32) = move (_18.0: i32),
            StorageDead(_17),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut ((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:544:13: 545:26 (#0),
                    scope: scope[1],
                },
                kind: _22 = std::option::Option::<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::as_mut(move _23) -> [return: bb8, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = const "callers have to ensure map is allocated",
            _24 = &(*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:544:13: 546:67 (#0),
                    scope: scope[1],
                },
                kind: _21 = std::option::Option::<&mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::expect(move _22, move _24) -> [return: bb9, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &mut (*_21),
            StorageDead(_24),
            StorageDead(_22),
            StorageLive(_26),
            StorageLive(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:547:18: 547:67 (#0),
                    scope: scope[1],
                },
                kind: _27 = <GrowingHashmapMapElemChar<ValueType> as std::default::Default>::default() -> [return: bb10, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            StorageLive(_29),
            _29 = _3,
            _28 = move _29 as usize (IntToInt),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#18),
                    scope: scope[1],
                },
                kind: _26 = std::vec::from_elem::<GrowingHashmapMapElemChar<ValueType>>(move _27, move _28) -> [return: bb11, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:543:23: 548:10 (#0),
                    scope: scope[1],
                },
                kind: _19 = std::mem::replace::<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>(move _20, move _26) -> [return: bb12, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_20),
            FakeRead(ForLet(None), _19),
            StorageDead(_25),
            StorageDead(_21),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = move _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:21: 550:28 (#87),
                    scope: scope[2],
                },
                kind: _31 = <std::vec::Vec<GrowingHashmapMapElemChar<ValueType>> as std::iter::IntoIterator>::into_iter(move _32) -> [return: bb13, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            PlaceMention(_31),
            StorageLive(_33),
            _33 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:9: 561:10 (#86),
                    scope: scope[3],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:9: 561:10 (#86),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb15, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut _33,
            _36 = &mut (*_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:21: 550:28 (#87),
                    scope: scope[3],
                },
                kind: _35 = <std::vec::IntoIter<GrowingHashmapMapElemChar<ValueType>> as std::iter::Iterator>::next(move _36) -> [return: bb16, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            PlaceMention(_35),
            _38 = discriminant(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:21: 550:28 (#87),
                    scope: scope[3],
                },
                kind: switchInt(move _38) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:21: 550:28 (#87),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:9: 561:10 (#86),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = move ((_35 as Some).0: GrowingHashmapMapElemChar<ValueType>),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &(_40.1: ValueType),
            StorageLive(_43),
            StorageLive(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:551:30: 551:48 (#0),
                    scope: scope[4],
                },
                kind: _44 = <ValueType as std::default::Default>::default() -> [return: bb21, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:9: 561:10 (#86),
                    scope: scope[3],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = &_44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:551:16: 551:48 (#0),
                    scope: scope[4],
                },
                kind: _41 = <ValueType as std::cmp::PartialEq>::ne(move _42, move _43) -> [return: bb22, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:551:16: 551:48 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _41) -> [0: bb31, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &(*_1),
            StorageLive(_47),
            _47 = (_40.0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:552:25: 552:46 (#0),
                    scope: scope[4],
                },
                kind: _45 = GrowingHashmapChar::<ValueType>::lookup(move _46, move _47) -> [return: bb24, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            FakeRead(ForLet(None), _45),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &mut ((*_1).3: std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:553:37: 553:54 (#0),
                    scope: scope[5],
                },
                kind: _52 = std::option::Option::<std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::as_mut(move _53) -> [return: bb25, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = const "map created above",
            _54 = &(*_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:553:37: 553:82 (#0),
                    scope: scope[5],
                },
                kind: _51 = std::option::Option::<&mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType>>>::expect(move _52, move _54) -> [return: bb26, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = &mut (*_51),
            StorageDead(_54),
            StorageDead(_52),
            StorageLive(_56),
            _56 = _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:553:82: 553:85 (#0),
                    scope: scope[5],
                },
                kind: _49 = <std::vec::Vec<GrowingHashmapMapElemChar<ValueType>> as std::ops::IndexMut<usize>>::index_mut(move _50, move _56) -> [return: bb27, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_50),
            _48 = &mut (*_49),
            FakeRead(ForLet(None), _48),
            StorageDead(_55),
            StorageLive(_57),
            _57 = (_40.0: u32),
            ((*_48).0: u32) = move _57,
            StorageDead(_57),
            StorageLive(_58),
            _58 = (_40.1: ValueType),
            ((*_48).1: ValueType) = move _58,
            StorageDead(_58),
            _59 = SubWithOverflow(((*_1).0: i32), const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:556:17: 556:31 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_59.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).0: i32), const 1_i32) -> [success: bb28, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).0: i32) = move (_59.0: i32),
            StorageLive(_60),
            StorageLive(_61),
            _61 = ((*_1).0: i32),
            _60 = Eq(move _61, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:557:20: 557:34 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _60) -> [0: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            _30 = const (),
            StorageDead(_60),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_45),
            StorageDead(_41),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            _34 = const (),
            StorageDead(_60),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:551:13: 560:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_42),
            _34 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:551:13: 560:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_34),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:9: 561:10 (#86),
                    scope: scope[3],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:561:9: 561:10 (#86),
                    scope: scope[2],
                },
                kind: drop(_33) -> [return: bb34, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:561:9: 561:10 (#86),
                    scope: scope[2],
                },
                kind: drop(_31) -> [return: bb35, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_63),
            _63 = ((*_1).1: i32),
            ((*_1).0: i32) = move _63,
            StorageDead(_63),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:564:5: 564:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb36, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:564:6: 564:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:561:9: 561:10 (#86),
                    scope: scope[2],
                },
                kind: drop(_33) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:561:9: 561:10 (#86),
                    scope: scope[2],
                },
                kind: drop(_31) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:550:27: 550:28 (#87),
                    scope: scope[2],
                },
                kind: drop(_32) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:564:5: 564:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:548:9: 548:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_26) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:534:5: 564:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:534:38: 534:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:534:13: 534:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:534:34: 534:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:534:24: 534:32 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:534:24: 534:32 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:534:24: 534:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:535:28: 535:41 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:535:13: 535:25 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:535:13: 535:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:535:28: 535:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:535:28: 535:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:536:9: 538:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:534:5: 564:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:536:9: 538:10 (#84),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:536:15: 536:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:536:9: 538:10 (#84),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:536:15: 536:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:536:9: 538:10 (#84),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:536:27: 536:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:537:13: 537:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:537:13: 537:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:536:9: 538:10 (#84),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:536:9: 538:10 (#84),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:536:9: 538:10 (#84),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:536:9: 538:10 (#84),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:540:21: 540:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:541:21: 541:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:541:21: 541:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:543:23: 548:10 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:543:13: 543:20 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:543:13: 543:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:544:13: 546:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:544:13: 546:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:544:13: 545:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:544:13: 544:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:546:25: 546:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:546:25: 546:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#18),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: GrowingHashmapMapElemChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:547:18: 547:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:547:69: 547:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:547:69: 547:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:9: 561:10 (#86),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::IntoIter<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:21: 550:28 (#87),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:21: 550:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                src/lib.rs:550:21: 550:28 (#87),
                            ),
                        ),
                        pat_span: src/lib.rs:550:21: 550:28 (#87),
                    },
                ),
            ),
        ),
        ty: std::vec::IntoIter<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:21: 550:28 (#87),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:21: 550:28 (#87),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<GrowingHashmapMapElemChar<ValueType/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:21: 550:28 (#87),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:21: 550:28 (#87),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:21: 550:28 (#87),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:9: 561:10 (#86),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:9: 561:10 (#86),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _35,
                                ),
                                src/lib.rs:550:21: 550:28 (#87),
                            ),
                        ),
                        pat_span: src/lib.rs:550:13: 550:17 (#88),
                    },
                ),
            ),
        ),
        ty: GrowingHashmapMapElemChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:550:13: 550:17 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:551:13: 560:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:551:16: 551:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:551:13: 560:14 (#0),
                },
            ),
        ),
        ty: &'{erased} ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:551:16: 551:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:551:13: 560:14 (#0),
                },
            ),
        ),
        ty: &'{erased} ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:551:30: 551:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:551:13: 560:14 (#0),
                },
            ),
        ),
        ty: ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:551:30: 551:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:552:25: 552:46 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:552:21: 552:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:552:21: 552:22 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} GrowingHashmapChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:552:25: 552:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:552:37: 552:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:553:32: 553:85 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:553:21: 553:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut GrowingHashmapMapElemChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:21: 553:29 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut GrowingHashmapMapElemChar<ValueType/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:82: 553:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:37: 553:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:37: 553:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:37: 553:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<std::vec::Vec<GrowingHashmapMapElemChar<ValueType/#0>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:37: 553:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:62: 553:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:62: 553:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:553:83: 553:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:554:32: 554:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ValueType/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:555:34: 555:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:556:17: 556:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:557:17: 559:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:557:20: 557:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:557:17: 559:18 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:557:20: 557:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:557:17: 559:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:557:35: 559:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:563:21: 563:30 (#0),
            scope: scope[0],
        },
    },
]