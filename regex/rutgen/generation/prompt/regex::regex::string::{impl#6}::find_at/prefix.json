{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\nimpl Regex {\n    #[inline]\n    pub fn shortest_match(&self, haystack: &str) -> Option<usize> {}\n    #[inline]\n    pub fn shortest_match_at(&self, haystack: &str, start: usize) -> Option<usize> {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {}\n    #[inline]\n    pub fn find_at<'h>(&self, haystack: &'h str, start: usize) -> Option<Match<'h>> {\n        let input = Input::new(haystack).span(start..haystack.len());\n        self.meta.search(&input).map(|m| Match::new(haystack, m.start(), m.end()))\n    }\n    #[inline]\n    pub fn captures_at<'h>(\n        &self,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_read<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_read_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn read_captures_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the same as [`Regex::find`], but starts the search at the given\n/// offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = \"eschew\";\n/// // We get a match here, but it's probably not intended.\n/// assert_eq!(re.find(&hay[2..]).map(|m| m.range()), Some(0..4));\n/// // No match because the  assertions take the context into account.\n/// assert_eq!(re.find_at(hay, 2), None);\n/// ```\n1105 pub fn find_at<'h>(\n1106     &self,\n1107     haystack: &'h str,\n1108     start: usize,\n1109 ) -> Option<Match<'h>> {\n1110     let input = Input::new(haystack).span(start..haystack.len());\n1111     self.meta\n1112         .search(&input)\n1113         .map(|m| Match::new(haystack, m.start(), m.end()))\n1114 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}