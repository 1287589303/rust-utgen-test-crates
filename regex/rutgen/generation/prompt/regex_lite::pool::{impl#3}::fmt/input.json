{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/pool.rs\n// crate name is regex_lite\npub(crate) type CachePool = Pool<pikevm::Cache, CachePoolFn>;\npub(crate) type CachePoolGuard<'a> = PoolGuard<'a, pikevm::Cache, CachePoolFn>;\npub(crate) type CachePoolFn = Box<\n    dyn Fn() -> pikevm::Cache + Send + Sync + UnwindSafe + RefUnwindSafe,\n>;\nuse core::panic::{RefUnwindSafe, UnwindSafe};\nuse alloc::{boxed::Box, vec, vec::Vec};\nuse crate::pikevm;\nuse std::sync::Mutex;\npub(crate) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\nimpl<T: core::fmt::Debug, F> core::fmt::Debug for Pool<T, F> {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        f.debug_struct(\"Pool\").field(\"stack\", &self.stack).finish()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n75 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n76     f.debug_struct(\"Pool\").field(\"stack\", &self.stack).finish()\n77 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}