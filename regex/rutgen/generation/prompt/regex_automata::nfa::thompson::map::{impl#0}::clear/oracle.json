{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/map.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::Transition,\n    util::{\n        int::{Usize, U64},\n        primitives::StateID,\n    },\n};\nconst PRIME: u64 = 1099511628211;\nconst INIT: u64 = 14695981039346656037;\n#[derive(Clone, Debug)]\npub struct Utf8BoundedMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    ///\n    /// This makes it possible to clear the map by simply incrementing the\n    /// version number instead of actually deallocating any storage.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8BoundedEntry>,\n}\n#[derive(Clone, Debug, Default)]\nstruct Utf8BoundedEntry {\n    /// The version of the map used to produce this entry. If this entry's\n    /// version does not match the current version of the map, then the map\n    /// should behave as if this entry does not exist.\n    version: u16,\n    /// The key, which is a sorted sequence of non-overlapping NFA transitions.\n    key: Vec<Transition>,\n    /// The state ID corresponding to the state containing the transitions in\n    /// this entry.\n    val: StateID,\n}\nimpl Utf8BoundedMap {\n    pub fn new(capacity: usize) -> Utf8BoundedMap {}\n    pub fn clear(&mut self) {\n        if self.map.is_empty() {\n            self.map = vec![Utf8BoundedEntry::default(); self.capacity];\n        } else {\n            self.version = self.version.wrapping_add(1);\n            if self.version == 0 {\n                self.map = vec![Utf8BoundedEntry::default(); self.capacity];\n            }\n        }\n    }\n    pub fn hash(&self, key: &[Transition]) -> usize {}\n    pub fn get(&mut self, key: &[Transition], hash: usize) -> Option<StateID> {}\n    pub fn set(&mut self, key: Vec<Transition>, hash: usize, state_id: StateID) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Clear this map of all entries, but permit the reuse of allocation\n/// if possible.\n///\n/// This must be called before the map can be used.\n128 pub fn clear(&mut self) {\n129     if self.map.is_empty() {\n130         self.map = vec![Utf8BoundedEntry::default(); self.capacity];\n131     } else {\n132         self.version = self.version.wrapping_add(1);\n133         // If we loop back to version 0, then we forcefully clear the\n134         // entire map. Otherwise, it might be possible to incorrectly\n135         // match entries used to generate other NFAs.\n136         if self.version == 0 {\n137             self.map = vec![Utf8BoundedEntry::default(); self.capacity];\n138         }\n139     }\n140 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}