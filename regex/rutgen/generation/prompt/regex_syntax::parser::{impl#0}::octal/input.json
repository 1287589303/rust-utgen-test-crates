{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/parser.rs\n// crate name is regex_syntax\nuse crate::{ast, hir, Error};\n#[derive(Clone, Debug, Default)]\npub struct ParserBuilder {\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct ParserBuilder {\n    ignore_whitespace: bool,\n    nest_limit: u32,\n    octal: bool,\n    empty_min_range: bool,\n}\n#[derive(Clone, Debug)]\npub struct TranslatorBuilder {\n    utf8: bool,\n    line_terminator: u8,\n    flags: Flags,\n}\nimpl ParserBuilder {\n    pub fn new() -> ParserBuilder {}\n    pub fn build(&self) -> Parser {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut ParserBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.octal = yes;\n        self\n    }\n    pub fn utf8(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut ParserBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn unicode(&mut self, yes: bool) -> &mut ParserBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether to support octal syntax or not.\n///\n/// Octal syntax is a little-known way of uttering Unicode codepoints in\n/// a regular expression. For example, `a`, `\\x61`, `\\u0061` and\n/// `\\141` are all equivalent regular expressions, where the last example\n/// shows octal syntax.\n///\n/// While supporting octal syntax isn't in and of itself a problem, it does\n/// make good error messages harder. That is, in PCRE based regex engines,\n/// syntax like `\\0` invokes a backreference, which is explicitly\n/// unsupported in Rust's regex engine. However, many users expect it to\n/// be supported. Therefore, when octal support is disabled, the error\n/// message will explicitly mention that backreferences aren't supported.\n///\n/// Octal syntax is disabled by default.\n86 pub fn octal(&mut self, yes: bool) -> &mut ParserBuilder {\n87     self.ast.octal(yes);\n88     self\n89 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}