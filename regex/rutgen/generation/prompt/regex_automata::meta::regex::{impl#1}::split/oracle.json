{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Debug)]\npub struct Regex {\n    /// The actual regex implementation.\n    imp: Arc<RegexI>,\n    /// A thread safe pool of caches.\n    ///\n    /// For the higher level search APIs, a `Cache` is automatically plucked\n    /// from this pool before running a search. The lower level `with` methods\n    /// permit the caller to provide their own cache, thereby bypassing\n    /// accesses to this pool.\n    ///\n    /// Note that we put this outside the `Arc` so that cloning a `Regex`\n    /// results in creating a fresh `CachePool`. This in turn permits callers\n    /// to clone regexes into separate threads where each such regex gets\n    /// the pool's \"thread owner\" optimization. Otherwise, if one shares the\n    /// `Regex` directly, then the pool will go through a slower mutex path for\n    /// all threads except for the \"owner.\"\n    pool: CachePool,\n}\n#[derive(Debug)]\nstruct RegexI {\n    /// The core matching engine.\n    ///\n    /// Why is this reference counted when RegexI is already wrapped in an Arc?\n    /// Well, we need to capture this in a closure to our `Pool` below in order\n    /// to create new `Cache` values when needed. So since it needs to be in\n    /// two places, we make it reference counted.\n    ///\n    /// We make `RegexI` itself reference counted too so that `Regex` itself\n    /// stays extremely small and very cheap to clone.\n    strat: Arc<dyn Strategy>,\n    /// Metadata about the regexes driving the strategy. The metadata is also\n    /// usually stored inside the strategy too, but we put it here as well\n    /// so that we can get quick access to it (without virtual calls) before\n    /// executing the regex engine. For example, we use this metadata to\n    /// detect a subset of cases where we know a match is impossible, and can\n    /// thus avoid calling into the strategy at all.\n    ///\n    /// Since `RegexInfo` is stored in multiple places, it is also reference\n    /// counted.\n    info: RegexInfo,\n}\n#[derive(Debug)]\npub struct Split<'r, 'h> {\n    finder: FindMatches<'r, 'h>,\n    last: usize,\n}\n#[derive(Debug)]\npub struct FindMatches<'r, 'h> {\n    re: &'r Regex,\n    cache: CachePoolGuard<'r>,\n    it: iter::Searcher<'h>,\n}\nimpl Regex {\n    #[inline]\n    pub fn is_match<'h, I: Into<Input<'h>>>(&self, input: I) -> bool {}\n    #[inline]\n    pub fn find<'h, I: Into<Input<'h>>>(&self, input: I) -> Option<Match> {}\n    #[inline]\n    pub fn captures<'h, I: Into<Input<'h>>>(&self, input: I, caps: &mut Captures) {}\n    #[inline]\n    pub fn find_iter<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n    ) -> FindMatches<'r, 'h> {\n        let cache = self.pool.get();\n        let it = iter::Searcher::new(input.into());\n        FindMatches { re: self, cache, it }\n    }\n    #[inline]\n    pub fn captures_iter<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n    ) -> CapturesMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h, I: Into<Input<'h>>>(&'r self, input: I) -> Split<'r, 'h> {\n        Split {\n            finder: self.find_iter(input),\n            last: 0,\n        }\n    }\n    pub fn splitn<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n        limit: usize,\n    ) -> SplitN<'r, 'h> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator of spans of the haystack given, delimited by a\n/// match of the regex. Namely, each element of the iterator corresponds to\n/// a part of the haystack that *isn't* matched by the regular expression.\n///\n/// # Example\n///\n/// To split a string delimited by arbitrary amounts of spaces or tabs:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"[ \\t]+\")?;\n/// let hay = \"a b \\t  c\\td    e\";\n/// let fields: Vec<&str> = re.split(hay).map(|span| &hay[span]).collect();\n/// assert_eq!(fields, vec![\"a\", \"b\", \"c\", \"d\", \"e\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: more cases\n///\n/// Basic usage:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\" \")?;\n/// let hay = \"Mary had a little lamb\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"lionXXtigerXleopard\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"lion\", \"\", \"tiger\", \"leopard\"]);\n///\n/// let re = Regex::new(r\"::\")?;\n/// let hay = \"lion::tiger::leopard\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"lion\", \"tiger\", \"leopard\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// If a haystack contains multiple contiguous matches, you will end up\n/// with empty spans yielded by the iterator:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"XXXXaXXbXc\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n///\n/// let re = Regex::new(r\"/\")?;\n/// let hay = \"(///)\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"(\", \"\", \"\", \")\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Separators at the start or end of a haystack are neighbored by empty\n/// spans.\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"0\")?;\n/// let hay = \"010\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"1\", \"\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// When the empty string is used as a regex, it splits at every valid\n/// UTF-8 boundary by default (which includes the beginning and end of the\n/// haystack):\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"\")?;\n/// let hay = \"rust\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n///\n/// // Splitting by an empty string is UTF-8 aware by default!\n/// let re = Regex::new(r\"\")?;\n/// let hay = \"☃\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"☃\", \"\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// But note that UTF-8 mode for empty strings can be disabled, which will\n/// then result in a match at every byte offset in the haystack,\n/// including between every UTF-8 code unit.\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::builder()\n///     .configure(Regex::config().utf8_empty(false))\n///     .build(r\"\")?;\n/// let hay = \"☃\".as_bytes();\n/// let got: Vec<&[u8]> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\n///     // Writing byte string slices is just brutal. The problem is that\n///     // b\"foo\" has type &[u8; 3] instead of &[u8].\n///     &[][..], &[b'\\xE2'][..], &[b'\\x98'][..], &[b'\\x83'][..], &[][..],\n/// ]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Contiguous separators (commonly shows up with whitespace), can lead to\n/// possibly surprising behavior. For example, this code is correct:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\" \")?;\n/// let hay = \"    a  b c\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, you'd want\n/// to match contiguous space characters:\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\" +\")?;\n/// let hay = \"    a  b c\";\n/// let got: Vec<&str> = re.split(hay).map(|sp| &hay[sp]).collect();\n/// // N.B. This does still include a leading empty span because ' +'\n/// // matches at the beginning of the haystack.\n/// assert_eq!(got, vec![\"\", \"a\", \"b\", \"c\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n815 pub fn split<'r, 'h, I: Into<Input<'h>>>(\n816     &'r self,\n817     input: I,\n818 ) -> Split<'r, 'h> {\n819     Split { finder: self.find_iter(input), last: 0 }\n820 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}