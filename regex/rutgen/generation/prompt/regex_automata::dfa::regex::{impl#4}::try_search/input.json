{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/regex.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse alloc::vec::Vec;\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa::dense::BuildError;\nuse crate::{\n    dfa::{automaton::Automaton, dense},\n    util::{iter, search::Input},\n    Anchored, Match, MatchError,\n};\n#[cfg(feature = \"alloc\")]\nuse crate::{\n    dfa::{sparse, StartKind},\n    util::search::MatchKind,\n};\npub unsafe trait Automaton {\n    fn next_state(&self, current: StateID, input: u8) -> StateID;\n    unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID;\n    fn next_eoi_state(&self, current: StateID) -> StateID;\n    fn start_state(&self, config: &start::Config) -> Result<StateID, StartError>;\n    fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    #[inline]\n    fn universal_start_state(&self, _mode: Anchored) -> Option<StateID>;\n    fn is_special_state(&self, id: StateID) -> bool;\n    fn is_dead_state(&self, id: StateID) -> bool;\n    fn is_quit_state(&self, id: StateID) -> bool;\n    fn is_match_state(&self, id: StateID) -> bool;\n    fn is_start_state(&self, id: StateID) -> bool;\n    fn is_accel_state(&self, id: StateID) -> bool;\n    fn pattern_len(&self) -> usize;\n    fn match_len(&self, id: StateID) -> usize;\n    fn match_pattern(&self, id: StateID, index: usize) -> PatternID;\n    fn has_empty(&self) -> bool;\n    fn is_utf8(&self) -> bool;\n    fn is_always_start_anchored(&self) -> bool;\n    #[inline]\n    fn accelerator(&self, _id: StateID) -> &[u8];\n    #[inline]\n    fn get_prefilter(&self) -> Option<&Prefilter>;\n    #[inline]\n    fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_overlapping_fwd(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[inline]\n    fn try_search_overlapping_rev(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    fn try_which_overlapping_matches(\n        &self,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) -> Result<(), MatchError>;\n}\npub(crate) trait U16 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn high_u8(self) -> u8;\n}\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn high_u16(self) -> u16;\n}\npub(crate) trait Usize {\n    fn as_u8(self) -> u8;\n    fn as_u16(self) -> u16;\n    fn as_u32(self) -> u32;\n    fn as_u64(self) -> u64;\n}\npub(crate) trait U8 {\n    fn as_usize(self) -> usize;\n}\npub(crate) trait U64 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn low_u32(self) -> u32;\n    fn high_u32(self) -> u32;\n}\npub(crate) trait I32 {\n    fn as_usize(self) -> usize;\n    fn to_bits(self) -> u32;\n    fn from_bits(n: u32) -> i32;\n}\npub(crate) trait Pointer {\n    fn as_usize(self) -> usize;\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl<A: Automaton> Regex<A> {\n    #[inline]\n    pub fn try_search(&self, input: &Input<'_>) -> Result<Option<Match>, MatchError> {\n        let (fwd, rev) = (self.forward(), self.reverse());\n        let end = match fwd.try_search_fwd(input)? {\n            None => return Ok(None),\n            Some(end) => end,\n        };\n        if input.start() == end.offset() {\n            return Ok(Some(Match::new(end.pattern(), end.offset()..end.offset())));\n        }\n        if self.is_anchored(input) {\n            return Ok(Some(Match::new(end.pattern(), input.start()..end.offset())));\n        }\n        let revsearch = input\n            .clone()\n            .span(input.start()..end.offset())\n            .anchored(Anchored::Yes)\n            .earliest(false);\n        let start = rev\n            .try_search_rev(&revsearch)?\n            .expect(\"reverse search must match if forward search does\");\n        assert_eq!(\n            start.pattern(), end.pattern(),\n            \"forward and reverse search must match same pattern\",\n        );\n        assert!(start.offset() <= end.offset());\n        Ok(Some(Match::new(end.pattern(), start.offset()..end.offset())))\n    }\n    fn is_anchored(&self, input: &Input<'_>) -> bool {}\n}\nimpl HalfMatch {\n    #[inline]\n    pub fn new(pattern: PatternID, offset: usize) -> HalfMatch {}\n    #[inline]\n    pub fn must(pattern: usize, offset: usize) -> HalfMatch {}\n    #[inline]\n    pub fn pattern(&self) -> PatternID {\n        self.pattern\n    }\n    #[inline]\n    pub fn offset(&self) -> usize {\n        self.offset\n    }\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {\n        self.set_anchored(mode);\n        self\n    }\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {\n        self.set_earliest(yes);\n        self\n    }\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.get_span().start\n    }\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the start and end offset of the leftmost match. If no match\n/// exists, then `None` is returned.\n///\n/// This is like [`Regex::find`] but with two differences:\n///\n/// 1. It is not generic over `Into<Input>` and instead accepts a\n/// `&Input`. This permits reusing the same `Input` for multiple searches\n/// without needing to create a new one. This _may_ help with latency.\n/// 2. It returns an error if the search could not complete where as\n/// [`Regex::find`] will panic.\n///\n/// # Errors\n///\n/// This routine errors if the search could not complete. This can occur\n/// in the following circumstances:\n///\n/// * The configuration of the DFA may permit it to \"quit\" the search.\n/// For example, setting quit bytes or enabling heuristic support for\n/// Unicode word boundaries. The default configuration does not enable any\n/// option that could result in the DFA quitting.\n/// * When the provided `Input` configuration is not supported. For\n/// example, by providing an unsupported anchor mode.\n///\n/// When a search returns an error, callers cannot know whether a match\n/// exists or not.\n475 pub fn try_search(\n476     &self,\n477     input: &Input<'_>,\n478 ) -> Result<Option<Match>, MatchError> {\n479     let (fwd, rev) = (self.forward(), self.reverse());\n480     let end = match fwd.try_search_fwd(input)? {\n481         None => return Ok(None),\n482         Some(end) => end,\n483     };\n484     // This special cases an empty match at the beginning of the search. If\n485     // our end matches our start, then since a reverse DFA can't match past\n486     // the start, it must follow that our starting position is also our end\n487     // position. So short circuit and skip the reverse search.\n488     if input.start() == end.offset() {\n489         return Ok(Some(Match::new(\n490             end.pattern(),\n491             end.offset()..end.offset(),\n492         )));\n493     }\n494     // We can also skip the reverse search if we know our search was\n495     // anchored. This occurs either when the input config is anchored or\n496     // when we know the regex itself is anchored. In this case, we know the\n497     // start of the match, if one is found, must be the start of the\n498     // search.\n499     if self.is_anchored(input) {\n500         return Ok(Some(Match::new(\n501             end.pattern(),\n502             input.start()..end.offset(),\n503         )));\n504     }\n505     // N.B. I have tentatively convinced myself that it isn't necessary\n506     // to specify the specific pattern for the reverse search since the\n507     // reverse search will always find the same pattern to match as the\n508     // forward search. But I lack a rigorous proof. Why not just provide\n509     // the pattern anyway? Well, if it is needed, then leaving it out\n510     // gives us a chance to find a witness. (Also, if we don't need to\n511     // specify the pattern, then we don't need to build the reverse DFA\n512     // with 'starts_for_each_pattern' enabled.)\n513     //\n514     // We also need to be careful to disable 'earliest' for the reverse\n515     // search, since it could be enabled for the forward search. In the\n516     // reverse case, to satisfy \"leftmost\" criteria, we need to match\n517     // as much as we can. We also need to be careful to make the search\n518     // anchored. We don't want the reverse search to report any matches\n519     // other than the one beginning at the end of our forward search.\n520     let revsearch = input\n521         .clone()\n522         .span(input.start()..end.offset())\n523         .anchored(Anchored::Yes)\n524         .earliest(false);\n525     let start = rev\n526         .try_search_rev(&revsearch)?\n527         .expect(\"reverse search must match if forward search does\");\n528     assert_eq!(\n529         start.pattern(),\n530         end.pattern(),\n531         \"forward and reverse search must match same pattern\",\n532     );\n533     assert!(start.offset() <= end.offset());\n534     Ok(Some(Match::new(end.pattern(), start.offset()..end.offset())))\n535 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}