{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Debug)]\nstruct PreferenceTrie {\n    /// The states in this trie. The index of a state in this vector is its ID.\n    states: Vec<State>,\n    /// This vec indicates which states are match states. It always has\n    /// the same length as `states` and is indexed by the same state ID.\n    /// A state with identifier `sid` is a match state if and only if\n    /// `matches[sid].is_some()`. The option contains the index of the literal\n    /// corresponding to the match. The index is offset by 1 so that it fits in\n    /// a NonZeroUsize.\n    matches: Vec<Option<NonZeroUsize>>,\n    /// The index to allocate to the next literal added to this trie. Starts at\n    /// 1 and increments by 1 for every literal successfully added to the trie.\n    next_literal_index: usize,\n}\n#[derive(Debug, Default)]\nstruct State {\n    /// Sparse representation of the transitions out of this state. Transitions\n    /// are sorted by byte. There is at most one such transition for any\n    /// particular byte.\n    trans: Vec<(u8, usize)>,\n}\nimpl PreferenceTrie {\n    fn minimize(literals: &mut Vec<Literal>, keep_exact: bool) {}\n    fn insert(&mut self, bytes: &[u8]) -> Result<usize, usize> {}\n    fn root(&mut self) -> usize {\n        if !self.states.is_empty() { 0 } else { self.create_state() }\n    }\n    fn create_state(&mut self) -> usize {\n        let id = self.states.len();\n        self.states.push(State::default());\n        self.matches.push(None);\n        id\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the root state ID, and if it doesn't exist, creates it.\n2295 fn root(&mut self) -> usize {\n2296     if !self.states.is_empty() {\n2297         0\n2298     } else {\n2299         self.create_state()\n2300     }\n2301 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}