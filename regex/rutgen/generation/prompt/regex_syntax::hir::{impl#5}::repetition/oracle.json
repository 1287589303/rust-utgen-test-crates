{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Repetition {\n    /// The minimum range of the repetition.\n    ///\n    /// Note that special cases like `?`, `+` and `*` all get translated into\n    /// the ranges `{0,1}`, `{1,}` and `{0,}`, respectively.\n    ///\n    /// When `min` is zero, this expression can match the empty string\n    /// regardless of what its sub-expression is.\n    pub min: u32,\n    /// The maximum range of the repetition.\n    ///\n    /// Note that when `max` is `None`, `min` acts as a lower bound but where\n    /// there is no upper bound. For something like `x{5}` where the min and\n    /// max are equivalent, `min` will be set to `5` and `max` will be set to\n    /// `Some(5)`.\n    pub max: Option<u32>,\n    /// Whether this repetition operator is greedy or not. A greedy operator\n    /// will match as much as it can. A non-greedy operator will match as\n    /// little as it can.\n    ///\n    /// Typically, operators are greedy by default and are only non-greedy when\n    /// a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is\n    /// not. However, this can be inverted via the `U` \"ungreedy\" flag.\n    pub greedy: bool,\n    /// The expression being repeated.\n    pub sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    #[inline]\n    pub fn empty() -> Hir {\n        let props = Properties::empty();\n        Hir { kind: HirKind::Empty, props }\n    }\n    #[inline]\n    pub fn fail() -> Hir {}\n    #[inline]\n    pub fn literal<B: Into<Box<[u8]>>>(lit: B) -> Hir {}\n    #[inline]\n    pub fn class(class: Class) -> Hir {}\n    #[inline]\n    pub fn look(look: Look) -> Hir {}\n    #[inline]\n    pub fn repetition(mut rep: Repetition) -> Hir {\n        if rep.sub.properties().maximum_len() == Some(0) {\n            rep.min = cmp::min(rep.min, 1);\n            rep.max = rep.max.map(|n| cmp::min(n, 1)).or(Some(1));\n        }\n        if rep.min == 0 && rep.max == Some(0) {\n            return Hir::empty();\n        } else if rep.min == 1 && rep.max == Some(1) {\n            return *rep.sub;\n        }\n        let props = Properties::repetition(&rep);\n        Hir {\n            kind: HirKind::Repetition(rep),\n            props,\n        }\n    }\n    #[inline]\n    pub fn capture(capture: Capture) -> Hir {}\n    pub fn concat(subs: Vec<Hir>) -> Hir {}\n    pub fn alternation(subs: Vec<Hir>) -> Hir {}\n    #[inline]\n    pub fn dot(dot: Dot) -> Hir {}\n}\nimpl Properties {\n    fn empty() -> Properties {}\n    fn literal(lit: &Literal) -> Properties {}\n    fn class(class: &Class) -> Properties {}\n    fn look(look: Look) -> Properties {}\n    fn repetition(rep: &Repetition) -> Properties {\n        let p = rep.sub.properties();\n        let minimum_len = p\n            .minimum_len()\n            .map(|child_min| {\n                let rep_min = usize::try_from(rep.min).unwrap_or(usize::MAX);\n                child_min.saturating_mul(rep_min)\n            });\n        let maximum_len = rep\n            .max\n            .and_then(|rep_max| {\n                let rep_max = usize::try_from(rep_max).ok()?;\n                let child_max = p.maximum_len()?;\n                child_max.checked_mul(rep_max)\n            });\n        let mut inner = PropertiesI {\n            minimum_len,\n            maximum_len,\n            look_set: p.look_set(),\n            look_set_prefix: LookSet::empty(),\n            look_set_suffix: LookSet::empty(),\n            look_set_prefix_any: p.look_set_prefix_any(),\n            look_set_suffix_any: p.look_set_suffix_any(),\n            utf8: p.is_utf8(),\n            explicit_captures_len: p.explicit_captures_len(),\n            static_explicit_captures_len: p.static_explicit_captures_len(),\n            literal: false,\n            alternation_literal: false,\n        };\n        if rep.min > 0 {\n            inner.look_set_prefix = p.look_set_prefix();\n            inner.look_set_suffix = p.look_set_suffix();\n        }\n        if rep.min == 0\n            && inner.static_explicit_captures_len.map_or(false, |len| len > 0)\n        {\n            if rep.max == Some(0) {\n                inner.static_explicit_captures_len = Some(0);\n            } else {\n                inner.static_explicit_captures_len = None;\n            }\n        }\n        Properties(Box::new(inner))\n    }\n    fn capture(capture: &Capture) -> Properties {}\n    fn concat(concat: &[Hir]) -> Properties {}\n    fn alternation(alts: &[Hir]) -> Properties {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a repetition HIR expression.\n378 pub fn repetition(mut rep: Repetition) -> Hir {\n379     // If the sub-expression of a repetition can only match the empty\n380     // string, then we force its maximum to be at most 1.\n381     if rep.sub.properties().maximum_len() == Some(0) {\n382         rep.min = cmp::min(rep.min, 1);\n383         rep.max = rep.max.map(|n| cmp::min(n, 1)).or(Some(1));\n384     }\n385     // The regex 'a{0}' is always equivalent to the empty regex. This is\n386     // true even when 'a' is an expression that never matches anything\n387     // (like '\\P{any}').\n388     //\n389     // Additionally, the regex 'a{1}' is always equivalent to 'a'.\n390     if rep.min == 0 && rep.max == Some(0) {\n391         return Hir::empty();\n392     } else if rep.min == 1 && rep.max == Some(1) {\n393         return *rep.sub;\n394     }\n395     let props = Properties::repetition(&rep);\n396     Hir { kind: HirKind::Repetition(rep), props }\n397 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}