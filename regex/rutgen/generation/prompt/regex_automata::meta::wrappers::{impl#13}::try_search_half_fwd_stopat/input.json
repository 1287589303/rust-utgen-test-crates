{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/wrappers.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError},\n        regex::RegexInfo,\n    },\n    nfa::thompson::{pikevm, NFA},\n    util::{prefilter::Prefilter, primitives::NonMaxUsize},\n    HalfMatch, Input, Match, MatchKind, PatternID, PatternSet,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa;\n#[cfg(feature = \"dfa-onepass\")]\nuse crate::dfa::onepass;\n#[cfg(feature = \"hybrid\")]\nuse crate::hybrid;\n#[cfg(feature = \"nfa-backtrack\")]\nuse crate::nfa::thompson::backtrack;\n#[derive(Debug)]\npub(crate) struct DFAEngine(\n    #[cfg(feature = \"dfa-build\")]\n    dfa::regex::Regex,\n    #[cfg(not(feature = \"dfa-build\"))]\n    (),\n);\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Debug)]\npub struct Regex {\n    /// The forward lazy DFA. This can only find the end of a match.\n    forward: DFA,\n    /// The reverse lazy DFA. This can only find the start of a match.\n    ///\n    /// This is built with 'all' match semantics (instead of leftmost-first)\n    /// so that it always finds the longest possible match (which corresponds\n    /// to the leftmost starting position). It is also compiled as an anchored\n    /// matcher and has 'starts_for_each_pattern' enabled. Including starting\n    /// states for each pattern is necessary to ensure that we only look for\n    /// matches of a pattern that matched in the forward direction. Otherwise,\n    /// we might wind up finding the \"leftmost\" starting position of a totally\n    /// different pattern!\n    reverse: DFA,\n}\n#[derive(Debug)]\npub(crate) struct RetryFailError {\n    offset: usize,\n}\n#[derive(Debug)]\npub struct Regex {\n    /// The actual regex implementation.\n    imp: Arc<RegexI>,\n    /// A thread safe pool of caches.\n    ///\n    /// For the higher level search APIs, a `Cache` is automatically plucked\n    /// from this pool before running a search. The lower level `with` methods\n    /// permit the caller to provide their own cache, thereby bypassing\n    /// accesses to this pool.\n    ///\n    /// Note that we put this outside the `Arc` so that cloning a `Regex`\n    /// results in creating a fresh `CachePool`. This in turn permits callers\n    /// to clone regexes into separate threads where each such regex gets\n    /// the pool's \"thread owner\" optimization. Otherwise, if one shares the\n    /// `Regex` directly, then the pool will go through a slower mutex path for\n    /// all threads except for the \"owner.\"\n    pool: CachePool,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\nimpl DFAEngine {\n    pub(crate) fn new(\n        info: &RegexInfo,\n        pre: Option<Prefilter>,\n        nfa: &NFA,\n        nfarev: &NFA,\n    ) -> Option<DFAEngine> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search(\n        &self,\n        input: &Input<'_>,\n    ) -> Result<Option<Match>, RetryFailError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_fwd(\n        &self,\n        input: &Input<'_>,\n    ) -> Result<Option<HalfMatch>, RetryFailError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_fwd_stopat(\n        &self,\n        input: &Input<'_>,\n    ) -> Result<Result<HalfMatch, usize>, RetryFailError> {\n        #[cfg(feature = \"dfa-build\")]\n        {\n            let dfa = self.0.forward();\n            crate::meta::stopat::dfa_try_search_half_fwd(dfa, input)\n        }\n        #[cfg(not(feature = \"dfa-build\"))] { unreachable!() }\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_rev(\n        &self,\n        input: &Input<'_>,\n    ) -> Result<Option<HalfMatch>, RetryFailError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_rev_limited(\n        &self,\n        input: &Input<'_>,\n        min_start: usize,\n    ) -> Result<Option<HalfMatch>, RetryError> {}\n    #[inline]\n    pub(crate) fn try_which_overlapping_matches(\n        &self,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) -> Result<(), RetryFailError> {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\n#[cfg(feature = \"dfa-build\")]\npub(crate) fn dfa_try_search_half_fwd(\n    dfa: &crate::dfa::dense::DFA<alloc::vec::Vec<u32>>,\n    input: &Input<'_>,\n) -> Result<Result<HalfMatch, usize>, RetryFailError> {\n    use crate::dfa::{accel, Automaton};\n    let mut mat = None;\n    let mut sid = dfa.start_state_forward(input)?;\n    let mut at = input.start();\n    while at < input.end() {\n        sid = dfa.next_state(sid, input.haystack()[at]);\n        if dfa.is_special_state(sid) {\n            if dfa.is_match_state(sid) {\n                let pattern = dfa.match_pattern(sid, 0);\n                mat = Some(HalfMatch::new(pattern, at));\n                if input.get_earliest() {\n                    return Ok(mat.ok_or(at));\n                }\n                if dfa.is_accel_state(sid) {\n                    let needs = dfa.accelerator(sid);\n                    at = accel::find_fwd(needs, input.haystack(), at)\n                        .unwrap_or(input.end());\n                    continue;\n                }\n            } else if dfa.is_accel_state(sid) {\n                let needs = dfa.accelerator(sid);\n                at = accel::find_fwd(needs, input.haystack(), at).unwrap_or(input.end());\n                continue;\n            } else if dfa.is_dead_state(sid) {\n                return Ok(mat.ok_or(at));\n            } else if dfa.is_quit_state(sid) {\n                return Err(MatchError::quit(input.haystack()[at], at).into());\n            } else {\n                debug_assert!(dfa.is_start_state(sid));\n            }\n        }\n        at += 1;\n    }\n    dfa_eoi_fwd(dfa, input, &mut sid, &mut mat)?;\n    Ok(mat.ok_or(at))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n981 pub(crate) fn try_search_half_fwd_stopat(\n982     &self,\n983     input: &Input<'_>,\n984 ) -> Result<Result<HalfMatch, usize>, RetryFailError> {\n985     #[cfg(feature = \"dfa-build\")]\n986     {\n987         let dfa = self.0.forward();\n988         crate::meta::stopat::dfa_try_search_half_fwd(dfa, input)\n989     }\n990     #[cfg(not(feature = \"dfa-build\"))]\n991     {\n992         // Impossible to reach because this engine is never constructed\n993         // if the requisite features aren't enabled.\n994         unreachable!()\n995     }\n996 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}