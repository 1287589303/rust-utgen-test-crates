{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Debug)]\npub struct Extractor {\n    kind: ExtractKind,\n    limit_class: usize,\n    limit_repeat: usize,\n    limit_literal_len: usize,\n    limit_total: usize,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Seq {\n    /// The members of this seq.\n    ///\n    /// When `None`, the seq represents all possible literals. That is, it\n    /// prevents one from making assumptions about specific literals in the\n    /// seq, and forces one to treat it as if any literal might be in the seq.\n    ///\n    /// Note that `Some(vec![])` is valid and corresponds to the empty seq of\n    /// literals, i.e., a regex that can never match. For example, `[a&&b]`.\n    /// It is distinct from `Some(vec![\"\"])`, which corresponds to the seq\n    /// containing an empty string, which matches at every position.\n    literals: Option<Vec<Literal>>,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum ExtractKind {\n    /// Extracts only prefix literals from a regex.\n    Prefix,\n    /// Extracts only suffix literals from a regex.\n    ///\n    /// Note that the sequence returned by suffix literals currently may\n    /// not correctly represent leftmost-first or \"preference\" order match\n    /// semantics.\n    Suffix,\n}\nimpl Extractor {\n    pub fn new() -> Extractor {}\n    pub fn extract(&self, hir: &Hir) -> Seq {\n        use crate::hir::HirKind::*;\n        match *hir.kind() {\n            Empty | Look(_) => Seq::singleton(self::Literal::exact(vec![])),\n            Literal(hir::Literal(ref bytes)) => {\n                let mut seq = Seq::singleton(self::Literal::exact(bytes.to_vec()));\n                self.enforce_literal_len(&mut seq);\n                seq\n            }\n            Class(hir::Class::Unicode(ref cls)) => self.extract_class_unicode(cls),\n            Class(hir::Class::Bytes(ref cls)) => self.extract_class_bytes(cls),\n            Repetition(ref rep) => self.extract_repetition(rep),\n            Capture(hir::Capture { ref sub, .. }) => self.extract(sub),\n            Concat(ref hirs) => {\n                match self.kind {\n                    ExtractKind::Prefix => self.extract_concat(hirs.iter()),\n                    ExtractKind::Suffix => self.extract_concat(hirs.iter().rev()),\n                }\n            }\n            Alternation(ref hirs) => self.extract_alternation(hirs.iter()),\n        }\n    }\n    pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {}\n    pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_repeat(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_literal_len(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_total(&mut self, limit: usize) -> &mut Extractor {}\n    fn extract_concat<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_alternation<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {\n        let mut seq = Seq::empty();\n        for hir in it {\n            if !seq.is_finite() {\n                break;\n            }\n            seq = self.union(seq, &mut self.extract(hir));\n        }\n        seq\n    }\n    fn extract_repetition(&self, rep: &hir::Repetition) -> Seq {}\n    fn extract_class_unicode(&self, cls: &hir::ClassUnicode) -> Seq {}\n    fn extract_class_bytes(&self, cls: &hir::ClassBytes) -> Seq {}\n    fn class_over_limit_unicode(&self, cls: &hir::ClassUnicode) -> bool {}\n    fn class_over_limit_bytes(&self, cls: &hir::ClassBytes) -> bool {}\n    fn cross(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {\n        if seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total) {\n            match self.kind {\n                ExtractKind::Prefix => {\n                    seq1.keep_first_bytes(4);\n                    seq2.keep_first_bytes(4);\n                }\n                ExtractKind::Suffix => {\n                    seq1.keep_last_bytes(4);\n                    seq2.keep_last_bytes(4);\n                }\n            }\n            seq1.dedup();\n            seq2.dedup();\n            if seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total) {\n                seq2.make_infinite();\n            }\n        }\n        seq1.union(seq2);\n        assert!(seq1.len().map_or(true, | x | x <= self.limit_total));\n        seq1\n    }\n    fn enforce_literal_len(&self, seq: &mut Seq) {}\n}\nimpl Seq {\n    #[inline]\n    pub fn empty() -> Seq {\n        Seq { literals: Some(vec![]) }\n    }\n    #[inline]\n    pub fn infinite() -> Seq {}\n    #[inline]\n    pub fn singleton(lit: Literal) -> Seq {}\n    #[inline]\n    pub fn new<I, B>(it: I) -> Seq\n    where\n        I: IntoIterator<Item = B>,\n        B: AsRef<[u8]>,\n    {}\n    #[inline]\n    pub fn literals(&self) -> Option<&[Literal]> {}\n    #[inline]\n    pub fn push(&mut self, lit: Literal) {}\n    #[inline]\n    pub fn make_inexact(&mut self) {}\n    #[inline]\n    pub fn make_infinite(&mut self) {}\n    #[inline]\n    pub fn cross_forward(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn cross_reverse(&mut self, other: &mut Seq) {}\n    fn cross_preamble<'a>(\n        &'a mut self,\n        other: &'a mut Seq,\n    ) -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {}\n    #[inline]\n    pub fn union(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn union_into_empty(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn dedup(&mut self) {}\n    #[inline]\n    pub fn sort(&mut self) {}\n    #[inline]\n    pub fn reverse_literals(&mut self) {}\n    #[inline]\n    pub fn minimize_by_preference(&mut self) {}\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn is_finite(&self) -> bool {\n        self.literals.is_some()\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn is_inexact(&self) -> bool {}\n    #[inline]\n    pub fn max_union_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn max_cross_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn min_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn max_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn longest_common_prefix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn longest_common_suffix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn optimize_for_prefix_by_preference(&mut self) {}\n    #[inline]\n    pub fn optimize_for_suffix_by_preference(&mut self) {}\n    fn optimize_by_preference(&mut self, prefix: bool) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Extract a sequence from the given alternation.\n///\n/// This short circuits once the union turns into an infinite sequence.\n415 fn extract_alternation<'a, I: Iterator<Item = &'a Hir>>(\n416     &self,\n417     it: I,\n418 ) -> Seq {\n419     let mut seq = Seq::empty();\n420     for hir in it {\n421         // Once our 'seq' is infinite, every subsequent union\n422         // operation on it will itself always result in an\n423         // infinite sequence. Thus, it can never change and we can\n424         // short-circuit.\n425         if !seq.is_finite() {\n426             break;\n427         }\n428         seq = self.union(seq, &mut self.extract(hir));\n429     }\n430     seq\n431 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}