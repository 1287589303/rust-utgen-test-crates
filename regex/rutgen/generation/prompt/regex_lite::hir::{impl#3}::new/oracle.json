{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Class {\n    pub(crate) ranges: Vec<ClassRange>,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]\npub(crate) struct ClassRange {\n    pub(crate) start: char,\n    pub(crate) end: char,\n}\nimpl Class {\n    fn new<I: IntoIterator<Item = ClassRange>>(ranges: I) -> Class {\n        let mut class = Class {\n            ranges: ranges.into_iter().collect(),\n        };\n        class.canonicalize();\n        class\n    }\n    fn ascii_case_fold(&mut self) {}\n    fn negate(&mut self) {}\n    fn canonicalize(&mut self) {\n        if self.is_canonical() {\n            return;\n        }\n        self.ranges.sort();\n        assert!(! self.ranges.is_empty());\n        let drain_end = self.ranges.len();\n        for oldi in 0..drain_end {\n            if self.ranges.len() > drain_end {\n                let (last, rest) = self.ranges.split_last_mut().unwrap();\n                if let Some(union) = last.union(&rest[oldi]) {\n                    *last = union;\n                    continue;\n                }\n            }\n            self.ranges.push(self.ranges[oldi]);\n        }\n        self.ranges.drain(..drain_end);\n    }\n    fn is_canonical(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new class from the given ranges. The ranges may be provided\n/// in any order or may even overlap. They will be automatically\n/// canonicalized.\n396 fn new<I: IntoIterator<Item = ClassRange>>(ranges: I) -> Class {\n397     let mut class = Class { ranges: ranges.into_iter().collect() };\n398     class.canonicalize();\n399     class\n400 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}