{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/debug.rs\n// crate name is regex_syntax\npub(crate) struct Bytes<'a>(pub(crate) &'a [u8]);\nimpl<'a> core::fmt::Debug for Bytes<'a> {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        write!(f, \"\\\"\")?;\n        let mut bytes = self.0;\n        while let Some(result) = utf8_decode(bytes) {\n            let ch = match result {\n                Ok(ch) => ch,\n                Err(byte) => {\n                    write!(f, r\"\\x{:02x}\", byte)?;\n                    bytes = &bytes[1..];\n                    continue;\n                }\n            };\n            bytes = &bytes[ch.len_utf8()..];\n            match ch {\n                '\\0' => write!(f, \"\\\\0\")?,\n                '\\x01'..='\\x08' | '\\x0b' | '\\x0c' | '\\x0e'..='\\x19' | '\\x7f' => {\n                    write!(f, \"\\\\x{:02x}\", u32::from(ch))?;\n                }\n                '\\n' | '\\r' | '\\t' | _ => {\n                    write!(f, \"{}\", ch.escape_debug())?;\n                }\n            }\n        }\n        write!(f, \"\\\"\")?;\n        Ok(())\n    }\n}\npub(crate) fn utf8_decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    fn len(byte: u8) -> Option<usize> {\n        if byte <= 0x7F {\n            return Some(1);\n        } else if byte & 0b1100_0000 == 0b1000_0000 {\n            return None;\n        } else if byte <= 0b1101_1111 {\n            Some(2)\n        } else if byte <= 0b1110_1111 {\n            Some(3)\n        } else if byte <= 0b1111_0111 {\n            Some(4)\n        } else {\n            None\n        }\n    }\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n37 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n38     write!(f, \"\\\"\")?;\n39     // This is a sad re-implementation of a similar impl found in bstr.\n40     let mut bytes = self.0;\n41     while let Some(result) = utf8_decode(bytes) {\n42         let ch = match result {\n43             Ok(ch) => ch,\n44             Err(byte) => {\n45                 write!(f, r\"\\x{:02x}\", byte)?;\n46                 bytes = &bytes[1..];\n47                 continue;\n48             }\n49         };\n50         bytes = &bytes[ch.len_utf8()..];\n51         match ch {\n52             '\\0' => write!(f, \"\\\\0\")?,\n53             // ASCII control characters except \\0, \\n, \\r, \\t\n54             '\\x01'..='\\x08'\n55             | '\\x0b'\n56             | '\\x0c'\n57             | '\\x0e'..='\\x19'\n58             | '\\x7f' => {\n59                 write!(f, \"\\\\x{:02x}\", u32::from(ch))?;\n60             }\n61             '\\n' | '\\r' | '\\t' | _ => {\n62                 write!(f, \"{}\", ch.escape_debug())?;\n63             }\n64         }\n65     }\n66     write!(f, \"\\\"\")?;\n67     Ok(())\n68 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}