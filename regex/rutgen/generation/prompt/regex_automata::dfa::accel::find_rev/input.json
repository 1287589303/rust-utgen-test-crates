{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn find_rev(needles: &[u8], haystack: &[u8], at: usize) -> Option<usize> {\n    let bs = needles;\n    match needles.len() {\n        1 => memchr::memrchr(bs[0], &haystack[..at]),\n        2 => memchr::memrchr2(bs[0], bs[1], &haystack[..at]),\n        3 => memchr::memrchr3(bs[0], bs[1], bs[2], &haystack[..at]),\n        0 => panic!(\"cannot find with empty needles\"),\n        n => panic!(\"invalid needles length: {}\", n),\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn memrchr3(n1: u8, n2: u8, n3: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().rposition(|&b| b == n1 || b == n2 || b == n3)\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn memrchr2(n1: u8, n2: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().rposition(|&b| b == n1 || b == n2)\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn memrchr(n1: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().rposition(|&b| b == n1)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Search for between 1 and 3 needle bytes in the given haystack in reverse,\n/// starting the search at the given position. If `needles` has a length other\n/// than 1-3, then this panics.\n114 pub(crate) fn find_rev(\n115     needles: &[u8],\n116     haystack: &[u8],\n117     at: usize,\n118 ) -> Option<usize> {\n119     let bs = needles;\n120     match needles.len() {\n121         1 => memchr::memrchr(bs[0], &haystack[..at]),\n122         2 => memchr::memrchr2(bs[0], bs[1], &haystack[..at]),\n123         3 => memchr::memrchr3(bs[0], bs[1], bs[2], &haystack[..at]),\n124         0 => panic!(\"cannot find with empty needles\"),\n125         n => panic!(\"invalid needles length: {}\", n),\n126     }\n127 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}