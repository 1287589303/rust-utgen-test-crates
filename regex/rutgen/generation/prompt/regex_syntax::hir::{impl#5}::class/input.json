{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Eq, PartialEq)]\npub enum Class {\n    /// A set of characters represented by Unicode scalar values.\n    Unicode(ClassUnicode),\n    /// A set of characters represented by arbitrary bytes (one byte per\n    /// character).\n    Bytes(ClassBytes),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    #[inline]\n    pub fn empty() -> Hir {}\n    #[inline]\n    pub fn fail() -> Hir {\n        let class = Class::Bytes(ClassBytes::empty());\n        let props = Properties::class(&class);\n        Hir {\n            kind: HirKind::Class(class),\n            props,\n        }\n    }\n    #[inline]\n    pub fn literal<B: Into<Box<[u8]>>>(lit: B) -> Hir {}\n    #[inline]\n    pub fn class(class: Class) -> Hir {\n        if class.is_empty() {\n            return Hir::fail();\n        } else if let Some(bytes) = class.literal() {\n            return Hir::literal(bytes);\n        }\n        let props = Properties::class(&class);\n        Hir {\n            kind: HirKind::Class(class),\n            props,\n        }\n    }\n    #[inline]\n    pub fn look(look: Look) -> Hir {}\n    #[inline]\n    pub fn repetition(mut rep: Repetition) -> Hir {}\n    #[inline]\n    pub fn capture(capture: Capture) -> Hir {}\n    pub fn concat(subs: Vec<Hir>) -> Hir {}\n    pub fn alternation(subs: Vec<Hir>) -> Hir {}\n    #[inline]\n    pub fn dot(dot: Dot) -> Hir {}\n}\nimpl Class {\n    pub fn case_fold_simple(&mut self) {}\n    pub fn try_case_fold_simple(&mut self) -> core::result::Result<(), CaseFoldError> {}\n    pub fn negate(&mut self) {}\n    pub fn is_utf8(&self) -> bool {}\n    pub fn minimum_len(&self) -> Option<usize> {}\n    pub fn maximum_len(&self) -> Option<usize> {}\n    pub fn is_empty(&self) -> bool {\n        match *self {\n            Class::Unicode(ref x) => x.ranges().is_empty(),\n            Class::Bytes(ref x) => x.ranges().is_empty(),\n        }\n    }\n    pub fn literal(&self) -> Option<Vec<u8>> {\n        match *self {\n            Class::Unicode(ref x) => x.literal(),\n            Class::Bytes(ref x) => x.literal(),\n        }\n    }\n}\nimpl Properties {\n    fn empty() -> Properties {}\n    fn literal(lit: &Literal) -> Properties {}\n    fn class(class: &Class) -> Properties {\n        let inner = PropertiesI {\n            minimum_len: class.minimum_len(),\n            maximum_len: class.maximum_len(),\n            look_set: LookSet::empty(),\n            look_set_prefix: LookSet::empty(),\n            look_set_suffix: LookSet::empty(),\n            look_set_prefix_any: LookSet::empty(),\n            look_set_suffix_any: LookSet::empty(),\n            utf8: class.is_utf8(),\n            explicit_captures_len: 0,\n            static_explicit_captures_len: Some(0),\n            literal: false,\n            alternation_literal: false,\n        };\n        Properties(Box::new(inner))\n    }\n    fn look(look: Look) -> Properties {}\n    fn repetition(rep: &Repetition) -> Properties {}\n    fn capture(capture: &Capture) -> Properties {}\n    fn concat(concat: &[Hir]) -> Properties {}\n    fn alternation(alts: &[Hir]) -> Properties {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a class HIR expression. The class may either be defined over\n/// ranges of Unicode codepoints or ranges of raw byte values.\n///\n/// Note that an empty class is permitted. An empty class is equivalent to\n/// `Hir::fail()`.\n359 pub fn class(class: Class) -> Hir {\n360     if class.is_empty() {\n361         return Hir::fail();\n362     } else if let Some(bytes) = class.literal() {\n363         return Hir::literal(bytes);\n364     }\n365     let props = Properties::class(&class);\n366     Hir { kind: HirKind::Class(class), props }\n367 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}