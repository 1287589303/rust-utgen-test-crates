{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    #[inline]\n    pub fn shortest_match(&self, haystack: &str) -> Option<usize> {}\n    #[inline]\n    pub fn shortest_match_at(&self, haystack: &str, start: usize) -> Option<usize> {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {\n        let input = Input::new(haystack).earliest(true).span(start..haystack.len());\n        self.meta.search_half(&input).is_some()\n    }\n    #[inline]\n    pub fn find_at<'h>(&self, haystack: &'h str, start: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_at<'h>(\n        &self,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_read<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_read_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn read_captures_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the same as [`Regex::is_match`], but starts the search at the\n/// given offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = \"eschew\";\n/// // We get a match here, but it's probably not intended.\n/// assert!(re.is_match(&hay[2..]));\n/// // No match because the  assertions take the context into account.\n/// assert!(!re.is_match_at(hay, 2));\n/// ```\n1071 pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {\n1072     let input =\n1073         Input::new(haystack).earliest(true).span(start..haystack.len());\n1074     self.meta.search_half(&input).is_some()\n1075 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}