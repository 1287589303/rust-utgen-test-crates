{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Cache {\n    /// Stack used while computing epsilon closure. This effectively lets us\n    /// move what is more naturally expressed through recursion to a stack\n    /// on the heap.\n    stack: Vec<FollowEpsilon>,\n    /// The current active states being explored for the current byte in the\n    /// haystack.\n    curr: ActiveStates,\n    /// The next set of states we're building that will be explored for the\n    /// next byte in the haystack.\n    next: ActiveStates,\n}\nimpl Clone for Regex {\n    fn clone(&self) -> Regex {\n        let pikevm = Arc::clone(&self.pikevm);\n        let pool = {\n            let pikevm = Arc::clone(&self.pikevm);\n            let create = Box::new(move || Cache::new(&pikevm));\n            CachePool::new(create)\n        };\n        Regex { pikevm, pool }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n86 fn clone(&self) -> Regex {\n87     let pikevm = Arc::clone(&self.pikevm);\n88     let pool = {\n89         let pikevm = Arc::clone(&self.pikevm);\n90         let create = Box::new(move || Cache::new(&pikevm));\n91         CachePool::new(create)\n92     };\n93     Regex { pikevm, pool }\n94 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}