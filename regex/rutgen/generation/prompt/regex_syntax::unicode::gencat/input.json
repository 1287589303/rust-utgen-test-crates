{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn gencat(canonical_name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(feature = \"unicode-gencat\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PropertyNotFound)\n    }\n    #[cfg(feature = \"unicode-gencat\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::general_category::BY_NAME;\n        match name {\n            \"ASCII\" => Ok(hir_class(&[('\\0', '\\x7F')])),\n            \"Any\" => Ok(hir_class(&[('\\0', '\\u{10FFFF}')])),\n            \"Assigned\" => {\n                let mut cls = gencat(\"Unassigned\")?;\n                cls.negate();\n                Ok(cls)\n            }\n            name => {\n                property_set(BY_NAME, name)\n                    .map(hir_class)\n                    .ok_or(Error::PropertyValueNotFound)\n            }\n        }\n    }\n    match canonical_name {\n        \"Decimal_Number\" => perl_digit(),\n        name => imp(name),\n    }\n}\n#[cfg(feature = \"unicode-gencat\")]\nfn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    use crate::unicode_tables::general_category::BY_NAME;\n    match name {\n        \"ASCII\" => Ok(hir_class(&[('\\0', '\\x7F')])),\n        \"Any\" => Ok(hir_class(&[('\\0', '\\u{10FFFF}')])),\n        \"Assigned\" => {\n            let mut cls = gencat(\"Unassigned\")?;\n            cls.negate();\n            Ok(cls)\n        }\n        name => {\n            property_set(BY_NAME, name)\n                .map(hir_class)\n                .ok_or(Error::PropertyValueNotFound)\n        }\n    }\n}\npub fn perl_digit() -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-gencat\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PerlClassNotFound)\n    }\n    #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-gencat\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::perl_decimal::DECIMAL_NUMBER;\n        Ok(hir_class(DECIMAL_NUMBER))\n    }\n    #[cfg(feature = \"unicode-gencat\")]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::general_category::DECIMAL_NUMBER;\n        Ok(hir_class(DECIMAL_NUMBER))\n    }\n    imp()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the Unicode HIR class corresponding to the given general category.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given general category could not be found, or if the general\n/// category data is not available, then an error is returned.\n699 fn gencat(canonical_name: &'static str) -> Result<hir::ClassUnicode, Error> {\n700     #[cfg(not(feature = \"unicode-gencat\"))]\n701     fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n702         Err(Error::PropertyNotFound)\n703     }\n704 \n705     #[cfg(feature = \"unicode-gencat\")]\n706     fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n707         use crate::unicode_tables::general_category::BY_NAME;\n708         match name {\n709             \"ASCII\" => Ok(hir_class(&[('\\0', '\\x7F')])),\n710             \"Any\" => Ok(hir_class(&[('\\0', '\\u{10FFFF}')])),\n711             \"Assigned\" => {\n712                 let mut cls = gencat(\"Unassigned\")?;\n713                 cls.negate();\n714                 Ok(cls)\n715             }\n716             name => property_set(BY_NAME, name)\n717                 .map(hir_class)\n718                 .ok_or(Error::PropertyValueNotFound),\n719         }\n720     }\n721 \n722     match canonical_name {\n723         \"Decimal_Number\" => perl_digit(),\n724         name => imp(name),\n725     }\n726 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}