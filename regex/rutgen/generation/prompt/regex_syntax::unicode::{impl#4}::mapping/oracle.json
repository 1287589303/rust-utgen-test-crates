{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub struct SimpleCaseFolder {\n    /// The simple case fold table. It's a sorted association list, where the\n    /// keys are Unicode scalar values and the values are the corresponding\n    /// equivalence class (not including the key) of the \"simple\" case folded\n    /// Unicode scalar values.\n    table: &'static [(char, &'static [char])],\n    /// The last codepoint that was used for a lookup.\n    last: Option<char>,\n    /// The index to the entry in `table` corresponding to the smallest key `k`\n    /// such that `k > k0`, where `k0` is the most recent key lookup. Note that\n    /// in particular, `k0` may not be in the table!\n    next: usize,\n}\nimpl SimpleCaseFolder {\n    pub fn new() -> Result<SimpleCaseFolder, CaseFoldError> {}\n    pub fn mapping(&mut self, c: char) -> &'static [char] {\n        if let Some(last) = self.last {\n            assert!(\n                last < c,\n                \"got codepoint U+{:X} which occurs before \\\n                 last codepoint U+{:X}\",\n                u32::from(c), u32::from(last),\n            );\n        }\n        self.last = Some(c);\n        if self.next >= self.table.len() {\n            return &[];\n        }\n        let (k, v) = self.table[self.next];\n        if k == c {\n            self.next += 1;\n            return v;\n        }\n        match self.get(c) {\n            Err(i) => {\n                self.next = i;\n                &[]\n            }\n            Ok(i) => {\n                assert!(i > self.next);\n                self.next = i + 1;\n                self.table[i].1\n            }\n        }\n    }\n    pub fn overlaps(&self, start: char, end: char) -> bool {}\n    fn get(&self, c: char) -> Result<usize, usize> {\n        self.table.binary_search_by_key(&c, |&(c1, _)| c1)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the equivalence class of case folded codepoints for the given\n/// codepoint. The equivalence class returned never includes the codepoint\n/// given. If the given codepoint has no case folded codepoints (i.e.,\n/// no entry in the underlying case folding table), then this returns an\n/// empty slice.\n///\n/// # Panics\n///\n/// This panics when called with a `c` that is less than or equal to the\n/// previous call. In other words, callers need to use this method with\n/// strictly increasing values of `c`.\n124 pub fn mapping(&mut self, c: char) -> &'static [char] {\n125     if let Some(last) = self.last {\n126         assert!(\n127             last < c,\n128             \"got codepoint U+{:X} which occurs before \\\n129              last codepoint U+{:X}\",\n130             u32::from(c),\n131             u32::from(last),\n132         );\n133     }\n134     self.last = Some(c);\n135     if self.next >= self.table.len() {\n136         return &[];\n137     }\n138     let (k, v) = self.table[self.next];\n139     if k == c {\n140         self.next += 1;\n141         return v;\n142     }\n143     match self.get(c) {\n144         Err(i) => {\n145             self.next = i;\n146             &[]\n147         }\n148         Ok(i) => {\n149             // Since we require lookups to proceed\n150             // in order, anything we find should be\n151             // after whatever we thought might be\n152             // next. Otherwise, the caller is either\n153             // going out of order or we would have\n154             // found our next key at 'self.next'.\n155             assert!(i > self.next);\n156             self.next = i + 1;\n157             self.table[i].1\n158         }\n159     }\n160 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}