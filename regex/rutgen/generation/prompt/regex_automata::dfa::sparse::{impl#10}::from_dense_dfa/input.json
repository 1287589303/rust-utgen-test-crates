{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/sparse.rs\n// crate name is regex_automata\n#[cfg(feature = \"dfa-build\")]\nuse core::iter;\nuse core::{fmt, mem::size_of};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa::dense::{self, BuildError};\nuse crate::{\n    dfa::{\n        automaton::{fmt_state_indicator, Automaton, StartError},\n        dense::Flags, special::Special, StartKind, DEAD,\n    },\n    util::{\n        alphabet::{ByteClasses, ByteSet},\n        escape::DebugByte, int::{Pointer, Usize, U16, U32},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-sparse\";\nconst VERSION: u32 = 2;\n#[derive(Clone)]\nstruct StartTable<T> {\n    /// The initial start state IDs as a contiguous table of native endian\n    /// encoded integers, represented by `S`.\n    ///\n    /// In practice, T is either Vec<u8> or &[u8] and has no alignment\n    /// requirements.\n    ///\n    /// The first `2 * stride` (currently always 8) entries always correspond\n    /// to the starts states for the entire DFA, with the first 4 entries being\n    /// for unanchored searches and the second 4 entries being for anchored\n    /// searches. To keep things simple, we always use 8 entries even if the\n    /// `StartKind` is not both.\n    ///\n    /// After that, there are `stride * patterns` state IDs, where `patterns`\n    /// may be zero in the case of a DFA with no patterns or in the case where\n    /// the DFA was built without enabling starting states for each pattern.\n    table: T,\n    /// The starting state configuration supported. When 'both', both\n    /// unanchored and anchored searches work. When 'unanchored', anchored\n    /// searches panic. When 'anchored', unanchored searches panic.\n    kind: StartKind,\n    /// The start state configuration for every possible byte.\n    start_map: StartByteMap,\n    /// The number of starting state IDs per pattern.\n    stride: usize,\n    /// The total number of patterns for which starting states are encoded.\n    /// This is `None` for DFAs that were built without start states for each\n    /// pattern. Thus, one cannot use this field to say how many patterns\n    /// are in the DFA in all cases. It is specific to how many patterns are\n    /// represented in this start table.\n    pattern_len: Option<usize>,\n    /// The universal starting state for unanchored searches. This is only\n    /// present when the DFA supports unanchored searches and when all starting\n    /// state IDs for an unanchored search are equivalent.\n    universal_start_unanchored: Option<StateID>,\n    /// The universal starting state for anchored searches. This is only\n    /// present when the DFA supports anchored searches and when all starting\n    /// state IDs for an anchored search are equivalent.\n    universal_start_anchored: Option<StateID>,\n}\n#[derive(Clone)]\npub struct DFA<T> {\n    /// The transition table for this DFA. This includes the transitions\n    /// themselves, along with the stride, number of states and the equivalence\n    /// class mapping.\n    tt: TransitionTable<T>,\n    /// The set of starting state identifiers for this DFA. The starting state\n    /// IDs act as pointers into the transition table. The specific starting\n    /// state chosen for each search is dependent on the context at which the\n    /// search begins.\n    st: StartTable<T>,\n    /// The set of match states and the patterns that match for each\n    /// corresponding match state.\n    ///\n    /// This structure is technically only needed because of support for\n    /// multi-regexes. Namely, multi-regexes require answering not just whether\n    /// a match exists, but _which_ patterns match. So we need to store the\n    /// matching pattern IDs for each match state. We do this even when there\n    /// is only one pattern for the sake of simplicity. In practice, this uses\n    /// up very little space for the case of one pattern.\n    ms: MatchStates<T>,\n    /// Information about which states are \"special.\" Special states are states\n    /// that are dead, quit, matching, starting or accelerated. For more info,\n    /// see the docs for `Special`.\n    special: Special,\n    /// The accelerators for this DFA.\n    ///\n    /// If a state is accelerated, then there exist only a small number of\n    /// bytes that can cause the DFA to leave the state. This permits searching\n    /// to use optimized routines to find those specific bytes instead of using\n    /// the transition table.\n    ///\n    /// All accelerated states exist in a contiguous range in the DFA's\n    /// transition table. See dfa/special.rs for more details on how states are\n    /// arranged.\n    accels: Accels<T>,\n    /// Any prefilter attached to this DFA.\n    ///\n    /// Note that currently prefilters are not serialized. When deserializing\n    /// a DFA from bytes, this is always set to `None`.\n    pre: Option<Prefilter>,\n    /// The set of \"quit\" bytes for this DFA.\n    ///\n    /// This is only used when computing the start state for a particular\n    /// position in a haystack. Namely, in the case where there is a quit\n    /// byte immediately before the start of the search, this set needs to be\n    /// explicitly consulted. In all other cases, quit bytes are detected by\n    /// the DFA itself, by transitioning all quit bytes to a special \"quit\n    /// state.\"\n    quitset: ByteSet,\n    /// Various flags describing the behavior of this DFA.\n    flags: Flags,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone)]\npub(crate) struct StartByteMap {\n    map: [Start; 256],\n}\npub(crate) struct StartStateIter<'a> {\n    st: StartTable<&'a [u32]>,\n    i: usize,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub(crate) enum Start {\n    /// This occurs when the starting position is not any of the ones below.\n    NonWordByte = 0,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is an ASCII word byte.\n    WordByte = 1,\n    /// This occurs when the starting position of the search corresponds to the\n    /// beginning of the haystack.\n    Text = 2,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is a line terminator. Specifically, `\\n`.\n    LineLF = 3,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is a line terminator. Specifically, `\\r`.\n    LineCR = 4,\n    /// This occurs when a custom line terminator has been set via a\n    /// `LookMatcher`, and when that line terminator is neither a `\\r` or a\n    /// `\\n`.\n    ///\n    /// If the custom line terminator is a word byte, then this start\n    /// configuration is still selected. DFAs that implement word boundary\n    /// assertions will likely need to check whether the custom line terminator\n    /// is a word byte, in which case, it should behave as if the byte\n    /// satisfies `\\b` in addition to multi-line anchors.\n    CustomLineTerminator = 5,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl StartTable<Vec<u8>> {\n    fn new<T: AsRef<[u32]>>(\n        dfa: &dense::DFA<T>,\n        pattern_len: Option<usize>,\n    ) -> StartTable<Vec<u8>> {}\n    fn from_dense_dfa<T: AsRef<[u32]>>(\n        dfa: &dense::DFA<T>,\n        remap: &[StateID],\n    ) -> Result<StartTable<Vec<u8>>, BuildError> {\n        let start_pattern_len = if dfa.starts_for_each_pattern() {\n            Some(dfa.pattern_len())\n        } else {\n            None\n        };\n        let mut sl = StartTable::new(dfa, start_pattern_len);\n        for (old_start_id, anchored, sty) in dfa.starts() {\n            let new_start_id = remap[dfa.to_index(old_start_id)];\n            sl.set_start(anchored, sty, new_start_id);\n        }\n        Ok(sl)\n    }\n}\nimpl<T: AsRef<[u32]>> DFA<T> {\n    pub(crate) fn special(&self) -> &Special {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn special_mut(&mut self) -> &mut Special {}\n    pub(crate) fn quitset(&self) -> &ByteSet {}\n    pub(crate) fn flags(&self) -> &Flags {}\n    pub(crate) fn states(&self) -> StateIter<'_, T> {}\n    pub(crate) fn state_len(&self) -> usize {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn pattern_id_slice(&self, id: StateID) -> &[PatternID] {}\n    pub(crate) fn match_pattern_len(&self, id: StateID) -> usize {}\n    pub(crate) fn pattern_len(&self) -> usize {\n        self.ms.pattern_len\n    }\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn pattern_map(&self) -> BTreeMap<StateID, Vec<PatternID>> {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn quit_id(&self) -> StateID {}\n    pub(crate) fn to_index(&self, id: StateID) -> usize {\n        self.tt.to_index(id)\n    }\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn to_state_id(&self, index: usize) -> StateID {}\n    pub(crate) fn starts(&self) -> StartStateIter<'_> {\n        self.st.iter()\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn match_state_index(&self, id: StateID) -> usize {}\n    fn accelerator_index(&self, id: StateID) -> usize {}\n    fn accels(&self) -> Accels<&[u32]> {}\n    fn trans(&self) -> &[StateID] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1831 fn from_dense_dfa<T: AsRef<[u32]>>(\n1832     dfa: &dense::DFA<T>,\n1833     remap: &[StateID],\n1834 ) -> Result<StartTable<Vec<u8>>, BuildError> {\n1835     // Unless the DFA has start states compiled for each pattern, then\n1836     // as far as the starting state table is concerned, there are zero\n1837     // patterns to account for. It will instead only store starting states\n1838     // for the entire DFA.\n1839     let start_pattern_len = if dfa.starts_for_each_pattern() {\n1840         Some(dfa.pattern_len())\n1841     } else {\n1842         None\n1843     };\n1844     let mut sl = StartTable::new(dfa, start_pattern_len);\n1845     for (old_start_id, anchored, sty) in dfa.starts() {\n1846         let new_start_id = remap[dfa.to_index(old_start_id)];\n1847         sl.set_start(anchored, sty, new_start_id);\n1848     }\n1849     Ok(sl)\n1850 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}