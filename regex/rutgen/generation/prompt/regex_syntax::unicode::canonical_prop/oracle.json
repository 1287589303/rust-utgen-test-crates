{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn canonical_prop(normalized_name: &str) -> Result<Option<&'static str>, Error> {\n    #[cfg(\n        not(\n            any(\n                feature = \"unicode-age\",\n                feature = \"unicode-bool\",\n                feature = \"unicode-gencat\",\n                feature = \"unicode-perl\",\n                feature = \"unicode-script\",\n                feature = \"unicode-segment\",\n            )\n        )\n    )]\n    fn imp(_: &str) -> Result<Option<&'static str>, Error> {\n        Err(Error::PropertyNotFound)\n    }\n    #[cfg(\n        any(\n            feature = \"unicode-age\",\n            feature = \"unicode-bool\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-perl\",\n            feature = \"unicode-script\",\n            feature = \"unicode-segment\",\n        )\n    )]\n    fn imp(name: &str) -> Result<Option<&'static str>, Error> {\n        use crate::unicode_tables::property_names::PROPERTY_NAMES;\n        Ok(\n            PROPERTY_NAMES\n                .binary_search_by_key(&name, |&(n, _)| n)\n                .ok()\n                .map(|i| PROPERTY_NAMES[i].1),\n        )\n    }\n    imp(normalized_name)\n}\n#[cfg(\n    any(\n        feature = \"unicode-age\",\n        feature = \"unicode-bool\",\n        feature = \"unicode-gencat\",\n        feature = \"unicode-perl\",\n        feature = \"unicode-script\",\n        feature = \"unicode-segment\",\n    )\n)]\nfn imp(name: &str) -> Result<Option<&'static str>, Error> {\n    use crate::unicode_tables::property_names::PROPERTY_NAMES;\n    Ok(\n        PROPERTY_NAMES\n            .binary_search_by_key(&name, |&(n, _)| n)\n            .ok()\n            .map(|i| PROPERTY_NAMES[i].1),\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Find the canonical property name for the given normalized property name.\n///\n/// If no such property exists, then `None` is returned.\n///\n/// The normalized property name must have been normalized according to\n/// UAX44 LM3, which can be done using `symbolic_name_normalize`.\n///\n/// If the property names data is not available, then an error is returned.\n530 fn canonical_prop(\n531     normalized_name: &str,\n532 ) -> Result<Option<&'static str>, Error> {\n533     #[cfg(not(any(\n534         feature = \"unicode-age\",\n535         feature = \"unicode-bool\",\n536         feature = \"unicode-gencat\",\n537         feature = \"unicode-perl\",\n538         feature = \"unicode-script\",\n539         feature = \"unicode-segment\",\n540     )))]\n541     fn imp(_: &str) -> Result<Option<&'static str>, Error> {\n542         Err(Error::PropertyNotFound)\n543     }\n544 \n545     #[cfg(any(\n546         feature = \"unicode-age\",\n547         feature = \"unicode-bool\",\n548         feature = \"unicode-gencat\",\n549         feature = \"unicode-perl\",\n550         feature = \"unicode-script\",\n551         feature = \"unicode-segment\",\n552     ))]\n553     fn imp(name: &str) -> Result<Option<&'static str>, Error> {\n554         use crate::unicode_tables::property_names::PROPERTY_NAMES;\n555 \n556         Ok(PROPERTY_NAMES\n557             .binary_search_by_key(&name, |&(n, _)| n)\n558             .ok()\n559             .map(|i| PROPERTY_NAMES[i].1))\n560     }\n561 \n562     imp(normalized_name)\n563 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}