{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Debug)]\npub struct Extractor {\n    kind: ExtractKind,\n    limit_class: usize,\n    limit_repeat: usize,\n    limit_literal_len: usize,\n    limit_total: usize,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Seq {\n    /// The members of this seq.\n    ///\n    /// When `None`, the seq represents all possible literals. That is, it\n    /// prevents one from making assumptions about specific literals in the\n    /// seq, and forces one to treat it as if any literal might be in the seq.\n    ///\n    /// Note that `Some(vec![])` is valid and corresponds to the empty seq of\n    /// literals, i.e., a regex that can never match. For example, `[a&&b]`.\n    /// It is distinct from `Some(vec![\"\"])`, which corresponds to the seq\n    /// containing an empty string, which matches at every position.\n    literals: Option<Vec<Literal>>,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum ExtractKind {\n    /// Extracts only prefix literals from a regex.\n    Prefix,\n    /// Extracts only suffix literals from a regex.\n    ///\n    /// Note that the sequence returned by suffix literals currently may\n    /// not correctly represent leftmost-first or \"preference\" order match\n    /// semantics.\n    Suffix,\n}\nimpl Extractor {\n    pub fn new() -> Extractor {}\n    pub fn extract(&self, hir: &Hir) -> Seq {}\n    pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {}\n    pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_repeat(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_literal_len(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_total(&mut self, limit: usize) -> &mut Extractor {}\n    fn extract_concat<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_alternation<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_repetition(&self, rep: &hir::Repetition) -> Seq {}\n    fn extract_class_unicode(&self, cls: &hir::ClassUnicode) -> Seq {}\n    fn extract_class_bytes(&self, cls: &hir::ClassBytes) -> Seq {}\n    fn class_over_limit_unicode(&self, cls: &hir::ClassUnicode) -> bool {}\n    fn class_over_limit_bytes(&self, cls: &hir::ClassBytes) -> bool {}\n    fn cross(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {\n        if seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total) {\n            match self.kind {\n                ExtractKind::Prefix => {\n                    seq1.keep_first_bytes(4);\n                    seq2.keep_first_bytes(4);\n                }\n                ExtractKind::Suffix => {\n                    seq1.keep_last_bytes(4);\n                    seq2.keep_last_bytes(4);\n                }\n            }\n            seq1.dedup();\n            seq2.dedup();\n            if seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total) {\n                seq2.make_infinite();\n            }\n        }\n        seq1.union(seq2);\n        assert!(seq1.len().map_or(true, | x | x <= self.limit_total));\n        seq1\n    }\n    fn enforce_literal_len(&self, seq: &mut Seq) {}\n}\nimpl Seq {\n    #[inline]\n    pub fn empty() -> Seq {}\n    #[inline]\n    pub fn infinite() -> Seq {}\n    #[inline]\n    pub fn singleton(lit: Literal) -> Seq {}\n    #[inline]\n    pub fn new<I, B>(it: I) -> Seq\n    where\n        I: IntoIterator<Item = B>,\n        B: AsRef<[u8]>,\n    {}\n    #[inline]\n    pub fn literals(&self) -> Option<&[Literal]> {}\n    #[inline]\n    pub fn push(&mut self, lit: Literal) {}\n    #[inline]\n    pub fn make_inexact(&mut self) {}\n    #[inline]\n    pub fn make_infinite(&mut self) {\n        self.literals = None;\n    }\n    #[inline]\n    pub fn cross_forward(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn cross_reverse(&mut self, other: &mut Seq) {}\n    fn cross_preamble<'a>(\n        &'a mut self,\n        other: &'a mut Seq,\n    ) -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {}\n    #[inline]\n    pub fn union(&mut self, other: &mut Seq) {\n        let lits2 = match other.literals {\n            None => {\n                self.make_infinite();\n                return;\n            }\n            Some(ref mut lits) => lits.drain(..),\n        };\n        let lits1 = match self.literals {\n            None => return,\n            Some(ref mut lits) => lits,\n        };\n        lits1.extend(lits2);\n        self.dedup();\n    }\n    #[inline]\n    pub fn union_into_empty(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn dedup(&mut self) {\n        if let Some(ref mut lits) = self.literals {\n            lits.dedup_by(|lit1, lit2| {\n                if lit1.as_bytes() != lit2.as_bytes() {\n                    return false;\n                }\n                if lit1.is_exact() != lit2.is_exact() {\n                    lit1.make_inexact();\n                    lit2.make_inexact();\n                }\n                true\n            });\n        }\n    }\n    #[inline]\n    pub fn sort(&mut self) {}\n    #[inline]\n    pub fn reverse_literals(&mut self) {}\n    #[inline]\n    pub fn minimize_by_preference(&mut self) {}\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {\n        if let Some(ref mut lits) = self.literals {\n            for m in lits.iter_mut() {\n                m.keep_first_bytes(len);\n            }\n        }\n    }\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {\n        if let Some(ref mut lits) = self.literals {\n            for m in lits.iter_mut() {\n                m.keep_last_bytes(len);\n            }\n        }\n    }\n    #[inline]\n    pub fn is_finite(&self) -> bool {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> Option<usize> {\n        self.literals.as_ref().map(|lits| lits.len())\n    }\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn is_inexact(&self) -> bool {}\n    #[inline]\n    pub fn max_union_len(&self, other: &Seq) -> Option<usize> {\n        let len1 = self.len()?;\n        let len2 = other.len()?;\n        Some(len1.saturating_add(len2))\n    }\n    #[inline]\n    pub fn max_cross_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn min_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn max_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn longest_common_prefix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn longest_common_suffix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn optimize_for_prefix_by_preference(&mut self) {}\n    #[inline]\n    pub fn optimize_for_suffix_by_preference(&mut self) {}\n    fn optimize_by_preference(&mut self, prefix: bool) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Union the two sequences if the result would be within configured\n/// limits. Otherwise, make `seq2` infinite and union the infinite sequence\n/// with `seq1`.\n577 fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {\n578     if seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)\n579     {\n580         // We try to trim our literal sequences to see if we can make\n581         // room for more literals. The idea is that we'd rather trim down\n582         // literals already in our sequence if it means we can add a few\n583         // more and retain a finite sequence. Otherwise, we'll union with\n584         // an infinite sequence and that infects everything and effectively\n585         // stops literal extraction in its tracks.\n586         //\n587         // We do we keep 4 bytes here? Well, it's a bit of an abstraction\n588         // leakage. Downstream, the literals may wind up getting fed to\n589         // the Teddy algorithm, which supports searching literals up to\n590         // length 4. So that's why we pick that number here. Arguably this\n591         // should be a tuneable parameter, but it seems a little tricky to\n592         // describe. And I'm still unsure if this is the right way to go\n593         // about culling literal sequences.\n594         match self.kind {\n595             ExtractKind::Prefix => {\n596                 seq1.keep_first_bytes(4);\n597                 seq2.keep_first_bytes(4);\n598             }\n599             ExtractKind::Suffix => {\n600                 seq1.keep_last_bytes(4);\n601                 seq2.keep_last_bytes(4);\n602             }\n603         }\n604         seq1.dedup();\n605         seq2.dedup();\n606         if seq1\n607             .max_union_len(seq2)\n608             .map_or(false, |len| len > self.limit_total)\n609         {\n610             seq2.make_infinite();\n611         }\n612     }\n613     seq1.union(seq2);\n614     assert!(seq1.len().map_or(true, |x| x <= self.limit_total));\n615     seq1\n616 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}