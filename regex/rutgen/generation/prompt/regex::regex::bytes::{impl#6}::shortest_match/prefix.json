{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    #[inline]\n    pub fn shortest_match(&self, haystack: &[u8]) -> Option<usize> {\n        self.shortest_match_at(haystack, 0)\n    }\n    #[inline]\n    pub fn shortest_match_at(&self, haystack: &[u8], start: usize) -> Option<usize> {\n        let input = Input::new(haystack).earliest(true).span(start..haystack.len());\n        self.meta.search_half(&input).map(|hm| hm.offset())\n    }\n    #[inline]\n    pub fn is_match_at(&self, haystack: &[u8], start: usize) -> bool {}\n    #[inline]\n    pub fn find_at<'h>(&self, haystack: &'h [u8], start: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_at<'h>(\n        &self,\n        haystack: &'h [u8],\n        start: usize,\n    ) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_read<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h [u8],\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_read_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h [u8],\n        start: usize,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn read_captures_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h [u8],\n        start: usize,\n    ) -> Option<Match<'h>> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the end byte offset of the first match in the haystack given.\n///\n/// This method may have the same performance characteristics as\n/// `is_match`. Behaviorlly, it doesn't just report whether it match\n/// occurs, but also the end offset for a match. In particular, the offset\n/// returned *may be shorter* than the proper end of the leftmost-first\n/// match that you would find via [`Regex::find`].\n///\n/// Note that it is not guaranteed that this routine finds the shortest or\n/// \"earliest\" possible match. Instead, the main idea of this API is that\n/// it returns the offset at the point at which the internal regex engine\n/// has determined that a match has occurred. This may vary depending on\n/// which internal regex engine is used, and thus, the offset itself may\n/// change based on internal heuristics.\n///\n/// # Example\n///\n/// Typically, `a+` would match the entire first sequence of `a` in some\n/// haystack, but `shortest_match` *may* give up as soon as it sees the\n/// first `a`.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"a+\").unwrap();\n/// let offset = re.shortest_match(b\"aaaaa\").unwrap();\n/// assert_eq!(offset, 1);\n/// ```\n1011 pub fn shortest_match(&self, haystack: &[u8]) -> Option<usize> {\n1012     self.shortest_match_at(haystack, 0)\n1013 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}