{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, utf8};\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where\n    /// `i = Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\nimpl LookMatcher {\n    pub fn new() -> LookMatcher {}\n    pub fn set_line_terminator(&mut self, byte: u8) -> &mut LookMatcher {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    #[inline]\n    pub fn matches(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_inline(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn matches_set(&self, set: LookSet, haystack: &[u8], at: usize) -> bool {\n        self.matches_set_inline(set, haystack, at)\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_set_inline(\n        &self,\n        set: LookSet,\n        haystack: &[u8],\n        at: usize,\n    ) -> bool {\n        if set.contains(Look::Start) {\n            if !self.is_start(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::End) {\n            if !self.is_end(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::StartLF) {\n            if !self.is_start_lf(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::EndLF) {\n            if !self.is_end_lf(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::StartCRLF) {\n            if !self.is_start_crlf(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::EndCRLF) {\n            if !self.is_end_crlf(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordAscii) {\n            if !self.is_word_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordAsciiNegate) {\n            if !self.is_word_ascii_negate(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordUnicode) {\n            if !self.is_word_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordUnicodeNegate) {\n            if !self.is_word_unicode_negate(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordStartAscii) {\n            if !self.is_word_start_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordEndAscii) {\n            if !self.is_word_end_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordStartUnicode) {\n            if !self.is_word_start_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordEndUnicode) {\n            if !self.is_word_end_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordStartHalfAscii) {\n            if !self.is_word_start_half_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordEndHalfAscii) {\n            if !self.is_word_end_half_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordStartHalfUnicode) {\n            if !self.is_word_start_half_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordEndHalfUnicode) {\n            if !self.is_word_end_half_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        true\n    }\n    #[cfg(feature = \"alloc\")]\n    pub(crate) fn add_to_byteset(\n        &self,\n        look: Look,\n        set: &mut crate::util::alphabet::ByteClassSet,\n    ) {}\n    #[inline]\n    pub fn is_start(&self, _haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii_negate(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_unicode_negate(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true when _all_ of the assertions in the given set match at the\n/// given position in the haystack.\n///\n/// # Panics\n///\n/// This panics when testing any Unicode word boundary assertion in this\n/// set and when the Unicode word data is not available. Specifically, this\n/// only occurs when the `unicode-word-boundary` feature is not enabled.\n///\n/// Since it's generally expected that this routine is called inside of\n/// a matching engine, callers should check the error condition when\n/// building the matching engine. If there is a Unicode word boundary\n/// in the matcher and the data isn't available, then the matcher should\n/// fail to build.\n///\n/// Callers can check the error condition with [`LookSet::available`].\n///\n/// This also may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n720 pub fn matches_set(\n721     &self,\n722     set: LookSet,\n723     haystack: &[u8],\n724     at: usize,\n725 ) -> bool {\n726     self.matches_set_inline(set, haystack, at)\n727 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}