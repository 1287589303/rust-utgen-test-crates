{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {\n        self.set_anchored(mode);\n        self\n    }\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {\n        self.anchored = mode;\n    }\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the anchor mode of a search.\n///\n/// When a search is anchored (so that's [`Anchored::Yes`] or\n/// [`Anchored::Pattern`]), a match must begin at the start of a search.\n/// When a search is not anchored (that's [`Anchored::No`]), regex engines\n/// will behave as if the pattern started with a `(?s-u:.)*?`. This prefix\n/// permits a match to appear anywhere.\n///\n/// By default, the anchored mode is [`Anchored::No`].\n///\n/// **WARNING:** this is subtly different than using a `^` at the start of\n/// your regex. A `^` forces a regex to match exclusively at the start of\n/// a haystack, regardless of where you begin your search. In contrast,\n/// anchoring a search will allow your regex to match anywhere in your\n/// haystack, but the match must start at the beginning of a search.\n///\n/// For example, consider the haystack `aba` and the following searches:\n///\n/// 1. The regex `^a` is compiled with `Anchored::No` and searches `aba`\n///    starting at position `2`. Since `^` requires the match to start at\n///    the beginning of the haystack and `2 > 0`, no match is found.\n/// 2. The regex `a` is compiled with `Anchored::Yes` and searches `aba`\n///    starting at position `2`. This reports a match at `[2, 3]` since\n///    the match starts where the search started. Since there is no `^`,\n///    there is no requirement for the match to start at the beginning of\n///    the haystack.\n/// 3. The regex `a` is compiled with `Anchored::Yes` and searches `aba`\n///    starting at position `1`. Since `b` corresponds to position `1` and\n///    since the search is anchored, it finds no match. While the regex\n///    matches at other positions, configuring the search to be anchored\n///    requires that it only report a match that begins at the same offset\n///    as the beginning of the search.\n/// 4. The regex `a` is compiled with `Anchored::No` and searches `aba`\n///    starting at position `1`. Since the search is not anchored and\n///    the regex does not start with `^`, the search executes as if there\n///    is a `(?s:.)*?` prefix that permits it to match anywhere. Thus, it\n///    reports a match at `[2, 3]`.\n///\n/// Note that the [`Anchored::Pattern`] mode is like `Anchored::Yes`,\n/// except it only reports matches for a particular pattern.\n///\n/// # Example\n///\n/// This demonstrates the differences between an anchored search and\n/// a pattern that begins with `^` (as described in the above warning\n/// message).\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     Anchored, Match, Input,\n/// };\n///\n/// let haystack = \"aba\";\n///\n/// let re = PikeVM::new(r\"^a\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n/// let input = Input::new(haystack).span(2..3).anchored(Anchored::No);\n/// re.search(&mut cache, &input, &mut caps);\n/// // No match is found because 2 is not the beginning of the haystack,\n/// // which is what ^ requires.\n/// assert_eq!(None, caps.get_match());\n///\n/// let re = PikeVM::new(r\"a\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n/// let input = Input::new(haystack).span(2..3).anchored(Anchored::Yes);\n/// re.search(&mut cache, &input, &mut caps);\n/// // An anchored search can still match anywhere in the haystack, it just\n/// // must begin at the start of the search which is '2' in this case.\n/// assert_eq!(Some(Match::must(0, 2..3)), caps.get_match());\n///\n/// let re = PikeVM::new(r\"a\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n/// let input = Input::new(haystack).span(1..3).anchored(Anchored::Yes);\n/// re.search(&mut cache, &input, &mut caps);\n/// // No match is found since we start searching at offset 1 which\n/// // corresponds to 'b'. Since there is no '(?s:.)*?' prefix, no match\n/// // is found.\n/// assert_eq!(None, caps.get_match());\n///\n/// let re = PikeVM::new(r\"a\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n/// let input = Input::new(haystack).span(1..3).anchored(Anchored::No);\n/// re.search(&mut cache, &input, &mut caps);\n/// // Since anchored=no, an implicit '(?s:.)*?' prefix was added to the\n/// // pattern. Even though the search starts at 'b', the 'match anything'\n/// // prefix allows the search to match 'a'.\n/// let expected = Some(Match::must(0, 2..3));\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n342 pub fn anchored(mut self, mode: Anchored) -> Input<'h> {\n343     self.set_anchored(mode);\n344     self\n345 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}