{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Debug)]\nstruct NestLimiter<'p, 's, P> {\n    /// The parser that is checking the nest limit.\n    p: &'p ParserI<'s, P>,\n    /// The current depth while walking an Ast.\n    depth: u32,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassBracketed {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not. e.g., `[a]` is not negated but\n    /// `[^a]` is.\n    pub negated: bool,\n    /// The type of this set. A set is either a normal union of things, e.g.,\n    /// `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n    pub kind: ClassSet,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the translator's Ast was parsed from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error, derived from the Ast given to the translator.\n    span: Span,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassSetUnion {\n    /// The span of the items in this operation. e.g., the `a-z0-9` in\n    /// `[^a-z0-9]`\n    pub span: Span,\n    /// The sequence of items that make up this union.\n    pub items: Vec<ClassSetItem>,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ClassSetItem {\n    /// An empty item.\n    ///\n    /// Note that a bracketed character class cannot contain a single empty\n    /// item. Empty items can appear when using one of the binary operators.\n    /// For example, `[&&]` is the intersection of two empty classes.\n    Empty(Span),\n    /// A single literal.\n    Literal(Literal),\n    /// A range between two literals.\n    Range(ClassSetRange),\n    /// An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.\n    Ascii(ClassAscii),\n    /// A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    Unicode(ClassUnicode),\n    /// A perl character class, e.g., `\\d` or `\\W`.\n    Perl(ClassPerl),\n    /// A bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    Bracketed(Box<ClassBracketed>),\n    /// A union of items.\n    Union(ClassSetUnion),\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Error {\n    /// An error that occurred while translating concrete syntax into abstract\n    /// syntax (AST).\n    Parse(ast::Error),\n    /// An error that occurred while translating abstract syntax into a high\n    /// level intermediate representation (HIR).\n    Translate(hir::Error),\n}\nimpl<'p, 's, P: Borrow<Parser>> ast::Visitor for NestLimiter<'p, 's, P> {\n    type Output = ();\n    type Err = ast::Error;\n    fn finish(self) -> Result<()> {}\n    fn visit_pre(&mut self, ast: &Ast) -> Result<()> {}\n    fn visit_post(&mut self, ast: &Ast) -> Result<()> {}\n    fn visit_class_set_item_pre(&mut self, ast: &ast::ClassSetItem) -> Result<()> {\n        let span = match *ast {\n            ast::ClassSetItem::Empty(_)\n            | ast::ClassSetItem::Literal(_)\n            | ast::ClassSetItem::Range(_)\n            | ast::ClassSetItem::Ascii(_)\n            | ast::ClassSetItem::Unicode(_)\n            | ast::ClassSetItem::Perl(_) => {\n                return Ok(());\n            }\n            ast::ClassSetItem::Bracketed(ref x) => &x.span,\n            ast::ClassSetItem::Union(ref x) => &x.span,\n        };\n        self.increment_depth(span)\n    }\n    fn visit_class_set_item_post(&mut self, ast: &ast::ClassSetItem) -> Result<()> {}\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        ast: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {}\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {}\n}\nimpl<'p, 's, P: Borrow<Parser>> NestLimiter<'p, 's, P> {\n    fn new(p: &'p ParserI<'s, P>) -> NestLimiter<'p, 's, P> {}\n    #[inline(never)]\n    fn check(self, ast: &Ast) -> Result<()> {}\n    fn increment_depth(&mut self, span: &Span) -> Result<()> {\n        let new = self\n            .depth\n            .checked_add(1)\n            .ok_or_else(|| {\n                self.p.error(span.clone(), ast::ErrorKind::NestLimitExceeded(u32::MAX))\n            })?;\n        let limit = self.p.parser().nest_limit;\n        if new > limit {\n            return Err(\n                self.p.error(span.clone(), ast::ErrorKind::NestLimitExceeded(limit)),\n            );\n        }\n        self.depth = new;\n        Ok(())\n    }\n    fn decrement_depth(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2360 fn visit_class_set_item_pre(\n2361     &mut self,\n2362     ast: &ast::ClassSetItem,\n2363 ) -> Result<()> {\n2364     let span = match *ast {\n2365         ast::ClassSetItem::Empty(_)\n2366         | ast::ClassSetItem::Literal(_)\n2367         | ast::ClassSetItem::Range(_)\n2368         | ast::ClassSetItem::Ascii(_)\n2369         | ast::ClassSetItem::Unicode(_)\n2370         | ast::ClassSetItem::Perl(_) => {\n2371             // These are all base cases, so we don't increment depth.\n2372             return Ok(());\n2373         }\n2374         ast::ClassSetItem::Bracketed(ref x) => &x.span,\n2375         ast::ClassSetItem::Union(ref x) => &x.span,\n2376     };\n2377     self.increment_depth(span)\n2378 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}