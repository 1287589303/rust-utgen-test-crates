{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/syntax.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse regex_syntax::{\n    ast, hir::{self, Hir},\n    Error, ParserBuilder,\n};\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn case_insensitive(mut self, yes: bool) -> Config {}\n    pub fn multi_line(mut self, yes: bool) -> Config {}\n    pub fn dot_matches_new_line(mut self, yes: bool) -> Config {}\n    pub fn crlf(mut self, yes: bool) -> Config {}\n    pub fn line_terminator(mut self, byte: u8) -> Config {}\n    pub fn swap_greed(mut self, yes: bool) -> Config {}\n    pub fn ignore_whitespace(mut self, yes: bool) -> Config {}\n    pub fn unicode(mut self, yes: bool) -> Config {}\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn nest_limit(mut self, limit: u32) -> Config {}\n    pub fn octal(mut self, yes: bool) -> Config {}\n    pub fn get_unicode(&self) -> bool {}\n    pub fn get_case_insensitive(&self) -> bool {}\n    pub fn get_multi_line(&self) -> bool {}\n    pub fn get_dot_matches_new_line(&self) -> bool {}\n    pub fn get_crlf(&self) -> bool {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    pub fn get_swap_greed(&self) -> bool {}\n    pub fn get_ignore_whitespace(&self) -> bool {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn get_nest_limit(&self) -> u32 {}\n    pub fn get_octal(&self) -> bool {}\n    pub(crate) fn apply(&self, builder: &mut ParserBuilder) {\n        builder\n            .unicode(self.unicode)\n            .case_insensitive(self.case_insensitive)\n            .multi_line(self.multi_line)\n            .dot_matches_new_line(self.dot_matches_new_line)\n            .crlf(self.crlf)\n            .line_terminator(self.line_terminator)\n            .swap_greed(self.swap_greed)\n            .ignore_whitespace(self.ignore_whitespace)\n            .utf8(self.utf8)\n            .nest_limit(self.nest_limit)\n            .octal(self.octal);\n    }\n    pub(crate) fn apply_ast(&self, builder: &mut ast::parse::ParserBuilder) {}\n    pub(crate) fn apply_hir(&self, builder: &mut hir::translate::TranslatorBuilder) {}\n}\npub fn parse_many_with<P: AsRef<str>>(\n    patterns: &[P],\n    config: &Config,\n) -> Result<Vec<Hir>, Error> {\n    let mut builder = ParserBuilder::new();\n    config.apply(&mut builder);\n    let mut hirs = vec![];\n    for p in patterns.iter() {\n        hirs.push(builder.build().parse(p.as_ref())?);\n    }\n    Ok(hirs)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// A convenience routine for parsing many patterns into HIR values using a\n/// `Config`.\n///\n/// # Example\n///\n/// This shows how to parse many patterns into an corresponding HIR values\n/// with a non-default configuration:\n///\n/// ```\n/// use {\n///     regex_automata::util::syntax,\n///     regex_syntax::hir::Properties,\n/// };\n///\n/// let patterns = &[\n///     r\"([a-z]+)|([0-9]+)\",\n///     r\"\\W\",\n///     r\"foo(A-Z]+)bar\",\n/// ];\n/// let config = syntax::Config::new().unicode(false).utf8(false);\n/// let hirs = syntax::parse_many_with(patterns, &config)?;\n/// let props = Properties::union(hirs.iter().map(|h| h.properties()));\n/// assert!(!props.is_utf8());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n118 pub fn parse_many_with<P: AsRef<str>>(\n119     patterns: &[P],\n120     config: &Config,\n121 ) -> Result<Vec<Hir>, Error> {\n122     let mut builder = ParserBuilder::new();\n123     config.apply(&mut builder);\n124     let mut hirs = vec![];\n125     for p in patterns.iter() {\n126         hirs.push(builder.build().parse(p.as_ref())?);\n127     }\n128     Ok(hirs)\n129 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}