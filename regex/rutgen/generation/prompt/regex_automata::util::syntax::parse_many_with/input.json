{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/syntax.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse regex_syntax::{\n    ast, hir::{self, Hir},\n    Error, ParserBuilder,\n};\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn case_insensitive(mut self, yes: bool) -> Config {}\n    pub fn multi_line(mut self, yes: bool) -> Config {}\n    pub fn dot_matches_new_line(mut self, yes: bool) -> Config {}\n    pub fn crlf(mut self, yes: bool) -> Config {}\n    pub fn line_terminator(mut self, byte: u8) -> Config {}\n    pub fn swap_greed(mut self, yes: bool) -> Config {}\n    pub fn ignore_whitespace(mut self, yes: bool) -> Config {}\n    pub fn unicode(mut self, yes: bool) -> Config {}\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn nest_limit(mut self, limit: u32) -> Config {}\n    pub fn octal(mut self, yes: bool) -> Config {}\n    pub fn get_unicode(&self) -> bool {}\n    pub fn get_case_insensitive(&self) -> bool {}\n    pub fn get_multi_line(&self) -> bool {}\n    pub fn get_dot_matches_new_line(&self) -> bool {}\n    pub fn get_crlf(&self) -> bool {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    pub fn get_swap_greed(&self) -> bool {}\n    pub fn get_ignore_whitespace(&self) -> bool {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn get_nest_limit(&self) -> u32 {}\n    pub fn get_octal(&self) -> bool {}\n    pub(crate) fn apply(&self, builder: &mut ParserBuilder) {\n        builder\n            .unicode(self.unicode)\n            .case_insensitive(self.case_insensitive)\n            .multi_line(self.multi_line)\n            .dot_matches_new_line(self.dot_matches_new_line)\n            .crlf(self.crlf)\n            .line_terminator(self.line_terminator)\n            .swap_greed(self.swap_greed)\n            .ignore_whitespace(self.ignore_whitespace)\n            .utf8(self.utf8)\n            .nest_limit(self.nest_limit)\n            .octal(self.octal);\n    }\n    pub(crate) fn apply_ast(&self, builder: &mut ast::parse::ParserBuilder) {}\n    pub(crate) fn apply_hir(&self, builder: &mut hir::translate::TranslatorBuilder) {}\n}\npub fn parse_many_with<P: AsRef<str>>(\n    patterns: &[P],\n    config: &Config,\n) -> Result<Vec<Hir>, Error> {\n    let mut builder = ParserBuilder::new();\n    config.apply(&mut builder);\n    let mut hirs = vec![];\n    for p in patterns.iter() {\n        hirs.push(builder.build().parse(p.as_ref())?);\n    }\n    Ok(hirs)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// A convenience routine for parsing many patterns into HIR values using a\n/// `Config`.\n///\n/// # Example\n///\n/// This shows how to parse many patterns into an corresponding HIR values\n/// with a non-default configuration:\n///\n/// ```\n/// use {\n///     regex_automata::util::syntax,\n///     regex_syntax::hir::Properties,\n/// };\n///\n/// let patterns = &[\n///     r\"([a-z]+)|([0-9]+)\",\n///     r\"\\W\",\n///     r\"foo(A-Z]+)bar\",\n/// ];\n/// let config = syntax::Config::new().unicode(false).utf8(false);\n/// let hirs = syntax::parse_many_with(patterns, &config)?;\n/// let props = Properties::union(hirs.iter().map(|h| h.properties()));\n/// assert!(!props.is_utf8());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n118 pub fn parse_many_with<P: AsRef<str>>(\n119     patterns: &[P],\n120     config: &Config,\n121 ) -> Result<Vec<Hir>, Error> {\n122     let mut builder = ParserBuilder::new();\n123     config.apply(&mut builder);\n124     let mut hirs = vec![];\n125     for p in patterns.iter() {\n126         hirs.push(builder.build().parse(p.as_ref())?);\n127     }\n128     Ok(hirs)\n129 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}