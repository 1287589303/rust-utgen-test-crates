{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/map.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::Transition,\n    util::{\n        int::{Usize, U64},\n        primitives::StateID,\n    },\n};\nconst PRIME: u64 = 1099511628211;\nconst INIT: u64 = 14695981039346656037;\npub(crate) trait U64 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn low_u32(self) -> u32;\n    fn high_u32(self) -> u32;\n}\npub(crate) trait Usize {\n    fn as_u8(self) -> u8;\n    fn as_u16(self) -> u16;\n    fn as_u32(self) -> u32;\n    fn as_u64(self) -> u64;\n}\n#[derive(Clone, Debug)]\npub struct Utf8BoundedMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    ///\n    /// This makes it possible to clear the map by simply incrementing the\n    /// version number instead of actually deallocating any storage.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8BoundedEntry>,\n}\n#[derive(Clone, Debug, Default)]\nstruct Utf8BoundedEntry {\n    /// The version of the map used to produce this entry. If this entry's\n    /// version does not match the current version of the map, then the map\n    /// should behave as if this entry does not exist.\n    version: u16,\n    /// The key, which is a sorted sequence of non-overlapping NFA transitions.\n    key: Vec<Transition>,\n    /// The state ID corresponding to the state containing the transitions in\n    /// this entry.\n    val: StateID,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl Utf8BoundedMap {\n    pub fn new(capacity: usize) -> Utf8BoundedMap {}\n    pub fn clear(&mut self) {}\n    pub fn hash(&self, key: &[Transition]) -> usize {\n        let mut h = INIT;\n        for t in key {\n            h = (h ^ u64::from(t.start)).wrapping_mul(PRIME);\n            h = (h ^ u64::from(t.end)).wrapping_mul(PRIME);\n            h = (h ^ t.next.as_u64()).wrapping_mul(PRIME);\n        }\n        (h % self.map.len().as_u64()).as_usize()\n    }\n    pub fn get(&mut self, key: &[Transition], hash: usize) -> Option<StateID> {}\n    pub fn set(&mut self, key: Vec<Transition>, hash: usize, state_id: StateID) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a hash of the given transitions.\n143 pub fn hash(&self, key: &[Transition]) -> usize {\n144     let mut h = INIT;\n145     for t in key {\n146         h = (h ^ u64::from(t.start)).wrapping_mul(PRIME);\n147         h = (h ^ u64::from(t.end)).wrapping_mul(PRIME);\n148         h = (h ^ t.next.as_u64()).wrapping_mul(PRIME);\n149     }\n150     (h % self.map.len().as_u64()).as_usize()\n151 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}