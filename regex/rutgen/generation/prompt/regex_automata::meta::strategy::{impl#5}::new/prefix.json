{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/strategy.rs\n// crate name is regex_automata\nuse core::{fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::sync::Arc;\nuse regex_syntax::hir::{literal, Hir};\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError, RetryQuadraticError},\n        regex::{Cache, RegexInfo},\n        reverse_inner, wrappers,\n    },\n    nfa::thompson::{self, WhichCaptures, NFA},\n    util::{\n        captures::{Captures, GroupInfo},\n        look::LookMatcher, prefilter::{self, Prefilter, PrefilterI},\n        primitives::{NonMaxUsize, PatternID},\n        search::{Anchored, HalfMatch, Input, Match, MatchKind, PatternSet},\n    },\n};\npub(super) trait Strategy: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn group_info(&self) -> &GroupInfo;\n    fn create_cache(&self) -> Cache;\n    fn reset_cache(&self, cache: &mut Cache);\n    fn is_accelerated(&self) -> bool;\n    fn memory_usage(&self) -> usize;\n    fn search(&self, cache: &mut Cache, input: &Input<'_>) -> Option<Match>;\n    fn search_half(&self, cache: &mut Cache, input: &Input<'_>) -> Option<HalfMatch>;\n    fn is_match(&self, cache: &mut Cache, input: &Input<'_>) -> bool;\n    fn search_slots(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<PatternID>;\n    fn which_overlapping_matches(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    );\n}\n#[derive(Debug)]\nstruct ReverseAnchored {\n    core: Core,\n}\n#[derive(Clone, Debug)]\npub(crate) struct RegexInfo(Arc<RegexInfoI>);\n#[derive(Debug)]\npub(crate) struct DFA(Option<DFAEngine>);\n#[derive(Debug)]\npub(crate) struct Hybrid(Option<HybridEngine>);\n#[derive(Debug)]\nstruct Core {\n    info: RegexInfo,\n    pre: Option<Prefilter>,\n    nfa: NFA,\n    nfarev: Option<NFA>,\n    pikevm: wrappers::PikeVM,\n    backtrack: wrappers::BoundedBacktracker,\n    onepass: wrappers::OnePass,\n    hybrid: wrappers::Hybrid,\n    dfa: wrappers::DFA,\n}\nimpl ReverseAnchored {\n    fn new(core: Core) -> Result<ReverseAnchored, Core> {\n        if !core.info.is_always_anchored_end() {\n            debug!(\n                \"skipping reverse anchored optimization because \\\n\t\t\t\t the regex is not always anchored at the end\"\n            );\n            return Err(core);\n        }\n        if core.info.is_always_anchored_start() {\n            debug!(\n                \"skipping reverse anchored optimization because \\\n\t\t\t\t the regex is also anchored at the start\"\n            );\n            return Err(core);\n        }\n        if !core.hybrid.is_some() && !core.dfa.is_some() {\n            debug!(\n                \"skipping reverse anchored optimization because \\\n\t\t\t\t we don't have a lazy DFA or a full DFA\"\n            );\n            return Err(core);\n        }\n        Ok(ReverseAnchored { core })\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn try_search_half_anchored_rev(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Result<Option<HalfMatch>, RetryFailError> {}\n}\nimpl RegexInfo {\n    fn new(config: Config, hirs: &[&Hir]) -> RegexInfo {}\n    pub(crate) fn config(&self) -> &Config {}\n    pub(crate) fn props(&self) -> &[hir::Properties] {}\n    pub(crate) fn props_union(&self) -> &hir::Properties {}\n    pub(crate) fn pattern_len(&self) -> usize {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_anchored_start(&self, input: &Input<'_>) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_always_anchored_start(&self) -> bool {\n        use regex_syntax::hir::Look;\n        self.props_union().look_set_prefix().contains(Look::Start)\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_always_anchored_end(&self) -> bool {\n        use regex_syntax::hir::Look;\n        self.props_union().look_set_suffix().contains(Look::End)\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn is_impossible(&self, input: &Input<'_>) -> bool {}\n}\nimpl DFA {\n    pub(crate) fn none() -> DFA {}\n    pub(crate) fn new(\n        info: &RegexInfo,\n        pre: Option<Prefilter>,\n        nfa: &NFA,\n        nfarev: &NFA,\n    ) -> DFA {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn get(&self, _input: &Input<'_>) -> Option<&DFAEngine> {}\n    pub(crate) fn is_some(&self) -> bool {\n        self.0.is_some()\n    }\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\nimpl Hybrid {\n    pub(crate) fn none() -> Hybrid {}\n    pub(crate) fn new(\n        info: &RegexInfo,\n        pre: Option<Prefilter>,\n        nfa: &NFA,\n        nfarev: &NFA,\n    ) -> Hybrid {}\n    pub(crate) fn create_cache(&self) -> HybridCache {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn get(&self, _input: &Input<'_>) -> Option<&HybridEngine> {}\n    pub(crate) fn is_some(&self) -> bool {\n        self.0.is_some()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n909 fn new(core: Core) -> Result<ReverseAnchored, Core> {\n910     if !core.info.is_always_anchored_end() {\n911         debug!(\n912             \"skipping reverse anchored optimization because \\\n913  the regex is not always anchored at the end\"\n914         );\n915         return Err(core);\n916     }\n917     // Note that the caller can still request an anchored search even when\n918     // the regex isn't anchored at the start. We detect that case in the\n919     // search routines below and just fallback to the core engine. This\n920     // is fine because both searches are anchored. It's just a matter of\n921     // picking one. Falling back to the core engine is a little simpler,\n922     // since if we used the reverse anchored approach, we'd have to add an\n923     // extra check to ensure the match reported starts at the place where\n924     // the caller requested the search to start.\n925     if core.info.is_always_anchored_start() {\n926         debug!(\n927             \"skipping reverse anchored optimization because \\\n928  the regex is also anchored at the start\"\n929         );\n930         return Err(core);\n931     }\n932     // Only DFAs can do reverse searches (currently), so we need one of\n933     // them in order to do this optimization. It's possible (although\n934     // pretty unlikely) that we have neither and need to give up.\n935     if !core.hybrid.is_some() && !core.dfa.is_some() {\n936         debug!(\n937             \"skipping reverse anchored optimization because \\\n938  we don't have a lazy DFA or a full DFA\"\n939         );\n940         return Err(core);\n941     }\n942     Ok(ReverseAnchored { core })\n943 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}