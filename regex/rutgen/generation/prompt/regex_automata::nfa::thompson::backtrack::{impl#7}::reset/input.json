{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/backtrack.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchError, Span},\n    },\n};\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// Stack used on the heap for doing backtracking instead of the\n    /// traditional recursive approach. We don't want recursion because then\n    /// we're likely to hit a stack overflow for bigger regexes.\n    stack: Vec<Frame>,\n    /// The set of (StateID, HaystackOffset) pairs that have been visited\n    /// by the backtracker within a single search. If such a pair has been\n    /// visited, then we avoid doing the work for that pair again. This is\n    /// what \"bounds\" the backtracking and prevents it from having worst case\n    /// exponential time.\n    visited: Visited,\n}\n#[derive(Clone, Debug)]\nstruct Visited {\n    /// The actual underlying bitset. Each element in the bitset corresponds\n    /// to a particular (StateID, offset) pair. States correspond to the rows\n    /// and the offsets correspond to the columns.\n    ///\n    /// If our underlying NFA has N states and the haystack we're searching\n    /// has M bytes, then we have N*(M+1) entries in our bitset table. The\n    /// M+1 occurs because our matches are delayed by one byte (to support\n    /// look-around), and so we need to handle the end position itself rather\n    /// than stopping just before the end. (If there is no end position, then\n    /// it's treated as \"end-of-input,\" which is matched by things like '$'.)\n    ///\n    /// Given BITS=N*(M+1), we wind up with div_ceil(BITS, sizeof(usize))\n    /// blocks.\n    ///\n    /// We use 'usize' to represent our blocks because it makes some of the\n    /// arithmetic in 'insert' a bit nicer. For example, if we used 'u32' for\n    /// our block, we'd either need to cast u32s to usizes or usizes to u32s.\n    bitset: Vec<usize>,\n    /// The stride represents one plus length of the haystack we're searching\n    /// (as described above). The stride must be initialized for each search.\n    stride: usize,\n}\n#[derive(Clone, Debug)]\npub struct BoundedBacktracker {\n    config: Config,\n    nfa: NFA,\n}\n#[derive(Debug)]\nstruct Frame<'a> {\n    /// The remaining chunks to visit for a trie state.\n    chunks: StateChunksIter<'a>,\n    /// The transitions of the current chunk that we're iterating over. Since\n    /// every trie state has at least one chunk, every frame is initialized\n    /// with the first chunk's transitions ready to be consumed.\n    transitions: core::slice::Iter<'a, Transition>,\n    /// The NFA state IDs pointing to the start of each chunk compiled by\n    /// this trie state. This ultimately gets converted to an NFA union once\n    /// the entire trie state (and all of its children) have been compiled.\n    /// The order of these matters for leftmost-first match semantics, since\n    /// earlier matches in the union are preferred over later ones.\n    union: Vec<StateID>,\n    /// The actual NFA transitions for a single chunk in a trie state. This\n    /// gets converted to an NFA sparse state, and its corresponding NFA state\n    /// ID should get added to 'union'.\n    sparse: Vec<thompson::Transition>,\n}\n#[derive(Clone, Debug)]\nenum Frame {\n    /// Look for a match starting at `sid` and the given position in the\n    /// haystack.\n    Step { sid: StateID, at: usize },\n    /// Reset the given `slot` to the given `offset` (which might be `None`).\n    /// This effectively gives a \"scope\" to capturing groups, such that an\n    /// offset for a particular group only gets returned if the match goes\n    /// through that capturing group. If backtracking ends up going down a\n    /// different branch that results in a different offset (or perhaps none at\n    /// all), then this \"restore capture\" frame will cause the offset to get\n    /// reset.\n    RestoreCapture { slot: SmallIndex, offset: Option<NonMaxUsize> },\n}\nimpl Cache {\n    pub fn new(re: &BoundedBacktracker) -> Cache {}\n    pub fn reset(&mut self, re: &BoundedBacktracker) {\n        self.visited.reset(re);\n    }\n    pub fn memory_usage(&self) -> usize {}\n    fn setup_search(\n        &mut self,\n        re: &BoundedBacktracker,\n        input: &Input<'_>,\n    ) -> Result<(), MatchError> {}\n}\nimpl Visited {\n    const BLOCK_SIZE: usize = 8 * core::mem::size_of::<usize>();\n    fn new(re: &BoundedBacktracker) -> Visited {}\n    fn insert(&mut self, sid: StateID, at: usize) -> bool {}\n    fn reset(&mut self, _: &BoundedBacktracker) {\n        self.bitset.truncate(0);\n    }\n    fn setup_search(\n        &mut self,\n        re: &BoundedBacktracker,\n        input: &Input<'_>,\n    ) -> Result<(), MatchError> {}\n    fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reset this cache such that it can be used for searching with different\n/// [`BoundedBacktracker`].\n///\n/// A cache reset permits reusing memory already allocated in this cache\n/// with a different `BoundedBacktracker`.\n///\n/// # Example\n///\n/// This shows how to re-purpose a cache for use with a different\n/// `BoundedBacktracker`.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     nfa::thompson::backtrack::BoundedBacktracker,\n///     Match,\n/// };\n///\n/// let re1 = BoundedBacktracker::new(r\"\\w\")?;\n/// let re2 = BoundedBacktracker::new(r\"\\W\")?;\n///\n/// let mut cache = re1.create_cache();\n/// assert_eq!(\n///     Some(Ok(Match::must(0, 0..2))),\n///     re1.try_find_iter(&mut cache, \"Δ\").next(),\n/// );\n///\n/// // Using 'cache' with re2 is not allowed. It may result in panics or\n/// // incorrect results. In order to re-purpose the cache, we must reset\n/// // it with the BoundedBacktracker we'd like to use it with.\n/// //\n/// // Similarly, after this reset, using the cache with 're1' is also not\n/// // allowed.\n/// cache.reset(&re2);\n/// assert_eq!(\n///     Some(Ok(Match::must(0, 0..3))),\n///     re2.try_find_iter(&mut cache, \"☃\").next(),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1721 pub fn reset(&mut self, re: &BoundedBacktracker) {\n1722     self.visited.reset(re);\n1723 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}