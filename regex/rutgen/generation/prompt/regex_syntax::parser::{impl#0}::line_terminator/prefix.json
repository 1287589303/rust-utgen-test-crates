{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/parser.rs\n// crate name is regex_syntax\nuse crate::{ast, hir, Error};\n#[derive(Clone, Debug, Default)]\npub struct ParserBuilder {\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct TranslatorBuilder {\n    utf8: bool,\n    line_terminator: u8,\n    flags: Flags,\n}\n#[derive(Clone, Debug)]\npub struct ParserBuilder {\n    ignore_whitespace: bool,\n    nest_limit: u32,\n    octal: bool,\n    empty_min_range: bool,\n}\nimpl ParserBuilder {\n    pub fn new() -> ParserBuilder {}\n    pub fn build(&self) -> Parser {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut ParserBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn utf8(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut ParserBuilder {\n        self.hir.line_terminator(byte);\n        self\n    }\n    pub fn swap_greed(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn unicode(&mut self, yes: bool) -> &mut ParserBuilder {}\n}\nimpl TranslatorBuilder {\n    pub fn new() -> TranslatorBuilder {}\n    pub fn build(&self) -> Translator {}\n    pub fn utf8(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut TranslatorBuilder {\n        self.line_terminator = byte;\n        self\n    }\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn unicode(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the line terminator for use with `(?u-s:.)` and `(?-us:.)`.\n///\n/// Namely, instead of `.` (by default) matching everything except for `\\n`,\n/// this will cause `.` to match everything except for the byte given.\n///\n/// If `.` is used in a context where Unicode mode is enabled and this byte\n/// isn't ASCII, then an error will be returned. When Unicode mode is\n/// disabled, then any byte is permitted, but will return an error if UTF-8\n/// mode is enabled and it is a non-ASCII byte.\n///\n/// In short, any ASCII value for a line terminator is always okay. But a\n/// non-ASCII byte might result in an error depending on whether Unicode\n/// mode or UTF-8 mode are enabled.\n///\n/// Note that if `R` mode is enabled then it always takes precedence and\n/// the line terminator will be treated as `\\r` and `\\n` simultaneously.\n///\n/// Note also that this *doesn't* impact the look-around assertions\n/// `(?m:^)` and `(?m:$)`. That's usually controlled by additional\n/// configuration in the regex engine itself.\n188 pub fn line_terminator(&mut self, byte: u8) -> &mut ParserBuilder {\n189     self.hir.line_terminator(byte);\n190     self\n191 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}