{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {\n        self.set_span(span);\n        self\n    }\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the span for this search.\n///\n/// This routine does not panic if the span given is not a valid range for\n/// this search's haystack. If this search is run with an invalid range,\n/// then the most likely outcome is that the actual search execution will\n/// panic.\n///\n/// This routine is generic over how a span is provided. While\n/// a [`Span`] may be given directly, one may also provide a\n/// `std::ops::Range<usize>`. To provide anything supported by range\n/// syntax, use the [`Input::range`] method.\n///\n/// The default span is the entire haystack.\n///\n/// Note that [`Input::range`] overrides this method and vice versa.\n///\n/// # Panics\n///\n/// This panics if the given span does not correspond to valid bounds in\n/// the haystack or the termination of a search.\n///\n/// # Example\n///\n/// This example shows how the span of the search can impact whether a\n/// match is reported or not. This is particularly relevant for look-around\n/// operators, which might take things outside of the span into account\n/// when determining whether they match.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     Match, Input,\n/// };\n///\n/// // Look for 'at', but as a distinct word.\n/// let re = PikeVM::new(r\"\\bat\\b\")?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n///\n/// // Our haystack contains 'at', but not as a distinct word.\n/// let haystack = \"batter\";\n///\n/// // A standard search finds nothing, as expected.\n/// let input = Input::new(haystack);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(None, caps.get_match());\n///\n/// // But if we wanted to search starting at position '1', we might\n/// // slice the haystack. If we do this, it's impossible for the \\b\n/// // anchors to take the surrounding context into account! And thus,\n/// // a match is produced.\n/// let input = Input::new(&haystack[1..3]);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..2)), caps.get_match());\n///\n/// // But if we specify the span of the search instead of slicing the\n/// // haystack, then the regex engine can \"see\" outside of the span\n/// // and resolve the anchors correctly.\n/// let input = Input::new(haystack).span(1..3);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(None, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// This may seem a little ham-fisted, but this scenario tends to come up\n/// if some other regex engine found the match span and now you need to\n/// re-process that span to look for capturing groups. (e.g., Run a faster\n/// DFA first, find a match, then run the PikeVM on just the match span to\n/// resolve capturing groups.) In order to implement that sort of logic\n/// correctly, you need to set the span on the search instead of slicing\n/// the haystack directly.\n///\n/// The other advantage of using this routine to specify the bounds of the\n/// search is that the match offsets are still reported in terms of the\n/// original haystack. For example, the second search in the example above\n/// reported a match at position `0`, even though `at` starts at offset\n/// `1` because we sliced the haystack.\n206 pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {\n207     self.set_span(span);\n208     self\n209 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}