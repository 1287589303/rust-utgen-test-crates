{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode_last(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let mut start = bytes.len() - 1;\n    let limit = bytes.len().saturating_sub(4);\n    while start > limit && !is_leading_or_invalid_byte(bytes[start]) {\n        start -= 1;\n    }\n    match decode(&bytes[start..]) {\n        None => None,\n        Some(Ok(ch)) => Some(Ok(ch)),\n        Some(Err(_)) => Some(Err(bytes[bytes.len() - 1])),\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn is_leading_or_invalid_byte(b: u8) -> bool {\n    (b & 0b1100_0000) != 0b1000_0000\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decodes the last UTF-8 encoded codepoint from the given byte slice.\n///\n/// If no valid encoding of a codepoint exists at the end of the given byte\n/// slice, then the last byte is returned instead.\n///\n/// This returns `None` if and only if `bytes` is empty.\n79 pub(crate) fn decode_last(bytes: &[u8]) -> Option<Result<char, u8>> {\n80     if bytes.is_empty() {\n81         return None;\n82     }\n83     let mut start = bytes.len() - 1;\n84     let limit = bytes.len().saturating_sub(4);\n85     while start > limit && !is_leading_or_invalid_byte(bytes[start]) {\n86         start -= 1;\n87     }\n88     match decode(&bytes[start..]) {\n89         None => None,\n90         Some(Ok(ch)) => Some(Ok(ch)),\n91         Some(Err(_)) => Some(Err(bytes[bytes.len() - 1])),\n92     }\n93 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}