{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode_last(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let mut start = bytes.len() - 1;\n    let limit = bytes.len().saturating_sub(4);\n    while start > limit && !is_leading_or_invalid_byte(bytes[start]) {\n        start -= 1;\n    }\n    match decode(&bytes[start..]) {\n        None => None,\n        Some(Ok(ch)) => Some(Ok(ch)),\n        Some(Err(_)) => Some(Err(bytes[bytes.len() - 1])),\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn is_leading_or_invalid_byte(b: u8) -> bool {\n    (b & 0b1100_0000) != 0b1000_0000\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decodes the last UTF-8 encoded codepoint from the given byte slice.\n///\n/// If no valid encoding of a codepoint exists at the end of the given byte\n/// slice, then the last byte is returned instead.\n///\n/// This returns `None` if and only if `bytes` is empty.\n79 pub(crate) fn decode_last(bytes: &[u8]) -> Option<Result<char, u8>> {\n80     if bytes.is_empty() {\n81         return None;\n82     }\n83     let mut start = bytes.len() - 1;\n84     let limit = bytes.len().saturating_sub(4);\n85     while start > limit && !is_leading_or_invalid_byte(bytes[start]) {\n86         start -= 1;\n87     }\n88     match decode(&bytes[start..]) {\n89         None => None,\n90         Some(Ok(ch)) => Some(Ok(ch)),\n91         Some(Err(_)) => Some(Err(bytes[bytes.len() - 1])),\n92     }\n93 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}