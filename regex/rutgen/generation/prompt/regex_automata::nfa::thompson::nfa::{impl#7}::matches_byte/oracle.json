{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/nfa.rs\n// crate name is regex_automata\nuse core::{fmt, mem};\nuse alloc::{boxed::Box, format, string::String, sync::Arc, vec, vec::Vec};\n#[cfg(feature = \"syntax\")]\nuse crate::nfa::thompson::{\n    compiler::{Compiler, Config},\n    error::BuildError,\n};\nuse crate::{\n    nfa::thompson::builder::Builder,\n    util::{\n        alphabet::{self, ByteClassSet, ByteClasses},\n        captures::{GroupInfo, GroupInfoError},\n        look::{Look, LookMatcher, LookSet},\n        primitives::{IteratorIndexExt, PatternID, PatternIDIter, SmallIndex, StateID},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct DenseTransitions {\n    /// A dense representation of this state's transitions on the heap. This\n    /// always has length 256.\n    pub transitions: Box<[StateID]>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl DenseTransitions {\n    #[inline]\n    pub fn matches(&self, haystack: &[u8], at: usize) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn matches_unit(&self, unit: alphabet::Unit) -> Option<StateID> {}\n    #[inline]\n    pub fn matches_byte(&self, byte: u8) -> Option<StateID> {\n        let next = self.transitions[usize::from(byte)];\n        if next == StateID::ZERO { None } else { Some(next) }\n    }\n    pub(crate) fn iter(&self) -> impl Iterator<Item = Transition> + '_ {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This follows the matching transition for a particular byte.\n///\n/// The matching transition is found by looking for a transition that\n/// doesn't correspond to `StateID::ZERO` for the given `byte`.\n///\n/// If `at >= haystack.len()`, then this returns `None`.\n1922 pub fn matches_byte(&self, byte: u8) -> Option<StateID> {\n1923     let next = self.transitions[usize::from(byte)];\n1924     if next == StateID::ZERO {\n1925         None\n1926     } else {\n1927         Some(next)\n1928     }\n1929 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}