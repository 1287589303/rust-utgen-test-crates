{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn len(byte: u8) -> Option<usize> {\n    if byte <= 0x7F {\n        return Some(1);\n    } else if byte & 0b1100_0000 == 0b1000_0000 {\n        return None;\n    } else if byte <= 0b1101_1111 {\n        Some(2)\n    } else if byte <= 0b1110_1111 {\n        Some(3)\n    } else if byte <= 0b1111_0111 {\n        Some(4)\n    } else {\n        None\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decodes the next UTF-8 encoded codepoint from the given byte slice.\n///\n/// If no valid encoding of a codepoint exists at the beginning of the given\n/// byte slice, then the first byte is returned instead.\n///\n/// This returns `None` if and only if `bytes` is empty.\n///\n/// This never panics.\n///\n/// *WARNING*: This is not designed for performance. If you're looking for a\n/// fast UTF-8 decoder, this is not it. If you feel like you need one in this\n/// crate, then please file an issue and discuss your use case.\n56 pub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n57     if bytes.is_empty() {\n58         return None;\n59     }\n60     let len = match len(bytes[0]) {\n61         None => return Some(Err(bytes[0])),\n62         Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n63         Some(1) => return Some(Ok(char::from(bytes[0]))),\n64         Some(len) => len,\n65     };\n66     match core::str::from_utf8(&bytes[..len]) {\n67         Ok(s) => Some(Ok(s.chars().next().unwrap())),\n68         Err(_) => Some(Err(bytes[0])),\n69     }\n70 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}