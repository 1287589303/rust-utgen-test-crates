{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn len(byte: u8) -> Option<usize> {\n    if byte <= 0x7F {\n        return Some(1);\n    } else if byte & 0b1100_0000 == 0b1000_0000 {\n        return None;\n    } else if byte <= 0b1101_1111 {\n        Some(2)\n    } else if byte <= 0b1110_1111 {\n        Some(3)\n    } else if byte <= 0b1111_0111 {\n        Some(4)\n    } else {\n        None\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decodes the next UTF-8 encoded codepoint from the given byte slice.\n///\n/// If no valid encoding of a codepoint exists at the beginning of the given\n/// byte slice, then the first byte is returned instead.\n///\n/// This returns `None` if and only if `bytes` is empty.\n///\n/// This never panics.\n///\n/// *WARNING*: This is not designed for performance. If you're looking for a\n/// fast UTF-8 decoder, this is not it. If you feel like you need one in this\n/// crate, then please file an issue and discuss your use case.\n56 pub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n57     if bytes.is_empty() {\n58         return None;\n59     }\n60     let len = match len(bytes[0]) {\n61         None => return Some(Err(bytes[0])),\n62         Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n63         Some(1) => return Some(Ok(char::from(bytes[0]))),\n64         Some(len) => len,\n65     };\n66     match core::str::from_utf8(&bytes[..len]) {\n67         Ok(s) => Some(Ok(s.chars().next().unwrap())),\n68         Err(_) => Some(Err(bytes[0])),\n69     }\n70 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}