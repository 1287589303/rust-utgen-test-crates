{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn accelerate(mut self, yes: bool) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn minimize(mut self, yes: bool) -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {\n        self.match_kind = Some(kind);\n        self\n    }\n    pub fn start_kind(mut self, kind: StartKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {}\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {}\n    pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn determinize_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn get_accelerate(&self) -> bool {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_minimize(&self) -> bool {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts(&self) -> StartKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {}\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_dfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_determinize_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the desired match semantics.\n///\n/// The default is [`MatchKind::LeftmostFirst`], which corresponds to the\n/// match semantics of Perl-like regex engines. That is, when multiple\n/// patterns would match at the same leftmost position, the pattern that\n/// appears first in the concrete syntax is chosen.\n///\n/// Currently, the only other kind of match semantics supported is\n/// [`MatchKind::All`]. This corresponds to classical DFA construction\n/// where all possible matches are added to the DFA.\n///\n/// Typically, `All` is used when one wants to execute an overlapping\n/// search and `LeftmostFirst` otherwise. In particular, it rarely makes\n/// sense to use `All` with the various \"leftmost\" find routines, since the\n/// leftmost routines depend on the `LeftmostFirst` automata construction\n/// strategy. Specifically, `LeftmostFirst` adds dead states to the DFA\n/// as a way to terminate the search and report a match. `LeftmostFirst`\n/// also supports non-greedy matches using this strategy where as `All`\n/// does not.\n///\n/// # Example: overlapping search\n///\n/// This example shows the typical use of `MatchKind::All`, which is to\n/// report overlapping matches.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{\n///     dfa::{Automaton, OverlappingState, dense},\n///     HalfMatch, Input, MatchKind,\n/// };\n///\n/// let dfa = dense::Builder::new()\n///     .configure(dense::Config::new().match_kind(MatchKind::All))\n///     .build_many(&[r\"\\w+$\", r\"\\S+$\"])?;\n/// let input = Input::new(\"@foo\");\n/// let mut state = OverlappingState::start();\n///\n/// let expected = Some(HalfMatch::must(1, 4));\n/// dfa.try_search_overlapping_fwd(&input, &mut state)?;\n/// assert_eq!(expected, state.get_match());\n///\n/// // The first pattern also matches at the same position, so re-running\n/// // the search will yield another match. Notice also that the first\n/// // pattern is returned after the second. This is because the second\n/// // pattern begins its match before the first, is therefore an earlier\n/// // match and is thus reported first.\n/// let expected = Some(HalfMatch::must(0, 4));\n/// dfa.try_search_overlapping_fwd(&input, &mut state)?;\n/// assert_eq!(expected, state.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Example: reverse automaton to find start of match\n///\n/// Another example for using `MatchKind::All` is for constructing a\n/// reverse automaton to find the start of a match. `All` semantics are\n/// used for this in order to find the longest possible match, which\n/// corresponds to the leftmost starting position.\n///\n/// Note that if you need the starting position then\n/// [`dfa::regex::Regex`](crate::dfa::regex::Regex) will handle this for\n/// you, so it's usually not necessary to do this yourself.\n///\n/// ```\n/// use regex_automata::{\n///     dfa::{dense, Automaton, StartKind},\n///     nfa::thompson::NFA,\n///     Anchored, HalfMatch, Input, MatchKind,\n/// };\n///\n/// let haystack = \"123foobar456\".as_bytes();\n/// let pattern = r\"[a-z]+r\";\n///\n/// let dfa_fwd = dense::DFA::new(pattern)?;\n/// let dfa_rev = dense::Builder::new()\n///     .thompson(NFA::config().reverse(true))\n///     .configure(dense::Config::new()\n///         // This isn't strictly necessary since both anchored and\n///         // unanchored searches are supported by default. But since\n///         // finding the start-of-match only requires anchored searches,\n///         // we can get rid of the unanchored configuration and possibly\n///         // slim down our DFA considerably.\n///         .start_kind(StartKind::Anchored)\n///         .match_kind(MatchKind::All)\n///     )\n///     .build(pattern)?;\n/// let expected_fwd = HalfMatch::must(0, 9);\n/// let expected_rev = HalfMatch::must(0, 3);\n/// let got_fwd = dfa_fwd.try_search_fwd(&Input::new(haystack))?.unwrap();\n/// // Here we don't specify the pattern to search for since there's only\n/// // one pattern and we're doing a leftmost search. But if this were an\n/// // overlapping search, you'd need to specify the pattern that matched\n/// // in the forward direction. (Otherwise, you might wind up finding the\n/// // starting position of a match of some other pattern.) That in turn\n/// // requires building the reverse automaton with starts_for_each_pattern\n/// // enabled. Indeed, this is what Regex does internally.\n/// let input = Input::new(haystack)\n///     .range(..got_fwd.offset())\n///     .anchored(Anchored::Yes);\n/// let got_rev = dfa_rev.try_search_rev(&input)?.unwrap();\n/// assert_eq!(expected_fwd, got_fwd);\n/// assert_eq!(expected_rev, got_rev);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n358 pub fn match_kind(mut self, kind: MatchKind) -> Config {\n359     self.match_kind = Some(kind);\n360     self\n361 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}