{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\npub struct ParserBuilder {\n    ignore_whitespace: bool,\n    nest_limit: u32,\n    octal: bool,\n    empty_min_range: bool,\n}\nimpl Default for ParserBuilder {\n    fn default() -> ParserBuilder {\n        ParserBuilder::new()\n    }\n}\nimpl ParserBuilder {\n    pub fn new() -> ParserBuilder {\n        ParserBuilder {\n            ignore_whitespace: false,\n            nest_limit: 250,\n            octal: false,\n            empty_min_range: false,\n        }\n    }\n    pub fn build(&self) -> Parser {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut ParserBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn empty_min_range(&mut self, yes: bool) -> &mut ParserBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n131 fn default() -> ParserBuilder {\n132     ParserBuilder::new()\n133 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}