{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{\n    bytes::{Regex, RegexSet},\n    error::Error,\n};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexSetBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexSetBuilder {\n    pub fn new<I, S>(patterns: I) -> RegexSetBuilder\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {}\n    pub fn build(&self) -> Result<RegexSet, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexSetBuilder {\n        self.builder.case_insensitive(yes);\n        self\n    }\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexSetBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexSetBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {\n        self.syntaxc = self.syntaxc.case_insensitive(yes);\n        self\n    }\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures whether to enable case insensitive matching for all\n/// of the patterns.\n///\n/// This setting can also be configured using the inline flag `i`\n/// in the pattern. For example, `(?i:foo)` matches `foo` case\n/// insensitively while `(?-i:foo)` matches `foo` case sensitively.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::RegexSetBuilder;\n///\n/// let re = RegexSetBuilder::new([r\"foo(?-i:bar)quux\"])\n///     .case_insensitive(true)\n///     .build()\n///     .unwrap();\n/// assert!(re.is_match(b\"FoObarQuUx\"));\n/// // Even though case insensitive matching is enabled in the builder,\n/// // it can be locally disabled within the pattern. In this case,\n/// // `bar` is matched case sensitively.\n/// assert!(!re.is_match(b\"fooBARquux\"));\n/// ```\n2092 pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexSetBuilder {\n2093     self.builder.case_insensitive(yes);\n2094     self\n2095 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}