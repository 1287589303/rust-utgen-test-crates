{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn is_leading_or_invalid_byte(b: u8) -> bool {\n    (b & 0b1100_0000) != 0b1000_0000\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given byte is either a valid leading UTF-8\n/// byte, or is otherwise an invalid byte that can never appear anywhere in a\n/// valid UTF-8 sequence.\n143 fn is_leading_or_invalid_byte(b: u8) -> bool {\n144     // In the ASCII case, the most significant bit is never set. The leading\n145     // byte of a 2/3/4-byte sequence always has the top two most significant\n146     // bits set. For bytes that can never appear anywhere in valid UTF-8, this\n147     // also returns true, since every such byte has its two most significant\n148     // bits set:\n149     //\n150     //     \\xC0 :: 11000000\n151     //     \\xC1 :: 11000001\n152     //     \\xF5 :: 11110101\n153     //     \\xF6 :: 11110110\n154     //     \\xF7 :: 11110111\n155     //     \\xF8 :: 11111000\n156     //     \\xF9 :: 11111001\n157     //     \\xFA :: 11111010\n158     //     \\xFB :: 11111011\n159     //     \\xFC :: 11111100\n160     //     \\xFD :: 11111101\n161     //     \\xFE :: 11111110\n162     //     \\xFF :: 11111111\n163     (b & 0b1100_0000) != 0b1000_0000\n164 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}