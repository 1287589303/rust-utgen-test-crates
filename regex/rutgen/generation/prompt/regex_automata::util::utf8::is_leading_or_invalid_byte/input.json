{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn is_leading_or_invalid_byte(b: u8) -> bool {\n    (b & 0b1100_0000) != 0b1000_0000\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given byte is either a valid leading UTF-8\n/// byte, or is otherwise an invalid byte that can never appear anywhere in a\n/// valid UTF-8 sequence.\n143 fn is_leading_or_invalid_byte(b: u8) -> bool {\n144     // In the ASCII case, the most significant bit is never set. The leading\n145     // byte of a 2/3/4-byte sequence always has the top two most significant\n146     // bits set. For bytes that can never appear anywhere in valid UTF-8, this\n147     // also returns true, since every such byte has its two most significant\n148     // bits set:\n149     //\n150     //     \\xC0 :: 11000000\n151     //     \\xC1 :: 11000001\n152     //     \\xF5 :: 11110101\n153     //     \\xF6 :: 11110110\n154     //     \\xF7 :: 11110111\n155     //     \\xF8 :: 11111000\n156     //     \\xF9 :: 11111001\n157     //     \\xFA :: 11111010\n158     //     \\xFB :: 11111011\n159     //     \\xFC :: 11111100\n160     //     \\xFD :: 11111101\n161     //     \\xFE :: 11111110\n162     //     \\xFF :: 11111111\n163     (b & 0b1100_0000) != 0b1000_0000\n164 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}