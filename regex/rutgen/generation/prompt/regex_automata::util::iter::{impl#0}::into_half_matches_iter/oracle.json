{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\npub struct TryHalfMatchesIter<'h, F> {\n    it: Searcher<'h>,\n    finder: F,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\nimpl<'h> Searcher<'h> {\n    pub fn new(input: Input<'h>) -> Searcher<'h> {}\n    pub fn input<'s>(&'s self) -> &'s Input<'h> {}\n    #[inline]\n    pub fn advance_half<F>(&mut self, finder: F) -> Option<HalfMatch>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn advance<F>(&mut self, finder: F) -> Option<Match>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance_half<F>(\n        &mut self,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance<F>(&mut self, mut finder: F) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_half_matches_iter<F>(self, finder: F) -> TryHalfMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {\n        TryHalfMatchesIter {\n            it: self,\n            finder,\n        }\n    }\n    #[inline]\n    pub fn into_matches_iter<F>(self, finder: F) -> TryMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub fn into_captures_iter<F>(\n        self,\n        caps: Captures,\n        finder: F,\n    ) -> TryCapturesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_half_match<F>(\n        &mut self,\n        _: HalfMatch,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_match<F>(\n        &mut self,\n        m: Match,\n        mut finder: F,\n    ) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Given a closure that executes a single search, return an iterator over\n/// all successive non-overlapping half matches.\n///\n/// The iterator returned yields result values. If the underlying regex\n/// engine is configured to never return an error, consider calling\n/// [`TryHalfMatchesIter::infallible`] to convert errors into panics.\n///\n/// # Example\n///\n/// This example shows how to use a `Searcher` to create a proper\n/// iterator over half matches.\n///\n/// ```\n/// use regex_automata::{\n///     hybrid::dfa::DFA,\n///     util::iter::Searcher,\n///     HalfMatch, Input,\n/// };\n///\n/// let re = DFA::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")?;\n/// let mut cache = re.create_cache();\n///\n/// let input = Input::new(\"2010-03-14 2016-10-08 2020-10-22\");\n/// let mut it = Searcher::new(input).into_half_matches_iter(|input| {\n///     re.try_search_fwd(&mut cache, input)\n/// });\n///\n/// let expected = Some(Ok(HalfMatch::must(0, 10)));\n/// assert_eq!(expected, it.next());\n///\n/// let expected = Some(Ok(HalfMatch::must(0, 21)));\n/// assert_eq!(expected, it.next());\n///\n/// let expected = Some(Ok(HalfMatch::must(0, 32)));\n/// assert_eq!(expected, it.next());\n///\n/// let expected = None;\n/// assert_eq!(expected, it.next());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n488 pub fn into_half_matches_iter<F>(\n489     self,\n490     finder: F,\n491 ) -> TryHalfMatchesIter<'h, F>\n492 where\n493     F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n494 {\n495     TryHalfMatchesIter { it: self, finder }\n496 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}