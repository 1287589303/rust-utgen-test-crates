{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/regex.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse alloc::vec::Vec;\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa::dense::BuildError;\nuse crate::{\n    dfa::{automaton::Automaton, dense},\n    util::{iter, search::Input},\n    Anchored, Match, MatchError,\n};\n#[cfg(feature = \"alloc\")]\nuse crate::{\n    dfa::{sparse, StartKind},\n    util::search::MatchKind,\n};\n#[derive(Clone, Debug)]\npub struct Builder {\n    #[cfg(feature = \"dfa-build\")]\n    dfa: dense::Builder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    dfa: dfa::Builder,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Builder {\n    /// The ID of the pattern that we're currently building.\n    ///\n    /// Callers are required to set (and unset) this by calling\n    /// {start,finish}_pattern. Otherwise, most methods will panic.\n    pattern_id: Option<PatternID>,\n    /// A sequence of intermediate NFA states. Once a state is added to this\n    /// sequence, it is assigned a state ID equivalent to its index. Once a\n    /// state is added, it is still expected to be mutated, e.g., to set its\n    /// transition to a state that didn't exist at the time it was added.\n    states: Vec<State>,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// A map from pattern ID to capture group index to name. (If no name\n    /// exists, then a None entry is present. Thus, all capturing groups are\n    /// present in this mapping.)\n    ///\n    /// The outer vec is indexed by pattern ID, while the inner vec is indexed\n    /// by capture index offset for the corresponding pattern.\n    ///\n    /// The first capture group for each pattern is always unnamed and is thus\n    /// always None.\n    captures: Vec<Vec<Option<Arc<str>>>>,\n    /// The combined memory used by each of the 'State's in 'states'. This\n    /// only includes heap usage by each state, and not the size of the state\n    /// itself. In other words, this tracks heap memory used that isn't\n    /// captured via `size_of::<State>() * states.len()`.\n    memory_states: usize,\n    /// Whether this NFA only matches UTF-8 and whether regex engines using\n    /// this NFA for searching should report empty matches that split a\n    /// codepoint.\n    utf8: bool,\n    /// Whether this NFA should be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to use for look-around assertions.\n    look_matcher: LookMatcher,\n    /// A size limit to respect when building an NFA. If the total heap memory\n    /// of the intermediate NFA states exceeds (or would exceed) this amount,\n    /// then an error is returned.\n    size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\nimpl Builder {\n    pub fn new() -> Builder {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn build(&self, pattern: &str) -> Result<Regex, BuildError> {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn build_sparse(\n        &self,\n        pattern: &str,\n    ) -> Result<Regex<sparse::DFA<Vec<u8>>>, BuildError> {\n        self.build_many_sparse(&[pattern])\n    }\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn build_many<P: AsRef<str>>(\n        &self,\n        patterns: &[P],\n    ) -> Result<Regex, BuildError> {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn build_many_sparse<P: AsRef<str>>(\n        &self,\n        patterns: &[P],\n    ) -> Result<Regex<sparse::DFA<Vec<u8>>>, BuildError> {\n        let re = self.build_many(patterns)?;\n        let forward = re.forward().to_sparse()?;\n        let reverse = re.reverse().to_sparse()?;\n        Ok(self.build_from_dfas(forward, reverse))\n    }\n    pub fn build_from_dfas<A: Automaton>(&self, forward: A, reverse: A) -> Regex<A> {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn syntax(&mut self, config: crate::util::syntax::Config) -> &mut Builder {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn thompson(&mut self, config: crate::nfa::thompson::Config) -> &mut Builder {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn dense(&mut self, config: dense::Config) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Build a regex from the given pattern using sparse DFAs.\n///\n/// If there was a problem parsing or compiling the pattern, then an error\n/// is returned.\n721 pub fn build_sparse(\n722     &self,\n723     pattern: &str,\n724 ) -> Result<Regex<sparse::DFA<Vec<u8>>>, BuildError> {\n725     self.build_many_sparse(&[pattern])\n726 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}