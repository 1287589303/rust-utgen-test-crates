{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/range_trie.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem, ops::RangeInclusive};\nuse alloc::{format, string::String, vec, vec::Vec};\nuse regex_syntax::utf8::Utf8Range;\nuse crate::util::primitives::StateID;\nconst FINAL: StateID = StateID::ZERO;\nconst ROOT: StateID = StateID::new_unchecked(1);\n#[derive(Clone)]\nstruct State {\n    /// A sorted sequence of non-overlapping transitions to other states. Each\n    /// transition corresponds to a single range of bytes.\n    transitions: Vec<Transition>,\n}\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\nimpl fmt::Debug for State {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let rs = self\n            .transitions\n            .iter()\n            .map(|t| format!(\"{:?}\", t))\n            .collect::<Vec<String>>()\n            .join(\", \");\n        write!(f, \"{}\", rs)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n879 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n880     let rs = self\n881         .transitions\n882         .iter()\n883         .map(|t| format!(\"{:?}\", t))\n884         .collect::<Vec<String>>()\n885         .join(\", \");\n886     write!(f, \"{}\", rs)\n887 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}