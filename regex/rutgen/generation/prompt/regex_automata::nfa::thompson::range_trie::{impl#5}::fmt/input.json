{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/range_trie.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem, ops::RangeInclusive};\nuse alloc::{format, string::String, vec, vec::Vec};\nuse regex_syntax::utf8::Utf8Range;\nuse crate::util::primitives::StateID;\nconst FINAL: StateID = StateID::ZERO;\nconst ROOT: StateID = StateID::new_unchecked(1);\n#[derive(Clone)]\nstruct State {\n    /// A sorted sequence of non-overlapping transitions to other states. Each\n    /// transition corresponds to a single range of bytes.\n    transitions: Vec<Transition>,\n}\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\nimpl fmt::Debug for State {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let rs = self\n            .transitions\n            .iter()\n            .map(|t| format!(\"{:?}\", t))\n            .collect::<Vec<String>>()\n            .join(\", \");\n        write!(f, \"{}\", rs)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n879 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n880     let rs = self\n881         .transitions\n882         .iter()\n883         .map(|t| format!(\"{:?}\", t))\n884         .collect::<Vec<String>>()\n885         .join(\", \");\n886     write!(f, \"{}\", rs)\n887 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}