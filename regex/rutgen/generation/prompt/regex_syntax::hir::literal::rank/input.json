{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\npub fn rank(byte: u8) -> u8 {\n    crate::rank::BYTE_FREQUENCIES[usize::from(byte)]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the \"rank\" of the given byte.\n///\n/// The minimum rank value is `0` and the maximum rank value is `255`.\n///\n/// The rank of a byte is derived from a heuristic background distribution of\n/// relative frequencies of bytes. The heuristic says that lower the rank of a\n/// byte, the less likely that byte is to appear in any arbitrary haystack.\n2319 pub fn rank(byte: u8) -> u8 {\n2320     crate::rank::BYTE_FREQUENCIES[usize::from(byte)]\n2321 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}