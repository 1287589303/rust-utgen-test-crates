{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\npub fn rank(byte: u8) -> u8 {\n    crate::rank::BYTE_FREQUENCIES[usize::from(byte)]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the \"rank\" of the given byte.\n///\n/// The minimum rank value is `0` and the maximum rank value is `255`.\n///\n/// The rank of a byte is derived from a heuristic background distribution of\n/// relative frequencies of bytes. The heuristic says that lower the rank of a\n/// byte, the less likely that byte is to appear in any arbitrary haystack.\n2319 pub fn rank(byte: u8) -> u8 {\n2320     crate::rank::BYTE_FREQUENCIES[usize::from(byte)]\n2321 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}