{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Captures<'h> {\n    haystack: &'h str,\n    slots: CaptureLocations,\n    pikevm: Arc<PikeVM>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone, Debug)]\npub struct CaptureLocations(Vec<Option<NonMaxUsize>>);\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &str, dst: &mut String) {\n        interpolate::string(\n            replacement,\n            |index, dst| {\n                let m = match self.get(index) {\n                    None => return,\n                    Some(m) => m,\n                };\n                dst.push_str(&self.haystack[m.range()]);\n            },\n            |name| self.pikevm.nfa().to_index(name),\n            dst,\n        );\n    }\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\npub fn string(\n    mut replacement: &str,\n    mut append: impl FnMut(usize, &mut String),\n    mut name_to_index: impl FnMut(&str) -> Option<usize>,\n    dst: &mut String,\n) {\n    while !replacement.is_empty() {\n        match replacement.find('$') {\n            None => break,\n            Some(i) => {\n                dst.push_str(&replacement[..i]);\n                replacement = &replacement[i..];\n            }\n        }\n        if replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') {\n            dst.push_str(\"$\");\n            replacement = &replacement[2..];\n            continue;\n        }\n        debug_assert!(! replacement.is_empty());\n        let cap_ref = match find_cap_ref(replacement.as_bytes()) {\n            Some(cap_ref) => cap_ref,\n            None => {\n                dst.push_str(\"$\");\n                replacement = &replacement[1..];\n                continue;\n            }\n        };\n        replacement = &replacement[cap_ref.end..];\n        match cap_ref.cap {\n            Ref::Number(i) => append(i, dst),\n            Ref::Named(name) => {\n                if let Some(i) = name_to_index(name) {\n                    append(i, dst);\n                }\n            }\n        }\n    }\n    dst.push_str(replacement);\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Expands all instances of `$ref` in `replacement` to the corresponding\n/// capture group, and writes them to the `dst` buffer given. A `ref` can\n/// be a capture group index or a name. If `ref` doesn't refer to a capture\n/// group that participated in the match, then it is replaced with the\n/// empty string.\n///\n/// # Format\n///\n/// The format of the replacement string supports two different kinds of\n/// capture references: unbraced and braced.\n///\n/// For the unbraced format, the format supported is `$ref` where `name`\n/// can be any character in the class `[0-9A-Za-z_]`. `ref` is always\n/// the longest possible parse. So for example, `$1a` corresponds to the\n/// capture group named `1a` and not the capture group at index `1`. If\n/// `ref` matches `^[0-9]+$`, then it is treated as a capture group index\n/// itself and not a name.\n///\n/// For the braced format, the format supported is `${ref}` where `ref` can\n/// be any sequence of bytes except for `}`. If no closing brace occurs,\n/// then it is not considered a capture reference. As with the unbraced\n/// format, if `ref` matches `^[0-9]+$`, then it is treated as a capture\n/// group index and not a name.\n///\n/// The braced format is useful for exerting precise control over the name\n/// of the capture reference. For example, `${1}a` corresponds to the\n/// capture group reference `1` followed by the letter `a`, where as `$1a`\n/// (as mentioned above) corresponds to the capture group reference `1a`.\n/// The braced format is also useful for expressing capture group names\n/// that use characters not supported by the unbraced format. For example,\n/// `${foo[bar].baz}` refers to the capture group named `foo[bar].baz`.\n///\n/// If a capture group reference is found and it does not refer to a valid\n/// capture group, then it will be replaced with the empty string.\n///\n/// To write a literal `$`, use `$$`.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(\n///     r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",\n/// ).unwrap();\n/// let hay = \"On 14-03-2010, I became a Tenneessee lamb.\";\n/// let caps = re.captures(hay).unwrap();\n///\n/// let mut dst = String::new();\n/// caps.expand(\"year=$year, month=$month, day=$day\", &mut dst);\n/// assert_eq!(dst, \"year=2010, month=03, day=14\");\n/// ```\n1863 pub fn expand(&self, replacement: &str, dst: &mut String) {\n1864     interpolate::string(\n1865         replacement,\n1866         |index, dst| {\n1867             let m = match self.get(index) {\n1868                 None => return,\n1869                 Some(m) => m,\n1870             };\n1871             dst.push_str(&self.haystack[m.range()]);\n1872         },\n1873         |name| self.pikevm.nfa().to_index(name),\n1874         dst,\n1875     );\n1876 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}