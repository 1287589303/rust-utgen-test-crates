{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/hybrid/dfa.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype StateMap = std::collections::HashMap<State, LazyStateID>;\n#[cfg(not(feature = \"std\"))]\ntype StateMap = alloc::collections::BTreeMap<State, LazyStateID>;\nuse core::{iter, mem::size_of};\nuse alloc::vec::Vec;\nuse crate::{\n    hybrid::{\n        error::{BuildError, CacheError, StartError},\n        id::{LazyStateID, LazyStateIDError},\n        search,\n    },\n    nfa::thompson,\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        determinize::{self, State, StateBuilderEmpty, StateBuilderNFA},\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID as NFAStateID},\n        search::{Anchored, HalfMatch, Input, MatchError, MatchKind, PatternSet},\n        sparse_set::SparseSets, start::{self, Start, StartByteMap},\n    },\n};\nconst MIN_STATES: usize = SENTINEL_STATES + 2;\nconst SENTINEL_STATES: usize = 3;\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {\n        if self.get_unicode_word_boundary() && !byte.is_ascii() && !yes {\n            panic!(\n                \"cannot set non-ASCII byte to be non-quit when \\\n                 Unicode word boundaries are enabled\"\n            );\n        }\n        if self.quitset.is_none() {\n            self.quitset = Some(ByteSet::empty());\n        }\n        if yes {\n            self.quitset.as_mut().unwrap().add(byte);\n        } else {\n            self.quitset.as_mut().unwrap().remove(byte);\n        }\n        self\n    }\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {}\n    pub fn cache_capacity(mut self, bytes: usize) -> Config {}\n    pub fn skip_cache_capacity_check(mut self, yes: bool) -> Config {}\n    pub fn minimum_cache_clear_count(mut self, min: Option<usize>) -> Config {}\n    pub fn minimum_bytes_per_state(mut self, min: Option<usize>) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {\n        self.unicode_word_boundary.unwrap_or(false)\n    }\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_cache_capacity(&self) -> usize {}\n    pub fn get_skip_cache_capacity_check(&self) -> bool {}\n    pub fn get_minimum_cache_clear_count(&self) -> Option<usize> {}\n    pub fn get_minimum_bytes_per_state(&self) -> Option<usize> {}\n    pub fn get_minimum_cache_capacity(\n        &self,\n        nfa: &thompson::NFA,\n    ) -> Result<usize, BuildError> {}\n    fn byte_classes_from_nfa(&self, nfa: &thompson::NFA, quit: &ByteSet) -> ByteClasses {}\n    fn quit_set_from_nfa(&self, nfa: &thompson::NFA) -> Result<ByteSet, BuildError> {}\n    fn overwrite(&self, o: Config) -> Config {}\n}\nimpl ByteSet {\n    pub(crate) fn empty() -> ByteSet {\n        ByteSet { bits: BitSet([0; 2]) }\n    }\n    pub(crate) fn add(&mut self, byte: u8) {\n        let bucket = byte / 128;\n        let bit = byte % 128;\n        self.bits.0[usize::from(bucket)] |= 1 << bit;\n    }\n    pub(crate) fn remove(&mut self, byte: u8) {\n        let bucket = byte / 128;\n        let bit = byte % 128;\n        self.bits.0[usize::from(bucket)] &= !(1 << bit);\n    }\n    pub(crate) fn contains(&self, byte: u8) -> bool {}\n    pub(crate) fn contains_range(&self, start: u8, end: u8) -> bool {}\n    pub(crate) fn iter(&self) -> ByteSetIter {}\n    pub(crate) fn iter_ranges(&self) -> ByteSetRangeIter {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteSet, usize), DeserializeError> {}\n    pub(crate) fn write_to<E: crate::util::wire::Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Add a \"quit\" byte to the lazy DFA.\n///\n/// When a quit byte is seen during search time, then search will return a\n/// [`MatchError::quit`] error indicating the offset at which the search\n/// stopped.\n///\n/// A quit byte will always overrule any other aspects of a regex. For\n/// example, if the `x` byte is added as a quit byte and the regex `\\w` is\n/// used, then observing `x` will cause the search to quit immediately\n/// despite the fact that `x` is in the `\\w` class.\n///\n/// This mechanism is primarily useful for heuristically enabling certain\n/// features like Unicode word boundaries in a DFA. Namely, if the input\n/// to search is ASCII, then a Unicode word boundary can be implemented\n/// via an ASCII word boundary with no change in semantics. Thus, a DFA\n/// can attempt to match a Unicode word boundary but give up as soon as it\n/// observes a non-ASCII byte. Indeed, if callers set all non-ASCII bytes\n/// to be quit bytes, then Unicode word boundaries will be permitted when\n/// building lazy DFAs. Of course, callers should enable\n/// [`Config::unicode_word_boundary`] if they want this behavior instead.\n/// (The advantage being that non-ASCII quit bytes will only be added if a\n/// Unicode word boundary is in the pattern.)\n///\n/// When enabling this option, callers _must_ be prepared to\n/// handle a [`MatchError`] error during search. When using a\n/// [`Regex`](crate::hybrid::regex::Regex), this corresponds to using the\n/// `try_` suite of methods.\n///\n/// By default, there are no quit bytes set.\n///\n/// # Panics\n///\n/// This panics if heuristic Unicode word boundaries are enabled and any\n/// non-ASCII byte is removed from the set of quit bytes. Namely, enabling\n/// Unicode word boundaries requires setting every non-ASCII byte to a quit\n/// byte. So if the caller attempts to undo any of that, then this will\n/// panic.\n///\n/// # Example\n///\n/// This example shows how to cause a search to terminate if it sees a\n/// `\\n` byte. This could be useful if, for example, you wanted to prevent\n/// a user supplied pattern from matching across a line boundary.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{hybrid::dfa::DFA, MatchError, Input};\n///\n/// let dfa = DFA::builder()\n///     .configure(DFA::config().quit(b'\\n', true))\n///     .build(r\"foo\\p{any}+bar\")?;\n/// let mut cache = dfa.create_cache();\n///\n/// let haystack = \"foo\\nbar\";\n/// // Normally this would produce a match, since \\p{any} contains '\\n'.\n/// // But since we instructed the automaton to enter a quit state if a\n/// // '\\n' is observed, this produces a match error instead.\n/// let expected = MatchError::quit(b'\\n', 3);\n/// let got = dfa.try_search_fwd(\n///     &mut cache,\n///     &Input::new(haystack),\n/// ).unwrap_err();\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n3352 pub fn quit(mut self, byte: u8, yes: bool) -> Config {\n3353     if self.get_unicode_word_boundary() && !byte.is_ascii() && !yes {\n3354         panic!(\n3355             \"cannot set non-ASCII byte to be non-quit when \\\n3356              Unicode word boundaries are enabled\"\n3357         );\n3358     }\n3359     if self.quitset.is_none() {\n3360         self.quitset = Some(ByteSet::empty());\n3361     }\n3362     if yes {\n3363         self.quitset.as_mut().unwrap().add(byte);\n3364     } else {\n3365         self.quitset.as_mut().unwrap().remove(byte);\n3366     }\n3367     self\n3368 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}