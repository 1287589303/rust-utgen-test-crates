{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Clone, Debug)]\npub struct Compiler {\n    /// A regex parser, used when compiling an NFA directly from a pattern\n    /// string.\n    parser: ParserBuilder,\n    /// The compiler configuration.\n    config: Config,\n    /// The builder for actually constructing an NFA. This provides a\n    /// convenient abstraction for writing a compiler.\n    builder: RefCell<Builder>,\n    /// State used for compiling character classes to UTF-8 byte automata.\n    /// State is not retained between character class compilations. This just\n    /// serves to amortize allocation to the extent possible.\n    utf8_state: RefCell<Utf8State>,\n    /// State used for arranging character classes in reverse into a trie.\n    trie_state: RefCell<RangeTrie>,\n    /// State used for caching common suffixes when compiling reverse UTF-8\n    /// automata (for Unicode character classes).\n    utf8_suffix: RefCell<Utf8SuffixMap>,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct ThompsonRef {\n    pub(crate) start: StateID,\n    pub(crate) end: StateID,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug)]\nstruct Utf8State {\n    compiled: Utf8BoundedMap,\n    uncompiled: Vec<Utf8Node>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Utf8SuffixMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8SuffixEntry>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Builder {\n    /// The ID of the pattern that we're currently building.\n    ///\n    /// Callers are required to set (and unset) this by calling\n    /// {start,finish}_pattern. Otherwise, most methods will panic.\n    pattern_id: Option<PatternID>,\n    /// A sequence of intermediate NFA states. Once a state is added to this\n    /// sequence, it is assigned a state ID equivalent to its index. Once a\n    /// state is added, it is still expected to be mutated, e.g., to set its\n    /// transition to a state that didn't exist at the time it was added.\n    states: Vec<State>,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// A map from pattern ID to capture group index to name. (If no name\n    /// exists, then a None entry is present. Thus, all capturing groups are\n    /// present in this mapping.)\n    ///\n    /// The outer vec is indexed by pattern ID, while the inner vec is indexed\n    /// by capture index offset for the corresponding pattern.\n    ///\n    /// The first capture group for each pattern is always unnamed and is thus\n    /// always None.\n    captures: Vec<Vec<Option<Arc<str>>>>,\n    /// The combined memory used by each of the 'State's in 'states'. This\n    /// only includes heap usage by each state, and not the size of the state\n    /// itself. In other words, this tracks heap memory used that isn't\n    /// captured via `size_of::<State>() * states.len()`.\n    memory_states: usize,\n    /// Whether this NFA only matches UTF-8 and whether regex engines using\n    /// this NFA for searching should report empty matches that split a\n    /// codepoint.\n    utf8: bool,\n    /// Whether this NFA should be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to use for look-around assertions.\n    look_matcher: LookMatcher,\n    /// A size limit to respect when building an NFA. If the total heap memory\n    /// of the intermediate NFA states exceeds (or would exceed) this amount,\n    /// then an error is returned.\n    size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    #[cfg(feature = \"dfa-build\")]\n    dfa: dense::Builder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone)]\npub struct RangeTrie {\n    /// The states in this trie. The first is always the shared final state.\n    /// The second is always the root state. Otherwise, there is no\n    /// particular order.\n    states: Vec<State>,\n    /// A free-list of states. When a range trie is cleared, all of its states\n    /// are added to this list. Creating a new state reuses states from this\n    /// list before allocating a new one.\n    free: Vec<State>,\n    /// A stack for traversing this trie to yield sequences of byte ranges in\n    /// lexicographic order.\n    iter_stack: RefCell<Vec<NextIter>>,\n    /// A buffer that stores the current sequence during iteration.\n    iter_ranges: RefCell<Vec<Utf8Range>>,\n    /// A stack used for traversing the trie in order to (deeply) duplicate\n    /// a state. States are recursively duplicated when ranges are split.\n    dupe_stack: Vec<NextDupe>,\n    /// A stack used for traversing the trie during insertion of a new\n    /// sequence of byte ranges.\n    insert_stack: Vec<NextInsert>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    dfa: dfa::Builder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\nimpl Compiler {\n    fn compile<H: Borrow<Hir>>(&self, exprs: &[H]) -> Result<NFA, BuildError> {}\n    fn c(&self, expr: &Hir) -> Result<ThompsonRef, BuildError> {\n        use regex_syntax::hir::{Class, HirKind::*};\n        match *expr.kind() {\n            Empty => self.c_empty(),\n            Literal(hir::Literal(ref bytes)) => self.c_literal(bytes),\n            Class(Class::Bytes(ref c)) => self.c_byte_class(c),\n            Class(Class::Unicode(ref c)) => self.c_unicode_class(c),\n            Look(ref look) => self.c_look(look),\n            Repetition(ref rep) => self.c_repetition(rep),\n            Capture(ref c) => self.c_cap(c.index, c.name.as_deref(), &c.sub),\n            Concat(ref es) => self.c_concat(es.iter().map(|e| self.c(e))),\n            Alternation(ref es) => self.c_alt_slice(es),\n        }\n    }\n    fn c_concat<I>(&self, mut it: I) -> Result<ThompsonRef, BuildError>\n    where\n        I: DoubleEndedIterator<Item = Result<ThompsonRef, BuildError>>,\n    {}\n    fn c_alt_slice(&self, exprs: &[Hir]) -> Result<ThompsonRef, BuildError> {}\n    fn c_alt_iter<I>(&self, mut it: I) -> Result<ThompsonRef, BuildError>\n    where\n        I: Iterator<Item = Result<ThompsonRef, BuildError>>,\n    {}\n    fn c_cap(\n        &self,\n        index: u32,\n        name: Option<&str>,\n        expr: &Hir,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_repetition(&self, rep: &hir::Repetition) -> Result<ThompsonRef, BuildError> {}\n    fn c_bounded(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_at_least(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n        n: u32,\n    ) -> Result<ThompsonRef, BuildError> {\n        if n == 0 {\n            if expr.properties().minimum_len().map_or(false, |len| len > 0) {\n                let union = if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?;\n                let compiled = self.c(expr)?;\n                self.patch(union, compiled.start)?;\n                self.patch(compiled.end, union)?;\n                return Ok(ThompsonRef {\n                    start: union,\n                    end: union,\n                });\n            }\n            let compiled = self.c(expr)?;\n            let plus = if greedy { self.add_union() } else { self.add_union_reverse() }?;\n            self.patch(compiled.end, plus)?;\n            self.patch(plus, compiled.start)?;\n            let question = if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?;\n            let empty = self.add_empty()?;\n            self.patch(question, compiled.start)?;\n            self.patch(question, empty)?;\n            self.patch(plus, empty)?;\n            Ok(ThompsonRef {\n                start: question,\n                end: empty,\n            })\n        } else if n == 1 {\n            let compiled = self.c(expr)?;\n            let union = if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?;\n            self.patch(compiled.end, union)?;\n            self.patch(union, compiled.start)?;\n            Ok(ThompsonRef {\n                start: compiled.start,\n                end: union,\n            })\n        } else {\n            let prefix = self.c_exactly(expr, n - 1)?;\n            let last = self.c(expr)?;\n            let union = if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?;\n            self.patch(prefix.end, last.start)?;\n            self.patch(last.end, union)?;\n            self.patch(union, last.start)?;\n            Ok(ThompsonRef {\n                start: prefix.start,\n                end: union,\n            })\n        }\n    }\n    fn c_zero_or_one(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_exactly(&self, expr: &Hir, n: u32) -> Result<ThompsonRef, BuildError> {\n        let it = (0..n).map(|_| self.c(expr));\n        self.c_concat(it)\n    }\n    fn c_byte_class(&self, cls: &hir::ClassBytes) -> Result<ThompsonRef, BuildError> {}\n    fn c_unicode_class(\n        &self,\n        cls: &hir::ClassUnicode,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_unicode_class_reverse_with_suffix(\n        &self,\n        cls: &hir::ClassUnicode,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_look(&self, anchor: &hir::Look) -> Result<ThompsonRef, BuildError> {}\n    fn c_literal(&self, bytes: &[u8]) -> Result<ThompsonRef, BuildError> {}\n    fn c_range(&self, start: u8, end: u8) -> Result<ThompsonRef, BuildError> {}\n    fn c_empty(&self) -> Result<ThompsonRef, BuildError> {}\n    fn c_fail(&self) -> Result<ThompsonRef, BuildError> {}\n    fn patch(&self, from: StateID, to: StateID) -> Result<(), BuildError> {\n        self.builder.borrow_mut().patch(from, to)\n    }\n    fn start_pattern(&self) -> Result<PatternID, BuildError> {}\n    fn finish_pattern(&self, start_id: StateID) -> Result<PatternID, BuildError> {}\n    fn add_empty(&self) -> Result<StateID, BuildError> {\n        self.builder.borrow_mut().add_empty()\n    }\n    fn add_range(&self, start: u8, end: u8) -> Result<StateID, BuildError> {}\n    fn add_sparse(&self, ranges: Vec<Transition>) -> Result<StateID, BuildError> {}\n    fn add_look(&self, mut look: Look) -> Result<StateID, BuildError> {}\n    fn add_union(&self) -> Result<StateID, BuildError> {\n        self.builder.borrow_mut().add_union(vec![])\n    }\n    fn add_union_reverse(&self) -> Result<StateID, BuildError> {\n        self.builder.borrow_mut().add_union_reverse(vec![])\n    }\n    fn add_capture_start(\n        &self,\n        capture_index: u32,\n        name: Option<&str>,\n    ) -> Result<StateID, BuildError> {}\n    fn add_capture_end(&self, capture_index: u32) -> Result<StateID, BuildError> {}\n    fn add_fail(&self) -> Result<StateID, BuildError> {}\n    fn add_match(&self) -> Result<StateID, BuildError> {}\n    fn is_reverse(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compile the given expression such that it may be matched `n` or more\n/// times, where `n` can be any integer. (Although a particularly large\n/// integer is likely to run afoul of any configured size limits.)\n///\n/// When `greedy` is true, then the preference is for the expression to\n/// match as much as possible. Otherwise, it will match as little as\n/// possible.\n1228 fn c_at_least(\n1229     &self,\n1230     expr: &Hir,\n1231     greedy: bool,\n1232     n: u32,\n1233 ) -> Result<ThompsonRef, BuildError> {\n1234     if n == 0 {\n1235         // When the expression cannot match the empty string, then we\n1236         // can get away with something much simpler: just one 'alt'\n1237         // instruction that optionally repeats itself. But if the expr\n1238         // can match the empty string... see below.\n1239         if expr.properties().minimum_len().map_or(false, |len| len > 0) {\n1240             let union = if greedy {\n1241                 self.add_union()\n1242             } else {\n1243                 self.add_union_reverse()\n1244             }?;\n1245             let compiled = self.c(expr)?;\n1246             self.patch(union, compiled.start)?;\n1247             self.patch(compiled.end, union)?;\n1248             return Ok(ThompsonRef { start: union, end: union });\n1249         }\n1250 \n1251         // What's going on here? Shouldn't x* be simpler than this? It\n1252         // turns out that when implementing leftmost-first (Perl-like)\n1253         // match semantics, x* results in an incorrect preference order\n1254         // when computing the transitive closure of states if and only if\n1255         // 'x' can match the empty string. So instead, we compile x* as\n1256         // (x+)?, which preserves the correct preference order.\n1257         //\n1258         // See: https://github.com/rust-lang/regex/issues/779\n1259         let compiled = self.c(expr)?;\n1260         let plus = if greedy {\n1261             self.add_union()\n1262         } else {\n1263             self.add_union_reverse()\n1264         }?;\n1265         self.patch(compiled.end, plus)?;\n1266         self.patch(plus, compiled.start)?;\n1267 \n1268         let question = if greedy {\n1269             self.add_union()\n1270         } else {\n1271             self.add_union_reverse()\n1272         }?;\n1273         let empty = self.add_empty()?;\n1274         self.patch(question, compiled.start)?;\n1275         self.patch(question, empty)?;\n1276         self.patch(plus, empty)?;\n1277         Ok(ThompsonRef { start: question, end: empty })\n1278     } else if n == 1 {\n1279         let compiled = self.c(expr)?;\n1280         let union = if greedy {\n1281             self.add_union()\n1282         } else {\n1283             self.add_union_reverse()\n1284         }?;\n1285         self.patch(compiled.end, union)?;\n1286         self.patch(union, compiled.start)?;\n1287         Ok(ThompsonRef { start: compiled.start, end: union })\n1288     } else {\n1289         let prefix = self.c_exactly(expr, n - 1)?;\n1290         let last = self.c(expr)?;\n1291         let union = if greedy {\n1292             self.add_union()\n1293         } else {\n1294             self.add_union_reverse()\n1295         }?;\n1296         self.patch(prefix.end, last.start)?;\n1297         self.patch(last.end, union)?;\n1298         self.patch(union, last.start)?;\n1299         Ok(ThompsonRef { start: prefix.start, end: union })\n1300     }\n1301 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}