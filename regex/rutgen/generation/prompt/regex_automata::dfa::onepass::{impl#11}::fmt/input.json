{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl core::fmt::Debug for Transition {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        if self.is_dead() {\n            return write!(f, \"0\");\n        }\n        write!(f, \"{}\", self.state_id().as_usize())?;\n        if self.match_wins() {\n            write!(f, \"-MW\")?;\n        }\n        if !self.epsilons().is_empty() {\n            write!(f, \"-{:?}\", self.epsilons())?;\n        }\n        Ok(())\n    }\n}\nimpl Transition {\n    const STATE_ID_BITS: u64 = 21;\n    const STATE_ID_SHIFT: u64 = 64 - Transition::STATE_ID_BITS;\n    const STATE_ID_LIMIT: u64 = 1 << Transition::STATE_ID_BITS;\n    const MATCH_WINS_SHIFT: u64 = 64 - (Transition::STATE_ID_BITS + 1);\n    const INFO_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn new(match_wins: bool, sid: StateID, epsilons: Epsilons) -> Transition {}\n    fn is_dead(self) -> bool {\n        self.state_id() == DEAD\n    }\n    fn match_wins(&self) -> bool {\n        (self.0 >> Transition::MATCH_WINS_SHIFT & 1) == 1\n    }\n    fn state_id(&self) -> StateID {\n        StateID::new_unchecked((self.0 >> Transition::STATE_ID_SHIFT).as_usize())\n    }\n    fn set_state_id(&mut self, sid: StateID) {}\n    fn epsilons(&self) -> Epsilons {\n        Epsilons(self.0 & Transition::INFO_MASK)\n    }\n}\nimpl Epsilons {\n    const SLOT_MASK: u64 = 0x000003FF_FFFFFC00;\n    const SLOT_SHIFT: u64 = 10;\n    const LOOK_MASK: u64 = 0x00000000_000003FF;\n    fn empty() -> Epsilons {}\n    fn is_empty(self) -> bool {\n        self.0 == 0\n    }\n    fn slots(self) -> Slots {}\n    fn set_slots(self, slots: Slots) -> Epsilons {}\n    fn looks(self) -> LookSet {}\n    fn set_looks(self, look_set: LookSet) -> Epsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2647 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n2648     if self.is_dead() {\n2649         return write!(f, \"0\");\n2650     }\n2651     write!(f, \"{}\", self.state_id().as_usize())?;\n2652     if self.match_wins() {\n2653         write!(f, \"-MW\")?;\n2654     }\n2655     if !self.epsilons().is_empty() {\n2656         write!(f, \"-{:?}\", self.epsilons())?;\n2657     }\n2658     Ok(())\n2659 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}