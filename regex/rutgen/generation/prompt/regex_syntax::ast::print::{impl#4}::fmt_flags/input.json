{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/print.rs\n// crate name is regex_syntax\nuse core::fmt;\nuse crate::ast::{\n    self, visitor::{self, Visitor},\n    Ast,\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self);\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Debug)]\nstruct Writer<W> {\n    wtr: W,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Flags {\n    /// The span of this group of flags.\n    pub span: Span,\n    /// A sequence of flag items. Each item is either a flag or a negation\n    /// operator.\n    pub items: Vec<FlagsItem>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct FlagsItem {\n    /// The span of this item.\n    pub span: Span,\n    /// The kind of this item.\n    pub kind: FlagsItemKind,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Flag {\n    /// `i`\n    CaseInsensitive,\n    /// `m`\n    MultiLine,\n    /// `s`\n    DotMatchesNewLine,\n    /// `U`\n    SwapGreed,\n    /// `u`\n    Unicode,\n    /// `R`\n    CRLF,\n    /// `x`\n    IgnoreWhitespace,\n}\nimpl<W: fmt::Write> Writer<W> {\n    fn fmt_group_pre(&mut self, ast: &ast::Group) -> fmt::Result {}\n    fn fmt_group_post(&mut self, _ast: &ast::Group) -> fmt::Result {}\n    fn fmt_repetition(&mut self, ast: &ast::Repetition) -> fmt::Result {}\n    fn fmt_repetition_range(&mut self, ast: &ast::RepetitionRange) -> fmt::Result {}\n    fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {}\n    fn fmt_assertion(&mut self, ast: &ast::Assertion) -> fmt::Result {}\n    fn fmt_set_flags(&mut self, ast: &ast::SetFlags) -> fmt::Result {}\n    fn fmt_flags(&mut self, ast: &ast::Flags) -> fmt::Result {\n        use crate::ast::{Flag, FlagsItemKind};\n        for item in &ast.items {\n            match item.kind {\n                FlagsItemKind::Negation => self.wtr.write_str(\"-\"),\n                FlagsItemKind::Flag(ref flag) => {\n                    match *flag {\n                        Flag::CaseInsensitive => self.wtr.write_str(\"i\"),\n                        Flag::MultiLine => self.wtr.write_str(\"m\"),\n                        Flag::DotMatchesNewLine => self.wtr.write_str(\"s\"),\n                        Flag::SwapGreed => self.wtr.write_str(\"U\"),\n                        Flag::Unicode => self.wtr.write_str(\"u\"),\n                        Flag::CRLF => self.wtr.write_str(\"R\"),\n                        Flag::IgnoreWhitespace => self.wtr.write_str(\"x\"),\n                    }\n                }\n            }?;\n        }\n        Ok(())\n    }\n    fn fmt_class_bracketed_pre(&mut self, ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_bracketed_post(&mut self, _ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_set_binary_op_kind(\n        &mut self,\n        ast: &ast::ClassSetBinaryOpKind,\n    ) -> fmt::Result {}\n    fn fmt_class_perl(&mut self, ast: &ast::ClassPerl) -> fmt::Result {}\n    fn fmt_class_ascii(&mut self, ast: &ast::ClassAscii) -> fmt::Result {}\n    fn fmt_class_unicode(&mut self, ast: &ast::ClassUnicode) -> fmt::Result {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n280 fn fmt_flags(&mut self, ast: &ast::Flags) -> fmt::Result {\n281     use crate::ast::{Flag, FlagsItemKind};\n282 \n283     for item in &ast.items {\n284         match item.kind {\n285             FlagsItemKind::Negation => self.wtr.write_str(\"-\"),\n286             FlagsItemKind::Flag(ref flag) => match *flag {\n287                 Flag::CaseInsensitive => self.wtr.write_str(\"i\"),\n288                 Flag::MultiLine => self.wtr.write_str(\"m\"),\n289                 Flag::DotMatchesNewLine => self.wtr.write_str(\"s\"),\n290                 Flag::SwapGreed => self.wtr.write_str(\"U\"),\n291                 Flag::Unicode => self.wtr.write_str(\"u\"),\n292                 Flag::CRLF => self.wtr.write_str(\"R\"),\n293                 Flag::IgnoreWhitespace => self.wtr.write_str(\"x\"),\n294             },\n295         }?;\n296     }\n297     Ok(())\n298 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}