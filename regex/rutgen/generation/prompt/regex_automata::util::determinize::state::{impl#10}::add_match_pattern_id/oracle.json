{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\nstruct ReprVec<'a>(&'a mut Vec<u8>);\nstruct Repr<'a>(&'a [u8]);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl<'a> ReprVec<'a> {\n    fn set_is_match(&mut self) {\n        self.0[0] |= 1 << 0;\n    }\n    fn set_has_pattern_ids(&mut self) {\n        self.0[0] |= 1 << 1;\n    }\n    fn set_is_from_word(&mut self) {}\n    fn set_is_half_crlf(&mut self) {}\n    fn look_have(&self) -> LookSet {}\n    fn look_need(&self) -> LookSet {}\n    fn set_look_have(&mut self, mut set: impl FnMut(LookSet) -> LookSet) {}\n    fn set_look_need(&mut self, mut set: impl FnMut(LookSet) -> LookSet) {}\n    fn add_match_pattern_id(&mut self, pid: PatternID) {\n        if !self.repr().has_pattern_ids() {\n            if pid == PatternID::ZERO {\n                self.set_is_match();\n                return;\n            }\n            self.0.extend(core::iter::repeat(0).take(PatternID::SIZE));\n            self.set_has_pattern_ids();\n            if self.repr().is_match() {\n                write_u32(self.0, 0)\n            } else {\n                self.set_is_match();\n            }\n        }\n        write_u32(self.0, pid.as_u32());\n    }\n    fn close_match_pattern_ids(&mut self) {}\n    fn add_nfa_state_id(&mut self, prev: &mut StateID, sid: StateID) {}\n    fn repr(&self) -> Repr<'_> {\n        Repr(self.0.as_slice())\n    }\n}\nimpl<'a> Repr<'a> {\n    fn is_match(&self) -> bool {\n        self.0[0] & (1 << 0) > 0\n    }\n    fn has_pattern_ids(&self) -> bool {\n        self.0[0] & (1 << 1) > 0\n    }\n    fn is_from_word(&self) -> bool {}\n    fn is_half_crlf(&self) -> bool {}\n    fn look_have(&self) -> LookSet {}\n    fn look_need(&self) -> LookSet {}\n    fn match_len(&self) -> usize {}\n    fn match_pattern(&self, index: usize) -> PatternID {}\n    fn match_pattern_ids(&self) -> Option<Vec<PatternID>> {}\n    fn iter_match_pattern_ids<F: FnMut(PatternID)>(&self, mut f: F) {}\n    fn iter_nfa_state_ids<F: FnMut(StateID)>(&self, mut f: F) {}\n    fn pattern_offset_end(&self) -> usize {}\n    fn encoded_pattern_len(&self) -> usize {}\n}\nfn write_u32(dst: &mut Vec<u8>, n: u32) {\n    use crate::util::wire::NE;\n    let start = dst.len();\n    dst.extend(core::iter::repeat(0).take(mem::size_of::<u32>()));\n    NE::write_u32(n, &mut dst[start..]);\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Add a pattern ID to this state. All match states must have at least\n/// one pattern ID associated with it.\n///\n/// Callers must never add duplicative pattern IDs.\n///\n/// The order in which patterns are added must correspond to the order\n/// in which patterns are reported as matches.\n657 fn add_match_pattern_id(&mut self, pid: PatternID) {\n658     // As a (somewhat small) space saving optimization, in the case where\n659     // a matching state has exactly one pattern ID, PatternID::ZERO, we do\n660     // not write either the pattern ID or the number of patterns encoded.\n661     // Instead, all we do is set the 'is_match' bit on this state. Overall,\n662     // this saves 8 bytes per match state for the overwhelming majority of\n663     // match states.\n664     //\n665     // In order to know whether pattern IDs need to be explicitly read or\n666     // not, we use another internal-only bit, 'has_pattern_ids', to\n667     // indicate whether they have been explicitly written or not.\n668     if !self.repr().has_pattern_ids() {\n669         if pid == PatternID::ZERO {\n670             self.set_is_match();\n671             return;\n672         }\n673         // Make room for 'close_match_pattern_ids' to write the total\n674         // number of pattern IDs written.\n675         self.0.extend(core::iter::repeat(0).take(PatternID::SIZE));\n676         self.set_has_pattern_ids();\n677         // If this was already a match state, then the only way that's\n678         // possible when the state doesn't have pattern IDs is if\n679         // PatternID::ZERO was added by the caller previously. In this\n680         // case, we are now adding a non-ZERO pattern ID after it, in\n681         // which case, we want to make sure to represent ZERO explicitly\n682         // now.\n683         if self.repr().is_match() {\n684             write_u32(self.0, 0)\n685         } else {\n686             // Otherwise, just make sure the 'is_match' bit is set.\n687             self.set_is_match();\n688         }\n689     }\n690     write_u32(self.0, pid.as_u32());\n691 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}