{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) enum HirKind {\n    Empty,\n    Char(char),\n    Class(Class),\n    Look(Look),\n    Repetition(Repetition),\n    Capture(Capture),\n    Concat(Vec<Hir>),\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    pub(crate) fn parse(config: Config, pattern: &str) -> Result<Hir, Error> {}\n    pub(crate) fn kind(&self) -> &HirKind {}\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn is_match_empty(&self) -> bool {}\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {}\n    fn fail() -> Hir {}\n    fn empty() -> Hir {\n        let kind = HirKind::Empty;\n        Hir {\n            kind,\n            is_start_anchored: false,\n            is_match_empty: true,\n            static_explicit_captures_len: Some(0),\n        }\n    }\n    fn char(ch: char) -> Hir {}\n    fn class(class: Class) -> Hir {}\n    fn look(look: Look) -> Hir {}\n    fn repetition(rep: Repetition) -> Hir {}\n    fn capture(cap: Capture) -> Hir {}\n    fn concat(mut subs: Vec<Hir>) -> Hir {\n        if subs.is_empty() {\n            Hir::empty()\n        } else if subs.len() == 1 {\n            subs.pop().unwrap()\n        } else {\n            let is_start_anchored = subs[0].is_start_anchored;\n            let mut is_match_empty = true;\n            let mut static_explicit_captures_len = Some(0usize);\n            for sub in subs.iter() {\n                is_match_empty = is_match_empty && sub.is_match_empty;\n                static_explicit_captures_len = static_explicit_captures_len\n                    .and_then(|len1| { Some((len1, sub.static_explicit_captures_len?)) })\n                    .and_then(|(len1, len2)| Some(len1.saturating_add(len2)));\n            }\n            Hir {\n                kind: HirKind::Concat(subs),\n                is_start_anchored,\n                is_match_empty,\n                static_explicit_captures_len,\n            }\n        }\n    }\n    fn alternation(mut subs: Vec<Hir>) -> Hir {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n311 fn concat(mut subs: Vec<Hir>) -> Hir {\n312     if subs.is_empty() {\n313         Hir::empty()\n314     } else if subs.len() == 1 {\n315         subs.pop().unwrap()\n316     } else {\n317         let is_start_anchored = subs[0].is_start_anchored;\n318         let mut is_match_empty = true;\n319         let mut static_explicit_captures_len = Some(0usize);\n320         for sub in subs.iter() {\n321             is_match_empty = is_match_empty && sub.is_match_empty;\n322             static_explicit_captures_len = static_explicit_captures_len\n323                 .and_then(|len1| {\n324                     Some((len1, sub.static_explicit_captures_len?))\n325                 })\n326                 .and_then(|(len1, len2)| Some(len1.saturating_add(len2)));\n327         }\n328         Hir {\n329             kind: HirKind::Concat(subs),\n330             is_start_anchored,\n331             is_match_empty,\n332             static_explicit_captures_len,\n333         }\n334     }\n335 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}