{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {}\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::AlignmentMismatch {\n            alignment,\n            address,\n        })\n    }\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\npub(crate) fn check_alignment<T>(slice: &[u8]) -> Result<(), DeserializeError> {\n    let alignment = core::mem::align_of::<T>();\n    let address = slice.as_ptr().as_usize();\n    if address % alignment == 0 {\n        return Ok(());\n    }\n    Err(DeserializeError::alignment_mismatch(alignment, address))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Checks that the given slice has an alignment that matches `T`.\n///\n/// This is useful for checking that a slice has an appropriate alignment\n/// before casting it to a &[T]. Note though that alignment is not itself\n/// sufficient to perform the cast for any `T`.\n320 pub(crate) fn check_alignment<T>(\n321     slice: &[u8],\n322 ) -> Result<(), DeserializeError> {\n323     let alignment = core::mem::align_of::<T>();\n324     let address = slice.as_ptr().as_usize();\n325     if address % alignment == 0 {\n326         return Ok(());\n327     }\n328     Err(DeserializeError::alignment_mismatch(alignment, address))\n329 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}