{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ClassAsciiKind {\n    /// `[0-9A-Za-z]`\n    Alnum,\n    /// `[A-Za-z]`\n    Alpha,\n    /// `[\\x00-\\x7F]`\n    Ascii,\n    /// `[ \\t]`\n    Blank,\n    /// `[\\x00-\\x1F\\x7F]`\n    Cntrl,\n    /// `[0-9]`\n    Digit,\n    /// `[!-~]`\n    Graph,\n    /// `[a-z]`\n    Lower,\n    /// `[ -~]`\n    Print,\n    /// `[!-/:-@\\[-`{-~]`\n    Punct,\n    /// `[\\t\\n\\v\\f\\r ]`\n    Space,\n    /// `[A-Z]`\n    Upper,\n    /// `[0-9A-Za-z_]`\n    Word,\n    /// `[0-9A-Fa-f]`\n    Xdigit,\n}\nfn ascii_class(kind: &ast::ClassAsciiKind) -> impl Iterator<Item = (u8, u8)> {\n    use crate::ast::ClassAsciiKind::*;\n    let slice: &'static [(u8, u8)] = match *kind {\n        Alnum => &[(b'0', b'9'), (b'A', b'Z'), (b'a', b'z')],\n        Alpha => &[(b'A', b'Z'), (b'a', b'z')],\n        Ascii => &[(b'\\x00', b'\\x7F')],\n        Blank => &[(b'\\t', b'\\t'), (b' ', b' ')],\n        Cntrl => &[(b'\\x00', b'\\x1F'), (b'\\x7F', b'\\x7F')],\n        Digit => &[(b'0', b'9')],\n        Graph => &[(b'!', b'~')],\n        Lower => &[(b'a', b'z')],\n        Print => &[(b' ', b'~')],\n        Punct => &[(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')],\n        Space => {\n            &[\n                (b'\\t', b'\\t'),\n                (b'\\n', b'\\n'),\n                (b'\\x0B', b'\\x0B'),\n                (b'\\x0C', b'\\x0C'),\n                (b'\\r', b'\\r'),\n                (b' ', b' '),\n            ]\n        }\n        Upper => &[(b'A', b'Z')],\n        Word => &[(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')],\n        Xdigit => &[(b'0', b'9'), (b'A', b'F'), (b'a', b'f')],\n    };\n    slice.iter().copied()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1323 fn ascii_class(kind: &ast::ClassAsciiKind) -> impl Iterator<Item = (u8, u8)> {\n1324     use crate::ast::ClassAsciiKind::*;\n1325 \n1326     let slice: &'static [(u8, u8)] = match *kind {\n1327         Alnum => &[(b'0', b'9'), (b'A', b'Z'), (b'a', b'z')],\n1328         Alpha => &[(b'A', b'Z'), (b'a', b'z')],\n1329         Ascii => &[(b'\\x00', b'\\x7F')],\n1330         Blank => &[(b'\\t', b'\\t'), (b' ', b' ')],\n1331         Cntrl => &[(b'\\x00', b'\\x1F'), (b'\\x7F', b'\\x7F')],\n1332         Digit => &[(b'0', b'9')],\n1333         Graph => &[(b'!', b'~')],\n1334         Lower => &[(b'a', b'z')],\n1335         Print => &[(b' ', b'~')],\n1336         Punct => &[(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')],\n1337         Space => &[\n1338             (b'\\t', b'\\t'),\n1339             (b'\\n', b'\\n'),\n1340             (b'\\x0B', b'\\x0B'),\n1341             (b'\\x0C', b'\\x0C'),\n1342             (b'\\r', b'\\r'),\n1343             (b' ', b' '),\n1344         ],\n1345         Upper => &[(b'A', b'Z')],\n1346         Word => &[(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')],\n1347         Xdigit => &[(b'0', b'9'), (b'A', b'F'), (b'a', b'f')],\n1348     };\n1349     slice.iter().copied()\n1350 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}