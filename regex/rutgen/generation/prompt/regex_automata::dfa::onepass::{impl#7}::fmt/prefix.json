{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\npub(super) trait Remappable: core::fmt::Debug {\n    fn state_len(&self) -> usize;\n    fn stride2(&self) -> usize;\n    fn swap_states(&mut self, id1: StateID, id2: StateID);\n    fn remap(&mut self, map: impl Fn(StateID) -> StateID);\n}\n#[derive(Clone)]\npub struct DFA {\n    /// The configuration provided by the caller.\n    config: Config,\n    /// The NFA used to build this DFA.\n    ///\n    /// NOTE: We probably don't need to store the NFA here, but we use enough\n    /// bits from it that it's convenient to do so. And there really isn't much\n    /// cost to doing so either, since an NFA is reference counted internally.\n    nfa: NFA,\n    /// The transition table. Given a state ID 's' and a byte of haystack 'b',\n    /// the next state is `table[sid + classes[byte]]`.\n    ///\n    /// The stride of this table (i.e., the number of columns) is always\n    /// a power of 2, even if the alphabet length is smaller. This makes\n    /// converting between state IDs and state indices very cheap.\n    ///\n    /// Note that the stride always includes room for one extra \"transition\"\n    /// that isn't actually a transition. It is a 'PatternEpsilons' that is\n    /// used for match states only. Because of this, the maximum number of\n    /// active columns in the transition table is 257, which means the maximum\n    /// stride is 512 (the next power of 2 greater than or equal to 257).\n    table: Vec<Transition>,\n    /// The DFA state IDs of the starting states.\n    ///\n    /// `starts[0]` is always present and corresponds to the starting state\n    /// when searching for matches of any pattern in the DFA.\n    ///\n    /// `starts[i]` where i>0 corresponds to the starting state for the pattern\n    /// ID 'i-1'. These starting states are optional.\n    starts: Vec<StateID>,\n    /// Every state ID >= this value corresponds to a match state.\n    ///\n    /// This is what a search uses to detect whether a state is a match state\n    /// or not. It requires only a simple comparison instead of bit-unpacking\n    /// the PatternEpsilons from every state.\n    min_match_id: StateID,\n    /// The alphabet of this DFA, split into equivalence classes. Bytes in the\n    /// same equivalence class can never discriminate between a match and a\n    /// non-match.\n    classes: ByteClasses,\n    /// The number of elements in each state in the transition table. This may\n    /// be less than the stride, since the stride is always a power of 2 and\n    /// the alphabet length can be anything up to and including 256.\n    alphabet_len: usize,\n    /// The number of columns in the transition table, expressed as a power of\n    /// 2.\n    stride2: usize,\n    /// The offset at which the PatternEpsilons for a match state is stored in\n    /// the transition table.\n    ///\n    /// PERF: One wonders whether it would be better to put this in a separate\n    /// allocation, since only match states have a non-empty PatternEpsilons\n    /// and the number of match states tends be dwarfed by the number of\n    /// non-match states. So this would save '8*len(non_match_states)' for each\n    /// DFA. The question is whether moving this to a different allocation will\n    /// lead to a perf hit during searches. You might think dealing with match\n    /// states is rare, but some regexes spend a lot of time in match states\n    /// gobbling up input. But... match state handling is already somewhat\n    /// expensive, so maybe this wouldn't do much? Either way, it's worth\n    /// experimenting.\n    pateps_offset: usize,\n    /// The first explicit slot index. This refers to the first slot appearing\n    /// immediately after the last implicit slot. It is always 'patterns.len()\n    /// * 2'.\n    ///\n    /// We record this because we only store the explicit slots in our DFA\n    /// transition table that need to be saved. Implicit slots are handled\n    /// automatically as part of the search.\n    explicit_slot_start: usize,\n}\n#[derive(Clone, Copy)]\nstruct PatternEpsilons(u64);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\nimpl core::fmt::Debug for DFA {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        fn debug_state_transitions(\n            f: &mut core::fmt::Formatter,\n            dfa: &DFA,\n            sid: StateID,\n        ) -> core::fmt::Result {\n            for (i, (start, end, trans)) in dfa.sparse_transitions(sid).enumerate() {\n                let next = trans.state_id();\n                if i > 0 {\n                    write!(f, \", \")?;\n                }\n                if start == end {\n                    write!(f, \"{:?} => {:?}\", DebugByte(start), next.as_usize(),)?;\n                } else {\n                    write!(\n                        f, \"{:?}-{:?} => {:?}\", DebugByte(start), DebugByte(end), next\n                        .as_usize(),\n                    )?;\n                }\n                if trans.match_wins() {\n                    write!(f, \" (MW)\")?;\n                }\n                if !trans.epsilons().is_empty() {\n                    write!(f, \" ({:?})\", trans.epsilons())?;\n                }\n            }\n            Ok(())\n        }\n        writeln!(f, \"onepass::DFA(\")?;\n        for index in 0..self.state_len() {\n            let sid = StateID::must(index);\n            let pateps = self.pattern_epsilons(sid);\n            if sid == DEAD {\n                write!(f, \"D \")?;\n            } else if pateps.pattern_id().is_some() {\n                write!(f, \"* \")?;\n            } else {\n                write!(f, \"  \")?;\n            }\n            write!(f, \"{:06?}\", sid.as_usize())?;\n            if !pateps.is_empty() {\n                write!(f, \" ({:?})\", pateps)?;\n            }\n            write!(f, \": \")?;\n            debug_state_transitions(f, self, sid)?;\n            write!(f, \"\\n\")?;\n        }\n        writeln!(f, \"\")?;\n        for (i, &sid) in self.starts.iter().enumerate() {\n            if i == 0 {\n                writeln!(f, \"START(ALL): {:?}\", sid.as_usize())?;\n            } else {\n                writeln!(f, \"START(pattern: {:?}): {:?}\", i - 1, sid.as_usize(),)?;\n            }\n        }\n        writeln!(f, \"state length: {:?}\", self.state_len())?;\n        writeln!(f, \"pattern length: {:?}\", self.pattern_len())?;\n        writeln!(f, \")\")?;\n        Ok(())\n    }\n}\nimpl PatternEpsilons {\n    const PATTERN_ID_BITS: u64 = 22;\n    const PATTERN_ID_SHIFT: u64 = 64 - PatternEpsilons::PATTERN_ID_BITS;\n    const PATTERN_ID_NONE: u64 = 0x00000000_003FFFFF;\n    const PATTERN_ID_LIMIT: u64 = PatternEpsilons::PATTERN_ID_NONE;\n    const PATTERN_ID_MASK: u64 = 0xFFFFFC00_00000000;\n    const EPSILONS_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn empty() -> PatternEpsilons {}\n    fn is_empty(self) -> bool {\n        self.pattern_id().is_none() && self.epsilons().is_empty()\n    }\n    fn pattern_id(self) -> Option<PatternID> {\n        let pid = self.0 >> PatternEpsilons::PATTERN_ID_SHIFT;\n        if pid == PatternEpsilons::PATTERN_ID_LIMIT {\n            None\n        } else {\n            Some(PatternID::new_unchecked(pid.as_usize()))\n        }\n    }\n    fn pattern_id_unchecked(self) -> PatternID {}\n    fn set_pattern_id(self, pid: PatternID) -> PatternEpsilons {}\n    fn epsilons(self) -> Epsilons {}\n    fn set_epsilons(self, epsilons: Epsilons) -> PatternEpsilons {}\n}\nimpl DFA {\n    fn start(&self) -> StateID {}\n    fn start_pattern(&self, pid: PatternID) -> Result<StateID, MatchError> {}\n    fn transition(&self, sid: StateID, byte: u8) -> Transition {}\n    fn set_transition(&mut self, sid: StateID, byte: u8, to: Transition) {}\n    fn sparse_transitions(&self, sid: StateID) -> SparseTransitionIter<'_> {}\n    fn pattern_epsilons(&self, sid: StateID) -> PatternEpsilons {\n        let offset = sid.as_usize() << self.stride2();\n        PatternEpsilons(self.table[offset + self.pateps_offset].0)\n    }\n    fn set_pattern_epsilons(&mut self, sid: StateID, pateps: PatternEpsilons) {}\n    fn prev_state_id(&self, id: StateID) -> Option<StateID> {}\n    fn last_state_id(&self) -> StateID {}\n    pub(super) fn swap_states(&mut self, id1: StateID, id2: StateID) {}\n    pub(super) fn remap(&mut self, map: impl Fn(StateID) -> StateID) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2359 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n2360     fn debug_state_transitions(\n2361         f: &mut core::fmt::Formatter,\n2362         dfa: &DFA,\n2363         sid: StateID,\n2364     ) -> core::fmt::Result {\n2365         for (i, (start, end, trans)) in\n2366             dfa.sparse_transitions(sid).enumerate()\n2367         {\n2368             let next = trans.state_id();\n2369             if i > 0 {\n2370                 write!(f, \", \")?;\n2371             }\n2372             if start == end {\n2373                 write!(\n2374                     f,\n2375                     \"{:?} => {:?}\",\n2376                     DebugByte(start),\n2377                     next.as_usize(),\n2378                 )?;\n2379             } else {\n2380                 write!(\n2381                     f,\n2382                     \"{:?}-{:?} => {:?}\",\n2383                     DebugByte(start),\n2384                     DebugByte(end),\n2385                     next.as_usize(),\n2386                 )?;\n2387             }\n2388             if trans.match_wins() {\n2389                 write!(f, \" (MW)\")?;\n2390             }\n2391             if !trans.epsilons().is_empty() {\n2392                 write!(f, \" ({:?})\", trans.epsilons())?;\n2393             }\n2394         }\n2395         Ok(())\n2396     }\n2397 \n2398     writeln!(f, \"onepass::DFA(\")?;\n2399     for index in 0..self.state_len() {\n2400         let sid = StateID::must(index);\n2401         let pateps = self.pattern_epsilons(sid);\n2402         if sid == DEAD {\n2403             write!(f, \"D \")?;\n2404         } else if pateps.pattern_id().is_some() {\n2405             write!(f, \"* \")?;\n2406         } else {\n2407             write!(f, \"  \")?;\n2408         }\n2409         write!(f, \"{:06?}\", sid.as_usize())?;\n2410         if !pateps.is_empty() {\n2411             write!(f, \" ({:?})\", pateps)?;\n2412         }\n2413         write!(f, \": \")?;\n2414         debug_state_transitions(f, self, sid)?;\n2415         write!(f, \"\\n\")?;\n2416     }\n2417     writeln!(f, \"\")?;\n2418     for (i, &sid) in self.starts.iter().enumerate() {\n2419         if i == 0 {\n2420             writeln!(f, \"START(ALL): {:?}\", sid.as_usize())?;\n2421         } else {\n2422             writeln!(\n2423                 f,\n2424                 \"START(pattern: {:?}): {:?}\",\n2425                 i - 1,\n2426                 sid.as_usize(),\n2427             )?;\n2428         }\n2429     }\n2430     writeln!(f, \"state length: {:?}\", self.state_len())?;\n2431     writeln!(f, \"pattern length: {:?}\", self.pattern_len())?;\n2432     writeln!(f, \")\")?;\n2433     Ok(())\n2434 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}