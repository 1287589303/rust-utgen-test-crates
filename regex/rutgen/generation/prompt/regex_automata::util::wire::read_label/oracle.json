{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::Generic {\n            msg,\n        })\n    }\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::LabelMismatch {\n            expected,\n        })\n    }\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\npub(crate) fn read_label(\n    slice: &[u8],\n    expected_label: &'static str,\n) -> Result<usize, DeserializeError> {\n    let first_nul = slice[..cmp::min(slice.len(), 256)].iter().position(|&b| b == 0);\n    let first_nul = match first_nul {\n        Some(first_nul) => first_nul,\n        None => {\n            return Err(\n                DeserializeError::generic(\n                    \"could not find NUL terminated label \\\n                 at start of serialized object\",\n                ),\n            );\n        }\n    };\n    let len = first_nul + padding_len(first_nul);\n    if slice.len() < len {\n        return Err(\n            DeserializeError::generic(\n                \"could not find properly sized label at start of serialized object\",\n            ),\n        );\n    }\n    if expected_label.as_bytes() != &slice[..first_nul] {\n        return Err(DeserializeError::label_mismatch(expected_label));\n    }\n    Ok(len)\n}\npub(crate) fn padding_len(non_padding_len: usize) -> usize {\n    (4 - (non_padding_len & 0b11)) & 0b11\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reads a NUL terminated label starting at the beginning of the given slice.\n///\n/// If a NUL terminated label could not be found, then an error is returned.\n/// Similarly, if a label is found but doesn't match the expected label, then\n/// an error is returned.\n///\n/// Upon success, the total number of bytes read (including padding bytes) is\n/// returned.\n421 pub(crate) fn read_label(\n422     slice: &[u8],\n423     expected_label: &'static str,\n424 ) -> Result<usize, DeserializeError> {\n425     // Set an upper bound on how many bytes we scan for a NUL. Since no label\n426     // in this crate is longer than 256 bytes, if we can't find one within that\n427     // range, then we have corrupted data.\n428     let first_nul =\n429         slice[..cmp::min(slice.len(), 256)].iter().position(|&b| b == 0);\n430     let first_nul = match first_nul {\n431         Some(first_nul) => first_nul,\n432         None => {\n433             return Err(DeserializeError::generic(\n434                 \"could not find NUL terminated label \\\n435                  at start of serialized object\",\n436             ));\n437         }\n438     };\n439     let len = first_nul + padding_len(first_nul);\n440     if slice.len() < len {\n441         return Err(DeserializeError::generic(\n442             \"could not find properly sized label at start of serialized object\"\n443         ));\n444     }\n445     if expected_label.as_bytes() != &slice[..first_nul] {\n446         return Err(DeserializeError::label_mismatch(expected_label));\n447     }\n448     Ok(len)\n449 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}