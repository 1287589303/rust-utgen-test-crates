{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub struct UnicodeWordError(());\npub fn is_word_character(c: char) -> Result<bool, UnicodeWordError> {\n    #[cfg(not(feature = \"unicode-perl\"))]\n    fn imp(_: char) -> Result<bool, UnicodeWordError> {\n        Err(UnicodeWordError(()))\n    }\n    #[cfg(feature = \"unicode-perl\")]\n    fn imp(c: char) -> Result<bool, UnicodeWordError> {\n        use crate::{is_word_byte, unicode_tables::perl_word::PERL_WORD};\n        if u8::try_from(c).map_or(false, is_word_byte) {\n            return Ok(true);\n        }\n        Ok(\n            PERL_WORD\n                .binary_search_by(|&(start, end)| {\n                    use core::cmp::Ordering;\n                    if start <= c && c <= end {\n                        Ordering::Equal\n                    } else if start > c {\n                        Ordering::Greater\n                    } else {\n                        Ordering::Less\n                    }\n                })\n                .is_ok(),\n        )\n    }\n    imp(c)\n}\n#[cfg(feature = \"unicode-perl\")]\nfn imp(c: char) -> Result<bool, UnicodeWordError> {\n    use crate::{is_word_byte, unicode_tables::perl_word::PERL_WORD};\n    if u8::try_from(c).map_or(false, is_word_byte) {\n        return Ok(true);\n    }\n    Ok(\n        PERL_WORD\n            .binary_search_by(|&(start, end)| {\n                use core::cmp::Ordering;\n                if start <= c && c <= end {\n                    Ordering::Equal\n                } else if start > c {\n                    Ordering::Greater\n                } else {\n                    Ordering::Less\n                }\n            })\n            .is_ok(),\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true only if the given codepoint is in the `\\w` character class.\n///\n/// If the `unicode-perl` feature is not enabled, then this returns an error.\n463 pub fn is_word_character(c: char) -> Result<bool, UnicodeWordError> {\n464     #[cfg(not(feature = \"unicode-perl\"))]\n465     fn imp(_: char) -> Result<bool, UnicodeWordError> {\n466         Err(UnicodeWordError(()))\n467     }\n468 \n469     #[cfg(feature = \"unicode-perl\")]\n470     fn imp(c: char) -> Result<bool, UnicodeWordError> {\n471         use crate::{is_word_byte, unicode_tables::perl_word::PERL_WORD};\n472 \n473         if u8::try_from(c).map_or(false, is_word_byte) {\n474             return Ok(true);\n475         }\n476         Ok(PERL_WORD\n477             .binary_search_by(|&(start, end)| {\n478                 use core::cmp::Ordering;\n479 \n480                 if start <= c && c <= end {\n481                     Ordering::Equal\n482                 } else if start > c {\n483                     Ordering::Greater\n484                 } else {\n485                     Ordering::Less\n486                 }\n487             })\n488             .is_ok())\n489     }\n490 \n491     imp(c)\n492 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}