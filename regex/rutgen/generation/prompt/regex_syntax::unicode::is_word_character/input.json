{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub struct UnicodeWordError(());\npub fn is_word_character(c: char) -> Result<bool, UnicodeWordError> {\n    #[cfg(not(feature = \"unicode-perl\"))]\n    fn imp(_: char) -> Result<bool, UnicodeWordError> {\n        Err(UnicodeWordError(()))\n    }\n    #[cfg(feature = \"unicode-perl\")]\n    fn imp(c: char) -> Result<bool, UnicodeWordError> {\n        use crate::{is_word_byte, unicode_tables::perl_word::PERL_WORD};\n        if u8::try_from(c).map_or(false, is_word_byte) {\n            return Ok(true);\n        }\n        Ok(\n            PERL_WORD\n                .binary_search_by(|&(start, end)| {\n                    use core::cmp::Ordering;\n                    if start <= c && c <= end {\n                        Ordering::Equal\n                    } else if start > c {\n                        Ordering::Greater\n                    } else {\n                        Ordering::Less\n                    }\n                })\n                .is_ok(),\n        )\n    }\n    imp(c)\n}\n#[cfg(feature = \"unicode-perl\")]\nfn imp(c: char) -> Result<bool, UnicodeWordError> {\n    use crate::{is_word_byte, unicode_tables::perl_word::PERL_WORD};\n    if u8::try_from(c).map_or(false, is_word_byte) {\n        return Ok(true);\n    }\n    Ok(\n        PERL_WORD\n            .binary_search_by(|&(start, end)| {\n                use core::cmp::Ordering;\n                if start <= c && c <= end {\n                    Ordering::Equal\n                } else if start > c {\n                    Ordering::Greater\n                } else {\n                    Ordering::Less\n                }\n            })\n            .is_ok(),\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true only if the given codepoint is in the `\\w` character class.\n///\n/// If the `unicode-perl` feature is not enabled, then this returns an error.\n463 pub fn is_word_character(c: char) -> Result<bool, UnicodeWordError> {\n464     #[cfg(not(feature = \"unicode-perl\"))]\n465     fn imp(_: char) -> Result<bool, UnicodeWordError> {\n466         Err(UnicodeWordError(()))\n467     }\n468 \n469     #[cfg(feature = \"unicode-perl\")]\n470     fn imp(c: char) -> Result<bool, UnicodeWordError> {\n471         use crate::{is_word_byte, unicode_tables::perl_word::PERL_WORD};\n472 \n473         if u8::try_from(c).map_or(false, is_word_byte) {\n474             return Ok(true);\n475         }\n476         Ok(PERL_WORD\n477             .binary_search_by(|&(start, end)| {\n478                 use core::cmp::Ordering;\n479 \n480                 if start <= c && c <= end {\n481                     Ordering::Equal\n482                 } else if start > c {\n483                     Ordering::Greater\n484                 } else {\n485                     Ordering::Less\n486                 }\n487             })\n488             .is_ok())\n489     }\n490 \n491     imp(c)\n492 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}