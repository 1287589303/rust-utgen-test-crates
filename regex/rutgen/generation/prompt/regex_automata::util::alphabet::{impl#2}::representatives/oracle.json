{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Debug)]\npub struct ByteClassRepresentatives<'a> {\n    classes: &'a ByteClasses,\n    cur_byte: usize,\n    end_byte: Option<usize>,\n    last_class: Option<u8>,\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {}\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {}\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {\n        use core::ops::Bound;\n        let cur_byte = match range.start_bound() {\n            Bound::Included(&i) => usize::from(i),\n            Bound::Excluded(&i) => usize::from(i).checked_add(1).unwrap(),\n            Bound::Unbounded => 0,\n        };\n        let end_byte = match range.end_bound() {\n            Bound::Included(&i) => Some(usize::from(i).checked_add(1).unwrap()),\n            Bound::Excluded(&i) => Some(usize::from(i)),\n            Bound::Unbounded => None,\n        };\n        assert_ne!(cur_byte, usize::MAX, \"start range must be less than usize::MAX\",);\n        ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }\n    }\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over a sequence of representative bytes from each\n/// equivalence class within the range of bytes given.\n///\n/// When the given range is unbounded on both sides, the iterator yields\n/// exactly N items, where N is equivalent to the number of equivalence\n/// classes. Each item is an arbitrary byte drawn from each equivalence\n/// class.\n///\n/// This is useful when one is determinizing an NFA and the NFA's alphabet\n/// hasn't been converted to equivalence classes. Picking an arbitrary byte\n/// from each equivalence class then permits a full exploration of the NFA\n/// instead of using every possible byte value and thus potentially saves\n/// quite a lot of redundant work.\n///\n/// # Example\n///\n/// This shows an example of what a complete sequence of representatives\n/// might look like from a real example.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, util::alphabet::Unit};\n///\n/// let nfa = NFA::new(\"[a-z]+\")?;\n/// let classes = nfa.byte_classes();\n/// let reps: Vec<Unit> = classes.representatives(..).collect();\n/// // Note that the specific byte values yielded are not guaranteed!\n/// let expected = vec![\n///     Unit::u8(b'\\x00'),\n///     Unit::u8(b'a'),\n///     Unit::u8(b'{'),\n///     Unit::eoi(3),\n/// ];\n/// assert_eq!(expected, reps);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Note though, that you can ask for an arbitrary range of bytes, and only\n/// representatives for that range will be returned:\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, util::alphabet::Unit};\n///\n/// let nfa = NFA::new(\"[a-z]+\")?;\n/// let classes = nfa.byte_classes();\n/// let reps: Vec<Unit> = classes.representatives(b'A'..=b'z').collect();\n/// // Note that the specific byte values yielded are not guaranteed!\n/// let expected = vec![\n///     Unit::u8(b'A'),\n///     Unit::u8(b'a'),\n/// ];\n/// assert_eq!(expected, reps);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n412 pub fn representatives<R: core::ops::RangeBounds<u8>>(\n413     &self,\n414     range: R,\n415 ) -> ByteClassRepresentatives<'_> {\n416     use core::ops::Bound;\n417 \n418     let cur_byte = match range.start_bound() {\n419         Bound::Included(&i) => usize::from(i),\n420         Bound::Excluded(&i) => usize::from(i).checked_add(1).unwrap(),\n421         Bound::Unbounded => 0,\n422     };\n423     let end_byte = match range.end_bound() {\n424         Bound::Included(&i) => {\n425             Some(usize::from(i).checked_add(1).unwrap())\n426         }\n427         Bound::Excluded(&i) => Some(usize::from(i)),\n428         Bound::Unbounded => None,\n429     };\n430     assert_ne!(\n431         cur_byte,\n432         usize::MAX,\n433         \"start range must be less than usize::MAX\",\n434     );\n435     ByteClassRepresentatives {\n436         classes: self,\n437         cur_byte,\n438         end_byte,\n439         last_class: None,\n440     }\n441 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}