{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/utf8.rs\n// crate name is regex_lite\nconst ACCEPT: usize = 12;\nconst REJECT: usize = 0;\npub(crate) fn is_word_byte(b: u8) -> bool {\n    const fn mkwordset() -> [bool; 256] {\n        let mut set = [false; 256];\n        set[b'_' as usize] = true;\n        let mut byte = b'0';\n        while byte <= b'9' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'A';\n        while byte <= b'Z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'a';\n        while byte <= b'z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        set\n    }\n    const WORD: [bool; 256] = mkwordset();\n    WORD[b as usize]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given byte is considered a word character.\n/// This only applies to ASCII.\n 3 pub(crate) fn is_word_byte(b: u8) -> bool {\n 4     const fn mkwordset() -> [bool; 256] {\n 5         // FIXME: Use as_usize() once const functions in traits are stable.\n 6         let mut set = [false; 256];\n 7         set[b'_' as usize] = true;\n 8 \n 9         let mut byte = b'0';\n10         while byte <= b'9' {\n11             set[byte as usize] = true;\n12             byte += 1;\n13         }\n14         byte = b'A';\n15         while byte <= b'Z' {\n16             set[byte as usize] = true;\n17             byte += 1;\n18         }\n19         byte = b'a';\n20         while byte <= b'z' {\n21             set[byte as usize] = true;\n22             byte += 1;\n23         }\n24         set\n25     }\n26     const WORD: [bool; 256] = mkwordset();\n27     WORD[b as usize]\n28 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}