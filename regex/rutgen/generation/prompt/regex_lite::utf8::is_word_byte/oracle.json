{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/utf8.rs\n// crate name is regex_lite\nconst ACCEPT: usize = 12;\nconst REJECT: usize = 0;\npub(crate) fn is_word_byte(b: u8) -> bool {\n    const fn mkwordset() -> [bool; 256] {\n        let mut set = [false; 256];\n        set[b'_' as usize] = true;\n        let mut byte = b'0';\n        while byte <= b'9' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'A';\n        while byte <= b'Z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'a';\n        while byte <= b'z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        set\n    }\n    const WORD: [bool; 256] = mkwordset();\n    WORD[b as usize]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given byte is considered a word character.\n/// This only applies to ASCII.\n 3 pub(crate) fn is_word_byte(b: u8) -> bool {\n 4     const fn mkwordset() -> [bool; 256] {\n 5         // FIXME: Use as_usize() once const functions in traits are stable.\n 6         let mut set = [false; 256];\n 7         set[b'_' as usize] = true;\n 8 \n 9         let mut byte = b'0';\n10         while byte <= b'9' {\n11             set[byte as usize] = true;\n12             byte += 1;\n13         }\n14         byte = b'A';\n15         while byte <= b'Z' {\n16             set[byte as usize] = true;\n17             byte += 1;\n18         }\n19         byte = b'a';\n20         while byte <= b'z' {\n21             set[byte as usize] = true;\n22             byte += 1;\n23         }\n24         set\n25     }\n26     const WORD: [bool; 256] = mkwordset();\n27     WORD[b as usize]\n28 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}