{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/map.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::Transition,\n    util::{\n        int::{Usize, U64},\n        primitives::StateID,\n    },\n};\nconst PRIME: u64 = 1099511628211;\nconst INIT: u64 = 14695981039346656037;\n#[derive(Clone, Debug)]\npub struct Utf8SuffixMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8SuffixEntry>,\n}\n#[derive(Clone, Debug, Default)]\nstruct Utf8SuffixEntry {\n    /// The version of the map used to produce this entry. If this entry's\n    /// version does not match the current version of the map, then the map\n    /// should behave as if this entry does not exist.\n    version: u16,\n    /// The key, which consists of a transition in a particular state.\n    key: Utf8SuffixKey,\n    /// The identifier that the transition in the key maps to.\n    val: StateID,\n}\nimpl Utf8SuffixMap {\n    pub fn new(capacity: usize) -> Utf8SuffixMap {\n        assert!(capacity > 0);\n        Utf8SuffixMap {\n            version: 0,\n            capacity,\n            map: vec![],\n        }\n    }\n    pub fn clear(&mut self) {}\n    pub fn hash(&self, key: &Utf8SuffixKey) -> usize {}\n    pub fn get(&mut self, key: &Utf8SuffixKey, hash: usize) -> Option<StateID> {}\n    pub fn set(&mut self, key: Utf8SuffixKey, hash: usize, state_id: StateID) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new bounded map with the given capacity. The map will never\n/// grow beyond the given size.\n///\n/// Note that this does not allocate. Instead, callers must call `clear`\n/// before using this map. `clear` will allocate space if necessary.\n///\n/// This avoids the need to pay for the allocation of this map when\n/// compiling regexes that lack large Unicode character classes.\n233 pub fn new(capacity: usize) -> Utf8SuffixMap {\n234     assert!(capacity > 0);\n235     Utf8SuffixMap { version: 0, capacity, map: vec![] }\n236 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}