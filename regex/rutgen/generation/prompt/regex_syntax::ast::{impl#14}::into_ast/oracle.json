{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/mod.rs\n// crate name is regex_syntax\nuse core::cmp::Ordering;\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\npub use crate::ast::visitor::{visit, Visitor};\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Alternation {\n    /// The span of this alternation.\n    pub span: Span,\n    /// The alternate regular expressions.\n    pub asts: Vec<Ast>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Box<Span>),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(Box<SetFlags>),\n    /// A single character literal, which includes escape sequences.\n    Literal(Box<Literal>),\n    /// The \"any character\" class.\n    Dot(Box<Span>),\n    /// A single zero-width assertion.\n    Assertion(Box<Assertion>),\n    /// A single Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    ClassUnicode(Box<ClassUnicode>),\n    /// A single perl character class, e.g., `\\d` or `\\W`.\n    ClassPerl(Box<ClassPerl>),\n    /// A single bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    ClassBracketed(Box<ClassBracketed>),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Box<Repetition>),\n    /// A grouped regular expression.\n    Group(Box<Group>),\n    /// An alternation of regular expressions.\n    Alternation(Box<Alternation>),\n    /// A concatenation of regular expressions.\n    Concat(Box<Concat>),\n}\nimpl Alternation {\n    pub fn into_ast(mut self) -> Ast {\n        match self.asts.len() {\n            0 => Ast::empty(self.span),\n            1 => self.asts.pop().unwrap(),\n            _ => Ast::alternation(self),\n        }\n    }\n}\nimpl Ast {\n    pub fn empty(span: Span) -> Ast {\n        Ast::Empty(Box::new(span))\n    }\n    pub fn flags(e: SetFlags) -> Ast {}\n    pub fn literal(e: Literal) -> Ast {}\n    pub fn dot(span: Span) -> Ast {}\n    pub fn assertion(e: Assertion) -> Ast {}\n    pub fn class_unicode(e: ClassUnicode) -> Ast {}\n    pub fn class_perl(e: ClassPerl) -> Ast {}\n    pub fn class_bracketed(e: ClassBracketed) -> Ast {}\n    pub fn repetition(e: Repetition) -> Ast {}\n    pub fn group(e: Group) -> Ast {}\n    pub fn alternation(e: Alternation) -> Ast {\n        Ast::Alternation(Box::new(e))\n    }\n    pub fn concat(e: Concat) -> Ast {}\n    pub fn span(&self) -> &Span {}\n    pub fn is_empty(&self) -> bool {}\n    fn has_subexprs(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return this alternation as an AST.\n///\n/// If this alternation contains zero ASTs, then `Ast::empty` is returned.\n/// If this alternation contains exactly 1 AST, then the corresponding AST\n/// is returned. Otherwise, `Ast::alternation` is returned.\n636 pub fn into_ast(mut self) -> Ast {\n637     match self.asts.len() {\n638         0 => Ast::empty(self.span),\n639         1 => self.asts.pop().unwrap(),\n640         _ => Ast::alternation(self),\n641     }\n642 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}