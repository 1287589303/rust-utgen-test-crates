{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/mod.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\n#[cfg(feature = \"alloc\")]\nuse alloc::sync::Arc;\n#[cfg(feature = \"syntax\")]\nuse regex_syntax::hir::{literal, Hir};\nuse crate::util::search::{MatchKind, Span};\npub(crate) use crate::util::prefilter::{\n    aho_corasick::AhoCorasick, byteset::ByteSet, memchr::{Memchr, Memchr2, Memchr3},\n    memmem::Memmem, teddy::Teddy,\n};\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[cfg(feature = \"syntax\")]\npub(crate) fn suffixes<H>(kind: MatchKind, hirs: &[H]) -> literal::Seq\nwhere\n    H: core::borrow::Borrow<Hir>,\n{\n    let mut extractor = literal::Extractor::new();\n    extractor.kind(literal::ExtractKind::Suffix);\n    let mut suffixes = literal::Seq::empty();\n    for hir in hirs {\n        suffixes.union(&mut extractor.extract(hir.borrow()));\n    }\n    debug!(\n        \"suffixes (len={:?}, exact={:?}) extracted before optimization: {:?}\", suffixes\n        .len(), suffixes.is_exact(), suffixes\n    );\n    match kind {\n        MatchKind::All => {\n            suffixes.sort();\n            suffixes.dedup();\n        }\n        MatchKind::LeftmostFirst => {\n            suffixes.optimize_for_suffix_by_preference();\n        }\n    }\n    debug!(\n        \"suffixes (len={:?}, exact={:?}) extracted after optimization: {:?}\", suffixes\n        .len(), suffixes.is_exact(), suffixes\n    );\n    suffixes\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like `prefixes`, but for all suffixes of all matches for the given HIRs.\n686 pub(crate) fn suffixes<H>(kind: MatchKind, hirs: &[H]) -> literal::Seq\n687 where\n688     H: core::borrow::Borrow<Hir>,\n689 {\n690     let mut extractor = literal::Extractor::new();\n691     extractor.kind(literal::ExtractKind::Suffix);\n692 \n693     let mut suffixes = literal::Seq::empty();\n694     for hir in hirs {\n695         suffixes.union(&mut extractor.extract(hir.borrow()));\n696     }\n697     debug!(\n698         \"suffixes (len={:?}, exact={:?}) extracted before optimization: {:?}\",\n699         suffixes.len(),\n700         suffixes.is_exact(),\n701         suffixes\n702     );\n703     match kind {\n704         MatchKind::All => {\n705             suffixes.sort();\n706             suffixes.dedup();\n707         }\n708         MatchKind::LeftmostFirst => {\n709             suffixes.optimize_for_suffix_by_preference();\n710         }\n711     }\n712     debug!(\n713         \"suffixes (len={:?}, exact={:?}) extracted after optimization: {:?}\",\n714         suffixes.len(),\n715         suffixes.is_exact(),\n716         suffixes\n717     );\n718     suffixes\n719 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}