{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\nimpl<'h> Searcher<'h> {\n    pub fn new(input: Input<'h>) -> Searcher<'h> {}\n    pub fn input<'s>(&'s self) -> &'s Input<'h> {}\n    #[inline]\n    pub fn advance_half<F>(&mut self, finder: F) -> Option<HalfMatch>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {\n        match self.try_advance_half(finder) {\n            Ok(m) => m,\n            Err(err) => {\n                panic!(\n                    \"unexpected regex half find error: {}\\n\\\n                 to handle find errors, use 'try' or 'search' methods\",\n                    err,\n                )\n            }\n        }\n    }\n    #[inline]\n    pub fn advance<F>(&mut self, finder: F) -> Option<Match>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance_half<F>(\n        &mut self,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance<F>(&mut self, mut finder: F) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_half_matches_iter<F>(self, finder: F) -> TryHalfMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_matches_iter<F>(self, finder: F) -> TryMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub fn into_captures_iter<F>(\n        self,\n        caps: Captures,\n        finder: F,\n    ) -> TryCapturesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_half_match<F>(\n        &mut self,\n        _: HalfMatch,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_match<F>(\n        &mut self,\n        m: Match,\n        mut finder: F,\n    ) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the next half match for an infallible search if one exists, and\n/// advance to the next position.\n///\n/// This is like `try_advance_half`, except errors are converted into\n/// panics.\n///\n/// # Panics\n///\n/// If the given closure returns an error, then this panics. This is useful\n/// when you know your underlying regex engine has been configured to not\n/// return an error.\n///\n/// # Example\n///\n/// This example shows how to use a `Searcher` to iterate over all matches\n/// when using a DFA, which only provides \"half\" matches.\n///\n/// ```\n/// use regex_automata::{\n///     hybrid::dfa::DFA,\n///     util::iter::Searcher,\n///     HalfMatch, Input,\n/// };\n///\n/// let re = DFA::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")?;\n/// let mut cache = re.create_cache();\n///\n/// let input = Input::new(\"2010-03-14 2016-10-08 2020-10-22\");\n/// let mut it = Searcher::new(input);\n///\n/// let expected = Some(HalfMatch::must(0, 10));\n/// let got = it.advance_half(|input| re.try_search_fwd(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(HalfMatch::must(0, 21));\n/// let got = it.advance_half(|input| re.try_search_fwd(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(HalfMatch::must(0, 32));\n/// let got = it.advance_half(|input| re.try_search_fwd(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = None;\n/// let got = it.advance_half(|input| re.try_search_fwd(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// This correctly moves iteration forward even when an empty match occurs:\n///\n/// ```\n/// use regex_automata::{\n///     hybrid::dfa::DFA,\n///     util::iter::Searcher,\n///     HalfMatch, Input,\n/// };\n///\n/// let re = DFA::new(r\"a|\")?;\n/// let mut cache = re.create_cache();\n///\n/// let input = Input::new(\"abba\");\n/// let mut it = Searcher::new(input);\n///\n/// let expected = Some(HalfMatch::must(0, 1));\n/// let got = it.advance_half(|input| re.try_search_fwd(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(HalfMatch::must(0, 2));\n/// let got = it.advance_half(|input| re.try_search_fwd(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(HalfMatch::must(0, 4));\n/// let got = it.advance_half(|input| re.try_search_fwd(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = None;\n/// let got = it.advance_half(|input| re.try_search_fwd(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n261 pub fn advance_half<F>(&mut self, finder: F) -> Option<HalfMatch>\n262 where\n263     F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n264 {\n265     match self.try_advance_half(finder) {\n266         Ok(m) => m,\n267         Err(err) => panic!(\n268             \"unexpected regex half find error: {}\\n\\\n269              to handle find errors, use 'try' or 'search' methods\",\n270             err,\n271         ),\n272     }\n273 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}