{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/interval.rs\n// crate name is regex_syntax\nuse core::{char, cmp, fmt::Debug, slice};\nuse alloc::vec::Vec;\nuse crate::unicode;\npub trait Interval: Clone + Copy + Debug + Default + Eq + PartialEq + PartialOrd + Ord {\n    type Bound: Bound;\n    fn lower(&self) -> Self::Bound;\n    fn upper(&self) -> Self::Bound;\n    fn set_lower(&mut self, bound: Self::Bound);\n    fn set_upper(&mut self, bound: Self::Bound);\n    fn case_fold_simple(\n        &self,\n        intervals: &mut Vec<Self>,\n    ) -> Result<(), unicode::CaseFoldError>;\n    fn create(lower: Self::Bound, upper: Self::Bound) -> Self {\n        let mut int = Self::default();\n        if lower <= upper {\n            int.set_lower(lower);\n            int.set_upper(upper);\n        } else {\n            int.set_lower(upper);\n            int.set_upper(lower);\n        }\n        int\n    }\n    fn union(&self, other: &Self) -> Option<Self> {\n        if !self.is_contiguous(other) {\n            return None;\n        }\n        let lower = cmp::min(self.lower(), other.lower());\n        let upper = cmp::max(self.upper(), other.upper());\n        Some(Self::create(lower, upper))\n    }\n    fn intersect(&self, other: &Self) -> Option<Self> {\n        let lower = cmp::max(self.lower(), other.lower());\n        let upper = cmp::min(self.upper(), other.upper());\n        if lower <= upper { Some(Self::create(lower, upper)) } else { None }\n    }\n    fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {\n        if self.is_subset(other) {\n            return (None, None);\n        }\n        if self.is_intersection_empty(other) {\n            return (Some(self.clone()), None);\n        }\n        let add_lower = other.lower() > self.lower();\n        let add_upper = other.upper() < self.upper();\n        assert!(add_lower || add_upper);\n        let mut ret = (None, None);\n        if add_lower {\n            let upper = other.lower().decrement();\n            ret.0 = Some(Self::create(self.lower(), upper));\n        }\n        if add_upper {\n            let lower = other.upper().increment();\n            let range = Self::create(lower, self.upper());\n            if ret.0.is_none() {\n                ret.0 = Some(range);\n            } else {\n                ret.1 = Some(range);\n            }\n        }\n        ret\n    }\n    fn is_contiguous(&self, other: &Self) -> bool;\n    fn is_intersection_empty(&self, other: &Self) -> bool;\n    fn is_subset(&self, other: &Self) -> bool;\n}\n#[derive(Clone, Debug)]\npub struct IntervalSet<I> {\n    /// A sorted set of non-overlapping ranges.\n    ranges: Vec<I>,\n    /// While not required at all for correctness, we keep track of whether an\n    /// interval set has been case folded or not. This helps us avoid doing\n    /// redundant work if, for example, a set has already been cased folded.\n    /// And note that whether a set is folded or not is preserved through\n    /// all of the pairwise set operations. That is, if both interval sets\n    /// have been case folded, then any of difference, union, intersection or\n    /// symmetric difference all produce a case folded set.\n    ///\n    /// Note that when this is true, it *must* be the case that the set is case\n    /// folded. But when it's false, the set *may* be case folded. In other\n    /// words, we only set this to true when we know it to be case, but we're\n    /// okay with it being false if it would otherwise be costly to determine\n    /// whether it should be true. This means code cannot assume that a false\n    /// value necessarily indicates that the set is not case folded.\n    ///\n    /// Bottom line: this is a performance optimization.\n    folded: bool,\n}\nimpl<I: Interval> IntervalSet<I> {\n    pub fn new<T: IntoIterator<Item = I>>(intervals: T) -> IntervalSet<I> {}\n    pub fn push(&mut self, interval: I) {}\n    pub fn iter(&self) -> IntervalSetIter<'_, I> {}\n    pub fn intervals(&self) -> &[I] {}\n    pub fn case_fold_simple(&mut self) -> Result<(), unicode::CaseFoldError> {}\n    pub fn union(&mut self, other: &IntervalSet<I>) {\n        if other.ranges.is_empty() || self.ranges == other.ranges {\n            return;\n        }\n        self.ranges.extend(&other.ranges);\n        self.canonicalize();\n        self.folded = self.folded && other.folded;\n    }\n    pub fn intersect(&mut self, other: &IntervalSet<I>) {\n        if self.ranges.is_empty() {\n            return;\n        }\n        if other.ranges.is_empty() {\n            self.ranges.clear();\n            self.folded = true;\n            return;\n        }\n        let drain_end = self.ranges.len();\n        let mut ita = 0..drain_end;\n        let mut itb = 0..other.ranges.len();\n        let mut a = ita.next().unwrap();\n        let mut b = itb.next().unwrap();\n        loop {\n            if let Some(ab) = self.ranges[a].intersect(&other.ranges[b]) {\n                self.ranges.push(ab);\n            }\n            let (it, aorb) = if self.ranges[a].upper() < other.ranges[b].upper() {\n                (&mut ita, &mut a)\n            } else {\n                (&mut itb, &mut b)\n            };\n            match it.next() {\n                Some(v) => *aorb = v,\n                None => break,\n            }\n        }\n        self.ranges.drain(..drain_end);\n        self.folded = self.folded && other.folded;\n    }\n    pub fn difference(&mut self, other: &IntervalSet<I>) {\n        if self.ranges.is_empty() || other.ranges.is_empty() {\n            return;\n        }\n        let drain_end = self.ranges.len();\n        let (mut a, mut b) = (0, 0);\n        'LOOP: while a < drain_end && b < other.ranges.len() {\n            if other.ranges[b].upper() < self.ranges[a].lower() {\n                b += 1;\n                continue;\n            }\n            if self.ranges[a].upper() < other.ranges[b].lower() {\n                let range = self.ranges[a];\n                self.ranges.push(range);\n                a += 1;\n                continue;\n            }\n            assert!(! self.ranges[a].is_intersection_empty(& other.ranges[b]));\n            let mut range = self.ranges[a];\n            while b < other.ranges.len()\n                && !range.is_intersection_empty(&other.ranges[b])\n            {\n                let old_range = range;\n                range = match range.difference(&other.ranges[b]) {\n                    (None, None) => {\n                        a += 1;\n                        continue 'LOOP;\n                    }\n                    (Some(range1), None) | (None, Some(range1)) => range1,\n                    (Some(range1), Some(range2)) => {\n                        self.ranges.push(range1);\n                        range2\n                    }\n                };\n                if other.ranges[b].upper() > old_range.upper() {\n                    break;\n                }\n                b += 1;\n            }\n            self.ranges.push(range);\n            a += 1;\n        }\n        while a < drain_end {\n            let range = self.ranges[a];\n            self.ranges.push(range);\n            a += 1;\n        }\n        self.ranges.drain(..drain_end);\n        self.folded = self.folded && other.folded;\n    }\n    pub fn symmetric_difference(&mut self, other: &IntervalSet<I>) {\n        let mut intersection = self.clone();\n        intersection.intersect(other);\n        self.union(other);\n        self.difference(&intersection);\n    }\n    pub fn negate(&mut self) {}\n    fn canonicalize(&mut self) {}\n    fn is_canonical(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compute the symmetric difference of the two sets, in place.\n///\n/// This computes the symmetric difference of two interval sets. This\n/// removes all elements in this set that are also in the given set,\n/// but also adds all elements from the given set that aren't in this\n/// set. That is, the set will contain all elements in either set,\n/// but will not contain any elements that are in both sets.\n284 pub fn symmetric_difference(&mut self, other: &IntervalSet<I>) {\n285     // TODO(burntsushi): Fix this so that it amortizes allocation.\n286     let mut intersection = self.clone();\n287     intersection.intersect(other);\n288     self.union(other);\n289     self.difference(&intersection);\n290 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}