{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\n#[derive(Clone, Debug)]\npub struct UnicodeWordBoundaryError(());\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(super) fn fwd(\n    _bytes: &[u8],\n    _at: usize,\n) -> Result<bool, super::UnicodeWordBoundaryError> {\n    Err(super::UnicodeWordBoundaryError::new())\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1582 pub(super) fn fwd(\n1583     haystack: &[u8],\n1584     at: usize,\n1585 ) -> Result<bool, super::UnicodeWordBoundaryError> {\n1586     Ok(match utf8::decode(&haystack[at..]) {\n1587         None | Some(Err(_)) => false,\n1588         Some(Ok(ch)) => try_is_word_character(ch).expect(\n1589             \"since unicode-word-boundary, syntax and unicode-perl \\\n1590              are all enabled, it is expected that \\\n1591              try_is_word_character succeeds\",\n1592         ),\n1593     })\n1594 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}