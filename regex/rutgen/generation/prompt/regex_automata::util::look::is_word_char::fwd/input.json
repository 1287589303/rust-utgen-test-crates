{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\n#[derive(Clone, Debug)]\npub struct UnicodeWordBoundaryError(());\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(super) fn fwd(\n    _bytes: &[u8],\n    _at: usize,\n) -> Result<bool, super::UnicodeWordBoundaryError> {\n    Err(super::UnicodeWordBoundaryError::new())\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1582 pub(super) fn fwd(\n1583     haystack: &[u8],\n1584     at: usize,\n1585 ) -> Result<bool, super::UnicodeWordBoundaryError> {\n1586     Ok(match utf8::decode(&haystack[at..]) {\n1587         None | Some(Err(_)) => false,\n1588         Some(Ok(ch)) => try_is_word_character(ch).expect(\n1589             \"since unicode-word-boundary, syntax and unicode-perl \\\n1590              are all enabled, it is expected that \\\n1591              try_is_word_character succeeds\",\n1592         ),\n1593     })\n1594 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}