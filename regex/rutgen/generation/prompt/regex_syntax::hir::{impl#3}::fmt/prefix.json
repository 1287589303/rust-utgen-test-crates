{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ErrorKind {\n    /// This error occurs when a Unicode feature is used when Unicode\n    /// support is disabled. For example `(?-u:\\pL)` would trigger this error.\n    UnicodeNotAllowed,\n    /// This error occurs when translating a pattern that could match a byte\n    /// sequence that isn't UTF-8 and `utf8` was enabled.\n    InvalidUtf8,\n    /// This error occurs when one uses a non-ASCII byte for a line terminator,\n    /// but where Unicode mode is enabled and UTF-8 mode is disabled.\n    InvalidLineTerminator,\n    /// This occurs when an unrecognized Unicode property name could not\n    /// be found.\n    UnicodePropertyNotFound,\n    /// This occurs when an unrecognized Unicode property value could not\n    /// be found.\n    UnicodePropertyValueNotFound,\n    /// This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or\n    /// `\\d`) could not be found. This can occur when the `unicode-perl`\n    /// crate feature is not enabled.\n    UnicodePerlClassNotFound,\n    /// This occurs when the Unicode simple case mapping tables are not\n    /// available, and the regular expression required Unicode aware case\n    /// insensitivity.\n    UnicodeCaseUnavailable,\n}\nimpl core::fmt::Display for ErrorKind {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        use self::ErrorKind::*;\n        let msg = match *self {\n            UnicodeNotAllowed => \"Unicode not allowed here\",\n            InvalidUtf8 => \"pattern can match invalid UTF-8\",\n            InvalidLineTerminator => \"invalid line terminator, must be ASCII\",\n            UnicodePropertyNotFound => \"Unicode property not found\",\n            UnicodePropertyValueNotFound => \"Unicode property value not found\",\n            UnicodePerlClassNotFound => {\n                \"Unicode-aware Perl class not found \\\n                 (make sure the unicode-perl feature is enabled)\"\n            }\n            UnicodeCaseUnavailable => {\n                \"Unicode-aware case insensitivity matching is not available \\\n                 (make sure the unicode-case feature is enabled)\"\n            }\n        };\n        f.write_str(msg)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n120 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n121     use self::ErrorKind::*;\n122 \n123     let msg = match *self {\n124         UnicodeNotAllowed => \"Unicode not allowed here\",\n125         InvalidUtf8 => \"pattern can match invalid UTF-8\",\n126         InvalidLineTerminator => \"invalid line terminator, must be ASCII\",\n127         UnicodePropertyNotFound => \"Unicode property not found\",\n128         UnicodePropertyValueNotFound => \"Unicode property value not found\",\n129         UnicodePerlClassNotFound => {\n130             \"Unicode-aware Perl class not found \\\n131              (make sure the unicode-perl feature is enabled)\"\n132         }\n133         UnicodeCaseUnavailable => {\n134             \"Unicode-aware case insensitivity matching is not available \\\n135              (make sure the unicode-case feature is enabled)\"\n136         }\n137     };\n138     f.write_str(msg)\n139 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}