{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ErrorKind {\n    /// This error occurs when a Unicode feature is used when Unicode\n    /// support is disabled. For example `(?-u:\\pL)` would trigger this error.\n    UnicodeNotAllowed,\n    /// This error occurs when translating a pattern that could match a byte\n    /// sequence that isn't UTF-8 and `utf8` was enabled.\n    InvalidUtf8,\n    /// This error occurs when one uses a non-ASCII byte for a line terminator,\n    /// but where Unicode mode is enabled and UTF-8 mode is disabled.\n    InvalidLineTerminator,\n    /// This occurs when an unrecognized Unicode property name could not\n    /// be found.\n    UnicodePropertyNotFound,\n    /// This occurs when an unrecognized Unicode property value could not\n    /// be found.\n    UnicodePropertyValueNotFound,\n    /// This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or\n    /// `\\d`) could not be found. This can occur when the `unicode-perl`\n    /// crate feature is not enabled.\n    UnicodePerlClassNotFound,\n    /// This occurs when the Unicode simple case mapping tables are not\n    /// available, and the regular expression required Unicode aware case\n    /// insensitivity.\n    UnicodeCaseUnavailable,\n}\nimpl core::fmt::Display for ErrorKind {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        use self::ErrorKind::*;\n        let msg = match *self {\n            UnicodeNotAllowed => \"Unicode not allowed here\",\n            InvalidUtf8 => \"pattern can match invalid UTF-8\",\n            InvalidLineTerminator => \"invalid line terminator, must be ASCII\",\n            UnicodePropertyNotFound => \"Unicode property not found\",\n            UnicodePropertyValueNotFound => \"Unicode property value not found\",\n            UnicodePerlClassNotFound => {\n                \"Unicode-aware Perl class not found \\\n                 (make sure the unicode-perl feature is enabled)\"\n            }\n            UnicodeCaseUnavailable => {\n                \"Unicode-aware case insensitivity matching is not available \\\n                 (make sure the unicode-case feature is enabled)\"\n            }\n        };\n        f.write_str(msg)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n120 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n121     use self::ErrorKind::*;\n122 \n123     let msg = match *self {\n124         UnicodeNotAllowed => \"Unicode not allowed here\",\n125         InvalidUtf8 => \"pattern can match invalid UTF-8\",\n126         InvalidLineTerminator => \"invalid line terminator, must be ASCII\",\n127         UnicodePropertyNotFound => \"Unicode property not found\",\n128         UnicodePropertyValueNotFound => \"Unicode property value not found\",\n129         UnicodePerlClassNotFound => {\n130             \"Unicode-aware Perl class not found \\\n131              (make sure the unicode-perl feature is enabled)\"\n132         }\n133         UnicodeCaseUnavailable => {\n134             \"Unicode-aware case insensitivity matching is not available \\\n135              (make sure the unicode-case feature is enabled)\"\n136         }\n137     };\n138     f.write_str(msg)\n139 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}