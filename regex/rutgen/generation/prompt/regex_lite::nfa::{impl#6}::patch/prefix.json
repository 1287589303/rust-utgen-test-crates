{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/nfa.rs\n// crate name is regex_lite\npub(crate) type StateID = u32;\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, u32>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, u32>;\nuse core::{cell::RefCell, mem::size_of};\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::{\n    error::Error, hir::{self, Hir, HirKind},\n    int::U32,\n};\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n}\n#[derive(Debug)]\nstruct Compiler {\n    config: Config,\n    nfa: RefCell<NFA>,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\n#[derive(Clone)]\npub(crate) struct NFA {\n    /// The pattern string this NFA was generated from.\n    ///\n    /// We put it here for lack of a better place to put it. ¯\\_(ツ)_/¯\n    pattern: String,\n    /// The states that make up this NFA.\n    states: Vec<State>,\n    /// The ID of the start state.\n    start: StateID,\n    /// Whether this NFA can only match at the beginning of a haystack.\n    is_start_anchored: bool,\n    /// Whether this NFA can match the empty string.\n    is_match_empty: bool,\n    /// If every match has the same number of matching capture groups, then\n    /// this corresponds to the number of groups.\n    static_explicit_captures_len: Option<usize>,\n    /// A map from capture group name to its corresponding index.\n    cap_name_to_index: CaptureNameMap,\n    /// A map from capture group index to the corresponding name, if one\n    /// exists.\n    cap_index_to_name: Vec<Option<Arc<str>>>,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\n#[derive(Clone, Eq, PartialEq)]\npub(crate) enum State {\n    Char { target: StateID, ch: char },\n    Ranges { target: StateID, ranges: Vec<(char, char)> },\n    Splits { targets: Vec<StateID>, reverse: bool },\n    Goto { target: StateID, look: Option<hir::Look> },\n    Capture { target: StateID, slot: u32 },\n    Fail,\n    Match,\n}\nimpl Compiler {\n    fn new(config: Config, pattern: String) -> Compiler {}\n    fn compile(self, hir: &Hir) -> Result<NFA, Error> {}\n    fn c(&self, hir: &Hir) -> Result<ThompsonRef, Error> {}\n    fn c_fail(&self) -> Result<ThompsonRef, Error> {}\n    fn c_empty(&self) -> Result<ThompsonRef, Error> {}\n    fn c_char(&self, ch: char) -> Result<ThompsonRef, Error> {}\n    fn c_class(&self, class: &hir::Class) -> Result<ThompsonRef, Error> {}\n    fn c_look(&self, look: &hir::Look) -> Result<ThompsonRef, Error> {}\n    fn c_repetition(&self, rep: &hir::Repetition) -> Result<ThompsonRef, Error> {}\n    fn c_bounded(\n        &self,\n        hir: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> Result<ThompsonRef, Error> {}\n    fn c_at_least(&self, hir: &Hir, greedy: bool, n: u32) -> Result<ThompsonRef, Error> {}\n    fn c_zero_or_one(&self, hir: &Hir, greedy: bool) -> Result<ThompsonRef, Error> {}\n    fn c_exactly(&self, hir: &Hir, n: u32) -> Result<ThompsonRef, Error> {}\n    fn c_capture(\n        &self,\n        index: u32,\n        name: Option<&str>,\n        hir: &Hir,\n    ) -> Result<ThompsonRef, Error> {}\n    fn c_concat<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn c_alternation<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn add_empty(&self) -> Result<StateID, Error> {}\n    fn add(&self, state: State) -> Result<StateID, Error> {}\n    fn patch(&self, from: StateID, to: StateID) -> Result<(), Error> {\n        let mut new_memory_extra = self.nfa.borrow().memory_extra;\n        match self.nfa.borrow_mut().states[from.as_usize()] {\n            State::Char { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Ranges { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Splits { ref mut targets, .. } => {\n                targets.push(to);\n                new_memory_extra += size_of::<StateID>();\n            }\n            State::Goto { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Capture { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Fail | State::Match => {}\n        }\n        if new_memory_extra != self.nfa.borrow().memory_extra {\n            self.nfa.borrow_mut().memory_extra = new_memory_extra;\n            self.check_size_limit()?;\n        }\n        Ok(())\n    }\n    fn check_size_limit(&self) -> Result<(), Error> {\n        if let Some(limit) = self.config.size_limit {\n            if self.nfa.borrow().memory_usage() > limit {\n                return Err(Error::new(\"compiled regex exceeded size limit\"));\n            }\n        }\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Add a transition from one state to another.\n///\n/// This routine is called \"patch\" since it is very common to add the\n/// states you want, typically with \"dummy\" state ID transitions, and then\n/// \"patch\" in the real state IDs later. This is because you don't always\n/// know all of the necessary state IDs to add because they might not\n/// exist yet.\n///\n/// # Errors\n///\n/// This may error if patching leads to an increase in heap usage beyond\n/// the configured size limit. Heap usage only grows when patching adds a\n/// new transition (as in the case of a \"splits\" state).\n665 fn patch(&self, from: StateID, to: StateID) -> Result<(), Error> {\n666     let mut new_memory_extra = self.nfa.borrow().memory_extra;\n667     match self.nfa.borrow_mut().states[from.as_usize()] {\n668         State::Char { ref mut target, .. } => {\n669             *target = to;\n670         }\n671         State::Ranges { ref mut target, .. } => {\n672             *target = to;\n673         }\n674         State::Splits { ref mut targets, .. } => {\n675             targets.push(to);\n676             new_memory_extra += size_of::<StateID>();\n677         }\n678         State::Goto { ref mut target, .. } => {\n679             *target = to;\n680         }\n681         State::Capture { ref mut target, .. } => {\n682             *target = to;\n683         }\n684         State::Fail | State::Match => {}\n685     }\n686     if new_memory_extra != self.nfa.borrow().memory_extra {\n687         self.nfa.borrow_mut().memory_extra = new_memory_extra;\n688         self.check_size_limit()?;\n689     }\n690     Ok(())\n691 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}