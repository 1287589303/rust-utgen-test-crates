{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Debug)]\npub struct Extractor {\n    kind: ExtractKind,\n    limit_class: usize,\n    limit_repeat: usize,\n    limit_literal_len: usize,\n    limit_total: usize,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum ExtractKind {\n    /// Extracts only prefix literals from a regex.\n    Prefix,\n    /// Extracts only suffix literals from a regex.\n    ///\n    /// Note that the sequence returned by suffix literals currently may\n    /// not correctly represent leftmost-first or \"preference\" order match\n    /// semantics.\n    Suffix,\n}\nimpl Extractor {\n    pub fn new() -> Extractor {}\n    pub fn extract(&self, hir: &Hir) -> Seq {}\n    pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {\n        self.kind = kind;\n        self\n    }\n    pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_repeat(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_literal_len(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_total(&mut self, limit: usize) -> &mut Extractor {}\n    fn extract_concat<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_alternation<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_repetition(&self, rep: &hir::Repetition) -> Seq {}\n    fn extract_class_unicode(&self, cls: &hir::ClassUnicode) -> Seq {}\n    fn extract_class_bytes(&self, cls: &hir::ClassBytes) -> Seq {}\n    fn class_over_limit_unicode(&self, cls: &hir::ClassUnicode) -> bool {}\n    fn class_over_limit_bytes(&self, cls: &hir::ClassBytes) -> bool {}\n    fn cross(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn enforce_literal_len(&self, seq: &mut Seq) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the kind of literal sequence to extract from an [`Hir`] expression.\n///\n/// The default is to extract prefixes, but suffixes can be selected\n/// instead. The contract for prefixes is that every match of the\n/// corresponding `Hir` must start with one of the literals in the sequence\n/// returned. Moreover, the _order_ of the sequence returned corresponds to\n/// the preference order.\n///\n/// Suffixes satisfy a similar contract in that every match of the\n/// corresponding `Hir` must end with one of the literals in the sequence\n/// returned. However, there is no guarantee that the literals are in\n/// preference order.\n///\n/// Remember that a sequence can be infinite. For example, unless the\n/// limits are configured to be impractically large, attempting to extract\n/// prefixes (or suffixes) for the pattern `[A-Z]` will return an infinite\n/// sequence. Generally speaking, if the sequence returned is infinite,\n/// then it is presumed to be unwise to do prefix (or suffix) optimizations\n/// for the pattern.\n220 pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {\n221     self.kind = kind;\n222     self\n223 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}