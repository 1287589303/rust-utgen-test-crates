{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Debug)]\npub struct Extractor {\n    kind: ExtractKind,\n    limit_class: usize,\n    limit_repeat: usize,\n    limit_literal_len: usize,\n    limit_total: usize,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum ExtractKind {\n    /// Extracts only prefix literals from a regex.\n    Prefix,\n    /// Extracts only suffix literals from a regex.\n    ///\n    /// Note that the sequence returned by suffix literals currently may\n    /// not correctly represent leftmost-first or \"preference\" order match\n    /// semantics.\n    Suffix,\n}\nimpl Extractor {\n    pub fn new() -> Extractor {}\n    pub fn extract(&self, hir: &Hir) -> Seq {}\n    pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {\n        self.kind = kind;\n        self\n    }\n    pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_repeat(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_literal_len(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_total(&mut self, limit: usize) -> &mut Extractor {}\n    fn extract_concat<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_alternation<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_repetition(&self, rep: &hir::Repetition) -> Seq {}\n    fn extract_class_unicode(&self, cls: &hir::ClassUnicode) -> Seq {}\n    fn extract_class_bytes(&self, cls: &hir::ClassBytes) -> Seq {}\n    fn class_over_limit_unicode(&self, cls: &hir::ClassUnicode) -> bool {}\n    fn class_over_limit_bytes(&self, cls: &hir::ClassBytes) -> bool {}\n    fn cross(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn enforce_literal_len(&self, seq: &mut Seq) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the kind of literal sequence to extract from an [`Hir`] expression.\n///\n/// The default is to extract prefixes, but suffixes can be selected\n/// instead. The contract for prefixes is that every match of the\n/// corresponding `Hir` must start with one of the literals in the sequence\n/// returned. Moreover, the _order_ of the sequence returned corresponds to\n/// the preference order.\n///\n/// Suffixes satisfy a similar contract in that every match of the\n/// corresponding `Hir` must end with one of the literals in the sequence\n/// returned. However, there is no guarantee that the literals are in\n/// preference order.\n///\n/// Remember that a sequence can be infinite. For example, unless the\n/// limits are configured to be impractically large, attempting to extract\n/// prefixes (or suffixes) for the pattern `[A-Z]` will return an infinite\n/// sequence. Generally speaking, if the sequence returned is infinite,\n/// then it is presumed to be unwise to do prefix (or suffix) optimizations\n/// for the pattern.\n220 pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {\n221     self.kind = kind;\n222     self\n223 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}