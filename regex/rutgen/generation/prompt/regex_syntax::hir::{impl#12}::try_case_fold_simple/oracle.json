{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Clone, Debug)]\npub struct IntervalSet<I> {\n    /// A sorted set of non-overlapping ranges.\n    ranges: Vec<I>,\n    /// While not required at all for correctness, we keep track of whether an\n    /// interval set has been case folded or not. This helps us avoid doing\n    /// redundant work if, for example, a set has already been cased folded.\n    /// And note that whether a set is folded or not is preserved through\n    /// all of the pairwise set operations. That is, if both interval sets\n    /// have been case folded, then any of difference, union, intersection or\n    /// symmetric difference all produce a case folded set.\n    ///\n    /// Note that when this is true, it *must* be the case that the set is case\n    /// folded. But when it's false, the set *may* be case folded. In other\n    /// words, we only set this to true when we know it to be case, but we're\n    /// okay with it being false if it would otherwise be costly to determine\n    /// whether it should be true. This means code cannot assume that a false\n    /// value necessarily indicates that the set is not case folded.\n    ///\n    /// Bottom line: this is a performance optimization.\n    folded: bool,\n}\n#[derive(Debug)]\npub struct CaseFoldError(());\n#[derive(Clone, Copy, Default, Eq, PartialEq, PartialOrd, Ord)]\npub struct ClassUnicodeRange {\n    start: char,\n    end: char,\n}\nimpl ClassUnicode {\n    pub fn new<I>(ranges: I) -> ClassUnicode\n    where\n        I: IntoIterator<Item = ClassUnicodeRange>,\n    {}\n    pub fn empty() -> ClassUnicode {}\n    pub fn push(&mut self, range: ClassUnicodeRange) {}\n    pub fn iter(&self) -> ClassUnicodeIter<'_> {}\n    pub fn ranges(&self) -> &[ClassUnicodeRange] {}\n    pub fn case_fold_simple(&mut self) {}\n    pub fn try_case_fold_simple(&mut self) -> core::result::Result<(), CaseFoldError> {\n        self.set.case_fold_simple()\n    }\n    pub fn negate(&mut self) {}\n    pub fn union(&mut self, other: &ClassUnicode) {}\n    pub fn intersect(&mut self, other: &ClassUnicode) {}\n    pub fn difference(&mut self, other: &ClassUnicode) {}\n    pub fn symmetric_difference(&mut self, other: &ClassUnicode) {}\n    pub fn is_ascii(&self) -> bool {}\n    pub fn minimum_len(&self) -> Option<usize> {}\n    pub fn maximum_len(&self) -> Option<usize> {}\n    pub fn literal(&self) -> Option<Vec<u8>> {}\n    pub fn to_byte_class(&self) -> Option<ClassBytes> {}\n}\nimpl<I: Interval> IntervalSet<I> {\n    pub fn new<T: IntoIterator<Item = I>>(intervals: T) -> IntervalSet<I> {}\n    pub fn push(&mut self, interval: I) {}\n    pub fn iter(&self) -> IntervalSetIter<'_, I> {}\n    pub fn intervals(&self) -> &[I] {}\n    pub fn case_fold_simple(&mut self) -> Result<(), unicode::CaseFoldError> {\n        if self.folded {\n            return Ok(());\n        }\n        let len = self.ranges.len();\n        for i in 0..len {\n            let range = self.ranges[i];\n            if let Err(err) = range.case_fold_simple(&mut self.ranges) {\n                self.canonicalize();\n                return Err(err);\n            }\n        }\n        self.canonicalize();\n        self.folded = true;\n        Ok(())\n    }\n    pub fn union(&mut self, other: &IntervalSet<I>) {}\n    pub fn intersect(&mut self, other: &IntervalSet<I>) {}\n    pub fn difference(&mut self, other: &IntervalSet<I>) {}\n    pub fn symmetric_difference(&mut self, other: &IntervalSet<I>) {}\n    pub fn negate(&mut self) {}\n    fn canonicalize(&mut self) {}\n    fn is_canonical(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Expand this character class such that it contains all case folded\n/// characters, according to Unicode's \"simple\" mapping. For example, if\n/// this class consists of the range `a-z`, then applying case folding will\n/// result in the class containing both the ranges `a-z` and `A-Z`.\n///\n/// # Error\n///\n/// This routine returns an error when the case mapping data necessary\n/// for this routine to complete is unavailable. This occurs when the\n/// `unicode-case` feature is not enabled.\n1122 pub fn try_case_fold_simple(\n1123     &mut self,\n1124 ) -> core::result::Result<(), CaseFoldError> {\n1125     self.set.case_fold_simple()\n1126 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}