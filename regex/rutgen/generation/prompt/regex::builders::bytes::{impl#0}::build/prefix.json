{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{\n    bytes::{Regex, RegexSet},\n    error::Error,\n};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[non_exhaustive]\n#[derive(Clone, PartialEq)]\npub enum Error {\n    /// A syntax error.\n    Syntax(String),\n    /// The compiled program exceeded the set size\n    /// limit. The argument is the size limit imposed by\n    /// [`RegexBuilder::size_limit`](crate::RegexBuilder::size_limit). Even\n    /// when not configured explicitly, it defaults to a reasonable limit.\n    ///\n    /// If you're getting this error, it occurred because your regex has been\n    /// compiled to an intermediate state that is too big. It is important to\n    /// note that exceeding this limit does _not_ mean the regex is too big to\n    /// _work_, but rather, the regex is big enough that it may wind up being\n    /// surprisingly slow when used in a search. In other words, this error is\n    /// meant to be a practical heuristic for avoiding a performance footgun,\n    /// and especially so for the case where the regex pattern is coming from\n    /// an untrusted source.\n    ///\n    /// There are generally two ways to move forward if you hit this error.\n    /// The first is to find some way to use a smaller regex. The second is to\n    /// increase the size limit via `RegexBuilder::size_limit`. However, if\n    /// your regex pattern is not from a trusted source, then neither of these\n    /// approaches may be appropriate. Instead, you'll have to determine just\n    /// how big of a regex you want to allow.\n    CompiledTooBig(usize),\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {\n        self.builder.build_one_bytes()\n    }\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {\n        assert_eq!(1, self.pats.len());\n        let metac = self\n            .metac\n            .clone()\n            .match_kind(MatchKind::LeftmostFirst)\n            .utf8_empty(false);\n        let syntaxc = self.syntaxc.clone().utf8(false);\n        let pattern = Arc::from(self.pats[0].as_str());\n        meta::Builder::new()\n            .configure(metac)\n            .syntax(syntaxc)\n            .build(&pattern)\n            .map(|meta| crate::bytes::Regex {\n                meta,\n                pattern,\n            })\n            .map_err(Error::from_meta_build_error)\n    }\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compiles the pattern given to `RegexBuilder::new` with the\n/// configuration set on this builder.\n///\n/// If the pattern isn't a valid regex or if a configured size limit\n/// was exceeded, then an error is returned.\n1392 pub fn build(&self) -> Result<Regex, Error> {\n1393     self.builder.build_one_bytes()\n1394 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}