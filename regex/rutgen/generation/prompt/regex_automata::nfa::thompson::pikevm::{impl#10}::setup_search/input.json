{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/pikevm.rs\n// crate name is regex_automata\n#[cfg(feature = \"internal-instrument-pikevm\")]\nuse core::cell::RefCell;\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug)]\nstruct SlotTable {\n    /// The actual table of offsets.\n    table: Vec<Option<NonMaxUsize>>,\n    /// The number of slots per state, i.e., the table's stride or the length\n    /// of each row.\n    slots_per_state: usize,\n    /// The number of slots in the caller-provided 'Captures' value for the\n    /// current search. Setting this to 'slots_per_state' is always correct,\n    /// but may be wasteful.\n    slots_for_captures: usize,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\nimpl SlotTable {\n    fn new() -> SlotTable {}\n    fn reset(&mut self, re: &PikeVM) {}\n    fn memory_usage(&self) -> usize {}\n    fn setup_search(&mut self, captures_slot_len: usize) {\n        self.slots_for_captures = captures_slot_len;\n    }\n    fn for_state(&mut self, sid: StateID) -> &mut [Option<NonMaxUsize>] {}\n    fn all_absent(&mut self) -> &mut [Option<NonMaxUsize>] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Perform any per-search setup for this slot table.\n///\n/// In particular, this sets the length of the number of slots used in the\n/// 'Captures' given by the caller (if any at all). This number may be\n/// smaller than the total number of slots available, e.g., when the caller\n/// is only interested in tracking the overall match and not the spans of\n/// every matching capturing group. Only tracking the overall match can\n/// save a substantial amount of time copying capturing spans during a\n/// search.\n2138 fn setup_search(&mut self, captures_slot_len: usize) {\n2139     self.slots_for_captures = captures_slot_len;\n2140 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}