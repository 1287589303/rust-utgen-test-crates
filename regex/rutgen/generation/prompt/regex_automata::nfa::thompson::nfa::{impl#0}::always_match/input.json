{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/nfa.rs\n// crate name is regex_automata\nuse core::{fmt, mem};\nuse alloc::{boxed::Box, format, string::String, sync::Arc, vec, vec::Vec};\n#[cfg(feature = \"syntax\")]\nuse crate::nfa::thompson::{\n    compiler::{Compiler, Config},\n    error::BuildError,\n};\nuse crate::{\n    nfa::thompson::builder::Builder,\n    util::{\n        alphabet::{self, ByteClassSet, ByteClasses},\n        captures::{GroupInfo, GroupInfoError},\n        look::{Look, LookMatcher, LookSet},\n        primitives::{IteratorIndexExt, PatternID, PatternIDIter, SmallIndex, StateID},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug, Default)]\npub struct Builder {\n    /// The ID of the pattern that we're currently building.\n    ///\n    /// Callers are required to set (and unset) this by calling\n    /// {start,finish}_pattern. Otherwise, most methods will panic.\n    pattern_id: Option<PatternID>,\n    /// A sequence of intermediate NFA states. Once a state is added to this\n    /// sequence, it is assigned a state ID equivalent to its index. Once a\n    /// state is added, it is still expected to be mutated, e.g., to set its\n    /// transition to a state that didn't exist at the time it was added.\n    states: Vec<State>,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// A map from pattern ID to capture group index to name. (If no name\n    /// exists, then a None entry is present. Thus, all capturing groups are\n    /// present in this mapping.)\n    ///\n    /// The outer vec is indexed by pattern ID, while the inner vec is indexed\n    /// by capture index offset for the corresponding pattern.\n    ///\n    /// The first capture group for each pattern is always unnamed and is thus\n    /// always None.\n    captures: Vec<Vec<Option<Arc<str>>>>,\n    /// The combined memory used by each of the 'State's in 'states'. This\n    /// only includes heap usage by each state, and not the size of the state\n    /// itself. In other words, this tracks heap memory used that isn't\n    /// captured via `size_of::<State>() * states.len()`.\n    memory_states: usize,\n    /// Whether this NFA only matches UTF-8 and whether regex engines using\n    /// this NFA for searching should report empty matches that split a\n    /// codepoint.\n    utf8: bool,\n    /// Whether this NFA should be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to use for look-around assertions.\n    look_matcher: LookMatcher,\n    /// A size limit to respect when building an NFA. If the total heap memory\n    /// of the intermediate NFA states exceeds (or would exceed) this amount,\n    /// then an error is returned.\n    size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Default)]\npub(super) struct Inner {\n    /// The state sequence. This sequence is guaranteed to be indexable by all\n    /// starting state IDs, and it is also guaranteed to contain at most one\n    /// `Match` state for each pattern compiled into this NFA. (A pattern may\n    /// not have a corresponding `Match` state if a `Match` state is impossible\n    /// to reach.)\n    states: Vec<State>,\n    /// The anchored starting state of this NFA.\n    start_anchored: StateID,\n    /// The unanchored starting state of this NFA.\n    start_unanchored: StateID,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// Info about the capturing groups in this NFA. This is responsible for\n    /// mapping groups to slots, mapping groups to names and names to groups.\n    group_info: GroupInfo,\n    /// A representation of equivalence classes over the transitions in this\n    /// NFA. Two bytes in the same equivalence class must not discriminate\n    /// between a match or a non-match. This map can be used to shrink the\n    /// total size of a DFA's transition table with a small match-time cost.\n    ///\n    /// Note that the NFA's transitions are *not* defined in terms of these\n    /// equivalence classes. The NFA's transitions are defined on the original\n    /// byte values. For the most part, this is because they wouldn't really\n    /// help the NFA much since the NFA already uses a sparse representation\n    /// to represent transitions. Byte classes are most effective in a dense\n    /// representation.\n    byte_class_set: ByteClassSet,\n    /// This is generated from `byte_class_set`, and essentially represents the\n    /// same thing but supports different access patterns. Namely, this permits\n    /// looking up the equivalence class of a byte very cheaply.\n    ///\n    /// Ideally we would just store this, but because of annoying code\n    /// structure reasons, we keep both this and `byte_class_set` around for\n    /// now. I think I would prefer that `byte_class_set` were computed in the\n    /// `Builder`, but right now, we compute it as states are added to the\n    /// `NFA`.\n    byte_classes: ByteClasses,\n    /// Whether this NFA has a `Capture` state anywhere.\n    has_capture: bool,\n    /// When the empty string is in the language matched by this NFA.\n    has_empty: bool,\n    /// Whether UTF-8 mode is enabled for this NFA. Briefly, this means that\n    /// all non-empty matches produced by this NFA correspond to spans of valid\n    /// UTF-8, and any empty matches produced by this NFA that split a UTF-8\n    /// encoded codepoint should be filtered out by the corresponding regex\n    /// engine.\n    utf8: bool,\n    /// Whether this NFA is meant to be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to be used for look-around assertions.\n    look_matcher: LookMatcher,\n    /// The union of all look-around assertions that occur anywhere within\n    /// this NFA. If this set is empty, then it means there are precisely zero\n    /// conditional epsilon transitions in the NFA.\n    look_set_any: LookSet,\n    /// The union of all look-around assertions that occur as a zero-length\n    /// prefix for any of the patterns in this NFA.\n    look_set_prefix_any: LookSet,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl NFA {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<NFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<NFA, BuildError> {}\n    pub fn always_match() -> NFA {\n        let mut builder = Builder::new();\n        let pid = builder.start_pattern().unwrap();\n        assert_eq!(pid.as_usize(), 0);\n        let start_id = builder.add_capture_start(StateID::ZERO, 0, None).unwrap();\n        let end_id = builder.add_capture_end(StateID::ZERO, 0).unwrap();\n        let match_id = builder.add_match().unwrap();\n        builder.patch(start_id, end_id).unwrap();\n        builder.patch(end_id, match_id).unwrap();\n        let pid = builder.finish_pattern(start_id).unwrap();\n        assert_eq!(pid.as_usize(), 0);\n        builder.build(start_id, start_id).unwrap()\n    }\n    pub fn never_match() -> NFA {}\n    #[cfg(feature = \"syntax\")]\n    pub fn config() -> Config {}\n    #[cfg(feature = \"syntax\")]\n    pub fn compiler() -> Compiler {}\n    pub fn patterns(&self) -> PatternIter<'_> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn start_anchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_unanchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_pattern(&self, pid: PatternID) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn byte_class_set(&self) -> &ByteClassSet {}\n    #[inline]\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    #[inline]\n    pub fn state(&self, id: StateID) -> &State {}\n    #[inline]\n    pub fn states(&self) -> &[State] {}\n    #[inline]\n    pub fn group_info(&self) -> &GroupInfo {}\n    #[inline]\n    pub fn has_capture(&self) -> bool {}\n    #[inline]\n    pub fn has_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {}\n    #[inline]\n    pub fn is_reverse(&self) -> bool {}\n    #[inline]\n    pub fn is_always_start_anchored(&self) -> bool {}\n    #[inline]\n    pub fn look_matcher(&self) -> &LookMatcher {}\n    #[inline]\n    pub fn look_set_any(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl Builder {\n    pub fn new() -> Builder {\n        Builder::default()\n    }\n    pub fn clear(&mut self) {}\n    pub fn build(\n        &self,\n        start_anchored: StateID,\n        start_unanchored: StateID,\n    ) -> Result<NFA, BuildError> {\n        assert!(self.pattern_id.is_none(), \"must call 'finish_pattern' first\");\n        debug!(\n            \"intermediate NFA compilation via builder is complete, \\\n             intermediate NFA size: {} states, {} bytes on heap\",\n            self.states.len(), self.memory_usage(),\n        );\n        let mut nfa = nfa::Inner::default();\n        nfa.set_utf8(self.utf8);\n        nfa.set_reverse(self.reverse);\n        nfa.set_look_matcher(self.look_matcher.clone());\n        let mut empties = vec![];\n        let mut remap = vec![];\n        remap.resize(self.states.len(), StateID::ZERO);\n        nfa.set_starts(start_anchored, start_unanchored, &self.start_pattern);\n        nfa.set_captures(&self.captures).map_err(BuildError::captures)?;\n        for (sid, state) in self.states.iter().with_state_ids() {\n            match *state {\n                State::Empty { next } => {\n                    empties.push((sid, next));\n                }\n                State::ByteRange { trans } => {\n                    remap[sid] = nfa.add(nfa::State::ByteRange { trans });\n                }\n                State::Sparse { ref transitions } => {\n                    remap[sid] = match transitions.len() {\n                        0 => nfa.add(nfa::State::Fail),\n                        1 => {\n                            nfa.add(nfa::State::ByteRange {\n                                trans: transitions[0],\n                            })\n                        }\n                        _ => {\n                            let transitions = transitions.to_vec().into_boxed_slice();\n                            let sparse = SparseTransitions { transitions };\n                            nfa.add(nfa::State::Sparse(sparse))\n                        }\n                    };\n                }\n                State::Look { look, next } => {\n                    remap[sid] = nfa.add(nfa::State::Look { look, next });\n                }\n                State::CaptureStart { pattern_id, group_index, next } => {\n                    let slot = nfa\n                        .group_info()\n                        .slot(pattern_id, group_index.as_usize())\n                        .expect(\"invalid capture index\");\n                    let slot = SmallIndex::new(slot).expect(\"a small enough slot\");\n                    remap[sid] = nfa\n                        .add(nfa::State::Capture {\n                            next,\n                            pattern_id,\n                            group_index,\n                            slot,\n                        });\n                }\n                State::CaptureEnd { pattern_id, group_index, next } => {\n                    let slot = nfa\n                        .group_info()\n                        .slot(pattern_id, group_index.as_usize())\n                        .expect(\"invalid capture index\")\n                        .checked_add(1)\n                        .unwrap();\n                    let slot = SmallIndex::new(slot).expect(\"a small enough slot\");\n                    remap[sid] = nfa\n                        .add(nfa::State::Capture {\n                            next,\n                            pattern_id,\n                            group_index,\n                            slot,\n                        });\n                }\n                State::Union { ref alternates } => {\n                    if alternates.is_empty() {\n                        remap[sid] = nfa.add(nfa::State::Fail);\n                    } else if alternates.len() == 1 {\n                        empties.push((sid, alternates[0]));\n                        remap[sid] = alternates[0];\n                    } else if alternates.len() == 2 {\n                        remap[sid] = nfa\n                            .add(nfa::State::BinaryUnion {\n                                alt1: alternates[0],\n                                alt2: alternates[1],\n                            });\n                    } else {\n                        let alternates = alternates.to_vec().into_boxed_slice();\n                        remap[sid] = nfa.add(nfa::State::Union { alternates });\n                    }\n                }\n                State::UnionReverse { ref alternates } => {\n                    if alternates.is_empty() {\n                        remap[sid] = nfa.add(nfa::State::Fail);\n                    } else if alternates.len() == 1 {\n                        empties.push((sid, alternates[0]));\n                        remap[sid] = alternates[0];\n                    } else if alternates.len() == 2 {\n                        remap[sid] = nfa\n                            .add(nfa::State::BinaryUnion {\n                                alt1: alternates[1],\n                                alt2: alternates[0],\n                            });\n                    } else {\n                        let mut alternates = alternates.to_vec().into_boxed_slice();\n                        alternates.reverse();\n                        remap[sid] = nfa.add(nfa::State::Union { alternates });\n                    }\n                }\n                State::Fail => {\n                    remap[sid] = nfa.add(nfa::State::Fail);\n                }\n                State::Match { pattern_id } => {\n                    remap[sid] = nfa.add(nfa::State::Match { pattern_id });\n                }\n            }\n        }\n        let mut remapped = vec![false; self.states.len()];\n        for &(empty_id, empty_next) in empties.iter() {\n            if remapped[empty_id] {\n                continue;\n            }\n            let mut new_next = empty_next;\n            while let Some(next) = self.states[new_next].goto() {\n                new_next = next;\n            }\n            remap[empty_id] = remap[new_next];\n            remapped[empty_id] = true;\n            let mut next2 = empty_next;\n            while let Some(next) = self.states[next2].goto() {\n                remap[next2] = remap[new_next];\n                remapped[next2] = true;\n                next2 = next;\n            }\n        }\n        nfa.remap(&remap);\n        let final_nfa = nfa.into_nfa();\n        debug!(\n            \"NFA compilation via builder complete, \\\n             final NFA size: {} states, {} bytes on heap, \\\n             has empty? {:?}, utf8? {:?}\",\n            final_nfa.states().len(), final_nfa.memory_usage(), final_nfa.has_empty(),\n            final_nfa.is_utf8(),\n        );\n        Ok(final_nfa)\n    }\n    pub fn start_pattern(&mut self) -> Result<PatternID, BuildError> {\n        assert!(self.pattern_id.is_none(), \"must call 'finish_pattern' first\");\n        let proposed = self.start_pattern.len();\n        let pid = PatternID::new(proposed)\n            .map_err(|_| BuildError::too_many_patterns(proposed))?;\n        self.pattern_id = Some(pid);\n        self.start_pattern.push(StateID::ZERO);\n        Ok(pid)\n    }\n    pub fn finish_pattern(\n        &mut self,\n        start_id: StateID,\n    ) -> Result<PatternID, BuildError> {\n        let pid = self.current_pattern_id();\n        self.start_pattern[pid] = start_id;\n        self.pattern_id = None;\n        Ok(pid)\n    }\n    pub fn current_pattern_id(&self) -> PatternID {}\n    pub fn pattern_len(&self) -> usize {}\n    pub fn add_empty(&mut self) -> Result<StateID, BuildError> {}\n    pub fn add_union(\n        &mut self,\n        alternates: Vec<StateID>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_union_reverse(\n        &mut self,\n        alternates: Vec<StateID>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_range(&mut self, trans: Transition) -> Result<StateID, BuildError> {}\n    pub fn add_sparse(\n        &mut self,\n        transitions: Vec<Transition>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_look(\n        &mut self,\n        next: StateID,\n        look: Look,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_capture_start(\n        &mut self,\n        next: StateID,\n        group_index: u32,\n        name: Option<Arc<str>>,\n    ) -> Result<StateID, BuildError> {\n        let pid = self.current_pattern_id();\n        let group_index = match SmallIndex::try_from(group_index) {\n            Err(_) => return Err(BuildError::invalid_capture_index(group_index)),\n            Ok(group_index) => group_index,\n        };\n        if pid.as_usize() >= self.captures.len() {\n            for _ in 0..=(pid.as_usize() - self.captures.len()) {\n                self.captures.push(vec![]);\n            }\n        }\n        if group_index.as_usize() >= self.captures[pid].len() {\n            for _ in 0..(group_index.as_usize() - self.captures[pid].len()) {\n                self.captures[pid].push(None);\n            }\n            self.captures[pid].push(name);\n        }\n        self.add(State::CaptureStart {\n            pattern_id: pid,\n            group_index,\n            next,\n        })\n    }\n    pub fn add_capture_end(\n        &mut self,\n        next: StateID,\n        group_index: u32,\n    ) -> Result<StateID, BuildError> {\n        let pid = self.current_pattern_id();\n        let group_index = match SmallIndex::try_from(group_index) {\n            Err(_) => return Err(BuildError::invalid_capture_index(group_index)),\n            Ok(group_index) => group_index,\n        };\n        self.add(State::CaptureEnd {\n            pattern_id: pid,\n            group_index,\n            next,\n        })\n    }\n    pub fn add_fail(&mut self) -> Result<StateID, BuildError> {}\n    pub fn add_match(&mut self) -> Result<StateID, BuildError> {\n        let pattern_id = self.current_pattern_id();\n        let sid = self.add(State::Match { pattern_id })?;\n        Ok(sid)\n    }\n    fn add(&mut self, state: State) -> Result<StateID, BuildError> {}\n    pub fn patch(&mut self, from: StateID, to: StateID) -> Result<(), BuildError> {\n        let old_memory_states = self.memory_states;\n        match self.states[from] {\n            State::Empty { ref mut next } => {\n                *next = to;\n            }\n            State::ByteRange { ref mut trans } => {\n                trans.next = to;\n            }\n            State::Sparse { .. } => panic!(\"cannot patch from a sparse NFA state\"),\n            State::Look { ref mut next, .. } => {\n                *next = to;\n            }\n            State::Union { ref mut alternates } => {\n                alternates.push(to);\n                self.memory_states += mem::size_of::<StateID>();\n            }\n            State::UnionReverse { ref mut alternates } => {\n                alternates.push(to);\n                self.memory_states += mem::size_of::<StateID>();\n            }\n            State::CaptureStart { ref mut next, .. } => {\n                *next = to;\n            }\n            State::CaptureEnd { ref mut next, .. } => {\n                *next = to;\n            }\n            State::Fail => {}\n            State::Match { .. } => {}\n        }\n        if old_memory_states != self.memory_states {\n            self.check_size_limit()?;\n        }\n        Ok(())\n    }\n    pub fn set_utf8(&mut self, yes: bool) {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn set_reverse(&mut self, yes: bool) {}\n    pub fn get_reverse(&self) -> bool {}\n    pub fn set_look_matcher(&mut self, m: LookMatcher) {}\n    pub fn get_look_matcher(&self) -> &LookMatcher {}\n    pub fn set_size_limit(&mut self, limit: Option<usize>) -> Result<(), BuildError> {}\n    pub fn get_size_limit(&self) -> Option<usize> {}\n    pub fn memory_usage(&self) -> usize {}\n    fn check_size_limit(&self) -> Result<(), BuildError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an NFA with a single regex pattern that always matches at every\n/// position.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{NFA, pikevm::PikeVM}, Match};\n///\n/// let re = PikeVM::new_from_nfa(NFA::always_match())?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// let expected = Some(Match::must(0, 0..0));\n/// re.captures(&mut cache, b\"\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n/// re.captures(&mut cache, b\"foo\", &mut caps);\n/// assert_eq!(expected, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n274 pub fn always_match() -> NFA {\n275     // We could use NFA::new(\"\") here and we'd get the same semantics, but\n276     // hand-assembling the NFA (as below) does the same thing with a fewer\n277     // number of states. It also avoids needing the 'syntax' feature\n278     // enabled.\n279     //\n280     // Technically all we need is the \"match\" state, but we add the\n281     // \"capture\" states so that the PikeVM can use this NFA.\n282     //\n283     // The unwraps below are OK because we add so few states that they will\n284     // never exhaust any default limits in any environment.\n285     let mut builder = Builder::new();\n286     let pid = builder.start_pattern().unwrap();\n287     assert_eq!(pid.as_usize(), 0);\n288     let start_id =\n289         builder.add_capture_start(StateID::ZERO, 0, None).unwrap();\n290     let end_id = builder.add_capture_end(StateID::ZERO, 0).unwrap();\n291     let match_id = builder.add_match().unwrap();\n292     builder.patch(start_id, end_id).unwrap();\n293     builder.patch(end_id, match_id).unwrap();\n294     let pid = builder.finish_pattern(start_id).unwrap();\n295     assert_eq!(pid.as_usize(), 0);\n296     builder.build(start_id, start_id).unwrap()\n297 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}