{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\npub(crate) trait U64 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn low_u32(self) -> u32;\n    fn high_u32(self) -> u32;\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl Transition {\n    const STATE_ID_BITS: u64 = 21;\n    const STATE_ID_SHIFT: u64 = 64 - Transition::STATE_ID_BITS;\n    const STATE_ID_LIMIT: u64 = 1 << Transition::STATE_ID_BITS;\n    const MATCH_WINS_SHIFT: u64 = 64 - (Transition::STATE_ID_BITS + 1);\n    const INFO_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn new(match_wins: bool, sid: StateID, epsilons: Epsilons) -> Transition {}\n    fn is_dead(self) -> bool {}\n    fn match_wins(&self) -> bool {}\n    fn state_id(&self) -> StateID {\n        StateID::new_unchecked((self.0 >> Transition::STATE_ID_SHIFT).as_usize())\n    }\n    fn set_state_id(&mut self, sid: StateID) {}\n    fn epsilons(&self) -> Epsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the \"next\" state ID that this transition points to.\n2625 fn state_id(&self) -> StateID {\n2626     // OK because a Transition has a valid StateID in its upper bits by\n2627     // construction. The cast to usize is also correct, even on 16-bit\n2628     // targets because, again, we know the upper bits is a valid StateID,\n2629     // which can never overflow usize on any supported target.\n2630     StateID::new_unchecked(\n2631         (self.0 >> Transition::STATE_ID_SHIFT).as_usize(),\n2632     )\n2633 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}