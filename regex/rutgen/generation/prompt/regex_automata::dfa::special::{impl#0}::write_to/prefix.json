{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/special.rs\n// crate name is regex_automata\nuse crate::{\n    dfa::DEAD,\n    util::{primitives::StateID, wire::{self, DeserializeError, Endian, SerializeError}},\n};\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Special {\n    /// The identifier of the last special state in a DFA. A state is special\n    /// if and only if its identifier is less than or equal to `max`.\n    pub(crate) max: StateID,\n    /// The identifier of the quit state in a DFA. (There is no analogous field\n    /// for the dead state since the dead state's ID is always zero, regardless\n    /// of state ID size.)\n    pub(crate) quit_id: StateID,\n    /// The identifier of the first match state.\n    pub(crate) min_match: StateID,\n    /// The identifier of the last match state.\n    pub(crate) max_match: StateID,\n    /// The identifier of the first accelerated state.\n    pub(crate) min_accel: StateID,\n    /// The identifier of the last accelerated state.\n    pub(crate) max_accel: StateID,\n    /// The identifier of the first start state.\n    pub(crate) min_start: StateID,\n    /// The identifier of the last start state.\n    pub(crate) max_start: StateID,\n}\n#[derive(Debug)]\npub struct SerializeError {\n    /// The name of the thing that a buffer is too small for.\n    ///\n    /// Currently, the only kind of serialization error is one that is\n    /// committed by a caller: providing a destination buffer that is too\n    /// small to fit the serialized object. This makes sense conceptually,\n    /// since every valid inhabitant of a type should be serializable.\n    ///\n    /// This is somewhat exposed in the public API of this crate. For example,\n    /// the `to_bytes_{big,little}_endian` APIs return a `Vec<u8>` and are\n    /// guaranteed to never panic or error. This is only possible because the\n    /// implementation guarantees that it will allocate a `Vec<u8>` that is\n    /// big enough.\n    ///\n    /// In summary, if a new serialization error kind needs to be added, then\n    /// it will need careful consideration.\n    what: &'static str,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl Special {\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn new() -> Special {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn remap(&self, map: impl Fn(StateID) -> StateID) -> Special {}\n    pub(crate) fn from_bytes(\n        mut slice: &[u8],\n    ) -> Result<(Special, usize), DeserializeError> {}\n    pub(crate) fn validate(&self) -> Result<(), DeserializeError> {}\n    pub(crate) fn validate_state_len(\n        &self,\n        len: usize,\n        stride2: usize,\n    ) -> Result<(), DeserializeError> {}\n    pub(crate) fn write_to<E: Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {\n        use crate::util::wire::write_state_id as write;\n        if dst.len() < self.write_to_len() {\n            return Err(SerializeError::buffer_too_small(\"special state ids\"));\n        }\n        let mut nwrite = 0;\n        nwrite += write::<E>(self.max, &mut dst[nwrite..]);\n        nwrite += write::<E>(self.quit_id, &mut dst[nwrite..]);\n        nwrite += write::<E>(self.min_match, &mut dst[nwrite..]);\n        nwrite += write::<E>(self.max_match, &mut dst[nwrite..]);\n        nwrite += write::<E>(self.min_accel, &mut dst[nwrite..]);\n        nwrite += write::<E>(self.max_accel, &mut dst[nwrite..]);\n        nwrite += write::<E>(self.min_start, &mut dst[nwrite..]);\n        nwrite += write::<E>(self.max_start, &mut dst[nwrite..]);\n        assert_eq!(\n            self.write_to_len(), nwrite, \"expected to write certain number of bytes\",\n        );\n        assert_eq!(\n            nwrite % 8, 0, \"expected to write multiple of 8 bytes for special states\",\n        );\n        Ok(nwrite)\n    }\n    pub(crate) fn write_to_len(&self) -> usize {\n        8 * StateID::SIZE\n    }\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn set_max(&mut self) {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn set_no_special_start_states(&mut self) {}\n    #[inline]\n    pub(crate) fn is_special_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_dead_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_quit_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_match_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_accel_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_start_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn match_len(&self, stride: usize) -> usize {}\n    #[inline]\n    pub(crate) fn matches(&self) -> bool {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn accel_len(&self, stride: usize) -> usize {}\n    #[inline]\n    pub(crate) fn accels(&self) -> bool {}\n    #[inline]\n    pub(crate) fn starts(&self) -> bool {}\n}\nimpl SerializeError {\n    pub(crate) fn buffer_too_small(what: &'static str) -> SerializeError {\n        SerializeError { what }\n    }\n}\npub(crate) fn write_state_id<E: Endian>(sid: StateID, dst: &mut [u8]) -> usize {\n    E::write_u32(sid.as_u32(), dst);\n    StateID::SIZE\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Write the IDs and ranges for special states to the given byte buffer.\n/// The buffer given must have enough room to store all data, otherwise\n/// this will return an error. The number of bytes written is returned\n/// on success. The number of bytes written is guaranteed to be a multiple\n/// of 8.\n353 pub(crate) fn write_to<E: Endian>(\n354     &self,\n355     dst: &mut [u8],\n356 ) -> Result<usize, SerializeError> {\n357     use crate::util::wire::write_state_id as write;\n358 \n359     if dst.len() < self.write_to_len() {\n360         return Err(SerializeError::buffer_too_small(\"special state ids\"));\n361     }\n362 \n363     let mut nwrite = 0;\n364     nwrite += write::<E>(self.max, &mut dst[nwrite..]);\n365     nwrite += write::<E>(self.quit_id, &mut dst[nwrite..]);\n366     nwrite += write::<E>(self.min_match, &mut dst[nwrite..]);\n367     nwrite += write::<E>(self.max_match, &mut dst[nwrite..]);\n368     nwrite += write::<E>(self.min_accel, &mut dst[nwrite..]);\n369     nwrite += write::<E>(self.max_accel, &mut dst[nwrite..]);\n370     nwrite += write::<E>(self.min_start, &mut dst[nwrite..]);\n371     nwrite += write::<E>(self.max_start, &mut dst[nwrite..]);\n372 \n373     assert_eq!(\n374         self.write_to_len(),\n375         nwrite,\n376         \"expected to write certain number of bytes\",\n377     );\n378     assert_eq!(\n379         nwrite % 8,\n380         0,\n381         \"expected to write multiple of 8 bytes for special states\",\n382     );\n383     Ok(nwrite)\n384 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}