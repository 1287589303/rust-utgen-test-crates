{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\n#[derive(Debug)]\npub struct SplitN<'r, 'h> {\n    splits: Split<'r, 'h>,\n    limit: usize,\n}\n#[derive(Debug)]\npub struct Split<'r, 'h> {\n    haystack: &'h str,\n    finder: Matches<'r, 'h>,\n    last: usize,\n}\nimpl<'r, 'h> Iterator for SplitN<'r, 'h> {\n    type Item = &'h str;\n    #[inline]\n    fn next(&mut self) -> Option<&'h str> {\n        if self.limit == 0 {\n            return None;\n        }\n        self.limit -= 1;\n        if self.limit > 0 {\n            return self.splits.next();\n        }\n        let len = self.splits.haystack.len();\n        if self.splits.last > len {\n            None\n        } else {\n            Some(&self.splits.haystack[self.splits.last..len])\n        }\n    }\n    #[inline]\n    fn size_hint(&self) -> (usize, Option<usize>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2305 fn next(&mut self) -> Option<&'h str> {\n2306     if self.limit == 0 {\n2307         return None;\n2308     }\n2309 \n2310     self.limit -= 1;\n2311     if self.limit > 0 {\n2312         return self.splits.next();\n2313     }\n2314 \n2315     let len = self.splits.haystack.len();\n2316     if self.splits.last > len {\n2317         // We've already returned all substrings.\n2318         None\n2319     } else {\n2320         // self.n == 0, so future calls will return None immediately\n2321         Some(&self.splits.haystack[self.splits.last..len])\n2322     }\n2323 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}