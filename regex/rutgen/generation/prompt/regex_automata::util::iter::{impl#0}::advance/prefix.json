{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\nimpl<'h> Searcher<'h> {\n    pub fn new(input: Input<'h>) -> Searcher<'h> {}\n    pub fn input<'s>(&'s self) -> &'s Input<'h> {}\n    #[inline]\n    pub fn advance_half<F>(&mut self, finder: F) -> Option<HalfMatch>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn advance<F>(&mut self, finder: F) -> Option<Match>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {\n        match self.try_advance(finder) {\n            Ok(m) => m,\n            Err(err) => {\n                panic!(\n                    \"unexpected regex find error: {}\\n\\\n                 to handle find errors, use 'try' or 'search' methods\",\n                    err,\n                )\n            }\n        }\n    }\n    #[inline]\n    pub fn try_advance_half<F>(\n        &mut self,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance<F>(&mut self, mut finder: F) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_half_matches_iter<F>(self, finder: F) -> TryHalfMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_matches_iter<F>(self, finder: F) -> TryMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub fn into_captures_iter<F>(\n        self,\n        caps: Captures,\n        finder: F,\n    ) -> TryCapturesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_half_match<F>(\n        &mut self,\n        _: HalfMatch,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_match<F>(\n        &mut self,\n        m: Match,\n        mut finder: F,\n    ) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the next match for an infallible search if one exists, and\n/// advance to the next position.\n///\n/// The search is advanced even in the presence of empty matches by\n/// forbidding empty matches from overlapping with any other match.\n///\n/// This is like `try_advance`, except errors are converted into panics.\n///\n/// # Panics\n///\n/// If the given closure returns an error, then this panics. This is useful\n/// when you know your underlying regex engine has been configured to not\n/// return an error.\n///\n/// # Example\n///\n/// This example shows how to use a `Searcher` to iterate over all matches\n/// when using a regex based on lazy DFAs:\n///\n/// ```\n/// use regex_automata::{\n///     hybrid::regex::Regex,\n///     util::iter::Searcher,\n///     Match, Input,\n/// };\n///\n/// let re = Regex::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")?;\n/// let mut cache = re.create_cache();\n///\n/// let input = Input::new(\"2010-03-14 2016-10-08 2020-10-22\");\n/// let mut it = Searcher::new(input);\n///\n/// let expected = Some(Match::must(0, 0..10));\n/// let got = it.advance(|input| re.try_search(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(Match::must(0, 11..21));\n/// let got = it.advance(|input| re.try_search(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(Match::must(0, 22..32));\n/// let got = it.advance(|input| re.try_search(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// let expected = None;\n/// let got = it.advance(|input| re.try_search(&mut cache, input));\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// This example shows the same as above, but with the PikeVM. This example\n/// is useful because it shows how to use this API even when the regex\n/// engine doesn't directly return a `Match`.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::iter::Searcher,\n///     Match, Input,\n/// };\n///\n/// let re = PikeVM::new(r\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// let input = Input::new(\"2010-03-14 2016-10-08 2020-10-22\");\n/// let mut it = Searcher::new(input);\n///\n/// let expected = Some(Match::must(0, 0..10));\n/// let got = it.advance(|input| {\n///     re.search(&mut cache, input, &mut caps);\n///     Ok(caps.get_match())\n/// });\n/// // Note that if we wanted to extract capturing group spans, we could\n/// // do that here with 'caps'.\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(Match::must(0, 11..21));\n/// let got = it.advance(|input| {\n///     re.search(&mut cache, input, &mut caps);\n///     Ok(caps.get_match())\n/// });\n/// assert_eq!(expected, got);\n///\n/// let expected = Some(Match::must(0, 22..32));\n/// let got = it.advance(|input| {\n///     re.search(&mut cache, input, &mut caps);\n///     Ok(caps.get_match())\n/// });\n/// assert_eq!(expected, got);\n///\n/// let expected = None;\n/// let got = it.advance(|input| {\n///     re.search(&mut cache, input, &mut caps);\n///     Ok(caps.get_match())\n/// });\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n376 pub fn advance<F>(&mut self, finder: F) -> Option<Match>\n377 where\n378     F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n379 {\n380     match self.try_advance(finder) {\n381         Ok(m) => m,\n382         Err(err) => panic!(\n383             \"unexpected regex find error: {}\\n\\\n384              to handle find errors, use 'try' or 'search' methods\",\n385             err,\n386         ),\n387     }\n388 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}