{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\npub struct TryMatchesIter<'h, F> {\n    it: Searcher<'h>,\n    finder: F,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\nimpl<'h, F> Iterator for TryMatchesIter<'h, F>\nwhere\n    F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n{\n    type Item = Result<Match, MatchError>;\n    #[inline]\n    fn next(&mut self) -> Option<Result<Match, MatchError>> {\n        self.it.try_advance(&mut self.finder).transpose()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n849 fn next(&mut self) -> Option<Result<Match, MatchError>> {\n850     self.it.try_advance(&mut self.finder).transpose()\n851 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}