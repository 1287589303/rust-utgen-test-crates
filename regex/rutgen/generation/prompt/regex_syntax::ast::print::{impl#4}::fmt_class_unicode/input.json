{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/print.rs\n// crate name is regex_syntax\nuse core::fmt;\nuse crate::ast::{\n    self, visitor::{self, Visitor},\n    Ast,\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self);\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Debug)]\nstruct Writer<W> {\n    wtr: W,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\nimpl<W: fmt::Write> Writer<W> {\n    fn fmt_group_pre(&mut self, ast: &ast::Group) -> fmt::Result {}\n    fn fmt_group_post(&mut self, _ast: &ast::Group) -> fmt::Result {}\n    fn fmt_repetition(&mut self, ast: &ast::Repetition) -> fmt::Result {}\n    fn fmt_repetition_range(&mut self, ast: &ast::RepetitionRange) -> fmt::Result {}\n    fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {}\n    fn fmt_assertion(&mut self, ast: &ast::Assertion) -> fmt::Result {}\n    fn fmt_set_flags(&mut self, ast: &ast::SetFlags) -> fmt::Result {}\n    fn fmt_flags(&mut self, ast: &ast::Flags) -> fmt::Result {}\n    fn fmt_class_bracketed_pre(&mut self, ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_bracketed_post(&mut self, _ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_set_binary_op_kind(\n        &mut self,\n        ast: &ast::ClassSetBinaryOpKind,\n    ) -> fmt::Result {}\n    fn fmt_class_perl(&mut self, ast: &ast::ClassPerl) -> fmt::Result {}\n    fn fmt_class_ascii(&mut self, ast: &ast::ClassAscii) -> fmt::Result {}\n    fn fmt_class_unicode(&mut self, ast: &ast::ClassUnicode) -> fmt::Result {\n        use crate::ast::ClassUnicodeKind::*;\n        use crate::ast::ClassUnicodeOpKind::*;\n        if ast.negated {\n            self.wtr.write_str(r\"\\P\")?;\n        } else {\n            self.wtr.write_str(r\"\\p\")?;\n        }\n        match ast.kind {\n            OneLetter(c) => self.wtr.write_char(c),\n            Named(ref x) => write!(self.wtr, \"{{{}}}\", x),\n            NamedValue { op: Equal, ref name, ref value } => {\n                write!(self.wtr, \"{{{}={}}}\", name, value)\n            }\n            NamedValue { op: Colon, ref name, ref value } => {\n                write!(self.wtr, \"{{{}:{}}}\", name, value)\n            }\n            NamedValue { op: NotEqual, ref name, ref value } => {\n                write!(self.wtr, \"{{{}!={}}}\", name, value)\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n376 fn fmt_class_unicode(&mut self, ast: &ast::ClassUnicode) -> fmt::Result {\n377     use crate::ast::ClassUnicodeKind::*;\n378     use crate::ast::ClassUnicodeOpKind::*;\n379 \n380     if ast.negated {\n381         self.wtr.write_str(r\"\\P\")?;\n382     } else {\n383         self.wtr.write_str(r\"\\p\")?;\n384     }\n385     match ast.kind {\n386         OneLetter(c) => self.wtr.write_char(c),\n387         Named(ref x) => write!(self.wtr, \"{{{}}}\", x),\n388         NamedValue { op: Equal, ref name, ref value } => {\n389             write!(self.wtr, \"{{{}={}}}\", name, value)\n390         }\n391         NamedValue { op: Colon, ref name, ref value } => {\n392             write!(self.wtr, \"{{{}:{}}}\", name, value)\n393         }\n394         NamedValue { op: NotEqual, ref name, ref value } => {\n395             write!(self.wtr, \"{{{}!={}}}\", name, value)\n396         }\n397     }\n398 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}