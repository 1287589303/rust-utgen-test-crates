{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Debug)]\nstruct InternalBuilder<'a> {\n    /// The DFA we're building.\n    dfa: DFA,\n    /// An unordered collection of NFA state IDs that we haven't yet tried to\n    /// build into a DFA state yet.\n    ///\n    /// This collection does not ultimately wind up including every NFA state\n    /// ID. Instead, each ID represents a \"start\" state for a sub-graph of the\n    /// NFA. The set of NFA states we then use to build a DFA state consists\n    /// of that \"start\" state and all states reachable from it via epsilon\n    /// transitions.\n    uncompiled_nfa_ids: Vec<StateID>,\n    /// A map from NFA state ID to DFA state ID. This is useful for easily\n    /// determining whether an NFA state has been used as a \"starting\" point\n    /// to build a DFA state yet. If it hasn't, then it is mapped to DEAD,\n    /// and since DEAD is specially added and never corresponds to any NFA\n    /// state, it follows that a mapping to DEAD implies the NFA state has\n    /// no corresponding DFA state yet.\n    nfa_to_dfa_id: Vec<StateID>,\n    /// A stack used to traverse the NFA states that make up a single DFA\n    /// state. Traversal occurs until the stack is empty, and we only push to\n    /// the stack when the state ID isn't in 'seen'. Actually, even more than\n    /// that, if we try to push something on to this stack that is already in\n    /// 'seen', then we bail out on construction completely, since it implies\n    /// that the NFA is not one-pass.\n    stack: Vec<(StateID, Epsilons)>,\n    /// The set of NFA states that we've visited via 'stack'.\n    seen: SparseSet,\n    /// Whether a match NFA state has been observed while constructing a\n    /// one-pass DFA state. Once a match state is seen, assuming we are using\n    /// leftmost-first match semantics, then we don't add any more transitions\n    /// to the DFA state we're building.\n    matched: bool,\n    /// The config passed to the builder.\n    ///\n    /// This is duplicated in dfa.config.\n    config: Config,\n    /// The NFA we're building a one-pass DFA from.\n    ///\n    /// This is duplicated in dfa.nfa.\n    nfa: &'a NFA,\n    /// The equivalence classes that make up the alphabet for this DFA>\n    ///\n    /// This is duplicated in dfa.classes.\n    classes: ByteClasses,\n}\n#[derive(Clone)]\npub struct DFA {\n    /// The configuration provided by the caller.\n    config: Config,\n    /// The NFA used to build this DFA.\n    ///\n    /// NOTE: We probably don't need to store the NFA here, but we use enough\n    /// bits from it that it's convenient to do so. And there really isn't much\n    /// cost to doing so either, since an NFA is reference counted internally.\n    nfa: NFA,\n    /// The transition table. Given a state ID 's' and a byte of haystack 'b',\n    /// the next state is `table[sid + classes[byte]]`.\n    ///\n    /// The stride of this table (i.e., the number of columns) is always\n    /// a power of 2, even if the alphabet length is smaller. This makes\n    /// converting between state IDs and state indices very cheap.\n    ///\n    /// Note that the stride always includes room for one extra \"transition\"\n    /// that isn't actually a transition. It is a 'PatternEpsilons' that is\n    /// used for match states only. Because of this, the maximum number of\n    /// active columns in the transition table is 257, which means the maximum\n    /// stride is 512 (the next power of 2 greater than or equal to 257).\n    table: Vec<Transition>,\n    /// The DFA state IDs of the starting states.\n    ///\n    /// `starts[0]` is always present and corresponds to the starting state\n    /// when searching for matches of any pattern in the DFA.\n    ///\n    /// `starts[i]` where i>0 corresponds to the starting state for the pattern\n    /// ID 'i-1'. These starting states are optional.\n    starts: Vec<StateID>,\n    /// Every state ID >= this value corresponds to a match state.\n    ///\n    /// This is what a search uses to detect whether a state is a match state\n    /// or not. It requires only a simple comparison instead of bit-unpacking\n    /// the PatternEpsilons from every state.\n    min_match_id: StateID,\n    /// The alphabet of this DFA, split into equivalence classes. Bytes in the\n    /// same equivalence class can never discriminate between a match and a\n    /// non-match.\n    classes: ByteClasses,\n    /// The number of elements in each state in the transition table. This may\n    /// be less than the stride, since the stride is always a power of 2 and\n    /// the alphabet length can be anything up to and including 256.\n    alphabet_len: usize,\n    /// The number of columns in the transition table, expressed as a power of\n    /// 2.\n    stride2: usize,\n    /// The offset at which the PatternEpsilons for a match state is stored in\n    /// the transition table.\n    ///\n    /// PERF: One wonders whether it would be better to put this in a separate\n    /// allocation, since only match states have a non-empty PatternEpsilons\n    /// and the number of match states tends be dwarfed by the number of\n    /// non-match states. So this would save '8*len(non_match_states)' for each\n    /// DFA. The question is whether moving this to a different allocation will\n    /// lead to a perf hit during searches. You might think dealing with match\n    /// states is rare, but some regexes spend a lot of time in match states\n    /// gobbling up input. But... match state handling is already somewhat\n    /// expensive, so maybe this wouldn't do much? Either way, it's worth\n    /// experimenting.\n    pateps_offset: usize,\n    /// The first explicit slot index. This refers to the first slot appearing\n    /// immediately after the last implicit slot. It is always 'patterns.len()\n    /// * 2'.\n    ///\n    /// We record this because we only store the explicit slots in our DFA\n    /// transition table that need to be saved. Implicit slots are handled\n    /// automatically as part of the search.\n    explicit_slot_start: usize,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone)]\npub struct DFA<T> {\n    tt: Transitions<T>,\n    st: StartTable<T>,\n    special: Special,\n    pre: Option<Prefilter>,\n    quitset: ByteSet,\n    flags: Flags,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone)]\npub struct DFA<T> {\n    /// The transition table for this DFA. This includes the transitions\n    /// themselves, along with the stride, number of states and the equivalence\n    /// class mapping.\n    tt: TransitionTable<T>,\n    /// The set of starting state identifiers for this DFA. The starting state\n    /// IDs act as pointers into the transition table. The specific starting\n    /// state chosen for each search is dependent on the context at which the\n    /// search begins.\n    st: StartTable<T>,\n    /// The set of match states and the patterns that match for each\n    /// corresponding match state.\n    ///\n    /// This structure is technically only needed because of support for\n    /// multi-regexes. Namely, multi-regexes require answering not just whether\n    /// a match exists, but _which_ patterns match. So we need to store the\n    /// matching pattern IDs for each match state. We do this even when there\n    /// is only one pattern for the sake of simplicity. In practice, this uses\n    /// up very little space for the case of one pattern.\n    ms: MatchStates<T>,\n    /// Information about which states are \"special.\" Special states are states\n    /// that are dead, quit, matching, starting or accelerated. For more info,\n    /// see the docs for `Special`.\n    special: Special,\n    /// The accelerators for this DFA.\n    ///\n    /// If a state is accelerated, then there exist only a small number of\n    /// bytes that can cause the DFA to leave the state. This permits searching\n    /// to use optimized routines to find those specific bytes instead of using\n    /// the transition table.\n    ///\n    /// All accelerated states exist in a contiguous range in the DFA's\n    /// transition table. See dfa/special.rs for more details on how states are\n    /// arranged.\n    accels: Accels<T>,\n    /// Any prefilter attached to this DFA.\n    ///\n    /// Note that currently prefilters are not serialized. When deserializing\n    /// a DFA from bytes, this is always set to `None`.\n    pre: Option<Prefilter>,\n    /// The set of \"quit\" bytes for this DFA.\n    ///\n    /// This is only used when computing the start state for a particular\n    /// position in a haystack. Namely, in the case where there is a quit\n    /// byte immediately before the start of the search, this set needs to be\n    /// explicitly consulted. In all other cases, quit bytes are detected by\n    /// the DFA itself, by transitioning all quit bytes to a special \"quit\n    /// state.\"\n    quitset: ByteSet,\n    /// Various flags describing the behavior of this DFA.\n    flags: Flags,\n}\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone, Debug)]\npub struct DFA {\n    config: Config,\n    nfa: thompson::NFA,\n    stride2: usize,\n    start_map: StartByteMap,\n    classes: ByteClasses,\n    quitset: ByteSet,\n    cache_capacity: usize,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Debug)]\npub(crate) struct DFA(Option<DFAEngine>);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone)]\npub(crate) struct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Debug)]\npub struct ByteClassRepresentatives<'a> {\n    classes: &'a ByteClasses,\n    cur_byte: usize,\n    end_byte: Option<usize>,\n    last_class: Option<u8>,\n}\nimpl<'a> InternalBuilder<'a> {\n    fn new(config: Config, nfa: &'a NFA) -> InternalBuilder<'a> {}\n    fn build(mut self) -> Result<DFA, BuildError> {}\n    fn shuffle_states(&mut self) {}\n    fn compile_transition(\n        &mut self,\n        dfa_id: StateID,\n        trans: &thompson::Transition,\n        epsilons: Epsilons,\n    ) -> Result<(), BuildError> {\n        let next_dfa_id = self.add_dfa_state_for_nfa_state(trans.next)?;\n        for byte in self\n            .classes\n            .representatives(trans.start..=trans.end)\n            .filter_map(|r| r.as_u8())\n        {\n            let oldtrans = self.dfa.transition(dfa_id, byte);\n            let newtrans = Transition::new(self.matched, next_dfa_id, epsilons);\n            if oldtrans.state_id() == DEAD {\n                self.dfa.set_transition(dfa_id, byte, newtrans);\n            } else if oldtrans != newtrans {\n                return Err(BuildError::not_one_pass(\"conflicting transition\"));\n            }\n        }\n        Ok(())\n    }\n    fn add_start_state(\n        &mut self,\n        pid: Option<PatternID>,\n        nfa_id: StateID,\n    ) -> Result<StateID, BuildError> {}\n    fn add_dfa_state_for_nfa_state(\n        &mut self,\n        nfa_id: StateID,\n    ) -> Result<StateID, BuildError> {\n        let existing_dfa_id = self.nfa_to_dfa_id[nfa_id];\n        if existing_dfa_id != DEAD {\n            return Ok(existing_dfa_id);\n        }\n        let dfa_id = self.add_empty_state()?;\n        self.nfa_to_dfa_id[nfa_id] = dfa_id;\n        self.uncompiled_nfa_ids.push(nfa_id);\n        Ok(dfa_id)\n    }\n    fn add_empty_state(&mut self) -> Result<StateID, BuildError> {}\n    fn stack_push(\n        &mut self,\n        nfa_id: StateID,\n        epsilons: Epsilons,\n    ) -> Result<(), BuildError> {}\n}\nimpl DFA {\n    fn start(&self) -> StateID {}\n    fn start_pattern(&self, pid: PatternID) -> Result<StateID, MatchError> {}\n    fn transition(&self, sid: StateID, byte: u8) -> Transition {\n        let offset = sid.as_usize() << self.stride2();\n        let class = self.classes.get(byte).as_usize();\n        self.table[offset + class]\n    }\n    fn set_transition(&mut self, sid: StateID, byte: u8, to: Transition) {\n        let offset = sid.as_usize() << self.stride2();\n        let class = self.classes.get(byte).as_usize();\n        self.table[offset + class] = to;\n    }\n    fn sparse_transitions(&self, sid: StateID) -> SparseTransitionIter<'_> {}\n    fn pattern_epsilons(&self, sid: StateID) -> PatternEpsilons {}\n    fn set_pattern_epsilons(&mut self, sid: StateID, pateps: PatternEpsilons) {}\n    fn prev_state_id(&self, id: StateID) -> Option<StateID> {}\n    fn last_state_id(&self) -> StateID {}\n    pub(super) fn swap_states(&mut self, id1: StateID, id2: StateID) {}\n    pub(super) fn remap(&mut self, map: impl Fn(StateID) -> StateID) {}\n}\nimpl BuildError {\n    fn nfa(err: crate::nfa::thompson::BuildError) -> BuildError {}\n    fn word(err: UnicodeWordBoundaryError) -> BuildError {}\n    fn too_many_states(limit: u64) -> BuildError {}\n    fn too_many_patterns(limit: u64) -> BuildError {}\n    fn unsupported_look(look: Look) -> BuildError {}\n    fn exceeded_size_limit(limit: usize) -> BuildError {}\n    fn not_one_pass(msg: &'static str) -> BuildError {\n        BuildError {\n            kind: BuildErrorKind::NotOnePass { msg },\n        }\n    }\n}\nimpl Transition {\n    const STATE_ID_BITS: u64 = 21;\n    const STATE_ID_SHIFT: u64 = 64 - Transition::STATE_ID_BITS;\n    const STATE_ID_LIMIT: u64 = 1 << Transition::STATE_ID_BITS;\n    const MATCH_WINS_SHIFT: u64 = 64 - (Transition::STATE_ID_BITS + 1);\n    const INFO_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn new(match_wins: bool, sid: StateID, epsilons: Epsilons) -> Transition {\n        let match_wins = if match_wins { 1 << Transition::MATCH_WINS_SHIFT } else { 0 };\n        let sid = sid.as_u64() << Transition::STATE_ID_SHIFT;\n        Transition(sid | match_wins | epsilons.0)\n    }\n    fn is_dead(self) -> bool {}\n    fn match_wins(&self) -> bool {}\n    fn state_id(&self) -> StateID {\n        StateID::new_unchecked((self.0 >> Transition::STATE_ID_SHIFT).as_usize())\n    }\n    fn set_state_id(&mut self, sid: StateID) {}\n    fn epsilons(&self) -> Epsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compile the given NFA transition into the DFA state given.\n///\n/// 'Epsilons' corresponds to any conditional epsilon transitions that need\n/// to be satisfied to follow this transition, and any slots that need to\n/// be saved if the transition is followed.\n///\n/// If this transition indicates that the NFA is not one-pass, then\n/// this returns an error. (This occurs, for example, if the DFA state\n/// already has a transition defined for the same input symbols as the\n/// given transition, *and* the result of the old and new transitions is\n/// different.)\n767 fn compile_transition(\n768     &mut self,\n769     dfa_id: StateID,\n770     trans: &thompson::Transition,\n771     epsilons: Epsilons,\n772 ) -> Result<(), BuildError> {\n773     let next_dfa_id = self.add_dfa_state_for_nfa_state(trans.next)?;\n774     for byte in self\n775         .classes\n776         .representatives(trans.start..=trans.end)\n777         .filter_map(|r| r.as_u8())\n778     {\n779         let oldtrans = self.dfa.transition(dfa_id, byte);\n780         let newtrans =\n781             Transition::new(self.matched, next_dfa_id, epsilons);\n782         // If the old transition points to the DEAD state, then we know\n783         // 'byte' has not been mapped to any transition for this DFA state\n784         // yet. So set it unconditionally. Otherwise, we require that the\n785         // old and new transitions are equivalent. Otherwise, there is\n786         // ambiguity and thus the regex is not one-pass.\n787         if oldtrans.state_id() == DEAD {\n788             self.dfa.set_transition(dfa_id, byte, newtrans);\n789         } else if oldtrans != newtrans {\n790             return Err(BuildError::not_one_pass(\n791                 \"conflicting transition\",\n792             ));\n793         }\n794     }\n795     Ok(())\n796 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}