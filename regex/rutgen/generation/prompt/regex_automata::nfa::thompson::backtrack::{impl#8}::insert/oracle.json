{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/backtrack.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchError, Span},\n    },\n};\n#[derive(Clone, Debug)]\nstruct Visited {\n    /// The actual underlying bitset. Each element in the bitset corresponds\n    /// to a particular (StateID, offset) pair. States correspond to the rows\n    /// and the offsets correspond to the columns.\n    ///\n    /// If our underlying NFA has N states and the haystack we're searching\n    /// has M bytes, then we have N*(M+1) entries in our bitset table. The\n    /// M+1 occurs because our matches are delayed by one byte (to support\n    /// look-around), and so we need to handle the end position itself rather\n    /// than stopping just before the end. (If there is no end position, then\n    /// it's treated as \"end-of-input,\" which is matched by things like '$'.)\n    ///\n    /// Given BITS=N*(M+1), we wind up with div_ceil(BITS, sizeof(usize))\n    /// blocks.\n    ///\n    /// We use 'usize' to represent our blocks because it makes some of the\n    /// arithmetic in 'insert' a bit nicer. For example, if we used 'u32' for\n    /// our block, we'd either need to cast u32s to usizes or usizes to u32s.\n    bitset: Vec<usize>,\n    /// The stride represents one plus length of the haystack we're searching\n    /// (as described above). The stride must be initialized for each search.\n    stride: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl Visited {\n    const BLOCK_SIZE: usize = 8 * core::mem::size_of::<usize>();\n    fn new(re: &BoundedBacktracker) -> Visited {}\n    fn insert(&mut self, sid: StateID, at: usize) -> bool {\n        let table_index = sid.as_usize() * self.stride + at;\n        let block_index = table_index / Visited::BLOCK_SIZE;\n        let bit = table_index % Visited::BLOCK_SIZE;\n        let block_with_bit = 1 << bit;\n        if self.bitset[block_index] & block_with_bit != 0 {\n            return false;\n        }\n        self.bitset[block_index] |= block_with_bit;\n        true\n    }\n    fn reset(&mut self, _: &BoundedBacktracker) {}\n    fn setup_search(\n        &mut self,\n        re: &BoundedBacktracker,\n        input: &Input<'_>,\n    ) -> Result<(), MatchError> {}\n    fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Insert the given (StateID, offset) pair into this set. If it already\n/// exists, then this is a no-op and it returns false. Otherwise this\n/// returns true.\n1820 fn insert(&mut self, sid: StateID, at: usize) -> bool {\n1821     let table_index = sid.as_usize() * self.stride + at;\n1822     let block_index = table_index / Visited::BLOCK_SIZE;\n1823     let bit = table_index % Visited::BLOCK_SIZE;\n1824     let block_with_bit = 1 << bit;\n1825     if self.bitset[block_index] & block_with_bit != 0 {\n1826         return false;\n1827     }\n1828     self.bitset[block_index] |= block_with_bit;\n1829     true\n1830 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}