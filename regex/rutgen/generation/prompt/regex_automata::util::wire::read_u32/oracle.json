{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn read_u32(slice: &[u8]) -> u32 {\n    let bytes: [u8; 4] = slice[..size_of::<u32>()].try_into().unwrap();\n    u32::from_ne_bytes(bytes)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Read a u32 from the beginning of the given slice in native endian format.\n/// If the slice has fewer than 4 bytes, then this panics.\n///\n/// Marked as inline to speed up sparse searching which decodes integers from\n/// its automaton at search time.\n771 pub(crate) fn read_u32(slice: &[u8]) -> u32 {\n772     let bytes: [u8; 4] = slice[..size_of::<u32>()].try_into().unwrap();\n773     u32::from_ne_bytes(bytes)\n774 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}