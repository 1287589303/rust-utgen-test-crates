{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/limited.rs\n// crate name is regex_automata\nuse crate::{\n    meta::error::{RetryError, RetryQuadraticError},\n    HalfMatch, Input, MatchError,\n};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {\n        self.haystack\n    }\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {\n        self.span\n    }\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\nimpl MatchError {\n    pub fn new(kind: MatchErrorKind) -> MatchError {}\n    pub fn kind(&self) -> &MatchErrorKind {}\n    pub fn quit(byte: u8, offset: usize) -> MatchError {\n        MatchError::new(MatchErrorKind::Quit {\n            byte,\n            offset,\n        })\n    }\n    pub fn gave_up(offset: usize) -> MatchError {}\n    pub fn haystack_too_long(len: usize) -> MatchError {}\n    pub fn unsupported_anchored(mode: Anchored) -> MatchError {}\n}\nimpl HalfMatch {\n    #[inline]\n    pub fn new(pattern: PatternID, offset: usize) -> HalfMatch {\n        HalfMatch { pattern, offset }\n    }\n    #[inline]\n    pub fn must(pattern: usize, offset: usize) -> HalfMatch {}\n    #[inline]\n    pub fn pattern(&self) -> PatternID {}\n    #[inline]\n    pub fn offset(&self) -> usize {}\n}\n#[cfg(feature = \"dfa-build\")]\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn dfa_eoi_rev(\n    dfa: &crate::dfa::dense::DFA<alloc::vec::Vec<u32>>,\n    input: &Input<'_>,\n    sid: &mut crate::util::primitives::StateID,\n    mat: &mut Option<HalfMatch>,\n) -> Result<(), MatchError> {\n    use crate::dfa::Automaton;\n    let sp = input.get_span();\n    if sp.start > 0 {\n        let byte = input.haystack()[sp.start - 1];\n        *sid = dfa.next_state(*sid, byte);\n        if dfa.is_match_state(*sid) {\n            let pattern = dfa.match_pattern(*sid, 0);\n            *mat = Some(HalfMatch::new(pattern, sp.start));\n        } else if dfa.is_quit_state(*sid) {\n            return Err(MatchError::quit(byte, sp.start - 1));\n        }\n    } else {\n        *sid = dfa.next_eoi_state(*sid);\n        if dfa.is_match_state(*sid) {\n            let pattern = dfa.match_pattern(*sid, 0);\n            *mat = Some(HalfMatch::new(pattern, 0));\n        }\n        debug_assert!(! dfa.is_quit_state(* sid));\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n190 fn dfa_eoi_rev(\n191     dfa: &crate::dfa::dense::DFA<alloc::vec::Vec<u32>>,\n192     input: &Input<'_>,\n193     sid: &mut crate::util::primitives::StateID,\n194     mat: &mut Option<HalfMatch>,\n195 ) -> Result<(), MatchError> {\n196     use crate::dfa::Automaton;\n197 \n198     let sp = input.get_span();\n199     if sp.start > 0 {\n200         let byte = input.haystack()[sp.start - 1];\n201         *sid = dfa.next_state(*sid, byte);\n202         if dfa.is_match_state(*sid) {\n203             let pattern = dfa.match_pattern(*sid, 0);\n204             *mat = Some(HalfMatch::new(pattern, sp.start));\n205         } else if dfa.is_quit_state(*sid) {\n206             return Err(MatchError::quit(byte, sp.start - 1));\n207         }\n208     } else {\n209         *sid = dfa.next_eoi_state(*sid);\n210         if dfa.is_match_state(*sid) {\n211             let pattern = dfa.match_pattern(*sid, 0);\n212             *mat = Some(HalfMatch::new(pattern, 0));\n213         }\n214         // N.B. We don't have to check 'is_quit' here because the EOI\n215         // transition can never lead to a quit state.\n216         debug_assert!(!dfa.is_quit_state(*sid));\n217     }\n218     Ok(())\n219 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}