{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/bytes.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{bytes::RegexSetBuilder, Error};\n#[derive(Clone)]\npub struct RegexSet {\n    pub(crate) meta: meta::Regex,\n    pub(crate) patterns: alloc::sync::Arc<[String]>,\n}\n#[derive(Clone, Debug)]\npub struct SetMatches(PatternSet);\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl RegexSet {\n    pub fn new<I, S>(exprs: I) -> Result<RegexSet, Error>\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    pub fn empty() -> RegexSet {}\n    #[inline]\n    pub fn is_match(&self, haystack: &[u8]) -> bool {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &[u8], start: usize) -> bool {}\n    #[inline]\n    pub fn matches(&self, haystack: &[u8]) -> SetMatches {\n        self.matches_at(haystack, 0)\n    }\n    #[inline]\n    pub fn matches_at(&self, haystack: &[u8], start: usize) -> SetMatches {\n        let input = Input::new(haystack).span(start..haystack.len());\n        let mut patset = PatternSet::new(self.meta.pattern_len());\n        self.meta.which_overlapping_matches(&input, &mut patset);\n        SetMatches(patset)\n    }\n    #[inline]\n    pub fn matches_read_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &[u8],\n        start: usize,\n    ) -> bool {}\n    #[inline]\n    pub fn read_matches_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &[u8],\n        start: usize,\n    ) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn patterns(&self) -> &[String] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the set of regexes that match in the given haystack.\n///\n/// The set returned contains the index of each regex that matches in\n/// the given haystack. The index is in correspondence with the order of\n/// regular expressions given to `RegexSet`'s constructor.\n///\n/// The set can also be used to iterate over the matched indices. The order\n/// of iteration is always ascending with respect to the matching indices.\n///\n/// Note that as with searches using [`Regex`](crate::bytes::Regex), the\n/// expression is unanchored by default. That is, if the regex does not\n/// start with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\n/// to match anywhere in the haystack.\n///\n/// # Example\n///\n/// Tests which regular expressions match the given haystack:\n///\n/// ```\n/// use regex::bytes::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"\\w+\",\n///     r\"\\d+\",\n///     r\"\\pL+\",\n///     r\"foo\",\n///     r\"bar\",\n///     r\"barfoo\",\n///     r\"foobar\",\n/// ]).unwrap();\n/// let matches: Vec<_> = set.matches(b\"foobar\").into_iter().collect();\n/// assert_eq!(matches, vec![0, 2, 3, 4, 6]);\n///\n/// // You can also test whether a particular regex matched:\n/// let matches = set.matches(b\"foobar\");\n/// assert!(!matches.matched(5));\n/// assert!(matches.matched(6));\n/// ```\n291 pub fn matches(&self, haystack: &[u8]) -> SetMatches {\n292     self.matches_at(haystack, 0)\n293 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}