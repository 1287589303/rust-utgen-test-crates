{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/search.rs\n// crate name is regex_automata\nuse crate::{\n    dfa::{accel, automaton::{Automaton, OverlappingState}},\n    util::{\n        prefilter::Prefilter, primitives::StateID,\n        search::{Anchored, HalfMatch, Input, Span},\n    },\n    MatchError,\n};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {\n        self.earliest\n    }\n    #[inline]\n    pub fn is_done(&self) -> bool {\n        self.get_span().start > self.get_span().end\n    }\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n#[inline(never)]\npub fn find_rev<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n) -> Result<Option<HalfMatch>, MatchError> {\n    if input.is_done() {\n        return Ok(None);\n    }\n    if input.get_earliest() {\n        find_rev_imp(dfa, input, true)\n    } else {\n        find_rev_imp(dfa, input, false)\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn find_rev_imp<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n    earliest: bool,\n) -> Result<Option<HalfMatch>, MatchError> {\n    let mut mat = None;\n    let mut sid = init_rev(dfa, input)?;\n    if input.start() == input.end() {\n        eoi_rev(dfa, input, &mut sid, &mut mat)?;\n        return Ok(mat);\n    }\n    let mut at = input.end() - 1;\n    macro_rules! next_unchecked {\n        ($sid:expr, $at:expr) => {\n            { let byte = * input.haystack().get_unchecked($at); dfa\n            .next_state_unchecked($sid, byte) }\n        };\n    }\n    loop {\n        let mut prev_sid;\n        while at >= input.start() {\n            prev_sid = unsafe { next_unchecked!(sid, at) };\n            if dfa.is_special_state(prev_sid) || at <= input.start().saturating_add(3) {\n                core::mem::swap(&mut prev_sid, &mut sid);\n                break;\n            }\n            at -= 1;\n            sid = unsafe { next_unchecked!(prev_sid, at) };\n            if dfa.is_special_state(sid) {\n                break;\n            }\n            at -= 1;\n            prev_sid = unsafe { next_unchecked!(sid, at) };\n            if dfa.is_special_state(prev_sid) {\n                core::mem::swap(&mut prev_sid, &mut sid);\n                break;\n            }\n            at -= 1;\n            sid = unsafe { next_unchecked!(prev_sid, at) };\n            if dfa.is_special_state(sid) {\n                break;\n            }\n            at -= 1;\n        }\n        if dfa.is_special_state(sid) {\n            if dfa.is_start_state(sid) {\n                if dfa.is_accel_state(sid) {\n                    let needles = dfa.accelerator(sid);\n                    at = accel::find_rev(needles, input.haystack(), at)\n                        .map(|i| i + 1)\n                        .unwrap_or(input.start());\n                }\n            } else if dfa.is_match_state(sid) {\n                let pattern = dfa.match_pattern(sid, 0);\n                mat = Some(HalfMatch::new(pattern, at + 1));\n                if earliest {\n                    return Ok(mat);\n                }\n                if dfa.is_accel_state(sid) {\n                    let needles = dfa.accelerator(sid);\n                    at = accel::find_rev(needles, input.haystack(), at)\n                        .map(|i| i + 1)\n                        .unwrap_or(input.start());\n                }\n            } else if dfa.is_accel_state(sid) {\n                let needles = dfa.accelerator(sid);\n                at = accel::find_rev(needles, input.haystack(), at)\n                    .map(|i| i + 1)\n                    .unwrap_or(input.start());\n            } else if dfa.is_dead_state(sid) {\n                return Ok(mat);\n            } else {\n                return Err(MatchError::quit(input.haystack()[at], at));\n            }\n        }\n        if at == input.start() {\n            break;\n        }\n        at -= 1;\n    }\n    eoi_rev(dfa, input, &mut sid, &mut mat)?;\n    Ok(mat)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n189 pub fn find_rev<A: Automaton + ?Sized>(\n190     dfa: &A,\n191     input: &Input<'_>,\n192 ) -> Result<Option<HalfMatch>, MatchError> {\n193     if input.is_done() {\n194         return Ok(None);\n195     }\n196     if input.get_earliest() {\n197         find_rev_imp(dfa, input, true)\n198     } else {\n199         find_rev_imp(dfa, input, false)\n200     }\n201 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}