{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn is_boundary(bytes: &[u8], i: usize) -> bool {\n    match bytes.get(i) {\n        None => i == bytes.len(),\n        Some(&b) => b <= 0b0111_1111 || b >= 0b1100_0000,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given offset in the given bytes falls on a\n/// valid UTF-8 encoded codepoint boundary.\n///\n/// If `bytes` is not valid UTF-8, then the behavior of this routine is\n/// unspecified.\n123 pub(crate) fn is_boundary(bytes: &[u8], i: usize) -> bool {\n124     match bytes.get(i) {\n125         // The position at the end of the bytes always represents an empty\n126         // string, which is a valid boundary. But anything after that doesn't\n127         // make much sense to call valid a boundary.\n128         None => i == bytes.len(),\n129         // Other than ASCII (where the most significant bit is never set),\n130         // valid starting bytes always have their most significant two bits\n131         // set, where as continuation bytes never have their second most\n132         // significant bit set. Therefore, this only returns true when bytes[i]\n133         // corresponds to a byte that begins a valid UTF-8 encoding of a\n134         // Unicode scalar value.\n135         Some(&b) => b <= 0b0111_1111 || b >= 0b1100_0000,\n136     }\n137 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}