{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn is_boundary(bytes: &[u8], i: usize) -> bool {\n    match bytes.get(i) {\n        None => i == bytes.len(),\n        Some(&b) => b <= 0b0111_1111 || b >= 0b1100_0000,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given offset in the given bytes falls on a\n/// valid UTF-8 encoded codepoint boundary.\n///\n/// If `bytes` is not valid UTF-8, then the behavior of this routine is\n/// unspecified.\n123 pub(crate) fn is_boundary(bytes: &[u8], i: usize) -> bool {\n124     match bytes.get(i) {\n125         // The position at the end of the bytes always represents an empty\n126         // string, which is a valid boundary. But anything after that doesn't\n127         // make much sense to call valid a boundary.\n128         None => i == bytes.len(),\n129         // Other than ASCII (where the most significant bit is never set),\n130         // valid starting bytes always have their most significant two bits\n131         // set, where as continuation bytes never have their second most\n132         // significant bit set. Therefore, this only returns true when bytes[i]\n133         // corresponds to a byte that begins a valid UTF-8 encoding of a\n134         // Unicode scalar value.\n135         Some(&b) => b <= 0b0111_1111 || b >= 0b1100_0000,\n136     }\n137 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}