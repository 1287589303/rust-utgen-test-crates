{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn is_boundary(bytes: &[u8], i: usize) -> bool {\n    match bytes.get(i) {\n        None => i == bytes.len(),\n        Some(&b) => b <= 0b0111_1111 || b >= 0b1100_0000,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given offset in the given bytes falls on a\n/// valid UTF-8 encoded codepoint boundary.\n///\n/// If `bytes` is not valid UTF-8, then the behavior of this routine is\n/// unspecified.\n123 pub(crate) fn is_boundary(bytes: &[u8], i: usize) -> bool {\n124     match bytes.get(i) {\n125         // The position at the end of the bytes always represents an empty\n126         // string, which is a valid boundary. But anything after that doesn't\n127         // make much sense to call valid a boundary.\n128         None => i == bytes.len(),\n129         // Other than ASCII (where the most significant bit is never set),\n130         // valid starting bytes always have their most significant two bits\n131         // set, where as continuation bytes never have their second most\n132         // significant bit set. Therefore, this only returns true when bytes[i]\n133         // corresponds to a byte that begins a valid UTF-8 encoding of a\n134         // Unicode scalar value.\n135         Some(&b) => b <= 0b0111_1111 || b >= 0b1100_0000,\n136     }\n137 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}