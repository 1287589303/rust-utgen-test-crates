{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ClassAsciiKind {\n    /// `[0-9A-Za-z]`\n    Alnum,\n    /// `[A-Za-z]`\n    Alpha,\n    /// `[\\x00-\\x7F]`\n    Ascii,\n    /// `[ \\t]`\n    Blank,\n    /// `[\\x00-\\x1F\\x7F]`\n    Cntrl,\n    /// `[0-9]`\n    Digit,\n    /// `[!-~]`\n    Graph,\n    /// `[a-z]`\n    Lower,\n    /// `[ -~]`\n    Print,\n    /// `[!-/:-@\\[-`{-~]`\n    Punct,\n    /// `[\\t\\n\\v\\f\\r ]`\n    Space,\n    /// `[A-Z]`\n    Upper,\n    /// `[0-9A-Za-z_]`\n    Word,\n    /// `[0-9A-Fa-f]`\n    Xdigit,\n}\nfn ascii_class_as_chars(\n    kind: &ast::ClassAsciiKind,\n) -> impl Iterator<Item = (char, char)> {\n    ascii_class(kind).map(|(s, e)| (char::from(s), char::from(e)))\n}\nfn ascii_class(kind: &ast::ClassAsciiKind) -> impl Iterator<Item = (u8, u8)> {\n    use crate::ast::ClassAsciiKind::*;\n    let slice: &'static [(u8, u8)] = match *kind {\n        Alnum => &[(b'0', b'9'), (b'A', b'Z'), (b'a', b'z')],\n        Alpha => &[(b'A', b'Z'), (b'a', b'z')],\n        Ascii => &[(b'\\x00', b'\\x7F')],\n        Blank => &[(b'\\t', b'\\t'), (b' ', b' ')],\n        Cntrl => &[(b'\\x00', b'\\x1F'), (b'\\x7F', b'\\x7F')],\n        Digit => &[(b'0', b'9')],\n        Graph => &[(b'!', b'~')],\n        Lower => &[(b'a', b'z')],\n        Print => &[(b' ', b'~')],\n        Punct => &[(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')],\n        Space => {\n            &[\n                (b'\\t', b'\\t'),\n                (b'\\n', b'\\n'),\n                (b'\\x0B', b'\\x0B'),\n                (b'\\x0C', b'\\x0C'),\n                (b'\\r', b'\\r'),\n                (b' ', b' '),\n            ]\n        }\n        Upper => &[(b'A', b'Z')],\n        Word => &[(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')],\n        Xdigit => &[(b'0', b'9'), (b'A', b'F'), (b'a', b'f')],\n    };\n    slice.iter().copied()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1352 fn ascii_class_as_chars(\n1353     kind: &ast::ClassAsciiKind,\n1354 ) -> impl Iterator<Item = (char, char)> {\n1355     ascii_class(kind).map(|(s, e)| (char::from(s), char::from(e)))\n1356 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}