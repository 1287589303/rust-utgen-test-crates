{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\nuse core::{\n    cell::UnsafeCell, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicUsize, Ordering},\n};\nuse alloc::{boxed::Box, vec, vec::Vec};\nuse std::{sync::Mutex, thread_local};\nstatic COUNTER: AtomicUsize = AtomicUsize::new(3);\nstatic THREAD_ID_UNOWNED: usize = 0;\nstatic THREAD_ID_INUSE: usize = 1;\nstatic THREAD_ID_DROPPED: usize = 2;\nconst MAX_POOL_STACKS: usize = 8;\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\npub(super) struct PoolGuard<'a, T: Send, F: Fn() -> T> {\n    /// The pool that this guard is attached to.\n    pool: &'a Pool<T, F>,\n    /// This is None after the guard has been put back into the pool.\n    value: Option<Box<T>>,\n}\n#[derive(Debug)]\nstruct Mutex<T> {\n    locked: AtomicBool,\n    data: UnsafeCell<T>,\n}\nimpl<T: Send, F: Fn() -> T> Pool<T, F> {\n    #[inline]\n    pub(super) fn get(&self) -> PoolGuard<'_, T, F> {}\n    #[cold]\n    fn get_slow(&self, caller: usize, owner: usize) -> PoolGuard<'_, T, F> {\n        if owner == THREAD_ID_UNOWNED {\n            let res = self\n                .owner\n                .compare_exchange(\n                    THREAD_ID_UNOWNED,\n                    THREAD_ID_INUSE,\n                    Ordering::AcqRel,\n                    Ordering::Acquire,\n                );\n            if res.is_ok() {\n                unsafe {\n                    *self.owner_val.get() = Some((self.create)());\n                }\n                return self.guard_owned(caller);\n            }\n        }\n        let stack_id = caller % self.stacks.len();\n        for _ in 0..1 {\n            let mut stack = match self.stacks[stack_id].0.try_lock() {\n                Err(_) => continue,\n                Ok(stack) => stack,\n            };\n            if let Some(value) = stack.pop() {\n                return self.guard_stack(value);\n            }\n            drop(stack);\n            let value = Box::new((self.create)());\n            return self.guard_stack(value);\n        }\n        self.guard_stack_transient(Box::new((self.create)()))\n    }\n    #[inline]\n    fn put_value(&self, value: Box<T>) {}\n    #[inline]\n    fn guard_owned(&self, caller: usize) -> PoolGuard<'_, T, F> {\n        PoolGuard {\n            pool: self,\n            value: Err(caller),\n            discard: false,\n        }\n    }\n    #[inline]\n    fn guard_stack(&self, value: Box<T>) -> PoolGuard<'_, T, F> {\n        PoolGuard {\n            pool: self,\n            value: Ok(value),\n            discard: false,\n        }\n    }\n    #[inline]\n    fn guard_stack_transient(&self, value: Box<T>) -> PoolGuard<'_, T, F> {\n        PoolGuard {\n            pool: self,\n            value: Ok(value),\n            discard: true,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This is the \"slow\" version that goes through a mutex to pop an\n/// allocated value off a stack to return to the caller. (Or, if the\n/// stack is empty, a new value is created.)\n///\n/// If the pool has no owner, then this will set the owner.\n542 fn get_slow(\n543     &self,\n544     caller: usize,\n545     owner: usize,\n546 ) -> PoolGuard<'_, T, F> {\n547     if owner == THREAD_ID_UNOWNED {\n548         // This sentinel means this pool is not yet owned. We try to\n549         // atomically set the owner. If we do, then this thread becomes\n550         // the owner and we can return a guard that represents the\n551         // special T for the owner.\n552         //\n553         // Note that we set the owner to a different sentinel that\n554         // indicates that the owned value is in use. The owner ID will\n555         // get updated to the actual ID of this thread once the guard\n556         // returned by this function is put back into the pool.\n557         let res = self.owner.compare_exchange(\n558             THREAD_ID_UNOWNED,\n559             THREAD_ID_INUSE,\n560             Ordering::AcqRel,\n561             Ordering::Acquire,\n562         );\n563         if res.is_ok() {\n564             // SAFETY: A successful CAS above implies this thread is\n565             // the owner and that this is the only such thread that\n566             // can reach here. Thus, there is no data race.\n567             unsafe {\n568                 *self.owner_val.get() = Some((self.create)());\n569             }\n570             return self.guard_owned(caller);\n571         }\n572     }\n573     let stack_id = caller % self.stacks.len();\n574     // We try to acquire exclusive access to this thread's stack, and\n575     // if so, grab a value from it if we can. We put this in a loop so\n576     // that it's easy to tweak and experiment with a different number\n577     // of tries. In the end, I couldn't see anything obviously better\n578     // than one attempt in ad hoc testing.\n579     for _ in 0..1 {\n580         let mut stack = match self.stacks[stack_id].0.try_lock() {\n581             Err(_) => continue,\n582             Ok(stack) => stack,\n583         };\n584         if let Some(value) = stack.pop() {\n585             return self.guard_stack(value);\n586         }\n587         // Unlock the mutex guarding the stack before creating a fresh\n588         // value since we no longer need the stack.\n589         drop(stack);\n590         let value = Box::new((self.create)());\n591         return self.guard_stack(value);\n592     }\n593     // We're only here if we could get access to our stack, so just\n594     // create a new value. This seems like it could be wasteful, but\n595     // waiting for exclusive access to a stack when there's high\n596     // contention is brutal for perf.\n597     self.guard_stack_transient(Box::new((self.create)()))\n598 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}