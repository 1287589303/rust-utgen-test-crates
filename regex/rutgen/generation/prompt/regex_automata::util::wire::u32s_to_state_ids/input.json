{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn u32s_to_state_ids(slice: &[u32]) -> &[StateID] {\n    unsafe { core::slice::from_raw_parts(slice.as_ptr().cast::<StateID>(), slice.len()) }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Safely converts a `&[u32]` to `&[StateID]` with zero cost.\n270 pub(crate) fn u32s_to_state_ids(slice: &[u32]) -> &[StateID] {\n271     // SAFETY: This is safe because StateID is defined to have the same memory\n272     // representation as a u32 (it is repr(transparent)). While not every u32\n273     // is a \"valid\" StateID, callers are not permitted to rely on the validity\n274     // of StateIDs for memory safety. It can only lead to logical errors. (This\n275     // is why StateID::new_unchecked is safe.)\n276     unsafe {\n277         core::slice::from_raw_parts(\n278             slice.as_ptr().cast::<StateID>(),\n279             slice.len(),\n280         )\n281     }\n282 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}