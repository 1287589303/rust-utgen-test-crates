{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/lazy.rs\n// crate name is regex_automata\nuse core::{\n    cell::Cell, fmt, mem::MaybeUninit, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicU8, Ordering},\n};\nconst LAZY_STATE_INIT: u8 = 0;\nconst LAZY_STATE_BUSY: u8 = 1;\nconst LAZY_STATE_DONE: u8 = 2;\npub(super) struct Lazy<T, F> {\n    state: AtomicU8,\n    create: Cell<Option<F>>,\n    data: Cell<MaybeUninit<T>>,\n}\nimpl<T, F: FnOnce() -> T> Lazy<T, F> {\n    pub(super) fn get(&self) -> &T {\n        while self.state.load(Ordering::Acquire) != LAZY_STATE_DONE {\n            let result = self\n                .state\n                .compare_exchange(\n                    LAZY_STATE_INIT,\n                    LAZY_STATE_BUSY,\n                    Ordering::AcqRel,\n                    Ordering::Acquire,\n                );\n            if let Ok(_) = result {\n                let create = unsafe {\n                    (*self.create.as_ptr())\n                        .take()\n                        .expect(\n                            \"Lazy's create function panicked, \\\n                             preventing initialization,\n                             poisoning current thread\",\n                        )\n                };\n                let guard = Guard { state: &self.state };\n                unsafe {\n                    (*self.data.as_ptr()).as_mut_ptr().write(create());\n                }\n                core::mem::forget(guard);\n                self.state.store(LAZY_STATE_DONE, Ordering::Release);\n                break;\n            }\n            core::hint::spin_loop();\n        }\n        self.poll().unwrap()\n    }\n    fn poll(&self) -> Option<&T> {\n        if self.state.load(Ordering::Acquire) == LAZY_STATE_DONE {\n            Some(unsafe { &*(*self.data.as_ptr()).as_ptr() })\n        } else {\n            None\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Get the underlying lazy value. If it hasn't been initialized\n/// yet, then always attempt to initialize it (even if some other\n/// thread is initializing it) and atomically attach it to this lazy\n/// value before returning it.\n164 pub(super) fn get(&self) -> &T {\n165     if let Some(data) = self.poll() {\n166         return data;\n167     }\n168     let data = (self.create)();\n169     let mut ptr = Box::into_raw(Box::new(data));\n170     // We attempt to stuff our initialized value into our atomic\n171     // pointer. Upon success, we don't need to do anything. But if\n172     // someone else beat us to the punch, then we need to make sure\n173     // our newly created value is dropped.\n174     let result = self.data.compare_exchange(\n175         core::ptr::null_mut(),\n176         ptr,\n177         Ordering::AcqRel,\n178         Ordering::Acquire,\n179     );\n180     if let Err(old) = result {\n181         // SAFETY: We created 'ptr' via Box::into_raw above, so turning\n182         // it back into a Box via from_raw is safe.\n183         drop(unsafe { Box::from_raw(ptr) });\n184         ptr = old;\n185     }\n186     // SAFETY: We just set the pointer above to a non-null value, even\n187     // in the error case, and set it to a fully initialized value\n188     // returned by 'create'.\n189     unsafe { &*ptr }\n190 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}