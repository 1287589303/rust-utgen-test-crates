{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\n#[derive(Clone)]\npub struct Captures {\n    /// The group info that these capture groups are coupled to. This is what\n    /// gives the \"convenience\" of the `Captures` API. Namely, it provides the\n    /// slot mapping and the name|-->index mapping for capture lookups by name.\n    group_info: GroupInfo,\n    /// The ID of the pattern that matched. Regex engines must set this to\n    /// None when no match occurs.\n    pid: Option<PatternID>,\n    /// The slot values, i.e., submatch offsets.\n    ///\n    /// In theory, the smallest sequence of slots would be something like\n    /// `max(groups(pattern) for pattern in regex) * 2`, but instead, we use\n    /// `sum(groups(pattern) for pattern in regex) * 2`. Why?\n    ///\n    /// Well, the former could be used in theory, because we don't generally\n    /// have any overlapping APIs that involve capturing groups. Therefore,\n    /// there's technically never any need to have slots set for multiple\n    /// patterns. However, this might change some day, in which case, we would\n    /// need to have slots available.\n    ///\n    /// The other reason is that during the execution of some regex engines,\n    /// there exists a point in time where multiple slots for different\n    /// patterns may be written to before knowing which pattern has matched.\n    /// Therefore, the regex engines themselves, in order to support multiple\n    /// patterns correctly, must have all slots available. If `Captures`\n    /// doesn't have all slots available, then regex engines can't write\n    /// directly into the caller provided `Captures` and must instead write\n    /// into some other storage and then copy the slots involved in the match\n    /// at the end of the search.\n    ///\n    /// So overall, at least as of the time of writing, it seems like the path\n    /// of least resistance is to just require allocating all possible slots\n    /// instead of the conceptual minimum. Another way to justify this is that\n    /// the most common case is a single pattern, in which case, there is no\n    /// inefficiency here since the 'max' and 'sum' calculations above are\n    /// equivalent in that case.\n    ///\n    /// N.B. The mapping from group index to slot is maintained by `GroupInfo`\n    /// and is considered an API guarantee. See `GroupInfo` for more details on\n    /// that mapping.\n    ///\n    /// N.B. `Option<NonMaxUsize>` has the same size as a `usize`.\n    slots: Vec<Option<NonMaxUsize>>,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[cfg(feature = \"alloc\")]\npub struct TryCapturesIter<'h, F> {\n    it: Searcher<'h>,\n    caps: Captures,\n    finder: F,\n}\nimpl<'h> Searcher<'h> {\n    pub fn new(input: Input<'h>) -> Searcher<'h> {}\n    pub fn input<'s>(&'s self) -> &'s Input<'h> {}\n    #[inline]\n    pub fn advance_half<F>(&mut self, finder: F) -> Option<HalfMatch>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn advance<F>(&mut self, finder: F) -> Option<Match>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance_half<F>(\n        &mut self,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance<F>(&mut self, mut finder: F) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_half_matches_iter<F>(self, finder: F) -> TryHalfMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_matches_iter<F>(self, finder: F) -> TryMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub fn into_captures_iter<F>(\n        self,\n        caps: Captures,\n        finder: F,\n    ) -> TryCapturesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,\n    {\n        TryCapturesIter {\n            it: self,\n            caps,\n            finder,\n        }\n    }\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_half_match<F>(\n        &mut self,\n        _: HalfMatch,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_match<F>(\n        &mut self,\n        m: Match,\n        mut finder: F,\n    ) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Given a closure that executes a single search, return an iterator over\n/// all successive non-overlapping `Captures` values.\n///\n/// The iterator returned yields result values. If the underlying regex\n/// engine is configured to never return an error, consider calling\n/// [`TryCapturesIter::infallible`] to convert errors into panics.\n///\n/// Unlike the other iterator constructors, this accepts an initial\n/// `Captures` value. This `Captures` value is reused for each search, and\n/// the iterator implementation clones it before returning it. The caller\n/// must provide this value because the iterator is purposely ignorant\n/// of the underlying regex engine and thus doesn't know how to create\n/// one itself. More to the point, a `Captures` value itself has a few\n/// different constructors, which change which kind of information is\n/// available to query in exchange for search performance.\n///\n/// # Example\n///\n/// This example shows how to use a `Searcher` to create a proper iterator\n/// over `Captures` values, which provides access to all capturing group\n/// spans for each match.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::iter::Searcher,\n///     Input,\n/// };\n///\n/// let re = PikeVM::new(\n///     r\"(?P<y>[0-9]{4})-(?P<m>[0-9]{2})-(?P<d>[0-9]{2})\",\n/// )?;\n/// let (mut cache, caps) = (re.create_cache(), re.create_captures());\n///\n/// let haystack = \"2010-03-14 2016-10-08 2020-10-22\";\n/// let input = Input::new(haystack);\n/// let mut it = Searcher::new(input)\n///     .into_captures_iter(caps, |input, caps| {\n///         re.search(&mut cache, input, caps);\n///         Ok(())\n///     });\n///\n/// let got = it.next().expect(\"first date\")?;\n/// let year = got.get_group_by_name(\"y\").expect(\"must match\");\n/// assert_eq!(\"2010\", &haystack[year]);\n///\n/// let got = it.next().expect(\"second date\")?;\n/// let month = got.get_group_by_name(\"m\").expect(\"must match\");\n/// assert_eq!(\"10\", &haystack[month]);\n///\n/// let got = it.next().expect(\"third date\")?;\n/// let day = got.get_group_by_name(\"d\").expect(\"must match\");\n/// assert_eq!(\"22\", &haystack[day]);\n///\n/// assert!(it.next().is_none());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n607 pub fn into_captures_iter<F>(\n608     self,\n609     caps: Captures,\n610     finder: F,\n611 ) -> TryCapturesIter<'h, F>\n612 where\n613     F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,\n614 {\n615     TryCapturesIter { it: self, caps, finder }\n616 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}