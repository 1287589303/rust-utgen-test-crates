{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\npub fn perl_space() -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-bool\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PerlClassNotFound)\n    }\n    #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-bool\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::perl_space::WHITE_SPACE;\n        Ok(hir_class(WHITE_SPACE))\n    }\n    #[cfg(feature = \"unicode-bool\")]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::property_bool::WHITE_SPACE;\n        Ok(hir_class(WHITE_SPACE))\n    }\n    imp()\n}\n#[cfg(feature = \"unicode-bool\")]\nfn imp() -> Result<hir::ClassUnicode, Error> {\n    use crate::unicode_tables::property_bool::WHITE_SPACE;\n    Ok(hir_class(WHITE_SPACE))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a Unicode aware class for \\s.\n///\n/// This returns an error if the data is not available for \\s.\n406 pub fn perl_space() -> Result<hir::ClassUnicode, Error> {\n407     #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-bool\")))]\n408     fn imp() -> Result<hir::ClassUnicode, Error> {\n409         Err(Error::PerlClassNotFound)\n410     }\n411 \n412     #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-bool\")))]\n413     fn imp() -> Result<hir::ClassUnicode, Error> {\n414         use crate::unicode_tables::perl_space::WHITE_SPACE;\n415         Ok(hir_class(WHITE_SPACE))\n416     }\n417 \n418     #[cfg(feature = \"unicode-bool\")]\n419     fn imp() -> Result<hir::ClassUnicode, Error> {\n420         use crate::unicode_tables::property_bool::WHITE_SPACE;\n421         Ok(hir_class(WHITE_SPACE))\n422     }\n423 \n424     imp()\n425 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}