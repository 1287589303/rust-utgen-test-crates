{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/search.rs\n// crate name is regex_automata\nuse crate::{\n    dfa::{accel, automaton::{Automaton, OverlappingState}},\n    util::{\n        prefilter::Prefilter, primitives::StateID,\n        search::{Anchored, HalfMatch, Input, Span},\n    },\n    MatchError,\n};\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct OverlappingState {\n    /// The match reported by the most recent overlapping search to use this\n    /// state.\n    ///\n    /// If a search does not find any matches, then it is expected to clear\n    /// this value.\n    pub(crate) mat: Option<HalfMatch>,\n    /// The state ID of the state at which the search was in when the call\n    /// terminated. When this is a match state, `last_match` must be set to a\n    /// non-None value.\n    ///\n    /// A `None` value indicates the start state of the corresponding\n    /// automaton. We cannot use the actual ID, since any one automaton may\n    /// have many start states, and which one is in use depends on several\n    /// search-time factors.\n    pub(crate) id: Option<StateID>,\n    /// The position of the search.\n    ///\n    /// When `id` is None (i.e., we are starting a search), this is set to\n    /// the beginning of the search as given by the caller regardless of its\n    /// current value. Subsequent calls to an overlapping search pick up at\n    /// this offset.\n    pub(crate) at: usize,\n    /// The index into the matching patterns of the next match to report if the\n    /// current state is a match state. Note that this may be 1 greater than\n    /// the total number of matches to report for the current match state. (In\n    /// which case, no more matches should be reported at the current position\n    /// and the search should advance to the next position.)\n    pub(crate) next_match_index: Option<usize>,\n    /// This is set to true when a reverse overlapping search has entered its\n    /// EOI transitions.\n    ///\n    /// This isn't used in a forward search because it knows to stop once the\n    /// position exceeds the end of the search range. In a reverse search,\n    /// since we use unsigned offsets, we don't \"know\" once we've gone past\n    /// `0`. So the only way to detect it is with this extra flag. The reverse\n    /// overlapping search knows to terminate specifically after it has\n    /// reported all matches after following the EOI transition.\n    pub(crate) rev_eoi: bool,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl HalfMatch {\n    #[inline]\n    pub fn new(pattern: PatternID, offset: usize) -> HalfMatch {\n        HalfMatch { pattern, offset }\n    }\n    #[inline]\n    pub fn must(pattern: usize, offset: usize) -> HalfMatch {}\n    #[inline]\n    pub fn pattern(&self) -> PatternID {}\n    #[inline]\n    pub fn offset(&self) -> usize {}\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {\n        self.haystack\n    }\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.get_span().start\n    }\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.get_span().end\n    }\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {\n        self.get_span().start > self.get_span().end\n    }\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\nimpl MatchError {\n    pub fn new(kind: MatchErrorKind) -> MatchError {}\n    pub fn kind(&self) -> &MatchErrorKind {}\n    pub fn quit(byte: u8, offset: usize) -> MatchError {\n        MatchError::new(MatchErrorKind::Quit {\n            byte,\n            offset,\n        })\n    }\n    pub fn gave_up(offset: usize) -> MatchError {}\n    pub fn haystack_too_long(len: usize) -> MatchError {}\n    pub fn unsupported_anchored(mode: Anchored) -> MatchError {}\n}\n#[inline(never)]\npub(crate) fn find_overlapping_rev<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n    state: &mut OverlappingState,\n) -> Result<(), MatchError> {\n    state.mat = None;\n    if input.is_done() {\n        return Ok(());\n    }\n    let mut sid = match state.id {\n        None => {\n            let sid = init_rev(dfa, input)?;\n            state.id = Some(sid);\n            if input.start() == input.end() {\n                state.rev_eoi = true;\n            } else {\n                state.at = input.end() - 1;\n            }\n            sid\n        }\n        Some(sid) => {\n            if let Some(match_index) = state.next_match_index {\n                let match_len = dfa.match_len(sid);\n                if match_index < match_len {\n                    state.next_match_index = Some(match_index + 1);\n                    let pattern = dfa.match_pattern(sid, match_index);\n                    state.mat = Some(HalfMatch::new(pattern, state.at));\n                    return Ok(());\n                }\n            }\n            if state.rev_eoi {\n                return Ok(());\n            } else if state.at == input.start() {\n                state.rev_eoi = true;\n            } else {\n                state.at -= 1;\n            }\n            sid\n        }\n    };\n    while !state.rev_eoi {\n        sid = dfa.next_state(sid, input.haystack()[state.at]);\n        if dfa.is_special_state(sid) {\n            state.id = Some(sid);\n            if dfa.is_start_state(sid) {\n                if dfa.is_accel_state(sid) {\n                    let needles = dfa.accelerator(sid);\n                    state.at = accel::find_rev(needles, input.haystack(), state.at)\n                        .map(|i| i + 1)\n                        .unwrap_or(input.start());\n                }\n            } else if dfa.is_match_state(sid) {\n                state.next_match_index = Some(1);\n                let pattern = dfa.match_pattern(sid, 0);\n                state.mat = Some(HalfMatch::new(pattern, state.at + 1));\n                return Ok(());\n            } else if dfa.is_accel_state(sid) {\n                let needles = dfa.accelerator(sid);\n                state.at = accel::find_rev(needles, input.haystack(), state.at)\n                    .map(|i| i + 1)\n                    .unwrap_or(input.start());\n            } else if dfa.is_dead_state(sid) {\n                return Ok(());\n            } else {\n                return Err(MatchError::quit(input.haystack()[state.at], state.at));\n            }\n        }\n        if state.at == input.start() {\n            break;\n        }\n        state.at -= 1;\n    }\n    let result = eoi_rev(dfa, input, &mut sid, &mut state.mat);\n    state.rev_eoi = true;\n    state.id = Some(sid);\n    if state.mat.is_some() {\n        state.next_match_index = Some(1);\n    }\n    result\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn init_rev<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n) -> Result<StateID, MatchError> {\n    let sid = dfa.start_state_reverse(input)?;\n    debug_assert!(! dfa.is_match_state(sid));\n    Ok(sid)\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn eoi_rev<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n    sid: &mut StateID,\n    mat: &mut Option<HalfMatch>,\n) -> Result<(), MatchError> {\n    let sp = input.get_span();\n    if sp.start > 0 {\n        let byte = input.haystack()[sp.start - 1];\n        *sid = dfa.next_state(*sid, byte);\n        if dfa.is_match_state(*sid) {\n            let pattern = dfa.match_pattern(*sid, 0);\n            *mat = Some(HalfMatch::new(pattern, sp.start));\n        } else if dfa.is_quit_state(*sid) {\n            return Err(MatchError::quit(byte, sp.start - 1));\n        }\n    } else {\n        *sid = dfa.next_eoi_state(*sid);\n        if dfa.is_match_state(*sid) {\n            let pattern = dfa.match_pattern(*sid, 0);\n            *mat = Some(HalfMatch::new(pattern, 0));\n        }\n    }\n    Ok(())\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn find_rev(needles: &[u8], haystack: &[u8], at: usize) -> Option<usize> {\n    let bs = needles;\n    match needles.len() {\n        1 => memchr::memrchr(bs[0], &haystack[..at]),\n        2 => memchr::memrchr2(bs[0], bs[1], &haystack[..at]),\n        3 => memchr::memrchr3(bs[0], bs[1], bs[2], &haystack[..at]),\n        0 => panic!(\"cannot find with empty needles\"),\n        n => panic!(\"invalid needles length: {}\", n),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n445 pub(crate) fn find_overlapping_rev<A: Automaton + ?Sized>(\n446     dfa: &A,\n447     input: &Input<'_>,\n448     state: &mut OverlappingState,\n449 ) -> Result<(), MatchError> {\n450     state.mat = None;\n451     if input.is_done() {\n452         return Ok(());\n453     }\n454     let mut sid = match state.id {\n455         None => {\n456             let sid = init_rev(dfa, input)?;\n457             state.id = Some(sid);\n458             if input.start() == input.end() {\n459                 state.rev_eoi = true;\n460             } else {\n461                 state.at = input.end() - 1;\n462             }\n463             sid\n464         }\n465         Some(sid) => {\n466             if let Some(match_index) = state.next_match_index {\n467                 let match_len = dfa.match_len(sid);\n468                 if match_index < match_len {\n469                     state.next_match_index = Some(match_index + 1);\n470                     let pattern = dfa.match_pattern(sid, match_index);\n471                     state.mat = Some(HalfMatch::new(pattern, state.at));\n472                     return Ok(());\n473                 }\n474             }\n475             // Once we've reported all matches at a given position, we need\n476             // to advance the search to the next position. However, if we've\n477             // already followed the EOI transition, then we know we're done\n478             // with the search and there cannot be any more matches to report.\n479             if state.rev_eoi {\n480                 return Ok(());\n481             } else if state.at == input.start() {\n482                 // At this point, we should follow the EOI transition. This\n483                 // will cause us the skip the main loop below and fall through\n484                 // to the final 'eoi_rev' transition.\n485                 state.rev_eoi = true;\n486             } else {\n487                 // We haven't hit the end of the search yet, so move on.\n488                 state.at -= 1;\n489             }\n490             sid\n491         }\n492     };\n493     while !state.rev_eoi {\n494         sid = dfa.next_state(sid, input.haystack()[state.at]);\n495         if dfa.is_special_state(sid) {\n496             state.id = Some(sid);\n497             if dfa.is_start_state(sid) {\n498                 if dfa.is_accel_state(sid) {\n499                     let needles = dfa.accelerator(sid);\n500                     state.at =\n501                         accel::find_rev(needles, input.haystack(), state.at)\n502                             .map(|i| i + 1)\n503                             .unwrap_or(input.start());\n504                 }\n505             } else if dfa.is_match_state(sid) {\n506                 state.next_match_index = Some(1);\n507                 let pattern = dfa.match_pattern(sid, 0);\n508                 state.mat = Some(HalfMatch::new(pattern, state.at + 1));\n509                 return Ok(());\n510             } else if dfa.is_accel_state(sid) {\n511                 let needles = dfa.accelerator(sid);\n512                 // If the accelerator returns nothing, why don't we quit the\n513                 // search? Well, if the accelerator doesn't find anything, that\n514                 // doesn't mean we don't have a match. It just means that we\n515                 // can't leave the current state given one of the 255 possible\n516                 // byte values. However, there might be an EOI transition. So\n517                 // we set 'at' to the end of the haystack, which will cause\n518                 // this loop to stop and fall down into the EOI transition.\n519                 state.at =\n520                     accel::find_rev(needles, input.haystack(), state.at)\n521                         .map(|i| i + 1)\n522                         .unwrap_or(input.start());\n523             } else if dfa.is_dead_state(sid) {\n524                 return Ok(());\n525             } else {\n526                 return Err(MatchError::quit(\n527                     input.haystack()[state.at],\n528                     state.at,\n529                 ));\n530             }\n531         }\n532         if state.at == input.start() {\n533             break;\n534         }\n535         state.at -= 1;\n536     }\n537 \n538     let result = eoi_rev(dfa, input, &mut sid, &mut state.mat);\n539     state.rev_eoi = true;\n540     state.id = Some(sid);\n541     if state.mat.is_some() {\n542         // '1' is always correct here since if we get to this point, this\n543         // always corresponds to the first (index '0') match discovered at\n544         // this position. So the next match to report at this position (if\n545         // it exists) is at index '1'.\n546         state.next_match_index = Some(1);\n547     }\n548     result\n549 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}