{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn accelerate(mut self, yes: bool) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {\n        self.pre = Some(pre);\n        if self.specialize_start_states.is_none() {\n            self.specialize_start_states = Some(self.get_prefilter().is_some());\n        }\n        self\n    }\n    pub fn minimize(mut self, yes: bool) -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn start_kind(mut self, kind: StartKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {}\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {}\n    pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn determinize_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn get_accelerate(&self) -> bool {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {\n        self.pre.as_ref().unwrap_or(&None).as_ref()\n    }\n    pub fn get_minimize(&self) -> bool {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts(&self) -> StartKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {}\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_dfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_determinize_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set a prefilter to be used whenever a start state is entered.\n///\n/// A [`Prefilter`] in this context is meant to accelerate searches by\n/// looking for literal prefixes that every match for the corresponding\n/// pattern (or patterns) must start with. Once a prefilter produces a\n/// match, the underlying search routine continues on to try and confirm\n/// the match.\n///\n/// Be warned that setting a prefilter does not guarantee that the search\n/// will be faster. While it's usually a good bet, if the prefilter\n/// produces a lot of false positive candidates (i.e., positions matched\n/// by the prefilter but not by the regex), then the overall result can\n/// be slower than if you had just executed the regex engine without any\n/// prefilters.\n///\n/// Note that unless [`Config::specialize_start_states`] has been\n/// explicitly set, then setting this will also enable (when `pre` is\n/// `Some`) or disable (when `pre` is `None`) start state specialization.\n/// This occurs because without start state specialization, a prefilter\n/// is likely to be less effective. And without a prefilter, start state\n/// specialization is usually pointless.\n///\n/// **WARNING:** Note that prefilters are not preserved as part of\n/// serialization. Serializing a DFA will drop its prefilter.\n///\n/// By default no prefilter is set.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{\n///     dfa::{dense::DFA, Automaton},\n///     util::prefilter::Prefilter,\n///     Input, HalfMatch, MatchKind,\n/// };\n///\n/// let pre = Prefilter::new(MatchKind::LeftmostFirst, &[\"foo\", \"bar\"]);\n/// let re = DFA::builder()\n///     .configure(DFA::config().prefilter(pre))\n///     .build(r\"(foo|bar)[a-z]+\")?;\n/// let input = Input::new(\"foo1 barfox bar\");\n/// assert_eq!(\n///     Some(HalfMatch::must(0, 11)),\n///     re.try_search_fwd(&input)?,\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Be warned though that an incorrect prefilter can lead to incorrect\n/// results!\n///\n/// ```\n/// use regex_automata::{\n///     dfa::{dense::DFA, Automaton},\n///     util::prefilter::Prefilter,\n///     Input, HalfMatch, MatchKind,\n/// };\n///\n/// let pre = Prefilter::new(MatchKind::LeftmostFirst, &[\"foo\", \"car\"]);\n/// let re = DFA::builder()\n///     .configure(DFA::config().prefilter(pre))\n///     .build(r\"(foo|bar)[a-z]+\")?;\n/// let input = Input::new(\"foo1 barfox bar\");\n/// assert_eq!(\n///     // No match reported even though there clearly is one!\n///     None,\n///     re.try_search_fwd(&input)?,\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n197 pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {\n198     self.pre = Some(pre);\n199     if self.specialize_start_states.is_none() {\n200         self.specialize_start_states =\n201             Some(self.get_prefilter().is_some());\n202     }\n203     self\n204 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}