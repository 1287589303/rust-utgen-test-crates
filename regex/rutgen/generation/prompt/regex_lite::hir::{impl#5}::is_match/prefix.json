{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub(crate) enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    Word = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordNegate = 1 << 7,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStart = 1 << 8,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEnd = 1 << 9,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalf = 1 << 10,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalf = 1 << 11,\n}\nimpl Look {\n    pub(crate) fn is_match(&self, haystack: &[u8], at: usize) -> bool {\n        use self::Look::*;\n        match *self {\n            Start => at == 0,\n            End => at == haystack.len(),\n            StartLF => at == 0 || haystack[at - 1] == b'\\n',\n            EndLF => at == haystack.len() || haystack[at] == b'\\n',\n            StartCRLF => {\n                at == 0 || haystack[at - 1] == b'\\n'\n                    || (haystack[at - 1] == b'\\r'\n                        && (at >= haystack.len() || haystack[at] != b'\\n'))\n            }\n            EndCRLF => {\n                at == haystack.len() || haystack[at] == b'\\r'\n                    || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'))\n            }\n            Word => {\n                let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n                let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n                word_before != word_after\n            }\n            WordNegate => {\n                let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n                let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n                word_before == word_after\n            }\n            WordStart => {\n                let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n                let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n                !word_before && word_after\n            }\n            WordEnd => {\n                let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n                let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n                word_before && !word_after\n            }\n            WordStartHalf => {\n                let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n                !word_before\n            }\n            WordEndHalf => {\n                let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n                !word_after\n            }\n        }\n    }\n}\npub(crate) fn is_word_byte(b: u8) -> bool {\n    const fn mkwordset() -> [bool; 256] {\n        let mut set = [false; 256];\n        set[b'_' as usize] = true;\n        let mut byte = b'0';\n        while byte <= b'9' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'A';\n        while byte <= b'Z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'a';\n        while byte <= b'z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        set\n    }\n    const WORD: [bool; 256] = mkwordset();\n    WORD[b as usize]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if the given position in the given haystack matches this\n/// look-around assertion.\n636 pub(crate) fn is_match(&self, haystack: &[u8], at: usize) -> bool {\n637     use self::Look::*;\n638 \n639     match *self {\n640         Start => at == 0,\n641         End => at == haystack.len(),\n642         StartLF => at == 0 || haystack[at - 1] == b'\\n',\n643         EndLF => at == haystack.len() || haystack[at] == b'\\n',\n644         StartCRLF => {\n645             at == 0\n646                 || haystack[at - 1] == b'\\n'\n647                 || (haystack[at - 1] == b'\\r'\n648                     && (at >= haystack.len() || haystack[at] != b'\\n'))\n649         }\n650         EndCRLF => {\n651             at == haystack.len()\n652                 || haystack[at] == b'\\r'\n653                 || (haystack[at] == b'\\n'\n654                     && (at == 0 || haystack[at - 1] != b'\\r'))\n655         }\n656         Word => {\n657             let word_before =\n658                 at > 0 && utf8::is_word_byte(haystack[at - 1]);\n659             let word_after =\n660                 at < haystack.len() && utf8::is_word_byte(haystack[at]);\n661             word_before != word_after\n662         }\n663         WordNegate => {\n664             let word_before =\n665                 at > 0 && utf8::is_word_byte(haystack[at - 1]);\n666             let word_after =\n667                 at < haystack.len() && utf8::is_word_byte(haystack[at]);\n668             word_before == word_after\n669         }\n670         WordStart => {\n671             let word_before =\n672                 at > 0 && utf8::is_word_byte(haystack[at - 1]);\n673             let word_after =\n674                 at < haystack.len() && utf8::is_word_byte(haystack[at]);\n675             !word_before && word_after\n676         }\n677         WordEnd => {\n678             let word_before =\n679                 at > 0 && utf8::is_word_byte(haystack[at - 1]);\n680             let word_after =\n681                 at < haystack.len() && utf8::is_word_byte(haystack[at]);\n682             word_before && !word_after\n683         }\n684         WordStartHalf => {\n685             let word_before =\n686                 at > 0 && utf8::is_word_byte(haystack[at - 1]);\n687             !word_before\n688         }\n689         WordEndHalf => {\n690             let word_after =\n691                 at < haystack.len() && utf8::is_word_byte(haystack[at]);\n692             !word_after\n693         }\n694     }\n695 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}