{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/mod.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\n#[cfg(feature = \"alloc\")]\nuse alloc::sync::Arc;\n#[cfg(feature = \"syntax\")]\nuse regex_syntax::hir::{literal, Hir};\nuse crate::util::search::{MatchKind, Span};\npub(crate) use crate::util::prefilter::{\n    aho_corasick::AhoCorasick, byteset::ByteSet, memchr::{Memchr, Memchr2, Memchr3},\n    memmem::Memmem, teddy::Teddy,\n};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Prefilter {\n    pub fn new<B: AsRef<[u8]>>(kind: MatchKind, needles: &[B]) -> Option<Prefilter> {}\n    fn from_choice(choice: Choice, max_needle_len: usize) -> Option<Prefilter> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn from_hir_prefix(kind: MatchKind, hir: &Hir) -> Option<Prefilter> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn from_hirs_prefix<H: Borrow<Hir>>(\n        kind: MatchKind,\n        hirs: &[H],\n    ) -> Option<Prefilter> {\n        prefixes(kind, hirs).literals().and_then(|lits| Prefilter::new(kind, lits))\n    }\n    #[inline]\n    pub fn find(&self, haystack: &[u8], span: Span) -> Option<Span> {}\n    #[inline]\n    pub fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span> {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n    #[inline]\n    pub fn max_needle_len(&self) -> usize {}\n    #[inline]\n    pub fn is_fast(&self) -> bool {}\n}\n#[cfg(feature = \"syntax\")]\npub(crate) fn prefixes<H>(kind: MatchKind, hirs: &[H]) -> literal::Seq\nwhere\n    H: core::borrow::Borrow<Hir>,\n{\n    let mut extractor = literal::Extractor::new();\n    extractor.kind(literal::ExtractKind::Prefix);\n    let mut prefixes = literal::Seq::empty();\n    for hir in hirs {\n        prefixes.union(&mut extractor.extract(hir.borrow()));\n    }\n    debug!(\n        \"prefixes (len={:?}, exact={:?}) extracted before optimization: {:?}\", prefixes\n        .len(), prefixes.is_exact(), prefixes\n    );\n    match kind {\n        MatchKind::All => {\n            prefixes.sort();\n            prefixes.dedup();\n        }\n        MatchKind::LeftmostFirst => {\n            prefixes.optimize_for_prefix_by_preference();\n        }\n    }\n    debug!(\n        \"prefixes (len={:?}, exact={:?}) extracted after optimization: {:?}\", prefixes\n        .len(), prefixes.is_exact(), prefixes\n    );\n    prefixes\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This attempts to extract prefixes from the given `Hir` expressions for\n/// the given match semantics, and if possible, builds a prefilter for\n/// them.\n///\n/// Note that as of now, prefilters throw away information about which\n/// pattern each literal comes from. In other words, when a prefilter finds\n/// a match, there's no way to know which pattern (or patterns) it came\n/// from. Therefore, in order to confirm a match, you'll have to check all\n/// of the patterns by running the full regex engine.\n///\n/// # Example\n///\n/// This example shows how to build a prefilter directly from multiple\n/// `Hir` expressions expression, and use it to find an occurrence of a\n/// prefix from the regex patterns.\n///\n/// ```\n/// use regex_automata::{\n///     util::{prefilter::Prefilter, syntax},\n///     MatchKind, Span,\n/// };\n///\n/// let hirs = syntax::parse_many(&[\n///     r\"(Bruce|Patti) \\w+\",\n///     r\"Mrs?\\. Doubtfire\",\n/// ])?;\n/// let pre = Prefilter::from_hirs_prefix(MatchKind::LeftmostFirst, &hirs)\n///     .expect(\"a prefilter\");\n/// let hay = \"Hello Mrs. Doubtfire\";\n/// assert_eq!(\n///     Some(Span::from(6..20)),\n///     pre.find(hay.as_bytes(), Span::from(0..hay.len())),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n309 pub fn from_hirs_prefix<H: Borrow<Hir>>(\n310     kind: MatchKind,\n311     hirs: &[H],\n312 ) -> Option<Prefilter> {\n313     prefixes(kind, hirs)\n314         .literals()\n315         .and_then(|lits| Prefilter::new(kind, lits))\n316 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}