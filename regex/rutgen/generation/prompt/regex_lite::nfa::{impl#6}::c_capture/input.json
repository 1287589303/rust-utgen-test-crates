{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/nfa.rs\n// crate name is regex_lite\npub(crate) type StateID = u32;\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, u32>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, u32>;\nuse core::{cell::RefCell, mem::size_of};\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::{\n    error::Error, hir::{self, Hir, HirKind},\n    int::U32,\n};\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n}\n#[derive(Debug)]\nstruct Compiler {\n    config: Config,\n    nfa: RefCell<NFA>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\n#[derive(Clone)]\npub(crate) struct NFA {\n    /// The pattern string this NFA was generated from.\n    ///\n    /// We put it here for lack of a better place to put it. ¯\\_(ツ)_/¯\n    pattern: String,\n    /// The states that make up this NFA.\n    states: Vec<State>,\n    /// The ID of the start state.\n    start: StateID,\n    /// Whether this NFA can only match at the beginning of a haystack.\n    is_start_anchored: bool,\n    /// Whether this NFA can match the empty string.\n    is_match_empty: bool,\n    /// If every match has the same number of matching capture groups, then\n    /// this corresponds to the number of groups.\n    static_explicit_captures_len: Option<usize>,\n    /// A map from capture group name to its corresponding index.\n    cap_name_to_index: CaptureNameMap,\n    /// A map from capture group index to the corresponding name, if one\n    /// exists.\n    cap_index_to_name: Vec<Option<Arc<str>>>,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\nstruct ThompsonRef {\n    start: StateID,\n    end: StateID,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Eq, PartialEq)]\npub(crate) enum State {\n    Char { target: StateID, ch: char },\n    Ranges { target: StateID, ranges: Vec<(char, char)> },\n    Splits { targets: Vec<StateID>, reverse: bool },\n    Goto { target: StateID, look: Option<hir::Look> },\n    Capture { target: StateID, slot: u32 },\n    Fail,\n    Match,\n}\nimpl Compiler {\n    fn new(config: Config, pattern: String) -> Compiler {}\n    fn compile(self, hir: &Hir) -> Result<NFA, Error> {}\n    fn c(&self, hir: &Hir) -> Result<ThompsonRef, Error> {\n        match *hir.kind() {\n            HirKind::Empty => self.c_empty(),\n            HirKind::Char(ch) => self.c_char(ch),\n            HirKind::Class(ref class) => self.c_class(class),\n            HirKind::Look(ref look) => self.c_look(look),\n            HirKind::Repetition(ref rep) => self.c_repetition(rep),\n            HirKind::Capture(ref cap) => {\n                self.c_capture(cap.index, cap.name.as_deref(), &cap.sub)\n            }\n            HirKind::Concat(ref subs) => self.c_concat(subs.iter().map(|s| self.c(s))),\n            HirKind::Alternation(ref subs) => {\n                self.c_alternation(subs.iter().map(|s| self.c(s)))\n            }\n        }\n    }\n    fn c_fail(&self) -> Result<ThompsonRef, Error> {}\n    fn c_empty(&self) -> Result<ThompsonRef, Error> {}\n    fn c_char(&self, ch: char) -> Result<ThompsonRef, Error> {}\n    fn c_class(&self, class: &hir::Class) -> Result<ThompsonRef, Error> {}\n    fn c_look(&self, look: &hir::Look) -> Result<ThompsonRef, Error> {}\n    fn c_repetition(&self, rep: &hir::Repetition) -> Result<ThompsonRef, Error> {}\n    fn c_bounded(\n        &self,\n        hir: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> Result<ThompsonRef, Error> {}\n    fn c_at_least(&self, hir: &Hir, greedy: bool, n: u32) -> Result<ThompsonRef, Error> {}\n    fn c_zero_or_one(&self, hir: &Hir, greedy: bool) -> Result<ThompsonRef, Error> {}\n    fn c_exactly(&self, hir: &Hir, n: u32) -> Result<ThompsonRef, Error> {}\n    fn c_capture(\n        &self,\n        index: u32,\n        name: Option<&str>,\n        hir: &Hir,\n    ) -> Result<ThompsonRef, Error> {\n        let existing_groups_len = self.nfa.borrow().cap_index_to_name.len();\n        for _ in 0..(index.as_usize().saturating_sub(existing_groups_len)) {\n            self.nfa.borrow_mut().cap_index_to_name.push(None);\n        }\n        if index.as_usize() >= existing_groups_len {\n            if let Some(name) = name {\n                let name = Arc::from(name);\n                let mut nfa = self.nfa.borrow_mut();\n                nfa.cap_name_to_index.insert(Arc::clone(&name), index);\n                nfa.cap_index_to_name.push(Some(Arc::clone(&name)));\n                nfa.memory_extra += name.len() + size_of::<u32>();\n            } else {\n                self.nfa.borrow_mut().cap_index_to_name.push(None);\n            }\n        }\n        let Some(slot) = index.checked_mul(2) else {\n            return Err(Error::new(\"capture group slots exhausted\"));\n        };\n        let start = self.add(State::Capture { target: 0, slot })?;\n        let inner = self.c(hir)?;\n        let Some(slot) = slot.checked_add(1) else {\n            return Err(Error::new(\"capture group slots exhausted\"));\n        };\n        let end = self.add(State::Capture { target: 0, slot })?;\n        self.patch(start, inner.start)?;\n        self.patch(inner.end, end)?;\n        Ok(ThompsonRef { start, end })\n    }\n    fn c_concat<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn c_alternation<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn add_empty(&self) -> Result<StateID, Error> {}\n    fn add(&self, state: State) -> Result<StateID, Error> {\n        let id = u32::try_from(self.nfa.borrow().states.len())\n            .map_err(|_| Error::new(\"exhausted state IDs, too many states\"))?;\n        self.nfa.borrow_mut().memory_extra += state.memory_usage();\n        self.nfa.borrow_mut().states.push(state);\n        self.check_size_limit()?;\n        Ok(id)\n    }\n    fn patch(&self, from: StateID, to: StateID) -> Result<(), Error> {\n        let mut new_memory_extra = self.nfa.borrow().memory_extra;\n        match self.nfa.borrow_mut().states[from.as_usize()] {\n            State::Char { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Ranges { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Splits { ref mut targets, .. } => {\n                targets.push(to);\n                new_memory_extra += size_of::<StateID>();\n            }\n            State::Goto { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Capture { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Fail | State::Match => {}\n        }\n        if new_memory_extra != self.nfa.borrow().memory_extra {\n            self.nfa.borrow_mut().memory_extra = new_memory_extra;\n            self.check_size_limit()?;\n        }\n        Ok(())\n    }\n    fn check_size_limit(&self) -> Result<(), Error> {}\n}\nimpl Error {\n    pub(crate) fn new(msg: &'static str) -> Error {\n        Error { msg }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compile the given expression and insert capturing states at the\n/// beginning and end of it. The slot for the capture states is computed\n/// from the index.\n534 fn c_capture(\n535     &self,\n536     index: u32,\n537     name: Option<&str>,\n538     hir: &Hir,\n539 ) -> Result<ThompsonRef, Error> {\n540     // For discontiguous indices, push placeholders for earlier capture\n541     // groups that weren't explicitly added. This can happen, for example,\n542     // with patterns like '(a){0}(a)' where '(a){0}' is completely removed\n543     // from the pattern.\n544     let existing_groups_len = self.nfa.borrow().cap_index_to_name.len();\n545     for _ in 0..(index.as_usize().saturating_sub(existing_groups_len)) {\n546         self.nfa.borrow_mut().cap_index_to_name.push(None);\n547     }\n548     if index.as_usize() >= existing_groups_len {\n549         if let Some(name) = name {\n550             let name = Arc::from(name);\n551             let mut nfa = self.nfa.borrow_mut();\n552             nfa.cap_name_to_index.insert(Arc::clone(&name), index);\n553             nfa.cap_index_to_name.push(Some(Arc::clone(&name)));\n554             // This is an approximation.\n555             nfa.memory_extra += name.len() + size_of::<u32>();\n556         } else {\n557             self.nfa.borrow_mut().cap_index_to_name.push(None);\n558         }\n559     }\n560 \n561     let Some(slot) = index.checked_mul(2) else {\n562         return Err(Error::new(\"capture group slots exhausted\"));\n563     };\n564     let start = self.add(State::Capture { target: 0, slot })?;\n565     let inner = self.c(hir)?;\n566     let Some(slot) = slot.checked_add(1) else {\n567         return Err(Error::new(\"capture group slots exhausted\"));\n568     };\n569     let end = self.add(State::Capture { target: 0, slot })?;\n570     self.patch(start, inner.start)?;\n571     self.patch(inner.end, end)?;\n572 \n573     Ok(ThompsonRef { start, end })\n574 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}