{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/reverse_inner.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse regex_syntax::hir::{self, literal, Hir, HirKind};\nuse crate::{util::prefilter::Prefilter, MatchKind};\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\nfn prefilter(hir: &Hir) -> Option<Prefilter> {\n    let mut extractor = literal::Extractor::new();\n    extractor.kind(literal::ExtractKind::Prefix);\n    let mut prefixes = extractor.extract(hir);\n    debug!(\n        \"inner prefixes (len={:?}) extracted before optimization: {:?}\", prefixes.len(),\n        prefixes\n    );\n    prefixes.make_inexact();\n    prefixes.optimize_for_prefix_by_preference();\n    debug!(\n        \"inner prefixes (len={:?}) extracted after optimization: {:?}\", prefixes.len(),\n        prefixes\n    );\n    prefixes.literals().and_then(|lits| Prefilter::new(MatchKind::LeftmostFirst, lits))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Attempt to extract a prefilter from an HIR expression.\n///\n/// We do a little massaging here to do our best that the prefilter we get out\n/// of this is *probably* fast. Basically, the false positive rate has a much\n/// higher impact for things like the reverse inner optimization because more\n/// work needs to potentially be done for each candidate match.\n///\n/// Note that this assumes leftmost-first match semantics, so callers must\n/// not call this otherwise.\n127 fn prefilter(hir: &Hir) -> Option<Prefilter> {\n128     let mut extractor = literal::Extractor::new();\n129     extractor.kind(literal::ExtractKind::Prefix);\n130     let mut prefixes = extractor.extract(hir);\n131     debug!(\n132         \"inner prefixes (len={:?}) extracted before optimization: {:?}\",\n133         prefixes.len(),\n134         prefixes\n135     );\n136     // Since these are inner literals, we know they cannot be exact. But the\n137     // extractor doesn't know this. We mark them as inexact because this might\n138     // impact literal optimization. Namely, optimization weights \"all literals\n139     // are exact\" as very high, because it presumes that any match results in\n140     // an overall match. But of course, that is not the case here.\n141     //\n142     // In practice, this avoids plucking out a ASCII-only \\s as an alternation\n143     // of single-byte whitespace characters.\n144     prefixes.make_inexact();\n145     prefixes.optimize_for_prefix_by_preference();\n146     debug!(\n147         \"inner prefixes (len={:?}) extracted after optimization: {:?}\",\n148         prefixes.len(),\n149         prefixes\n150     );\n151     prefixes\n152         .literals()\n153         .and_then(|lits| Prefilter::new(MatchKind::LeftmostFirst, lits))\n154 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}