{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/reverse_inner.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse regex_syntax::hir::{self, literal, Hir, HirKind};\nuse crate::{util::prefilter::Prefilter, MatchKind};\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\nfn prefilter(hir: &Hir) -> Option<Prefilter> {\n    let mut extractor = literal::Extractor::new();\n    extractor.kind(literal::ExtractKind::Prefix);\n    let mut prefixes = extractor.extract(hir);\n    debug!(\n        \"inner prefixes (len={:?}) extracted before optimization: {:?}\", prefixes.len(),\n        prefixes\n    );\n    prefixes.make_inexact();\n    prefixes.optimize_for_prefix_by_preference();\n    debug!(\n        \"inner prefixes (len={:?}) extracted after optimization: {:?}\", prefixes.len(),\n        prefixes\n    );\n    prefixes.literals().and_then(|lits| Prefilter::new(MatchKind::LeftmostFirst, lits))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Attempt to extract a prefilter from an HIR expression.\n///\n/// We do a little massaging here to do our best that the prefilter we get out\n/// of this is *probably* fast. Basically, the false positive rate has a much\n/// higher impact for things like the reverse inner optimization because more\n/// work needs to potentially be done for each candidate match.\n///\n/// Note that this assumes leftmost-first match semantics, so callers must\n/// not call this otherwise.\n127 fn prefilter(hir: &Hir) -> Option<Prefilter> {\n128     let mut extractor = literal::Extractor::new();\n129     extractor.kind(literal::ExtractKind::Prefix);\n130     let mut prefixes = extractor.extract(hir);\n131     debug!(\n132         \"inner prefixes (len={:?}) extracted before optimization: {:?}\",\n133         prefixes.len(),\n134         prefixes\n135     );\n136     // Since these are inner literals, we know they cannot be exact. But the\n137     // extractor doesn't know this. We mark them as inexact because this might\n138     // impact literal optimization. Namely, optimization weights \"all literals\n139     // are exact\" as very high, because it presumes that any match results in\n140     // an overall match. But of course, that is not the case here.\n141     //\n142     // In practice, this avoids plucking out a ASCII-only \\s as an alternation\n143     // of single-byte whitespace characters.\n144     prefixes.make_inexact();\n145     prefixes.optimize_for_prefix_by_preference();\n146     debug!(\n147         \"inner prefixes (len={:?}) extracted after optimization: {:?}\",\n148         prefixes.len(),\n149         prefixes\n150     );\n151     prefixes\n152         .literals()\n153         .and_then(|lits| Prefilter::new(MatchKind::LeftmostFirst, lits))\n154 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}