{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[cfg(feature = \"alloc\")]\n#[derive(Clone, Debug)]\npub struct PatternSetInsertError {\n    attempted: PatternID,\n    capacity: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[cfg(feature = \"alloc\")]\nimpl core::fmt::Display for PatternSetInsertError {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        write!(\n            f,\n            \"failed to insert pattern ID {} into pattern set \\\n             with insufficiet capacity of {}\",\n            self.attempted.as_usize(), self.capacity,\n        )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1345 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1346     write!(\n1347         f,\n1348         \"failed to insert pattern ID {} into pattern set \\\n1349          with insufficiet capacity of {}\",\n1350         self.attempted.as_usize(),\n1351         self.capacity,\n1352     )\n1353 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}