{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/automaton.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::search::PatternSet;\nuse crate::{\n    dfa::search,\n    util::{\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::{Anchored, HalfMatch, Input, MatchError},\n        start,\n    },\n};\npub unsafe trait Automaton {\n    fn next_state(&self, current: StateID, input: u8) -> StateID;\n    unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID;\n    fn next_eoi_state(&self, current: StateID) -> StateID;\n    fn start_state(&self, config: &start::Config) -> Result<StateID, StartError>;\n    fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {\n        let config = start::Config::from_input_reverse(input);\n        self.start_state(&config)\n            .map_err(|err| match err {\n                StartError::Quit { byte } => {\n                    let offset = input.end();\n                    MatchError::quit(byte, offset)\n                }\n                StartError::UnsupportedAnchored { mode } => {\n                    MatchError::unsupported_anchored(mode)\n                }\n            })\n    }\n    #[inline]\n    fn universal_start_state(&self, _mode: Anchored) -> Option<StateID>;\n    fn is_special_state(&self, id: StateID) -> bool;\n    fn is_dead_state(&self, id: StateID) -> bool;\n    fn is_quit_state(&self, id: StateID) -> bool;\n    fn is_match_state(&self, id: StateID) -> bool;\n    fn is_start_state(&self, id: StateID) -> bool;\n    fn is_accel_state(&self, id: StateID) -> bool;\n    fn pattern_len(&self) -> usize;\n    fn match_len(&self, id: StateID) -> usize;\n    fn match_pattern(&self, id: StateID, index: usize) -> PatternID;\n    fn has_empty(&self) -> bool;\n    fn is_utf8(&self) -> bool;\n    fn is_always_start_anchored(&self) -> bool;\n    #[inline]\n    fn accelerator(&self, _id: StateID) -> &[u8];\n    #[inline]\n    fn get_prefilter(&self) -> Option<&Prefilter>;\n    #[inline]\n    fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_overlapping_fwd(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[inline]\n    fn try_search_overlapping_rev(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    fn try_which_overlapping_matches(\n        &self,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) -> Result<(), MatchError>;\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum StartError {\n    /// An error that occurs when a starting configuration's look-behind byte\n    /// is in this DFA's quit set.\n    Quit {\n        /// The quit byte that was found.\n        byte: u8,\n    },\n    /// An error that occurs when the caller requests an anchored mode that\n    /// isn't supported by the DFA.\n    UnsupportedAnchored {\n        /// The anchored mode given that is unsupported.\n        mode: Anchored,\n    },\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn from_input_forward(input: &Input<'_>) -> Config {}\n    pub fn from_input_reverse(input: &Input<'_>) -> Config {\n        let look_behind = input.haystack().get(input.end()).copied();\n        Config {\n            look_behind,\n            anchored: input.get_anchored(),\n        }\n    }\n    pub fn look_behind(mut self, byte: Option<u8>) -> Config {}\n    pub fn anchored(mut self, mode: Anchored) -> Config {}\n    pub fn get_look_behind(&self) -> Option<u8> {}\n    pub fn get_anchored(&self) -> Anchored {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the ID of the start state for this DFA when executing a reverse\n/// search.\n///\n/// This is a convenience routine for calling [`Automaton::start_state`]\n/// that converts the given [`Input`] to a [start\n/// configuration](start::Config). Additionally, if an error occurs, it is\n/// converted from a [`StartError`] to a [`MatchError`] using the offset\n/// information in the given [`Input`].\n///\n/// # Errors\n///\n/// This may return a [`MatchError`] if the search needs to give up\n/// when determining the start state (for example, if it sees a \"quit\"\n/// byte). This can also return an error if the given `Input` contains an\n/// unsupported [`Anchored`] configuration.\n315 fn start_state_reverse(\n316     &self,\n317     input: &Input<'_>,\n318 ) -> Result<StateID, MatchError> {\n319     let config = start::Config::from_input_reverse(input);\n320     self.start_state(&config).map_err(|err| match err {\n321         StartError::Quit { byte } => {\n322             let offset = input.end();\n323             MatchError::quit(byte, offset)\n324         }\n325         StartError::UnsupportedAnchored { mode } => {\n326             MatchError::unsupported_anchored(mode)\n327         }\n328     })\n329 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}