{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accels<A> {\n    /// A length prefixed slice of contiguous accelerators. See the top comment\n    /// in this module for more details on how we can jump from a DFA's state\n    /// ID to an accelerator in this list.\n    ///\n    /// The first 4 bytes always correspond to the number of accelerators\n    /// that follow.\n    accels: A,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Accels<Vec<AccelTy>> {\n    pub fn empty() -> Accels<Vec<AccelTy>> {}\n    pub fn add(&mut self, accel: Accel) {}\n    fn set_len(&mut self, new_len: usize) {\n        let new_len = AccelTy::try_from(new_len).unwrap();\n        self.accels[0] = new_len;\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the number of accelerators in this sequence, which is encoded in\n/// the first 4 bytes of the underlying bytes.\n165 fn set_len(&mut self, new_len: usize) {\n166     // The only way an accelerator gets added is if a state exists for\n167     // it, and if a state exists, then its index is guaranteed to be\n168     // representable by a AccelTy by virtue of the guarantees provided by\n169     // StateID.\n170     let new_len = AccelTy::try_from(new_len).unwrap();\n171     self.accels[0] = new_len;\n172 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}