{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/reverse_inner.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse regex_syntax::hir::{self, literal, Hir, HirKind};\nuse crate::{util::prefilter::Prefilter, MatchKind};\nfn flatten(hir: &Hir) -> Hir {\n    match hir.kind() {\n        HirKind::Empty => Hir::empty(),\n        HirKind::Literal(hir::Literal(ref x)) => Hir::literal(x.clone()),\n        HirKind::Class(ref x) => Hir::class(x.clone()),\n        HirKind::Look(ref x) => Hir::look(x.clone()),\n        HirKind::Repetition(ref x) => Hir::repetition(x.with(flatten(&x.sub))),\n        HirKind::Capture(hir::Capture { ref sub, .. }) => flatten(sub),\n        HirKind::Alternation(ref xs) => {\n            Hir::alternation(xs.iter().map(|x| flatten(x)).collect())\n        }\n        HirKind::Concat(ref xs) => Hir::concat(xs.iter().map(|x| flatten(x)).collect()),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a copy of the given HIR but with all capturing groups removed.\n203 fn flatten(hir: &Hir) -> Hir {\n204     match hir.kind() {\n205         HirKind::Empty => Hir::empty(),\n206         HirKind::Literal(hir::Literal(ref x)) => Hir::literal(x.clone()),\n207         HirKind::Class(ref x) => Hir::class(x.clone()),\n208         HirKind::Look(ref x) => Hir::look(x.clone()),\n209         HirKind::Repetition(ref x) => Hir::repetition(x.with(flatten(&x.sub))),\n210         // This is the interesting case. We just drop the group information\n211         // entirely and use the child HIR itself.\n212         HirKind::Capture(hir::Capture { ref sub, .. }) => flatten(sub),\n213         HirKind::Alternation(ref xs) => {\n214             Hir::alternation(xs.iter().map(|x| flatten(x)).collect())\n215         }\n216         HirKind::Concat(ref xs) => {\n217             Hir::concat(xs.iter().map(|x| flatten(x)).collect())\n218         }\n219     }\n220 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}