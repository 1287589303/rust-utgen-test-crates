{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/reverse_inner.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse regex_syntax::hir::{self, literal, Hir, HirKind};\nuse crate::{util::prefilter::Prefilter, MatchKind};\nfn flatten(hir: &Hir) -> Hir {\n    match hir.kind() {\n        HirKind::Empty => Hir::empty(),\n        HirKind::Literal(hir::Literal(ref x)) => Hir::literal(x.clone()),\n        HirKind::Class(ref x) => Hir::class(x.clone()),\n        HirKind::Look(ref x) => Hir::look(x.clone()),\n        HirKind::Repetition(ref x) => Hir::repetition(x.with(flatten(&x.sub))),\n        HirKind::Capture(hir::Capture { ref sub, .. }) => flatten(sub),\n        HirKind::Alternation(ref xs) => {\n            Hir::alternation(xs.iter().map(|x| flatten(x)).collect())\n        }\n        HirKind::Concat(ref xs) => Hir::concat(xs.iter().map(|x| flatten(x)).collect()),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a copy of the given HIR but with all capturing groups removed.\n203 fn flatten(hir: &Hir) -> Hir {\n204     match hir.kind() {\n205         HirKind::Empty => Hir::empty(),\n206         HirKind::Literal(hir::Literal(ref x)) => Hir::literal(x.clone()),\n207         HirKind::Class(ref x) => Hir::class(x.clone()),\n208         HirKind::Look(ref x) => Hir::look(x.clone()),\n209         HirKind::Repetition(ref x) => Hir::repetition(x.with(flatten(&x.sub))),\n210         // This is the interesting case. We just drop the group information\n211         // entirely and use the child HIR itself.\n212         HirKind::Capture(hir::Capture { ref sub, .. }) => flatten(sub),\n213         HirKind::Alternation(ref xs) => {\n214             Hir::alternation(xs.iter().map(|x| flatten(x)).collect())\n215         }\n216         HirKind::Concat(ref xs) => {\n217             Hir::concat(xs.iter().map(|x| flatten(x)).collect())\n218         }\n219     }\n220 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}