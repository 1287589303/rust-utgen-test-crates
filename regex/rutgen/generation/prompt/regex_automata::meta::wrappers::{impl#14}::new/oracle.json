{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/wrappers.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError},\n        regex::RegexInfo,\n    },\n    nfa::thompson::{pikevm, NFA},\n    util::{prefilter::Prefilter, primitives::NonMaxUsize},\n    HalfMatch, Input, Match, MatchKind, PatternID, PatternSet,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa;\n#[cfg(feature = \"dfa-onepass\")]\nuse crate::dfa::onepass;\n#[cfg(feature = \"hybrid\")]\nuse crate::hybrid;\n#[cfg(feature = \"nfa-backtrack\")]\nuse crate::nfa::thompson::backtrack;\n#[derive(Debug)]\npub(crate) struct ReverseHybrid(Option<ReverseHybridEngine>);\n#[derive(Debug)]\npub(crate) struct ReverseHybridEngine(\n    #[cfg(feature = \"hybrid\")]\n    hybrid::dfa::DFA,\n    #[cfg(not(feature = \"hybrid\"))]\n    (),\n);\n#[derive(Clone, Debug)]\npub(crate) struct RegexInfo(Arc<RegexInfoI>);\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\nimpl ReverseHybrid {\n    pub(crate) fn none() -> ReverseHybrid {}\n    pub(crate) fn new(info: &RegexInfo, nfarev: &NFA) -> ReverseHybrid {\n        ReverseHybrid(ReverseHybridEngine::new(info, nfarev))\n    }\n    pub(crate) fn create_cache(&self) -> ReverseHybridCache {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn get(&self, _input: &Input<'_>) -> Option<&ReverseHybridEngine> {}\n}\nimpl ReverseHybridEngine {\n    pub(crate) fn new(info: &RegexInfo, nfarev: &NFA) -> Option<ReverseHybridEngine> {\n        #[cfg(feature = \"hybrid\")]\n        {\n            if !info.config().get_hybrid() {\n                return None;\n            }\n            let dfa_config = hybrid::dfa::Config::new()\n                .match_kind(MatchKind::All)\n                .prefilter(None)\n                .starts_for_each_pattern(false)\n                .byte_classes(info.config().get_byte_classes())\n                .unicode_word_boundary(true)\n                .specialize_start_states(false)\n                .cache_capacity(info.config().get_hybrid_cache_capacity())\n                .skip_cache_capacity_check(false)\n                .minimum_cache_clear_count(Some(3))\n                .minimum_bytes_per_state(Some(10));\n            let result = hybrid::dfa::Builder::new()\n                .configure(dfa_config)\n                .build_from_nfa(nfarev.clone());\n            let rev = match result {\n                Ok(rev) => rev,\n                Err(_err) => {\n                    debug!(\"lazy reverse DFA failed to build: {}\", _err);\n                    return None;\n                }\n            };\n            debug!(\"lazy reverse DFA built\");\n            Some(ReverseHybridEngine(rev))\n        }\n        #[cfg(not(feature = \"hybrid\"))] { None }\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_rev_limited(\n        &self,\n        cache: &mut ReverseHybridCache,\n        input: &Input<'_>,\n        min_start: usize,\n    ) -> Result<Option<HalfMatch>, RetryError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1081 pub(crate) fn new(info: &RegexInfo, nfarev: &NFA) -> ReverseHybrid {\n1082     ReverseHybrid(ReverseHybridEngine::new(info, nfarev))\n1083 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}