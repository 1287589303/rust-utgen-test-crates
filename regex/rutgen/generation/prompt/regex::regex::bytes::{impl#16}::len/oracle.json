{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone, Debug)]\npub struct CaptureLocations(captures::Captures);\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl CaptureLocations {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.0.group_info().group_len(PatternID::ZERO)\n    }\n    #[inline]\n    pub fn pos(&self, i: usize) -> Option<(usize, usize)> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the total number of capture groups (even if they didn't match).\n/// That is, the length returned is unaffected by the result of a search.\n///\n/// This is always at least `1` since every regex has at least `1`\n/// capturing group that corresponds to the entire match.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// assert_eq!(3, locs.len());\n/// re.captures_read(&mut locs, b\"Bruce Springsteen\").unwrap();\n/// assert_eq!(3, locs.len());\n/// ```\n///\n/// Notice that the length is always at least `1`, regardless of the regex:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let locs = re.capture_locations();\n/// assert_eq!(1, locs.len());\n///\n/// // [a&&b] is a regex that never matches anything.\n/// let re = Regex::new(r\"[a&&b]\").unwrap();\n/// let locs = re.capture_locations();\n/// assert_eq!(1, locs.len());\n/// ```\n2129 pub fn len(&self) -> usize {\n2130     // self.0.group_len() returns 0 if the underlying captures doesn't\n2131     // represent a match, but the behavior guaranteed for this method is\n2132     // that the length doesn't change based on a match or not.\n2133     self.0.group_info().group_len(PatternID::ZERO)\n2134 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}