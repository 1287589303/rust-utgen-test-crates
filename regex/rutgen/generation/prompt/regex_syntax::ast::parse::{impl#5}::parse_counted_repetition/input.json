{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Repetition {\n    /// The span of this operation.\n    pub span: Span,\n    /// The actual operation.\n    pub op: RepetitionOp,\n    /// Whether this operation was applied greedily or not.\n    pub greedy: bool,\n    /// The regular expression under repetition.\n    pub ast: Box<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct RepetitionOp {\n    /// The span of this operator. This includes things like `+`, `*?` and\n    /// `{m,n}`.\n    pub span: Span,\n    /// The type of operation.\n    pub kind: RepetitionKind,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Concat {\n    /// The span of this concatenation.\n    pub span: Span,\n    /// The concatenation regular expressions.\n    pub asts: Vec<Ast>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Position {\n    /// The absolute offset of this position, starting at `0` from the\n    /// beginning of the regular expression pattern string.\n    pub offset: usize,\n    /// The line number, starting at `1`.\n    pub line: usize,\n    /// The approximate column number, starting at `1`.\n    pub column: usize,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum RepetitionRange {\n    /// `{m}`\n    Exactly(u32),\n    /// `{m,}`\n    AtLeast(u32),\n    /// `{m,n}`\n    Bounded(u32, u32),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Box<Span>),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(Box<SetFlags>),\n    /// A single character literal, which includes escape sequences.\n    Literal(Box<Literal>),\n    /// The \"any character\" class.\n    Dot(Box<Span>),\n    /// A single zero-width assertion.\n    Assertion(Box<Assertion>),\n    /// A single Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    ClassUnicode(Box<ClassUnicode>),\n    /// A single perl character class, e.g., `\\d` or `\\W`.\n    ClassPerl(Box<ClassPerl>),\n    /// A single bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    ClassBracketed(Box<ClassBracketed>),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Box<Repetition>),\n    /// A grouped regular expression.\n    Group(Box<Group>),\n    /// An alternation of regular expressions.\n    Alternation(Box<Alternation>),\n    /// A concatenation of regular expressions.\n    Concat(Box<Concat>),\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ErrorKind {\n    /// The capturing group limit was exceeded.\n    ///\n    /// Note that this represents a limit on the total number of capturing\n    /// groups in a regex and not necessarily the number of nested capturing\n    /// groups. That is, the nest limit can be low and it is still possible for\n    /// this error to occur.\n    CaptureLimitExceeded,\n    /// An invalid escape sequence was found in a character class set.\n    ClassEscapeInvalid,\n    /// An invalid character class range was found. An invalid range is any\n    /// range where the start is greater than the end.\n    ClassRangeInvalid,\n    /// An invalid range boundary was found in a character class. Range\n    /// boundaries must be a single literal codepoint, but this error indicates\n    /// that something else was found, such as a nested class.\n    ClassRangeLiteral,\n    /// An opening `[` was found with no corresponding closing `]`.\n    ClassUnclosed,\n    /// Note that this error variant is no longer used. Namely, a decimal\n    /// number can only appear as a repetition quantifier. When the number\n    /// in a repetition quantifier is empty, then it gets its own specialized\n    /// error, `RepetitionCountDecimalEmpty`.\n    DecimalEmpty,\n    /// An invalid decimal number was given where one was expected.\n    DecimalInvalid,\n    /// A bracketed hex literal was empty.\n    EscapeHexEmpty,\n    /// A bracketed hex literal did not correspond to a Unicode scalar value.\n    EscapeHexInvalid,\n    /// An invalid hexadecimal digit was found.\n    EscapeHexInvalidDigit,\n    /// EOF was found before an escape sequence was completed.\n    EscapeUnexpectedEof,\n    /// An unrecognized escape sequence.\n    EscapeUnrecognized,\n    /// A dangling negation was used when setting flags, e.g., `i-`.\n    FlagDanglingNegation,\n    /// A flag was used twice, e.g., `i-i`.\n    FlagDuplicate {\n        /// The position of the original flag. The error position\n        /// points to the duplicate flag.\n        original: Span,\n    },\n    /// The negation operator was used twice, e.g., `-i-s`.\n    FlagRepeatedNegation {\n        /// The position of the original negation operator. The error position\n        /// points to the duplicate negation operator.\n        original: Span,\n    },\n    /// Expected a flag but got EOF, e.g., `(?`.\n    FlagUnexpectedEof,\n    /// Unrecognized flag, e.g., `a`.\n    FlagUnrecognized,\n    /// A duplicate capture name was found.\n    GroupNameDuplicate {\n        /// The position of the initial occurrence of the capture name. The\n        /// error position itself points to the duplicate occurrence.\n        original: Span,\n    },\n    /// A capture group name is empty, e.g., `(?P<>abc)`.\n    GroupNameEmpty,\n    /// An invalid character was seen for a capture group name. This includes\n    /// errors where the first character is a digit (even though subsequent\n    /// characters are allowed to be digits).\n    GroupNameInvalid,\n    /// A closing `>` could not be found for a capture group name.\n    GroupNameUnexpectedEof,\n    /// An unclosed group, e.g., `(ab`.\n    ///\n    /// The span of this error corresponds to the unclosed parenthesis.\n    GroupUnclosed,\n    /// An unopened group, e.g., `ab)`.\n    GroupUnopened,\n    /// The nest limit was exceeded. The limit stored here is the limit\n    /// configured in the parser.\n    NestLimitExceeded(u32),\n    /// The range provided in a counted repetition operator is invalid. The\n    /// range is invalid if the start is greater than the end.\n    RepetitionCountInvalid,\n    /// An opening `{` was not followed by a valid decimal value.\n    /// For example, `x{}` or `x{]}` would fail.\n    RepetitionCountDecimalEmpty,\n    /// An opening `{` was found with no corresponding closing `}`.\n    RepetitionCountUnclosed,\n    /// A repetition operator was applied to a missing sub-expression. This\n    /// occurs, for example, in the regex consisting of just a `*` or even\n    /// `(?i)*`. It is, however, possible to create a repetition operating on\n    /// an empty sub-expression. For example, `()*` is still considered valid.\n    RepetitionMissing,\n    /// The special word boundary syntax, `\\b{something}`, was used, but\n    /// either EOF without `}` was seen, or an invalid character in the\n    /// braces was seen.\n    SpecialWordBoundaryUnclosed,\n    /// The special word boundary syntax, `\\b{something}`, was used, but\n    /// `something` was not recognized as a valid word boundary kind.\n    SpecialWordBoundaryUnrecognized,\n    /// The syntax `\\b{` was observed, but afterwards the end of the pattern\n    /// was observed without being able to tell whether it was meant to be a\n    /// bounded repetition on the `\\b` or the beginning of a special word\n    /// boundary assertion.\n    SpecialWordOrRepetitionUnexpectedEof,\n    /// The Unicode class is not valid. This typically occurs when a `\\p` is\n    /// followed by something other than a `{`.\n    UnicodeClassInvalid,\n    /// When octal support is disabled, this error is produced when an octal\n    /// escape is used. The octal escape is assumed to be an invocation of\n    /// a backreference, which is the common case.\n    UnsupportedBackreference,\n    /// When syntax similar to PCRE's look-around is used, this error is\n    /// returned. Some example syntaxes that are rejected include, but are\n    /// not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and\n    /// `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this\n    /// error is used to improve the user experience.\n    UnsupportedLookAround,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum RepetitionKind {\n    /// `?`\n    ZeroOrOne,\n    /// `*`\n    ZeroOrMore,\n    /// `+`\n    OneOrMore,\n    /// `{m,n}`\n    Range(RepetitionRange),\n}\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    fn parse(&self) -> Result<Ast> {}\n    fn parse_with_comments(&self) -> Result<ast::WithComments> {}\n    #[inline(never)]\n    fn parse_uncounted_repetition(\n        &self,\n        mut concat: ast::Concat,\n        kind: ast::RepetitionKind,\n    ) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn parse_counted_repetition(&self, mut concat: ast::Concat) -> Result<ast::Concat> {\n        assert!(self.char() == '{');\n        let start = self.pos();\n        let ast = match concat.asts.pop() {\n            Some(ast) => ast,\n            None => {\n                return Err(self.error(self.span(), ast::ErrorKind::RepetitionMissing));\n            }\n        };\n        match ast {\n            Ast::Empty(_) | Ast::Flags(_) => {\n                return Err(self.error(self.span(), ast::ErrorKind::RepetitionMissing));\n            }\n            _ => {}\n        }\n        if !self.bump_and_bump_space() {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::RepetitionCountUnclosed,\n                    ),\n            );\n        }\n        let count_start = specialize_err(\n            self.parse_decimal(),\n            ast::ErrorKind::DecimalEmpty,\n            ast::ErrorKind::RepetitionCountDecimalEmpty,\n        );\n        if self.is_eof() {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::RepetitionCountUnclosed,\n                    ),\n            );\n        }\n        let range = if self.char() == ',' {\n            if !self.bump_and_bump_space() {\n                return Err(\n                    self\n                        .error(\n                            Span::new(start, self.pos()),\n                            ast::ErrorKind::RepetitionCountUnclosed,\n                        ),\n                );\n            }\n            if self.char() != '}' {\n                let count_start = match count_start {\n                    Ok(c) => c,\n                    Err(\n                        err,\n                    ) if err.kind == ast::ErrorKind::RepetitionCountDecimalEmpty => {\n                        if self.parser().empty_min_range {\n                            0\n                        } else {\n                            return Err(err);\n                        }\n                    }\n                    err => err?,\n                };\n                let count_end = specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?;\n                ast::RepetitionRange::Bounded(count_start, count_end)\n            } else {\n                ast::RepetitionRange::AtLeast(count_start?)\n            }\n        } else {\n            ast::RepetitionRange::Exactly(count_start?)\n        };\n        if self.is_eof() || self.char() != '}' {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::RepetitionCountUnclosed,\n                    ),\n            );\n        }\n        let mut greedy = true;\n        if self.bump_and_bump_space() && self.char() == '?' {\n            greedy = false;\n            self.bump();\n        }\n        let op_span = Span::new(start, self.pos());\n        if !range.is_valid() {\n            return Err(self.error(op_span, ast::ErrorKind::RepetitionCountInvalid));\n        }\n        concat\n            .asts\n            .push(\n                Ast::repetition(ast::Repetition {\n                    span: ast.span().with_end(self.pos()),\n                    op: ast::RepetitionOp {\n                        span: op_span,\n                        kind: ast::RepetitionKind::Range(range),\n                    },\n                    greedy,\n                    ast: Box::new(ast),\n                }),\n            );\n        Ok(concat)\n    }\n    #[inline(never)]\n    fn parse_group(&self) -> Result<Either<ast::SetFlags, ast::Group>> {}\n    #[inline(never)]\n    fn parse_capture_name(&self, capture_index: u32) -> Result<ast::CaptureName> {}\n    #[inline(never)]\n    fn parse_flags(&self) -> Result<ast::Flags> {}\n    #[inline(never)]\n    fn parse_flag(&self) -> Result<ast::Flag> {}\n    fn parse_primitive(&self) -> Result<Primitive> {}\n    #[inline(never)]\n    fn parse_escape(&self) -> Result<Primitive> {}\n    fn maybe_parse_special_word_boundary(\n        &self,\n        wb_start: Position,\n    ) -> Result<Option<ast::AssertionKind>> {}\n    #[inline(never)]\n    fn parse_octal(&self) -> ast::Literal {}\n    #[inline(never)]\n    fn parse_hex(&self) -> Result<ast::Literal> {}\n    #[inline(never)]\n    fn parse_hex_digits(&self, kind: ast::HexLiteralKind) -> Result<ast::Literal> {}\n    #[inline(never)]\n    fn parse_hex_brace(&self, kind: ast::HexLiteralKind) -> Result<ast::Literal> {}\n    fn parse_decimal(&self) -> Result<u32> {\n        let mut scratch = self.parser().scratch.borrow_mut();\n        scratch.clear();\n        while !self.is_eof() && self.char().is_whitespace() {\n            self.bump();\n        }\n        let start = self.pos();\n        while !self.is_eof() && '0' <= self.char() && self.char() <= '9' {\n            scratch.push(self.char());\n            self.bump_and_bump_space();\n        }\n        let span = Span::new(start, self.pos());\n        while !self.is_eof() && self.char().is_whitespace() {\n            self.bump_and_bump_space();\n        }\n        let digits = scratch.as_str();\n        if digits.is_empty() {\n            return Err(self.error(span, ast::ErrorKind::DecimalEmpty));\n        }\n        match u32::from_str_radix(digits, 10).ok() {\n            Some(n) => Ok(n),\n            None => Err(self.error(span, ast::ErrorKind::DecimalInvalid)),\n        }\n    }\n    #[inline(never)]\n    fn parse_set_class(&self) -> Result<ast::ClassBracketed> {}\n    #[inline(never)]\n    fn parse_set_class_range(&self) -> Result<ast::ClassSetItem> {}\n    #[inline(never)]\n    fn parse_set_class_item(&self) -> Result<Primitive> {}\n    #[inline(never)]\n    fn parse_set_class_open(&self) -> Result<(ast::ClassBracketed, ast::ClassSetUnion)> {}\n    #[inline(never)]\n    fn maybe_parse_ascii_class(&self) -> Option<ast::ClassAscii> {}\n    #[inline(never)]\n    fn parse_unicode_class(&self) -> Result<ast::ClassUnicode> {}\n    #[inline(never)]\n    fn parse_perl_class(&self) -> ast::ClassPerl {}\n}\nimpl RepetitionRange {\n    pub fn is_valid(&self) -> bool {\n        match *self {\n            RepetitionRange::Bounded(s, e) if s > e => false,\n            _ => true,\n        }\n    }\n}\nimpl Ast {\n    pub fn empty(span: Span) -> Ast {}\n    pub fn flags(e: SetFlags) -> Ast {}\n    pub fn literal(e: Literal) -> Ast {}\n    pub fn dot(span: Span) -> Ast {}\n    pub fn assertion(e: Assertion) -> Ast {}\n    pub fn class_unicode(e: ClassUnicode) -> Ast {}\n    pub fn class_perl(e: ClassPerl) -> Ast {}\n    pub fn class_bracketed(e: ClassBracketed) -> Ast {}\n    pub fn repetition(e: Repetition) -> Ast {\n        Ast::Repetition(Box::new(e))\n    }\n    pub fn group(e: Group) -> Ast {}\n    pub fn alternation(e: Alternation) -> Ast {}\n    pub fn concat(e: Concat) -> Ast {}\n    pub fn span(&self) -> &Span {\n        match *self {\n            Ast::Empty(ref span) => span,\n            Ast::Flags(ref x) => &x.span,\n            Ast::Literal(ref x) => &x.span,\n            Ast::Dot(ref span) => span,\n            Ast::Assertion(ref x) => &x.span,\n            Ast::ClassUnicode(ref x) => &x.span,\n            Ast::ClassPerl(ref x) => &x.span,\n            Ast::ClassBracketed(ref x) => &x.span,\n            Ast::Repetition(ref x) => &x.span,\n            Ast::Group(ref x) => &x.span,\n            Ast::Alternation(ref x) => &x.span,\n            Ast::Concat(ref x) => &x.span,\n        }\n    }\n    pub fn is_empty(&self) -> bool {}\n    fn has_subexprs(&self) -> bool {}\n}\nimpl Span {\n    pub fn new(start: Position, end: Position) -> Span {\n        Span { start, end }\n    }\n    pub fn splat(pos: Position) -> Span {}\n    pub fn with_start(self, pos: Position) -> Span {}\n    pub fn with_end(self, pos: Position) -> Span {\n        Span { end: pos, ..self }\n    }\n    pub fn is_one_line(&self) -> bool {}\n    pub fn is_empty(&self) -> bool {}\n}\nfn specialize_err<T>(\n    result: Result<T>,\n    from: ast::ErrorKind,\n    to: ast::ErrorKind,\n) -> Result<T> {\n    if let Err(e) = result {\n        if e.kind == from {\n            Err(ast::Error {\n                kind: to,\n                pattern: e.pattern,\n                span: e.span,\n            })\n        } else {\n            Err(e)\n        }\n    } else {\n        result\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parses a counted repetition operation. A counted repetition operator\n/// corresponds to the {m,n} syntax, and does not include the ?, * or +\n/// operators.\n///\n/// This assumes that the parser is currently positioned at the opening `{`\n/// and advances the parser to the first character after the operator.\n/// (Note that the operator may include a single additional `?`, which\n/// makes the operator ungreedy.)\n///\n/// The caller should include the concatenation that is being built. The\n/// concatenation returned includes the repetition operator applied to the\n/// last expression in the given concatenation.\n1103 fn parse_counted_repetition(\n1104     &self,\n1105     mut concat: ast::Concat,\n1106 ) -> Result<ast::Concat> {\n1107     assert!(self.char() == '{');\n1108     let start = self.pos();\n1109     let ast = match concat.asts.pop() {\n1110         Some(ast) => ast,\n1111         None => {\n1112             return Err(\n1113                 self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n1114             )\n1115         }\n1116     };\n1117     match ast {\n1118         Ast::Empty(_) | Ast::Flags(_) => {\n1119             return Err(\n1120                 self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n1121             )\n1122         }\n1123         _ => {}\n1124     }\n1125     if !self.bump_and_bump_space() {\n1126         return Err(self.error(\n1127             Span::new(start, self.pos()),\n1128             ast::ErrorKind::RepetitionCountUnclosed,\n1129         ));\n1130     }\n1131     let count_start = specialize_err(\n1132         self.parse_decimal(),\n1133         ast::ErrorKind::DecimalEmpty,\n1134         ast::ErrorKind::RepetitionCountDecimalEmpty,\n1135     );\n1136     if self.is_eof() {\n1137         return Err(self.error(\n1138             Span::new(start, self.pos()),\n1139             ast::ErrorKind::RepetitionCountUnclosed,\n1140         ));\n1141     }\n1142     let range = if self.char() == ',' {\n1143         if !self.bump_and_bump_space() {\n1144             return Err(self.error(\n1145                 Span::new(start, self.pos()),\n1146                 ast::ErrorKind::RepetitionCountUnclosed,\n1147             ));\n1148         }\n1149         if self.char() != '}' {\n1150             let count_start = match count_start {\n1151                 Ok(c) => c,\n1152                 Err(err)\n1153                     if err.kind\n1154                         == ast::ErrorKind::RepetitionCountDecimalEmpty =>\n1155                 {\n1156                     if self.parser().empty_min_range {\n1157                         0\n1158                     } else {\n1159                         return Err(err);\n1160                     }\n1161                 }\n1162                 err => err?,\n1163             };\n1164             let count_end = specialize_err(\n1165                 self.parse_decimal(),\n1166                 ast::ErrorKind::DecimalEmpty,\n1167                 ast::ErrorKind::RepetitionCountDecimalEmpty,\n1168             )?;\n1169             ast::RepetitionRange::Bounded(count_start, count_end)\n1170         } else {\n1171             ast::RepetitionRange::AtLeast(count_start?)\n1172         }\n1173     } else {\n1174         ast::RepetitionRange::Exactly(count_start?)\n1175     };\n1176 \n1177     if self.is_eof() || self.char() != '}' {\n1178         return Err(self.error(\n1179             Span::new(start, self.pos()),\n1180             ast::ErrorKind::RepetitionCountUnclosed,\n1181         ));\n1182     }\n1183 \n1184     let mut greedy = true;\n1185     if self.bump_and_bump_space() && self.char() == '?' {\n1186         greedy = false;\n1187         self.bump();\n1188     }\n1189 \n1190     let op_span = Span::new(start, self.pos());\n1191     if !range.is_valid() {\n1192         return Err(\n1193             self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n1194         );\n1195     }\n1196     concat.asts.push(Ast::repetition(ast::Repetition {\n1197         span: ast.span().with_end(self.pos()),\n1198         op: ast::RepetitionOp {\n1199             span: op_span,\n1200             kind: ast::RepetitionKind::Range(range),\n1201         },\n1202         greedy,\n1203         ast: Box::new(ast),\n1204     }));\n1205     Ok(concat)\n1206 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}