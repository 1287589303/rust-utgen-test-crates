{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h [u8], [&'h [u8]; N]) {\n        let len = self\n            .static_captures_len\n            .expect(\"number of capture groups can vary in a match\")\n            .checked_sub(1)\n            .expect(\"number of groups is always greater than zero\");\n        assert_eq!(N, len, \"asked for {} groups, but must ask for {}\", N, len);\n        self.caps.extract_bytes(self.haystack)\n    }\n    #[inline]\n    pub fn expand(&self, replacement: &[u8], dst: &mut Vec<u8>) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This is a convenience routine for extracting the substrings\n/// corresponding to matching capture groups.\n///\n/// This returns a tuple where the first element corresponds to the full\n/// substring of the haystack that matched the regex. The second element is\n/// an array of substrings, with each corresponding to the substring that\n/// matched for a particular capture group.\n///\n/// # Panics\n///\n/// This panics if the number of possible matching groups in this\n/// `Captures` value is not fixed to `N` in all circumstances.\n/// More precisely, this routine only works when `N` is equivalent to\n/// [`Regex::static_captures_len`].\n///\n/// Stated more plainly, if the number of matching capture groups in a\n/// regex can vary from match to match, then this function always panics.\n///\n/// For example, `(a)(b)|(c)` could produce two matching capture groups\n/// or one matching capture group for any given match. Therefore, one\n/// cannot use `extract` with such a pattern.\n///\n/// But a pattern like `(a)(b)|(c)(d)` can be used with `extract` because\n/// the number of capture groups in every match is always equivalent,\n/// even if the capture _indices_ in each match are not.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\n/// let hay = b\"On 2010-03-14, I became a Tenneessee lamb.\";\n/// let Some((full, [year, month, day])) =\n///     re.captures(hay).map(|caps| caps.extract()) else { return };\n/// assert_eq!(b\"2010-03-14\", full);\n/// assert_eq!(b\"2010\", year);\n/// assert_eq!(b\"03\", month);\n/// assert_eq!(b\"14\", day);\n/// ```\n///\n/// # Example: iteration\n///\n/// This example shows how to use this method when iterating over all\n/// `Captures` matches in a haystack.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\n/// let hay = b\"1973-01-05, 1975-08-25 and 1980-10-18\";\n///\n/// let mut dates: Vec<(&[u8], &[u8], &[u8])> = vec![];\n/// for (_, [y, m, d]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     dates.push((y, m, d));\n/// }\n/// assert_eq!(dates, vec![\n///     (&b\"1973\"[..], &b\"01\"[..], &b\"05\"[..]),\n///     (&b\"1975\"[..], &b\"08\"[..], &b\"25\"[..]),\n///     (&b\"1980\"[..], &b\"10\"[..], &b\"18\"[..]),\n/// ]);\n/// ```\n///\n/// # Example: parsing different formats\n///\n/// This API is particularly useful when you need to extract a particular\n/// value that might occur in a different format. Consider, for example,\n/// an identifier that might be in double quotes or single quotes:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r#\"id:(?:\"([^\"]+)\"|'([^']+)')\"#).unwrap();\n/// let hay = br#\"The first is id:\"foo\" and the second is id:'bar'.\"#;\n/// let mut ids = vec![];\n/// for (_, [id]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     ids.push(id);\n/// }\n/// assert_eq!(ids, vec![b\"foo\", b\"bar\"]);\n/// ```\n1784 pub fn extract<const N: usize>(&self) -> (&'h [u8], [&'h [u8]; N]) {\n1785     let len = self\n1786         .static_captures_len\n1787         .expect(\"number of capture groups can vary in a match\")\n1788         .checked_sub(1)\n1789         .expect(\"number of groups is always greater than zero\");\n1790     assert_eq!(N, len, \"asked for {} groups, but must ask for {}\", N, len);\n1791     // The regex-automata variant of extract is a bit more permissive.\n1792     // It doesn't require the number of matching capturing groups to be\n1793     // static, and you can even request fewer groups than what's there. So\n1794     // this is guaranteed to never panic because we've asserted above that\n1795     // the user has requested precisely the number of groups that must be\n1796     // present in any match for this regex.\n1797     self.caps.extract_bytes(self.haystack)\n1798 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}