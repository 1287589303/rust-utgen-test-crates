{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Debug, Default)]\nstruct GroupInfoInner {\n    slot_ranges: Vec<(SmallIndex, SmallIndex)>,\n    name_to_index: Vec<CaptureNameMap>,\n    index_to_name: Vec<Vec<Option<Arc<str>>>>,\n    memory_extra: usize,\n}\nimpl GroupInfo {\n    pub fn new<P, G, N>(pattern_groups: P) -> Result<GroupInfo, GroupInfoError>\n    where\n        P: IntoIterator<Item = G>,\n        G: IntoIterator<Item = Option<N>>,\n        N: AsRef<str>,\n    {}\n    pub fn empty() -> GroupInfo {}\n    #[inline]\n    pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {}\n    #[inline]\n    pub fn to_name(&self, pid: PatternID, group_index: usize) -> Option<&str> {}\n    #[inline]\n    pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {}\n    #[inline]\n    pub fn all_names(&self) -> GroupInfoAllNames<'_> {}\n    #[inline]\n    pub fn slots(&self, pid: PatternID, group_index: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn slot(&self, pid: PatternID, group_index: usize) -> Option<usize> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn group_len(&self, pid: PatternID) -> usize {}\n    #[inline]\n    pub fn all_group_len(&self) -> usize {}\n    #[inline]\n    pub fn slot_len(&self) -> usize {\n        self.0.small_slot_len().as_usize()\n    }\n    #[inline]\n    pub fn implicit_slot_len(&self) -> usize {\n        self.pattern_len() * 2\n    }\n    #[inline]\n    pub fn explicit_slot_len(&self) -> usize {\n        self.slot_len().saturating_sub(self.implicit_slot_len())\n    }\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the total number of slots for explicit capturing groups.\n///\n/// This is like [`GroupInfo::slot_len`], except it doesn't include the\n/// implicit slots for each pattern. (There are always 2 implicit slots for\n/// each pattern.)\n///\n/// For a non-empty `GroupInfo`, it is always the case that `slot_len` is\n/// strictly greater than `explicit_slot_len`. For an empty `GroupInfo`,\n/// both the total number of slots and the number of explicit slots is\n/// `0`.\n///\n/// # Example\n///\n/// This example shows the relationship between the number of capturing\n/// groups, implicit slots and explicit slots.\n///\n/// ```\n/// use regex_automata::util::captures::GroupInfo;\n///\n/// // There are 11 total groups here.\n/// let info = GroupInfo::new(vec![vec![None, Some(\"foo\"), Some(\"bar\")]])?;\n/// // 2 slots per group gives us 11*2=22 slots.\n/// assert_eq!(6, info.slot_len());\n/// // 2 implicit slots per pattern gives us 2 implicit slots since there\n/// // is 1 pattern.\n/// assert_eq!(2, info.implicit_slot_len());\n/// // 2 explicit capturing groups gives us 2*2=4 explicit slots.\n/// assert_eq!(4, info.explicit_slot_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n2135 pub fn explicit_slot_len(&self) -> usize {\n2136     self.slot_len().saturating_sub(self.implicit_slot_len())\n2137 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}