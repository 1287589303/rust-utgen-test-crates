{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[non_exhaustive]\n#[derive(Clone, PartialEq)]\npub enum Error {\n    /// A syntax error.\n    Syntax(String),\n    /// The compiled program exceeded the set size\n    /// limit. The argument is the size limit imposed by\n    /// [`RegexBuilder::size_limit`](crate::RegexBuilder::size_limit). Even\n    /// when not configured explicitly, it defaults to a reasonable limit.\n    ///\n    /// If you're getting this error, it occurred because your regex has been\n    /// compiled to an intermediate state that is too big. It is important to\n    /// note that exceeding this limit does _not_ mean the regex is too big to\n    /// _work_, but rather, the regex is big enough that it may wind up being\n    /// surprisingly slow when used in a search. In other words, this error is\n    /// meant to be a practical heuristic for avoiding a performance footgun,\n    /// and especially so for the case where the regex pattern is coming from\n    /// an untrusted source.\n    ///\n    /// There are generally two ways to move forward if you hit this error.\n    /// The first is to find some way to use a smaller regex. The second is to\n    /// increase the size limit via `RegexBuilder::size_limit`. However, if\n    /// your regex pattern is not from a trusted source, then neither of these\n    /// approaches may be appropriate. Instead, you'll have to determine just\n    /// how big of a regex you want to allow.\n    CompiledTooBig(usize),\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {\n        RegexBuilder::new(re).build()\n    }\n    #[inline]\n    pub fn is_match(&self, haystack: &[u8]) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h [u8]) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h [u8]) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(\n        &'r self,\n        haystack: &'h [u8],\n    ) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h [u8], limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h [u8], rep: R) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        rep: R,\n    ) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, [u8]> {}\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {\n        RegexBuilder {\n            builder: Builder::new([pattern]),\n        }\n    }\n    pub fn build(&self) -> Result<Regex, Error> {\n        self.builder.build_one_bytes()\n    }\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compiles a regular expression. Once compiled, it can be used repeatedly\n/// to search, split or replace substrings in a haystack.\n///\n/// Note that regex compilation tends to be a somewhat expensive process,\n/// and unlike higher level environments, compilation is not automatically\n/// cached for you. One should endeavor to compile a regex once and then\n/// reuse it. For example, it's a bad idea to compile the same regex\n/// repeatedly in a loop.\n///\n/// # Errors\n///\n/// If an invalid pattern is given, then an error is returned.\n/// An error is also returned if the pattern is valid, but would\n/// produce a regex that is bigger than the configured size limit via\n/// [`RegexBuilder::size_limit`]. (A reasonable size limit is enabled by\n/// default.)\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// // An Invalid pattern because of an unclosed parenthesis\n/// assert!(Regex::new(r\"foo(bar\").is_err());\n/// // An invalid pattern because the regex would be too big\n/// // because Unicode tends to inflate things.\n/// assert!(Regex::new(r\"\\w{1000}\").is_err());\n/// // Disabling Unicode can make the regex much smaller,\n/// // potentially by up to or more than an order of magnitude.\n/// assert!(Regex::new(r\"(?-u:\\w){1000}\").is_ok());\n/// ```\n178 pub fn new(re: &str) -> Result<Regex, Error> {\n179     RegexBuilder::new(re).build()\n180 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}