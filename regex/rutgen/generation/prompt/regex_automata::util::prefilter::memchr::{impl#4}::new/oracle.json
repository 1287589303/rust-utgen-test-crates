{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/memchr.rs\n// crate name is regex_automata\nuse crate::util::{prefilter::PrefilterI, search::{MatchKind, Span}};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub(crate) struct Memchr3(u8, u8, u8);\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Memchr3 {\n    pub(crate) fn new<B: AsRef<[u8]>>(\n        _kind: MatchKind,\n        needles: &[B],\n    ) -> Option<Memchr3> {\n        #[cfg(not(feature = \"perf-literal-substring\"))] { None }\n        #[cfg(feature = \"perf-literal-substring\")]\n        {\n            if needles.len() != 3 {\n                return None;\n            }\n            if !needles.iter().all(|n| n.as_ref().len() == 1) {\n                return None;\n            }\n            let b1 = needles[0].as_ref()[0];\n            let b2 = needles[1].as_ref()[0];\n            let b3 = needles[2].as_ref()[0];\n            Some(Memchr3(b1, b2, b3))\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n130 pub(crate) fn new<B: AsRef<[u8]>>(\n131     _kind: MatchKind,\n132     needles: &[B],\n133 ) -> Option<Memchr3> {\n134     #[cfg(not(feature = \"perf-literal-substring\"))]\n135     {\n136         None\n137     }\n138     #[cfg(feature = \"perf-literal-substring\")]\n139     {\n140         if needles.len() != 3 {\n141             return None;\n142         }\n143         if !needles.iter().all(|n| n.as_ref().len() == 1) {\n144             return None;\n145         }\n146         let b1 = needles[0].as_ref()[0];\n147         let b2 = needles[1].as_ref()[0];\n148         let b3 = needles[2].as_ref()[0];\n149         Some(Memchr3(b1, b2, b3))\n150     }\n151 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}