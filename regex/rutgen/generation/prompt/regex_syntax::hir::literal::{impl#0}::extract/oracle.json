{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Debug)]\npub struct Extractor {\n    kind: ExtractKind,\n    limit_class: usize,\n    limit_repeat: usize,\n    limit_literal_len: usize,\n    limit_total: usize,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Seq {\n    /// The members of this seq.\n    ///\n    /// When `None`, the seq represents all possible literals. That is, it\n    /// prevents one from making assumptions about specific literals in the\n    /// seq, and forces one to treat it as if any literal might be in the seq.\n    ///\n    /// Note that `Some(vec![])` is valid and corresponds to the empty seq of\n    /// literals, i.e., a regex that can never match. For example, `[a&&b]`.\n    /// It is distinct from `Some(vec![\"\"])`, which corresponds to the seq\n    /// containing an empty string, which matches at every position.\n    literals: Option<Vec<Literal>>,\n}\n#[derive(Clone, Eq, PartialEq, PartialOrd, Ord)]\npub struct Literal {\n    bytes: Vec<u8>,\n    exact: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassBytes {\n    set: IntervalSet<ClassBytesRange>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Repetition {\n    /// The minimum range of the repetition.\n    ///\n    /// Note that special cases like `?`, `+` and `*` all get translated into\n    /// the ranges `{0,1}`, `{1,}` and `{0,}`, respectively.\n    ///\n    /// When `min` is zero, this expression can match the empty string\n    /// regardless of what its sub-expression is.\n    pub min: u32,\n    /// The maximum range of the repetition.\n    ///\n    /// Note that when `max` is `None`, `min` acts as a lower bound but where\n    /// there is no upper bound. For something like `x{5}` where the min and\n    /// max are equivalent, `min` will be set to `5` and `max` will be set to\n    /// `Some(5)`.\n    pub max: Option<u32>,\n    /// Whether this repetition operator is greedy or not. A greedy operator\n    /// will match as much as it can. A non-greedy operator will match as\n    /// little as it can.\n    ///\n    /// Typically, operators are greedy by default and are only non-greedy when\n    /// a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is\n    /// not. However, this can be inverted via the `U` \"ungreedy\" flag.\n    pub greedy: bool,\n    /// The expression being repeated.\n    pub sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum ExtractKind {\n    /// Extracts only prefix literals from a regex.\n    Prefix,\n    /// Extracts only suffix literals from a regex.\n    ///\n    /// Note that the sequence returned by suffix literals currently may\n    /// not correctly represent leftmost-first or \"preference\" order match\n    /// semantics.\n    Suffix,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\nimpl Extractor {\n    pub fn new() -> Extractor {}\n    pub fn extract(&self, hir: &Hir) -> Seq {\n        use crate::hir::HirKind::*;\n        match *hir.kind() {\n            Empty | Look(_) => Seq::singleton(self::Literal::exact(vec![])),\n            Literal(hir::Literal(ref bytes)) => {\n                let mut seq = Seq::singleton(self::Literal::exact(bytes.to_vec()));\n                self.enforce_literal_len(&mut seq);\n                seq\n            }\n            Class(hir::Class::Unicode(ref cls)) => self.extract_class_unicode(cls),\n            Class(hir::Class::Bytes(ref cls)) => self.extract_class_bytes(cls),\n            Repetition(ref rep) => self.extract_repetition(rep),\n            Capture(hir::Capture { ref sub, .. }) => self.extract(sub),\n            Concat(ref hirs) => {\n                match self.kind {\n                    ExtractKind::Prefix => self.extract_concat(hirs.iter()),\n                    ExtractKind::Suffix => self.extract_concat(hirs.iter().rev()),\n                }\n            }\n            Alternation(ref hirs) => self.extract_alternation(hirs.iter()),\n        }\n    }\n    pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {}\n    pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_repeat(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_literal_len(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_total(&mut self, limit: usize) -> &mut Extractor {}\n    fn extract_concat<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_alternation<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_repetition(&self, rep: &hir::Repetition) -> Seq {\n        let mut subseq = self.extract(&rep.sub);\n        match *rep {\n            hir::Repetition { min: 0, max, greedy, .. } => {\n                if max != Some(1) {\n                    subseq.make_inexact();\n                }\n                let mut empty = Seq::singleton(Literal::exact(vec![]));\n                if !greedy {\n                    mem::swap(&mut subseq, &mut empty);\n                }\n                self.union(subseq, &mut empty)\n            }\n            hir::Repetition { min, max: Some(max), .. } if min == max => {\n                assert!(min > 0);\n                let limit = u32::try_from(self.limit_repeat).unwrap_or(u32::MAX);\n                let mut seq = Seq::singleton(Literal::exact(vec![]));\n                for _ in 0..cmp::min(min, limit) {\n                    if seq.is_inexact() {\n                        break;\n                    }\n                    seq = self.cross(seq, &mut subseq.clone());\n                }\n                if usize::try_from(min).is_err() || min > limit {\n                    seq.make_inexact();\n                }\n                seq\n            }\n            hir::Repetition { min, .. } => {\n                assert!(min > 0);\n                let limit = u32::try_from(self.limit_repeat).unwrap_or(u32::MAX);\n                let mut seq = Seq::singleton(Literal::exact(vec![]));\n                for _ in 0..cmp::min(min, limit) {\n                    if seq.is_inexact() {\n                        break;\n                    }\n                    seq = self.cross(seq, &mut subseq.clone());\n                }\n                seq.make_inexact();\n                seq\n            }\n        }\n    }\n    fn extract_class_unicode(&self, cls: &hir::ClassUnicode) -> Seq {\n        if self.class_over_limit_unicode(cls) {\n            return Seq::infinite();\n        }\n        let mut seq = Seq::empty();\n        for r in cls.iter() {\n            for ch in r.start()..=r.end() {\n                seq.push(Literal::from(ch));\n            }\n        }\n        self.enforce_literal_len(&mut seq);\n        seq\n    }\n    fn extract_class_bytes(&self, cls: &hir::ClassBytes) -> Seq {\n        if self.class_over_limit_bytes(cls) {\n            return Seq::infinite();\n        }\n        let mut seq = Seq::empty();\n        for r in cls.iter() {\n            for b in r.start()..=r.end() {\n                seq.push(Literal::from(b));\n            }\n        }\n        self.enforce_literal_len(&mut seq);\n        seq\n    }\n    fn class_over_limit_unicode(&self, cls: &hir::ClassUnicode) -> bool {}\n    fn class_over_limit_bytes(&self, cls: &hir::ClassBytes) -> bool {}\n    fn cross(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn enforce_literal_len(&self, seq: &mut Seq) {\n        let len = self.limit_literal_len;\n        match self.kind {\n            ExtractKind::Prefix => seq.keep_first_bytes(len),\n            ExtractKind::Suffix => seq.keep_last_bytes(len),\n        }\n    }\n}\nimpl Hir {\n    pub fn kind(&self) -> &HirKind {\n        &self.kind\n    }\n    pub fn into_kind(mut self) -> HirKind {}\n    pub fn properties(&self) -> &Properties {}\n    fn into_parts(mut self) -> (HirKind, Properties) {}\n}\nimpl Seq {\n    #[inline]\n    pub fn empty() -> Seq {}\n    #[inline]\n    pub fn infinite() -> Seq {}\n    #[inline]\n    pub fn singleton(lit: Literal) -> Seq {\n        Seq { literals: Some(vec![lit]) }\n    }\n    #[inline]\n    pub fn new<I, B>(it: I) -> Seq\n    where\n        I: IntoIterator<Item = B>,\n        B: AsRef<[u8]>,\n    {}\n    #[inline]\n    pub fn literals(&self) -> Option<&[Literal]> {}\n    #[inline]\n    pub fn push(&mut self, lit: Literal) {}\n    #[inline]\n    pub fn make_inexact(&mut self) {}\n    #[inline]\n    pub fn make_infinite(&mut self) {}\n    #[inline]\n    pub fn cross_forward(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn cross_reverse(&mut self, other: &mut Seq) {}\n    fn cross_preamble<'a>(\n        &'a mut self,\n        other: &'a mut Seq,\n    ) -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {}\n    #[inline]\n    pub fn union(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn union_into_empty(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn dedup(&mut self) {}\n    #[inline]\n    pub fn sort(&mut self) {}\n    #[inline]\n    pub fn reverse_literals(&mut self) {}\n    #[inline]\n    pub fn minimize_by_preference(&mut self) {}\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn is_finite(&self) -> bool {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn is_inexact(&self) -> bool {}\n    #[inline]\n    pub fn max_union_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn max_cross_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn min_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn max_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn longest_common_prefix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn longest_common_suffix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn optimize_for_prefix_by_preference(&mut self) {}\n    #[inline]\n    pub fn optimize_for_suffix_by_preference(&mut self) {}\n    fn optimize_by_preference(&mut self, prefix: bool) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Execute the extractor and return a sequence of literals.\n171 pub fn extract(&self, hir: &Hir) -> Seq {\n172     use crate::hir::HirKind::*;\n173 \n174     match *hir.kind() {\n175         Empty | Look(_) => Seq::singleton(self::Literal::exact(vec![])),\n176         Literal(hir::Literal(ref bytes)) => {\n177             let mut seq =\n178                 Seq::singleton(self::Literal::exact(bytes.to_vec()));\n179             self.enforce_literal_len(&mut seq);\n180             seq\n181         }\n182         Class(hir::Class::Unicode(ref cls)) => {\n183             self.extract_class_unicode(cls)\n184         }\n185         Class(hir::Class::Bytes(ref cls)) => self.extract_class_bytes(cls),\n186         Repetition(ref rep) => self.extract_repetition(rep),\n187         Capture(hir::Capture { ref sub, .. }) => self.extract(sub),\n188         Concat(ref hirs) => match self.kind {\n189             ExtractKind::Prefix => self.extract_concat(hirs.iter()),\n190             ExtractKind::Suffix => self.extract_concat(hirs.iter().rev()),\n191         },\n192         Alternation(ref hirs) => {\n193             // Unlike concat, we always union starting from the beginning,\n194             // since the beginning corresponds to the highest preference,\n195             // which doesn't change based on forwards vs reverse.\n196             self.extract_alternation(hirs.iter())\n197         }\n198     }\n199 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}