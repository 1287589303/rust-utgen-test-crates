{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// Scratch space used to store slots during a search. Basically, we use\n    /// the caller provided slots to store slots known when a match occurs.\n    /// But after a match occurs, we might continue a search but ultimately\n    /// fail to extend the match. When continuing the search, we need some\n    /// place to store candidate capture offsets without overwriting the slot\n    /// offsets recorded for the most recently seen match.\n    explicit_slots: Vec<Option<NonMaxUsize>>,\n    /// The number of slots in the caller-provided 'Captures' value for the\n    /// current search. This is always at most 'explicit_slots.len()', but\n    /// might be less than it, if the caller provided fewer slots to fill.\n    explicit_slot_len: usize,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\nimpl Cache {\n    pub fn new(re: &DFA) -> Cache {}\n    pub fn reset(&mut self, re: &DFA) {}\n    pub fn memory_usage(&self) -> usize {\n        self.explicit_slots.len() * core::mem::size_of::<Option<NonMaxUsize>>()\n    }\n    fn explicit_slots(&mut self) -> &mut [Option<NonMaxUsize>] {}\n    fn setup_search(&mut self, explicit_slot_len: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the heap memory usage, in bytes, of this cache.\n///\n/// This does **not** include the stack size used up by this cache. To\n/// compute that, use `std::mem::size_of::<Cache>()`.\n2569 pub fn memory_usage(&self) -> usize {\n2570     self.explicit_slots.len() * core::mem::size_of::<Option<NonMaxUsize>>()\n2571 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}