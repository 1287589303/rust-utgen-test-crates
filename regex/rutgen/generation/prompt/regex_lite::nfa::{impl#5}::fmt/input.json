{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/nfa.rs\n// crate name is regex_lite\npub(crate) type StateID = u32;\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, u32>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, u32>;\nuse core::{cell::RefCell, mem::size_of};\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::{\n    error::Error, hir::{self, Hir, HirKind},\n    int::U32,\n};\n#[derive(Clone, Eq, PartialEq)]\npub(crate) enum State {\n    Char { target: StateID, ch: char },\n    Ranges { target: StateID, ranges: Vec<(char, char)> },\n    Splits { targets: Vec<StateID>, reverse: bool },\n    Goto { target: StateID, look: Option<hir::Look> },\n    Capture { target: StateID, slot: u32 },\n    Fail,\n    Match,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub(crate) enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    Word = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordNegate = 1 << 7,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStart = 1 << 8,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEnd = 1 << 9,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalf = 1 << 10,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalf = 1 << 11,\n}\nimpl core::fmt::Debug for State {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        match *self {\n            State::Char { target, ch } => write!(f, \"{:?} => {:?}\", ch, target),\n            State::Ranges { target, ref ranges } => {\n                for (i, &(start, end)) in ranges.iter().enumerate() {\n                    if i > 0 {\n                        write!(f, \", \")?;\n                    }\n                    write!(f, \"{:?}-{:?} => {:?}\", start, end, target)?;\n                }\n                Ok(())\n            }\n            State::Splits { ref targets, reverse } => {\n                write!(f, \"splits(\")?;\n                for (i, sid) in State::iter_splits(targets, reverse).enumerate() {\n                    if i > 0 {\n                        write!(f, \", \")?;\n                    }\n                    write!(f, \"{:?}\", sid)?;\n                }\n                write!(f, \")\")\n            }\n            State::Goto { target, look: None } => write!(f, \"goto({:?})\", target),\n            State::Goto { target, look: Some(look) } => {\n                write!(f, \"{:?} => {:?}\", look, target)\n            }\n            State::Capture { target, slot } => {\n                write!(f, \"capture(slot={:?}) => {:?}\", slot, target,)\n            }\n            State::Fail => write!(f, \"FAIL\"),\n            State::Match => write!(f, \"MATCH\"),\n        }\n    }\n}\nimpl State {\n    fn memory_usage(&self) -> usize {}\n    pub(crate) fn iter_splits<'a>(\n        splits: &'a [StateID],\n        reverse: bool,\n    ) -> impl Iterator<Item = StateID> + 'a {\n        let mut it = splits.iter();\n        core::iter::from_fn(move || {\n            if reverse { it.next_back() } else { it.next() }.copied()\n        })\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n206 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n207     match *self {\n208         State::Char { target, ch } => {\n209             write!(f, \"{:?} => {:?}\", ch, target)\n210         }\n211         State::Ranges { target, ref ranges } => {\n212             for (i, &(start, end)) in ranges.iter().enumerate() {\n213                 if i > 0 {\n214                     write!(f, \", \")?;\n215                 }\n216                 write!(f, \"{:?}-{:?} => {:?}\", start, end, target)?;\n217             }\n218             Ok(())\n219         }\n220         State::Splits { ref targets, reverse } => {\n221             write!(f, \"splits(\")?;\n222             for (i, sid) in\n223                 State::iter_splits(targets, reverse).enumerate()\n224             {\n225                 if i > 0 {\n226                     write!(f, \", \")?;\n227                 }\n228                 write!(f, \"{:?}\", sid)?;\n229             }\n230             write!(f, \")\")\n231         }\n232         State::Goto { target, look: None } => {\n233             write!(f, \"goto({:?})\", target)\n234         }\n235         State::Goto { target, look: Some(look) } => {\n236             write!(f, \"{:?} => {:?}\", look, target)\n237         }\n238         State::Capture { target, slot } => {\n239             write!(f, \"capture(slot={:?}) => {:?}\", slot, target,)\n240         }\n241         State::Fail => write!(f, \"FAIL\"),\n242         State::Match => {\n243             write!(f, \"MATCH\")\n244         }\n245     }\n246 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}