{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/visitor.rs\n// crate name is regex_syntax\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir, HirKind};\nstruct HeapVisitor<'a> {\n    /// A stack of `Hir` nodes. This is roughly analogous to the call stack\n    /// used in a typical recursive visitor.\n    stack: Vec<(&'a Hir, Frame<'a>)>,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\nenum Frame<'a> {\n    /// A stack frame allocated just before descending into a repetition\n    /// operator's child node.\n    Repetition(&'a hir::Repetition),\n    /// A stack frame allocated just before descending into a capture's child\n    /// node.\n    Capture(&'a hir::Capture),\n    /// The stack frame used while visiting every child node of a concatenation\n    /// of expressions.\n    Concat {\n        /// The child node we are currently visiting.\n        head: &'a Hir,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Hir],\n    },\n    /// The stack frame used while visiting every child node of an alternation\n    /// of expressions.\n    Alternation {\n        /// The child node we are currently visiting.\n        head: &'a Hir,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Hir],\n    },\n}\nenum Frame<'a> {\n    /// A stack frame allocated just before descending into a repetition\n    /// operator's child node.\n    Repetition(&'a ast::Repetition),\n    /// A stack frame allocated just before descending into a group's child\n    /// node.\n    Group(&'a ast::Group),\n    /// The stack frame used while visiting every child node of a concatenation\n    /// of expressions.\n    Concat {\n        /// The child node we are currently visiting.\n        head: &'a Ast,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Ast],\n    },\n    /// The stack frame used while visiting every child node of an alternation\n    /// of expressions.\n    Alternation {\n        /// The child node we are currently visiting.\n        head: &'a Ast,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Ast],\n    },\n}\nimpl<'a> HeapVisitor<'a> {\n    fn new() -> HeapVisitor<'a> {}\n    fn visit<V: Visitor>(\n        &mut self,\n        mut hir: &'a Hir,\n        mut visitor: V,\n    ) -> Result<V::Output, V::Err> {\n        self.stack.clear();\n        visitor.start();\n        loop {\n            visitor.visit_pre(hir)?;\n            if let Some(x) = self.induct(hir) {\n                let child = x.child();\n                self.stack.push((hir, x));\n                hir = child;\n                continue;\n            }\n            visitor.visit_post(hir)?;\n            loop {\n                let (post_hir, frame) = match self.stack.pop() {\n                    None => return visitor.finish(),\n                    Some((post_hir, frame)) => (post_hir, frame),\n                };\n                if let Some(x) = self.pop(frame) {\n                    match x {\n                        Frame::Alternation { .. } => {\n                            visitor.visit_alternation_in()?;\n                        }\n                        Frame::Concat { .. } => {\n                            visitor.visit_concat_in()?;\n                        }\n                        _ => {}\n                    }\n                    hir = x.child();\n                    self.stack.push((post_hir, x));\n                    break;\n                }\n                visitor.visit_post(post_hir)?;\n            }\n        }\n    }\n    fn induct(&mut self, hir: &'a Hir) -> Option<Frame<'a>> {\n        match *hir.kind() {\n            HirKind::Repetition(ref x) => Some(Frame::Repetition(x)),\n            HirKind::Capture(ref x) => Some(Frame::Capture(x)),\n            HirKind::Concat(ref x) if x.is_empty() => None,\n            HirKind::Concat(ref x) => {\n                Some(Frame::Concat {\n                    head: &x[0],\n                    tail: &x[1..],\n                })\n            }\n            HirKind::Alternation(ref x) if x.is_empty() => None,\n            HirKind::Alternation(ref x) => {\n                Some(Frame::Alternation {\n                    head: &x[0],\n                    tail: &x[1..],\n                })\n            }\n            _ => None,\n        }\n    }\n    fn pop(&self, induct: Frame<'a>) -> Option<Frame<'a>> {\n        match induct {\n            Frame::Repetition(_) => None,\n            Frame::Capture(_) => None,\n            Frame::Concat { tail, .. } => {\n                if tail.is_empty() {\n                    None\n                } else {\n                    Some(Frame::Concat {\n                        head: &tail[0],\n                        tail: &tail[1..],\n                    })\n                }\n            }\n            Frame::Alternation { tail, .. } => {\n                if tail.is_empty() {\n                    None\n                } else {\n                    Some(Frame::Alternation {\n                        head: &tail[0],\n                        tail: &tail[1..],\n                    })\n                }\n            }\n        }\n    }\n}\nimpl<'a> Frame<'a> {\n    fn child(&self) -> &'a Hir {\n        match *self {\n            Frame::Repetition(rep) => &rep.sub,\n            Frame::Capture(capture) => &capture.sub,\n            Frame::Concat { head, .. } => head,\n            Frame::Alternation { head, .. } => head,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n109 fn visit<V: Visitor>(\n110     &mut self,\n111     mut hir: &'a Hir,\n112     mut visitor: V,\n113 ) -> Result<V::Output, V::Err> {\n114     self.stack.clear();\n115 \n116     visitor.start();\n117     loop {\n118         visitor.visit_pre(hir)?;\n119         if let Some(x) = self.induct(hir) {\n120             let child = x.child();\n121             self.stack.push((hir, x));\n122             hir = child;\n123             continue;\n124         }\n125         // No induction means we have a base case, so we can post visit\n126         // it now.\n127         visitor.visit_post(hir)?;\n128 \n129         // At this point, we now try to pop our call stack until it is\n130         // either empty or we hit another inductive case.\n131         loop {\n132             let (post_hir, frame) = match self.stack.pop() {\n133                 None => return visitor.finish(),\n134                 Some((post_hir, frame)) => (post_hir, frame),\n135             };\n136             // If this is a concat/alternate, then we might have additional\n137             // inductive steps to process.\n138             if let Some(x) = self.pop(frame) {\n139                 match x {\n140                     Frame::Alternation { .. } => {\n141                         visitor.visit_alternation_in()?;\n142                     }\n143                     Frame::Concat { .. } => {\n144                         visitor.visit_concat_in()?;\n145                     }\n146                     _ => {}\n147                 }\n148                 hir = x.child();\n149                 self.stack.push((post_hir, x));\n150                 break;\n151             }\n152             // Otherwise, we've finished visiting all the child nodes for\n153             // this HIR, so we can post visit it now.\n154             visitor.visit_post(post_hir)?;\n155         }\n156     }\n157 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}