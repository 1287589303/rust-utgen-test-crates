{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/range_trie.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem, ops::RangeInclusive};\nuse alloc::{format, string::String, vec, vec::Vec};\nuse regex_syntax::utf8::Utf8Range;\nuse crate::util::primitives::StateID;\nconst FINAL: StateID = StateID::ZERO;\nconst ROOT: StateID = StateID::new_unchecked(1);\n#[derive(Clone, Debug)]\nstruct NextInsert {\n    /// The next state to begin inserting ranges. This state should be the\n    /// state at which `ranges[0]` should be inserted.\n    state_id: StateID,\n    /// The ranges to insert. We used a fixed-size array here to avoid an\n    /// allocation.\n    ranges: [Utf8Range; 4],\n    /// The number of valid ranges in the above array.\n    len: u8,\n}\n#[derive(Clone)]\npub struct RangeTrie {\n    /// The states in this trie. The first is always the shared final state.\n    /// The second is always the root state. Otherwise, there is no\n    /// particular order.\n    states: Vec<State>,\n    /// A free-list of states. When a range trie is cleared, all of its states\n    /// are added to this list. Creating a new state reuses states from this\n    /// list before allocating a new one.\n    free: Vec<State>,\n    /// A stack for traversing this trie to yield sequences of byte ranges in\n    /// lexicographic order.\n    iter_stack: RefCell<Vec<NextIter>>,\n    /// A buffer that stores the current sequence during iteration.\n    iter_ranges: RefCell<Vec<Utf8Range>>,\n    /// A stack used for traversing the trie in order to (deeply) duplicate\n    /// a state. States are recursively duplicated when ranges are split.\n    dupe_stack: Vec<NextDupe>,\n    /// A stack used for traversing the trie during insertion of a new\n    /// sequence of byte ranges.\n    insert_stack: Vec<NextInsert>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl NextInsert {\n    fn new(state_id: StateID, ranges: &[Utf8Range]) -> NextInsert {\n        let len = ranges.len();\n        assert!(len > 0);\n        assert!(len <= 4);\n        let mut tmp = [Utf8Range { start: 0, end: 0 }; 4];\n        tmp[..len].copy_from_slice(ranges);\n        NextInsert {\n            state_id,\n            ranges: tmp,\n            len: u8::try_from(len).unwrap(),\n        }\n    }\n    fn push(\n        trie: &mut RangeTrie,\n        stack: &mut Vec<NextInsert>,\n        ranges: &[Utf8Range],\n    ) -> StateID {\n        if ranges.is_empty() {\n            FINAL\n        } else {\n            let next_id = trie.add_empty();\n            stack.push(NextInsert::new(next_id, ranges));\n            next_id\n        }\n    }\n    fn state_id(&self) -> StateID {}\n    fn ranges(&self) -> &[Utf8Range] {}\n}\nimpl RangeTrie {\n    pub fn new() -> RangeTrie {}\n    pub fn clear(&mut self) {}\n    pub fn iter<E, F: FnMut(&[Utf8Range]) -> Result<(), E>>(\n        &self,\n        mut f: F,\n    ) -> Result<(), E> {}\n    pub fn insert(&mut self, ranges: &[Utf8Range]) {}\n    pub fn add_empty(&mut self) -> StateID {\n        let id = match StateID::try_from(self.states.len()) {\n            Ok(id) => id,\n            Err(_) => {\n                panic!(\"too many sequences added to range trie\");\n            }\n        };\n        if let Some(mut state) = self.free.pop() {\n            state.clear();\n            self.states.push(state);\n        } else {\n            self.states.push(State { transitions: vec![] });\n        }\n        id\n    }\n    fn duplicate(&mut self, old_id: StateID) -> StateID {}\n    fn add_transition(&mut self, from_id: StateID, range: Utf8Range, next_id: StateID) {}\n    fn add_transition_at(\n        &mut self,\n        i: usize,\n        from_id: StateID,\n        range: Utf8Range,\n        next_id: StateID,\n    ) {}\n    fn set_transition_at(\n        &mut self,\n        i: usize,\n        from_id: StateID,\n        range: Utf8Range,\n        next_id: StateID,\n    ) {}\n    fn state(&self, id: StateID) -> &State {}\n    fn state_mut(&mut self, id: StateID) -> &mut State {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Push a new empty state to visit along with any remaining ranges that\n/// still need to be inserted. The ID of the new empty state is returned.\n///\n/// If ranges is empty, then no new state is created and FINAL is returned.\n658 fn push(\n659     trie: &mut RangeTrie,\n660     stack: &mut Vec<NextInsert>,\n661     ranges: &[Utf8Range],\n662 ) -> StateID {\n663     if ranges.is_empty() {\n664         FINAL\n665     } else {\n666         let next_id = trie.add_empty();\n667         stack.push(NextInsert::new(next_id, ranges));\n668         next_id\n669     }\n670 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}