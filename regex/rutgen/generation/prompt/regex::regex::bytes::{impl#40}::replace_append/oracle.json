{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\npub trait Replacer {\n    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut Vec<u8>);\n    fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, [u8]>> {\n        None\n    }\n    fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {\n        ReplacerRef(self)\n    }\n}\n#[derive(Clone, Debug)]\npub struct NoExpand<'s>(pub &'s [u8]);\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'s> Replacer for NoExpand<'s> {\n    fn replace_append(&mut self, _: &Captures<'_>, dst: &mut Vec<u8>) {\n        dst.extend_from_slice(self.0);\n    }\n    fn no_expansion(&mut self) -> Option<Cow<'_, [u8]>> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2594 fn replace_append(&mut self, _: &Captures<'_>, dst: &mut Vec<u8>) {\n2595     dst.extend_from_slice(self.0);\n2596 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}