{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\n#[derive(Debug)]\npub struct MatchesIter<'h, F>(TryMatchesIter<'h, F>);\npub struct TryMatchesIter<'h, F> {\n    it: Searcher<'h>,\n    finder: F,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\nimpl<'h, F> Iterator for MatchesIter<'h, F>\nwhere\n    F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n{\n    type Item = Match;\n    #[inline]\n    fn next(&mut self) -> Option<Match> {\n        match self.0.next()? {\n            Ok(m) => Some(m),\n            Err(err) => {\n                panic!(\n                    \"unexpected regex find error: {}\\n\\\n                 to handle find errors, use 'try' or 'search' methods\",\n                    err,\n                )\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n902 fn next(&mut self) -> Option<Match> {\n903     match self.0.next()? {\n904         Ok(m) => Some(m),\n905         Err(err) => panic!(\n906             \"unexpected regex find error: {}\\n\\\n907              to handle find errors, use 'try' or 'search' methods\",\n908             err,\n909         ),\n910     }\n911 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}