{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\n#[derive(Debug)]\npub struct MatchesIter<'h, F>(TryMatchesIter<'h, F>);\npub struct TryMatchesIter<'h, F> {\n    it: Searcher<'h>,\n    finder: F,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\nimpl<'h, F> Iterator for MatchesIter<'h, F>\nwhere\n    F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n{\n    type Item = Match;\n    #[inline]\n    fn next(&mut self) -> Option<Match> {\n        match self.0.next()? {\n            Ok(m) => Some(m),\n            Err(err) => {\n                panic!(\n                    \"unexpected regex find error: {}\\n\\\n                 to handle find errors, use 'try' or 'search' methods\",\n                    err,\n                )\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n902 fn next(&mut self) -> Option<Match> {\n903     match self.0.next()? {\n904         Ok(m) => Some(m),\n905         Err(err) => panic!(\n906             \"unexpected regex find error: {}\\n\\\n907              to handle find errors, use 'try' or 'search' methods\",\n908             err,\n909         ),\n910     }\n911 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}