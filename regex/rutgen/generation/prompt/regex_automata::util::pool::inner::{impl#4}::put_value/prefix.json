{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\nuse core::{\n    cell::UnsafeCell, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicBool, Ordering},\n};\nuse alloc::{boxed::Box, vec, vec::Vec};\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\n#[derive(Debug)]\nstruct Mutex<T> {\n    locked: AtomicBool,\n    data: UnsafeCell<T>,\n}\nimpl<T: Send, F: Fn() -> T> Pool<T, F> {\n    #[inline]\n    pub(super) fn get(&self) -> PoolGuard<'_, T, F> {}\n    #[inline]\n    fn put(&self, guard: PoolGuard<'_, T, F>) {}\n    #[inline]\n    fn put_value(&self, value: Box<T>) {\n        let mut stack = self.stack.lock();\n        stack.push(value);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Puts a value back into the pool. Callers don't need to call this.\n/// Once the guard that's returned by 'get' is dropped, it is put back\n/// into the pool automatically.\n604 fn put_value(&self, value: Box<T>) {\n605     let caller = THREAD_ID.with(|id| *id);\n606     let stack_id = caller % self.stacks.len();\n607     // As with trying to pop a value from this thread's stack, we\n608     // merely attempt to get access to push this value back on the\n609     // stack. If there's too much contention, we just give up and throw\n610     // the value away.\n611     //\n612     // Interestingly, in ad hoc benchmarking, it is beneficial to\n613     // attempt to push the value back more than once, unlike when\n614     // popping the value. I don't have a good theory for why this is.\n615     // I guess if we drop too many values then that winds up forcing\n616     // the pop operation to create new fresh values and thus leads to\n617     // less reuse. There's definitely a balancing act here.\n618     for _ in 0..10 {\n619         let mut stack = match self.stacks[stack_id].0.try_lock() {\n620             Err(_) => continue,\n621             Ok(stack) => stack,\n622         };\n623         stack.push(value);\n624         return;\n625     }\n626 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}