{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/error.rs\n// crate name is regex_automata\nuse crate::util::{captures, look, primitives::{PatternID, StateID}};\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    /// An error that occurred while constructing an NFA as a precursor step\n    /// before a DFA is compiled.\n    NFA(thompson::BuildError),\n    /// An error that occurred because an unsupported regex feature was used.\n    /// The message string describes which unsupported feature was used.\n    ///\n    /// The primary regex feature that is unsupported by DFAs is the Unicode\n    /// word boundary look-around assertion (`\\b`). This can be worked around\n    /// by either using an ASCII word boundary (`(?-u:\\b)`) or by enabling\n    /// Unicode word boundaries when building a DFA.\n    Unsupported(&'static str),\n    /// An error that occurs if too many states are produced while building a\n    /// DFA.\n    TooManyStates,\n    /// An error that occurs if too many start states are needed while building\n    /// a DFA.\n    ///\n    /// This is a kind of oddball error that occurs when building a DFA with\n    /// start states enabled for each pattern and enough patterns to cause\n    /// the table of start states to overflow `usize`.\n    TooManyStartStates,\n    /// This is another oddball error that can occur if there are too many\n    /// patterns spread out across too many match states.\n    TooManyMatchPatternIDs,\n    /// An error that occurs if the DFA got too big during determinization.\n    DFAExceededSizeLimit { limit: usize },\n    /// An error that occurs if auxiliary storage (not the DFA) used during\n    /// determinization got too big.\n    DeterminizeExceededSizeLimit { limit: usize },\n}\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    Syntax { pid: PatternID, err: regex_syntax::Error },\n    NFA(nfa::thompson::BuildError),\n}\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    NFA(crate::nfa::thompson::BuildError),\n    Word(UnicodeWordBoundaryError),\n    TooManyStates { limit: u64 },\n    TooManyPatterns { limit: u64 },\n    UnsupportedLook { look: Look },\n    ExceededSizeLimit { limit: usize },\n    NotOnePass { msg: &'static str },\n}\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    /// An error that occurred while parsing a regular expression. Note that\n    /// this error may be printed over multiple lines, and is generally\n    /// intended to be end user readable on its own.\n    #[cfg(feature = \"syntax\")]\n    Syntax(regex_syntax::Error),\n    /// An error that occurs if the capturing groups provided to an NFA builder\n    /// do not satisfy the documented invariants. For example, things like\n    /// too many groups, missing groups, having the first (zeroth) group be\n    /// named or duplicate group names within the same pattern.\n    Captures(captures::GroupInfoError),\n    /// An error that occurs when an NFA contains a Unicode word boundary, but\n    /// where the crate was compiled without the necessary data for dealing\n    /// with Unicode word boundaries.\n    Word(look::UnicodeWordBoundaryError),\n    /// An error that occurs if too many patterns were given to the NFA\n    /// compiler.\n    TooManyPatterns {\n        /// The number of patterns given, which exceeds the limit.\n        given: usize,\n        /// The limit on the number of patterns.\n        limit: usize,\n    },\n    /// An error that occurs if too states are produced while building an NFA.\n    TooManyStates {\n        /// The minimum number of states that are desired, which exceeds the\n        /// limit.\n        given: usize,\n        /// The limit on the number of states.\n        limit: usize,\n    },\n    /// An error that occurs when NFA compilation exceeds a configured heap\n    /// limit.\n    ExceededSizeLimit {\n        /// The configured limit, in bytes.\n        limit: usize,\n    },\n    /// An error that occurs when an invalid capture group index is added to\n    /// the NFA. An \"invalid\" index can be one that would otherwise overflow\n    /// a `usize` on the current target.\n    InvalidCaptureIndex {\n        /// The invalid index that was given.\n        index: u32,\n    },\n    /// An error that occurs when one tries to build a reverse NFA with\n    /// captures enabled. Currently, this isn't supported, but we probably\n    /// should support it at some point.\n    #[cfg(feature = \"syntax\")]\n    UnsupportedCaptures,\n}\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    NFA(nfa::thompson::BuildError),\n    InsufficientCacheCapacity { minimum: usize, given: usize },\n    InsufficientStateIDCapacity { err: LazyStateIDError },\n    Unsupported(&'static str),\n}\nimpl BuildError {\n    pub fn size_limit(&self) -> Option<usize> {}\n    fn kind(&self) -> &BuildErrorKind {}\n    #[cfg(feature = \"syntax\")]\n    pub(crate) fn syntax(err: regex_syntax::Error) -> BuildError {}\n    pub(crate) fn captures(err: captures::GroupInfoError) -> BuildError {}\n    pub(crate) fn word(err: look::UnicodeWordBoundaryError) -> BuildError {}\n    pub(crate) fn too_many_patterns(given: usize) -> BuildError {}\n    pub(crate) fn too_many_states(given: usize) -> BuildError {}\n    pub(crate) fn exceeded_size_limit(limit: usize) -> BuildError {}\n    pub(crate) fn invalid_capture_index(index: u32) -> BuildError {\n        BuildError {\n            kind: BuildErrorKind::InvalidCaptureIndex {\n                index,\n            },\n        }\n    }\n    #[cfg(feature = \"syntax\")]\n    pub(crate) fn unsupported_captures() -> BuildError {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n122 pub(crate) fn invalid_capture_index(index: u32) -> BuildError {\n123     BuildError { kind: BuildErrorKind::InvalidCaptureIndex { index } }\n124 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}