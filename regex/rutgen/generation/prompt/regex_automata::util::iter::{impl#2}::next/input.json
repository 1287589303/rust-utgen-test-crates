{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\npub struct TryHalfMatchesIter<'h, F> {\n    it: Searcher<'h>,\n    finder: F,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\nimpl<'h, F> Iterator for TryHalfMatchesIter<'h, F>\nwhere\n    F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n{\n    type Item = Result<HalfMatch, MatchError>;\n    #[inline]\n    fn next(&mut self) -> Option<Result<HalfMatch, MatchError>> {\n        self.it.try_advance_half(&mut self.finder).transpose()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n733 fn next(&mut self) -> Option<Result<HalfMatch, MatchError>> {\n734     self.it.try_advance_half(&mut self.finder).transpose()\n735 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}