{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {\n        self.replacen(haystack, 1, rep)\n    }\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {\n        if let Some(rep) = rep.no_expansion() {\n            let mut it = self.find_iter(haystack).enumerate().peekable();\n            if it.peek().is_none() {\n                return Cow::Borrowed(haystack);\n            }\n            let mut new = String::with_capacity(haystack.len());\n            let mut last_match = 0;\n            for (i, m) in it {\n                new.push_str(&haystack[last_match..m.start()]);\n                new.push_str(&rep);\n                last_match = m.end();\n                if limit > 0 && i >= limit - 1 {\n                    break;\n                }\n            }\n            new.push_str(&haystack[last_match..]);\n            return Cow::Owned(new);\n        }\n        let mut it = self.captures_iter(haystack).enumerate().peekable();\n        if it.peek().is_none() {\n            return Cow::Borrowed(haystack);\n        }\n        let mut new = String::with_capacity(haystack.len());\n        let mut last_match = 0;\n        for (i, cap) in it {\n            let m = cap.get(0).unwrap();\n            new.push_str(&haystack[last_match..m.start()]);\n            rep.replace_append(&cap, &mut new);\n            last_match = m.end();\n            if limit > 0 && i >= limit - 1 {\n                break;\n            }\n        }\n        new.push_str(&haystack[last_match..]);\n        Cow::Owned(new)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Replaces the leftmost-first match in the given haystack with the\n/// replacement provided. The replacement can be a regular string (where\n/// `$N` and `$name` are expanded to match capture groups) or a function\n/// that takes a [`Captures`] and returns the replaced string.\n///\n/// If no match is found, then the haystack is returned unchanged. In that\n/// case, this implementation will likely return a `Cow::Borrowed` value\n/// such that no allocation is performed.\n///\n/// When a `Cow::Borrowed` is returned, the value returned is guaranteed\n/// to be equivalent to the `haystack` given.\n///\n/// # Replacement string syntax\n///\n/// All instances of `$ref` in the replacement string are replaced with\n/// the substring corresponding to the capture group identified by `ref`.\n///\n/// `ref` may be an integer corresponding to the index of the capture group\n/// (counted by order of opening parenthesis where `0` is the entire match)\n/// or it can be a name (consisting of letters, digits or underscores)\n/// corresponding to a named capture group.\n///\n/// If `ref` isn't a valid capture group (whether the name doesn't exist or\n/// isn't a valid index), then it is replaced with the empty string.\n///\n/// The longest possible name is used. For example, `$1a` looks up the\n/// capture group named `1a` and not the capture group at index `1`. To\n/// exert more precise control over the name, use braces, e.g., `${1}a`.\n///\n/// To write a literal `$` use `$$`.\n///\n/// # Example\n///\n/// Note that this function is polymorphic with respect to the replacement.\n/// In typical usage, this can just be a normal string:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"[^01]+\").unwrap();\n/// assert_eq!(re.replace(\"1078910\", \"\"), \"1010\");\n/// ```\n///\n/// But anything satisfying the [`Replacer`] trait will work. For example,\n/// a closure of type `|&Captures| -> String` provides direct access to the\n/// captures corresponding to a match. This allows one to access capturing\n/// group matches easily:\n///\n/// ```\n/// use regex::{Captures, Regex};\n///\n/// let re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();\n/// let result = re.replace(\"Springsteen, Bruce\", |caps: &Captures| {\n///     format!(\"{} {}\", &caps[2], &caps[1])\n/// });\n/// assert_eq!(result, \"Bruce Springsteen\");\n/// ```\n///\n/// But this is a bit cumbersome to use all the time. Instead, a simple\n/// syntax is supported (as described above) that expands `$name` into the\n/// corresponding capture group. Here's the last example, but using this\n/// expansion technique with named capture groups:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(?<first>\\S+)\").unwrap();\n/// let result = re.replace(\"Springsteen, Bruce\", \"$first $last\");\n/// assert_eq!(result, \"Bruce Springsteen\");\n/// ```\n///\n/// Note that using `$2` instead of `$first` or `$1` instead of `$last`\n/// would produce the same result. To write a literal `$` use `$$`.\n///\n/// Sometimes the replacement string requires use of curly braces to\n/// delineate a capture group replacement when it is adjacent to some other\n/// literal text. For example, if we wanted to join two words together with\n/// an underscore:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"(?<first>\\w+)\\s+(?<second>\\w+)\").unwrap();\n/// let result = re.replace(\"deep fried\", \"${first}_$second\");\n/// assert_eq!(result, \"deep_fried\");\n/// ```\n///\n/// Without the curly braces, the capture group name `first_` would be\n/// used, and since it doesn't exist, it would be replaced with the empty\n/// string.\n///\n/// Finally, sometimes you just want to replace a literal string with no\n/// regard for capturing group expansion. This can be done by wrapping a\n/// string with [`NoExpand`]:\n///\n/// ```\n/// use regex::{NoExpand, Regex};\n///\n/// let re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(\\S+)\").unwrap();\n/// let result = re.replace(\"Springsteen, Bruce\", NoExpand(\"$2 $last\"));\n/// assert_eq!(result, \"$2 $last\");\n/// ```\n///\n/// Using `NoExpand` may also be faster, since the replacement string won't\n/// need to be parsed for the `$` syntax.\n742 pub fn replace<'h, R: Replacer>(\n743     &self,\n744     haystack: &'h str,\n745     rep: R,\n746 ) -> Cow<'h, str> {\n747     self.replacen(haystack, 1, rep)\n748 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}