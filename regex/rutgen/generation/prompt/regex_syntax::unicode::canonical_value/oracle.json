{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\nfn canonical_value(\n    vals: PropertyValues,\n    normalized_value: &str,\n) -> Option<&'static str> {\n    vals.binary_search_by_key(&normalized_value, |&(n, _)| n).ok().map(|i| vals[i].1)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Find the canonical property value for the given normalized property\n/// value.\n///\n/// The given property values should correspond to the values for the property\n/// under question, which can be found using `property_values`.\n///\n/// If no such property value exists, then `None` is returned.\n///\n/// The normalized property value must have been normalized according to\n/// UAX44 LM3, which can be done using `symbolic_name_normalize`.\n575 fn canonical_value(\n576     vals: PropertyValues,\n577     normalized_value: &str,\n578 ) -> Option<&'static str> {\n579     vals.binary_search_by_key(&normalized_value, |&(n, _)| n)\n580         .ok()\n581         .map(|i| vals[i].1)\n582 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}