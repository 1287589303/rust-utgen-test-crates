{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/remapper.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::util::primitives::StateID;\n#[derive(Debug)]\npub(super) struct Remapper {\n    /// A map from the index of a state to its pre-multiplied identifier.\n    ///\n    /// When a state is swapped with another, then their corresponding\n    /// locations in this map are also swapped. Thus, its new position will\n    /// still point to its old pre-multiplied StateID.\n    ///\n    /// While there is a bit more to it, this then allows us to rewrite the\n    /// state IDs in a DFA's transition table in a single pass. This is done\n    /// by iterating over every ID in this map, then iterating over each\n    /// transition for the state at that ID and re-mapping the transition from\n    /// `old_id` to `map[dfa.to_index(old_id)]`. That is, we find the position\n    /// in this map where `old_id` *started*, and set it to where it ended up\n    /// after all swaps have been completed.\n    map: Vec<StateID>,\n    /// A mapper from state index to state ID (and back).\n    idxmap: IndexMapper,\n}\n#[derive(Debug)]\nstruct IndexMapper {\n    /// The power of 2 corresponding to the stride of the corresponding\n    /// transition table. 'id >> stride2' de-multiplies an ID while 'index <<\n    /// stride2' pre-multiplies an index to an ID.\n    stride2: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl Remapper {\n    pub(super) fn new(r: &impl Remappable) -> Remapper {}\n    pub(super) fn swap(&mut self, r: &mut impl Remappable, id1: StateID, id2: StateID) {\n        if id1 == id2 {\n            return;\n        }\n        r.swap_states(id1, id2);\n        self.map.swap(self.idxmap.to_index(id1), self.idxmap.to_index(id2));\n    }\n    pub(super) fn remap(mut self, r: &mut impl Remappable) {}\n}\nimpl IndexMapper {\n    fn to_index(&self, id: StateID) -> usize {\n        id.as_usize() >> self.stride2\n    }\n    fn to_state_id(&self, index: usize) -> StateID {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Swap two states. Once this is called, callers must follow through to\n/// call `remap`, or else it's possible for the underlying remappable\n/// value to be in a corrupt state.\n100 pub(super) fn swap(\n101     &mut self,\n102     r: &mut impl Remappable,\n103     id1: StateID,\n104     id2: StateID,\n105 ) {\n106     if id1 == id2 {\n107         return;\n108     }\n109     r.swap_states(id1, id2);\n110     self.map.swap(self.idxmap.to_index(id1), self.idxmap.to_index(id2));\n111 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}