{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accels<A> {\n    /// A length prefixed slice of contiguous accelerators. See the top comment\n    /// in this module for more details on how we can jump from a DFA's state\n    /// ID to an accelerator in this list.\n    ///\n    /// The first 4 bytes always correspond to the number of accelerators\n    /// that follow.\n    accels: A,\n}\n#[derive(Clone)]\npub(crate) struct Accel {\n    /// The first byte is the length. Subsequent bytes are the accelerated\n    /// bytes.\n    ///\n    /// Note that we make every accelerator 8 bytes as a slightly wasteful\n    /// way of making sure alignment is always correct for state ID sizes of\n    /// 1, 2, 4 and 8. This should be okay since accelerated states aren't\n    /// particularly common, especially when Unicode is enabled.\n    bytes: [u8; ACCEL_CAP],\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Accels<Vec<AccelTy>> {\n    pub fn empty() -> Accels<Vec<AccelTy>> {}\n    pub fn add(&mut self, accel: Accel) {\n        self.accels.extend_from_slice(&accel.as_accel_tys());\n        let len = self.len();\n        self.set_len(len + 1);\n    }\n    fn set_len(&mut self, new_len: usize) {}\n}\nimpl Accel {\n    #[cfg(feature = \"dfa-build\")]\n    pub fn new() -> Accel {}\n    pub fn from_slice(mut slice: &[u8]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes(bytes: [u8; 4]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes_unchecked(bytes: [u8; 4]) -> Accel {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn add(&mut self, byte: u8) -> bool {}\n    pub fn len(&self) -> usize {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn is_empty(&self) -> bool {}\n    fn needles(&self) -> &[u8] {}\n    #[cfg(feature = \"dfa-build\")]\n    fn contains(&self, byte: u8) -> bool {}\n    #[cfg(feature = \"dfa-build\")]\n    fn as_accel_tys(&self) -> [AccelTy; 2] {\n        assert_eq!(ACCEL_CAP, 8);\n        let first = AccelTy::from_ne_bytes(self.bytes[0..4].try_into().unwrap());\n        let second = AccelTy::from_ne_bytes(self.bytes[4..8].try_into().unwrap());\n        [first, second]\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Add an accelerator to this sequence.\n///\n/// This adds to the accelerator to the end of the sequence and therefore\n/// should be done in correspondence with its state in the DFA.\n///\n/// This panics if this results in more accelerators than AccelTy::MAX.\n157 pub fn add(&mut self, accel: Accel) {\n158     self.accels.extend_from_slice(&accel.as_accel_tys());\n159     let len = self.len();\n160     self.set_len(len + 1);\n161 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}