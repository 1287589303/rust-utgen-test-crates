{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accels<A> {\n    /// A length prefixed slice of contiguous accelerators. See the top comment\n    /// in this module for more details on how we can jump from a DFA's state\n    /// ID to an accelerator in this list.\n    ///\n    /// The first 4 bytes always correspond to the number of accelerators\n    /// that follow.\n    accels: A,\n}\n#[derive(Clone)]\npub(crate) struct Accel {\n    /// The first byte is the length. Subsequent bytes are the accelerated\n    /// bytes.\n    ///\n    /// Note that we make every accelerator 8 bytes as a slightly wasteful\n    /// way of making sure alignment is always correct for state ID sizes of\n    /// 1, 2, 4 and 8. This should be okay since accelerated states aren't\n    /// particularly common, especially when Unicode is enabled.\n    bytes: [u8; ACCEL_CAP],\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Accels<Vec<AccelTy>> {\n    pub fn empty() -> Accels<Vec<AccelTy>> {}\n    pub fn add(&mut self, accel: Accel) {\n        self.accels.extend_from_slice(&accel.as_accel_tys());\n        let len = self.len();\n        self.set_len(len + 1);\n    }\n    fn set_len(&mut self, new_len: usize) {}\n}\nimpl Accel {\n    #[cfg(feature = \"dfa-build\")]\n    pub fn new() -> Accel {}\n    pub fn from_slice(mut slice: &[u8]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes(bytes: [u8; 4]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes_unchecked(bytes: [u8; 4]) -> Accel {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn add(&mut self, byte: u8) -> bool {}\n    pub fn len(&self) -> usize {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn is_empty(&self) -> bool {}\n    fn needles(&self) -> &[u8] {}\n    #[cfg(feature = \"dfa-build\")]\n    fn contains(&self, byte: u8) -> bool {}\n    #[cfg(feature = \"dfa-build\")]\n    fn as_accel_tys(&self) -> [AccelTy; 2] {\n        assert_eq!(ACCEL_CAP, 8);\n        let first = AccelTy::from_ne_bytes(self.bytes[0..4].try_into().unwrap());\n        let second = AccelTy::from_ne_bytes(self.bytes[4..8].try_into().unwrap());\n        [first, second]\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Add an accelerator to this sequence.\n///\n/// This adds to the accelerator to the end of the sequence and therefore\n/// should be done in correspondence with its state in the DFA.\n///\n/// This panics if this results in more accelerators than AccelTy::MAX.\n157 pub fn add(&mut self, accel: Accel) {\n158     self.accels.extend_from_slice(&accel.as_accel_tys());\n159     let len = self.len();\n160     self.set_len(len + 1);\n161 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}