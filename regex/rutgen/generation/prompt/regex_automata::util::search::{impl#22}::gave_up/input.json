{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum MatchErrorKind {\n    /// The search saw a \"quit\" byte at which it was instructed to stop\n    /// searching.\n    Quit {\n        /// The \"quit\" byte that was observed that caused the search to stop.\n        byte: u8,\n        /// The offset at which the quit byte was observed.\n        offset: usize,\n    },\n    /// The search, based on heuristics, determined that it would be better\n    /// to stop, typically to provide the caller an opportunity to use an\n    /// alternative regex engine.\n    ///\n    /// Currently, the only way for this to occur is via the lazy DFA and\n    /// only when it is configured to do so (it will not return this error by\n    /// default).\n    GaveUp {\n        /// The offset at which the search stopped. This corresponds to the\n        /// position immediately following the last byte scanned.\n        offset: usize,\n    },\n    /// This error occurs if the haystack given to the regex engine was too\n    /// long to be searched. This occurs, for example, with regex engines\n    /// like the bounded backtracker that have a configurable fixed amount of\n    /// capacity that is tied to the length of the haystack. Anything beyond\n    /// that configured limit will result in an error at search time.\n    HaystackTooLong {\n        /// The length of the haystack that exceeded the limit.\n        len: usize,\n    },\n    /// An error indicating that a particular type of anchored search was\n    /// requested, but that the regex engine does not support it.\n    ///\n    /// Note that this error should not be returned by a regex engine simply\n    /// because the pattern ID is invalid (i.e., equal to or exceeds the number\n    /// of patterns in the regex). In that case, the regex engine should report\n    /// a non-match.\n    UnsupportedAnchored {\n        /// The anchored mode given that is unsupported.\n        mode: Anchored,\n    },\n}\nimpl MatchError {\n    pub fn new(kind: MatchErrorKind) -> MatchError {\n        #[cfg(feature = \"alloc\")] { MatchError(alloc::boxed::Box::new(kind)) }\n        #[cfg(not(feature = \"alloc\"))] { MatchError(kind) }\n    }\n    pub fn kind(&self) -> &MatchErrorKind {}\n    pub fn quit(byte: u8, offset: usize) -> MatchError {}\n    pub fn gave_up(offset: usize) -> MatchError {\n        MatchError::new(MatchErrorKind::GaveUp { offset })\n    }\n    pub fn haystack_too_long(len: usize) -> MatchError {}\n    pub fn unsupported_anchored(mode: Anchored) -> MatchError {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new \"gave up\" error. The given `offset` corresponds to the\n/// location in the haystack at which the search gave up.\n///\n/// This is the same as calling `MatchError::new` with a\n/// [`MatchErrorKind::GaveUp`] kind.\n1824 pub fn gave_up(offset: usize) -> MatchError {\n1825     MatchError::new(MatchErrorKind::GaveUp { offset })\n1826 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}