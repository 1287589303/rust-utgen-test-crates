{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/strategy.rs\n// crate name is regex_automata\nuse core::{fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::sync::Arc;\nuse regex_syntax::hir::{literal, Hir};\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError, RetryQuadraticError},\n        regex::{Cache, RegexInfo},\n        reverse_inner, wrappers,\n    },\n    nfa::thompson::{self, WhichCaptures, NFA},\n    util::{\n        captures::{Captures, GroupInfo},\n        look::LookMatcher, prefilter::{self, Prefilter, PrefilterI},\n        primitives::{NonMaxUsize, PatternID},\n        search::{Anchored, HalfMatch, Input, Match, MatchKind, PatternSet},\n    },\n};\npub(super) trait Strategy: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn group_info(&self) -> &GroupInfo;\n    fn create_cache(&self) -> Cache;\n    fn reset_cache(&self, cache: &mut Cache);\n    fn is_accelerated(&self) -> bool;\n    fn memory_usage(&self) -> usize;\n    fn search(&self, cache: &mut Cache, input: &Input<'_>) -> Option<Match>;\n    fn search_half(&self, cache: &mut Cache, input: &Input<'_>) -> Option<HalfMatch>;\n    fn is_match(&self, cache: &mut Cache, input: &Input<'_>) -> bool;\n    fn search_slots(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<PatternID>;\n    fn which_overlapping_matches(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    );\n}\n#[derive(Debug)]\nstruct ReverseInner {\n    core: Core,\n    preinner: Prefilter,\n    nfarev: NFA,\n    hybrid: wrappers::ReverseHybrid,\n    dfa: wrappers::ReverseDFA,\n}\n#[derive(Debug)]\nstruct Core {\n    info: RegexInfo,\n    pre: Option<Prefilter>,\n    nfa: NFA,\n    nfarev: Option<NFA>,\n    pikevm: wrappers::PikeVM,\n    backtrack: wrappers::BoundedBacktracker,\n    onepass: wrappers::OnePass,\n    hybrid: wrappers::Hybrid,\n    dfa: wrappers::DFA,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Debug)]\npub(crate) struct RetryFailError {\n    offset: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\n#[derive(Debug)]\npub(crate) struct RetryQuadraticError(());\n#[derive(Debug)]\npub(crate) struct ReverseHybrid(Option<ReverseHybridEngine>);\n#[derive(Debug, Clone)]\npub struct Cache {\n    pub(crate) capmatches: Captures,\n    pub(crate) pikevm: wrappers::PikeVMCache,\n    pub(crate) backtrack: wrappers::BoundedBacktrackerCache,\n    pub(crate) onepass: wrappers::OnePassCache,\n    pub(crate) hybrid: wrappers::HybridCache,\n    pub(crate) revhybrid: wrappers::ReverseHybridCache,\n}\n#[derive(Debug)]\npub(crate) struct ReverseDFA(Option<ReverseDFAEngine>);\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\n#[derive(Debug)]\npub(crate) enum RetryError {\n    Quadratic(RetryQuadraticError),\n    Fail(RetryFailError),\n}\nimpl Strategy for ReverseInner {\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn group_info(&self) -> &GroupInfo {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn create_cache(&self) -> Cache {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn reset_cache(&self, cache: &mut Cache) {}\n    fn is_accelerated(&self) -> bool {}\n    fn memory_usage(&self) -> usize {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn search(&self, cache: &mut Cache, input: &Input<'_>) -> Option<Match> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn search_half(&self, cache: &mut Cache, input: &Input<'_>) -> Option<HalfMatch> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn is_match(&self, cache: &mut Cache, input: &Input<'_>) -> bool {\n        if input.get_anchored().is_anchored() {\n            return self.core.is_match(cache, input);\n        }\n        match self.try_search_full(cache, input) {\n            Err(RetryError::Quadratic(_err)) => {\n                trace!(\"reverse inner half optimization failed: {}\", _err);\n                self.core.is_match_nofail(cache, input)\n            }\n            Err(RetryError::Fail(_err)) => {\n                trace!(\"reverse inner fast half search failed: {}\", _err);\n                self.core.is_match_nofail(cache, input)\n            }\n            Ok(None) => false,\n            Ok(Some(_)) => true,\n        }\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn search_slots(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<PatternID> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn which_overlapping_matches(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) {}\n}\nimpl Core {\n    fn new(\n        info: RegexInfo,\n        pre: Option<Prefilter>,\n        hirs: &[&Hir],\n    ) -> Result<Core, BuildError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn try_search_mayfail(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Option<Result<Option<Match>, RetryFailError>> {}\n    fn search_nofail(&self, cache: &mut Cache, input: &Input<'_>) -> Option<Match> {}\n    fn search_half_nofail(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Option<HalfMatch> {}\n    fn search_slots_nofail(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<PatternID> {}\n    fn is_match_nofail(&self, cache: &mut Cache, input: &Input<'_>) -> bool {\n        if let Some(ref e) = self.onepass.get(input) {\n            trace!(\"using OnePass for is-match search at {:?}\", input.get_span());\n            e.search_slots(&mut cache.onepass, input, &mut []).is_some()\n        } else if let Some(ref e) = self.backtrack.get(input) {\n            trace!(\n                \"using BoundedBacktracker for is-match search at {:?}\", input.get_span()\n            );\n            e.is_match(&mut cache.backtrack, input)\n        } else {\n            trace!(\"using PikeVM for is-match search at {:?}\", input.get_span());\n            let e = self.pikevm.get();\n            e.is_match(&mut cache.pikevm, input)\n        }\n    }\n    fn is_capture_search_needed(&self, slots_len: usize) -> bool {}\n}\nimpl ReverseInner {\n    fn new(core: Core, hirs: &[&Hir]) -> Result<ReverseInner, Core> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn try_search_full(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Result<Option<Match>, RetryError> {\n        let mut span = input.get_span();\n        let mut min_match_start = 0;\n        let mut min_pre_start = 0;\n        loop {\n            let litmatch = match self.preinner.find(input.haystack(), span) {\n                None => return Ok(None),\n                Some(span) => span,\n            };\n            if litmatch.start < min_pre_start {\n                trace!(\n                    \"found inner prefilter match at {:?}, which starts \\\n\t\t\t\t\t before the end of the last forward scan at {}, \\\n\t\t\t\t\t quitting to avoid quadratic behavior\",\n                    litmatch, min_pre_start,\n                );\n                return Err(RetryError::Quadratic(RetryQuadraticError::new()));\n            }\n            trace!(\"reverse inner scan found inner match at {:?}\", litmatch);\n            let revinput = input\n                .clone()\n                .anchored(Anchored::Yes)\n                .span(input.start()..litmatch.start);\n            match self.try_search_half_rev_limited(cache, &revinput, min_match_start)? {\n                None => {\n                    if span.start >= span.end {\n                        break;\n                    }\n                    span.start = litmatch.start.checked_add(1).unwrap();\n                }\n                Some(hm_start) => {\n                    let fwdinput = input\n                        .clone()\n                        .anchored(Anchored::Pattern(hm_start.pattern()))\n                        .span(hm_start.offset()..input.end());\n                    match self.try_search_half_fwd_stopat(cache, &fwdinput)? {\n                        Err(stopat) => {\n                            min_pre_start = stopat;\n                            span.start = litmatch.start.checked_add(1).unwrap();\n                        }\n                        Ok(hm_end) => {\n                            return Ok(\n                                Some(\n                                    Match::new(\n                                        hm_start.pattern(),\n                                        hm_start.offset()..hm_end.offset(),\n                                    ),\n                                ),\n                            );\n                        }\n                    }\n                }\n            }\n            min_match_start = litmatch.end;\n        }\n        Ok(None)\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn try_search_half_fwd_stopat(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Result<Result<HalfMatch, usize>, RetryFailError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn try_search_half_rev_limited(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        min_start: usize,\n    ) -> Result<Option<HalfMatch>, RetryError> {}\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {\n        self.anchored\n    }\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\nimpl Anchored {\n    #[inline]\n    pub fn is_anchored(&self) -> bool {\n        matches!(* self, Anchored::Yes | Anchored::Pattern(_))\n    }\n    #[inline]\n    pub fn pattern(&self) -> Option<PatternID> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1824 fn is_match(&self, cache: &mut Cache, input: &Input<'_>) -> bool {\n1825     if input.get_anchored().is_anchored() {\n1826         return self.core.is_match(cache, input);\n1827     }\n1828     match self.try_search_full(cache, input) {\n1829         Err(RetryError::Quadratic(_err)) => {\n1830             trace!(\"reverse inner half optimization failed: {}\", _err);\n1831             self.core.is_match_nofail(cache, input)\n1832         }\n1833         Err(RetryError::Fail(_err)) => {\n1834             trace!(\"reverse inner fast half search failed: {}\", _err);\n1835             self.core.is_match_nofail(cache, input)\n1836         }\n1837         Ok(None) => false,\n1838         Ok(Some(_)) => true,\n1839     }\n1840 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}