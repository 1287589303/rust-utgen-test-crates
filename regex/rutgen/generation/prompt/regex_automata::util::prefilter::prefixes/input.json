{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/mod.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\n#[cfg(feature = \"alloc\")]\nuse alloc::sync::Arc;\n#[cfg(feature = \"syntax\")]\nuse regex_syntax::hir::{literal, Hir};\nuse crate::util::search::{MatchKind, Span};\npub(crate) use crate::util::prefilter::{\n    aho_corasick::AhoCorasick, byteset::ByteSet, memchr::{Memchr, Memchr2, Memchr3},\n    memmem::Memmem, teddy::Teddy,\n};\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[cfg(feature = \"syntax\")]\npub(crate) fn prefixes<H>(kind: MatchKind, hirs: &[H]) -> literal::Seq\nwhere\n    H: core::borrow::Borrow<Hir>,\n{\n    let mut extractor = literal::Extractor::new();\n    extractor.kind(literal::ExtractKind::Prefix);\n    let mut prefixes = literal::Seq::empty();\n    for hir in hirs {\n        prefixes.union(&mut extractor.extract(hir.borrow()));\n    }\n    debug!(\n        \"prefixes (len={:?}, exact={:?}) extracted before optimization: {:?}\", prefixes\n        .len(), prefixes.is_exact(), prefixes\n    );\n    match kind {\n        MatchKind::All => {\n            prefixes.sort();\n            prefixes.dedup();\n        }\n        MatchKind::LeftmostFirst => {\n            prefixes.optimize_for_prefix_by_preference();\n        }\n    }\n    debug!(\n        \"prefixes (len={:?}, exact={:?}) extracted after optimization: {:?}\", prefixes\n        .len(), prefixes.is_exact(), prefixes\n    );\n    prefixes\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Extracts all of the prefix literals from the given HIR expressions into a\n/// single `Seq`. The literals in the sequence are ordered with respect to the\n/// order of the given HIR expressions and consistent with the match semantics\n/// given.\n///\n/// The sequence returned is \"optimized.\" That is, they may be shrunk or even\n/// truncated according to heuristics with the intent of making them more\n/// useful as a prefilter. (Which translates to both using faster algorithms\n/// and minimizing the false positive rate.)\n///\n/// Note that this erases any connection between the literals and which pattern\n/// (or patterns) they came from.\n///\n/// The match kind given must correspond to the match semantics of the regex\n/// that is represented by the HIRs given. The match semantics may change the\n/// literal sequence returned.\n649 pub(crate) fn prefixes<H>(kind: MatchKind, hirs: &[H]) -> literal::Seq\n650 where\n651     H: core::borrow::Borrow<Hir>,\n652 {\n653     let mut extractor = literal::Extractor::new();\n654     extractor.kind(literal::ExtractKind::Prefix);\n655 \n656     let mut prefixes = literal::Seq::empty();\n657     for hir in hirs {\n658         prefixes.union(&mut extractor.extract(hir.borrow()));\n659     }\n660     debug!(\n661         \"prefixes (len={:?}, exact={:?}) extracted before optimization: {:?}\",\n662         prefixes.len(),\n663         prefixes.is_exact(),\n664         prefixes\n665     );\n666     match kind {\n667         MatchKind::All => {\n668             prefixes.sort();\n669             prefixes.dedup();\n670         }\n671         MatchKind::LeftmostFirst => {\n672             prefixes.optimize_for_prefix_by_preference();\n673         }\n674     }\n675     debug!(\n676         \"prefixes (len={:?}, exact={:?}) extracted after optimization: {:?}\",\n677         prefixes.len(),\n678         prefixes.is_exact(),\n679         prefixes\n680     );\n681     prefixes\n682 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}