{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/escape.rs\n// crate name is regex_automata\nuse crate::util::utf8;\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\nimpl core::fmt::Debug for DebugByte {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        if self.0 == b' ' {\n            return write!(f, \"' '\");\n        }\n        let mut bytes = [0u8; 10];\n        let mut len = 0;\n        for (i, mut b) in core::ascii::escape_default(self.0).enumerate() {\n            if i >= 2 && b'a' <= b && b <= b'f' {\n                b -= 32;\n            }\n            bytes[len] = b;\n            len += 1;\n        }\n        write!(f, \"{}\", core::str::from_utf8(& bytes[..len]).unwrap())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n22 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n23     // Special case ASCII space. It's too hard to read otherwise, so\n24     // put quotes around it. I sometimes wonder whether just '\\x20' would\n25     // be better...\n26     if self.0 == b' ' {\n27         return write!(f, \"' '\");\n28     }\n29     // 10 bytes is enough to cover any output from ascii::escape_default.\n30     let mut bytes = [0u8; 10];\n31     let mut len = 0;\n32     for (i, mut b) in core::ascii::escape_default(self.0).enumerate() {\n33         // capitalize \\xab to \\xAB\n34         if i >= 2 && b'a' <= b && b <= b'f' {\n35             b -= 32;\n36         }\n37         bytes[len] = b;\n38         len += 1;\n39     }\n40     write!(f, \"{}\", core::str::from_utf8(&bytes[..len]).unwrap())\n41 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}