{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy)]\nstruct Slots(u32);\n#[derive(Debug)]\nstruct SlotsIter {\n    slots: Slots,\n}\nimpl core::fmt::Debug for Slots {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        write!(f, \"S\")?;\n        for slot in self.iter() {\n            write!(f, \"-{:?}\", slot)?;\n        }\n        Ok(())\n    }\n}\nimpl Iterator for SlotsIter {\n    type Item = usize;\n    fn next(&mut self) -> Option<usize> {\n        let slot = self.slots.0.trailing_zeros().as_usize();\n        if slot >= Slots::LIMIT {\n            return None;\n        }\n        self.slots = self.slots.remove(slot);\n        Some(slot)\n    }\n}\nimpl Slots {\n    const LIMIT: usize = 32;\n    fn insert(self, slot: usize) -> Slots {}\n    fn remove(self, slot: usize) -> Slots {}\n    fn is_empty(self) -> bool {}\n    fn iter(self) -> SlotsIter {\n        SlotsIter { slots: self }\n    }\n    fn apply(self, at: usize, caller_explicit_slots: &mut [Option<NonMaxUsize>]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2939 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n2940     write!(f, \"S\")?;\n2941     for slot in self.iter() {\n2942         write!(f, \"-{:?}\", slot)?;\n2943     }\n2944     Ok(())\n2945 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}