{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy)]\nstruct Slots(u32);\n#[derive(Debug)]\nstruct SlotsIter {\n    slots: Slots,\n}\nimpl core::fmt::Debug for Slots {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        write!(f, \"S\")?;\n        for slot in self.iter() {\n            write!(f, \"-{:?}\", slot)?;\n        }\n        Ok(())\n    }\n}\nimpl Iterator for SlotsIter {\n    type Item = usize;\n    fn next(&mut self) -> Option<usize> {\n        let slot = self.slots.0.trailing_zeros().as_usize();\n        if slot >= Slots::LIMIT {\n            return None;\n        }\n        self.slots = self.slots.remove(slot);\n        Some(slot)\n    }\n}\nimpl Slots {\n    const LIMIT: usize = 32;\n    fn insert(self, slot: usize) -> Slots {}\n    fn remove(self, slot: usize) -> Slots {}\n    fn is_empty(self) -> bool {}\n    fn iter(self) -> SlotsIter {\n        SlotsIter { slots: self }\n    }\n    fn apply(self, at: usize, caller_explicit_slots: &mut [Option<NonMaxUsize>]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2939 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n2940     write!(f, \"S\")?;\n2941     for slot in self.iter() {\n2942         write!(f, \"-{:?}\", slot)?;\n2943     }\n2944     Ok(())\n2945 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}