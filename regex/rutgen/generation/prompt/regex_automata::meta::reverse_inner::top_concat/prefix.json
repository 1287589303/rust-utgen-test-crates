{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/reverse_inner.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse regex_syntax::hir::{self, literal, Hir, HirKind};\nuse crate::{util::prefilter::Prefilter, MatchKind};\nfn top_concat(mut hir: &Hir) -> Option<Vec<Hir>> {\n    loop {\n        hir = match hir.kind() {\n            HirKind::Empty\n            | HirKind::Literal(_)\n            | HirKind::Class(_)\n            | HirKind::Look(_)\n            | HirKind::Repetition(_)\n            | HirKind::Alternation(_) => return None,\n            HirKind::Capture(hir::Capture { ref sub, .. }) => sub,\n            HirKind::Concat(ref subs) => {\n                let concat = Hir::concat(subs.iter().map(|h| flatten(h)).collect());\n                return match concat.into_kind() {\n                    HirKind::Concat(xs) => Some(xs),\n                    _ => return None,\n                };\n            }\n        };\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Looks for a \"top level\" HirKind::Concat item in the given HIR. This will\n/// try to return one even if it's embedded in a capturing group, but is\n/// otherwise pretty conservative in what is returned.\n///\n/// The HIR returned is a complete copy of the concat with all capturing\n/// groups removed. In effect, the concat returned is \"flattened\" with respect\n/// to capturing groups. This makes the detection logic above for prefixes\n/// a bit simpler, and it works because 1) capturing groups never influence\n/// whether a match occurs or not and 2) capturing groups are not used when\n/// doing the reverse inner search to find the start of the match.\n166 fn top_concat(mut hir: &Hir) -> Option<Vec<Hir>> {\n167     loop {\n168         hir = match hir.kind() {\n169             HirKind::Empty\n170             | HirKind::Literal(_)\n171             | HirKind::Class(_)\n172             | HirKind::Look(_)\n173             | HirKind::Repetition(_)\n174             | HirKind::Alternation(_) => return None,\n175             HirKind::Capture(hir::Capture { ref sub, .. }) => sub,\n176             HirKind::Concat(ref subs) => {\n177                 // We are careful to only do the flattening/copy when we know\n178                 // we have a \"top level\" concat we can inspect. This avoids\n179                 // doing extra work in cases where we definitely won't use it.\n180                 // (This might still be wasted work if we can't go on to find\n181                 // some literals to extract.)\n182                 let concat =\n183                     Hir::concat(subs.iter().map(|h| flatten(h)).collect());\n184                 return match concat.into_kind() {\n185                     HirKind::Concat(xs) => Some(xs),\n186                     // It is actually possible for this case to occur, because\n187                     // 'Hir::concat' might simplify the expression to the point\n188                     // that concatenations are actually removed. One wonders\n189                     // whether this leads to other cases where we should be\n190                     // extracting literals, but in theory, I believe if we do\n191                     // get here, then it means that a \"real\" prefilter failed\n192                     // to be extracted and we should probably leave well enough\n193                     // alone. (A \"real\" prefilter is unbothered by \"top-level\n194                     // concats\" and \"capturing groups.\")\n195                     _ => return None,\n196                 };\n197             }\n198         };\n199     }\n200 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}