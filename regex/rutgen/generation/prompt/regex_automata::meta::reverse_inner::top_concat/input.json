{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/reverse_inner.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse regex_syntax::hir::{self, literal, Hir, HirKind};\nuse crate::{util::prefilter::Prefilter, MatchKind};\nfn top_concat(mut hir: &Hir) -> Option<Vec<Hir>> {\n    loop {\n        hir = match hir.kind() {\n            HirKind::Empty\n            | HirKind::Literal(_)\n            | HirKind::Class(_)\n            | HirKind::Look(_)\n            | HirKind::Repetition(_)\n            | HirKind::Alternation(_) => return None,\n            HirKind::Capture(hir::Capture { ref sub, .. }) => sub,\n            HirKind::Concat(ref subs) => {\n                let concat = Hir::concat(subs.iter().map(|h| flatten(h)).collect());\n                return match concat.into_kind() {\n                    HirKind::Concat(xs) => Some(xs),\n                    _ => return None,\n                };\n            }\n        };\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Looks for a \"top level\" HirKind::Concat item in the given HIR. This will\n/// try to return one even if it's embedded in a capturing group, but is\n/// otherwise pretty conservative in what is returned.\n///\n/// The HIR returned is a complete copy of the concat with all capturing\n/// groups removed. In effect, the concat returned is \"flattened\" with respect\n/// to capturing groups. This makes the detection logic above for prefixes\n/// a bit simpler, and it works because 1) capturing groups never influence\n/// whether a match occurs or not and 2) capturing groups are not used when\n/// doing the reverse inner search to find the start of the match.\n166 fn top_concat(mut hir: &Hir) -> Option<Vec<Hir>> {\n167     loop {\n168         hir = match hir.kind() {\n169             HirKind::Empty\n170             | HirKind::Literal(_)\n171             | HirKind::Class(_)\n172             | HirKind::Look(_)\n173             | HirKind::Repetition(_)\n174             | HirKind::Alternation(_) => return None,\n175             HirKind::Capture(hir::Capture { ref sub, .. }) => sub,\n176             HirKind::Concat(ref subs) => {\n177                 // We are careful to only do the flattening/copy when we know\n178                 // we have a \"top level\" concat we can inspect. This avoids\n179                 // doing extra work in cases where we definitely won't use it.\n180                 // (This might still be wasted work if we can't go on to find\n181                 // some literals to extract.)\n182                 let concat =\n183                     Hir::concat(subs.iter().map(|h| flatten(h)).collect());\n184                 return match concat.into_kind() {\n185                     HirKind::Concat(xs) => Some(xs),\n186                     // It is actually possible for this case to occur, because\n187                     // 'Hir::concat' might simplify the expression to the point\n188                     // that concatenations are actually removed. One wonders\n189                     // whether this leads to other cases where we should be\n190                     // extracting literals, but in theory, I believe if we do\n191                     // get here, then it means that a \"real\" prefilter failed\n192                     // to be extracted and we should probably leave well enough\n193                     // alone. (A \"real\" prefilter is unbothered by \"top-level\n194                     // concats\" and \"capturing groups.\")\n195                     _ => return None,\n196                 };\n197             }\n198         };\n199     }\n200 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}