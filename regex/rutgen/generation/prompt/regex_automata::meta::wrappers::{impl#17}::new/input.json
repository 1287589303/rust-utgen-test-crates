{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/wrappers.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError},\n        regex::RegexInfo,\n    },\n    nfa::thompson::{pikevm, NFA},\n    util::{prefilter::Prefilter, primitives::NonMaxUsize},\n    HalfMatch, Input, Match, MatchKind, PatternID, PatternSet,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa;\n#[cfg(feature = \"dfa-onepass\")]\nuse crate::dfa::onepass;\n#[cfg(feature = \"hybrid\")]\nuse crate::hybrid;\n#[cfg(feature = \"nfa-backtrack\")]\nuse crate::nfa::thompson::backtrack;\n#[derive(Debug)]\npub(crate) struct ReverseDFA(Option<ReverseDFAEngine>);\n#[derive(Debug)]\npub(crate) struct ReverseDFAEngine(\n    #[cfg(feature = \"dfa-build\")]\n    dfa::dense::DFA<Vec<u32>>,\n    #[cfg(not(feature = \"dfa-build\"))]\n    (),\n);\n#[derive(Clone, Debug)]\npub(crate) struct RegexInfo(Arc<RegexInfoI>);\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\nimpl ReverseDFA {\n    pub(crate) fn none() -> ReverseDFA {}\n    pub(crate) fn new(info: &RegexInfo, nfarev: &NFA) -> ReverseDFA {\n        ReverseDFA(ReverseDFAEngine::new(info, nfarev))\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn get(&self, _input: &Input<'_>) -> Option<&ReverseDFAEngine> {}\n    pub(crate) fn is_some(&self) -> bool {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\nimpl ReverseDFAEngine {\n    pub(crate) fn new(info: &RegexInfo, nfarev: &NFA) -> Option<ReverseDFAEngine> {\n        #[cfg(feature = \"dfa-build\")]\n        {\n            if !info.config().get_dfa() {\n                return None;\n            }\n            if let Some(state_limit) = info.config().get_dfa_state_limit() {\n                if nfarev.states().len() > state_limit {\n                    debug!(\n                        \"skipping full reverse DFA because NFA has {} states, \\\n                         which exceeds the heuristic limit of {}\",\n                        nfarev.states().len(), state_limit,\n                    );\n                    return None;\n                }\n            }\n            let size_limit = info.config().get_dfa_size_limit().map(|n| n / 2);\n            let dfa_config = dfa::dense::Config::new()\n                .match_kind(MatchKind::All)\n                .prefilter(None)\n                .accelerate(false)\n                .start_kind(dfa::StartKind::Anchored)\n                .starts_for_each_pattern(false)\n                .byte_classes(info.config().get_byte_classes())\n                .unicode_word_boundary(true)\n                .specialize_start_states(false)\n                .determinize_size_limit(size_limit)\n                .dfa_size_limit(size_limit);\n            let result = dfa::dense::Builder::new()\n                .configure(dfa_config)\n                .build_from_nfa(&nfarev);\n            let rev = match result {\n                Ok(rev) => rev,\n                Err(_err) => {\n                    debug!(\"full reverse DFA failed to build: {}\", _err);\n                    return None;\n                }\n            };\n            debug!(\"fully compiled reverse DFA built, {} bytes\", rev.memory_usage());\n            Some(ReverseDFAEngine(rev))\n        }\n        #[cfg(not(feature = \"dfa-build\"))] { None }\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_rev_limited(\n        &self,\n        input: &Input<'_>,\n        min_start: usize,\n    ) -> Result<Option<HalfMatch>, RetryError> {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1228 pub(crate) fn new(info: &RegexInfo, nfarev: &NFA) -> ReverseDFA {\n1229     ReverseDFA(ReverseDFAEngine::new(info, nfarev))\n1230 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}