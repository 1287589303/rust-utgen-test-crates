{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, utf8};\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone, Debug)]\npub struct UnicodeWordBoundaryError(());\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\nimpl LookMatcher {\n    pub fn new() -> LookMatcher {}\n    pub fn set_line_terminator(&mut self, byte: u8) -> &mut LookMatcher {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    #[inline]\n    pub fn matches(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_inline(&self, look: Look, haystack: &[u8], at: usize) -> bool {\n        match look {\n            Look::Start => self.is_start(haystack, at),\n            Look::End => self.is_end(haystack, at),\n            Look::StartLF => self.is_start_lf(haystack, at),\n            Look::EndLF => self.is_end_lf(haystack, at),\n            Look::StartCRLF => self.is_start_crlf(haystack, at),\n            Look::EndCRLF => self.is_end_crlf(haystack, at),\n            Look::WordAscii => self.is_word_ascii(haystack, at),\n            Look::WordAsciiNegate => self.is_word_ascii_negate(haystack, at),\n            Look::WordUnicode => self.is_word_unicode(haystack, at).unwrap(),\n            Look::WordUnicodeNegate => self.is_word_unicode_negate(haystack, at).unwrap(),\n            Look::WordStartAscii => self.is_word_start_ascii(haystack, at),\n            Look::WordEndAscii => self.is_word_end_ascii(haystack, at),\n            Look::WordStartUnicode => self.is_word_start_unicode(haystack, at).unwrap(),\n            Look::WordEndUnicode => self.is_word_end_unicode(haystack, at).unwrap(),\n            Look::WordStartHalfAscii => self.is_word_start_half_ascii(haystack, at),\n            Look::WordEndHalfAscii => self.is_word_end_half_ascii(haystack, at),\n            Look::WordStartHalfUnicode => {\n                self.is_word_start_half_unicode(haystack, at).unwrap()\n            }\n            Look::WordEndHalfUnicode => {\n                self.is_word_end_half_unicode(haystack, at).unwrap()\n            }\n        }\n    }\n    #[inline]\n    pub fn matches_set(&self, set: LookSet, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_set_inline(\n        &self,\n        set: LookSet,\n        haystack: &[u8],\n        at: usize,\n    ) -> bool {}\n    #[cfg(feature = \"alloc\")]\n    pub(crate) fn add_to_byteset(\n        &self,\n        look: Look,\n        set: &mut crate::util::alphabet::ByteClassSet,\n    ) {}\n    #[inline]\n    pub fn is_start(&self, _haystack: &[u8], at: usize) -> bool {\n        at == 0\n    }\n    #[inline]\n    pub fn is_end(&self, haystack: &[u8], at: usize) -> bool {\n        at == haystack.len()\n    }\n    #[inline]\n    pub fn is_start_lf(&self, haystack: &[u8], at: usize) -> bool {\n        self.is_start(haystack, at) || haystack[at - 1] == self.lineterm.0\n    }\n    #[inline]\n    pub fn is_end_lf(&self, haystack: &[u8], at: usize) -> bool {\n        self.is_end(haystack, at) || haystack[at] == self.lineterm.0\n    }\n    #[inline]\n    pub fn is_start_crlf(&self, haystack: &[u8], at: usize) -> bool {\n        self.is_start(haystack, at) || haystack[at - 1] == b'\\n'\n            || (haystack[at - 1] == b'\\r'\n                && (at >= haystack.len() || haystack[at] != b'\\n'))\n    }\n    #[inline]\n    pub fn is_end_crlf(&self, haystack: &[u8], at: usize) -> bool {\n        self.is_end(haystack, at) || haystack[at] == b'\\r'\n            || (haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'))\n    }\n    #[inline]\n    pub fn is_word_ascii(&self, haystack: &[u8], at: usize) -> bool {\n        let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n        let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n        word_before != word_after\n    }\n    #[inline]\n    pub fn is_word_ascii_negate(&self, haystack: &[u8], at: usize) -> bool {\n        !self.is_word_ascii(haystack, at)\n    }\n    #[inline]\n    pub fn is_word_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {\n        let word_before = is_word_char::rev(haystack, at)?;\n        let word_after = is_word_char::fwd(haystack, at)?;\n        Ok(word_before != word_after)\n    }\n    #[inline]\n    pub fn is_word_unicode_negate(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {\n        let word_before = at > 0\n            && match utf8::decode_last(&haystack[..at]) {\n                None | Some(Err(_)) => return Ok(false),\n                Some(Ok(_)) => is_word_char::rev(haystack, at)?,\n            };\n        let word_after = at < haystack.len()\n            && match utf8::decode(&haystack[at..]) {\n                None | Some(Err(_)) => return Ok(false),\n                Some(Ok(_)) => is_word_char::fwd(haystack, at)?,\n            };\n        Ok(word_before == word_after)\n    }\n    #[inline]\n    pub fn is_word_start_ascii(&self, haystack: &[u8], at: usize) -> bool {\n        let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n        let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n        !word_before && word_after\n    }\n    #[inline]\n    pub fn is_word_end_ascii(&self, haystack: &[u8], at: usize) -> bool {\n        let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n        let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n        word_before && !word_after\n    }\n    #[inline]\n    pub fn is_word_start_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {\n        let word_before = is_word_char::rev(haystack, at)?;\n        let word_after = is_word_char::fwd(haystack, at)?;\n        Ok(!word_before && word_after)\n    }\n    #[inline]\n    pub fn is_word_end_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {\n        let word_before = is_word_char::rev(haystack, at)?;\n        let word_after = is_word_char::fwd(haystack, at)?;\n        Ok(word_before && !word_after)\n    }\n    #[inline]\n    pub fn is_word_start_half_ascii(&self, haystack: &[u8], at: usize) -> bool {\n        let word_before = at > 0 && utf8::is_word_byte(haystack[at - 1]);\n        !word_before\n    }\n    #[inline]\n    pub fn is_word_end_half_ascii(&self, haystack: &[u8], at: usize) -> bool {\n        let word_after = at < haystack.len() && utf8::is_word_byte(haystack[at]);\n        !word_after\n    }\n    #[inline]\n    pub fn is_word_start_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {\n        let word_before = at > 0\n            && match utf8::decode_last(&haystack[..at]) {\n                None | Some(Err(_)) => return Ok(false),\n                Some(Ok(_)) => is_word_char::rev(haystack, at)?,\n            };\n        Ok(!word_before)\n    }\n    #[inline]\n    pub fn is_word_end_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {\n        let word_after = at < haystack.len()\n            && match utf8::decode(&haystack[at..]) {\n                None | Some(Err(_)) => return Ok(false),\n                Some(Ok(_)) => is_word_char::fwd(haystack, at)?,\n            };\n        Ok(!word_after)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like `matches`, but forcefully inlined.\n///\n/// # Panics\n///\n/// This panics when testing any Unicode word boundary assertion in this\n/// set and when the Unicode word data is not available. Specifically, this\n/// only occurs when the `unicode-word-boundary` feature is not enabled.\n///\n/// Since it's generally expected that this routine is called inside of\n/// a matching engine, callers should check the error condition when\n/// building the matching engine. If there is a Unicode word boundary\n/// in the matcher and the data isn't available, then the matcher should\n/// fail to build.\n///\n/// Callers can check the error condition with [`LookSet::available`].\n///\n/// This also may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n658 pub(crate) fn matches_inline(\n659     &self,\n660     look: Look,\n661     haystack: &[u8],\n662     at: usize,\n663 ) -> bool {\n664     match look {\n665         Look::Start => self.is_start(haystack, at),\n666         Look::End => self.is_end(haystack, at),\n667         Look::StartLF => self.is_start_lf(haystack, at),\n668         Look::EndLF => self.is_end_lf(haystack, at),\n669         Look::StartCRLF => self.is_start_crlf(haystack, at),\n670         Look::EndCRLF => self.is_end_crlf(haystack, at),\n671         Look::WordAscii => self.is_word_ascii(haystack, at),\n672         Look::WordAsciiNegate => self.is_word_ascii_negate(haystack, at),\n673         Look::WordUnicode => self.is_word_unicode(haystack, at).unwrap(),\n674         Look::WordUnicodeNegate => {\n675             self.is_word_unicode_negate(haystack, at).unwrap()\n676         }\n677         Look::WordStartAscii => self.is_word_start_ascii(haystack, at),\n678         Look::WordEndAscii => self.is_word_end_ascii(haystack, at),\n679         Look::WordStartUnicode => {\n680             self.is_word_start_unicode(haystack, at).unwrap()\n681         }\n682         Look::WordEndUnicode => {\n683             self.is_word_end_unicode(haystack, at).unwrap()\n684         }\n685         Look::WordStartHalfAscii => {\n686             self.is_word_start_half_ascii(haystack, at)\n687         }\n688         Look::WordEndHalfAscii => {\n689             self.is_word_end_half_ascii(haystack, at)\n690         }\n691         Look::WordStartHalfUnicode => {\n692             self.is_word_start_half_unicode(haystack, at).unwrap()\n693         }\n694         Look::WordEndHalfUnicode => {\n695             self.is_word_end_half_unicode(haystack, at).unwrap()\n696         }\n697     }\n698 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}