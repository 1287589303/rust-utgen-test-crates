{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &[u8]) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h [u8]) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h [u8]) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(\n        &'r self,\n        haystack: &'h [u8],\n    ) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h [u8], limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h [u8], rep: R) -> Cow<'h, [u8]> {\n        self.replacen(haystack, 1, rep)\n    }\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        rep: R,\n    ) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, [u8]> {\n        if let Some(rep) = rep.no_expansion() {\n            let mut it = self.find_iter(haystack).enumerate().peekable();\n            if it.peek().is_none() {\n                return Cow::Borrowed(haystack);\n            }\n            let mut new = Vec::with_capacity(haystack.len());\n            let mut last_match = 0;\n            for (i, m) in it {\n                new.extend_from_slice(&haystack[last_match..m.start()]);\n                new.extend_from_slice(&rep);\n                last_match = m.end();\n                if limit > 0 && i >= limit - 1 {\n                    break;\n                }\n            }\n            new.extend_from_slice(&haystack[last_match..]);\n            return Cow::Owned(new);\n        }\n        let mut it = self.captures_iter(haystack).enumerate().peekable();\n        if it.peek().is_none() {\n            return Cow::Borrowed(haystack);\n        }\n        let mut new = Vec::with_capacity(haystack.len());\n        let mut last_match = 0;\n        for (i, cap) in it {\n            let m = cap.get(0).unwrap();\n            new.extend_from_slice(&haystack[last_match..m.start()]);\n            rep.replace_append(&cap, &mut new);\n            last_match = m.end();\n            if limit > 0 && i >= limit - 1 {\n                break;\n            }\n        }\n        new.extend_from_slice(&haystack[last_match..]);\n        Cow::Owned(new)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Replaces the leftmost-first match in the given haystack with the\n/// replacement provided. The replacement can be a regular string (where\n/// `$N` and `$name` are expanded to match capture groups) or a function\n/// that takes a [`Captures`] and returns the replaced string.\n///\n/// If no match is found, then the haystack is returned unchanged. In that\n/// case, this implementation will likely return a `Cow::Borrowed` value\n/// such that no allocation is performed.\n///\n/// When a `Cow::Borrowed` is returned, the value returned is guaranteed\n/// to be equivalent to the `haystack` given.\n///\n/// # Replacement string syntax\n///\n/// All instances of `$ref` in the replacement string are replaced with\n/// the substring corresponding to the capture group identified by `ref`.\n///\n/// `ref` may be an integer corresponding to the index of the capture group\n/// (counted by order of opening parenthesis where `0` is the entire match)\n/// or it can be a name (consisting of letters, digits or underscores)\n/// corresponding to a named capture group.\n///\n/// If `ref` isn't a valid capture group (whether the name doesn't exist or\n/// isn't a valid index), then it is replaced with the empty string.\n///\n/// The longest possible name is used. For example, `$1a` looks up the\n/// capture group named `1a` and not the capture group at index `1`. To\n/// exert more precise control over the name, use braces, e.g., `${1}a`.\n///\n/// To write a literal `$` use `$$`.\n///\n/// # Example\n///\n/// Note that this function is polymorphic with respect to the replacement.\n/// In typical usage, this can just be a normal string:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"[^01]+\").unwrap();\n/// assert_eq!(re.replace(b\"1078910\", b\"\"), &b\"1010\"[..]);\n/// ```\n///\n/// But anything satisfying the [`Replacer`] trait will work. For example,\n/// a closure of type `|&Captures| -> String` provides direct access to the\n/// captures corresponding to a match. This allows one to access capturing\n/// group matches easily:\n///\n/// ```\n/// use regex::bytes::{Captures, Regex};\n///\n/// let re = Regex::new(r\"([^,\\s]+),\\s+(\\S+)\").unwrap();\n/// let result = re.replace(b\"Springsteen, Bruce\", |caps: &Captures| {\n///     let mut buf = vec![];\n///     buf.extend_from_slice(&caps[2]);\n///     buf.push(b' ');\n///     buf.extend_from_slice(&caps[1]);\n///     buf\n/// });\n/// assert_eq!(result, &b\"Bruce Springsteen\"[..]);\n/// ```\n///\n/// But this is a bit cumbersome to use all the time. Instead, a simple\n/// syntax is supported (as described above) that expands `$name` into the\n/// corresponding capture group. Here's the last example, but using this\n/// expansion technique with named capture groups:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(?<first>\\S+)\").unwrap();\n/// let result = re.replace(b\"Springsteen, Bruce\", b\"$first $last\");\n/// assert_eq!(result, &b\"Bruce Springsteen\"[..]);\n/// ```\n///\n/// Note that using `$2` instead of `$first` or `$1` instead of `$last`\n/// would produce the same result. To write a literal `$` use `$$`.\n///\n/// Sometimes the replacement string requires use of curly braces to\n/// delineate a capture group replacement when it is adjacent to some other\n/// literal text. For example, if we wanted to join two words together with\n/// an underscore:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(?<first>\\w+)\\s+(?<second>\\w+)\").unwrap();\n/// let result = re.replace(b\"deep fried\", b\"${first}_$second\");\n/// assert_eq!(result, &b\"deep_fried\"[..]);\n/// ```\n///\n/// Without the curly braces, the capture group name `first_` would be\n/// used, and since it doesn't exist, it would be replaced with the empty\n/// string.\n///\n/// Finally, sometimes you just want to replace a literal string with no\n/// regard for capturing group expansion. This can be done by wrapping a\n/// string with [`NoExpand`]:\n///\n/// ```\n/// use regex::bytes::{NoExpand, Regex};\n///\n/// let re = Regex::new(r\"(?<last>[^,\\s]+),\\s+(\\S+)\").unwrap();\n/// let result = re.replace(b\"Springsteen, Bruce\", NoExpand(b\"$2 $last\"));\n/// assert_eq!(result, &b\"$2 $last\"[..]);\n/// ```\n///\n/// Using `NoExpand` may also be faster, since the replacement string won't\n/// need to be parsed for the `$` syntax.\n755 pub fn replace<'h, R: Replacer>(\n756     &self,\n757     haystack: &'h [u8],\n758     rep: R,\n759 ) -> Cow<'h, [u8]> {\n760     self.replacen(haystack, 1, rep)\n761 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}