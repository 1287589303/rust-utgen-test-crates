{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[derive(Debug)]\npub(crate) struct StateSparseTransitionIter<'a> {\n    dense: StateTransitionIter<'a>,\n    cur: Option<(alphabet::Unit, alphabet::Unit, StateID)>,\n}\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\n#[derive(Debug)]\npub(crate) struct StateTransitionIter<'a> {\n    len: usize,\n    it: iter::Enumerate<slice::Iter<'a, StateID>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'a> Iterator for StateSparseTransitionIter<'a> {\n    type Item = (alphabet::Unit, alphabet::Unit, StateID);\n    fn next(&mut self) -> Option<(alphabet::Unit, alphabet::Unit, StateID)> {\n        while let Some((unit, next)) = self.dense.next() {\n            let (prev_start, prev_end, prev_next) = match self.cur {\n                Some(t) => t,\n                None => {\n                    self.cur = Some((unit, unit, next));\n                    continue;\n                }\n            };\n            if prev_next == next && !unit.is_eoi() {\n                self.cur = Some((prev_start, unit, prev_next));\n            } else {\n                self.cur = Some((unit, unit, next));\n                if prev_next != DEAD {\n                    return Some((prev_start, prev_end, prev_next));\n                }\n            }\n        }\n        if let Some((start, end, next)) = self.cur.take() {\n            if next != DEAD {\n                return Some((start, end, next));\n            }\n        }\n        None\n    }\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {}\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {}\n    pub fn as_u8(self) -> Option<u8> {}\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {}\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {\n        self.as_eoi().is_some()\n    }\n    pub fn is_word_byte(self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n4915 fn next(&mut self) -> Option<(alphabet::Unit, alphabet::Unit, StateID)> {\n4916     while let Some((unit, next)) = self.dense.next() {\n4917         let (prev_start, prev_end, prev_next) = match self.cur {\n4918             Some(t) => t,\n4919             None => {\n4920                 self.cur = Some((unit, unit, next));\n4921                 continue;\n4922             }\n4923         };\n4924         if prev_next == next && !unit.is_eoi() {\n4925             self.cur = Some((prev_start, unit, prev_next));\n4926         } else {\n4927             self.cur = Some((unit, unit, next));\n4928             if prev_next != DEAD {\n4929                 return Some((prev_start, prev_end, prev_next));\n4930             }\n4931         }\n4932     }\n4933     if let Some((start, end, next)) = self.cur.take() {\n4934         if next != DEAD {\n4935             return Some((start, end, next));\n4936         }\n4937     }\n4938     None\n4939 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}