{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/search.rs\n// crate name is regex_automata\nuse crate::{\n    dfa::{accel, automaton::{Automaton, OverlappingState}},\n    util::{\n        prefilter::Prefilter, primitives::StateID,\n        search::{Anchored, HalfMatch, Input, Span},\n    },\n    MatchError,\n};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {\n        self.anchored\n    }\n    #[inline]\n    pub fn get_earliest(&self) -> bool {\n        self.earliest\n    }\n    #[inline]\n    pub fn is_done(&self) -> bool {\n        self.get_span().start > self.get_span().end\n    }\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\nimpl Anchored {\n    #[inline]\n    pub fn is_anchored(&self) -> bool {\n        matches!(* self, Anchored::Yes | Anchored::Pattern(_))\n    }\n    #[inline]\n    pub fn pattern(&self) -> Option<PatternID> {}\n}\n#[inline(never)]\npub fn find_fwd<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n) -> Result<Option<HalfMatch>, MatchError> {\n    if input.is_done() {\n        return Ok(None);\n    }\n    let pre = if input.get_anchored().is_anchored() {\n        None\n    } else {\n        dfa.get_prefilter()\n    };\n    if pre.is_some() {\n        if input.get_earliest() {\n            find_fwd_imp(dfa, input, pre, true)\n        } else {\n            find_fwd_imp(dfa, input, pre, false)\n        }\n    } else {\n        if input.get_earliest() {\n            find_fwd_imp(dfa, input, None, true)\n        } else {\n            find_fwd_imp(dfa, input, None, false)\n        }\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn find_fwd_imp<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n    pre: Option<&'_ Prefilter>,\n    earliest: bool,\n) -> Result<Option<HalfMatch>, MatchError> {\n    let universal_start = dfa.universal_start_state(Anchored::No).is_some();\n    let mut mat = None;\n    let mut sid = init_fwd(dfa, input)?;\n    let mut at = input.start();\n    macro_rules! next_unchecked {\n        ($sid:expr, $at:expr) => {\n            { let byte = * input.haystack().get_unchecked($at); dfa\n            .next_state_unchecked($sid, byte) }\n        };\n    }\n    if let Some(ref pre) = pre {\n        let span = Span::from(at..input.end());\n        match pre.find(input.haystack(), span) {\n            None => return Ok(mat),\n            Some(ref span) => {\n                at = span.start;\n                if !universal_start {\n                    sid = prefilter_restart(dfa, &input, at)?;\n                }\n            }\n        }\n    }\n    while at < input.end() {\n        let mut prev_sid;\n        while at < input.end() {\n            prev_sid = unsafe { next_unchecked!(sid, at) };\n            if dfa.is_special_state(prev_sid) || at + 3 >= input.end() {\n                core::mem::swap(&mut prev_sid, &mut sid);\n                break;\n            }\n            at += 1;\n            sid = unsafe { next_unchecked!(prev_sid, at) };\n            if dfa.is_special_state(sid) {\n                break;\n            }\n            at += 1;\n            prev_sid = unsafe { next_unchecked!(sid, at) };\n            if dfa.is_special_state(prev_sid) {\n                core::mem::swap(&mut prev_sid, &mut sid);\n                break;\n            }\n            at += 1;\n            sid = unsafe { next_unchecked!(prev_sid, at) };\n            if dfa.is_special_state(sid) {\n                break;\n            }\n            at += 1;\n        }\n        if dfa.is_special_state(sid) {\n            if dfa.is_start_state(sid) {\n                if let Some(ref pre) = pre {\n                    let span = Span::from(at..input.end());\n                    match pre.find(input.haystack(), span) {\n                        None => return Ok(mat),\n                        Some(ref span) => {\n                            if span.start > at {\n                                at = span.start;\n                                if !universal_start {\n                                    sid = prefilter_restart(dfa, &input, at)?;\n                                }\n                                continue;\n                            }\n                        }\n                    }\n                } else if dfa.is_accel_state(sid) {\n                    let needles = dfa.accelerator(sid);\n                    at = accel::find_fwd(needles, input.haystack(), at + 1)\n                        .unwrap_or(input.end());\n                    continue;\n                }\n            } else if dfa.is_match_state(sid) {\n                let pattern = dfa.match_pattern(sid, 0);\n                mat = Some(HalfMatch::new(pattern, at));\n                if earliest {\n                    return Ok(mat);\n                }\n                if dfa.is_accel_state(sid) {\n                    let needles = dfa.accelerator(sid);\n                    at = accel::find_fwd(needles, input.haystack(), at + 1)\n                        .unwrap_or(input.end());\n                    continue;\n                }\n            } else if dfa.is_accel_state(sid) {\n                let needs = dfa.accelerator(sid);\n                at = accel::find_fwd(needs, input.haystack(), at + 1)\n                    .unwrap_or(input.end());\n                continue;\n            } else if dfa.is_dead_state(sid) {\n                return Ok(mat);\n            } else {\n                return Err(MatchError::quit(input.haystack()[at], at));\n            }\n        }\n        at += 1;\n    }\n    eoi_fwd(dfa, input, &mut sid, &mut mat)?;\n    Ok(mat)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n15 pub fn find_fwd<A: Automaton + ?Sized>(\n16     dfa: &A,\n17     input: &Input<'_>,\n18 ) -> Result<Option<HalfMatch>, MatchError> {\n19     if input.is_done() {\n20         return Ok(None);\n21     }\n22     let pre = if input.get_anchored().is_anchored() {\n23         None\n24     } else {\n25         dfa.get_prefilter()\n26     };\n27     // Searching with a pattern ID is always anchored, so we should never use\n28     // a prefilter.\n29     if pre.is_some() {\n30         if input.get_earliest() {\n31             find_fwd_imp(dfa, input, pre, true)\n32         } else {\n33             find_fwd_imp(dfa, input, pre, false)\n34         }\n35     } else {\n36         if input.get_earliest() {\n37             find_fwd_imp(dfa, input, None, true)\n38         } else {\n39             find_fwd_imp(dfa, input, None, false)\n40         }\n41     }\n42 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}