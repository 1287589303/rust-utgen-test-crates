{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/hybrid/search.rs\n// crate name is regex_automata\nuse crate::{\n    hybrid::{\n        dfa::{Cache, OverlappingState, DFA},\n        id::LazyStateID,\n    },\n    util::{prefilter::Prefilter, search::{HalfMatch, Input, MatchError, Span}},\n};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Debug)]\npub struct DFA {\n    config: Config,\n    nfa: thompson::NFA,\n    stride2: usize,\n    start_map: StartByteMap,\n    classes: ByteClasses,\n    quitset: ByteSet,\n    cache_capacity: usize,\n}\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// The transition table.\n    ///\n    /// Given a `current` LazyStateID and an `input` byte, the next state can\n    /// be computed via `trans[untagged(current) + equiv_class(input)]`. Notice\n    /// that no multiplication is used. That's because state identifiers are\n    /// \"premultiplied.\"\n    ///\n    /// Note that the next state may be the \"unknown\" state. In this case, the\n    /// next state is not known and determinization for `current` on `input`\n    /// must be performed.\n    trans: Vec<LazyStateID>,\n    /// The starting states for this DFA.\n    ///\n    /// These are computed lazily. Initially, these are all set to \"unknown\"\n    /// lazy state IDs.\n    ///\n    /// When 'starts_for_each_pattern' is disabled (the default), then the size\n    /// of this is constrained to the possible starting configurations based\n    /// on the search parameters. (At time of writing, that's 4.) However,\n    /// when starting states for each pattern is enabled, then there are N\n    /// additional groups of starting states, where each group reflects the\n    /// different possible configurations and N is the number of patterns.\n    starts: Vec<LazyStateID>,\n    /// A sequence of NFA/DFA powerset states that have been computed for this\n    /// lazy DFA. This sequence is indexable by untagged LazyStateIDs. (Every\n    /// tagged LazyStateID can be used to index this sequence by converting it\n    /// to its untagged form.)\n    states: Vec<State>,\n    /// A map from states to their corresponding IDs. This map may be accessed\n    /// via the raw byte representation of a state, which means that a `State`\n    /// does not need to be allocated to determine whether it already exists\n    /// in this map. Indeed, the existence of such a state is what determines\n    /// whether we allocate a new `State` or not.\n    ///\n    /// The higher level idea here is that we do just enough determinization\n    /// for a state to check whether we've already computed it. If we have,\n    /// then we can save a little (albeit not much) work. The real savings is\n    /// in memory usage. If we never checked for trivially duplicate states,\n    /// then our memory usage would explode to unreasonable levels.\n    states_to_id: StateMap,\n    /// Sparse sets used to track which NFA states have been visited during\n    /// various traversals.\n    sparses: SparseSets,\n    /// Scratch space for traversing the NFA graph. (We use space on the heap\n    /// instead of the call stack.)\n    stack: Vec<NFAStateID>,\n    /// Scratch space for building a NFA/DFA powerset state. This is used to\n    /// help amortize allocation since not every powerset state generated is\n    /// added to the cache. In particular, if it already exists in the cache,\n    /// then there is no need to allocate a new `State` for it.\n    scratch_state_builder: StateBuilderEmpty,\n    /// A simple abstraction for handling the saving of at most a single state\n    /// across a cache clearing. This is required for correctness. Namely, if\n    /// adding a new state after clearing the cache fails, then the caller\n    /// must retain the ability to continue using the state ID given. The\n    /// state corresponding to the state ID is what we preserve across cache\n    /// clearings.\n    state_saver: StateSaver,\n    /// The memory usage, in bytes, used by 'states' and 'states_to_id'. We\n    /// track this as new states are added since states use a variable amount\n    /// of heap. Tracking this as we add states makes it possible to compute\n    /// the total amount of memory used by the determinizer in constant time.\n    memory_usage_state: usize,\n    /// The number of times the cache has been cleared. When a minimum cache\n    /// clear count is set, then the cache will return an error instead of\n    /// clearing the cache if the count has been exceeded.\n    clear_count: usize,\n    /// The total number of bytes searched since the last time this cache was\n    /// cleared, not including the current search.\n    ///\n    /// This can be added to the length of the current search to get the true\n    /// total number of bytes searched.\n    ///\n    /// This is generally only non-zero when the\n    /// `Cache::search_{start,update,finish}` APIs are used to track search\n    /// progress.\n    bytes_searched: usize,\n    /// The progress of the current search.\n    ///\n    /// This is only non-`None` when callers utlize the `Cache::search_start`,\n    /// `Cache::search_update` and `Cache::search_finish` APIs.\n    ///\n    /// The purpose of recording search progress is to be able to make a\n    /// determination about the efficiency of the cache. Namely, by keeping\n    /// track of the\n    progress: Option<SearchProgress>,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {\n        self.earliest\n    }\n    #[inline]\n    pub fn is_done(&self) -> bool {\n        self.get_span().start > self.get_span().end\n    }\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n#[inline(never)]\npub(crate) fn find_rev(\n    dfa: &DFA,\n    cache: &mut Cache,\n    input: &Input<'_>,\n) -> Result<Option<HalfMatch>, MatchError> {\n    if input.is_done() {\n        return Ok(None);\n    }\n    if input.get_earliest() {\n        find_rev_imp(dfa, cache, input, true)\n    } else {\n        find_rev_imp(dfa, cache, input, false)\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn find_rev_imp(\n    dfa: &DFA,\n    cache: &mut Cache,\n    input: &Input<'_>,\n    earliest: bool,\n) -> Result<Option<HalfMatch>, MatchError> {\n    let mut mat = None;\n    let mut sid = init_rev(dfa, cache, input)?;\n    if input.start() == input.end() {\n        eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n        return Ok(mat);\n    }\n    let mut at = input.end() - 1;\n    macro_rules! next_unchecked {\n        ($sid:expr, $at:expr) => {\n            { let byte = * input.haystack().get_unchecked($at); dfa\n            .next_state_untagged_unchecked(cache, $sid, byte) }\n        };\n    }\n    cache.search_start(at);\n    loop {\n        if sid.is_tagged() {\n            cache.search_update(at);\n            sid = dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?;\n        } else {\n            let mut prev_sid = sid;\n            while at >= input.start() {\n                prev_sid = unsafe { next_unchecked!(sid, at) };\n                if prev_sid.is_tagged() || at <= input.start().saturating_add(3) {\n                    core::mem::swap(&mut prev_sid, &mut sid);\n                    break;\n                }\n                at -= 1;\n                sid = unsafe { next_unchecked!(prev_sid, at) };\n                if sid.is_tagged() {\n                    break;\n                }\n                at -= 1;\n                prev_sid = unsafe { next_unchecked!(sid, at) };\n                if prev_sid.is_tagged() {\n                    core::mem::swap(&mut prev_sid, &mut sid);\n                    break;\n                }\n                at -= 1;\n                sid = unsafe { next_unchecked!(prev_sid, at) };\n                if sid.is_tagged() {\n                    break;\n                }\n                at -= 1;\n            }\n            if sid.is_unknown() {\n                cache.search_update(at);\n                sid = dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?;\n            }\n        }\n        if sid.is_tagged() {\n            if sid.is_start() {} else if sid.is_match() {\n                let pattern = dfa.match_pattern(cache, sid, 0);\n                mat = Some(HalfMatch::new(pattern, at + 1));\n                if earliest {\n                    cache.search_finish(at);\n                    return Ok(mat);\n                }\n            } else if sid.is_dead() {\n                cache.search_finish(at);\n                return Ok(mat);\n            } else if sid.is_quit() {\n                cache.search_finish(at);\n                return Err(MatchError::quit(input.haystack()[at], at));\n            } else {\n                debug_assert!(sid.is_unknown());\n                unreachable!(\"sid being unknown is a bug\");\n            }\n        }\n        if at == input.start() {\n            break;\n        }\n        at -= 1;\n    }\n    cache.search_finish(input.start());\n    eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n    Ok(mat)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n296 pub(crate) fn find_rev(\n297     dfa: &DFA,\n298     cache: &mut Cache,\n299     input: &Input<'_>,\n300 ) -> Result<Option<HalfMatch>, MatchError> {\n301     if input.is_done() {\n302         return Ok(None);\n303     }\n304     if input.get_earliest() {\n305         find_rev_imp(dfa, cache, input, true)\n306     } else {\n307         find_rev_imp(dfa, cache, input, false)\n308     }\n309 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}