{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/minimize.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem};\nuse alloc::{collections::BTreeMap, rc::Rc, vec, vec::Vec};\nuse crate::{\n    dfa::{automaton::Automaton, dense, DEAD},\n    util::{alphabet, primitives::{PatternID, StateID}},\n};\npub(crate) struct Minimizer<'a> {\n    dfa: &'a mut dense::OwnedDFA,\n    in_transitions: Vec<Vec<Vec<StateID>>>,\n    partitions: Vec<StateSet>,\n    waiting: Vec<StateSet>,\n}\n#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\nstruct StateSet {\n    ids: Rc<RefCell<Vec<StateID>>>,\n}\npub(crate) struct State<'a> {\n    id: StateID,\n    stride2: usize,\n    transitions: &'a [StateID],\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'a> Minimizer<'a> {\n    pub fn new(dfa: &'a mut dense::OwnedDFA) -> Minimizer<'a> {}\n    pub fn run(mut self) {}\n    fn find_waiting(&self, set: &StateSet) -> Option<usize> {}\n    fn find_incoming_to(\n        &self,\n        b: alphabet::Unit,\n        set: &StateSet,\n        incoming: &mut StateSet,\n    ) {}\n    fn initial_partitions(dfa: &dense::OwnedDFA) -> Vec<StateSet> {\n        let mut matching: BTreeMap<Vec<PatternID>, StateSet> = BTreeMap::new();\n        let mut is_quit = StateSet::empty();\n        let mut no_match = StateSet::empty();\n        for state in dfa.states() {\n            if dfa.is_match_state(state.id()) {\n                let mut pids = vec![];\n                for i in 0..dfa.match_len(state.id()) {\n                    pids.push(dfa.match_pattern(state.id(), i));\n                }\n                matching.entry(pids).or_insert(StateSet::empty()).add(state.id());\n            } else if dfa.is_quit_state(state.id()) {\n                is_quit.add(state.id());\n            } else {\n                no_match.add(state.id());\n            }\n        }\n        let mut sets: Vec<StateSet> = matching.into_iter().map(|(_, set)| set).collect();\n        sets.push(no_match);\n        sets.push(is_quit);\n        sets\n    }\n    fn incoming_transitions(dfa: &dense::OwnedDFA) -> Vec<Vec<Vec<StateID>>> {}\n}\nimpl StateSet {\n    fn empty() -> StateSet {\n        StateSet {\n            ids: Rc::new(RefCell::new(vec![])),\n        }\n    }\n    fn add(&mut self, id: StateID) {\n        self.ids.borrow_mut().push(id);\n    }\n    fn min(&self) -> StateID {}\n    fn canonicalize(&mut self) {}\n    fn clear(&mut self) {}\n    fn len(&self) -> usize {}\n    fn is_empty(&self) -> bool {}\n    fn deep_clone(&self) -> StateSet {}\n    fn iter<F: FnMut(StateID)>(&self, mut f: F) {}\n    fn intersection(&self, other: &StateSet, dest: &mut StateSet) {}\n    fn subtract(&self, other: &StateSet, dest: &mut StateSet) {}\n}\nimpl<'a> State<'a> {\n    pub(crate) fn transitions(&self) -> StateTransitionIter<'_> {}\n    pub(crate) fn sparse_transitions(&self) -> StateSparseTransitionIter<'_> {}\n    pub(crate) fn id(&self) -> StateID {\n        self.id\n    }\n    #[cfg(feature = \"dfa-build\")]\n    fn accelerate(&self, classes: &ByteClasses) -> Option<Accel> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n300 fn initial_partitions(dfa: &dense::OwnedDFA) -> Vec<StateSet> {\n301     // For match states, we know that two match states with different\n302     // pattern ID lists will *always* be distinct, so we can partition them\n303     // initially based on that.\n304     let mut matching: BTreeMap<Vec<PatternID>, StateSet> = BTreeMap::new();\n305     let mut is_quit = StateSet::empty();\n306     let mut no_match = StateSet::empty();\n307     for state in dfa.states() {\n308         if dfa.is_match_state(state.id()) {\n309             let mut pids = vec![];\n310             for i in 0..dfa.match_len(state.id()) {\n311                 pids.push(dfa.match_pattern(state.id(), i));\n312             }\n313             matching\n314                 .entry(pids)\n315                 .or_insert(StateSet::empty())\n316                 .add(state.id());\n317         } else if dfa.is_quit_state(state.id()) {\n318             is_quit.add(state.id());\n319         } else {\n320             no_match.add(state.id());\n321         }\n322     }\n323 \n324     let mut sets: Vec<StateSet> =\n325         matching.into_iter().map(|(_, set)| set).collect();\n326     sets.push(no_match);\n327     sets.push(is_quit);\n328     sets\n329 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}