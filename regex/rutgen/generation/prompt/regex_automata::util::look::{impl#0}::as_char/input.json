{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, utf8};\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\nimpl Look {\n    #[inline]\n    pub const fn reversed(self) -> Look {}\n    #[inline]\n    pub const fn as_repr(self) -> u32 {}\n    #[inline]\n    pub const fn from_repr(repr: u32) -> Option<Look> {}\n    #[inline]\n    pub const fn as_char(self) -> char {\n        match self {\n            Look::Start => 'A',\n            Look::End => 'z',\n            Look::StartLF => '^',\n            Look::EndLF => '$',\n            Look::StartCRLF => 'r',\n            Look::EndCRLF => 'R',\n            Look::WordAscii => 'b',\n            Look::WordAsciiNegate => 'B',\n            Look::WordUnicode => '𝛃',\n            Look::WordUnicodeNegate => '𝚩',\n            Look::WordStartAscii => '<',\n            Look::WordEndAscii => '>',\n            Look::WordStartUnicode => '〈',\n            Look::WordEndUnicode => '〉',\n            Look::WordStartHalfAscii => '◁',\n            Look::WordEndHalfAscii => '▷',\n            Look::WordStartHalfUnicode => '◀',\n            Look::WordEndHalfUnicode => '▶',\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a convenient single codepoint representation of this\n/// look-around assertion. Each assertion is guaranteed to be represented\n/// by a distinct character.\n///\n/// This is useful for succinctly representing a look-around assertion in\n/// human friendly but succinct output intended for a programmer working on\n/// regex internals.\n214 pub const fn as_char(self) -> char {\n215     match self {\n216         Look::Start => 'A',\n217         Look::End => 'z',\n218         Look::StartLF => '^',\n219         Look::EndLF => '$',\n220         Look::StartCRLF => 'r',\n221         Look::EndCRLF => 'R',\n222         Look::WordAscii => 'b',\n223         Look::WordAsciiNegate => 'B',\n224         Look::WordUnicode => '𝛃',\n225         Look::WordUnicodeNegate => '𝚩',\n226         Look::WordStartAscii => '<',\n227         Look::WordEndAscii => '>',\n228         Look::WordStartUnicode => '〈',\n229         Look::WordEndUnicode => '〉',\n230         Look::WordStartHalfAscii => '◁',\n231         Look::WordEndHalfAscii => '▷',\n232         Look::WordStartHalfUnicode => '◀',\n233         Look::WordEndHalfUnicode => '▶',\n234     }\n235 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}