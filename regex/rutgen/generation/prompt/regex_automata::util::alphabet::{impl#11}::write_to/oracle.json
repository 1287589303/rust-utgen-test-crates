{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Debug)]\npub struct SerializeError {\n    /// The name of the thing that a buffer is too small for.\n    ///\n    /// Currently, the only kind of serialization error is one that is\n    /// committed by a caller: providing a destination buffer that is too\n    /// small to fit the serialized object. This makes sense conceptually,\n    /// since every valid inhabitant of a type should be serializable.\n    ///\n    /// This is somewhat exposed in the public API of this crate. For example,\n    /// the `to_bytes_{big,little}_endian` APIs return a `Vec<u8>` and are\n    /// guaranteed to never panic or error. This is only possible because the\n    /// implementation guarantees that it will allocate a `Vec<u8>` that is\n    /// big enough.\n    ///\n    /// In summary, if a new serialization error kind needs to be added, then\n    /// it will need careful consideration.\n    what: &'static str,\n}\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\nstruct BitSet([u128; 2]);\nimpl ByteSet {\n    pub(crate) fn empty() -> ByteSet {}\n    pub(crate) fn add(&mut self, byte: u8) {}\n    pub(crate) fn remove(&mut self, byte: u8) {}\n    pub(crate) fn contains(&self, byte: u8) -> bool {}\n    pub(crate) fn contains_range(&self, start: u8, end: u8) -> bool {}\n    pub(crate) fn iter(&self) -> ByteSetIter {}\n    pub(crate) fn iter_ranges(&self) -> ByteSetRangeIter {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteSet, usize), DeserializeError> {}\n    pub(crate) fn write_to<E: crate::util::wire::Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {\n        use core::mem::size_of;\n        let nwrite = self.write_to_len();\n        if dst.len() < nwrite {\n            return Err(SerializeError::buffer_too_small(\"byte set\"));\n        }\n        let mut nw = 0;\n        E::write_u128(self.bits.0[0], &mut dst[nw..]);\n        nw += size_of::<u128>();\n        E::write_u128(self.bits.0[1], &mut dst[nw..]);\n        nw += size_of::<u128>();\n        assert_eq!(nwrite, nw, \"expected to write certain number of bytes\",);\n        assert_eq!(nw % 8, 0, \"expected to write multiple of 8 bytes for byte set\",);\n        Ok(nw)\n    }\n    pub(crate) fn write_to_len(&self) -> usize {\n        2 * core::mem::size_of::<u128>()\n    }\n}\nimpl SerializeError {\n    pub(crate) fn buffer_too_small(what: &'static str) -> SerializeError {\n        SerializeError { what }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Writes this byte set to the given byte buffer. If the given buffer is\n/// too small, then an error is returned. Upon success, the total number of\n/// bytes written is returned. The number of bytes written is guaranteed to\n/// be a multiple of 8.\n826 pub(crate) fn write_to<E: crate::util::wire::Endian>(\n827     &self,\n828     dst: &mut [u8],\n829 ) -> Result<usize, SerializeError> {\n830     use core::mem::size_of;\n831 \n832     let nwrite = self.write_to_len();\n833     if dst.len() < nwrite {\n834         return Err(SerializeError::buffer_too_small(\"byte set\"));\n835     }\n836     let mut nw = 0;\n837     E::write_u128(self.bits.0[0], &mut dst[nw..]);\n838     nw += size_of::<u128>();\n839     E::write_u128(self.bits.0[1], &mut dst[nw..]);\n840     nw += size_of::<u128>();\n841     assert_eq!(nwrite, nw, \"expected to write certain number of bytes\",);\n842     assert_eq!(\n843         nw % 8,\n844         0,\n845         \"expected to write multiple of 8 bytes for byte set\",\n846     );\n847     Ok(nw)\n848 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}