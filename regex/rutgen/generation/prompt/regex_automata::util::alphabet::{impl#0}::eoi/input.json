{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\nenum UnitKind {\n    /// Represents a byte value, or more typically, an equivalence class\n    /// represented as a byte value.\n    U8(u8),\n    /// Represents the \"end of input\" sentinel. We regretably use a `u16`\n    /// here since the maximum sentinel value is `256`. Thankfully, we don't\n    /// actually store a `Unit` anywhere, so this extra space shouldn't be too\n    /// bad.\n    EOI(u16),\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {}\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {\n        assert!(\n            num_byte_equiv_classes <= 256,\n            \"max number of byte-based equivalent classes is 256, but got {}\",\n            num_byte_equiv_classes,\n        );\n        Unit(UnitKind::EOI(u16::try_from(num_byte_equiv_classes).unwrap()))\n    }\n    pub fn as_u8(self) -> Option<u8> {}\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {}\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {}\n    pub fn is_word_byte(self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new \"end of input\" haystack unit.\n///\n/// The value given is the sentinel value used by this unit to represent\n/// the \"end of input.\" The value should be the total number of equivalence\n/// classes in the corresponding alphabet. Its maximum value is `256`,\n/// which occurs when every byte is its own equivalence class.\n///\n/// # Panics\n///\n/// This panics when `num_byte_equiv_classes` is greater than `256`.\n117 pub fn eoi(num_byte_equiv_classes: usize) -> Unit {\n118     assert!(\n119         num_byte_equiv_classes <= 256,\n120         \"max number of byte-based equivalent classes is 256, but got {}\",\n121         num_byte_equiv_classes,\n122     );\n123     Unit(UnitKind::EOI(u16::try_from(num_byte_equiv_classes).unwrap()))\n124 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}