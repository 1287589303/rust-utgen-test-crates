{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/search.rs\n// crate name is regex_automata\nuse crate::{\n    dfa::{accel, automaton::{Automaton, OverlappingState}},\n    util::{\n        prefilter::Prefilter, primitives::StateID,\n        search::{Anchored, HalfMatch, Input, Span},\n    },\n    MatchError,\n};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {\n        self.set_span(Span { start, ..self.get_span() });\n    }\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn prefilter_restart<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n    at: usize,\n) -> Result<StateID, MatchError> {\n    let mut input = input.clone();\n    input.set_start(at);\n    init_fwd(dfa, &input)\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn init_fwd<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n) -> Result<StateID, MatchError> {\n    let sid = dfa.start_state_forward(input)?;\n    debug_assert!(! dfa.is_match_state(sid));\n    Ok(sid)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Re-compute the starting state that a DFA should be in after finding a\n/// prefilter candidate match at the position `at`.\n///\n/// The function with the same name has a bit more docs in hybrid/search.rs.\n636 fn prefilter_restart<A: Automaton + ?Sized>(\n637     dfa: &A,\n638     input: &Input<'_>,\n639     at: usize,\n640 ) -> Result<StateID, MatchError> {\n641     let mut input = input.clone();\n642     input.set_start(at);\n643     init_fwd(dfa, &input)\n644 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}