{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    #[inline]\n    pub fn empty() -> Hir {\n        let props = Properties::empty();\n        Hir { kind: HirKind::Empty, props }\n    }\n    #[inline]\n    pub fn fail() -> Hir {}\n    #[inline]\n    pub fn literal<B: Into<Box<[u8]>>>(lit: B) -> Hir {}\n    #[inline]\n    pub fn class(class: Class) -> Hir {}\n    #[inline]\n    pub fn look(look: Look) -> Hir {}\n    #[inline]\n    pub fn repetition(mut rep: Repetition) -> Hir {}\n    #[inline]\n    pub fn capture(capture: Capture) -> Hir {}\n    pub fn concat(subs: Vec<Hir>) -> Hir {\n        let mut new = vec![];\n        let mut prior_lit: Option<Vec<u8>> = None;\n        for sub in subs {\n            let (kind, props) = sub.into_parts();\n            match kind {\n                HirKind::Literal(Literal(bytes)) => {\n                    if let Some(ref mut prior_bytes) = prior_lit {\n                        prior_bytes.extend_from_slice(&bytes);\n                    } else {\n                        prior_lit = Some(bytes.to_vec());\n                    }\n                }\n                HirKind::Concat(subs2) => {\n                    for sub2 in subs2 {\n                        let (kind2, props2) = sub2.into_parts();\n                        match kind2 {\n                            HirKind::Literal(Literal(bytes)) => {\n                                if let Some(ref mut prior_bytes) = prior_lit {\n                                    prior_bytes.extend_from_slice(&bytes);\n                                } else {\n                                    prior_lit = Some(bytes.to_vec());\n                                }\n                            }\n                            kind2 => {\n                                if let Some(prior_bytes) = prior_lit.take() {\n                                    new.push(Hir::literal(prior_bytes));\n                                }\n                                new.push(Hir { kind: kind2, props: props2 });\n                            }\n                        }\n                    }\n                }\n                HirKind::Empty => {}\n                kind => {\n                    if let Some(prior_bytes) = prior_lit.take() {\n                        new.push(Hir::literal(prior_bytes));\n                    }\n                    new.push(Hir { kind, props });\n                }\n            }\n        }\n        if let Some(prior_bytes) = prior_lit.take() {\n            new.push(Hir::literal(prior_bytes));\n        }\n        if new.is_empty() {\n            return Hir::empty();\n        } else if new.len() == 1 {\n            return new.pop().unwrap();\n        }\n        let props = Properties::concat(&new);\n        Hir {\n            kind: HirKind::Concat(new),\n            props,\n        }\n    }\n    pub fn alternation(subs: Vec<Hir>) -> Hir {}\n    #[inline]\n    pub fn dot(dot: Dot) -> Hir {}\n}\nimpl Properties {\n    fn empty() -> Properties {}\n    fn literal(lit: &Literal) -> Properties {}\n    fn class(class: &Class) -> Properties {}\n    fn look(look: Look) -> Properties {}\n    fn repetition(rep: &Repetition) -> Properties {}\n    fn capture(capture: &Capture) -> Properties {}\n    fn concat(concat: &[Hir]) -> Properties {\n        let mut props = PropertiesI {\n            minimum_len: Some(0),\n            maximum_len: Some(0),\n            look_set: LookSet::empty(),\n            look_set_prefix: LookSet::empty(),\n            look_set_suffix: LookSet::empty(),\n            look_set_prefix_any: LookSet::empty(),\n            look_set_suffix_any: LookSet::empty(),\n            utf8: true,\n            explicit_captures_len: 0,\n            static_explicit_captures_len: Some(0),\n            literal: true,\n            alternation_literal: true,\n        };\n        for x in concat.iter() {\n            let p = x.properties();\n            props.look_set.set_union(p.look_set());\n            props.utf8 = props.utf8 && p.is_utf8();\n            props.explicit_captures_len = props\n                .explicit_captures_len\n                .saturating_add(p.explicit_captures_len());\n            props.static_explicit_captures_len = p\n                .static_explicit_captures_len()\n                .and_then(|len1| { Some((len1, props.static_explicit_captures_len?)) })\n                .and_then(|(len1, len2)| Some(len1.saturating_add(len2)));\n            props.literal = props.literal && p.is_literal();\n            props.alternation_literal = props.alternation_literal\n                && p.is_alternation_literal();\n            if let Some(minimum_len) = props.minimum_len {\n                match p.minimum_len() {\n                    None => props.minimum_len = None,\n                    Some(len) => {\n                        props.minimum_len = Some(minimum_len.saturating_add(len));\n                    }\n                }\n            }\n            if let Some(maximum_len) = props.maximum_len {\n                match p.maximum_len() {\n                    None => props.maximum_len = None,\n                    Some(len) => props.maximum_len = maximum_len.checked_add(len),\n                }\n            }\n        }\n        let mut it = concat.iter();\n        while let Some(x) = it.next() {\n            props.look_set_prefix.set_union(x.properties().look_set_prefix());\n            props.look_set_prefix_any.set_union(x.properties().look_set_prefix_any());\n            if x.properties().maximum_len().map_or(true, |x| x > 0) {\n                break;\n            }\n        }\n        let mut it = concat.iter().rev();\n        while let Some(x) = it.next() {\n            props.look_set_suffix.set_union(x.properties().look_set_suffix());\n            props.look_set_suffix_any.set_union(x.properties().look_set_suffix_any());\n            if x.properties().maximum_len().map_or(true, |x| x > 0) {\n                break;\n            }\n        }\n        Properties(Box::new(props))\n    }\n    fn alternation(alts: &[Hir]) -> Properties {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the concatenation of the given expressions.\n///\n/// This attempts to flatten and simplify the concatenation as appropriate.\n///\n/// # Example\n///\n/// This shows a simple example of basic flattening of both concatenations\n/// and literals.\n///\n/// ```\n/// use regex_syntax::hir::Hir;\n///\n/// let hir = Hir::concat(vec![\n///     Hir::concat(vec![\n///         Hir::literal([b'a']),\n///         Hir::literal([b'b']),\n///         Hir::literal([b'c']),\n///     ]),\n///     Hir::concat(vec![\n///         Hir::literal([b'x']),\n///         Hir::literal([b'y']),\n///         Hir::literal([b'z']),\n///     ]),\n/// ]);\n/// let expected = Hir::literal(\"abcxyz\".as_bytes());\n/// assert_eq!(expected, hir);\n/// ```\n439 pub fn concat(subs: Vec<Hir>) -> Hir {\n440     // We rebuild the concatenation by simplifying it. Would be nice to do\n441     // it in place, but that seems a little tricky?\n442     let mut new = vec![];\n443     // This gobbles up any adjacent literals in a concatenation and smushes\n444     // them together. Basically, when we see a literal, we add its bytes\n445     // to 'prior_lit', and whenever we see anything else, we first take\n446     // any bytes in 'prior_lit' and add it to the 'new' concatenation.\n447     let mut prior_lit: Option<Vec<u8>> = None;\n448     for sub in subs {\n449         let (kind, props) = sub.into_parts();\n450         match kind {\n451             HirKind::Literal(Literal(bytes)) => {\n452                 if let Some(ref mut prior_bytes) = prior_lit {\n453                     prior_bytes.extend_from_slice(&bytes);\n454                 } else {\n455                     prior_lit = Some(bytes.to_vec());\n456                 }\n457             }\n458             // We also flatten concats that are direct children of another\n459             // concat. We only need to do this one level deep since\n460             // Hir::concat is the only way to build concatenations, and so\n461             // flattening happens inductively.\n462             HirKind::Concat(subs2) => {\n463                 for sub2 in subs2 {\n464                     let (kind2, props2) = sub2.into_parts();\n465                     match kind2 {\n466                         HirKind::Literal(Literal(bytes)) => {\n467                             if let Some(ref mut prior_bytes) = prior_lit {\n468                                 prior_bytes.extend_from_slice(&bytes);\n469                             } else {\n470                                 prior_lit = Some(bytes.to_vec());\n471                             }\n472                         }\n473                         kind2 => {\n474                             if let Some(prior_bytes) = prior_lit.take() {\n475                                 new.push(Hir::literal(prior_bytes));\n476                             }\n477                             new.push(Hir { kind: kind2, props: props2 });\n478                         }\n479                     }\n480                 }\n481             }\n482             // We can just skip empty HIRs.\n483             HirKind::Empty => {}\n484             kind => {\n485                 if let Some(prior_bytes) = prior_lit.take() {\n486                     new.push(Hir::literal(prior_bytes));\n487                 }\n488                 new.push(Hir { kind, props });\n489             }\n490         }\n491     }\n492     if let Some(prior_bytes) = prior_lit.take() {\n493         new.push(Hir::literal(prior_bytes));\n494     }\n495     if new.is_empty() {\n496         return Hir::empty();\n497     } else if new.len() == 1 {\n498         return new.pop().unwrap();\n499     }\n500     let props = Properties::concat(&new);\n501     Hir { kind: HirKind::Concat(new), props }\n502 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}