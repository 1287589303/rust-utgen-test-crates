{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassBytes {\n    set: IntervalSet<ClassBytesRange>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\n#[derive(Clone, Eq, PartialEq)]\npub enum Class {\n    /// A set of characters represented by Unicode scalar values.\n    Unicode(ClassUnicode),\n    /// A set of characters represented by arbitrary bytes (one byte per\n    /// character).\n    Bytes(ClassBytes),\n}\nimpl Class {\n    pub fn case_fold_simple(&mut self) {}\n    pub fn try_case_fold_simple(&mut self) -> core::result::Result<(), CaseFoldError> {}\n    pub fn negate(&mut self) {}\n    pub fn is_utf8(&self) -> bool {}\n    pub fn minimum_len(&self) -> Option<usize> {\n        match *self {\n            Class::Unicode(ref x) => x.minimum_len(),\n            Class::Bytes(ref x) => x.minimum_len(),\n        }\n    }\n    pub fn maximum_len(&self) -> Option<usize> {}\n    pub fn is_empty(&self) -> bool {}\n    pub fn literal(&self) -> Option<Vec<u8>> {}\n}\nimpl ClassBytes {\n    pub fn new<I>(ranges: I) -> ClassBytes\n    where\n        I: IntoIterator<Item = ClassBytesRange>,\n    {}\n    pub fn empty() -> ClassBytes {}\n    pub fn push(&mut self, range: ClassBytesRange) {}\n    pub fn iter(&self) -> ClassBytesIter<'_> {}\n    pub fn ranges(&self) -> &[ClassBytesRange] {}\n    pub fn case_fold_simple(&mut self) {}\n    pub fn negate(&mut self) {}\n    pub fn union(&mut self, other: &ClassBytes) {}\n    pub fn intersect(&mut self, other: &ClassBytes) {}\n    pub fn difference(&mut self, other: &ClassBytes) {}\n    pub fn symmetric_difference(&mut self, other: &ClassBytes) {}\n    pub fn is_ascii(&self) -> bool {}\n    pub fn minimum_len(&self) -> Option<usize> {\n        if self.ranges().is_empty() { None } else { Some(1) }\n    }\n    pub fn maximum_len(&self) -> Option<usize> {}\n    pub fn literal(&self) -> Option<Vec<u8>> {}\n    pub fn to_unicode_class(&self) -> Option<ClassUnicode> {}\n}\nimpl ClassUnicode {\n    pub fn new<I>(ranges: I) -> ClassUnicode\n    where\n        I: IntoIterator<Item = ClassUnicodeRange>,\n    {}\n    pub fn empty() -> ClassUnicode {}\n    pub fn push(&mut self, range: ClassUnicodeRange) {}\n    pub fn iter(&self) -> ClassUnicodeIter<'_> {}\n    pub fn ranges(&self) -> &[ClassUnicodeRange] {}\n    pub fn case_fold_simple(&mut self) {}\n    pub fn try_case_fold_simple(&mut self) -> core::result::Result<(), CaseFoldError> {}\n    pub fn negate(&mut self) {}\n    pub fn union(&mut self, other: &ClassUnicode) {}\n    pub fn intersect(&mut self, other: &ClassUnicode) {}\n    pub fn difference(&mut self, other: &ClassUnicode) {}\n    pub fn symmetric_difference(&mut self, other: &ClassUnicode) {}\n    pub fn is_ascii(&self) -> bool {}\n    pub fn minimum_len(&self) -> Option<usize> {\n        let first = self.ranges().get(0)?;\n        Some(first.start.len_utf8())\n    }\n    pub fn maximum_len(&self) -> Option<usize> {}\n    pub fn literal(&self) -> Option<Vec<u8>> {}\n    pub fn to_byte_class(&self) -> Option<ClassBytes> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the length, in bytes, of the smallest string matched by this\n/// character class.\n///\n/// For non-empty byte oriented classes, this always returns `1`. For\n/// non-empty Unicode oriented classes, this can return `1`, `2`, `3` or\n/// `4`. For empty classes, `None` is returned. It is impossible for `0` to\n/// be returned.\n///\n/// # Example\n///\n/// This example shows some examples of regexes and their corresponding\n/// minimum length, if any.\n///\n/// ```\n/// use regex_syntax::{hir::Properties, parse};\n///\n/// // The empty string has a min length of 0.\n/// let hir = parse(r\"\")?;\n/// assert_eq!(Some(0), hir.properties().minimum_len());\n/// // As do other types of regexes that only match the empty string.\n/// let hir = parse(r\"^$\\b\\B\")?;\n/// assert_eq!(Some(0), hir.properties().minimum_len());\n/// // A regex that can match the empty string but match more is still 0.\n/// let hir = parse(r\"a*\")?;\n/// assert_eq!(Some(0), hir.properties().minimum_len());\n/// // A regex that matches nothing has no minimum defined.\n/// let hir = parse(r\"[a&&b]\")?;\n/// assert_eq!(None, hir.properties().minimum_len());\n/// // Character classes usually have a minimum length of 1.\n/// let hir = parse(r\"\\w\")?;\n/// assert_eq!(Some(1), hir.properties().minimum_len());\n/// // But sometimes Unicode classes might be bigger!\n/// let hir = parse(r\"\\p{Cyrillic}\")?;\n/// assert_eq!(Some(2), hir.properties().minimum_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n950 pub fn minimum_len(&self) -> Option<usize> {\n951     match *self {\n952         Class::Unicode(ref x) => x.minimum_len(),\n953         Class::Bytes(ref x) => x.minimum_len(),\n954     }\n955 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}