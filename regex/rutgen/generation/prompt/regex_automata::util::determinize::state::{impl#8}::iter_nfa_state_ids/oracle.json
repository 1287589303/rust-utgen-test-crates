{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\npub(crate) trait I32 {\n    fn as_usize(self) -> usize;\n    fn to_bits(self) -> u32;\n    fn from_bits(n: u32) -> i32;\n}\nstruct Repr<'a>(&'a [u8]);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'a> Repr<'a> {\n    fn is_match(&self) -> bool {}\n    fn has_pattern_ids(&self) -> bool {}\n    fn is_from_word(&self) -> bool {}\n    fn is_half_crlf(&self) -> bool {}\n    fn look_have(&self) -> LookSet {}\n    fn look_need(&self) -> LookSet {}\n    fn match_len(&self) -> usize {}\n    fn match_pattern(&self, index: usize) -> PatternID {}\n    fn match_pattern_ids(&self) -> Option<Vec<PatternID>> {}\n    fn iter_match_pattern_ids<F: FnMut(PatternID)>(&self, mut f: F) {}\n    fn iter_nfa_state_ids<F: FnMut(StateID)>(&self, mut f: F) {\n        let mut sids = &self.0[self.pattern_offset_end()..];\n        let mut prev = 0i32;\n        while !sids.is_empty() {\n            let (delta, nr) = read_vari32(sids);\n            sids = &sids[nr..];\n            let sid = prev + delta;\n            prev = sid;\n            f(StateID::new_unchecked(sid.as_usize()))\n        }\n    }\n    fn pattern_offset_end(&self) -> usize {\n        let encoded = self.encoded_pattern_len();\n        if encoded == 0 {\n            return 9;\n        }\n        encoded.checked_mul(4).unwrap().checked_add(13).unwrap()\n    }\n    fn encoded_pattern_len(&self) -> usize {}\n}\nfn read_vari32(data: &[u8]) -> (i32, usize) {\n    let (un, i) = read_varu32(data);\n    let mut n = i32::from_bits(un >> 1);\n    if un & 1 != 0 {\n        n = !n;\n    }\n    (n, i)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calls the given function on every NFA state ID in this state.\n523 fn iter_nfa_state_ids<F: FnMut(StateID)>(&self, mut f: F) {\n524     let mut sids = &self.0[self.pattern_offset_end()..];\n525     let mut prev = 0i32;\n526     while !sids.is_empty() {\n527         let (delta, nr) = read_vari32(sids);\n528         sids = &sids[nr..];\n529         let sid = prev + delta;\n530         prev = sid;\n531         // This is OK since we only ever serialize valid StateIDs to\n532         // states. And since state IDs can never exceed an isize, they must\n533         // always be able to fit into a usize, and thus cast is OK.\n534         f(StateID::new_unchecked(sid.as_usize()))\n535     }\n536 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}