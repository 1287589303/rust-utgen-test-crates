{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Debug)]\nstruct NestLimiter<'p, 's, P> {\n    /// The parser that is checking the nest limit.\n    p: &'p ParserI<'s, P>,\n    /// The current depth while walking an Ast.\n    depth: u32,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Comment {\n    /// The span of this comment, including the beginning `#` and ending `\\n`.\n    pub span: Span,\n    /// The comment text, starting with the first character following the `#`\n    /// and ending with the last character preceding the `\\n`.\n    pub comment: String,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Concat {\n    /// The span of this concatenation.\n    pub span: Span,\n    /// The concatenation regular expressions.\n    pub asts: Vec<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct WithComments {\n    /// The actual ast.\n    pub ast: Ast,\n    /// All comments found in the original regular expression.\n    pub comments: Vec<Comment>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassBracketed {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not. e.g., `[a]` is not negated but\n    /// `[^a]` is.\n    pub negated: bool,\n    /// The type of this set. A set is either a normal union of things, e.g.,\n    /// `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n    pub kind: ClassSet,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Box<Span>),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(Box<SetFlags>),\n    /// A single character literal, which includes escape sequences.\n    Literal(Box<Literal>),\n    /// The \"any character\" class.\n    Dot(Box<Span>),\n    /// A single zero-width assertion.\n    Assertion(Box<Assertion>),\n    /// A single Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    ClassUnicode(Box<ClassUnicode>),\n    /// A single perl character class, e.g., `\\d` or `\\W`.\n    ClassPerl(Box<ClassPerl>),\n    /// A single bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    ClassBracketed(Box<ClassBracketed>),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Box<Repetition>),\n    /// A grouped regular expression.\n    Group(Box<Group>),\n    /// An alternation of regular expressions.\n    Alternation(Box<Alternation>),\n    /// A concatenation of regular expressions.\n    Concat(Box<Concat>),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\nenum Primitive {\n    Literal(ast::Literal),\n    Assertion(ast::Assertion),\n    Dot(Span),\n    Perl(ast::ClassPerl),\n    Unicode(ast::ClassUnicode),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum RepetitionKind {\n    /// `?`\n    ZeroOrOne,\n    /// `*`\n    ZeroOrMore,\n    /// `+`\n    OneOrMore,\n    /// `{m,n}`\n    Range(RepetitionRange),\n}\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    fn parse(&self) -> Result<Ast> {}\n    fn parse_with_comments(&self) -> Result<ast::WithComments> {\n        assert_eq!(self.offset(), 0, \"parser can only be used once\");\n        self.parser().reset();\n        let mut concat = ast::Concat {\n            span: self.span(),\n            asts: vec![],\n        };\n        loop {\n            self.bump_space();\n            if self.is_eof() {\n                break;\n            }\n            match self.char() {\n                '(' => concat = self.push_group(concat)?,\n                ')' => concat = self.pop_group(concat)?,\n                '|' => concat = self.push_alternate(concat)?,\n                '[' => {\n                    let class = self.parse_set_class()?;\n                    concat.asts.push(Ast::class_bracketed(class));\n                }\n                '?' => {\n                    concat = self\n                        .parse_uncounted_repetition(\n                            concat,\n                            ast::RepetitionKind::ZeroOrOne,\n                        )?;\n                }\n                '*' => {\n                    concat = self\n                        .parse_uncounted_repetition(\n                            concat,\n                            ast::RepetitionKind::ZeroOrMore,\n                        )?;\n                }\n                '+' => {\n                    concat = self\n                        .parse_uncounted_repetition(\n                            concat,\n                            ast::RepetitionKind::OneOrMore,\n                        )?;\n                }\n                '{' => {\n                    concat = self.parse_counted_repetition(concat)?;\n                }\n                _ => concat.asts.push(self.parse_primitive()?.into_ast()),\n            }\n        }\n        let ast = self.pop_group_end(concat)?;\n        NestLimiter::new(self).check(&ast)?;\n        Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(&mut *self.parser().comments.borrow_mut(), vec![]),\n        })\n    }\n    #[inline(never)]\n    fn parse_uncounted_repetition(\n        &self,\n        mut concat: ast::Concat,\n        kind: ast::RepetitionKind,\n    ) -> Result<ast::Concat> {\n        assert!(self.char() == '?' || self.char() == '*' || self.char() == '+');\n        let op_start = self.pos();\n        let ast = match concat.asts.pop() {\n            Some(ast) => ast,\n            None => {\n                return Err(self.error(self.span(), ast::ErrorKind::RepetitionMissing));\n            }\n        };\n        match ast {\n            Ast::Empty(_) | Ast::Flags(_) => {\n                return Err(self.error(self.span(), ast::ErrorKind::RepetitionMissing));\n            }\n            _ => {}\n        }\n        let mut greedy = true;\n        if self.bump() && self.char() == '?' {\n            greedy = false;\n            self.bump();\n        }\n        concat\n            .asts\n            .push(\n                Ast::repetition(ast::Repetition {\n                    span: ast.span().with_end(self.pos()),\n                    op: ast::RepetitionOp {\n                        span: Span::new(op_start, self.pos()),\n                        kind,\n                    },\n                    greedy,\n                    ast: Box::new(ast),\n                }),\n            );\n        Ok(concat)\n    }\n    #[inline(never)]\n    fn parse_counted_repetition(&self, mut concat: ast::Concat) -> Result<ast::Concat> {\n        assert!(self.char() == '{');\n        let start = self.pos();\n        let ast = match concat.asts.pop() {\n            Some(ast) => ast,\n            None => {\n                return Err(self.error(self.span(), ast::ErrorKind::RepetitionMissing));\n            }\n        };\n        match ast {\n            Ast::Empty(_) | Ast::Flags(_) => {\n                return Err(self.error(self.span(), ast::ErrorKind::RepetitionMissing));\n            }\n            _ => {}\n        }\n        if !self.bump_and_bump_space() {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::RepetitionCountUnclosed,\n                    ),\n            );\n        }\n        let count_start = specialize_err(\n            self.parse_decimal(),\n            ast::ErrorKind::DecimalEmpty,\n            ast::ErrorKind::RepetitionCountDecimalEmpty,\n        );\n        if self.is_eof() {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::RepetitionCountUnclosed,\n                    ),\n            );\n        }\n        let range = if self.char() == ',' {\n            if !self.bump_and_bump_space() {\n                return Err(\n                    self\n                        .error(\n                            Span::new(start, self.pos()),\n                            ast::ErrorKind::RepetitionCountUnclosed,\n                        ),\n                );\n            }\n            if self.char() != '}' {\n                let count_start = match count_start {\n                    Ok(c) => c,\n                    Err(\n                        err,\n                    ) if err.kind == ast::ErrorKind::RepetitionCountDecimalEmpty => {\n                        if self.parser().empty_min_range {\n                            0\n                        } else {\n                            return Err(err);\n                        }\n                    }\n                    err => err?,\n                };\n                let count_end = specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?;\n                ast::RepetitionRange::Bounded(count_start, count_end)\n            } else {\n                ast::RepetitionRange::AtLeast(count_start?)\n            }\n        } else {\n            ast::RepetitionRange::Exactly(count_start?)\n        };\n        if self.is_eof() || self.char() != '}' {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::RepetitionCountUnclosed,\n                    ),\n            );\n        }\n        let mut greedy = true;\n        if self.bump_and_bump_space() && self.char() == '?' {\n            greedy = false;\n            self.bump();\n        }\n        let op_span = Span::new(start, self.pos());\n        if !range.is_valid() {\n            return Err(self.error(op_span, ast::ErrorKind::RepetitionCountInvalid));\n        }\n        concat\n            .asts\n            .push(\n                Ast::repetition(ast::Repetition {\n                    span: ast.span().with_end(self.pos()),\n                    op: ast::RepetitionOp {\n                        span: op_span,\n                        kind: ast::RepetitionKind::Range(range),\n                    },\n                    greedy,\n                    ast: Box::new(ast),\n                }),\n            );\n        Ok(concat)\n    }\n    #[inline(never)]\n    fn parse_group(&self) -> Result<Either<ast::SetFlags, ast::Group>> {}\n    #[inline(never)]\n    fn parse_capture_name(&self, capture_index: u32) -> Result<ast::CaptureName> {}\n    #[inline(never)]\n    fn parse_flags(&self) -> Result<ast::Flags> {}\n    #[inline(never)]\n    fn parse_flag(&self) -> Result<ast::Flag> {}\n    fn parse_primitive(&self) -> Result<Primitive> {\n        match self.char() {\n            '\\\\' => self.parse_escape(),\n            '.' => {\n                let ast = Primitive::Dot(self.span_char());\n                self.bump();\n                Ok(ast)\n            }\n            '^' => {\n                let ast = Primitive::Assertion(ast::Assertion {\n                    span: self.span_char(),\n                    kind: ast::AssertionKind::StartLine,\n                });\n                self.bump();\n                Ok(ast)\n            }\n            '$' => {\n                let ast = Primitive::Assertion(ast::Assertion {\n                    span: self.span_char(),\n                    kind: ast::AssertionKind::EndLine,\n                });\n                self.bump();\n                Ok(ast)\n            }\n            c => {\n                let ast = Primitive::Literal(ast::Literal {\n                    span: self.span_char(),\n                    kind: ast::LiteralKind::Verbatim,\n                    c,\n                });\n                self.bump();\n                Ok(ast)\n            }\n        }\n    }\n    #[inline(never)]\n    fn parse_escape(&self) -> Result<Primitive> {}\n    fn maybe_parse_special_word_boundary(\n        &self,\n        wb_start: Position,\n    ) -> Result<Option<ast::AssertionKind>> {}\n    #[inline(never)]\n    fn parse_octal(&self) -> ast::Literal {}\n    #[inline(never)]\n    fn parse_hex(&self) -> Result<ast::Literal> {}\n    #[inline(never)]\n    fn parse_hex_digits(&self, kind: ast::HexLiteralKind) -> Result<ast::Literal> {}\n    #[inline(never)]\n    fn parse_hex_brace(&self, kind: ast::HexLiteralKind) -> Result<ast::Literal> {}\n    fn parse_decimal(&self) -> Result<u32> {}\n    #[inline(never)]\n    fn parse_set_class(&self) -> Result<ast::ClassBracketed> {\n        assert_eq!(self.char(), '[');\n        let mut union = ast::ClassSetUnion {\n            span: self.span(),\n            items: vec![],\n        };\n        loop {\n            self.bump_space();\n            if self.is_eof() {\n                return Err(self.unclosed_class_error());\n            }\n            match self.char() {\n                '[' => {\n                    if !self.parser().stack_class.borrow().is_empty() {\n                        if let Some(cls) = self.maybe_parse_ascii_class() {\n                            union.push(ast::ClassSetItem::Ascii(cls));\n                            continue;\n                        }\n                    }\n                    union = self.push_class_open(union)?;\n                }\n                ']' => {\n                    match self.pop_class(union)? {\n                        Either::Left(nested_union) => {\n                            union = nested_union;\n                        }\n                        Either::Right(class) => return Ok(class),\n                    }\n                }\n                '&' if self.peek() == Some('&') => {\n                    assert!(self.bump_if(\"&&\"));\n                    union = self\n                        .push_class_op(ast::ClassSetBinaryOpKind::Intersection, union);\n                }\n                '-' if self.peek() == Some('-') => {\n                    assert!(self.bump_if(\"--\"));\n                    union = self\n                        .push_class_op(ast::ClassSetBinaryOpKind::Difference, union);\n                }\n                '~' if self.peek() == Some('~') => {\n                    assert!(self.bump_if(\"~~\"));\n                    union = self\n                        .push_class_op(\n                            ast::ClassSetBinaryOpKind::SymmetricDifference,\n                            union,\n                        );\n                }\n                _ => {\n                    union.push(self.parse_set_class_range()?);\n                }\n            }\n        }\n    }\n    #[inline(never)]\n    fn parse_set_class_range(&self) -> Result<ast::ClassSetItem> {}\n    #[inline(never)]\n    fn parse_set_class_item(&self) -> Result<Primitive> {}\n    #[inline(never)]\n    fn parse_set_class_open(&self) -> Result<(ast::ClassBracketed, ast::ClassSetUnion)> {}\n    #[inline(never)]\n    fn maybe_parse_ascii_class(&self) -> Option<ast::ClassAscii> {}\n    #[inline(never)]\n    fn parse_unicode_class(&self) -> Result<ast::ClassUnicode> {}\n    #[inline(never)]\n    fn parse_perl_class(&self) -> ast::ClassPerl {}\n}\nimpl Ast {\n    pub fn empty(span: Span) -> Ast {}\n    pub fn flags(e: SetFlags) -> Ast {}\n    pub fn literal(e: Literal) -> Ast {}\n    pub fn dot(span: Span) -> Ast {}\n    pub fn assertion(e: Assertion) -> Ast {}\n    pub fn class_unicode(e: ClassUnicode) -> Ast {}\n    pub fn class_perl(e: ClassPerl) -> Ast {}\n    pub fn class_bracketed(e: ClassBracketed) -> Ast {\n        Ast::ClassBracketed(Box::new(e))\n    }\n    pub fn repetition(e: Repetition) -> Ast {}\n    pub fn group(e: Group) -> Ast {}\n    pub fn alternation(e: Alternation) -> Ast {}\n    pub fn concat(e: Concat) -> Ast {}\n    pub fn span(&self) -> &Span {}\n    pub fn is_empty(&self) -> bool {}\n    fn has_subexprs(&self) -> bool {}\n}\nimpl<'p, 's, P: Borrow<Parser>> NestLimiter<'p, 's, P> {\n    fn new(p: &'p ParserI<'s, P>) -> NestLimiter<'p, 's, P> {\n        NestLimiter { p, depth: 0 }\n    }\n    #[inline(never)]\n    fn check(self, ast: &Ast) -> Result<()> {\n        ast::visit(ast, self)\n    }\n    fn increment_depth(&mut self, span: &Span) -> Result<()> {}\n    fn decrement_depth(&mut self) {}\n}\nimpl Primitive {\n    fn span(&self) -> &Span {}\n    fn into_ast(self) -> Ast {\n        match self {\n            Primitive::Literal(lit) => Ast::literal(lit),\n            Primitive::Assertion(assert) => Ast::assertion(assert),\n            Primitive::Dot(span) => Ast::dot(span),\n            Primitive::Perl(cls) => Ast::class_perl(cls),\n            Primitive::Unicode(cls) => Ast::class_unicode(cls),\n        }\n    }\n    fn into_class_set_item<P: Borrow<Parser>>(\n        self,\n        p: &ParserI<'_, P>,\n    ) -> Result<ast::ClassSetItem> {}\n    fn into_class_literal<P: Borrow<Parser>>(\n        self,\n        p: &ParserI<'_, P>,\n    ) -> Result<ast::Literal> {}\n}\nimpl Parser {\n    pub fn new() -> Parser {}\n    pub fn parse(&mut self, pattern: &str) -> Result<Ast> {}\n    pub fn parse_with_comments(&mut self, pattern: &str) -> Result<ast::WithComments> {}\n    fn reset(&self) {\n        self.pos\n            .set(Position {\n                offset: 0,\n                line: 1,\n                column: 1,\n            });\n        self.ignore_whitespace.set(self.initial_ignore_whitespace);\n        self.comments.borrow_mut().clear();\n        self.stack_group.borrow_mut().clear();\n        self.stack_class.borrow_mut().clear();\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parse the regular expression and return an abstract syntax tree with\n/// all of the comments found in the pattern.\n 982 fn parse_with_comments(&self) -> Result<ast::WithComments> {\n 983     assert_eq!(self.offset(), 0, \"parser can only be used once\");\n 984     self.parser().reset();\n 985     let mut concat = ast::Concat { span: self.span(), asts: vec![] };\n 986     loop {\n 987         self.bump_space();\n 988         if self.is_eof() {\n 989             break;\n 990         }\n 991         match self.char() {\n 992             '(' => concat = self.push_group(concat)?,\n 993             ')' => concat = self.pop_group(concat)?,\n 994             '|' => concat = self.push_alternate(concat)?,\n 995             '[' => {\n 996                 let class = self.parse_set_class()?;\n 997                 concat.asts.push(Ast::class_bracketed(class));\n 998             }\n 999             '?' => {\n1000                 concat = self.parse_uncounted_repetition(\n1001                     concat,\n1002                     ast::RepetitionKind::ZeroOrOne,\n1003                 )?;\n1004             }\n1005             '*' => {\n1006                 concat = self.parse_uncounted_repetition(\n1007                     concat,\n1008                     ast::RepetitionKind::ZeroOrMore,\n1009                 )?;\n1010             }\n1011             '+' => {\n1012                 concat = self.parse_uncounted_repetition(\n1013                     concat,\n1014                     ast::RepetitionKind::OneOrMore,\n1015                 )?;\n1016             }\n1017             '{' => {\n1018                 concat = self.parse_counted_repetition(concat)?;\n1019             }\n1020             _ => concat.asts.push(self.parse_primitive()?.into_ast()),\n1021         }\n1022     }\n1023     let ast = self.pop_group_end(concat)?;\n1024     NestLimiter::new(self).check(&ast)?;\n1025     Ok(ast::WithComments {\n1026         ast,\n1027         comments: mem::replace(\n1028             &mut *self.parser().comments.borrow_mut(),\n1029             vec![],\n1030         ),\n1031     })\n1032 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}