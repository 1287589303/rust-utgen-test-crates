{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\nimpl Look {\n    #[inline]\n    pub const fn reversed(self) -> Look {}\n    #[inline]\n    pub const fn as_repr(self) -> u32 {}\n    #[inline]\n    pub const fn from_repr(repr: u32) -> Option<Look> {\n        match repr {\n            0b00_0000_0000_0000_0001 => Some(Look::Start),\n            0b00_0000_0000_0000_0010 => Some(Look::End),\n            0b00_0000_0000_0000_0100 => Some(Look::StartLF),\n            0b00_0000_0000_0000_1000 => Some(Look::EndLF),\n            0b00_0000_0000_0001_0000 => Some(Look::StartCRLF),\n            0b00_0000_0000_0010_0000 => Some(Look::EndCRLF),\n            0b00_0000_0000_0100_0000 => Some(Look::WordAscii),\n            0b00_0000_0000_1000_0000 => Some(Look::WordAsciiNegate),\n            0b00_0000_0001_0000_0000 => Some(Look::WordUnicode),\n            0b00_0000_0010_0000_0000 => Some(Look::WordUnicodeNegate),\n            0b00_0000_0100_0000_0000 => Some(Look::WordStartAscii),\n            0b00_0000_1000_0000_0000 => Some(Look::WordEndAscii),\n            0b00_0001_0000_0000_0000 => Some(Look::WordStartUnicode),\n            0b00_0010_0000_0000_0000 => Some(Look::WordEndUnicode),\n            0b00_0100_0000_0000_0000 => Some(Look::WordStartHalfAscii),\n            0b00_1000_0000_0000_0000 => Some(Look::WordEndHalfAscii),\n            0b01_0000_0000_0000_0000 => Some(Look::WordStartHalfUnicode),\n            0b10_0000_0000_0000_0000 => Some(Look::WordEndHalfUnicode),\n            _ => None,\n        }\n    }\n    #[inline]\n    pub const fn as_char(self) -> char {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Given the underlying representation of a `Look` value, return the\n/// corresponding `Look` value if the representation is valid. Otherwise\n/// `None` is returned.\n1733 pub const fn from_repr(repr: u32) -> Option<Look> {\n1734     match repr {\n1735         0b00_0000_0000_0000_0001 => Some(Look::Start),\n1736         0b00_0000_0000_0000_0010 => Some(Look::End),\n1737         0b00_0000_0000_0000_0100 => Some(Look::StartLF),\n1738         0b00_0000_0000_0000_1000 => Some(Look::EndLF),\n1739         0b00_0000_0000_0001_0000 => Some(Look::StartCRLF),\n1740         0b00_0000_0000_0010_0000 => Some(Look::EndCRLF),\n1741         0b00_0000_0000_0100_0000 => Some(Look::WordAscii),\n1742         0b00_0000_0000_1000_0000 => Some(Look::WordAsciiNegate),\n1743         0b00_0000_0001_0000_0000 => Some(Look::WordUnicode),\n1744         0b00_0000_0010_0000_0000 => Some(Look::WordUnicodeNegate),\n1745         0b00_0000_0100_0000_0000 => Some(Look::WordStartAscii),\n1746         0b00_0000_1000_0000_0000 => Some(Look::WordEndAscii),\n1747         0b00_0001_0000_0000_0000 => Some(Look::WordStartUnicode),\n1748         0b00_0010_0000_0000_0000 => Some(Look::WordEndUnicode),\n1749         0b00_0100_0000_0000_0000 => Some(Look::WordStartHalfAscii),\n1750         0b00_1000_0000_0000_0000 => Some(Look::WordEndHalfAscii),\n1751         0b01_0000_0000_0000_0000 => Some(Look::WordStartHalfUnicode),\n1752         0b10_0000_0000_0000_0000 => Some(Look::WordEndHalfUnicode),\n1753         _ => None,\n1754     }\n1755 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}