{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/range_trie.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem, ops::RangeInclusive};\nuse alloc::{format, string::String, vec, vec::Vec};\nuse regex_syntax::utf8::Utf8Range;\nuse crate::util::primitives::StateID;\nconst FINAL: StateID = StateID::ZERO;\nconst ROOT: StateID = StateID::new_unchecked(1);\n#[derive(Clone)]\nstruct State {\n    /// A sorted sequence of non-overlapping transitions to other states. Each\n    /// transition corresponds to a single range of bytes.\n    transitions: Vec<Transition>,\n}\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\nimpl State {\n    fn find(&self, range: Utf8Range) -> usize {\n        /// Returns the position `i` at which `pred(xs[i])` first returns true\n        /// such that for all `j >= i`, `pred(xs[j]) == true`. If `pred` never\n        /// returns true, then `xs.len()` is returned.\n        ///\n        /// We roll our own binary search because it doesn't seem like the\n        /// standard library's binary search can be used here. Namely, if\n        /// there is an overlapping range, then we want to find the first such\n        /// occurrence, but there may be many. Or at least, it's not quite\n        /// clear to me how to do it.\n        fn binary_search<T, F>(xs: &[T], mut pred: F) -> usize\n        where\n            F: FnMut(&T) -> bool,\n        {\n            let (mut left, mut right) = (0, xs.len());\n            while left < right {\n                let mid = (left + right) / 2;\n                if pred(&xs[mid]) {\n                    right = mid;\n                } else {\n                    left = mid + 1;\n                }\n            }\n            left\n        }\n        binary_search(&self.transitions, |t| range.start <= t.range.end)\n    }\n    fn clear(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Find the position at which the given range should be inserted in this\n/// state.\n///\n/// The position returned is always in the inclusive range\n/// [0, transitions.len()]. If 'transitions.len()' is returned, then the\n/// given range overlaps with no other range in this state *and* is greater\n/// than all of them.\n///\n/// For all other possible positions, the given range either overlaps\n/// with the transition at that position or is otherwise less than it\n/// with no overlap (and is greater than the previous transition). In the\n/// former case, careful attention must be paid to inserting this range\n/// as a new transition. In the latter case, the range can be inserted as\n/// a new transition at the given position without disrupting any other\n/// transitions.\n567 fn find(&self, range: Utf8Range) -> usize {\n568     /// Returns the position `i` at which `pred(xs[i])` first returns true\n569     /// such that for all `j >= i`, `pred(xs[j]) == true`. If `pred` never\n570     /// returns true, then `xs.len()` is returned.\n571     ///\n572     /// We roll our own binary search because it doesn't seem like the\n573     /// standard library's binary search can be used here. Namely, if\n574     /// there is an overlapping range, then we want to find the first such\n575     /// occurrence, but there may be many. Or at least, it's not quite\n576     /// clear to me how to do it.\n577     fn binary_search<T, F>(xs: &[T], mut pred: F) -> usize\n578     where\n579         F: FnMut(&T) -> bool,\n580     {\n581         let (mut left, mut right) = (0, xs.len());\n582         while left < right {\n583             // Overflow is impossible because xs.len() <= 256.\n584             let mid = (left + right) / 2;\n585             if pred(&xs[mid]) {\n586                 right = mid;\n587             } else {\n588                 left = mid + 1;\n589             }\n590         }\n591         left\n592     }\n593 \n594     // Benchmarks suggest that binary search is just a bit faster than\n595     // straight linear search. Specifically when using the debug tool:\n596     //\n597     //   hyperfine \"regex-cli debug thompson -qr --captures none '\\w{90} ecurB'\"\n598     binary_search(&self.transitions, |t| range.start <= t.range.end)\n599 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}