{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/debug.rs\n// crate name is regex_syntax\npub(crate) struct Byte(pub(crate) u8);\nimpl core::fmt::Debug for Byte {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        if self.0 == b' ' {\n            return write!(f, \"' '\");\n        }\n        let mut bytes = [0u8; 10];\n        let mut len = 0;\n        for (i, mut b) in core::ascii::escape_default(self.0).enumerate() {\n            if i >= 2 && b'a' <= b && b <= b'f' {\n                b -= 32;\n            }\n            bytes[len] = b;\n            len += 1;\n        }\n        write!(f, \"{}\", core::str::from_utf8(& bytes[..len]).unwrap())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 6 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n 7     // Special case ASCII space. It's too hard to read otherwise, so\n 8     // put quotes around it. I sometimes wonder whether just '\\x20' would\n 9     // be better...\n10     if self.0 == b' ' {\n11         return write!(f, \"' '\");\n12     }\n13     // 10 bytes is enough to cover any output from ascii::escape_default.\n14     let mut bytes = [0u8; 10];\n15     let mut len = 0;\n16     for (i, mut b) in core::ascii::escape_default(self.0).enumerate() {\n17         // capitalize \\xab to \\xAB\n18         if i >= 2 && b'a' <= b && b <= b'f' {\n19             b -= 32;\n20         }\n21         bytes[len] = b;\n22         len += 1;\n23     }\n24     write!(f, \"{}\", core::str::from_utf8(&bytes[..len]).unwrap())\n25 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}