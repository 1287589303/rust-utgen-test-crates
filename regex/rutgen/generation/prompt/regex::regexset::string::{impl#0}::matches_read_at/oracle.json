{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/string.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{Error, RegexSetBuilder};\n#[derive(Clone)]\npub struct RegexSet {\n    pub(crate) meta: meta::Regex,\n    pub(crate) patterns: alloc::sync::Arc<[String]>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl RegexSet {\n    pub fn new<I, S>(exprs: I) -> Result<RegexSet, Error>\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    pub fn empty() -> RegexSet {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {}\n    #[inline]\n    pub fn matches(&self, haystack: &str) -> SetMatches {}\n    #[inline]\n    pub fn matches_at(&self, haystack: &str, start: usize) -> SetMatches {}\n    #[inline]\n    pub fn matches_read_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &str,\n        start: usize,\n    ) -> bool {\n        let mut patset = PatternSet::new(self.meta.pattern_len());\n        let mut input = Input::new(haystack);\n        input.set_start(start);\n        self.meta.which_overlapping_matches(&input, &mut patset);\n        for pid in patset.iter() {\n            matches[pid] = true;\n        }\n        !patset.is_empty()\n    }\n    #[inline]\n    pub fn read_matches_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &str,\n        start: usize,\n    ) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn patterns(&self) -> &[String] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the same as matches, but starts the search at the given\n/// offset and stores the matches into the slice given.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// `matches` must have a length that is at least the number of regexes\n/// in this set.\n///\n/// This method returns true if and only if at least one member of\n/// `matches` is true after executing the set against `haystack`.\n346 pub fn matches_read_at(\n347     &self,\n348     matches: &mut [bool],\n349     haystack: &str,\n350     start: usize,\n351 ) -> bool {\n352     // This is pretty dumb. We should try to fix this, but the\n353     // regex-automata API doesn't provide a way to store matches in an\n354     // arbitrary &mut [bool]. Thankfully, this API is doc(hidden) and\n355     // thus not public... But regex-capi currently uses it. We should\n356     // fix regex-capi to use a PatternSet, maybe? Not sure... PatternSet\n357     // is in regex-automata, not regex. So maybe we should just accept a\n358     // 'SetMatches', which is basically just a newtype around PatternSet.\n359     let mut patset = PatternSet::new(self.meta.pattern_len());\n360     let mut input = Input::new(haystack);\n361     input.set_start(start);\n362     self.meta.which_overlapping_matches(&input, &mut patset);\n363     for pid in patset.iter() {\n364         matches[pid] = true;\n365     }\n366     !patset.is_empty()\n367 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}