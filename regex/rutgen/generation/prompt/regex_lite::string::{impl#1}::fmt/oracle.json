{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\nimpl core::fmt::Display for Regex {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        write!(f, \"{}\", self.as_str())\n    }\n}\nimpl Regex {\n    #[inline]\n    pub fn as_str(&self) -> &str {\n        &self.pikevm.nfa().pattern()\n    }\n    #[inline]\n    pub fn capture_names(&self) -> CaptureNames<'_> {}\n    #[inline]\n    pub fn captures_len(&self) -> usize {}\n    #[inline]\n    pub fn static_captures_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn capture_locations(&self) -> CaptureLocations {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Shows the original regular expression.\n 99 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n100     write!(f, \"{}\", self.as_str())\n101 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}