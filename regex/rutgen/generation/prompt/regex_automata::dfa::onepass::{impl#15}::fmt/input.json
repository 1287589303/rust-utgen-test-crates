{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where\n    /// `i = Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Clone, Copy)]\nstruct Slots(u32);\nimpl core::fmt::Debug for Epsilons {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        let mut wrote = false;\n        if !self.slots().is_empty() {\n            write!(f, \"{:?}\", self.slots())?;\n            wrote = true;\n        }\n        if !self.looks().is_empty() {\n            if wrote {\n                write!(f, \"/\")?;\n            }\n            write!(f, \"{:?}\", self.looks())?;\n            wrote = true;\n        }\n        if !wrote {\n            write!(f, \"N/A\")?;\n        }\n        Ok(())\n    }\n}\nimpl Epsilons {\n    const SLOT_MASK: u64 = 0x000003FF_FFFFFC00;\n    const SLOT_SHIFT: u64 = 10;\n    const LOOK_MASK: u64 = 0x00000000_000003FF;\n    fn empty() -> Epsilons {}\n    fn is_empty(self) -> bool {}\n    fn slots(self) -> Slots {\n        Slots((self.0 >> Epsilons::SLOT_SHIFT).low_u32())\n    }\n    fn set_slots(self, slots: Slots) -> Epsilons {}\n    fn looks(self) -> LookSet {\n        LookSet {\n            bits: (self.0 & Epsilons::LOOK_MASK).low_u32(),\n        }\n    }\n    fn set_looks(self, look_set: LookSet) -> Epsilons {}\n}\nimpl LookSet {\n    #[inline]\n    pub fn empty() -> LookSet {}\n    #[inline]\n    pub fn full() -> LookSet {}\n    #[inline]\n    pub fn singleton(look: Look) -> LookSet {}\n    #[inline]\n    pub fn len(self) -> usize {}\n    #[inline]\n    pub fn is_empty(self) -> bool {\n        self.len() == 0\n    }\n    #[inline]\n    pub fn contains(self, look: Look) -> bool {}\n    #[inline]\n    pub fn contains_anchor(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_haystack(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_line(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_lf(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_crlf(&self) -> bool {}\n    #[inline]\n    pub fn contains_word(self) -> bool {}\n    #[inline]\n    pub fn contains_word_unicode(self) -> bool {}\n    #[inline]\n    pub fn contains_word_ascii(self) -> bool {}\n    #[inline]\n    pub fn iter(self) -> LookSetIter {}\n    #[inline]\n    pub fn insert(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_insert(&mut self, look: Look) {}\n    #[inline]\n    pub fn remove(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_remove(&mut self, look: Look) {}\n    #[inline]\n    pub fn subtract(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_subtract(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn union(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_union(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn intersect(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_intersect(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn read_repr(slice: &[u8]) -> LookSet {}\n    #[inline]\n    pub fn write_repr(self, slice: &mut [u8]) {}\n    pub fn available(self) -> Result<(), UnicodeWordBoundaryError> {}\n}\nimpl Slots {\n    const LIMIT: usize = 32;\n    fn insert(self, slot: usize) -> Slots {}\n    fn remove(self, slot: usize) -> Slots {}\n    fn is_empty(self) -> bool {\n        self.0 == 0\n    }\n    fn iter(self) -> SlotsIter {}\n    fn apply(self, at: usize, caller_explicit_slots: &mut [Option<NonMaxUsize>]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2831 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n2832     let mut wrote = false;\n2833     if !self.slots().is_empty() {\n2834         write!(f, \"{:?}\", self.slots())?;\n2835         wrote = true;\n2836     }\n2837     if !self.looks().is_empty() {\n2838         if wrote {\n2839             write!(f, \"/\")?;\n2840         }\n2841         write!(f, \"{:?}\", self.looks())?;\n2842         wrote = true;\n2843     }\n2844     if !wrote {\n2845         write!(f, \"N/A\")?;\n2846     }\n2847     Ok(())\n2848 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}