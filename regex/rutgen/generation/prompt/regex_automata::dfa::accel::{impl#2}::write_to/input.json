{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accels<A> {\n    /// A length prefixed slice of contiguous accelerators. See the top comment\n    /// in this module for more details on how we can jump from a DFA's state\n    /// ID to an accelerator in this list.\n    ///\n    /// The first 4 bytes always correspond to the number of accelerators\n    /// that follow.\n    accels: A,\n}\n#[derive(Debug)]\npub struct SerializeError {\n    /// The name of the thing that a buffer is too small for.\n    ///\n    /// Currently, the only kind of serialization error is one that is\n    /// committed by a caller: providing a destination buffer that is too\n    /// small to fit the serialized object. This makes sense conceptually,\n    /// since every valid inhabitant of a type should be serializable.\n    ///\n    /// This is somewhat exposed in the public API of this crate. For example,\n    /// the `to_bytes_{big,little}_endian` APIs return a `Vec<u8>` and are\n    /// guaranteed to never panic or error. This is only possible because the\n    /// implementation guarantees that it will allocate a `Vec<u8>` that is\n    /// big enough.\n    ///\n    /// In summary, if a new serialization error kind needs to be added, then\n    /// it will need careful consideration.\n    what: &'static str,\n}\nimpl<A: AsRef<[AccelTy]>> Accels<A> {\n    #[cfg(feature = \"alloc\")]\n    pub fn to_owned(&self) -> Accels<alloc::vec::Vec<AccelTy>> {}\n    pub fn as_ref(&self) -> Accels<&[AccelTy]> {}\n    pub fn as_bytes(&self) -> &[u8] {\n        let accels = self.accels.as_ref();\n        unsafe {\n            core::slice::from_raw_parts(\n                accels.as_ptr().cast::<u8>(),\n                accels.len() * ACCEL_TY_SIZE,\n            )\n        }\n    }\n    pub fn memory_usage(&self) -> usize {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn needles(&self, i: usize) -> &[u8] {}\n    pub fn len(&self) -> usize {\n        usize::try_from(self.accels.as_ref()[0]).unwrap()\n    }\n    fn get(&self, i: usize) -> Option<Accel> {}\n    fn iter(&self) -> IterAccels<'_, A> {}\n    pub fn write_to<E: Endian>(&self, dst: &mut [u8]) -> Result<usize, SerializeError> {\n        let nwrite = self.write_to_len();\n        assert_eq!(\n            nwrite % ACCEL_TY_SIZE, 0,\n            \"expected accelerator bytes written to be a multiple of {}\", ACCEL_TY_SIZE,\n        );\n        if dst.len() < nwrite {\n            return Err(SerializeError::buffer_too_small(\"accelerators\"));\n        }\n        E::write_u32(AccelTy::try_from(self.len()).unwrap(), dst);\n        dst[ACCEL_TY_SIZE..nwrite]\n            .copy_from_slice(&self.as_bytes()[ACCEL_TY_SIZE..nwrite]);\n        Ok(nwrite)\n    }\n    pub fn validate(&self) -> Result<(), DeserializeError> {}\n    pub fn write_to_len(&self) -> usize {\n        self.as_bytes().len()\n    }\n}\nimpl SerializeError {\n    pub(crate) fn buffer_too_small(what: &'static str) -> SerializeError {\n        SerializeError { what }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Writes these accelerators to the given byte buffer using the indicated\n/// endianness. If the given buffer is too small, then an error is\n/// returned. Upon success, the total number of bytes written is returned.\n/// The number of bytes written is guaranteed to be a multiple of 8.\n308 pub fn write_to<E: Endian>(\n309     &self,\n310     dst: &mut [u8],\n311 ) -> Result<usize, SerializeError> {\n312     let nwrite = self.write_to_len();\n313     assert_eq!(\n314         nwrite % ACCEL_TY_SIZE,\n315         0,\n316         \"expected accelerator bytes written to be a multiple of {}\",\n317         ACCEL_TY_SIZE,\n318     );\n319     if dst.len() < nwrite {\n320         return Err(SerializeError::buffer_too_small(\"accelerators\"));\n321     }\n322 \n323     // The number of accelerators can never exceed AccelTy::MAX.\n324     E::write_u32(AccelTy::try_from(self.len()).unwrap(), dst);\n325     // The actual accelerators are just raw bytes and thus their endianness\n326     // is irrelevant. So we can copy them as bytes.\n327     dst[ACCEL_TY_SIZE..nwrite]\n328         .copy_from_slice(&self.as_bytes()[ACCEL_TY_SIZE..nwrite]);\n329     Ok(nwrite)\n330 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}