{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\nuse core::{\n    cell::UnsafeCell, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicBool, Ordering},\n};\nuse alloc::{boxed::Box, vec, vec::Vec};\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\n#[derive(Debug)]\nstruct Mutex<T> {\n    locked: AtomicBool,\n    data: UnsafeCell<T>,\n}\nimpl<T, F> Pool<T, F> {\n    pub(super) const fn new(create: F) -> Pool<T, F> {\n        Pool {\n            stack: Mutex::new(vec![]),\n            create,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new pool. The given closure is used to create values in\n/// the pool when necessary.\n457 pub(super) fn new(create: F) -> Pool<T, F> {\n458     // FIXME: Now that we require 1.65+, Mutex::new is available as\n459     // const... So we can almost mark this function as const. But of\n460     // course, we're creating a Vec of stacks below (we didn't when I\n461     // originally wrote this code). It seems like the best way to work\n462     // around this would be to use a `[Stack; MAX_POOL_STACKS]` instead\n463     // of a `Vec<Stack>`. I refrained from making this change at time\n464     // of writing (2023/10/08) because I was making a lot of other\n465     // changes at the same time and wanted to do this more carefully.\n466     // Namely, because of the cache line optimization, that `[Stack;\n467     // MAX_POOL_STACKS]` would be quite big. It's unclear how bad (if\n468     // at all) that would be.\n469     //\n470     // Another choice would be to lazily allocate the stacks, but...\n471     // I'm not so sure about that. Seems like a fair bit of complexity?\n472     //\n473     // Maybe there's a simple solution I'm missing.\n474     //\n475     // ... OK, I tried to fix this. First, I did it by putting `stacks`\n476     // in an `UnsafeCell` and using a `Once` to lazily initialize it.\n477     // I benchmarked it and everything looked okay. I then made this\n478     // function `const` and thought I was just about done. But the\n479     // public pool type wraps its inner pool in a `Box` to keep its\n480     // size down. Blech.\n481     //\n482     // So then I thought that I could push the box down into this\n483     // type (and leave the non-std version unboxed) and use the same\n484     // `UnsafeCell` technique to lazily initialize it. This has the\n485     // downside of the `Once` now needing to get hit in the owner fast\n486     // path, but maybe that's OK? However, I then realized that we can\n487     // only lazily initialize `stacks`, `owner` and `owner_val`. The\n488     // `create` function needs to be put somewhere outside of the box.\n489     // So now the pool is a `Box`, `Once` and a function. Now we're\n490     // starting to defeat the point of boxing in the first place. So I\n491     // backed out that change too.\n492     //\n493     // Back to square one. I maybe we just don't make a pool's\n494     // constructor const and live with it. It's probably not a huge\n495     // deal.\n496     let mut stacks = Vec::with_capacity(MAX_POOL_STACKS);\n497     for _ in 0..stacks.capacity() {\n498         stacks.push(CacheLine(Mutex::new(vec![])));\n499     }\n500     let owner = AtomicUsize::new(THREAD_ID_UNOWNED);\n501     let owner_val = UnsafeCell::new(None); // init'd on first access\n502     Pool { create, stacks, owner, owner_val }\n503 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}