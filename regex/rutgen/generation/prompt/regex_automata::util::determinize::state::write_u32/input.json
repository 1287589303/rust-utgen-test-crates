{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\npub(crate) trait Endian {\n    fn write_u16(n: u16, dst: &mut [u8]);\n    fn write_u32(n: u32, dst: &mut [u8]);\n    fn write_u128(n: u128, dst: &mut [u8]);\n}\nfn write_u32(dst: &mut Vec<u8>, n: u32) {\n    use crate::util::wire::NE;\n    let start = dst.len();\n    dst.extend(core::iter::repeat(0).take(mem::size_of::<u32>()));\n    NE::write_u32(n, &mut dst[start..]);\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Push a native-endian encoded `n` on to `dst`.\n791 fn write_u32(dst: &mut Vec<u8>, n: u32) {\n792     use crate::util::wire::NE;\n793 \n794     let start = dst.len();\n795     dst.extend(core::iter::repeat(0).take(mem::size_of::<u32>()));\n796     NE::write_u32(n, &mut dst[start..]);\n797 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}