{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/nfa.rs\n// crate name is regex_automata\nuse core::{fmt, mem};\nuse alloc::{boxed::Box, format, string::String, sync::Arc, vec, vec::Vec};\n#[cfg(feature = \"syntax\")]\nuse crate::nfa::thompson::{\n    compiler::{Compiler, Config},\n    error::BuildError,\n};\nuse crate::{\n    nfa::thompson::builder::Builder,\n    util::{\n        alphabet::{self, ByteClassSet, ByteClasses},\n        captures::{GroupInfo, GroupInfoError},\n        look::{Look, LookMatcher, LookSet},\n        primitives::{IteratorIndexExt, PatternID, PatternIDIter, SmallIndex, StateID},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct DenseTransitions {\n    /// A dense representation of this state's transitions on the heap. This\n    /// always has length 256.\n    pub transitions: Box<[StateID]>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl DenseTransitions {\n    #[inline]\n    pub fn matches(&self, haystack: &[u8], at: usize) -> Option<StateID> {\n        haystack.get(at).and_then(|&b| self.matches_byte(b))\n    }\n    #[inline]\n    pub(crate) fn matches_unit(&self, unit: alphabet::Unit) -> Option<StateID> {}\n    #[inline]\n    pub fn matches_byte(&self, byte: u8) -> Option<StateID> {}\n    pub(crate) fn iter(&self) -> impl Iterator<Item = Transition> + '_ {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This follows the matching transition for a particular byte.\n///\n/// The matching transition is found by looking for a transition that\n/// doesn't correspond to `StateID::ZERO` for the byte `at` the given\n/// position in `haystack`.\n///\n/// If `at >= haystack.len()`, then this returns `None`.\n1895 pub fn matches(&self, haystack: &[u8], at: usize) -> Option<StateID> {\n1896     haystack.get(at).and_then(|&b| self.matches_byte(b))\n1897 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}