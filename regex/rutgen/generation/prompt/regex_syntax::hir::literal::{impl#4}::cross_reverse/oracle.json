{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Eq, PartialEq)]\npub struct Seq {\n    /// The members of this seq.\n    ///\n    /// When `None`, the seq represents all possible literals. That is, it\n    /// prevents one from making assumptions about specific literals in the\n    /// seq, and forces one to treat it as if any literal might be in the seq.\n    ///\n    /// Note that `Some(vec![])` is valid and corresponds to the empty seq of\n    /// literals, i.e., a regex that can never match. For example, `[a&&b]`.\n    /// It is distinct from `Some(vec![\"\"])`, which corresponds to the seq\n    /// containing an empty string, which matches at every position.\n    literals: Option<Vec<Literal>>,\n}\n#[derive(Clone, Eq, PartialEq, PartialOrd, Ord)]\npub struct Literal {\n    bytes: Vec<u8>,\n    exact: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Literal(pub Box<[u8]>);\nimpl Seq {\n    #[inline]\n    pub fn empty() -> Seq {}\n    #[inline]\n    pub fn infinite() -> Seq {}\n    #[inline]\n    pub fn singleton(lit: Literal) -> Seq {}\n    #[inline]\n    pub fn new<I, B>(it: I) -> Seq\n    where\n        I: IntoIterator<Item = B>,\n        B: AsRef<[u8]>,\n    {}\n    #[inline]\n    pub fn literals(&self) -> Option<&[Literal]> {}\n    #[inline]\n    pub fn push(&mut self, lit: Literal) {}\n    #[inline]\n    pub fn make_inexact(&mut self) {}\n    #[inline]\n    pub fn make_infinite(&mut self) {}\n    #[inline]\n    pub fn cross_forward(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn cross_reverse(&mut self, other: &mut Seq) {\n        let (lits1, lits2) = match self.cross_preamble(other) {\n            None => return,\n            Some((lits1, lits2)) => (lits1, lits2),\n        };\n        let newcap = lits1.len().saturating_mul(lits2.len());\n        let selflits = mem::replace(lits1, Vec::with_capacity(newcap));\n        for (i, otherlit) in lits2.drain(..).enumerate() {\n            for selflit in selflits.iter() {\n                if !selflit.is_exact() {\n                    if i == 0 {\n                        lits1.push(selflit.clone());\n                    }\n                    continue;\n                }\n                let mut newlit = Literal::exact(\n                    Vec::with_capacity(otherlit.len() + selflit.len()),\n                );\n                newlit.extend(&otherlit);\n                newlit.extend(&selflit);\n                if !otherlit.is_exact() {\n                    newlit.make_inexact();\n                }\n                lits1.push(newlit);\n            }\n        }\n        self.dedup();\n    }\n    fn cross_preamble<'a>(\n        &'a mut self,\n        other: &'a mut Seq,\n    ) -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {\n        let lits2 = match other.literals {\n            None => {\n                if self.min_literal_len() == Some(0) {\n                    *self = Seq::infinite();\n                } else {\n                    self.make_inexact();\n                }\n                return None;\n            }\n            Some(ref mut lits) => lits,\n        };\n        let lits1 = match self.literals {\n            None => {\n                lits2.drain(..);\n                return None;\n            }\n            Some(ref mut lits) => lits,\n        };\n        Some((lits1, lits2))\n    }\n    #[inline]\n    pub fn union(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn union_into_empty(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn dedup(&mut self) {\n        if let Some(ref mut lits) = self.literals {\n            lits.dedup_by(|lit1, lit2| {\n                if lit1.as_bytes() != lit2.as_bytes() {\n                    return false;\n                }\n                if lit1.is_exact() != lit2.is_exact() {\n                    lit1.make_inexact();\n                    lit2.make_inexact();\n                }\n                true\n            });\n        }\n    }\n    #[inline]\n    pub fn sort(&mut self) {}\n    #[inline]\n    pub fn reverse_literals(&mut self) {}\n    #[inline]\n    pub fn minimize_by_preference(&mut self) {}\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn is_finite(&self) -> bool {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn is_inexact(&self) -> bool {}\n    #[inline]\n    pub fn max_union_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn max_cross_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn min_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn max_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn longest_common_prefix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn longest_common_suffix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn optimize_for_prefix_by_preference(&mut self) {}\n    #[inline]\n    pub fn optimize_for_suffix_by_preference(&mut self) {}\n    fn optimize_by_preference(&mut self, prefix: bool) {}\n}\nimpl Literal {\n    #[inline]\n    pub fn exact<B: Into<Vec<u8>>>(bytes: B) -> Literal {}\n    #[inline]\n    pub fn inexact<B: Into<Vec<u8>>>(bytes: B) -> Literal {}\n    #[inline]\n    pub fn as_bytes(&self) -> &[u8] {}\n    #[inline]\n    pub fn into_bytes(self) -> Vec<u8> {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.as_bytes().len()\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {\n        self.exact\n    }\n    #[inline]\n    pub fn make_inexact(&mut self) {\n        self.exact = false;\n    }\n    #[inline]\n    pub fn reverse(&mut self) {}\n    #[inline]\n    pub fn extend(&mut self, lit: &Literal) {\n        if !self.is_exact() {\n            return;\n        }\n        self.bytes.extend_from_slice(&lit.bytes);\n    }\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    fn is_poisonous(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Modify this sequence to contain the cross product between it and\n/// the sequence given, where the sequences are treated as suffixes\n/// instead of prefixes. Namely, the sequence `other` is *prepended*\n/// to `self` (as opposed to `other` being *appended* to `self` in\n/// [`Seq::cross_forward`]).\n///\n/// The cross product only considers literals in this sequence that are\n/// exact. That is, inexact literals are not extended.\n///\n/// The literals are always drained from `other`, even if none are used.\n/// This permits callers to reuse the sequence allocation elsewhere.\n///\n/// If this sequence is infinite, then this is a no-op, regardless of what\n/// `other` contains (and in this case, the literals are still drained from\n/// `other`). If `other` is infinite and this sequence is finite, then this\n/// is a no-op, unless this sequence contains a zero-length literal. In\n/// which case, the infiniteness of `other` infects this sequence, and this\n/// sequence is itself made infinite.\n///\n/// Like [`Seq::union`], this may attempt to deduplicate literals. See\n/// [`Seq::dedup`] for how deduplication deals with exact and inexact\n/// literals.\n///\n/// # Example\n///\n/// This example shows basic usage and how exact and inexact literals\n/// interact.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq1 = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// let mut seq2 = Seq::from_iter([\n///     Literal::inexact(\"quux\"),\n///     Literal::exact(\"baz\"),\n/// ]);\n/// seq1.cross_reverse(&mut seq2);\n///\n/// // The literals are pulled out of seq2.\n/// assert_eq!(Some(0), seq2.len());\n///\n/// let expected = Seq::from_iter([\n///     Literal::inexact(\"quuxfoo\"),\n///     Literal::inexact(\"bar\"),\n///     Literal::exact(\"bazfoo\"),\n/// ]);\n/// assert_eq!(expected, seq1);\n/// ```\n///\n/// This example shows the behavior of when `other` is an infinite\n/// sequence.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq1 = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// let mut seq2 = Seq::infinite();\n/// seq1.cross_reverse(&mut seq2);\n///\n/// // When seq2 is infinite, cross product doesn't add anything, but\n/// // ensures all members of seq1 are inexact.\n/// let expected = Seq::from_iter([\n///     Literal::inexact(\"foo\"),\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// assert_eq!(expected, seq1);\n/// ```\n///\n/// This example is like the one above, but shows what happens when this\n/// sequence contains an empty string. In this case, an infinite `other`\n/// sequence infects this sequence (because the empty string means that\n/// there are no finite suffixes):\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq1 = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::exact(\"\"), // inexact provokes same behavior\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// let mut seq2 = Seq::infinite();\n/// seq1.cross_reverse(&mut seq2);\n///\n/// // seq1 is now infinite!\n/// assert!(!seq1.is_finite());\n/// ```\n///\n/// This example shows the behavior when this sequence is infinite.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq1 = Seq::infinite();\n/// let mut seq2 = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// seq1.cross_reverse(&mut seq2);\n///\n/// // seq1 remains unchanged.\n/// assert!(!seq1.is_finite());\n/// // Even though the literals in seq2 weren't used, it was still drained.\n/// assert_eq!(Some(0), seq2.len());\n/// ```\n1098 pub fn cross_reverse(&mut self, other: &mut Seq) {\n1099     let (lits1, lits2) = match self.cross_preamble(other) {\n1100         None => return,\n1101         Some((lits1, lits2)) => (lits1, lits2),\n1102     };\n1103     // We basically proceed as we do in 'cross_forward' at this point,\n1104     // except that the outer loop is now 'other' and the inner loop is now\n1105     // 'self'. That's because 'self' corresponds to suffixes and 'other'\n1106     // corresponds to the sequence we want to *prepend* to the suffixes.\n1107     let newcap = lits1.len().saturating_mul(lits2.len());\n1108     let selflits = mem::replace(lits1, Vec::with_capacity(newcap));\n1109     for (i, otherlit) in lits2.drain(..).enumerate() {\n1110         for selflit in selflits.iter() {\n1111             if !selflit.is_exact() {\n1112                 // If the suffix isn't exact, then we can't prepend\n1113                 // anything to it. However, we still want to keep it. But\n1114                 // we only want to keep one of them, to avoid duplication.\n1115                 // (The duplication is okay from a correctness perspective,\n1116                 // but wasteful.)\n1117                 if i == 0 {\n1118                     lits1.push(selflit.clone());\n1119                 }\n1120                 continue;\n1121             }\n1122             let mut newlit = Literal::exact(Vec::with_capacity(\n1123                 otherlit.len() + selflit.len(),\n1124             ));\n1125             newlit.extend(&otherlit);\n1126             newlit.extend(&selflit);\n1127             if !otherlit.is_exact() {\n1128                 newlit.make_inexact();\n1129             }\n1130             lits1.push(newlit);\n1131         }\n1132     }\n1133     self.dedup();\n1134 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}