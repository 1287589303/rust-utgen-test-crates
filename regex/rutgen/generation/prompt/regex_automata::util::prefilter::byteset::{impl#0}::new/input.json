{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/byteset.rs\n// crate name is regex_automata\nuse crate::util::{prefilter::PrefilterI, search::{MatchKind, Span}};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl ByteSet {\n    pub(crate) fn new<B: AsRef<[u8]>>(\n        _kind: MatchKind,\n        needles: &[B],\n    ) -> Option<ByteSet> {\n        #[cfg(not(feature = \"perf-literal-multisubstring\"))] { None }\n        #[cfg(feature = \"perf-literal-multisubstring\")]\n        {\n            let mut set = [false; 256];\n            for needle in needles.iter() {\n                let needle = needle.as_ref();\n                if needle.len() != 1 {\n                    return None;\n                }\n                set[usize::from(needle[0])] = true;\n            }\n            Some(ByteSet(set))\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n10 pub(crate) fn new<B: AsRef<[u8]>>(\n11     _kind: MatchKind,\n12     needles: &[B],\n13 ) -> Option<ByteSet> {\n14     #[cfg(not(feature = \"perf-literal-multisubstring\"))]\n15     {\n16         None\n17     }\n18     #[cfg(feature = \"perf-literal-multisubstring\")]\n19     {\n20         let mut set = [false; 256];\n21         for needle in needles.iter() {\n22             let needle = needle.as_ref();\n23             if needle.len() != 1 {\n24                 return None;\n25             }\n26             set[usize::from(needle[0])] = true;\n27         }\n28         Some(ByteSet(set))\n29     }\n30 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}