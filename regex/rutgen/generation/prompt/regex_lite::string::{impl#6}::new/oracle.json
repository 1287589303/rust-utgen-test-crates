{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Debug)]\npub struct RegexBuilder {\n    pattern: String,\n    hir_config: hir::Config,\n    nfa_config: nfa::Config,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {\n        RegexBuilder::new(pattern).build()\n    }\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {}\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {\n        RegexBuilder {\n            pattern: pattern.to_string(),\n            hir_config: hir::Config::default(),\n            nfa_config: nfa::Config::default(),\n        }\n    }\n    pub fn build(&self) -> Result<Regex, Error> {\n        let hir = Hir::parse(self.hir_config, &self.pattern)?;\n        let nfa = NFA::new(self.nfa_config, self.pattern.clone(), &hir)?;\n        let pikevm = Arc::new(PikeVM::new(nfa));\n        let pool = {\n            let pikevm = Arc::clone(&pikevm);\n            let create = Box::new(move || Cache::new(&pikevm));\n            CachePool::new(create)\n        };\n        Ok(Regex { pikevm, pool })\n    }\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, limit: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compiles a regular expression. Once compiled, it can be used repeatedly\n/// to search, split or replace substrings in a haystack.\n///\n/// Note that regex compilation tends to be a somewhat expensive process,\n/// and unlike higher level environments, compilation is not automatically\n/// cached for you. One should endeavor to compile a regex once and then\n/// reuse it. For example, it's a bad idea to compile the same regex\n/// repeatedly in a loop.\n///\n/// # Errors\n///\n/// If an invalid pattern is given, then an error is returned.\n/// An error is also returned if the pattern is valid, but would\n/// produce a regex that is bigger than the configured size limit via\n/// [`RegexBuilder::size_limit`]. (A reasonable size limit is enabled by\n/// default.)\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// // An Invalid pattern because of an unclosed parenthesis\n/// assert!(Regex::new(r\"foo(bar\").is_err());\n/// // An invalid pattern because the regex would be too big\n/// // because Unicode tends to inflate things.\n/// assert!(Regex::new(r\"\\w{1000000}\").is_err());\n/// ```\n168 pub fn new(pattern: &str) -> Result<Regex, Error> {\n169     RegexBuilder::new(pattern).build()\n170 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}