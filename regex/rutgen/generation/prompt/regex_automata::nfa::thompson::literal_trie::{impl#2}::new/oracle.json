{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/literal_trie.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, compiler::ThompsonRef, BuildError, Builder},\n    util::primitives::{IteratorIndexExt, StateID},\n};\n#[derive(Debug)]\nstruct Frame<'a> {\n    /// The remaining chunks to visit for a trie state.\n    chunks: StateChunksIter<'a>,\n    /// The transitions of the current chunk that we're iterating over. Since\n    /// every trie state has at least one chunk, every frame is initialized\n    /// with the first chunk's transitions ready to be consumed.\n    transitions: core::slice::Iter<'a, Transition>,\n    /// The NFA state IDs pointing to the start of each chunk compiled by\n    /// this trie state. This ultimately gets converted to an NFA union once\n    /// the entire trie state (and all of its children) have been compiled.\n    /// The order of these matters for leftmost-first match semantics, since\n    /// earlier matches in the union are preferred over later ones.\n    union: Vec<StateID>,\n    /// The actual NFA transitions for a single chunk in a trie state. This\n    /// gets converted to an NFA sparse state, and its corresponding NFA state\n    /// ID should get added to 'union'.\n    sparse: Vec<thompson::Transition>,\n}\n#[derive(Clone, Default)]\nstruct State {\n    transitions: Vec<Transition>,\n    chunks: Vec<(usize, usize)>,\n}\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Debug)]\nstruct StateChunksIter<'a> {\n    transitions: &'a [Transition],\n    chunks: core::slice::Iter<'a, (usize, usize)>,\n    active: Option<&'a [Transition]>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\nimpl<'a> Frame<'a> {\n    fn new(state: &'a State) -> Frame<'a> {\n        let mut chunks = state.chunks();\n        let chunk = chunks.next().unwrap();\n        let transitions = chunk.iter();\n        Frame {\n            chunks,\n            transitions,\n            union: vec![],\n            sparse: vec![],\n        }\n    }\n}\nimpl State {\n    fn add_match(&mut self) {}\n    fn is_leaf(&self) -> bool {}\n    fn chunks(&self) -> StateChunksIter<'_> {\n        StateChunksIter {\n            transitions: &*self.transitions,\n            chunks: self.chunks.iter(),\n            active: Some(self.active_chunk()),\n        }\n    }\n    fn active_chunk(&self) -> &[Transition] {}\n    fn active_chunk_start(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new stack frame for trie traversal. This initializes the\n/// 'transitions' iterator to the transitions for the first chunk, with the\n/// 'chunks' iterator being every chunk after the first one.\n326 fn new(state: &'a State) -> Frame<'a> {\n327     let mut chunks = state.chunks();\n328     // every state has at least 1 chunk\n329     let chunk = chunks.next().unwrap();\n330     let transitions = chunk.iter();\n331     Frame { chunks, transitions, union: vec![], sparse: vec![] }\n332 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}