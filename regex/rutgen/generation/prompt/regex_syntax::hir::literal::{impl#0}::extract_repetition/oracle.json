{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Debug)]\npub struct Extractor {\n    kind: ExtractKind,\n    limit_class: usize,\n    limit_repeat: usize,\n    limit_literal_len: usize,\n    limit_total: usize,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Seq {\n    /// The members of this seq.\n    ///\n    /// When `None`, the seq represents all possible literals. That is, it\n    /// prevents one from making assumptions about specific literals in the\n    /// seq, and forces one to treat it as if any literal might be in the seq.\n    ///\n    /// Note that `Some(vec![])` is valid and corresponds to the empty seq of\n    /// literals, i.e., a regex that can never match. For example, `[a&&b]`.\n    /// It is distinct from `Some(vec![\"\"])`, which corresponds to the seq\n    /// containing an empty string, which matches at every position.\n    literals: Option<Vec<Literal>>,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Repetition {\n    /// The minimum range of the repetition.\n    ///\n    /// Note that special cases like `?`, `+` and `*` all get translated into\n    /// the ranges `{0,1}`, `{1,}` and `{0,}`, respectively.\n    ///\n    /// When `min` is zero, this expression can match the empty string\n    /// regardless of what its sub-expression is.\n    pub min: u32,\n    /// The maximum range of the repetition.\n    ///\n    /// Note that when `max` is `None`, `min` acts as a lower bound but where\n    /// there is no upper bound. For something like `x{5}` where the min and\n    /// max are equivalent, `min` will be set to `5` and `max` will be set to\n    /// `Some(5)`.\n    pub max: Option<u32>,\n    /// Whether this repetition operator is greedy or not. A greedy operator\n    /// will match as much as it can. A non-greedy operator will match as\n    /// little as it can.\n    ///\n    /// Typically, operators are greedy by default and are only non-greedy when\n    /// a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is\n    /// not. However, this can be inverted via the `U` \"ungreedy\" flag.\n    pub greedy: bool,\n    /// The expression being repeated.\n    pub sub: Box<Hir>,\n}\n#[derive(Clone, Eq, PartialEq, PartialOrd, Ord)]\npub struct Literal {\n    bytes: Vec<u8>,\n    exact: bool,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum ExtractKind {\n    /// Extracts only prefix literals from a regex.\n    Prefix,\n    /// Extracts only suffix literals from a regex.\n    ///\n    /// Note that the sequence returned by suffix literals currently may\n    /// not correctly represent leftmost-first or \"preference\" order match\n    /// semantics.\n    Suffix,\n}\nimpl Extractor {\n    pub fn new() -> Extractor {}\n    pub fn extract(&self, hir: &Hir) -> Seq {\n        use crate::hir::HirKind::*;\n        match *hir.kind() {\n            Empty | Look(_) => Seq::singleton(self::Literal::exact(vec![])),\n            Literal(hir::Literal(ref bytes)) => {\n                let mut seq = Seq::singleton(self::Literal::exact(bytes.to_vec()));\n                self.enforce_literal_len(&mut seq);\n                seq\n            }\n            Class(hir::Class::Unicode(ref cls)) => self.extract_class_unicode(cls),\n            Class(hir::Class::Bytes(ref cls)) => self.extract_class_bytes(cls),\n            Repetition(ref rep) => self.extract_repetition(rep),\n            Capture(hir::Capture { ref sub, .. }) => self.extract(sub),\n            Concat(ref hirs) => {\n                match self.kind {\n                    ExtractKind::Prefix => self.extract_concat(hirs.iter()),\n                    ExtractKind::Suffix => self.extract_concat(hirs.iter().rev()),\n                }\n            }\n            Alternation(ref hirs) => self.extract_alternation(hirs.iter()),\n        }\n    }\n    pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {}\n    pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_repeat(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_literal_len(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_total(&mut self, limit: usize) -> &mut Extractor {}\n    fn extract_concat<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_alternation<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_repetition(&self, rep: &hir::Repetition) -> Seq {\n        let mut subseq = self.extract(&rep.sub);\n        match *rep {\n            hir::Repetition { min: 0, max, greedy, .. } => {\n                if max != Some(1) {\n                    subseq.make_inexact();\n                }\n                let mut empty = Seq::singleton(Literal::exact(vec![]));\n                if !greedy {\n                    mem::swap(&mut subseq, &mut empty);\n                }\n                self.union(subseq, &mut empty)\n            }\n            hir::Repetition { min, max: Some(max), .. } if min == max => {\n                assert!(min > 0);\n                let limit = u32::try_from(self.limit_repeat).unwrap_or(u32::MAX);\n                let mut seq = Seq::singleton(Literal::exact(vec![]));\n                for _ in 0..cmp::min(min, limit) {\n                    if seq.is_inexact() {\n                        break;\n                    }\n                    seq = self.cross(seq, &mut subseq.clone());\n                }\n                if usize::try_from(min).is_err() || min > limit {\n                    seq.make_inexact();\n                }\n                seq\n            }\n            hir::Repetition { min, .. } => {\n                assert!(min > 0);\n                let limit = u32::try_from(self.limit_repeat).unwrap_or(u32::MAX);\n                let mut seq = Seq::singleton(Literal::exact(vec![]));\n                for _ in 0..cmp::min(min, limit) {\n                    if seq.is_inexact() {\n                        break;\n                    }\n                    seq = self.cross(seq, &mut subseq.clone());\n                }\n                seq.make_inexact();\n                seq\n            }\n        }\n    }\n    fn extract_class_unicode(&self, cls: &hir::ClassUnicode) -> Seq {}\n    fn extract_class_bytes(&self, cls: &hir::ClassBytes) -> Seq {}\n    fn class_over_limit_unicode(&self, cls: &hir::ClassUnicode) -> bool {}\n    fn class_over_limit_bytes(&self, cls: &hir::ClassBytes) -> bool {}\n    fn cross(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {\n        if seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total) {\n            seq2.make_infinite();\n        }\n        if let ExtractKind::Suffix = self.kind {\n            seq1.cross_reverse(seq2);\n        } else {\n            seq1.cross_forward(seq2);\n        }\n        assert!(seq1.len().map_or(true, | x | x <= self.limit_total));\n        self.enforce_literal_len(&mut seq1);\n        seq1\n    }\n    fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {\n        if seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total) {\n            match self.kind {\n                ExtractKind::Prefix => {\n                    seq1.keep_first_bytes(4);\n                    seq2.keep_first_bytes(4);\n                }\n                ExtractKind::Suffix => {\n                    seq1.keep_last_bytes(4);\n                    seq2.keep_last_bytes(4);\n                }\n            }\n            seq1.dedup();\n            seq2.dedup();\n            if seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total) {\n                seq2.make_infinite();\n            }\n        }\n        seq1.union(seq2);\n        assert!(seq1.len().map_or(true, | x | x <= self.limit_total));\n        seq1\n    }\n    fn enforce_literal_len(&self, seq: &mut Seq) {}\n}\nimpl Seq {\n    #[inline]\n    pub fn empty() -> Seq {}\n    #[inline]\n    pub fn infinite() -> Seq {}\n    #[inline]\n    pub fn singleton(lit: Literal) -> Seq {\n        Seq { literals: Some(vec![lit]) }\n    }\n    #[inline]\n    pub fn new<I, B>(it: I) -> Seq\n    where\n        I: IntoIterator<Item = B>,\n        B: AsRef<[u8]>,\n    {}\n    #[inline]\n    pub fn literals(&self) -> Option<&[Literal]> {}\n    #[inline]\n    pub fn push(&mut self, lit: Literal) {}\n    #[inline]\n    pub fn make_inexact(&mut self) {\n        let lits = match self.literals {\n            None => return,\n            Some(ref mut lits) => lits,\n        };\n        for lit in lits.iter_mut() {\n            lit.make_inexact();\n        }\n    }\n    #[inline]\n    pub fn make_infinite(&mut self) {}\n    #[inline]\n    pub fn cross_forward(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn cross_reverse(&mut self, other: &mut Seq) {}\n    fn cross_preamble<'a>(\n        &'a mut self,\n        other: &'a mut Seq,\n    ) -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {}\n    #[inline]\n    pub fn union(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn union_into_empty(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn dedup(&mut self) {}\n    #[inline]\n    pub fn sort(&mut self) {}\n    #[inline]\n    pub fn reverse_literals(&mut self) {}\n    #[inline]\n    pub fn minimize_by_preference(&mut self) {}\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn is_finite(&self) -> bool {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn is_inexact(&self) -> bool {\n        self.literals().map_or(true, |lits| lits.iter().all(|x| !x.is_exact()))\n    }\n    #[inline]\n    pub fn max_union_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn max_cross_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn min_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn max_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn longest_common_prefix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn longest_common_suffix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn optimize_for_prefix_by_preference(&mut self) {}\n    #[inline]\n    pub fn optimize_for_suffix_by_preference(&mut self) {}\n    fn optimize_by_preference(&mut self, prefix: bool) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Extract a sequence of literals from the given repetition. We do our\n/// best, Some examples:\n///\n///   'a*'    => [inexact(a), exact(\"\")]\n///   'a*?'   => [exact(\"\"), inexact(a)]\n///   'a+'    => [inexact(a)]\n///   'a{3}'  => [exact(aaa)]\n///   'a{3,5} => [inexact(aaa)]\n///\n/// The key here really is making sure we get the 'inexact' vs 'exact'\n/// attributes correct on each of the literals we add. For example, the\n/// fact that 'a*' gives us an inexact 'a' and an exact empty string means\n/// that a regex like 'ab*c' will result in [inexact(ab), exact(ac)]\n/// literals being extracted, which might actually be a better prefilter\n/// than just 'a'.\n448 fn extract_repetition(&self, rep: &hir::Repetition) -> Seq {\n449     let mut subseq = self.extract(&rep.sub);\n450     match *rep {\n451         hir::Repetition { min: 0, max, greedy, .. } => {\n452             // When 'max=1', we can retain exactness, since 'a?' is\n453             // equivalent to 'a|'. Similarly below, 'a??' is equivalent to\n454             // '|a'.\n455             if max != Some(1) {\n456                 subseq.make_inexact();\n457             }\n458             let mut empty = Seq::singleton(Literal::exact(vec![]));\n459             if !greedy {\n460                 mem::swap(&mut subseq, &mut empty);\n461             }\n462             self.union(subseq, &mut empty)\n463         }\n464         hir::Repetition { min, max: Some(max), .. } if min == max => {\n465             assert!(min > 0); // handled above\n466             let limit =\n467                 u32::try_from(self.limit_repeat).unwrap_or(u32::MAX);\n468             let mut seq = Seq::singleton(Literal::exact(vec![]));\n469             for _ in 0..cmp::min(min, limit) {\n470                 if seq.is_inexact() {\n471                     break;\n472                 }\n473                 seq = self.cross(seq, &mut subseq.clone());\n474             }\n475             if usize::try_from(min).is_err() || min > limit {\n476                 seq.make_inexact();\n477             }\n478             seq\n479         }\n480         hir::Repetition { min, .. } => {\n481             assert!(min > 0); // handled above\n482             let limit =\n483                 u32::try_from(self.limit_repeat).unwrap_or(u32::MAX);\n484             let mut seq = Seq::singleton(Literal::exact(vec![]));\n485             for _ in 0..cmp::min(min, limit) {\n486                 if seq.is_inexact() {\n487                     break;\n488                 }\n489                 seq = self.cross(seq, &mut subseq.clone());\n490             }\n491             seq.make_inexact();\n492             seq\n493         }\n494     }\n495 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}