{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Debug)]\npub struct Extractor {\n    kind: ExtractKind,\n    limit_class: usize,\n    limit_repeat: usize,\n    limit_literal_len: usize,\n    limit_total: usize,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum ExtractKind {\n    /// Extracts only prefix literals from a regex.\n    Prefix,\n    /// Extracts only suffix literals from a regex.\n    ///\n    /// Note that the sequence returned by suffix literals currently may\n    /// not correctly represent leftmost-first or \"preference\" order match\n    /// semantics.\n    Suffix,\n}\nimpl Extractor {\n    pub fn new() -> Extractor {}\n    pub fn extract(&self, hir: &Hir) -> Seq {}\n    pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {}\n    pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {\n        self.limit_class = limit;\n        self\n    }\n    pub fn limit_repeat(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_literal_len(&mut self, limit: usize) -> &mut Extractor {}\n    pub fn limit_total(&mut self, limit: usize) -> &mut Extractor {}\n    fn extract_concat<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_alternation<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {}\n    fn extract_repetition(&self, rep: &hir::Repetition) -> Seq {}\n    fn extract_class_unicode(&self, cls: &hir::ClassUnicode) -> Seq {}\n    fn extract_class_bytes(&self, cls: &hir::ClassBytes) -> Seq {}\n    fn class_over_limit_unicode(&self, cls: &hir::ClassUnicode) -> bool {}\n    fn class_over_limit_bytes(&self, cls: &hir::ClassBytes) -> bool {}\n    fn cross(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {}\n    fn enforce_literal_len(&self, seq: &mut Seq) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Configure a limit on the length of the sequence that is permitted for\n/// a character class. If a character class exceeds this limit, then the\n/// sequence returned for it is infinite.\n///\n/// This prevents classes like `[A-Z]` or `\\pL` from getting turned into\n/// huge and likely unproductive sequences of literals.\n///\n/// # Example\n///\n/// This example shows how this limit can be lowered to decrease the tolerance\n/// for character classes being turned into literal sequences.\n///\n/// ```\n/// use regex_syntax::{hir::literal::{Extractor, Seq}, parse};\n///\n/// let hir = parse(r\"[0-9]\")?;\n///\n/// let got = Extractor::new().extract(&hir);\n/// let expected = Seq::new([\n///     \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n/// ]);\n/// assert_eq!(expected, got);\n///\n/// // Now let's shrink the limit and see how that changes things.\n/// let got = Extractor::new().limit_class(4).extract(&hir);\n/// let expected = Seq::infinite();\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n255 pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {\n256     self.limit_class = limit;\n257     self\n258 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}