{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {\n        self.replacen(haystack, 0, rep)\n    }\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {\n        if let Some(rep) = rep.no_expansion() {\n            let mut it = self.find_iter(haystack).enumerate().peekable();\n            if it.peek().is_none() {\n                return Cow::Borrowed(haystack);\n            }\n            let mut new = String::with_capacity(haystack.len());\n            let mut last_match = 0;\n            for (i, m) in it {\n                new.push_str(&haystack[last_match..m.start()]);\n                new.push_str(&rep);\n                last_match = m.end();\n                if limit > 0 && i >= limit - 1 {\n                    break;\n                }\n            }\n            new.push_str(&haystack[last_match..]);\n            return Cow::Owned(new);\n        }\n        let mut it = self.captures_iter(haystack).enumerate().peekable();\n        if it.peek().is_none() {\n            return Cow::Borrowed(haystack);\n        }\n        let mut new = String::with_capacity(haystack.len());\n        let mut last_match = 0;\n        for (i, cap) in it {\n            let m = cap.get(0).unwrap();\n            new.push_str(&haystack[last_match..m.start()]);\n            rep.replace_append(&cap, &mut new);\n            last_match = m.end();\n            if limit > 0 && i >= limit - 1 {\n                break;\n            }\n        }\n        new.push_str(&haystack[last_match..]);\n        Cow::Owned(new)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Replaces all non-overlapping matches in the haystack with the\n/// replacement provided. This is the same as calling `replacen` with\n/// `limit` set to `0`.\n///\n/// The documentation for [`Regex::replace`] goes into more detail about\n/// what kinds of replacement strings are supported.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// # Fallibility\n///\n/// If you need to write a replacement routine where any individual\n/// replacement might \"fail,\" doing so with this API isn't really feasible\n/// because there's no way to stop the search process if a replacement\n/// fails. Instead, if you need this functionality, you should consider\n/// implementing your own replacement routine:\n///\n/// ```\n/// use regex_lite::{Captures, Regex};\n///\n/// fn replace_all<E>(\n///     re: &Regex,\n///     haystack: &str,\n///     replacement: impl Fn(&Captures) -> Result<String, E>,\n/// ) -> Result<String, E> {\n///     let mut new = String::with_capacity(haystack.len());\n///     let mut last_match = 0;\n///     for caps in re.captures_iter(haystack) {\n///         let m = caps.get(0).unwrap();\n///         new.push_str(&haystack[last_match..m.start()]);\n///         new.push_str(&replacement(&caps)?);\n///         last_match = m.end();\n///     }\n///     new.push_str(&haystack[last_match..]);\n///     Ok(new)\n/// }\n///\n/// // Let's replace each word with the number of bytes in that word.\n/// // But if we see a word that is \"too long,\" we'll give up.\n/// let re = Regex::new(r\"\\w+\").unwrap();\n/// let replacement = |caps: &Captures| -> Result<String, &'static str> {\n///     if caps[0].len() >= 5 {\n///         return Err(\"word too long\");\n///     }\n///     Ok(caps[0].len().to_string())\n/// };\n/// assert_eq!(\n///     Ok(\"2 3 3 3?\".to_string()),\n///     replace_all(&re, \"hi how are you?\", &replacement),\n/// );\n/// assert!(replace_all(&re, \"hi there\", &replacement).is_err());\n/// ```\n///\n/// # Example\n///\n/// This example shows how to flip the order of whitespace delimited\n/// fields, and normalizes the whitespace that delimits the fields:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(?m)^(\\S+)\\s+(\\S+)$\").unwrap();\n/// let hay = \"\n/// Greetings  1973\n/// Wild\\t1973\n/// BornToRun\\t\\t\\t\\t1975\n/// Darkness                    1978\n/// TheRiver 1980\n/// \";\n/// let new = re.replace_all(hay, \"$2 $1\");\n/// assert_eq!(new, \"\n/// 1973 Greetings\n/// 1973 Wild\n/// 1975 BornToRun\n/// 1978 Darkness\n/// 1980 TheRiver\n/// \");\n/// ```\n828 pub fn replace_all<'h, R: Replacer>(\n829     &self,\n830     haystack: &'h str,\n831     rep: R,\n832 ) -> Cow<'h, str> {\n833     self.replacen(haystack, 0, rep)\n834 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}