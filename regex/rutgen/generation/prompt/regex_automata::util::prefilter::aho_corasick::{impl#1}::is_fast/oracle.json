{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/aho_corasick.rs\n// crate name is regex_automata\nuse crate::util::{prefilter::PrefilterI, search::{MatchKind, Span}};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub(crate) struct AhoCorasick {\n    #[cfg(not(feature = \"perf-literal-multisubstring\"))]\n    _unused: (),\n    #[cfg(feature = \"perf-literal-multisubstring\")]\n    ac: aho_corasick::AhoCorasick,\n}\nimpl PrefilterI for AhoCorasick {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span> {}\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span> {}\n    fn memory_usage(&self) -> usize {}\n    fn is_fast(&self) -> bool {\n        #[cfg(not(feature = \"perf-literal-multisubstring\"))] { unreachable!() }\n        #[cfg(feature = \"perf-literal-multisubstring\")] { false }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n125 fn is_fast(&self) -> bool {\n126     #[cfg(not(feature = \"perf-literal-multisubstring\"))]\n127     {\n128         unreachable!()\n129     }\n130     #[cfg(feature = \"perf-literal-multisubstring\")]\n131     {\n132         // Aho-Corasick is never considered \"fast\" because it's never\n133         // going to be even close to an order of magnitude faster than the\n134         // regex engine itself (assuming a DFA is used). In fact, it is\n135         // usually slower. The magic of Aho-Corasick is that it can search\n136         // a *large* number of literals with a relatively small amount of\n137         // memory. The regex engines are far more wasteful.\n138         //\n139         // Aho-Corasick may be \"fast\" when the regex engine corresponds\n140         // to, say, the PikeVM. That happens when the lazy DFA couldn't be\n141         // built or used for some reason. But in these cases, the regex\n142         // itself is likely quite big and we're probably hosed no matter\n143         // what we do. (In this case, the best bet is for the caller to\n144         // increase some of the memory limits on the hybrid cache capacity\n145         // and hope that's enough.)\n146         false\n147     }\n148 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}