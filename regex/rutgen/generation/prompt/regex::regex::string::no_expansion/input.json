{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\nfn no_expansion<T: AsRef<str>>(replacement: &T) -> Option<Cow<'_, str>> {\n    let replacement = replacement.as_ref();\n    match crate::find_byte::find_byte(b'$', replacement.as_bytes()) {\n        Some(_) => None,\n        None => Some(Cow::Borrowed(replacement)),\n    }\n}\npub(crate) fn find_byte(needle: u8, haystack: &[u8]) -> Option<usize> {\n    #[cfg(not(feature = \"perf-literal\"))]\n    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n        haystack.iter().position(|&b| b == needle)\n    }\n    #[cfg(feature = \"perf-literal\")]\n    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n        memchr::memchr(needle, haystack)\n    }\n    imp(needle, haystack)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Quickly checks the given replacement string for whether interpolation\n/// should be done on it. It returns `None` if a `$` was found anywhere in the\n/// given string, which suggests interpolation needs to be done. But if there's\n/// no `$` anywhere, then interpolation definitely does not need to be done. In\n/// that case, the given string is returned as a borrowed `Cow`.\n///\n/// This is meant to be used to implement the `Replacer::no_expandsion` method\n/// in its various trait impls.\n2598 fn no_expansion<T: AsRef<str>>(replacement: &T) -> Option<Cow<'_, str>> {\n2599     let replacement = replacement.as_ref();\n2600     match crate::find_byte::find_byte(b'$', replacement.as_bytes()) {\n2601         Some(_) => None,\n2602         None => Some(Cow::Borrowed(replacement)),\n2603     }\n2604 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}