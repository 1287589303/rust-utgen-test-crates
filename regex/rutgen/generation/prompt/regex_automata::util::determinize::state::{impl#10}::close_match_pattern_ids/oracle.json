{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\npub(crate) trait Endian {\n    fn write_u16(n: u16, dst: &mut [u8]);\n    fn write_u32(n: u32, dst: &mut [u8]);\n    fn write_u128(n: u128, dst: &mut [u8]);\n}\nstruct ReprVec<'a>(&'a mut Vec<u8>);\nstruct Repr<'a>(&'a [u8]);\nimpl<'a> ReprVec<'a> {\n    fn set_is_match(&mut self) {}\n    fn set_has_pattern_ids(&mut self) {}\n    fn set_is_from_word(&mut self) {}\n    fn set_is_half_crlf(&mut self) {}\n    fn look_have(&self) -> LookSet {}\n    fn look_need(&self) -> LookSet {}\n    fn set_look_have(&mut self, mut set: impl FnMut(LookSet) -> LookSet) {}\n    fn set_look_need(&mut self, mut set: impl FnMut(LookSet) -> LookSet) {}\n    fn add_match_pattern_id(&mut self, pid: PatternID) {}\n    fn close_match_pattern_ids(&mut self) {\n        if !self.repr().has_pattern_ids() {\n            return;\n        }\n        let patsize = PatternID::SIZE;\n        let pattern_bytes = self.0.len() - 13;\n        assert_eq!(pattern_bytes % patsize, 0);\n        let count32 = u32::try_from(pattern_bytes / patsize).unwrap();\n        wire::NE::write_u32(count32, &mut self.0[9..13]);\n    }\n    fn add_nfa_state_id(&mut self, prev: &mut StateID, sid: StateID) {}\n    fn repr(&self) -> Repr<'_> {\n        Repr(self.0.as_slice())\n    }\n}\nimpl<'a> Repr<'a> {\n    fn is_match(&self) -> bool {}\n    fn has_pattern_ids(&self) -> bool {\n        self.0[0] & (1 << 1) > 0\n    }\n    fn is_from_word(&self) -> bool {}\n    fn is_half_crlf(&self) -> bool {}\n    fn look_have(&self) -> LookSet {}\n    fn look_need(&self) -> LookSet {}\n    fn match_len(&self) -> usize {}\n    fn match_pattern(&self, index: usize) -> PatternID {}\n    fn match_pattern_ids(&self) -> Option<Vec<PatternID>> {}\n    fn iter_match_pattern_ids<F: FnMut(PatternID)>(&self, mut f: F) {}\n    fn iter_nfa_state_ids<F: FnMut(StateID)>(&self, mut f: F) {}\n    fn pattern_offset_end(&self) -> usize {}\n    fn encoded_pattern_len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Indicate that no more pattern IDs will be added to this state.\n///\n/// Once this is called, callers must not call it or 'add_match_pattern_id'\n/// again.\n///\n/// This should not be exposed explicitly outside of this module. It\n/// should be called only when converting a StateBuilderMatches into a\n/// StateBuilderNFA.\n701 fn close_match_pattern_ids(&mut self) {\n702     // If we never wrote any pattern IDs, then there's nothing to do here.\n703     if !self.repr().has_pattern_ids() {\n704         return;\n705     }\n706     let patsize = PatternID::SIZE;\n707     let pattern_bytes = self.0.len() - 13;\n708     // Every pattern ID uses 4 bytes, so number of bytes should be\n709     // divisible by 4.\n710     assert_eq!(pattern_bytes % patsize, 0);\n711     // This unwrap is OK since we are guaranteed that the maximum number\n712     // of possible patterns fits into a u32.\n713     let count32 = u32::try_from(pattern_bytes / patsize).unwrap();\n714     wire::NE::write_u32(count32, &mut self.0[9..13]);\n715 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}