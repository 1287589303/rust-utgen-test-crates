{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl Match {\n    #[inline]\n    pub fn new<S: Into<Span>>(pattern: PatternID, span: S) -> Match {}\n    #[inline]\n    pub fn must<S: Into<Span>>(pattern: usize, span: S) -> Match {}\n    #[inline]\n    pub fn pattern(&self) -> PatternID {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn range(&self) -> core::ops::Range<usize> {\n        self.span().range()\n    }\n    #[inline]\n    pub fn span(&self) -> Span {\n        self.span\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\nimpl Span {\n    #[inline]\n    pub fn range(&self) -> Range<usize> {\n        Range::from(*self)\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn contains(&self, offset: usize) -> bool {}\n    #[inline]\n    pub fn offset(&self, offset: usize) -> Span {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the match span as a range.\n///\n/// This is a convenience routine for `Match::span().range()`.\n1086 pub fn range(&self) -> core::ops::Range<usize> {\n1087     self.span().range()\n1088 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}