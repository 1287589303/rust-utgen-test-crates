{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\npub trait Interval: Clone + Copy + Debug + Default + Eq + PartialEq + PartialOrd + Ord {\n    type Bound: Bound;\n    fn lower(&self) -> Self::Bound;\n    fn upper(&self) -> Self::Bound;\n    fn set_lower(&mut self, bound: Self::Bound);\n    fn set_upper(&mut self, bound: Self::Bound);\n    fn case_fold_simple(\n        &self,\n        intervals: &mut Vec<Self>,\n    ) -> Result<(), unicode::CaseFoldError>;\n    fn create(lower: Self::Bound, upper: Self::Bound) -> Self {\n        let mut int = Self::default();\n        if lower <= upper {\n            int.set_lower(lower);\n            int.set_upper(upper);\n        } else {\n            int.set_lower(upper);\n            int.set_upper(lower);\n        }\n        int\n    }\n    fn union(&self, other: &Self) -> Option<Self> {\n        if !self.is_contiguous(other) {\n            return None;\n        }\n        let lower = cmp::min(self.lower(), other.lower());\n        let upper = cmp::max(self.upper(), other.upper());\n        Some(Self::create(lower, upper))\n    }\n    fn intersect(&self, other: &Self) -> Option<Self> {\n        let lower = cmp::max(self.lower(), other.lower());\n        let upper = cmp::min(self.upper(), other.upper());\n        if lower <= upper { Some(Self::create(lower, upper)) } else { None }\n    }\n    fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {\n        if self.is_subset(other) {\n            return (None, None);\n        }\n        if self.is_intersection_empty(other) {\n            return (Some(self.clone()), None);\n        }\n        let add_lower = other.lower() > self.lower();\n        let add_upper = other.upper() < self.upper();\n        assert!(add_lower || add_upper);\n        let mut ret = (None, None);\n        if add_lower {\n            let upper = other.lower().decrement();\n            ret.0 = Some(Self::create(self.lower(), upper));\n        }\n        if add_upper {\n            let lower = other.upper().increment();\n            let range = Self::create(lower, self.upper());\n            if ret.0.is_none() {\n                ret.0 = Some(range);\n            } else {\n                ret.1 = Some(range);\n            }\n        }\n        ret\n    }\n    fn is_contiguous(&self, other: &Self) -> bool {\n        let lower1 = self.lower().as_u32();\n        let upper1 = self.upper().as_u32();\n        let lower2 = other.lower().as_u32();\n        let upper2 = other.upper().as_u32();\n        cmp::max(lower1, lower2) <= cmp::min(upper1, upper2).saturating_add(1)\n    }\n    fn is_intersection_empty(&self, other: &Self) -> bool {\n        let (lower1, upper1) = (self.lower(), self.upper());\n        let (lower2, upper2) = (other.lower(), other.upper());\n        cmp::max(lower1, lower2) > cmp::min(upper1, upper2)\n    }\n    fn is_subset(&self, other: &Self) -> bool {\n        let (lower1, upper1) = (self.lower(), self.upper());\n        let (lower2, upper2) = (other.lower(), other.upper());\n        (lower2 <= lower1 && lower1 <= upper2) && (lower2 <= upper1 && upper1 <= upper2)\n    }\n}\n#[derive(Clone, Copy, Default, Eq, PartialEq, PartialOrd, Ord)]\npub struct ClassUnicodeRange {\n    start: char,\n    end: char,\n}\n#[derive(Debug)]\npub struct SimpleCaseFolder {\n    /// The simple case fold table. It's a sorted association list, where the\n    /// keys are Unicode scalar values and the values are the corresponding\n    /// equivalence class (not including the key) of the \"simple\" case folded\n    /// Unicode scalar values.\n    table: &'static [(char, &'static [char])],\n    /// The last codepoint that was used for a lookup.\n    last: Option<char>,\n    /// The index to the entry in `table` corresponding to the smallest key `k`\n    /// such that `k > k0`, where `k0` is the most recent key lookup. Note that\n    /// in particular, `k0` may not be in the table!\n    next: usize,\n}\n#[derive(Debug)]\npub struct CaseFoldError(());\nimpl Interval for ClassUnicodeRange {\n    type Bound = char;\n    #[inline]\n    fn lower(&self) -> char {}\n    #[inline]\n    fn upper(&self) -> char {}\n    #[inline]\n    fn set_lower(&mut self, bound: char) {}\n    #[inline]\n    fn set_upper(&mut self, bound: char) {}\n    fn case_fold_simple(\n        &self,\n        ranges: &mut Vec<ClassUnicodeRange>,\n    ) -> Result<(), unicode::CaseFoldError> {\n        let mut folder = unicode::SimpleCaseFolder::new()?;\n        if !folder.overlaps(self.start, self.end) {\n            return Ok(());\n        }\n        let (start, end) = (u32::from(self.start), u32::from(self.end));\n        for cp in (start..=end).filter_map(char::from_u32) {\n            for &cp_folded in folder.mapping(cp) {\n                ranges.push(ClassUnicodeRange::new(cp_folded, cp_folded));\n            }\n        }\n        Ok(())\n    }\n}\nimpl SimpleCaseFolder {\n    pub fn new() -> Result<SimpleCaseFolder, CaseFoldError> {\n        #[cfg(not(feature = \"unicode-case\"))] { Err(CaseFoldError(())) }\n        #[cfg(feature = \"unicode-case\")]\n        {\n            Ok(SimpleCaseFolder {\n                table: crate::unicode_tables::case_folding_simple::CASE_FOLDING_SIMPLE,\n                last: None,\n                next: 0,\n            })\n        }\n    }\n    pub fn mapping(&mut self, c: char) -> &'static [char] {\n        if let Some(last) = self.last {\n            assert!(\n                last < c,\n                \"got codepoint U+{:X} which occurs before \\\n                 last codepoint U+{:X}\",\n                u32::from(c), u32::from(last),\n            );\n        }\n        self.last = Some(c);\n        if self.next >= self.table.len() {\n            return &[];\n        }\n        let (k, v) = self.table[self.next];\n        if k == c {\n            self.next += 1;\n            return v;\n        }\n        match self.get(c) {\n            Err(i) => {\n                self.next = i;\n                &[]\n            }\n            Ok(i) => {\n                assert!(i > self.next);\n                self.next = i + 1;\n                self.table[i].1\n            }\n        }\n    }\n    pub fn overlaps(&self, start: char, end: char) -> bool {\n        use core::cmp::Ordering;\n        assert!(start <= end);\n        self.table\n            .binary_search_by(|&(c, _)| {\n                if start <= c && c <= end {\n                    Ordering::Equal\n                } else if c > end {\n                    Ordering::Greater\n                } else {\n                    Ordering::Less\n                }\n            })\n            .is_ok()\n    }\n    fn get(&self, c: char) -> Result<usize, usize> {}\n}\nimpl ClassUnicodeRange {\n    pub fn new(start: char, end: char) -> ClassUnicodeRange {\n        ClassUnicodeRange::create(start, end)\n    }\n    pub fn start(&self) -> char {}\n    pub fn end(&self) -> char {}\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Apply simple case folding to this Unicode scalar value range.\n///\n/// Additional ranges are appended to the given vector. Canonical ordering\n/// is *not* maintained in the given vector.\n1290 fn case_fold_simple(\n1291     &self,\n1292     ranges: &mut Vec<ClassUnicodeRange>,\n1293 ) -> Result<(), unicode::CaseFoldError> {\n1294     let mut folder = unicode::SimpleCaseFolder::new()?;\n1295     if !folder.overlaps(self.start, self.end) {\n1296         return Ok(());\n1297     }\n1298     let (start, end) = (u32::from(self.start), u32::from(self.end));\n1299     for cp in (start..=end).filter_map(char::from_u32) {\n1300         for &cp_folded in folder.mapping(cp) {\n1301             ranges.push(ClassUnicodeRange::new(cp_folded, cp_folded));\n1302         }\n1303     }\n1304     Ok(())\n1305 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}