{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\nuse core::{\n    cell::UnsafeCell, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicBool, Ordering},\n};\nuse alloc::{boxed::Box, vec, vec::Vec};\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\n#[derive(Debug)]\nstruct Mutex<T> {\n    locked: AtomicBool,\n    data: UnsafeCell<T>,\n}\npub(super) struct PoolGuard<'a, T: Send, F: Fn() -> T> {\n    /// The pool that this guard is attached to.\n    pool: &'a Pool<T, F>,\n    /// This is None after the guard has been put back into the pool.\n    value: Option<Box<T>>,\n}\nimpl<T: Send, F: Fn() -> T> Pool<T, F> {\n    #[inline]\n    pub(super) fn get(&self) -> PoolGuard<'_, T, F> {\n        let mut stack = self.stack.lock();\n        let value = match stack.pop() {\n            None => Box::new((self.create)()),\n            Some(value) => value,\n        };\n        PoolGuard {\n            pool: self,\n            value: Some(value),\n        }\n    }\n    #[inline]\n    fn put(&self, guard: PoolGuard<'_, T, F>) {}\n    #[inline]\n    fn put_value(&self, value: Box<T>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Get a value from the pool. This may block if another thread is also\n/// attempting to retrieve a value from the pool.\n510 pub(super) fn get(&self) -> PoolGuard<'_, T, F> {\n511     // Our fast path checks if the caller is the thread that \"owns\"\n512     // this pool. Or stated differently, whether it is the first thread\n513     // that tried to extract a value from the pool. If it is, then we\n514     // can return a T to the caller without going through a mutex.\n515     //\n516     // SAFETY: We must guarantee that only one thread gets access\n517     // to this value. Since a thread is uniquely identified by the\n518     // THREAD_ID thread local, it follows that if the caller's thread\n519     // ID is equal to the owner, then only one thread may receive this\n520     // value. This is also why we can get away with what looks like a\n521     // racy load and a store. We know that if 'owner == caller', then\n522     // only one thread can be here, so we don't need to worry about any\n523     // other thread setting the owner to something else.\n524     let caller = THREAD_ID.with(|id| *id);\n525     let owner = self.owner.load(Ordering::Acquire);\n526     if caller == owner {\n527         // N.B. We could also do a CAS here instead of a load/store,\n528         // but ad hoc benchmarking suggests it is slower. And a lot\n529         // slower in the case where `get_slow` is common.\n530         self.owner.store(THREAD_ID_INUSE, Ordering::Release);\n531         return self.guard_owned(caller);\n532     }\n533     self.get_slow(caller, owner)\n534 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}