{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn accelerate(mut self, yes: bool) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn minimize(mut self, yes: bool) -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn start_kind(mut self, kind: StartKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {\n        if self.get_unicode_word_boundary() && !byte.is_ascii() && !yes {\n            panic!(\n                \"cannot set non-ASCII byte to be non-quit when \\\n                 Unicode word boundaries are enabled\"\n            );\n        }\n        if self.quitset.is_none() {\n            self.quitset = Some(ByteSet::empty());\n        }\n        if yes {\n            self.quitset.as_mut().unwrap().add(byte);\n        } else {\n            self.quitset.as_mut().unwrap().remove(byte);\n        }\n        self\n    }\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {}\n    pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn determinize_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn get_accelerate(&self) -> bool {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_minimize(&self) -> bool {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts(&self) -> StartKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {\n        self.unicode_word_boundary.unwrap_or(false)\n    }\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_dfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_determinize_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\nimpl ByteSet {\n    pub(crate) fn empty() -> ByteSet {\n        ByteSet { bits: BitSet([0; 2]) }\n    }\n    pub(crate) fn add(&mut self, byte: u8) {\n        let bucket = byte / 128;\n        let bit = byte % 128;\n        self.bits.0[usize::from(bucket)] |= 1 << bit;\n    }\n    pub(crate) fn remove(&mut self, byte: u8) {\n        let bucket = byte / 128;\n        let bit = byte % 128;\n        self.bits.0[usize::from(bucket)] &= !(1 << bit);\n    }\n    pub(crate) fn contains(&self, byte: u8) -> bool {}\n    pub(crate) fn contains_range(&self, start: u8, end: u8) -> bool {}\n    pub(crate) fn iter(&self) -> ByteSetIter {}\n    pub(crate) fn iter_ranges(&self) -> ByteSetRangeIter {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteSet, usize), DeserializeError> {}\n    pub(crate) fn write_to<E: crate::util::wire::Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Add a \"quit\" byte to the DFA.\n///\n/// When a quit byte is seen during search time, then search will return\n/// a [`MatchError::quit`](crate::MatchError::quit) error indicating the\n/// offset at which the search stopped.\n///\n/// A quit byte will always overrule any other aspects of a regex. For\n/// example, if the `x` byte is added as a quit byte and the regex `\\w` is\n/// used, then observing `x` will cause the search to quit immediately\n/// despite the fact that `x` is in the `\\w` class.\n///\n/// This mechanism is primarily useful for heuristically enabling certain\n/// features like Unicode word boundaries in a DFA. Namely, if the input\n/// to search is ASCII, then a Unicode word boundary can be implemented\n/// via an ASCII word boundary with no change in semantics. Thus, a DFA\n/// can attempt to match a Unicode word boundary but give up as soon as it\n/// observes a non-ASCII byte. Indeed, if callers set all non-ASCII bytes\n/// to be quit bytes, then Unicode word boundaries will be permitted when\n/// building DFAs. Of course, callers should enable\n/// [`Config::unicode_word_boundary`] if they want this behavior instead.\n/// (The advantage being that non-ASCII quit bytes will only be added if a\n/// Unicode word boundary is in the pattern.)\n///\n/// When enabling this option, callers _must_ be prepared to handle a\n/// [`MatchError`](crate::MatchError) error during search. When using a\n/// [`Regex`](crate::dfa::regex::Regex), this corresponds to using the\n/// `try_` suite of methods.\n///\n/// By default, there are no quit bytes set.\n///\n/// # Panics\n///\n/// This panics if heuristic Unicode word boundaries are enabled and any\n/// non-ASCII byte is removed from the set of quit bytes. Namely, enabling\n/// Unicode word boundaries requires setting every non-ASCII byte to a quit\n/// byte. So if the caller attempts to undo any of that, then this will\n/// panic.\n///\n/// # Example\n///\n/// This example shows how to cause a search to terminate if it sees a\n/// `\\n` byte. This could be useful if, for example, you wanted to prevent\n/// a user supplied pattern from matching across a line boundary.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{dfa::{Automaton, dense}, Input, MatchError};\n///\n/// let dfa = dense::Builder::new()\n///     .configure(dense::Config::new().quit(b'\\n', true))\n///     .build(r\"foo\\p{any}+bar\")?;\n///\n/// let haystack = \"foo\\nbar\".as_bytes();\n/// // Normally this would produce a match, since \\p{any} contains '\\n'.\n/// // But since we instructed the automaton to enter a quit state if a\n/// // '\\n' is observed, this produces a match error instead.\n/// let expected = MatchError::quit(b'\\n', 3);\n/// let got = dfa.try_search_fwd(&Input::new(haystack)).unwrap_err();\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n667 pub fn quit(mut self, byte: u8, yes: bool) -> Config {\n668     if self.get_unicode_word_boundary() && !byte.is_ascii() && !yes {\n669         panic!(\n670             \"cannot set non-ASCII byte to be non-quit when \\\n671              Unicode word boundaries are enabled\"\n672         );\n673     }\n674     if self.quitset.is_none() {\n675         self.quitset = Some(ByteSet::empty());\n676     }\n677     if yes {\n678         self.quitset.as_mut().unwrap().add(byte);\n679     } else {\n680         self.quitset.as_mut().unwrap().remove(byte);\n681     }\n682     self\n683 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}