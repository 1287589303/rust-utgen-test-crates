{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\nuse core::{\n    cell::UnsafeCell, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicBool, Ordering},\n};\nuse alloc::{boxed::Box, vec, vec::Vec};\npub(super) struct PoolGuard<'a, T: Send, F: Fn() -> T> {\n    /// The pool that this guard is attached to.\n    pool: &'a Pool<T, F>,\n    /// This is None after the guard has been put back into the pool.\n    value: Option<Box<T>>,\n}\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\npub struct Pool<T, F = fn() -> T>(alloc::boxed::Box<inner::Pool<T, F>>);\nimpl<'a, T: Send, F: Fn() -> T> PoolGuard<'a, T, F> {\n    #[inline]\n    pub(super) fn value(&self) -> &T {}\n    #[inline]\n    pub(super) fn value_mut(&mut self) -> &mut T {}\n    #[inline]\n    pub(super) fn put(this: PoolGuard<'_, T, F>) {}\n    #[inline(always)]\n    fn put_imp(&mut self) {\n        if let Some(value) = self.value.take() {\n            self.pool.put_value(value);\n        }\n    }\n}\nimpl<T: Send, F: Fn() -> T> Pool<T, F> {\n    #[inline]\n    pub(super) fn get(&self) -> PoolGuard<'_, T, F> {}\n    #[inline]\n    fn put(&self, guard: PoolGuard<'_, T, F>) {}\n    #[inline]\n    fn put_value(&self, value: Box<T>) {\n        let mut stack = self.stack.lock();\n        stack.push(value);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Puts this guard back into the pool by only borrowing the guard as\n/// mutable. This should be called at most once.\n742 fn put_imp(&mut self) {\n743     match core::mem::replace(&mut self.value, Err(THREAD_ID_DROPPED)) {\n744         Ok(value) => {\n745             // If we were told to discard this value then don't bother\n746             // trying to put it back into the pool. This occurs when\n747             // the pop operation failed to acquire a lock and we\n748             // decided to create a new value in lieu of contending for\n749             // the lock.\n750             if self.discard {\n751                 return;\n752             }\n753             self.pool.put_value(value);\n754         }\n755         // If this guard has a value \"owned\" by the thread, then\n756         // the Pool guarantees that this is the ONLY such guard.\n757         // Therefore, in order to place it back into the pool and make\n758         // it available, we need to change the owner back to the owning\n759         // thread's ID. But note that we use the ID that was stored in\n760         // the guard, since a guard can be moved to another thread and\n761         // dropped. (A previous iteration of this code read from the\n762         // THREAD_ID thread local, which uses the ID of the current\n763         // thread which may not be the ID of the owning thread! This\n764         // also avoids the TLS access, which is likely a hair faster.)\n765         Err(owner) => {\n766             // If we hit this point, it implies 'put_imp' has been\n767             // called multiple times for the same guard which in turn\n768             // corresponds to a bug in this implementation.\n769             assert_ne!(THREAD_ID_DROPPED, owner);\n770             self.pool.owner.store(owner, Ordering::Release);\n771         }\n772     }\n773 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}