{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/automaton.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::search::PatternSet;\nuse crate::{\n    dfa::search,\n    util::{\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::{Anchored, HalfMatch, Input, MatchError},\n        start,\n    },\n};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\npub(crate) fn fmt_state_indicator<A: Automaton>(\n    f: &mut core::fmt::Formatter<'_>,\n    dfa: A,\n    id: StateID,\n) -> core::fmt::Result {\n    if dfa.is_dead_state(id) {\n        write!(f, \"D\")?;\n        if dfa.is_start_state(id) {\n            write!(f, \">\")?;\n        } else {\n            write!(f, \" \")?;\n        }\n    } else if dfa.is_quit_state(id) {\n        write!(f, \"Q \")?;\n    } else if dfa.is_start_state(id) {\n        if dfa.is_accel_state(id) {\n            write!(f, \"A>\")?;\n        } else {\n            write!(f, \" >\")?;\n        }\n    } else if dfa.is_match_state(id) {\n        if dfa.is_accel_state(id) {\n            write!(f, \"A*\")?;\n        } else {\n            write!(f, \" *\")?;\n        }\n    } else if dfa.is_accel_state(id) {\n        write!(f, \"A \")?;\n    } else {\n        write!(f, \"  \")?;\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Write a prefix \"state\" indicator for fmt::Debug impls.\n///\n/// Specifically, this tries to succinctly distinguish the different types of\n/// states: dead states, quit states, accelerated states, start states and\n/// match states. It even accounts for the possible overlappings of different\n/// state types.\n2207 pub(crate) fn fmt_state_indicator<A: Automaton>(\n2208     f: &mut core::fmt::Formatter<'_>,\n2209     dfa: A,\n2210     id: StateID,\n2211 ) -> core::fmt::Result {\n2212     if dfa.is_dead_state(id) {\n2213         write!(f, \"D\")?;\n2214         if dfa.is_start_state(id) {\n2215             write!(f, \">\")?;\n2216         } else {\n2217             write!(f, \" \")?;\n2218         }\n2219     } else if dfa.is_quit_state(id) {\n2220         write!(f, \"Q \")?;\n2221     } else if dfa.is_start_state(id) {\n2222         if dfa.is_accel_state(id) {\n2223             write!(f, \"A>\")?;\n2224         } else {\n2225             write!(f, \" >\")?;\n2226         }\n2227     } else if dfa.is_match_state(id) {\n2228         if dfa.is_accel_state(id) {\n2229             write!(f, \"A*\")?;\n2230         } else {\n2231             write!(f, \" *\")?;\n2232         }\n2233     } else if dfa.is_accel_state(id) {\n2234         write!(f, \"A \")?;\n2235     } else {\n2236         write!(f, \"  \")?;\n2237     }\n2238     Ok(())\n2239 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}