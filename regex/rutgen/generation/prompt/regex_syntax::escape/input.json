{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/lib.rs\n// crate name is regex_syntax\npub use crate::{\n    error::Error, parser::{parse, Parser, ParserBuilder},\n    unicode::UnicodeWordError,\n};\nuse alloc::string::String;\npub fn escape(text: &str) -> String {\n    let mut quoted = String::new();\n    escape_into(text, &mut quoted);\n    quoted\n}\npub fn escape_into(text: &str, buf: &mut String) {\n    buf.reserve(text.len());\n    for c in text.chars() {\n        if is_meta_character(c) {\n            buf.push('\\\\');\n        }\n        buf.push(c);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Escapes all regular expression meta characters in `text`.\n///\n/// The string returned may be safely used as a literal in a regular\n/// expression.\n201 pub fn escape(text: &str) -> String {\n202     let mut quoted = String::new();\n203     escape_into(text, &mut quoted);\n204     quoted\n205 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}