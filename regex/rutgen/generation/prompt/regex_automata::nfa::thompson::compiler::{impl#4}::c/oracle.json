{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Clone, Debug)]\npub struct Compiler {\n    /// A regex parser, used when compiling an NFA directly from a pattern\n    /// string.\n    parser: ParserBuilder,\n    /// The compiler configuration.\n    config: Config,\n    /// The builder for actually constructing an NFA. This provides a\n    /// convenient abstraction for writing a compiler.\n    builder: RefCell<Builder>,\n    /// State used for compiling character classes to UTF-8 byte automata.\n    /// State is not retained between character class compilations. This just\n    /// serves to amortize allocation to the extent possible.\n    utf8_state: RefCell<Utf8State>,\n    /// State used for arranging character classes in reverse into a trie.\n    trie_state: RefCell<RangeTrie>,\n    /// State used for caching common suffixes when compiling reverse UTF-8\n    /// automata (for Unicode character classes).\n    utf8_suffix: RefCell<Utf8SuffixMap>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct ThompsonRef {\n    pub(crate) start: StateID,\n    pub(crate) end: StateID,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\nstruct Utf8State {\n    compiled: Utf8BoundedMap,\n    uncompiled: Vec<Utf8Node>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    dfa: dfa::Builder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    #[cfg(feature = \"dfa-build\")]\n    dfa: dense::Builder,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone)]\npub struct RangeTrie {\n    /// The states in this trie. The first is always the shared final state.\n    /// The second is always the root state. Otherwise, there is no\n    /// particular order.\n    states: Vec<State>,\n    /// A free-list of states. When a range trie is cleared, all of its states\n    /// are added to this list. Creating a new state reuses states from this\n    /// list before allocating a new one.\n    free: Vec<State>,\n    /// A stack for traversing this trie to yield sequences of byte ranges in\n    /// lexicographic order.\n    iter_stack: RefCell<Vec<NextIter>>,\n    /// A buffer that stores the current sequence during iteration.\n    iter_ranges: RefCell<Vec<Utf8Range>>,\n    /// A stack used for traversing the trie in order to (deeply) duplicate\n    /// a state. States are recursively duplicated when ranges are split.\n    dupe_stack: Vec<NextDupe>,\n    /// A stack used for traversing the trie during insertion of a new\n    /// sequence of byte ranges.\n    insert_stack: Vec<NextInsert>,\n}\n#[derive(Clone, Debug)]\npub struct Utf8SuffixMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8SuffixEntry>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Builder {\n    /// The ID of the pattern that we're currently building.\n    ///\n    /// Callers are required to set (and unset) this by calling\n    /// {start,finish}_pattern. Otherwise, most methods will panic.\n    pattern_id: Option<PatternID>,\n    /// A sequence of intermediate NFA states. Once a state is added to this\n    /// sequence, it is assigned a state ID equivalent to its index. Once a\n    /// state is added, it is still expected to be mutated, e.g., to set its\n    /// transition to a state that didn't exist at the time it was added.\n    states: Vec<State>,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// A map from pattern ID to capture group index to name. (If no name\n    /// exists, then a None entry is present. Thus, all capturing groups are\n    /// present in this mapping.)\n    ///\n    /// The outer vec is indexed by pattern ID, while the inner vec is indexed\n    /// by capture index offset for the corresponding pattern.\n    ///\n    /// The first capture group for each pattern is always unnamed and is thus\n    /// always None.\n    captures: Vec<Vec<Option<Arc<str>>>>,\n    /// The combined memory used by each of the 'State's in 'states'. This\n    /// only includes heap usage by each state, and not the size of the state\n    /// itself. In other words, this tracks heap memory used that isn't\n    /// captured via `size_of::<State>() * states.len()`.\n    memory_states: usize,\n    /// Whether this NFA only matches UTF-8 and whether regex engines using\n    /// this NFA for searching should report empty matches that split a\n    /// codepoint.\n    utf8: bool,\n    /// Whether this NFA should be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to use for look-around assertions.\n    look_matcher: LookMatcher,\n    /// A size limit to respect when building an NFA. If the total heap memory\n    /// of the intermediate NFA states exceeds (or would exceed) this amount,\n    /// then an error is returned.\n    size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\nimpl Compiler {\n    fn compile<H: Borrow<Hir>>(&self, exprs: &[H]) -> Result<NFA, BuildError> {}\n    fn c(&self, expr: &Hir) -> Result<ThompsonRef, BuildError> {\n        use regex_syntax::hir::{Class, HirKind::*};\n        match *expr.kind() {\n            Empty => self.c_empty(),\n            Literal(hir::Literal(ref bytes)) => self.c_literal(bytes),\n            Class(Class::Bytes(ref c)) => self.c_byte_class(c),\n            Class(Class::Unicode(ref c)) => self.c_unicode_class(c),\n            Look(ref look) => self.c_look(look),\n            Repetition(ref rep) => self.c_repetition(rep),\n            Capture(ref c) => self.c_cap(c.index, c.name.as_deref(), &c.sub),\n            Concat(ref es) => self.c_concat(es.iter().map(|e| self.c(e))),\n            Alternation(ref es) => self.c_alt_slice(es),\n        }\n    }\n    fn c_concat<I>(&self, mut it: I) -> Result<ThompsonRef, BuildError>\n    where\n        I: DoubleEndedIterator<Item = Result<ThompsonRef, BuildError>>,\n    {}\n    fn c_alt_slice(&self, exprs: &[Hir]) -> Result<ThompsonRef, BuildError> {\n        let literal_count = exprs\n            .iter()\n            .filter(|e| { matches!(* e.kind(), hir::HirKind::Literal(hir::Literal(_))) })\n            .count();\n        if literal_count <= 1 || literal_count < exprs.len() {\n            return self.c_alt_iter(exprs.iter().map(|e| self.c(e)));\n        }\n        let mut trie = if self.is_reverse() {\n            LiteralTrie::reverse()\n        } else {\n            LiteralTrie::forward()\n        };\n        for expr in exprs.iter() {\n            let literal = match *expr.kind() {\n                hir::HirKind::Literal(hir::Literal(ref bytes)) => bytes,\n                _ => unreachable!(),\n            };\n            trie.add(literal)?;\n        }\n        trie.compile(&mut self.builder.borrow_mut())\n    }\n    fn c_alt_iter<I>(&self, mut it: I) -> Result<ThompsonRef, BuildError>\n    where\n        I: Iterator<Item = Result<ThompsonRef, BuildError>>,\n    {}\n    fn c_cap(\n        &self,\n        index: u32,\n        name: Option<&str>,\n        expr: &Hir,\n    ) -> Result<ThompsonRef, BuildError> {\n        match self.config.get_which_captures() {\n            WhichCaptures::None => return self.c(expr),\n            WhichCaptures::Implicit if index > 0 => return self.c(expr),\n            _ => {}\n        }\n        let start = self.add_capture_start(index, name)?;\n        let inner = self.c(expr)?;\n        let end = self.add_capture_end(index)?;\n        self.patch(start, inner.start)?;\n        self.patch(inner.end, end)?;\n        Ok(ThompsonRef { start, end })\n    }\n    fn c_repetition(&self, rep: &hir::Repetition) -> Result<ThompsonRef, BuildError> {\n        match (rep.min, rep.max) {\n            (0, Some(1)) => self.c_zero_or_one(&rep.sub, rep.greedy),\n            (min, None) => self.c_at_least(&rep.sub, rep.greedy, min),\n            (min, Some(max)) if min == max => self.c_exactly(&rep.sub, min),\n            (min, Some(max)) => self.c_bounded(&rep.sub, rep.greedy, min, max),\n        }\n    }\n    fn c_bounded(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_at_least(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n        n: u32,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_zero_or_one(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_exactly(&self, expr: &Hir, n: u32) -> Result<ThompsonRef, BuildError> {}\n    fn c_byte_class(&self, cls: &hir::ClassBytes) -> Result<ThompsonRef, BuildError> {\n        let end = self.add_empty()?;\n        let mut trans = Vec::with_capacity(cls.ranges().len());\n        for r in cls.iter() {\n            trans\n                .push(Transition {\n                    start: r.start(),\n                    end: r.end(),\n                    next: end,\n                });\n        }\n        Ok(ThompsonRef {\n            start: self.add_sparse(trans)?,\n            end,\n        })\n    }\n    fn c_unicode_class(\n        &self,\n        cls: &hir::ClassUnicode,\n    ) -> Result<ThompsonRef, BuildError> {\n        if cls.is_ascii() {\n            let end = self.add_empty()?;\n            let mut trans = Vec::with_capacity(cls.ranges().len());\n            for r in cls.iter() {\n                trans\n                    .push(Transition {\n                        start: u8::try_from(u32::from(r.start())).unwrap(),\n                        end: u8::try_from(u32::from(r.end())).unwrap(),\n                        next: end,\n                    });\n            }\n            Ok(ThompsonRef {\n                start: self.add_sparse(trans)?,\n                end,\n            })\n        } else if self.is_reverse() {\n            if !self.config.get_shrink() {\n                self.c_unicode_class_reverse_with_suffix(cls)\n            } else {\n                let mut trie = self.trie_state.borrow_mut();\n                trie.clear();\n                for rng in cls.iter() {\n                    for mut seq in Utf8Sequences::new(rng.start(), rng.end()) {\n                        seq.reverse();\n                        trie.insert(seq.as_slice());\n                    }\n                }\n                let mut builder = self.builder.borrow_mut();\n                let mut utf8_state = self.utf8_state.borrow_mut();\n                let mut utf8c = Utf8Compiler::new(&mut *builder, &mut *utf8_state)?;\n                trie.iter(|seq| {\n                    utf8c.add(&seq)?;\n                    Ok(())\n                })?;\n                utf8c.finish()\n            }\n        } else {\n            let mut builder = self.builder.borrow_mut();\n            let mut utf8_state = self.utf8_state.borrow_mut();\n            let mut utf8c = Utf8Compiler::new(&mut *builder, &mut *utf8_state)?;\n            for rng in cls.iter() {\n                for seq in Utf8Sequences::new(rng.start(), rng.end()) {\n                    utf8c.add(seq.as_slice())?;\n                }\n            }\n            utf8c.finish()\n        }\n    }\n    fn c_unicode_class_reverse_with_suffix(\n        &self,\n        cls: &hir::ClassUnicode,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_look(&self, anchor: &hir::Look) -> Result<ThompsonRef, BuildError> {\n        let look = match *anchor {\n            hir::Look::Start => Look::Start,\n            hir::Look::End => Look::End,\n            hir::Look::StartLF => Look::StartLF,\n            hir::Look::EndLF => Look::EndLF,\n            hir::Look::StartCRLF => Look::StartCRLF,\n            hir::Look::EndCRLF => Look::EndCRLF,\n            hir::Look::WordAscii => Look::WordAscii,\n            hir::Look::WordAsciiNegate => Look::WordAsciiNegate,\n            hir::Look::WordUnicode => Look::WordUnicode,\n            hir::Look::WordUnicodeNegate => Look::WordUnicodeNegate,\n            hir::Look::WordStartAscii => Look::WordStartAscii,\n            hir::Look::WordEndAscii => Look::WordEndAscii,\n            hir::Look::WordStartUnicode => Look::WordStartUnicode,\n            hir::Look::WordEndUnicode => Look::WordEndUnicode,\n            hir::Look::WordStartHalfAscii => Look::WordStartHalfAscii,\n            hir::Look::WordEndHalfAscii => Look::WordEndHalfAscii,\n            hir::Look::WordStartHalfUnicode => Look::WordStartHalfUnicode,\n            hir::Look::WordEndHalfUnicode => Look::WordEndHalfUnicode,\n        };\n        let id = self.add_look(look)?;\n        Ok(ThompsonRef { start: id, end: id })\n    }\n    fn c_literal(&self, bytes: &[u8]) -> Result<ThompsonRef, BuildError> {\n        self.c_concat(bytes.iter().copied().map(|b| self.c_range(b, b)))\n    }\n    fn c_range(&self, start: u8, end: u8) -> Result<ThompsonRef, BuildError> {}\n    fn c_empty(&self) -> Result<ThompsonRef, BuildError> {\n        let id = self.add_empty()?;\n        Ok(ThompsonRef { start: id, end: id })\n    }\n    fn c_fail(&self) -> Result<ThompsonRef, BuildError> {}\n    fn patch(&self, from: StateID, to: StateID) -> Result<(), BuildError> {}\n    fn start_pattern(&self) -> Result<PatternID, BuildError> {}\n    fn finish_pattern(&self, start_id: StateID) -> Result<PatternID, BuildError> {}\n    fn add_empty(&self) -> Result<StateID, BuildError> {}\n    fn add_range(&self, start: u8, end: u8) -> Result<StateID, BuildError> {}\n    fn add_sparse(&self, ranges: Vec<Transition>) -> Result<StateID, BuildError> {}\n    fn add_look(&self, mut look: Look) -> Result<StateID, BuildError> {}\n    fn add_union(&self) -> Result<StateID, BuildError> {}\n    fn add_union_reverse(&self) -> Result<StateID, BuildError> {}\n    fn add_capture_start(\n        &self,\n        capture_index: u32,\n        name: Option<&str>,\n    ) -> Result<StateID, BuildError> {}\n    fn add_capture_end(&self, capture_index: u32) -> Result<StateID, BuildError> {}\n    fn add_fail(&self) -> Result<StateID, BuildError> {}\n    fn add_match(&self) -> Result<StateID, BuildError> {}\n    fn is_reverse(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compile an arbitrary HIR expression.\n 997 fn c(&self, expr: &Hir) -> Result<ThompsonRef, BuildError> {\n 998     use regex_syntax::hir::{Class, HirKind::*};\n 999 \n1000     match *expr.kind() {\n1001         Empty => self.c_empty(),\n1002         Literal(hir::Literal(ref bytes)) => self.c_literal(bytes),\n1003         Class(Class::Bytes(ref c)) => self.c_byte_class(c),\n1004         Class(Class::Unicode(ref c)) => self.c_unicode_class(c),\n1005         Look(ref look) => self.c_look(look),\n1006         Repetition(ref rep) => self.c_repetition(rep),\n1007         Capture(ref c) => self.c_cap(c.index, c.name.as_deref(), &c.sub),\n1008         Concat(ref es) => self.c_concat(es.iter().map(|e| self.c(e))),\n1009         Alternation(ref es) => self.c_alt_slice(es),\n1010     }\n1011 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}