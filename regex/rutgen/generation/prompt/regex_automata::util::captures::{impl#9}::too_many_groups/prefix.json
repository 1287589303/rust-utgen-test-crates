{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone, Debug)]\npub struct GroupInfoError {\n    kind: GroupInfoErrorKind,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug)]\nenum GroupInfoErrorKind {\n    /// This occurs when too many patterns have been added. i.e., It would\n    /// otherwise overflow a `PatternID`.\n    TooManyPatterns { err: PatternIDError },\n    /// This occurs when too many capturing groups have been added for a\n    /// particular pattern.\n    TooManyGroups {\n        /// The ID of the pattern that had too many groups.\n        pattern: PatternID,\n        /// The minimum number of groups that the caller has tried to add for\n        /// a pattern.\n        minimum: usize,\n    },\n    /// An error that occurs when a pattern has no capture groups. Either the\n    /// group info must be empty, or all patterns must have at least one group\n    /// (corresponding to the unnamed group for the entire pattern).\n    MissingGroups {\n        /// The ID of the pattern that had no capturing groups.\n        pattern: PatternID,\n    },\n    /// An error that occurs when one tries to provide a name for the capture\n    /// group at index 0. This capturing group must currently always be\n    /// unnamed.\n    FirstMustBeUnnamed {\n        /// The ID of the pattern that was found to have a named first\n        /// capturing group.\n        pattern: PatternID,\n    },\n    /// An error that occurs when duplicate capture group names for the same\n    /// pattern are added.\n    ///\n    /// NOTE: At time of writing, this error can never occur if you're using\n    /// regex-syntax, since the parser itself will reject patterns with\n    /// duplicate capture group names. This error can only occur when the\n    /// builder is used to hand construct NFAs.\n    Duplicate {\n        /// The pattern in which the duplicate capture group name was found.\n        pattern: PatternID,\n        /// The duplicate name.\n        name: String,\n    },\n}\nimpl GroupInfoError {\n    fn too_many_patterns(err: PatternIDError) -> GroupInfoError {}\n    fn too_many_groups(pattern: PatternID, minimum: usize) -> GroupInfoError {\n        GroupInfoError {\n            kind: GroupInfoErrorKind::TooManyGroups {\n                pattern,\n                minimum,\n            },\n        }\n    }\n    fn missing_groups(pattern: PatternID) -> GroupInfoError {}\n    fn first_must_be_unnamed(pattern: PatternID) -> GroupInfoError {}\n    fn duplicate(pattern: PatternID, name: &str) -> GroupInfoError {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2391 fn too_many_groups(pattern: PatternID, minimum: usize) -> GroupInfoError {\n2392     GroupInfoError {\n2393         kind: GroupInfoErrorKind::TooManyGroups { pattern, minimum },\n2394     }\n2395 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}