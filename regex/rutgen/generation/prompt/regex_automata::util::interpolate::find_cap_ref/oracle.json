{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/interpolate.rs\n// crate name is regex_automata\nuse alloc::{string::String, vec::Vec};\nuse crate::util::memchr::memchr;\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nstruct CaptureRef<'a> {\n    cap: Ref<'a>,\n    end: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nenum Ref<'a> {\n    Named(&'a str),\n    Number(usize),\n}\nfn find_cap_ref(replacement: &[u8]) -> Option<CaptureRef<'_>> {\n    let mut i = 0;\n    let rep: &[u8] = replacement;\n    if rep.len() <= 1 || rep[0] != b'$' {\n        return None;\n    }\n    i += 1;\n    if rep[i] == b'{' {\n        return find_cap_ref_braced(rep, i + 1);\n    }\n    let mut cap_end = i;\n    while rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) {\n        cap_end += 1;\n    }\n    if cap_end == i {\n        return None;\n    }\n    let cap = core::str::from_utf8(&rep[i..cap_end]).expect(\"valid UTF-8 capture name\");\n    Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })\n}\nfn find_cap_ref_braced(rep: &[u8], mut i: usize) -> Option<CaptureRef<'_>> {\n    assert_eq!(b'{', rep[i.checked_sub(1).unwrap()]);\n    let start = i;\n    while rep.get(i).map_or(false, |&b| b != b'}') {\n        i += 1;\n    }\n    if !rep.get(i).map_or(false, |&b| b == b'}') {\n        return None;\n    }\n    let cap = match core::str::from_utf8(&rep[start..i]) {\n        Err(_) => return None,\n        Ok(cap) => cap,\n    };\n    Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: i + 1,\n    })\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parses a possible reference to a capture group name in the given text,\n/// starting at the beginning of `replacement`.\n///\n/// If no such valid reference could be found, None is returned.\n///\n/// Note that this returns a \"possible\" reference because this routine doesn't\n/// know whether the reference is to a valid group or not. If it winds up not\n/// being a valid reference, then it should be replaced with the empty string.\n260 fn find_cap_ref(replacement: &[u8]) -> Option<CaptureRef<'_>> {\n261     let mut i = 0;\n262     let rep: &[u8] = replacement;\n263     if rep.len() <= 1 || rep[0] != b'$' {\n264         return None;\n265     }\n266     i += 1;\n267     if rep[i] == b'{' {\n268         return find_cap_ref_braced(rep, i + 1);\n269     }\n270     let mut cap_end = i;\n271     while rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) {\n272         cap_end += 1;\n273     }\n274     if cap_end == i {\n275         return None;\n276     }\n277     // We just verified that the range 0..cap_end is valid ASCII, so it must\n278     // therefore be valid UTF-8. If we really cared, we could avoid this UTF-8\n279     // check via an unchecked conversion or by parsing the number straight from\n280     // &[u8].\n281     let cap = core::str::from_utf8(&rep[i..cap_end])\n282         .expect(\"valid UTF-8 capture name\");\n283     Some(CaptureRef {\n284         cap: match cap.parse::<usize>() {\n285             Ok(i) => Ref::Number(i),\n286             Err(_) => Ref::Named(cap),\n287         },\n288         end: cap_end,\n289     })\n290 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}