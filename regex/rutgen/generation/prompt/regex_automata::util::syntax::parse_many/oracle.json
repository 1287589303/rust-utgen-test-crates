{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/syntax.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse regex_syntax::{\n    ast, hir::{self, Hir},\n    Error, ParserBuilder,\n};\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\nimpl Default for Config {\n    fn default() -> Config {\n        Config::new()\n    }\n}\npub fn parse_many<P: AsRef<str>>(patterns: &[P]) -> Result<Vec<Hir>, Error> {\n    parse_many_with(patterns, &Config::default())\n}\npub fn parse_many_with<P: AsRef<str>>(\n    patterns: &[P],\n    config: &Config,\n) -> Result<Vec<Hir>, Error> {\n    let mut builder = ParserBuilder::new();\n    config.apply(&mut builder);\n    let mut hirs = vec![];\n    for p in patterns.iter() {\n        hirs.push(builder.build().parse(p.as_ref())?);\n    }\n    Ok(hirs)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// A convenience routine for parsing many patterns into HIR value with the\n/// default configuration.\n///\n/// # Example\n///\n/// This shows how to parse many patterns into an corresponding HIR values:\n///\n/// ```\n/// use {\n///     regex_automata::util::syntax,\n///     regex_syntax::hir::Properties,\n/// };\n///\n/// let hirs = syntax::parse_many(&[\n///     r\"([a-z]+)|([0-9]+)\",\n///     r\"foo(A-Z]+)bar\",\n/// ])?;\n/// let props = Properties::union(hirs.iter().map(|h| h.properties()));\n/// assert_eq!(Some(1), props.static_explicit_captures_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n63 pub fn parse_many<P: AsRef<str>>(patterns: &[P]) -> Result<Vec<Hir>, Error> {\n64     parse_many_with(patterns, &Config::default())\n65 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}