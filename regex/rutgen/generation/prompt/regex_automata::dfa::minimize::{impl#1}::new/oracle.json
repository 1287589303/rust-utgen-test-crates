{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/minimize.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem};\nuse alloc::{collections::BTreeMap, rc::Rc, vec, vec::Vec};\nuse crate::{\n    dfa::{automaton::Automaton, dense, DEAD},\n    util::{alphabet, primitives::{PatternID, StateID}},\n};\npub(crate) struct Minimizer<'a> {\n    dfa: &'a mut dense::OwnedDFA,\n    in_transitions: Vec<Vec<Vec<StateID>>>,\n    partitions: Vec<StateSet>,\n    waiting: Vec<StateSet>,\n}\n#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\nstruct StateSet {\n    ids: Rc<RefCell<Vec<StateID>>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'a> Minimizer<'a> {\n    pub fn new(dfa: &'a mut dense::OwnedDFA) -> Minimizer<'a> {\n        let in_transitions = Minimizer::incoming_transitions(dfa);\n        let partitions = Minimizer::initial_partitions(dfa);\n        let waiting = partitions.clone();\n        Minimizer {\n            dfa,\n            in_transitions,\n            partitions,\n            waiting,\n        }\n    }\n    pub fn run(mut self) {}\n    fn find_waiting(&self, set: &StateSet) -> Option<usize> {}\n    fn find_incoming_to(\n        &self,\n        b: alphabet::Unit,\n        set: &StateSet,\n        incoming: &mut StateSet,\n    ) {}\n    fn initial_partitions(dfa: &dense::OwnedDFA) -> Vec<StateSet> {\n        let mut matching: BTreeMap<Vec<PatternID>, StateSet> = BTreeMap::new();\n        let mut is_quit = StateSet::empty();\n        let mut no_match = StateSet::empty();\n        for state in dfa.states() {\n            if dfa.is_match_state(state.id()) {\n                let mut pids = vec![];\n                for i in 0..dfa.match_len(state.id()) {\n                    pids.push(dfa.match_pattern(state.id(), i));\n                }\n                matching.entry(pids).or_insert(StateSet::empty()).add(state.id());\n            } else if dfa.is_quit_state(state.id()) {\n                is_quit.add(state.id());\n            } else {\n                no_match.add(state.id());\n            }\n        }\n        let mut sets: Vec<StateSet> = matching.into_iter().map(|(_, set)| set).collect();\n        sets.push(no_match);\n        sets.push(is_quit);\n        sets\n    }\n    fn incoming_transitions(dfa: &dense::OwnedDFA) -> Vec<Vec<Vec<StateID>>> {\n        let mut incoming = vec![];\n        for _ in dfa.states() {\n            incoming.push(vec![vec![]; dfa.alphabet_len()]);\n        }\n        for state in dfa.states() {\n            for (b, next) in state.transitions() {\n                incoming[dfa.to_index(next)][b.as_usize()].push(state.id());\n            }\n        }\n        incoming\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n80 pub fn new(dfa: &'a mut dense::OwnedDFA) -> Minimizer<'a> {\n81     let in_transitions = Minimizer::incoming_transitions(dfa);\n82     let partitions = Minimizer::initial_partitions(dfa);\n83     let waiting = partitions.clone();\n84     Minimizer { dfa, in_transitions, partitions, waiting }\n85 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}