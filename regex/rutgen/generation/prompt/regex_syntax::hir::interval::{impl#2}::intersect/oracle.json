{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/interval.rs\n// crate name is regex_syntax\nuse core::{char, cmp, fmt::Debug, slice};\nuse alloc::vec::Vec;\nuse crate::unicode;\npub trait Interval: Clone + Copy + Debug + Default + Eq + PartialEq + PartialOrd + Ord {\n    type Bound: Bound;\n    fn lower(&self) -> Self::Bound;\n    fn upper(&self) -> Self::Bound;\n    fn set_lower(&mut self, bound: Self::Bound);\n    fn set_upper(&mut self, bound: Self::Bound);\n    fn case_fold_simple(\n        &self,\n        intervals: &mut Vec<Self>,\n    ) -> Result<(), unicode::CaseFoldError>;\n    fn create(lower: Self::Bound, upper: Self::Bound) -> Self {\n        let mut int = Self::default();\n        if lower <= upper {\n            int.set_lower(lower);\n            int.set_upper(upper);\n        } else {\n            int.set_lower(upper);\n            int.set_upper(lower);\n        }\n        int\n    }\n    fn union(&self, other: &Self) -> Option<Self> {\n        if !self.is_contiguous(other) {\n            return None;\n        }\n        let lower = cmp::min(self.lower(), other.lower());\n        let upper = cmp::max(self.upper(), other.upper());\n        Some(Self::create(lower, upper))\n    }\n    fn intersect(&self, other: &Self) -> Option<Self> {\n        let lower = cmp::max(self.lower(), other.lower());\n        let upper = cmp::min(self.upper(), other.upper());\n        if lower <= upper { Some(Self::create(lower, upper)) } else { None }\n    }\n    fn difference(&self, other: &Self) -> (Option<Self>, Option<Self>) {\n        if self.is_subset(other) {\n            return (None, None);\n        }\n        if self.is_intersection_empty(other) {\n            return (Some(self.clone()), None);\n        }\n        let add_lower = other.lower() > self.lower();\n        let add_upper = other.upper() < self.upper();\n        assert!(add_lower || add_upper);\n        let mut ret = (None, None);\n        if add_lower {\n            let upper = other.lower().decrement();\n            ret.0 = Some(Self::create(self.lower(), upper));\n        }\n        if add_upper {\n            let lower = other.upper().increment();\n            let range = Self::create(lower, self.upper());\n            if ret.0.is_none() {\n                ret.0 = Some(range);\n            } else {\n                ret.1 = Some(range);\n            }\n        }\n        ret\n    }\n    fn is_contiguous(&self, other: &Self) -> bool;\n    fn is_intersection_empty(&self, other: &Self) -> bool;\n    fn is_subset(&self, other: &Self) -> bool;\n}\n#[derive(Clone, Debug)]\npub struct IntervalSet<I> {\n    /// A sorted set of non-overlapping ranges.\n    ranges: Vec<I>,\n    /// While not required at all for correctness, we keep track of whether an\n    /// interval set has been case folded or not. This helps us avoid doing\n    /// redundant work if, for example, a set has already been cased folded.\n    /// And note that whether a set is folded or not is preserved through\n    /// all of the pairwise set operations. That is, if both interval sets\n    /// have been case folded, then any of difference, union, intersection or\n    /// symmetric difference all produce a case folded set.\n    ///\n    /// Note that when this is true, it *must* be the case that the set is case\n    /// folded. But when it's false, the set *may* be case folded. In other\n    /// words, we only set this to true when we know it to be case, but we're\n    /// okay with it being false if it would otherwise be costly to determine\n    /// whether it should be true. This means code cannot assume that a false\n    /// value necessarily indicates that the set is not case folded.\n    ///\n    /// Bottom line: this is a performance optimization.\n    folded: bool,\n}\nimpl<I: Interval> IntervalSet<I> {\n    pub fn new<T: IntoIterator<Item = I>>(intervals: T) -> IntervalSet<I> {}\n    pub fn push(&mut self, interval: I) {}\n    pub fn iter(&self) -> IntervalSetIter<'_, I> {}\n    pub fn intervals(&self) -> &[I] {}\n    pub fn case_fold_simple(&mut self) -> Result<(), unicode::CaseFoldError> {}\n    pub fn union(&mut self, other: &IntervalSet<I>) {}\n    pub fn intersect(&mut self, other: &IntervalSet<I>) {\n        if self.ranges.is_empty() {\n            return;\n        }\n        if other.ranges.is_empty() {\n            self.ranges.clear();\n            self.folded = true;\n            return;\n        }\n        let drain_end = self.ranges.len();\n        let mut ita = 0..drain_end;\n        let mut itb = 0..other.ranges.len();\n        let mut a = ita.next().unwrap();\n        let mut b = itb.next().unwrap();\n        loop {\n            if let Some(ab) = self.ranges[a].intersect(&other.ranges[b]) {\n                self.ranges.push(ab);\n            }\n            let (it, aorb) = if self.ranges[a].upper() < other.ranges[b].upper() {\n                (&mut ita, &mut a)\n            } else {\n                (&mut itb, &mut b)\n            };\n            match it.next() {\n                Some(v) => *aorb = v,\n                None => break,\n            }\n        }\n        self.ranges.drain(..drain_end);\n        self.folded = self.folded && other.folded;\n    }\n    pub fn difference(&mut self, other: &IntervalSet<I>) {}\n    pub fn symmetric_difference(&mut self, other: &IntervalSet<I>) {}\n    pub fn negate(&mut self) {}\n    fn canonicalize(&mut self) {}\n    fn is_canonical(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Intersect this set with the given set, in place.\n144 pub fn intersect(&mut self, other: &IntervalSet<I>) {\n145     if self.ranges.is_empty() {\n146         return;\n147     }\n148     if other.ranges.is_empty() {\n149         self.ranges.clear();\n150         // An empty set is case folded.\n151         self.folded = true;\n152         return;\n153     }\n154 \n155     // There should be a way to do this in-place with constant memory,\n156     // but I couldn't figure out a simple way to do it. So just append\n157     // the intersection to the end of this range, and then drain it before\n158     // we're done.\n159     let drain_end = self.ranges.len();\n160 \n161     let mut ita = 0..drain_end;\n162     let mut itb = 0..other.ranges.len();\n163     let mut a = ita.next().unwrap();\n164     let mut b = itb.next().unwrap();\n165     loop {\n166         if let Some(ab) = self.ranges[a].intersect(&other.ranges[b]) {\n167             self.ranges.push(ab);\n168         }\n169         let (it, aorb) =\n170             if self.ranges[a].upper() < other.ranges[b].upper() {\n171                 (&mut ita, &mut a)\n172             } else {\n173                 (&mut itb, &mut b)\n174             };\n175         match it.next() {\n176             Some(v) => *aorb = v,\n177             None => break,\n178         }\n179     }\n180     self.ranges.drain(..drain_end);\n181     self.folded = self.folded && other.folded;\n182 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}