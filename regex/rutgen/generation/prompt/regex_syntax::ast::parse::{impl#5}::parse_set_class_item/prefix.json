{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum LiteralKind {\n    /// The literal is written verbatim, e.g., `a` or `â˜ƒ`.\n    Verbatim,\n    /// The literal is written as an escape because it is otherwise a special\n    /// regex meta character, e.g., `\\*` or `\\[`.\n    Meta,\n    /// The literal is written as an escape despite the fact that the escape is\n    /// unnecessary, e.g., `\\%` or `\\/`.\n    Superfluous,\n    /// The literal is written as an octal escape, e.g., `\\141`.\n    Octal,\n    /// The literal is written as a hex code with a fixed number of digits\n    /// depending on the type of the escape, e.g., `\\x61` or `\\u0061` or\n    /// `\\U00000061`.\n    HexFixed(HexLiteralKind),\n    /// The literal is written as a hex code with a bracketed number of\n    /// digits. The only restriction is that the bracketed hex code must refer\n    /// to a valid Unicode scalar value.\n    HexBrace(HexLiteralKind),\n    /// The literal is written as a specially recognized escape, e.g., `\\f`\n    /// or `\\n`.\n    Special(SpecialLiteralKind),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\nenum Primitive {\n    Literal(ast::Literal),\n    Assertion(ast::Assertion),\n    Dot(Span),\n    Perl(ast::ClassPerl),\n    Unicode(ast::ClassUnicode),\n}\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    fn parse(&self) -> Result<Ast> {}\n    fn parse_with_comments(&self) -> Result<ast::WithComments> {}\n    #[inline(never)]\n    fn parse_uncounted_repetition(\n        &self,\n        mut concat: ast::Concat,\n        kind: ast::RepetitionKind,\n    ) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn parse_counted_repetition(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn parse_group(&self) -> Result<Either<ast::SetFlags, ast::Group>> {}\n    #[inline(never)]\n    fn parse_capture_name(&self, capture_index: u32) -> Result<ast::CaptureName> {}\n    #[inline(never)]\n    fn parse_flags(&self) -> Result<ast::Flags> {}\n    #[inline(never)]\n    fn parse_flag(&self) -> Result<ast::Flag> {}\n    fn parse_primitive(&self) -> Result<Primitive> {}\n    #[inline(never)]\n    fn parse_escape(&self) -> Result<Primitive> {\n        assert_eq!(self.char(), '\\\\');\n        let start = self.pos();\n        if !self.bump() {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::EscapeUnexpectedEof,\n                    ),\n            );\n        }\n        let c = self.char();\n        match c {\n            '0'..='7' => {\n                if !self.parser().octal {\n                    return Err(\n                        self\n                            .error(\n                                Span::new(start, self.span_char().end),\n                                ast::ErrorKind::UnsupportedBackreference,\n                            ),\n                    );\n                }\n                let mut lit = self.parse_octal();\n                lit.span.start = start;\n                return Ok(Primitive::Literal(lit));\n            }\n            '8'..='9' if !self.parser().octal => {\n                return Err(\n                    self\n                        .error(\n                            Span::new(start, self.span_char().end),\n                            ast::ErrorKind::UnsupportedBackreference,\n                        ),\n                );\n            }\n            'x' | 'u' | 'U' => {\n                let mut lit = self.parse_hex()?;\n                lit.span.start = start;\n                return Ok(Primitive::Literal(lit));\n            }\n            'p' | 'P' => {\n                let mut cls = self.parse_unicode_class()?;\n                cls.span.start = start;\n                return Ok(Primitive::Unicode(cls));\n            }\n            'd' | 's' | 'w' | 'D' | 'S' | 'W' => {\n                let mut cls = self.parse_perl_class();\n                cls.span.start = start;\n                return Ok(Primitive::Perl(cls));\n            }\n            _ => {}\n        }\n        self.bump();\n        let span = Span::new(start, self.pos());\n        if is_meta_character(c) {\n            return Ok(\n                Primitive::Literal(ast::Literal {\n                    span,\n                    kind: ast::LiteralKind::Meta,\n                    c,\n                }),\n            );\n        }\n        if is_escapeable_character(c) {\n            return Ok(\n                Primitive::Literal(ast::Literal {\n                    span,\n                    kind: ast::LiteralKind::Superfluous,\n                    c,\n                }),\n            );\n        }\n        let special = |kind, c| {\n            Ok(\n                Primitive::Literal(ast::Literal {\n                    span,\n                    kind: ast::LiteralKind::Special(kind),\n                    c,\n                }),\n            )\n        };\n        match c {\n            'a' => special(ast::SpecialLiteralKind::Bell, '\\x07'),\n            'f' => special(ast::SpecialLiteralKind::FormFeed, '\\x0C'),\n            't' => special(ast::SpecialLiteralKind::Tab, '\\t'),\n            'n' => special(ast::SpecialLiteralKind::LineFeed, '\\n'),\n            'r' => special(ast::SpecialLiteralKind::CarriageReturn, '\\r'),\n            'v' => special(ast::SpecialLiteralKind::VerticalTab, '\\x0B'),\n            'A' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::StartText,\n                    }),\n                )\n            }\n            'z' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::EndText,\n                    }),\n                )\n            }\n            'b' => {\n                let mut wb = ast::Assertion {\n                    span,\n                    kind: ast::AssertionKind::WordBoundary,\n                };\n                if !self.is_eof() && self.char() == '{' {\n                    if let Some(kind) = self.maybe_parse_special_word_boundary(start)? {\n                        wb.kind = kind;\n                        wb.span.end = self.pos();\n                    }\n                }\n                Ok(Primitive::Assertion(wb))\n            }\n            'B' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::NotWordBoundary,\n                    }),\n                )\n            }\n            '<' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::WordBoundaryStartAngle,\n                    }),\n                )\n            }\n            '>' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::WordBoundaryEndAngle,\n                    }),\n                )\n            }\n            _ => Err(self.error(span, ast::ErrorKind::EscapeUnrecognized)),\n        }\n    }\n    fn maybe_parse_special_word_boundary(\n        &self,\n        wb_start: Position,\n    ) -> Result<Option<ast::AssertionKind>> {}\n    #[inline(never)]\n    fn parse_octal(&self) -> ast::Literal {}\n    #[inline(never)]\n    fn parse_hex(&self) -> Result<ast::Literal> {}\n    #[inline(never)]\n    fn parse_hex_digits(&self, kind: ast::HexLiteralKind) -> Result<ast::Literal> {}\n    #[inline(never)]\n    fn parse_hex_brace(&self, kind: ast::HexLiteralKind) -> Result<ast::Literal> {}\n    fn parse_decimal(&self) -> Result<u32> {}\n    #[inline(never)]\n    fn parse_set_class(&self) -> Result<ast::ClassBracketed> {}\n    #[inline(never)]\n    fn parse_set_class_range(&self) -> Result<ast::ClassSetItem> {}\n    #[inline(never)]\n    fn parse_set_class_item(&self) -> Result<Primitive> {\n        if self.char() == '\\\\' {\n            self.parse_escape()\n        } else {\n            let x = Primitive::Literal(ast::Literal {\n                span: self.span_char(),\n                kind: ast::LiteralKind::Verbatim,\n                c: self.char(),\n            });\n            self.bump();\n            Ok(x)\n        }\n    }\n    #[inline(never)]\n    fn parse_set_class_open(&self) -> Result<(ast::ClassBracketed, ast::ClassSetUnion)> {}\n    #[inline(never)]\n    fn maybe_parse_ascii_class(&self) -> Option<ast::ClassAscii> {}\n    #[inline(never)]\n    fn parse_unicode_class(&self) -> Result<ast::ClassUnicode> {}\n    #[inline(never)]\n    fn parse_perl_class(&self) -> ast::ClassPerl {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parse a single item in a character class as a primitive, where the\n/// primitive either consists of a verbatim literal or a single escape\n/// sequence.\n///\n/// This assumes the parser is positioned at the beginning of a primitive,\n/// and advances the parser to the first position after the primitive if\n/// successful.\n///\n/// Note that it is the caller's responsibility to report an error if an\n/// illegal primitive was parsed.\n1991 fn parse_set_class_item(&self) -> Result<Primitive> {\n1992     if self.char() == '\\\\' {\n1993         self.parse_escape()\n1994     } else {\n1995         let x = Primitive::Literal(ast::Literal {\n1996             span: self.span_char(),\n1997             kind: ast::LiteralKind::Verbatim,\n1998             c: self.char(),\n1999         });\n2000         self.bump();\n2001         Ok(x)\n2002     }\n2003 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}