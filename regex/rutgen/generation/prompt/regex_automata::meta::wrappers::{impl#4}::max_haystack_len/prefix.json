{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/wrappers.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError},\n        regex::RegexInfo,\n    },\n    nfa::thompson::{pikevm, NFA},\n    util::{prefilter::Prefilter, primitives::NonMaxUsize},\n    HalfMatch, Input, Match, MatchKind, PatternID, PatternSet,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa;\n#[cfg(feature = \"dfa-onepass\")]\nuse crate::dfa::onepass;\n#[cfg(feature = \"hybrid\")]\nuse crate::hybrid;\n#[cfg(feature = \"nfa-backtrack\")]\nuse crate::nfa::thompson::backtrack;\n#[derive(Debug)]\npub(crate) struct BoundedBacktrackerEngine(\n    #[cfg(feature = \"nfa-backtrack\")]\n    backtrack::BoundedBacktracker,\n    #[cfg(not(feature = \"nfa-backtrack\"))]\n    (),\n);\n#[derive(Clone, Debug)]\npub struct BoundedBacktracker {\n    config: Config,\n    nfa: NFA,\n}\n#[derive(Debug)]\npub(crate) struct BoundedBacktracker(Option<BoundedBacktrackerEngine>);\nimpl BoundedBacktrackerEngine {\n    pub(crate) fn new(\n        info: &RegexInfo,\n        pre: Option<Prefilter>,\n        nfa: &NFA,\n    ) -> Result<Option<BoundedBacktrackerEngine>, BuildError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_match(\n        &self,\n        cache: &mut BoundedBacktrackerCache,\n        input: &Input<'_>,\n    ) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn search_slots(\n        &self,\n        cache: &mut BoundedBacktrackerCache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<PatternID> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn max_haystack_len(&self) -> usize {\n        #[cfg(feature = \"nfa-backtrack\")] { self.0.max_haystack_len() }\n        #[cfg(not(feature = \"nfa-backtrack\"))] { unreachable!() }\n    }\n}\nimpl BoundedBacktracker {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<BoundedBacktracker, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(\n        patterns: &[P],\n    ) -> Result<BoundedBacktracker, BuildError> {}\n    pub fn new_from_nfa(nfa: NFA) -> Result<BoundedBacktracker, BuildError> {}\n    pub fn always_match() -> Result<BoundedBacktracker, BuildError> {}\n    pub fn never_match() -> Result<BoundedBacktracker, BuildError> {}\n    pub fn config() -> Config {}\n    pub fn builder() -> Builder {}\n    pub fn create_cache(&self) -> Cache {}\n    pub fn create_captures(&self) -> Captures {}\n    pub fn reset_cache(&self, cache: &mut Cache) {}\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn get_config(&self) -> &Config {}\n    #[inline]\n    pub fn get_nfa(&self) -> &NFA {}\n    #[inline]\n    pub fn max_haystack_len(&self) -> usize {\n        let capacity = 8 * self.get_config().get_visited_capacity();\n        let blocks = div_ceil(capacity, Visited::BLOCK_SIZE);\n        let real_capacity = blocks.saturating_mul(Visited::BLOCK_SIZE);\n        (real_capacity / self.nfa.states().len()).saturating_sub(1)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n275 fn max_haystack_len(&self) -> usize {\n276     #[cfg(feature = \"nfa-backtrack\")]\n277     {\n278         self.0.max_haystack_len()\n279     }\n280     #[cfg(not(feature = \"nfa-backtrack\"))]\n281     {\n282         // Impossible to reach because this engine is never constructed\n283         // if the requisite features aren't enabled.\n284         unreachable!()\n285     }\n286 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}