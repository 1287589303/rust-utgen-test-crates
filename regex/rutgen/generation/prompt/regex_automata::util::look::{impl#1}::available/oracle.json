{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, utf8};\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where\n    /// `i = Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Clone, Debug)]\npub struct UnicodeWordBoundaryError(());\nimpl LookSet {\n    #[inline]\n    pub fn empty() -> LookSet {}\n    #[inline]\n    pub fn full() -> LookSet {}\n    #[inline]\n    pub fn singleton(look: Look) -> LookSet {}\n    #[inline]\n    pub fn len(self) -> usize {}\n    #[inline]\n    pub fn is_empty(self) -> bool {}\n    #[inline]\n    pub fn contains(self, look: Look) -> bool {}\n    #[inline]\n    pub fn contains_anchor(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_haystack(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_line(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_lf(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_crlf(&self) -> bool {}\n    #[inline]\n    pub fn contains_word(self) -> bool {}\n    #[inline]\n    pub fn contains_word_unicode(self) -> bool {\n        self.contains(Look::WordUnicode) || self.contains(Look::WordUnicodeNegate)\n            || self.contains(Look::WordStartUnicode)\n            || self.contains(Look::WordEndUnicode)\n            || self.contains(Look::WordStartHalfUnicode)\n            || self.contains(Look::WordEndHalfUnicode)\n    }\n    #[inline]\n    pub fn contains_word_ascii(self) -> bool {}\n    #[inline]\n    pub fn iter(self) -> LookSetIter {}\n    #[inline]\n    pub fn insert(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_insert(&mut self, look: Look) {}\n    #[inline]\n    pub fn remove(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_remove(&mut self, look: Look) {}\n    #[inline]\n    pub fn subtract(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_subtract(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn union(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_union(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn intersect(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_intersect(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn read_repr(slice: &[u8]) -> LookSet {}\n    #[inline]\n    pub fn write_repr(self, slice: &mut [u8]) {}\n    pub fn available(self) -> Result<(), UnicodeWordBoundaryError> {\n        if self.contains_word_unicode() {\n            UnicodeWordBoundaryError::check()?;\n        }\n        Ok(())\n    }\n}\nimpl UnicodeWordBoundaryError {\n    #[cfg(not(feature = \"unicode-word-boundary\"))]\n    pub(crate) fn new() -> UnicodeWordBoundaryError {}\n    pub fn check() -> Result<(), UnicodeWordBoundaryError> {\n        is_word_char::check()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Checks that all assertions in this set can be matched.\n///\n/// Some assertions, such as Unicode word boundaries, require optional (but\n/// enabled by default) tables that may not be available. If there are\n/// assertions in this set that require tables that are not available, then\n/// this will return an error.\n///\n/// Specifically, this returns an error when the the\n/// `unicode-word-boundary` feature is _not_ enabled _and_ this set\n/// contains a Unicode word boundary assertion.\n///\n/// It can be useful to use this on the result of\n/// [`NFA::look_set_any`](crate::nfa::thompson::NFA::look_set_any)\n/// when building a matcher engine to ensure methods like\n/// [`LookMatcher::matches_set`] do not panic at search time.\n493 pub fn available(self) -> Result<(), UnicodeWordBoundaryError> {\n494     if self.contains_word_unicode() {\n495         UnicodeWordBoundaryError::check()?;\n496     }\n497     Ok(())\n498 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}