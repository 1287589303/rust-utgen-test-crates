{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{error::Error, Regex, RegexSet};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {\n        self.builder.nest_limit(limit);\n        self\n    }\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {\n        self.syntaxc = self.syntaxc.nest_limit(limit);\n        self\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the nesting limit for this parser.\n///\n/// The nesting limit controls how deep the abstract syntax tree is\n/// allowed to be. If the AST exceeds the given limit (e.g., with too\n/// many nested groups), then an error is returned by the parser.\n///\n/// The purpose of this limit is to act as a heuristic to prevent stack\n/// overflow for consumers that do structural induction on an AST using\n/// explicit recursion. While this crate never does this (instead using\n/// constant stack space and moving the call stack to the heap), other\n/// crates may.\n///\n/// This limit is not checked until the entire AST is parsed.\n/// Therefore, if callers want to put a limit on the amount of heap\n/// space used, then they should impose a limit on the length, in\n/// bytes, of the concrete pattern string. In particular, this is\n/// viable since this parser implementation will limit itself to heap\n/// space proportional to the length of the pattern string. See also\n/// the [untrusted inputs](crate#untrusted-input) section in the\n/// top-level crate documentation for more information about this.\n///\n/// Note that a nest limit of `0` will return a nest limit error for\n/// most patterns but not all. For example, a nest limit of `0` permits\n/// `a` but not `ab`, since `ab` requires an explicit concatenation,\n/// which results in a nest depth of `1`. In general, a nest limit is\n/// not something that manifests in an obvious way in the concrete\n/// syntax, therefore, it should not be used in a granular way.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexBuilder;\n///\n/// assert!(RegexBuilder::new(r\"a\").nest_limit(0).build().is_ok());\n/// assert!(RegexBuilder::new(r\"ab\").nest_limit(0).build().is_err());\n/// ```\n774 pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {\n775     self.builder.nest_limit(limit);\n776     self\n777 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}