{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/parser.rs\n// crate name is regex_syntax\nuse crate::{ast, hir, Error};\n#[derive(Clone, Debug, Default)]\npub struct ParserBuilder {\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct TranslatorBuilder {\n    utf8: bool,\n    line_terminator: u8,\n    flags: Flags,\n}\n#[derive(Clone, Debug)]\npub struct ParserBuilder {\n    ignore_whitespace: bool,\n    nest_limit: u32,\n    octal: bool,\n    empty_min_range: bool,\n}\nimpl ParserBuilder {\n    pub fn new() -> ParserBuilder {}\n    pub fn build(&self) -> Parser {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut ParserBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn utf8(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut ParserBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn unicode(&mut self, yes: bool) -> &mut ParserBuilder {\n        self.hir.unicode(yes);\n        self\n    }\n}\nimpl TranslatorBuilder {\n    pub fn new() -> TranslatorBuilder {}\n    pub fn build(&self) -> Translator {}\n    pub fn utf8(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut TranslatorBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn unicode(&mut self, yes: bool) -> &mut TranslatorBuilder {\n        self.flags.unicode = if yes { None } else { Some(false) };\n        self\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Enable or disable the Unicode flag (`u`) by default.\n///\n/// By default this is **enabled**. It may alternatively be selectively\n/// disabled in the regular expression itself via the `u` flag.\n///\n/// Note that unless `utf8` is disabled (it's enabled by default), a\n/// regular expression will fail to parse if Unicode mode is disabled and a\n/// sub-expression could possibly match invalid UTF-8.\n210 pub fn unicode(&mut self, yes: bool) -> &mut ParserBuilder {\n211     self.hir.unicode(yes);\n212     self\n213 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}