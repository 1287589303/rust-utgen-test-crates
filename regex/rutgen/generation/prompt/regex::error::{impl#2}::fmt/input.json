{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is regex\nuse alloc::string::{String, ToString};\nuse regex_automata::meta;\n#[non_exhaustive]\n#[derive(Clone, PartialEq)]\npub enum Error {\n    /// A syntax error.\n    Syntax(String),\n    /// The compiled program exceeded the set size\n    /// limit. The argument is the size limit imposed by\n    /// [`RegexBuilder::size_limit`](crate::RegexBuilder::size_limit). Even\n    /// when not configured explicitly, it defaults to a reasonable limit.\n    ///\n    /// If you're getting this error, it occurred because your regex has been\n    /// compiled to an intermediate state that is too big. It is important to\n    /// note that exceeding this limit does _not_ mean the regex is too big to\n    /// _work_, but rather, the regex is big enough that it may wind up being\n    /// surprisingly slow when used in a search. In other words, this error is\n    /// meant to be a practical heuristic for avoiding a performance footgun,\n    /// and especially so for the case where the regex pattern is coming from\n    /// an untrusted source.\n    ///\n    /// There are generally two ways to move forward if you hit this error.\n    /// The first is to find some way to use a smaller regex. The second is to\n    /// increase the size limit via `RegexBuilder::size_limit`. However, if\n    /// your regex pattern is not from a trusted source, then neither of these\n    /// approaches may be appropriate. Instead, you'll have to determine just\n    /// how big of a regex you want to allow.\n    CompiledTooBig(usize),\n}\nimpl core::fmt::Display for Error {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        match *self {\n            Error::Syntax(ref err) => err.fmt(f),\n            Error::CompiledTooBig(limit) => {\n                write!(f, \"Compiled regex exceeds size limit of {} bytes.\", limit)\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n69 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n70     match *self {\n71         Error::Syntax(ref err) => err.fmt(f),\n72         Error::CompiledTooBig(limit) => write!(\n73             f,\n74             \"Compiled regex exceeds size limit of {} bytes.\",\n75             limit\n76         ),\n77     }\n78 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}