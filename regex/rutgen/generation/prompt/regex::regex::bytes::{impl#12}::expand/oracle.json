{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h [u8], [&'h [u8]; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &[u8], dst: &mut Vec<u8>) {\n        self.caps.interpolate_bytes_into(self.haystack, replacement, dst);\n    }\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Expands all instances of `$ref` in `replacement` to the corresponding\n/// capture group, and writes them to the `dst` buffer given. A `ref` can\n/// be a capture group index or a name. If `ref` doesn't refer to a capture\n/// group that participated in the match, then it is replaced with the\n/// empty string.\n///\n/// # Format\n///\n/// The format of the replacement string supports two different kinds of\n/// capture references: unbraced and braced.\n///\n/// For the unbraced format, the format supported is `$ref` where `name`\n/// can be any character in the class `[0-9A-Za-z_]`. `ref` is always\n/// the longest possible parse. So for example, `$1a` corresponds to the\n/// capture group named `1a` and not the capture group at index `1`. If\n/// `ref` matches `^[0-9]+$`, then it is treated as a capture group index\n/// itself and not a name.\n///\n/// For the braced format, the format supported is `${ref}` where `ref` can\n/// be any sequence of bytes except for `}`. If no closing brace occurs,\n/// then it is not considered a capture reference. As with the unbraced\n/// format, if `ref` matches `^[0-9]+$`, then it is treated as a capture\n/// group index and not a name.\n///\n/// The braced format is useful for exerting precise control over the name\n/// of the capture reference. For example, `${1}a` corresponds to the\n/// capture group reference `1` followed by the letter `a`, where as `$1a`\n/// (as mentioned above) corresponds to the capture group reference `1a`.\n/// The braced format is also useful for expressing capture group names\n/// that use characters not supported by the unbraced format. For example,\n/// `${foo[bar].baz}` refers to the capture group named `foo[bar].baz`.\n///\n/// If a capture group reference is found and it does not refer to a valid\n/// capture group, then it will be replaced with the empty string.\n///\n/// To write a literal `$`, use `$$`.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(\n///     r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",\n/// ).unwrap();\n/// let hay = b\"On 14-03-2010, I became a Tenneessee lamb.\";\n/// let caps = re.captures(hay).unwrap();\n///\n/// let mut dst = vec![];\n/// caps.expand(b\"year=$year, month=$month, day=$day\", &mut dst);\n/// assert_eq!(dst, b\"year=2010, month=03, day=14\");\n/// ```\n1853 pub fn expand(&self, replacement: &[u8], dst: &mut Vec<u8>) {\n1854     self.caps.interpolate_bytes_into(self.haystack, replacement, dst);\n1855 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}