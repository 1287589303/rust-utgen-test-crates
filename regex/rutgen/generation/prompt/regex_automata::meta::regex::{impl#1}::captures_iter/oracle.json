{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Debug)]\npub struct Regex {\n    /// The actual regex implementation.\n    imp: Arc<RegexI>,\n    /// A thread safe pool of caches.\n    ///\n    /// For the higher level search APIs, a `Cache` is automatically plucked\n    /// from this pool before running a search. The lower level `with` methods\n    /// permit the caller to provide their own cache, thereby bypassing\n    /// accesses to this pool.\n    ///\n    /// Note that we put this outside the `Arc` so that cloning a `Regex`\n    /// results in creating a fresh `CachePool`. This in turn permits callers\n    /// to clone regexes into separate threads where each such regex gets\n    /// the pool's \"thread owner\" optimization. Otherwise, if one shares the\n    /// `Regex` directly, then the pool will go through a slower mutex path for\n    /// all threads except for the \"owner.\"\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Debug)]\nstruct RegexI {\n    /// The core matching engine.\n    ///\n    /// Why is this reference counted when RegexI is already wrapped in an Arc?\n    /// Well, we need to capture this in a closure to our `Pool` below in order\n    /// to create new `Cache` values when needed. So since it needs to be in\n    /// two places, we make it reference counted.\n    ///\n    /// We make `RegexI` itself reference counted too so that `Regex` itself\n    /// stays extremely small and very cheap to clone.\n    strat: Arc<dyn Strategy>,\n    /// Metadata about the regexes driving the strategy. The metadata is also\n    /// usually stored inside the strategy too, but we put it here as well\n    /// so that we can get quick access to it (without virtual calls) before\n    /// executing the regex engine. For example, we use this metadata to\n    /// detect a subset of cases where we know a match is impossible, and can\n    /// thus avoid calling into the strategy at all.\n    ///\n    /// Since `RegexInfo` is stored in multiple places, it is also reference\n    /// counted.\n    info: RegexInfo,\n}\n#[derive(Debug)]\npub struct CapturesMatches<'r, 'h> {\n    re: &'r Regex,\n    cache: CachePoolGuard<'r>,\n    caps: Captures,\n    it: iter::Searcher<'h>,\n}\n#[derive(Debug, Clone)]\npub struct Cache {\n    pub(crate) capmatches: Captures,\n    pub(crate) pikevm: wrappers::PikeVMCache,\n    pub(crate) backtrack: wrappers::BoundedBacktrackerCache,\n    pub(crate) onepass: wrappers::OnePassCache,\n    pub(crate) hybrid: wrappers::HybridCache,\n    pub(crate) revhybrid: wrappers::ReverseHybridCache,\n}\n#[derive(Clone)]\npub struct Captures {\n    /// The group info that these capture groups are coupled to. This is what\n    /// gives the \"convenience\" of the `Captures` API. Namely, it provides the\n    /// slot mapping and the name|-->index mapping for capture lookups by name.\n    group_info: GroupInfo,\n    /// The ID of the pattern that matched. Regex engines must set this to\n    /// None when no match occurs.\n    pid: Option<PatternID>,\n    /// The slot values, i.e., submatch offsets.\n    ///\n    /// In theory, the smallest sequence of slots would be something like\n    /// `max(groups(pattern) for pattern in regex) * 2`, but instead, we use\n    /// `sum(groups(pattern) for pattern in regex) * 2`. Why?\n    ///\n    /// Well, the former could be used in theory, because we don't generally\n    /// have any overlapping APIs that involve capturing groups. Therefore,\n    /// there's technically never any need to have slots set for multiple\n    /// patterns. However, this might change some day, in which case, we would\n    /// need to have slots available.\n    ///\n    /// The other reason is that during the execution of some regex engines,\n    /// there exists a point in time where multiple slots for different\n    /// patterns may be written to before knowing which pattern has matched.\n    /// Therefore, the regex engines themselves, in order to support multiple\n    /// patterns correctly, must have all slots available. If `Captures`\n    /// doesn't have all slots available, then regex engines can't write\n    /// directly into the caller provided `Captures` and must instead write\n    /// into some other storage and then copy the slots involved in the match\n    /// at the end of the search.\n    ///\n    /// So overall, at least as of the time of writing, it seems like the path\n    /// of least resistance is to just require allocating all possible slots\n    /// instead of the conceptual minimum. Another way to justify this is that\n    /// the most common case is a single pattern, in which case, there is no\n    /// inefficiency here since the 'max' and 'sum' calculations above are\n    /// equivalent in that case.\n    ///\n    /// N.B. The mapping from group index to slot is maintained by `GroupInfo`\n    /// and is considered an API guarantee. See `GroupInfo` for more details on\n    /// that mapping.\n    ///\n    /// N.B. `Option<NonMaxUsize>` has the same size as a `usize`.\n    slots: Vec<Option<NonMaxUsize>>,\n}\nimpl Regex {\n    #[inline]\n    pub fn is_match<'h, I: Into<Input<'h>>>(&self, input: I) -> bool {}\n    #[inline]\n    pub fn find<'h, I: Into<Input<'h>>>(&self, input: I) -> Option<Match> {}\n    #[inline]\n    pub fn captures<'h, I: Into<Input<'h>>>(&self, input: I, caps: &mut Captures) {}\n    #[inline]\n    pub fn find_iter<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n    ) -> FindMatches<'r, 'h> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n    ) -> CapturesMatches<'r, 'h> {\n        let cache = self.pool.get();\n        let caps = self.create_captures();\n        let it = iter::Searcher::new(input.into());\n        CapturesMatches {\n            re: self,\n            cache,\n            caps,\n            it,\n        }\n    }\n    #[inline]\n    pub fn split<'r, 'h, I: Into<Input<'h>>>(&'r self, input: I) -> Split<'r, 'h> {}\n    pub fn splitn<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n        limit: usize,\n    ) -> SplitN<'r, 'h> {}\n}\nimpl<'h> Searcher<'h> {\n    pub fn new(input: Input<'h>) -> Searcher<'h> {\n        Searcher {\n            input,\n            last_match_end: None,\n        }\n    }\n    pub fn input<'s>(&'s self) -> &'s Input<'h> {}\n    #[inline]\n    pub fn advance_half<F>(&mut self, finder: F) -> Option<HalfMatch>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn advance<F>(&mut self, finder: F) -> Option<Match>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance_half<F>(\n        &mut self,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance<F>(&mut self, mut finder: F) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_half_matches_iter<F>(self, finder: F) -> TryHalfMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_matches_iter<F>(self, finder: F) -> TryMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub fn into_captures_iter<F>(\n        self,\n        caps: Captures,\n        finder: F,\n    ) -> TryCapturesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_half_match<F>(\n        &mut self,\n        _: HalfMatch,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_match<F>(\n        &mut self,\n        m: Match,\n        mut finder: F,\n    ) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over all non-overlapping `Captures` values. If no\n/// match exists, then the iterator yields no elements.\n///\n/// This yields the same matches as [`Regex::find_iter`], but it includes\n/// the spans of all capturing groups that participate in each match.\n///\n/// **Tip:** See [`util::iter::Searcher`](crate::util::iter::Searcher) for\n/// how to correctly iterate over all matches in a haystack while avoiding\n/// the creation of a new `Captures` value for every match. (Which you are\n/// forced to do with an `Iterator`.)\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, Span};\n///\n/// let re = Regex::new(\"foo(?P<numbers>[0-9]+)\")?;\n///\n/// let haystack = \"foo1 foo12 foo123\";\n/// let matches: Vec<Span> = re\n///     .captures_iter(haystack)\n///     // The unwrap is OK since 'numbers' matches if the pattern matches.\n///     .map(|caps| caps.get_group_by_name(\"numbers\").unwrap())\n///     .collect();\n/// assert_eq!(matches, vec![\n///     Span::from(3..4),\n///     Span::from(8..10),\n///     Span::from(14..17),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n651 pub fn captures_iter<'r, 'h, I: Into<Input<'h>>>(\n652     &'r self,\n653     input: I,\n654 ) -> CapturesMatches<'r, 'h> {\n655     let cache = self.pool.get();\n656     let caps = self.create_captures();\n657     let it = iter::Searcher::new(input.into());\n658     CapturesMatches { re: self, cache, caps, it }\n659 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}