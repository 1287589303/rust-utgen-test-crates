{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl Transition {\n    const STATE_ID_BITS: u64 = 21;\n    const STATE_ID_SHIFT: u64 = 64 - Transition::STATE_ID_BITS;\n    const STATE_ID_LIMIT: u64 = 1 << Transition::STATE_ID_BITS;\n    const MATCH_WINS_SHIFT: u64 = 64 - (Transition::STATE_ID_BITS + 1);\n    const INFO_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn new(match_wins: bool, sid: StateID, epsilons: Epsilons) -> Transition {\n        let match_wins = if match_wins { 1 << Transition::MATCH_WINS_SHIFT } else { 0 };\n        let sid = sid.as_u64() << Transition::STATE_ID_SHIFT;\n        Transition(sid | match_wins | epsilons.0)\n    }\n    fn is_dead(self) -> bool {}\n    fn match_wins(&self) -> bool {\n        (self.0 >> Transition::MATCH_WINS_SHIFT & 1) == 1\n    }\n    fn state_id(&self) -> StateID {}\n    fn set_state_id(&mut self, sid: StateID) {\n        *self = Transition::new(self.match_wins(), sid, self.epsilons());\n    }\n    fn epsilons(&self) -> Epsilons {\n        Epsilons(self.0 & Transition::INFO_MASK)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the \"next\" state ID in this transition.\n2636 fn set_state_id(&mut self, sid: StateID) {\n2637     *self = Transition::new(self.match_wins(), sid, self.epsilons());\n2638 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}