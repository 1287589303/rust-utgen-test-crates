{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone, Debug)]\npub struct CaptureLocations(captures::Captures);\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl CaptureLocations {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<(usize, usize)> {\n        self.0.get_group(i).map(|sp| (sp.start, sp.end))\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn pos(&self, i: usize) -> Option<(usize, usize)> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the start and end byte offsets of the capture group at index\n/// `i`. This returns `None` if `i` is not a valid capture group or if the\n/// capture group did not match.\n///\n/// # Example\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// re.captures_read(&mut locs, \"Bruce Springsteen\").unwrap();\n/// assert_eq!(Some((0, 17)), locs.get(0));\n/// assert_eq!(Some((0, 5)), locs.get(1));\n/// assert_eq!(Some((6, 17)), locs.get(2));\n/// ```\n2100 pub fn get(&self, i: usize) -> Option<(usize, usize)> {\n2101     self.0.get_group(i).map(|sp| (sp.start, sp.end))\n2102 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}