{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Debug)]\nstruct InternalBuilder<'a> {\n    /// The DFA we're building.\n    dfa: DFA,\n    /// An unordered collection of NFA state IDs that we haven't yet tried to\n    /// build into a DFA state yet.\n    ///\n    /// This collection does not ultimately wind up including every NFA state\n    /// ID. Instead, each ID represents a \"start\" state for a sub-graph of the\n    /// NFA. The set of NFA states we then use to build a DFA state consists\n    /// of that \"start\" state and all states reachable from it via epsilon\n    /// transitions.\n    uncompiled_nfa_ids: Vec<StateID>,\n    /// A map from NFA state ID to DFA state ID. This is useful for easily\n    /// determining whether an NFA state has been used as a \"starting\" point\n    /// to build a DFA state yet. If it hasn't, then it is mapped to DEAD,\n    /// and since DEAD is specially added and never corresponds to any NFA\n    /// state, it follows that a mapping to DEAD implies the NFA state has\n    /// no corresponding DFA state yet.\n    nfa_to_dfa_id: Vec<StateID>,\n    /// A stack used to traverse the NFA states that make up a single DFA\n    /// state. Traversal occurs until the stack is empty, and we only push to\n    /// the stack when the state ID isn't in 'seen'. Actually, even more than\n    /// that, if we try to push something on to this stack that is already in\n    /// 'seen', then we bail out on construction completely, since it implies\n    /// that the NFA is not one-pass.\n    stack: Vec<(StateID, Epsilons)>,\n    /// The set of NFA states that we've visited via 'stack'.\n    seen: SparseSet,\n    /// Whether a match NFA state has been observed while constructing a\n    /// one-pass DFA state. Once a match state is seen, assuming we are using\n    /// leftmost-first match semantics, then we don't add any more transitions\n    /// to the DFA state we're building.\n    matched: bool,\n    /// The config passed to the builder.\n    ///\n    /// This is duplicated in dfa.config.\n    config: Config,\n    /// The NFA we're building a one-pass DFA from.\n    ///\n    /// This is duplicated in dfa.nfa.\n    nfa: &'a NFA,\n    /// The equivalence classes that make up the alphabet for this DFA>\n    ///\n    /// This is duplicated in dfa.classes.\n    classes: ByteClasses,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug)]\npub struct Compiler {\n    /// A regex parser, used when compiling an NFA directly from a pattern\n    /// string.\n    parser: ParserBuilder,\n    /// The compiler configuration.\n    config: Config,\n    /// The builder for actually constructing an NFA. This provides a\n    /// convenient abstraction for writing a compiler.\n    builder: RefCell<Builder>,\n    /// State used for compiling character classes to UTF-8 byte automata.\n    /// State is not retained between character class compilations. This just\n    /// serves to amortize allocation to the extent possible.\n    utf8_state: RefCell<Utf8State>,\n    /// State used for arranging character classes in reverse into a trie.\n    trie_state: RefCell<RangeTrie>,\n    /// State used for caching common suffixes when compiling reverse UTF-8\n    /// automata (for Unicode character classes).\n    utf8_suffix: RefCell<Utf8SuffixMap>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone)]\npub struct DFA {\n    /// The configuration provided by the caller.\n    config: Config,\n    /// The NFA used to build this DFA.\n    ///\n    /// NOTE: We probably don't need to store the NFA here, but we use enough\n    /// bits from it that it's convenient to do so. And there really isn't much\n    /// cost to doing so either, since an NFA is reference counted internally.\n    nfa: NFA,\n    /// The transition table. Given a state ID 's' and a byte of haystack 'b',\n    /// the next state is `table[sid + classes[byte]]`.\n    ///\n    /// The stride of this table (i.e., the number of columns) is always\n    /// a power of 2, even if the alphabet length is smaller. This makes\n    /// converting between state IDs and state indices very cheap.\n    ///\n    /// Note that the stride always includes room for one extra \"transition\"\n    /// that isn't actually a transition. It is a 'PatternEpsilons' that is\n    /// used for match states only. Because of this, the maximum number of\n    /// active columns in the transition table is 257, which means the maximum\n    /// stride is 512 (the next power of 2 greater than or equal to 257).\n    table: Vec<Transition>,\n    /// The DFA state IDs of the starting states.\n    ///\n    /// `starts[0]` is always present and corresponds to the starting state\n    /// when searching for matches of any pattern in the DFA.\n    ///\n    /// `starts[i]` where i>0 corresponds to the starting state for the pattern\n    /// ID 'i-1'. These starting states are optional.\n    starts: Vec<StateID>,\n    /// Every state ID >= this value corresponds to a match state.\n    ///\n    /// This is what a search uses to detect whether a state is a match state\n    /// or not. It requires only a simple comparison instead of bit-unpacking\n    /// the PatternEpsilons from every state.\n    min_match_id: StateID,\n    /// The alphabet of this DFA, split into equivalence classes. Bytes in the\n    /// same equivalence class can never discriminate between a match and a\n    /// non-match.\n    classes: ByteClasses,\n    /// The number of elements in each state in the transition table. This may\n    /// be less than the stride, since the stride is always a power of 2 and\n    /// the alphabet length can be anything up to and including 256.\n    alphabet_len: usize,\n    /// The number of columns in the transition table, expressed as a power of\n    /// 2.\n    stride2: usize,\n    /// The offset at which the PatternEpsilons for a match state is stored in\n    /// the transition table.\n    ///\n    /// PERF: One wonders whether it would be better to put this in a separate\n    /// allocation, since only match states have a non-empty PatternEpsilons\n    /// and the number of match states tends be dwarfed by the number of\n    /// non-match states. So this would save '8*len(non_match_states)' for each\n    /// DFA. The question is whether moving this to a different allocation will\n    /// lead to a perf hit during searches. You might think dealing with match\n    /// states is rare, but some regexes spend a lot of time in match states\n    /// gobbling up input. But... match state handling is already somewhat\n    /// expensive, so maybe this wouldn't do much? Either way, it's worth\n    /// experimenting.\n    pateps_offset: usize,\n    /// The first explicit slot index. This refers to the first slot appearing\n    /// immediately after the last implicit slot. It is always 'patterns.len()\n    /// * 2'.\n    ///\n    /// We record this because we only store the explicit slots in our DFA\n    /// transition table that need to be saved. Implicit slots are handled\n    /// automatically as part of the search.\n    explicit_slot_start: usize,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\nimpl Builder {\n    pub fn new() -> Builder {}\n    #[cfg(feature = \"syntax\")]\n    pub fn build(&self, pattern: &str) -> Result<DFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn build_many<P: AsRef<str>>(&self, patterns: &[P]) -> Result<DFA, BuildError> {}\n    pub fn build_from_nfa(&self, nfa: NFA) -> Result<DFA, BuildError> {\n        InternalBuilder::new(self.config.clone(), &nfa).build()\n    }\n    pub fn configure(&mut self, config: Config) -> &mut Builder {}\n    #[cfg(feature = \"syntax\")]\n    pub fn syntax(&mut self, config: crate::util::syntax::Config) -> &mut Builder {}\n    #[cfg(feature = \"syntax\")]\n    pub fn thompson(&mut self, config: thompson::Config) -> &mut Builder {}\n}\nimpl<'a> InternalBuilder<'a> {\n    fn new(config: Config, nfa: &'a NFA) -> InternalBuilder<'a> {\n        let classes = if !config.get_byte_classes() {\n            ByteClasses::singletons()\n        } else {\n            nfa.byte_classes().clone()\n        };\n        let alphabet_len = classes.alphabet_len().checked_sub(1).unwrap();\n        let stride2 = classes.stride2();\n        let dfa = DFA {\n            config: config.clone(),\n            nfa: nfa.clone(),\n            table: vec![],\n            starts: vec![],\n            min_match_id: StateID::MAX,\n            classes: classes.clone(),\n            alphabet_len,\n            stride2,\n            pateps_offset: alphabet_len,\n            explicit_slot_start: nfa.pattern_len().checked_mul(2).unwrap(),\n        };\n        InternalBuilder {\n            dfa,\n            uncompiled_nfa_ids: vec![],\n            nfa_to_dfa_id: vec![DEAD; nfa.states().len()],\n            stack: vec![],\n            seen: SparseSet::new(nfa.states().len()),\n            matched: false,\n            config,\n            nfa,\n            classes,\n        }\n    }\n    fn build(mut self) -> Result<DFA, BuildError> {\n        self.nfa.look_set_any().available().map_err(BuildError::word)?;\n        for look in self.nfa.look_set_any().iter() {\n            if look.as_repr() > Look::WordUnicodeNegate.as_repr() {\n                return Err(BuildError::unsupported_look(look));\n            }\n        }\n        if self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT {\n            return Err(BuildError::too_many_patterns(PatternEpsilons::PATTERN_ID_LIMIT));\n        }\n        if self.nfa.group_info().explicit_slot_len() > Slots::LIMIT {\n            return Err(\n                BuildError::not_one_pass(\n                    \"too many explicit capturing groups (max is 16)\",\n                ),\n            );\n        }\n        assert_eq!(DEAD, self.add_empty_state() ?);\n        let explicit_slot_start = self.nfa.pattern_len() * 2;\n        self.add_start_state(None, self.nfa.start_anchored())?;\n        if self.config.get_starts_for_each_pattern() {\n            for pid in self.nfa.patterns() {\n                self.add_start_state(Some(pid), self.nfa.start_pattern(pid).unwrap())?;\n            }\n        }\n        while let Some(nfa_id) = self.uncompiled_nfa_ids.pop() {\n            let dfa_id = self.nfa_to_dfa_id[nfa_id];\n            self.matched = false;\n            self.seen.clear();\n            self.stack_push(nfa_id, Epsilons::empty())?;\n            while let Some((id, epsilons)) = self.stack.pop() {\n                match *self.nfa.state(id) {\n                    thompson::State::ByteRange { ref trans } => {\n                        self.compile_transition(dfa_id, trans, epsilons)?;\n                    }\n                    thompson::State::Sparse(ref sparse) => {\n                        for trans in sparse.transitions.iter() {\n                            self.compile_transition(dfa_id, trans, epsilons)?;\n                        }\n                    }\n                    thompson::State::Dense(ref dense) => {\n                        for trans in dense.iter() {\n                            self.compile_transition(dfa_id, &trans, epsilons)?;\n                        }\n                    }\n                    thompson::State::Look { look, next } => {\n                        let looks = epsilons.looks().insert(look);\n                        self.stack_push(next, epsilons.set_looks(looks))?;\n                    }\n                    thompson::State::Union { ref alternates } => {\n                        for &sid in alternates.iter().rev() {\n                            self.stack_push(sid, epsilons)?;\n                        }\n                    }\n                    thompson::State::BinaryUnion { alt1, alt2 } => {\n                        self.stack_push(alt2, epsilons)?;\n                        self.stack_push(alt1, epsilons)?;\n                    }\n                    thompson::State::Capture { next, slot, .. } => {\n                        let slot = slot.as_usize();\n                        let epsilons = if slot < explicit_slot_start {\n                            epsilons\n                        } else {\n                            let offset = slot - explicit_slot_start;\n                            epsilons.set_slots(epsilons.slots().insert(offset))\n                        };\n                        self.stack_push(next, epsilons)?;\n                    }\n                    thompson::State::Fail => {\n                        continue;\n                    }\n                    thompson::State::Match { pattern_id } => {\n                        if self.matched {\n                            return Err(\n                                BuildError::not_one_pass(\n                                    \"multiple epsilon transitions to match state\",\n                                ),\n                            );\n                        }\n                        self.matched = true;\n                        self.dfa\n                            .set_pattern_epsilons(\n                                dfa_id,\n                                PatternEpsilons::empty()\n                                    .set_pattern_id(pattern_id)\n                                    .set_epsilons(epsilons),\n                            );\n                    }\n                }\n            }\n        }\n        self.shuffle_states();\n        Ok(self.dfa)\n    }\n    fn shuffle_states(&mut self) {}\n    fn compile_transition(\n        &mut self,\n        dfa_id: StateID,\n        trans: &thompson::Transition,\n        epsilons: Epsilons,\n    ) -> Result<(), BuildError> {}\n    fn add_start_state(\n        &mut self,\n        pid: Option<PatternID>,\n        nfa_id: StateID,\n    ) -> Result<StateID, BuildError> {}\n    fn add_dfa_state_for_nfa_state(\n        &mut self,\n        nfa_id: StateID,\n    ) -> Result<StateID, BuildError> {}\n    fn add_empty_state(&mut self) -> Result<StateID, BuildError> {}\n    fn stack_push(\n        &mut self,\n        nfa_id: StateID,\n        epsilons: Epsilons,\n    ) -> Result<(), BuildError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Build a DFA from the given NFA.\n///\n/// # Example\n///\n/// This example shows how to build a DFA if you already have an NFA in\n/// hand.\n///\n/// ```\n/// use regex_automata::{dfa::onepass::DFA, nfa::thompson::NFA, Match};\n///\n/// // This shows how to set non-default options for building an NFA.\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().shrink(true))\n///     .build(r\"[a-z0-9]+\")?;\n/// let re = DFA::builder().build_from_nfa(nfa)?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n/// re.captures(&mut cache, \"foo123bar\", &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..9)), caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n395 pub fn build_from_nfa(&self, nfa: NFA) -> Result<DFA, BuildError> {\n396     // Why take ownership if we're just going to pass a reference to the\n397     // NFA to our internal builder? Well, the first thing to note is that\n398     // an NFA uses reference counting internally, so either choice is going\n399     // to be cheap. So there isn't much cost either way.\n400     //\n401     // The real reason is that a one-pass DFA, semantically, shares\n402     // ownership of an NFA. This is unlike other DFAs that don't share\n403     // ownership of an NFA at all, primarily because they want to be\n404     // self-contained in order to support cheap (de)serialization.\n405     //\n406     // But then why pass a '&nfa' below if we want to share ownership?\n407     // Well, it turns out that using a '&NFA' in our internal builder\n408     // separates its lifetime from the DFA we're building, and this turns\n409     // out to make code a bit more composable. e.g., We can iterate over\n410     // things inside the NFA while borrowing the builder as mutable because\n411     // we know the NFA cannot be mutated. So TL;DR --- this weirdness is\n412     // \"because borrow checker.\"\n413     InternalBuilder::new(self.config.clone(), &nfa).build()\n414 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}