{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum MatchErrorKind {\n    /// The search saw a \"quit\" byte at which it was instructed to stop\n    /// searching.\n    Quit {\n        /// The \"quit\" byte that was observed that caused the search to stop.\n        byte: u8,\n        /// The offset at which the quit byte was observed.\n        offset: usize,\n    },\n    /// The search, based on heuristics, determined that it would be better\n    /// to stop, typically to provide the caller an opportunity to use an\n    /// alternative regex engine.\n    ///\n    /// Currently, the only way for this to occur is via the lazy DFA and\n    /// only when it is configured to do so (it will not return this error by\n    /// default).\n    GaveUp {\n        /// The offset at which the search stopped. This corresponds to the\n        /// position immediately following the last byte scanned.\n        offset: usize,\n    },\n    /// This error occurs if the haystack given to the regex engine was too\n    /// long to be searched. This occurs, for example, with regex engines\n    /// like the bounded backtracker that have a configurable fixed amount of\n    /// capacity that is tied to the length of the haystack. Anything beyond\n    /// that configured limit will result in an error at search time.\n    HaystackTooLong {\n        /// The length of the haystack that exceeded the limit.\n        len: usize,\n    },\n    /// An error indicating that a particular type of anchored search was\n    /// requested, but that the regex engine does not support it.\n    ///\n    /// Note that this error should not be returned by a regex engine simply\n    /// because the pattern ID is invalid (i.e., equal to or exceeds the number\n    /// of patterns in the regex). In that case, the regex engine should report\n    /// a non-match.\n    UnsupportedAnchored {\n        /// The anchored mode given that is unsupported.\n        mode: Anchored,\n    },\n}\nimpl core::fmt::Display for MatchError {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        match *self.kind() {\n            MatchErrorKind::Quit { byte, offset } => {\n                write!(\n                    f, \"quit search after observing byte {:?} at offset {}\",\n                    DebugByte(byte), offset,\n                )\n            }\n            MatchErrorKind::GaveUp { offset } => {\n                write!(f, \"gave up searching at offset {}\", offset)\n            }\n            MatchErrorKind::HaystackTooLong { len } => {\n                write!(f, \"haystack of length {} is too long\", len)\n            }\n            MatchErrorKind::UnsupportedAnchored { mode: Anchored::Yes } => {\n                write!(f, \"anchored searches are not supported or enabled\")\n            }\n            MatchErrorKind::UnsupportedAnchored { mode: Anchored::No } => {\n                write!(f, \"unanchored searches are not supported or enabled\")\n            }\n            MatchErrorKind::UnsupportedAnchored { mode: Anchored::Pattern(pid) } => {\n                write!(\n                    f,\n                    \"anchored searches for a specific pattern ({}) are \\\n                     not supported or enabled\",\n                    pid.as_usize(),\n                )\n            }\n        }\n    }\n}\nimpl MatchError {\n    pub fn new(kind: MatchErrorKind) -> MatchError {}\n    pub fn kind(&self) -> &MatchErrorKind {\n        &self.0\n    }\n    pub fn quit(byte: u8, offset: usize) -> MatchError {}\n    pub fn gave_up(offset: usize) -> MatchError {}\n    pub fn haystack_too_long(len: usize) -> MatchError {}\n    pub fn unsupported_anchored(mode: Anchored) -> MatchError {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1901 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1902     match *self.kind() {\n1903         MatchErrorKind::Quit { byte, offset } => write!(\n1904             f,\n1905             \"quit search after observing byte {:?} at offset {}\",\n1906             DebugByte(byte),\n1907             offset,\n1908         ),\n1909         MatchErrorKind::GaveUp { offset } => {\n1910             write!(f, \"gave up searching at offset {}\", offset)\n1911         }\n1912         MatchErrorKind::HaystackTooLong { len } => {\n1913             write!(f, \"haystack of length {} is too long\", len)\n1914         }\n1915         MatchErrorKind::UnsupportedAnchored { mode: Anchored::Yes } => {\n1916             write!(f, \"anchored searches are not supported or enabled\")\n1917         }\n1918         MatchErrorKind::UnsupportedAnchored { mode: Anchored::No } => {\n1919             write!(f, \"unanchored searches are not supported or enabled\")\n1920         }\n1921         MatchErrorKind::UnsupportedAnchored {\n1922             mode: Anchored::Pattern(pid),\n1923         } => {\n1924             write!(\n1925                 f,\n1926                 \"anchored searches for a specific pattern ({}) are \\\n1927                  not supported or enabled\",\n1928                 pid.as_usize(),\n1929             )\n1930         }\n1931     }\n1932 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}