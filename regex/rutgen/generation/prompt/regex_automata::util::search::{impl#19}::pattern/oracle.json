{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl Anchored {\n    #[inline]\n    pub fn is_anchored(&self) -> bool {}\n    #[inline]\n    pub fn pattern(&self) -> Option<PatternID> {\n        match *self {\n            Anchored::Pattern(pid) => Some(pid),\n            _ => None,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the pattern ID associated with this configuration if it is an\n/// anchored search for a specific pattern. Otherwise `None` is returned.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{Anchored, PatternID};\n///\n/// assert_eq!(None, Anchored::No.pattern());\n/// assert_eq!(None, Anchored::Yes.pattern());\n///\n/// let pid = PatternID::must(5);\n/// assert_eq!(Some(pid), Anchored::Pattern(pid).pattern());\n/// ```\n1554 pub fn pattern(&self) -> Option<PatternID> {\n1555     match *self {\n1556         Anchored::Pattern(pid) => Some(pid),\n1557         _ => None,\n1558     }\n1559 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}