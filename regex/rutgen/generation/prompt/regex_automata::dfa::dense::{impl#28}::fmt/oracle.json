{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\npub(crate) struct State<'a> {\n    id: StateID,\n    stride2: usize,\n    transitions: &'a [StateID],\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\n#[derive(Debug)]\npub(crate) struct StateSparseTransitionIter<'a> {\n    dense: StateTransitionIter<'a>,\n    cur: Option<(alphabet::Unit, alphabet::Unit, StateID)>,\n}\nimpl<'a> fmt::Debug for State<'a> {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        for (i, (start, end, sid)) in self.sparse_transitions().enumerate() {\n            let id = if f.alternate() {\n                sid.as_usize()\n            } else {\n                sid.as_usize() >> self.stride2\n            };\n            if i > 0 {\n                write!(f, \", \")?;\n            }\n            if start == end {\n                write!(f, \"{:?} => {:?}\", start, id)?;\n            } else {\n                write!(f, \"{:?}-{:?} => {:?}\", start, end, id)?;\n            }\n        }\n        Ok(())\n    }\n}\nimpl<'a> State<'a> {\n    pub(crate) fn transitions(&self) -> StateTransitionIter<'_> {}\n    pub(crate) fn sparse_transitions(&self) -> StateSparseTransitionIter<'_> {\n        StateSparseTransitionIter {\n            dense: self.transitions(),\n            cur: None,\n        }\n    }\n    pub(crate) fn id(&self) -> StateID {}\n    #[cfg(feature = \"dfa-build\")]\n    fn accelerate(&self, classes: &ByteClasses) -> Option<Accel> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n4847 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n4848     for (i, (start, end, sid)) in self.sparse_transitions().enumerate() {\n4849         let id = if f.alternate() {\n4850             sid.as_usize()\n4851         } else {\n4852             sid.as_usize() >> self.stride2\n4853         };\n4854         if i > 0 {\n4855             write!(f, \", \")?;\n4856         }\n4857         if start == end {\n4858             write!(f, \"{:?} => {:?}\", start, id)?;\n4859         } else {\n4860             write!(f, \"{:?}-{:?} => {:?}\", start, end, id)?;\n4861         }\n4862     }\n4863     Ok(())\n4864 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}