{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Capture {\n    /// The capture index of the capture.\n    pub(crate) index: u32,\n    /// The name of the capture, if it exists.\n    pub(crate) name: Option<Box<str>>,\n    /// The expression inside the capturing group, which may be empty.\n    pub(crate) sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Repetition {\n    /// The minimum range of the repetition.\n    ///\n    /// Note that special cases like `?`, `+` and `*` all get translated into\n    /// the ranges `{0,1}`, `{1,}` and `{0,}`, respectively.\n    ///\n    /// When `min` is zero, this expression can match the empty string\n    /// regardless of what its sub-expression is.\n    pub(crate) min: u32,\n    /// The maximum range of the repetition.\n    ///\n    /// Note that when `max` is `None`, `min` acts as a lower bound but where\n    /// there is no upper bound. For something like `x{5}` where the min and\n    /// max are equivalent, `min` will be set to `5` and `max` will be set to\n    /// `Some(5)`.\n    pub(crate) max: Option<u32>,\n    /// Whether this repetition operator is greedy or not. A greedy operator\n    /// will match as much as it can. A non-greedy operator will match as\n    /// little as it can.\n    ///\n    /// Typically, operators are greedy by default and are only non-greedy when\n    /// a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is\n    /// not. However, this can be inverted via the `U` \"ungreedy\" flag.\n    pub(crate) greedy: bool,\n    /// The expression being repeated.\n    pub(crate) sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) enum HirKind {\n    Empty,\n    Char(char),\n    Class(Class),\n    Look(Look),\n    Repetition(Repetition),\n    Capture(Capture),\n    Concat(Vec<Hir>),\n    Alternation(Vec<Hir>),\n}\nimpl Drop for Hir {\n    fn drop(&mut self) {\n        use core::mem;\n        match *self.kind() {\n            HirKind::Empty | HirKind::Char(_) | HirKind::Class(_) | HirKind::Look(_) => {\n                return;\n            }\n            HirKind::Capture(ref x) if x.sub.kind.subs().is_empty() => return,\n            HirKind::Repetition(ref x) if x.sub.kind.subs().is_empty() => return,\n            HirKind::Concat(ref x) if x.is_empty() => return,\n            HirKind::Alternation(ref x) if x.is_empty() => return,\n            _ => {}\n        }\n        let mut stack = vec![mem::replace(self, Hir::empty())];\n        while let Some(mut expr) = stack.pop() {\n            match expr.kind {\n                HirKind::Empty\n                | HirKind::Char(_)\n                | HirKind::Class(_)\n                | HirKind::Look(_) => {}\n                HirKind::Capture(ref mut x) => {\n                    stack.push(mem::replace(&mut x.sub, Hir::empty()));\n                }\n                HirKind::Repetition(ref mut x) => {\n                    stack.push(mem::replace(&mut x.sub, Hir::empty()));\n                }\n                HirKind::Concat(ref mut x) => {\n                    stack.extend(x.drain(..));\n                }\n                HirKind::Alternation(ref mut x) => {\n                    stack.extend(x.drain(..));\n                }\n            }\n        }\n    }\n}\nimpl Hir {\n    pub(crate) fn parse(config: Config, pattern: &str) -> Result<Hir, Error> {}\n    pub(crate) fn kind(&self) -> &HirKind {\n        &self.kind\n    }\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn is_match_empty(&self) -> bool {}\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {}\n    fn fail() -> Hir {}\n    fn empty() -> Hir {\n        let kind = HirKind::Empty;\n        Hir {\n            kind,\n            is_start_anchored: false,\n            is_match_empty: true,\n            static_explicit_captures_len: Some(0),\n        }\n    }\n    fn char(ch: char) -> Hir {}\n    fn class(class: Class) -> Hir {}\n    fn look(look: Look) -> Hir {}\n    fn repetition(rep: Repetition) -> Hir {}\n    fn capture(cap: Capture) -> Hir {}\n    fn concat(mut subs: Vec<Hir>) -> Hir {}\n    fn alternation(mut subs: Vec<Hir>) -> Hir {}\n}\nimpl HirKind {\n    fn subs(&self) -> &[Hir] {\n        use core::slice::from_ref;\n        match *self {\n            HirKind::Empty | HirKind::Char(_) | HirKind::Class(_) | HirKind::Look(_) => {\n                &[]\n            }\n            HirKind::Repetition(Repetition { ref sub, .. }) => from_ref(sub),\n            HirKind::Capture(Capture { ref sub, .. }) => from_ref(sub),\n            HirKind::Concat(ref subs) => subs,\n            HirKind::Alternation(ref subs) => subs,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n770 fn drop(&mut self) {\n771     use core::mem;\n772 \n773     match *self.kind() {\n774         HirKind::Empty\n775         | HirKind::Char(_)\n776         | HirKind::Class(_)\n777         | HirKind::Look(_) => return,\n778         HirKind::Capture(ref x) if x.sub.kind.subs().is_empty() => return,\n779         HirKind::Repetition(ref x) if x.sub.kind.subs().is_empty() => {\n780             return\n781         }\n782         HirKind::Concat(ref x) if x.is_empty() => return,\n783         HirKind::Alternation(ref x) if x.is_empty() => return,\n784         _ => {}\n785     }\n786 \n787     let mut stack = vec![mem::replace(self, Hir::empty())];\n788     while let Some(mut expr) = stack.pop() {\n789         match expr.kind {\n790             HirKind::Empty\n791             | HirKind::Char(_)\n792             | HirKind::Class(_)\n793             | HirKind::Look(_) => {}\n794             HirKind::Capture(ref mut x) => {\n795                 stack.push(mem::replace(&mut x.sub, Hir::empty()));\n796             }\n797             HirKind::Repetition(ref mut x) => {\n798                 stack.push(mem::replace(&mut x.sub, Hir::empty()));\n799             }\n800             HirKind::Concat(ref mut x) => {\n801                 stack.extend(x.drain(..));\n802             }\n803             HirKind::Alternation(ref mut x) => {\n804                 stack.extend(x.drain(..));\n805             }\n806         }\n807     }\n808 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}