{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/mod.rs\n// crate name is regex_syntax\nuse core::cmp::Ordering;\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\npub use crate::ast::visitor::{visit, Visitor};\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ClassAsciiKind {\n    /// `[0-9A-Za-z]`\n    Alnum,\n    /// `[A-Za-z]`\n    Alpha,\n    /// `[\\x00-\\x7F]`\n    Ascii,\n    /// `[ \\t]`\n    Blank,\n    /// `[\\x00-\\x1F\\x7F]`\n    Cntrl,\n    /// `[0-9]`\n    Digit,\n    /// `[!-~]`\n    Graph,\n    /// `[a-z]`\n    Lower,\n    /// `[ -~]`\n    Print,\n    /// `[!-/:-@\\[-`{-~]`\n    Punct,\n    /// `[\\t\\n\\v\\f\\r ]`\n    Space,\n    /// `[A-Z]`\n    Upper,\n    /// `[0-9A-Za-z_]`\n    Word,\n    /// `[0-9A-Fa-f]`\n    Xdigit,\n}\nimpl ClassAsciiKind {\n    pub fn from_name(name: &str) -> Option<ClassAsciiKind> {\n        use self::ClassAsciiKind::*;\n        match name {\n            \"alnum\" => Some(Alnum),\n            \"alpha\" => Some(Alpha),\n            \"ascii\" => Some(Ascii),\n            \"blank\" => Some(Blank),\n            \"cntrl\" => Some(Cntrl),\n            \"digit\" => Some(Digit),\n            \"graph\" => Some(Graph),\n            \"lower\" => Some(Lower),\n            \"print\" => Some(Print),\n            \"punct\" => Some(Punct),\n            \"space\" => Some(Space),\n            \"upper\" => Some(Upper),\n            \"word\" => Some(Word),\n            \"xdigit\" => Some(Xdigit),\n            _ => None,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the corresponding ClassAsciiKind variant for the given name.\n///\n/// The name given should correspond to the lowercase version of the\n/// variant name. e.g., `cntrl` is the name for `ClassAsciiKind::Cntrl`.\n///\n/// If no variant with the corresponding name exists, then `None` is\n/// returned.\n862 pub fn from_name(name: &str) -> Option<ClassAsciiKind> {\n863     use self::ClassAsciiKind::*;\n864     match name {\n865         \"alnum\" => Some(Alnum),\n866         \"alpha\" => Some(Alpha),\n867         \"ascii\" => Some(Ascii),\n868         \"blank\" => Some(Blank),\n869         \"cntrl\" => Some(Cntrl),\n870         \"digit\" => Some(Digit),\n871         \"graph\" => Some(Graph),\n872         \"lower\" => Some(Lower),\n873         \"print\" => Some(Print),\n874         \"punct\" => Some(Punct),\n875         \"space\" => Some(Space),\n876         \"upper\" => Some(Upper),\n877         \"word\" => Some(Word),\n878         \"xdigit\" => Some(Xdigit),\n879         _ => None,\n880     }\n881 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}