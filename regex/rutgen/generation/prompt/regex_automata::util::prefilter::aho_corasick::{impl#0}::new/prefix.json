{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/aho_corasick.rs\n// crate name is regex_automata\nuse crate::util::{prefilter::PrefilterI, search::{MatchKind, Span}};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub(crate) struct AhoCorasick {\n    #[cfg(not(feature = \"perf-literal-multisubstring\"))]\n    _unused: (),\n    #[cfg(feature = \"perf-literal-multisubstring\")]\n    ac: aho_corasick::AhoCorasick,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl AhoCorasick {\n    pub(crate) fn new<B: AsRef<[u8]>>(\n        kind: MatchKind,\n        needles: &[B],\n    ) -> Option<AhoCorasick> {\n        #[cfg(not(feature = \"perf-literal-multisubstring\"))] { None }\n        #[cfg(feature = \"perf-literal-multisubstring\")]\n        {\n            let ac_match_kind = match kind {\n                MatchKind::LeftmostFirst | MatchKind::All => {\n                    aho_corasick::MatchKind::LeftmostFirst\n                }\n            };\n            let ac_kind = if needles.len() <= 500 {\n                aho_corasick::AhoCorasickKind::DFA\n            } else {\n                aho_corasick::AhoCorasickKind::ContiguousNFA\n            };\n            let result = aho_corasick::AhoCorasick::builder()\n                .kind(Some(ac_kind))\n                .match_kind(ac_match_kind)\n                .start_kind(aho_corasick::StartKind::Both)\n                .prefilter(false)\n                .build(needles);\n            let ac = match result {\n                Ok(ac) => ac,\n                Err(_err) => {\n                    debug!(\"aho-corasick prefilter failed to build: {}\", _err);\n                    return None;\n                }\n            };\n            Some(AhoCorasick { ac })\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n15 pub(crate) fn new<B: AsRef<[u8]>>(\n16     kind: MatchKind,\n17     needles: &[B],\n18 ) -> Option<AhoCorasick> {\n19     #[cfg(not(feature = \"perf-literal-multisubstring\"))]\n20     {\n21         None\n22     }\n23     #[cfg(feature = \"perf-literal-multisubstring\")]\n24     {\n25         // We used to use `aho_corasick::MatchKind::Standard` here when\n26         // `kind` was `MatchKind::All`, but this is not correct. The\n27         // \"standard\" Aho-Corasick match semantics are to report a match\n28         // immediately as soon as it is seen, but `All` isn't like that.\n29         // In particular, with \"standard\" semantics, given the needles\n30         // \"abc\" and \"b\" and the haystack \"abc,\" it would report a match\n31         // at offset 1 before a match at offset 0. This is never what we\n32         // want in the context of the regex engine, regardless of whether\n33         // we have leftmost-first or 'all' semantics. Namely, we always\n34         // want the leftmost match.\n35         let ac_match_kind = match kind {\n36             MatchKind::LeftmostFirst | MatchKind::All => {\n37                 aho_corasick::MatchKind::LeftmostFirst\n38             }\n39         };\n40         // This is kind of just an arbitrary number, but basically, if we\n41         // have a small enough set of literals, then we try to use the VERY\n42         // memory hungry DFA. Otherwise, we whimp out and use an NFA. The\n43         // upshot is that the NFA is quite lean and decently fast. Faster\n44         // than a naive Aho-Corasick NFA anyway.\n45         let ac_kind = if needles.len() <= 500 {\n46             aho_corasick::AhoCorasickKind::DFA\n47         } else {\n48             aho_corasick::AhoCorasickKind::ContiguousNFA\n49         };\n50         let result = aho_corasick::AhoCorasick::builder()\n51             .kind(Some(ac_kind))\n52             .match_kind(ac_match_kind)\n53             .start_kind(aho_corasick::StartKind::Both)\n54             // We try to handle all of the prefilter cases in the super\n55             // module, and only use Aho-Corasick for the actual automaton.\n56             // The aho-corasick crate does have some extra prefilters,\n57             // namely, looking for rare bytes to feed to memchr{,2,3}\n58             // instead of just the first byte. If we end up wanting\n59             // those---and they are somewhat tricky to implement---then\n60             // we could port them to this crate.\n61             //\n62             // The main reason for doing things this way is so we have a\n63             // complete and easy to understand picture of which prefilters\n64             // are available and how they work. Otherwise it seems too\n65             // easy to get into a situation where we have a prefilter\n66             // layered on top of prefilter, and that might have unintended\n67             // consequences.\n68             .prefilter(false)\n69             .build(needles);\n70         let ac = match result {\n71             Ok(ac) => ac,\n72             Err(_err) => {\n73                 debug!(\"aho-corasick prefilter failed to build: {}\", _err);\n74                 return None;\n75             }\n76         };\n77         Some(AhoCorasick { ac })\n78     }\n79 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}