{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/bytes.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{bytes::RegexSetBuilder, Error};\n#[derive(Clone)]\npub struct RegexSet {\n    pub(crate) meta: meta::Regex,\n    pub(crate) patterns: alloc::sync::Arc<[String]>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl RegexSet {\n    pub fn new<I, S>(exprs: I) -> Result<RegexSet, Error>\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    pub fn empty() -> RegexSet {}\n    #[inline]\n    pub fn is_match(&self, haystack: &[u8]) -> bool {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &[u8], start: usize) -> bool {}\n    #[inline]\n    pub fn matches(&self, haystack: &[u8]) -> SetMatches {}\n    #[inline]\n    pub fn matches_at(&self, haystack: &[u8], start: usize) -> SetMatches {}\n    #[inline]\n    pub fn matches_read_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &[u8],\n        start: usize,\n    ) -> bool {\n        let mut patset = PatternSet::new(self.meta.pattern_len());\n        let mut input = Input::new(haystack);\n        input.set_start(start);\n        self.meta.which_overlapping_matches(&input, &mut patset);\n        for pid in patset.iter() {\n            matches[pid] = true;\n        }\n        !patset.is_empty()\n    }\n    #[inline]\n    pub fn read_matches_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &[u8],\n        start: usize,\n    ) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn patterns(&self) -> &[String] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the same as matches, but starts the search at the given\n/// offset and stores the matches into the slice given.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// `matches` must have a length that is at least the number of regexes\n/// in this set.\n///\n/// This method returns true if and only if at least one member of\n/// `matches` is true after executing the set against `haystack`.\n350 pub fn matches_read_at(\n351     &self,\n352     matches: &mut [bool],\n353     haystack: &[u8],\n354     start: usize,\n355 ) -> bool {\n356     // This is pretty dumb. We should try to fix this, but the\n357     // regex-automata API doesn't provide a way to store matches in an\n358     // arbitrary &mut [bool]. Thankfully, this API is doc(hidden) and\n359     // thus not public... But regex-capi currently uses it. We should\n360     // fix regex-capi to use a PatternSet, maybe? Not sure... PatternSet\n361     // is in regex-automata, not regex. So maybe we should just accept a\n362     // 'SetMatches', which is basically just a newtype around PatternSet.\n363     let mut patset = PatternSet::new(self.meta.pattern_len());\n364     let mut input = Input::new(haystack);\n365     input.set_start(start);\n366     self.meta.which_overlapping_matches(&input, &mut patset);\n367     for pid in patset.iter() {\n368         matches[pid] = true;\n369     }\n370     !patset.is_empty()\n371 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}