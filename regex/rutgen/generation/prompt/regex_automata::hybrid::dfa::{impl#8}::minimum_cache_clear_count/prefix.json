{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/hybrid/dfa.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype StateMap = std::collections::HashMap<State, LazyStateID>;\n#[cfg(not(feature = \"std\"))]\ntype StateMap = alloc::collections::BTreeMap<State, LazyStateID>;\nuse core::{iter, mem::size_of};\nuse alloc::vec::Vec;\nuse crate::{\n    hybrid::{\n        error::{BuildError, CacheError, StartError},\n        id::{LazyStateID, LazyStateIDError},\n        search,\n    },\n    nfa::thompson,\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        determinize::{self, State, StateBuilderEmpty, StateBuilderNFA},\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID as NFAStateID},\n        search::{Anchored, HalfMatch, Input, MatchError, MatchKind, PatternSet},\n        sparse_set::SparseSets, start::{self, Start, StartByteMap},\n    },\n};\nconst MIN_STATES: usize = SENTINEL_STATES + 2;\nconst SENTINEL_STATES: usize = 3;\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {}\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {}\n    pub fn cache_capacity(mut self, bytes: usize) -> Config {}\n    pub fn skip_cache_capacity_check(mut self, yes: bool) -> Config {}\n    pub fn minimum_cache_clear_count(mut self, min: Option<usize>) -> Config {\n        self.minimum_cache_clear_count = Some(min);\n        self\n    }\n    pub fn minimum_bytes_per_state(mut self, min: Option<usize>) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {}\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_cache_capacity(&self) -> usize {}\n    pub fn get_skip_cache_capacity_check(&self) -> bool {}\n    pub fn get_minimum_cache_clear_count(&self) -> Option<usize> {}\n    pub fn get_minimum_bytes_per_state(&self) -> Option<usize> {}\n    pub fn get_minimum_cache_capacity(\n        &self,\n        nfa: &thompson::NFA,\n    ) -> Result<usize, BuildError> {}\n    fn byte_classes_from_nfa(&self, nfa: &thompson::NFA, quit: &ByteSet) -> ByteClasses {}\n    fn quit_set_from_nfa(&self, nfa: &thompson::NFA) -> Result<ByteSet, BuildError> {}\n    fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Configure a lazy DFA search to quit after a certain number of cache\n/// clearings.\n///\n/// When a minimum is set, then a lazy DFA search will *possibly* \"give\n/// up\" after the minimum number of cache clearings has occurred. This is\n/// typically useful in scenarios where callers want to detect whether the\n/// lazy DFA search is \"efficient\" or not. If the cache is cleared too many\n/// times, this is a good indicator that it is not efficient, and thus, the\n/// caller may wish to use some other regex engine.\n///\n/// Note that the number of times a cache is cleared is a property of\n/// the cache itself. Thus, if a cache is used in a subsequent search\n/// with a similarly configured lazy DFA, then it could cause the\n/// search to \"give up\" if the cache needed to be cleared, depending\n/// on its internal count and configured minimum. The cache clear\n/// count can only be reset to `0` via [`DFA::reset_cache`] (or\n/// [`Regex::reset_cache`](crate::hybrid::regex::Regex::reset_cache) if\n/// you're using the `Regex` API).\n///\n/// By default, no minimum is configured. Thus, a lazy DFA search will\n/// never give up due to cache clearings. If you do set this option, you\n/// might consider also setting [`Config::minimum_bytes_per_state`] in\n/// order for the lazy DFA to take efficiency into account before giving\n/// up.\n///\n/// # Example\n///\n/// This example uses a somewhat pathological configuration to demonstrate\n/// the _possible_ behavior of cache clearing and how it might result\n/// in a search that returns an error.\n///\n/// It is important to note that the precise mechanics of how and when\n/// a cache gets cleared is an implementation detail.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{hybrid::dfa::DFA, Input, MatchError, MatchErrorKind};\n///\n/// // This is a carefully chosen regex. The idea is to pick one\n/// // that requires some decent number of states (hence the bounded\n/// // repetition). But we specifically choose to create a class with an\n/// // ASCII letter and a non-ASCII letter so that we can check that no new\n/// // states are created once the cache is full. Namely, if we fill up the\n/// // cache on a haystack of 'a's, then in order to match one 'β', a new\n/// // state will need to be created since a 'β' is encoded with multiple\n/// // bytes. Since there's no room for this state, the search should quit\n/// // at the very first position.\n/// let pattern = r\"[aβ]{100}\";\n/// let dfa = DFA::builder()\n///     .configure(\n///         // Configure it so that we have the minimum cache capacity\n///         // possible. And that if any clearings occur, the search quits.\n///         DFA::config()\n///             .skip_cache_capacity_check(true)\n///             .cache_capacity(0)\n///             .minimum_cache_clear_count(Some(0)),\n///     )\n///     .build(pattern)?;\n/// let mut cache = dfa.create_cache();\n///\n/// // Our search will give up before reaching the end!\n/// let haystack = \"a\".repeat(101).into_bytes();\n/// let result = dfa.try_search_fwd(&mut cache, &Input::new(&haystack));\n/// assert!(matches!(\n///     *result.unwrap_err().kind(),\n///     MatchErrorKind::GaveUp { .. },\n/// ));\n///\n/// // Now that we know the cache is full, if we search a haystack that we\n/// // know will require creating at least one new state, it should not\n/// // be able to make much progress.\n/// let haystack = \"β\".repeat(101).into_bytes();\n/// let result = dfa.try_search_fwd(&mut cache, &Input::new(&haystack));\n/// assert!(matches!(\n///     *result.unwrap_err().kind(),\n///     MatchErrorKind::GaveUp { .. },\n/// ));\n///\n/// // If we reset the cache, then we should be able to create more states\n/// // and make more progress with searching for betas.\n/// cache.reset(&dfa);\n/// let haystack = \"β\".repeat(101).into_bytes();\n/// let result = dfa.try_search_fwd(&mut cache, &Input::new(&haystack));\n/// assert!(matches!(\n///     *result.unwrap_err().kind(),\n///     MatchErrorKind::GaveUp { .. },\n/// ));\n///\n/// // ... switching back to ASCII still makes progress since it just needs\n/// // to set transitions on existing states!\n/// let haystack = \"a\".repeat(101).into_bytes();\n/// let result = dfa.try_search_fwd(&mut cache, &Input::new(&haystack));\n/// assert!(matches!(\n///     *result.unwrap_err().kind(),\n///     MatchErrorKind::GaveUp { .. },\n/// ));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n3665 pub fn minimum_cache_clear_count(mut self, min: Option<usize>) -> Config {\n3666     self.minimum_cache_clear_count = Some(min);\n3667     self\n3668 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}