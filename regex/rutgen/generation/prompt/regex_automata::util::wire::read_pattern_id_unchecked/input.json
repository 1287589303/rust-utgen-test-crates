{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\npub(crate) fn read_pattern_id_unchecked(slice: &[u8]) -> (PatternID, usize) {\n    let pid = PatternID::from_ne_bytes_unchecked(\n        slice[..PatternID::SIZE].try_into().unwrap(),\n    );\n    (pid, PatternID::SIZE)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reads a pattern ID from the given slice. If the slice has insufficient\n/// length, then this panics. Otherwise, the deserialized integer is assumed\n/// to be a valid pattern ID.\n///\n/// This also returns the number of bytes read.\n597 pub(crate) fn read_pattern_id_unchecked(slice: &[u8]) -> (PatternID, usize) {\n598     let pid = PatternID::from_ne_bytes_unchecked(\n599         slice[..PatternID::SIZE].try_into().unwrap(),\n600     );\n601     (pid, PatternID::SIZE)\n602 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}