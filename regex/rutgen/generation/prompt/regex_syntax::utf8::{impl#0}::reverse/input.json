{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Utf8Range {\n    /// Start of byte range (inclusive).\n    pub start: u8,\n    /// End of byte range (inclusive).\n    pub end: u8,\n}\n#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord)]\npub enum Utf8Sequence {\n    /// One byte range.\n    One(Utf8Range),\n    /// Two successive byte ranges.\n    Two([Utf8Range; 2]),\n    /// Three successive byte ranges.\n    Three([Utf8Range; 3]),\n    /// Four successive byte ranges.\n    Four([Utf8Range; 4]),\n}\nimpl Utf8Sequence {\n    fn from_encoded_range(start: &[u8], end: &[u8]) -> Self {\n        assert_eq!(start.len(), end.len());\n        match start.len() {\n            2 => {\n                Utf8Sequence::Two([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                ])\n            }\n            3 => {\n                Utf8Sequence::Three([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                    Utf8Range::new(start[2], end[2]),\n                ])\n            }\n            4 => {\n                Utf8Sequence::Four([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                    Utf8Range::new(start[2], end[2]),\n                    Utf8Range::new(start[3], end[3]),\n                ])\n            }\n            n => unreachable!(\"invalid encoded length: {}\", n),\n        }\n    }\n    pub fn as_slice(&self) -> &[Utf8Range] {}\n    pub fn len(&self) -> usize {}\n    pub fn reverse(&mut self) {\n        match *self {\n            Utf8Sequence::One(_) => {}\n            Utf8Sequence::Two(ref mut x) => x.reverse(),\n            Utf8Sequence::Three(ref mut x) => x.reverse(),\n            Utf8Sequence::Four(ref mut x) => x.reverse(),\n        }\n    }\n    pub fn matches(&self, bytes: &[u8]) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reverses the ranges in this sequence.\n///\n/// For example, if this corresponds to the following sequence:\n///\n/// ```text\n/// [D0-D3][80-BF]\n/// ```\n///\n/// Then after reversal, it will be\n///\n/// ```text\n/// [80-BF][D0-D3]\n/// ```\n///\n/// This is useful when one is constructing a UTF-8 automaton to match\n/// character classes in reverse.\n169 pub fn reverse(&mut self) {\n170     match *self {\n171         Utf8Sequence::One(_) => {}\n172         Utf8Sequence::Two(ref mut x) => x.reverse(),\n173         Utf8Sequence::Three(ref mut x) => x.reverse(),\n174         Utf8Sequence::Four(ref mut x) => x.reverse(),\n175     }\n176 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}