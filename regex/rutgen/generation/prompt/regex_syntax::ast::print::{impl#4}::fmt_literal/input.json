{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/print.rs\n// crate name is regex_syntax\nuse core::fmt;\nuse crate::ast::{\n    self, visitor::{self, Visitor},\n    Ast,\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self);\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Debug)]\nstruct Writer<W> {\n    wtr: W,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\nimpl<W: fmt::Write> Writer<W> {\n    fn fmt_group_pre(&mut self, ast: &ast::Group) -> fmt::Result {}\n    fn fmt_group_post(&mut self, _ast: &ast::Group) -> fmt::Result {}\n    fn fmt_repetition(&mut self, ast: &ast::Repetition) -> fmt::Result {}\n    fn fmt_repetition_range(&mut self, ast: &ast::RepetitionRange) -> fmt::Result {}\n    fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {\n        use crate::ast::LiteralKind::*;\n        match ast.kind {\n            Verbatim => self.wtr.write_char(ast.c),\n            Meta | Superfluous => write!(self.wtr, r\"\\{}\", ast.c),\n            Octal => write!(self.wtr, r\"\\{:o}\", u32::from(ast.c)),\n            HexFixed(ast::HexLiteralKind::X) => {\n                write!(self.wtr, r\"\\x{:02X}\", u32::from(ast.c))\n            }\n            HexFixed(ast::HexLiteralKind::UnicodeShort) => {\n                write!(self.wtr, r\"\\u{:04X}\", u32::from(ast.c))\n            }\n            HexFixed(ast::HexLiteralKind::UnicodeLong) => {\n                write!(self.wtr, r\"\\U{:08X}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::X) => {\n                write!(self.wtr, r\"\\x{{{:X}}}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::UnicodeShort) => {\n                write!(self.wtr, r\"\\u{{{:X}}}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::UnicodeLong) => {\n                write!(self.wtr, r\"\\U{{{:X}}}\", u32::from(ast.c))\n            }\n            Special(ast::SpecialLiteralKind::Bell) => self.wtr.write_str(r\"\\a\"),\n            Special(ast::SpecialLiteralKind::FormFeed) => self.wtr.write_str(r\"\\f\"),\n            Special(ast::SpecialLiteralKind::Tab) => self.wtr.write_str(r\"\\t\"),\n            Special(ast::SpecialLiteralKind::LineFeed) => self.wtr.write_str(r\"\\n\"),\n            Special(ast::SpecialLiteralKind::CarriageReturn) => self.wtr.write_str(r\"\\r\"),\n            Special(ast::SpecialLiteralKind::VerticalTab) => self.wtr.write_str(r\"\\v\"),\n            Special(ast::SpecialLiteralKind::Space) => self.wtr.write_str(r\"\\ \"),\n        }\n    }\n    fn fmt_assertion(&mut self, ast: &ast::Assertion) -> fmt::Result {}\n    fn fmt_set_flags(&mut self, ast: &ast::SetFlags) -> fmt::Result {}\n    fn fmt_flags(&mut self, ast: &ast::Flags) -> fmt::Result {}\n    fn fmt_class_bracketed_pre(&mut self, ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_bracketed_post(&mut self, _ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_set_binary_op_kind(\n        &mut self,\n        ast: &ast::ClassSetBinaryOpKind,\n    ) -> fmt::Result {}\n    fn fmt_class_perl(&mut self, ast: &ast::ClassPerl) -> fmt::Result {}\n    fn fmt_class_ascii(&mut self, ast: &ast::ClassAscii) -> fmt::Result {}\n    fn fmt_class_unicode(&mut self, ast: &ast::ClassUnicode) -> fmt::Result {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n208 fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {\n209     use crate::ast::LiteralKind::*;\n210 \n211     match ast.kind {\n212         Verbatim => self.wtr.write_char(ast.c),\n213         Meta | Superfluous => write!(self.wtr, r\"\\{}\", ast.c),\n214         Octal => write!(self.wtr, r\"\\{:o}\", u32::from(ast.c)),\n215         HexFixed(ast::HexLiteralKind::X) => {\n216             write!(self.wtr, r\"\\x{:02X}\", u32::from(ast.c))\n217         }\n218         HexFixed(ast::HexLiteralKind::UnicodeShort) => {\n219             write!(self.wtr, r\"\\u{:04X}\", u32::from(ast.c))\n220         }\n221         HexFixed(ast::HexLiteralKind::UnicodeLong) => {\n222             write!(self.wtr, r\"\\U{:08X}\", u32::from(ast.c))\n223         }\n224         HexBrace(ast::HexLiteralKind::X) => {\n225             write!(self.wtr, r\"\\x{{{:X}}}\", u32::from(ast.c))\n226         }\n227         HexBrace(ast::HexLiteralKind::UnicodeShort) => {\n228             write!(self.wtr, r\"\\u{{{:X}}}\", u32::from(ast.c))\n229         }\n230         HexBrace(ast::HexLiteralKind::UnicodeLong) => {\n231             write!(self.wtr, r\"\\U{{{:X}}}\", u32::from(ast.c))\n232         }\n233         Special(ast::SpecialLiteralKind::Bell) => {\n234             self.wtr.write_str(r\"\\a\")\n235         }\n236         Special(ast::SpecialLiteralKind::FormFeed) => {\n237             self.wtr.write_str(r\"\\f\")\n238         }\n239         Special(ast::SpecialLiteralKind::Tab) => self.wtr.write_str(r\"\\t\"),\n240         Special(ast::SpecialLiteralKind::LineFeed) => {\n241             self.wtr.write_str(r\"\\n\")\n242         }\n243         Special(ast::SpecialLiteralKind::CarriageReturn) => {\n244             self.wtr.write_str(r\"\\r\")\n245         }\n246         Special(ast::SpecialLiteralKind::VerticalTab) => {\n247             self.wtr.write_str(r\"\\v\")\n248         }\n249         Special(ast::SpecialLiteralKind::Space) => {\n250             self.wtr.write_str(r\"\\ \")\n251         }\n252     }\n253 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}