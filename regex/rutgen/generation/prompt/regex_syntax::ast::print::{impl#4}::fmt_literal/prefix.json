{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/print.rs\n// crate name is regex_syntax\nuse core::fmt;\nuse crate::ast::{\n    self, visitor::{self, Visitor},\n    Ast,\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self);\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Debug)]\nstruct Writer<W> {\n    wtr: W,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\nimpl<W: fmt::Write> Writer<W> {\n    fn fmt_group_pre(&mut self, ast: &ast::Group) -> fmt::Result {}\n    fn fmt_group_post(&mut self, _ast: &ast::Group) -> fmt::Result {}\n    fn fmt_repetition(&mut self, ast: &ast::Repetition) -> fmt::Result {}\n    fn fmt_repetition_range(&mut self, ast: &ast::RepetitionRange) -> fmt::Result {}\n    fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {\n        use crate::ast::LiteralKind::*;\n        match ast.kind {\n            Verbatim => self.wtr.write_char(ast.c),\n            Meta | Superfluous => write!(self.wtr, r\"\\{}\", ast.c),\n            Octal => write!(self.wtr, r\"\\{:o}\", u32::from(ast.c)),\n            HexFixed(ast::HexLiteralKind::X) => {\n                write!(self.wtr, r\"\\x{:02X}\", u32::from(ast.c))\n            }\n            HexFixed(ast::HexLiteralKind::UnicodeShort) => {\n                write!(self.wtr, r\"\\u{:04X}\", u32::from(ast.c))\n            }\n            HexFixed(ast::HexLiteralKind::UnicodeLong) => {\n                write!(self.wtr, r\"\\U{:08X}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::X) => {\n                write!(self.wtr, r\"\\x{{{:X}}}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::UnicodeShort) => {\n                write!(self.wtr, r\"\\u{{{:X}}}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::UnicodeLong) => {\n                write!(self.wtr, r\"\\U{{{:X}}}\", u32::from(ast.c))\n            }\n            Special(ast::SpecialLiteralKind::Bell) => self.wtr.write_str(r\"\\a\"),\n            Special(ast::SpecialLiteralKind::FormFeed) => self.wtr.write_str(r\"\\f\"),\n            Special(ast::SpecialLiteralKind::Tab) => self.wtr.write_str(r\"\\t\"),\n            Special(ast::SpecialLiteralKind::LineFeed) => self.wtr.write_str(r\"\\n\"),\n            Special(ast::SpecialLiteralKind::CarriageReturn) => self.wtr.write_str(r\"\\r\"),\n            Special(ast::SpecialLiteralKind::VerticalTab) => self.wtr.write_str(r\"\\v\"),\n            Special(ast::SpecialLiteralKind::Space) => self.wtr.write_str(r\"\\ \"),\n        }\n    }\n    fn fmt_assertion(&mut self, ast: &ast::Assertion) -> fmt::Result {}\n    fn fmt_set_flags(&mut self, ast: &ast::SetFlags) -> fmt::Result {}\n    fn fmt_flags(&mut self, ast: &ast::Flags) -> fmt::Result {}\n    fn fmt_class_bracketed_pre(&mut self, ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_bracketed_post(&mut self, _ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_set_binary_op_kind(\n        &mut self,\n        ast: &ast::ClassSetBinaryOpKind,\n    ) -> fmt::Result {}\n    fn fmt_class_perl(&mut self, ast: &ast::ClassPerl) -> fmt::Result {}\n    fn fmt_class_ascii(&mut self, ast: &ast::ClassAscii) -> fmt::Result {}\n    fn fmt_class_unicode(&mut self, ast: &ast::ClassUnicode) -> fmt::Result {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n208 fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {\n209     use crate::ast::LiteralKind::*;\n210 \n211     match ast.kind {\n212         Verbatim => self.wtr.write_char(ast.c),\n213         Meta | Superfluous => write!(self.wtr, r\"\\{}\", ast.c),\n214         Octal => write!(self.wtr, r\"\\{:o}\", u32::from(ast.c)),\n215         HexFixed(ast::HexLiteralKind::X) => {\n216             write!(self.wtr, r\"\\x{:02X}\", u32::from(ast.c))\n217         }\n218         HexFixed(ast::HexLiteralKind::UnicodeShort) => {\n219             write!(self.wtr, r\"\\u{:04X}\", u32::from(ast.c))\n220         }\n221         HexFixed(ast::HexLiteralKind::UnicodeLong) => {\n222             write!(self.wtr, r\"\\U{:08X}\", u32::from(ast.c))\n223         }\n224         HexBrace(ast::HexLiteralKind::X) => {\n225             write!(self.wtr, r\"\\x{{{:X}}}\", u32::from(ast.c))\n226         }\n227         HexBrace(ast::HexLiteralKind::UnicodeShort) => {\n228             write!(self.wtr, r\"\\u{{{:X}}}\", u32::from(ast.c))\n229         }\n230         HexBrace(ast::HexLiteralKind::UnicodeLong) => {\n231             write!(self.wtr, r\"\\U{{{:X}}}\", u32::from(ast.c))\n232         }\n233         Special(ast::SpecialLiteralKind::Bell) => {\n234             self.wtr.write_str(r\"\\a\")\n235         }\n236         Special(ast::SpecialLiteralKind::FormFeed) => {\n237             self.wtr.write_str(r\"\\f\")\n238         }\n239         Special(ast::SpecialLiteralKind::Tab) => self.wtr.write_str(r\"\\t\"),\n240         Special(ast::SpecialLiteralKind::LineFeed) => {\n241             self.wtr.write_str(r\"\\n\")\n242         }\n243         Special(ast::SpecialLiteralKind::CarriageReturn) => {\n244             self.wtr.write_str(r\"\\r\")\n245         }\n246         Special(ast::SpecialLiteralKind::VerticalTab) => {\n247             self.wtr.write_str(r\"\\v\")\n248         }\n249         Special(ast::SpecialLiteralKind::Space) => {\n250             self.wtr.write_str(r\"\\ \")\n251         }\n252     }\n253 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}