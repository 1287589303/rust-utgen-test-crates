{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Clone, Debug)]\nstruct Utf8State {\n    compiled: Utf8BoundedMap,\n    uncompiled: Vec<Utf8Node>,\n}\n#[derive(Clone, Debug)]\npub struct Utf8BoundedMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    ///\n    /// This makes it possible to clear the map by simply incrementing the\n    /// version number instead of actually deallocating any storage.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8BoundedEntry>,\n}\n#[derive(Clone, Debug)]\nstruct Utf8Node {\n    trans: Vec<Transition>,\n    last: Option<Utf8LastTransition>,\n}\nimpl Utf8State {\n    fn new() -> Utf8State {\n        Utf8State {\n            compiled: Utf8BoundedMap::new(10_000),\n            uncompiled: vec![],\n        }\n    }\n    fn clear(&mut self) {}\n}\nimpl Utf8BoundedMap {\n    pub fn new(capacity: usize) -> Utf8BoundedMap {\n        assert!(capacity > 0);\n        Utf8BoundedMap {\n            version: 0,\n            capacity,\n            map: vec![],\n        }\n    }\n    pub fn clear(&mut self) {}\n    pub fn hash(&self, key: &[Transition]) -> usize {}\n    pub fn get(&mut self, key: &[Transition], hash: usize) -> Option<StateID> {}\n    pub fn set(&mut self, key: Vec<Transition>, hash: usize, state_id: StateID) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1751 fn new() -> Utf8State {\n1752     Utf8State { compiled: Utf8BoundedMap::new(10_000), uncompiled: vec![] }\n1753 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}