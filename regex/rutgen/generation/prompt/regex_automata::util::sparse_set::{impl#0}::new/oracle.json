{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/sparse_set.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::util::primitives::StateID;\n#[derive(Clone, Debug)]\npub(crate) struct SparseSets {\n    pub(crate) set1: SparseSet,\n    pub(crate) set2: SparseSet,\n}\n#[derive(Clone)]\npub(crate) struct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\nimpl SparseSets {\n    pub(crate) fn new(capacity: usize) -> SparseSets {\n        SparseSets {\n            set1: SparseSet::new(capacity),\n            set2: SparseSet::new(capacity),\n        }\n    }\n    #[inline]\n    pub(crate) fn resize(&mut self, new_capacity: usize) {}\n    pub(crate) fn clear(&mut self) {}\n    pub(crate) fn swap(&mut self) {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\nimpl SparseSet {\n    #[inline]\n    pub(crate) fn new(capacity: usize) -> SparseSet {\n        let mut set = SparseSet {\n            len: 0,\n            dense: vec![],\n            sparse: vec![],\n        };\n        set.resize(capacity);\n        set\n    }\n    #[inline]\n    pub(crate) fn resize(&mut self, new_capacity: usize) {}\n    #[inline]\n    pub(crate) fn capacity(&self) -> usize {}\n    #[inline]\n    pub(crate) fn len(&self) -> usize {}\n    #[inline]\n    pub(crate) fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn insert(&mut self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn contains(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn clear(&mut self) {}\n    #[inline]\n    pub(crate) fn iter(&self) -> SparseSetIter<'_> {}\n    #[inline]\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new pair of sparse sets where each set has the given capacity.\n///\n/// This panics if the capacity given is bigger than `StateID::LIMIT`.\n45 pub(crate) fn new(capacity: usize) -> SparseSets {\n46     SparseSets {\n47         set1: SparseSet::new(capacity),\n48         set2: SparseSet::new(capacity),\n49     }\n50 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}