{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Debug)]\npub struct CaptureMatches<'r, 'h> {\n    haystack: &'h [u8],\n    it: meta::CapturesMatches<'r, 'h>,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'r, 'h> Iterator for CaptureMatches<'r, 'h> {\n    type Item = Captures<'h>;\n    #[inline]\n    fn next(&mut self) -> Option<Captures<'h>> {\n        let static_captures_len = self.it.regex().static_captures_len();\n        self.it\n            .next()\n            .map(|caps| Captures {\n                haystack: self.haystack,\n                caps,\n                static_captures_len,\n            })\n    }\n    #[inline]\n    fn count(self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2217 fn next(&mut self) -> Option<Captures<'h>> {\n2218     let static_captures_len = self.it.regex().static_captures_len();\n2219     self.it.next().map(|caps| Captures {\n2220         haystack: self.haystack,\n2221         caps,\n2222         static_captures_len,\n2223     })\n2224 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}