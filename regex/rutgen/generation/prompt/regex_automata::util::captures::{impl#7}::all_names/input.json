{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Debug, Default)]\nstruct GroupInfoInner {\n    slot_ranges: Vec<(SmallIndex, SmallIndex)>,\n    name_to_index: Vec<CaptureNameMap>,\n    index_to_name: Vec<Vec<Option<Arc<str>>>>,\n    memory_extra: usize,\n}\n#[derive(Debug)]\npub struct GroupInfoAllNames<'a> {\n    group_info: &'a GroupInfo,\n    pids: PatternIDIter,\n    current_pid: Option<PatternID>,\n    names: Option<core::iter::Enumerate<GroupInfoPatternNames<'a>>>,\n}\n#[derive(Clone, Debug)]\npub struct GroupInfoPatternNames<'a> {\n    it: core::slice::Iter<'a, Option<Arc<str>>>,\n}\nimpl GroupInfo {\n    pub fn new<P, G, N>(pattern_groups: P) -> Result<GroupInfo, GroupInfoError>\n    where\n        P: IntoIterator<Item = G>,\n        G: IntoIterator<Item = Option<N>>,\n        N: AsRef<str>,\n    {}\n    pub fn empty() -> GroupInfo {}\n    #[inline]\n    pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {}\n    #[inline]\n    pub fn to_name(&self, pid: PatternID, group_index: usize) -> Option<&str> {}\n    #[inline]\n    pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {}\n    #[inline]\n    pub fn all_names(&self) -> GroupInfoAllNames<'_> {\n        GroupInfoAllNames {\n            group_info: self,\n            pids: PatternID::iter(self.pattern_len()),\n            current_pid: None,\n            names: None,\n        }\n    }\n    #[inline]\n    pub fn slots(&self, pid: PatternID, group_index: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn slot(&self, pid: PatternID, group_index: usize) -> Option<usize> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {\n        self.0.pattern_len()\n    }\n    #[inline]\n    pub fn group_len(&self, pid: PatternID) -> usize {}\n    #[inline]\n    pub fn all_group_len(&self) -> usize {}\n    #[inline]\n    pub fn slot_len(&self) -> usize {}\n    #[inline]\n    pub fn implicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn explicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return an iterator of all capture groups for all patterns supported by\n/// this `GroupInfo`. Each item yielded is a triple of the group's pattern\n/// ID, index in the pattern and the group's name, if present.\n///\n/// # Example\n///\n/// This example shows how to get a list of all capture groups found in\n/// one NFA, potentially spanning multiple patterns.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new_many(&[\n///     r\"(?P<foo>a)\",\n///     r\"a\",\n///     r\"(a)\",\n/// ])?;\n/// let expected = vec![\n///     (PatternID::must(0), 0, None),\n///     (PatternID::must(0), 1, Some(\"foo\")),\n///     (PatternID::must(1), 0, None),\n///     (PatternID::must(2), 0, None),\n///     (PatternID::must(2), 1, None),\n/// ];\n/// let got: Vec<(PatternID, usize, Option<&str>)> =\n///     nfa.group_info().all_names().collect();\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Unlike other capturing group related routines, this routine doesn't\n/// panic even if captures aren't enabled on this NFA:\n///\n/// ```\n/// use regex_automata::nfa::thompson::{NFA, WhichCaptures};\n///\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().which_captures(WhichCaptures::None))\n///     .build_many(&[\n///         r\"(?P<foo>a)\",\n///         r\"a\",\n///         r\"(a)\",\n///     ])?;\n/// // When captures aren't enabled, there's nothing to return.\n/// assert_eq!(0, nfa.group_info().all_names().count());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1829 pub fn all_names(&self) -> GroupInfoAllNames<'_> {\n1830     GroupInfoAllNames {\n1831         group_info: self,\n1832         pids: PatternID::iter(self.pattern_len()),\n1833         current_pid: None,\n1834         names: None,\n1835     }\n1836 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}