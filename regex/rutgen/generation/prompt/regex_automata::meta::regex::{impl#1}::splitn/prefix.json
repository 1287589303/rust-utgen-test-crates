{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Debug)]\npub struct Regex {\n    /// The actual regex implementation.\n    imp: Arc<RegexI>,\n    /// A thread safe pool of caches.\n    ///\n    /// For the higher level search APIs, a `Cache` is automatically plucked\n    /// from this pool before running a search. The lower level `with` methods\n    /// permit the caller to provide their own cache, thereby bypassing\n    /// accesses to this pool.\n    ///\n    /// Note that we put this outside the `Arc` so that cloning a `Regex`\n    /// results in creating a fresh `CachePool`. This in turn permits callers\n    /// to clone regexes into separate threads where each such regex gets\n    /// the pool's \"thread owner\" optimization. Otherwise, if one shares the\n    /// `Regex` directly, then the pool will go through a slower mutex path for\n    /// all threads except for the \"owner.\"\n    pool: CachePool,\n}\n#[derive(Debug)]\npub struct Split<'r, 'h> {\n    finder: FindMatches<'r, 'h>,\n    last: usize,\n}\n#[derive(Debug)]\npub struct SplitN<'r, 'h> {\n    splits: Split<'r, 'h>,\n    limit: usize,\n}\n#[derive(Debug)]\nstruct RegexI {\n    /// The core matching engine.\n    ///\n    /// Why is this reference counted when RegexI is already wrapped in an Arc?\n    /// Well, we need to capture this in a closure to our `Pool` below in order\n    /// to create new `Cache` values when needed. So since it needs to be in\n    /// two places, we make it reference counted.\n    ///\n    /// We make `RegexI` itself reference counted too so that `Regex` itself\n    /// stays extremely small and very cheap to clone.\n    strat: Arc<dyn Strategy>,\n    /// Metadata about the regexes driving the strategy. The metadata is also\n    /// usually stored inside the strategy too, but we put it here as well\n    /// so that we can get quick access to it (without virtual calls) before\n    /// executing the regex engine. For example, we use this metadata to\n    /// detect a subset of cases where we know a match is impossible, and can\n    /// thus avoid calling into the strategy at all.\n    ///\n    /// Since `RegexInfo` is stored in multiple places, it is also reference\n    /// counted.\n    info: RegexInfo,\n}\nimpl Regex {\n    #[inline]\n    pub fn is_match<'h, I: Into<Input<'h>>>(&self, input: I) -> bool {}\n    #[inline]\n    pub fn find<'h, I: Into<Input<'h>>>(&self, input: I) -> Option<Match> {}\n    #[inline]\n    pub fn captures<'h, I: Into<Input<'h>>>(&self, input: I, caps: &mut Captures) {}\n    #[inline]\n    pub fn find_iter<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n    ) -> FindMatches<'r, 'h> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n    ) -> CapturesMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h, I: Into<Input<'h>>>(&'r self, input: I) -> Split<'r, 'h> {\n        Split {\n            finder: self.find_iter(input),\n            last: 0,\n        }\n    }\n    pub fn splitn<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n        limit: usize,\n    ) -> SplitN<'r, 'h> {\n        SplitN {\n            splits: self.split(input),\n            limit,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator of at most `limit` spans of the haystack given,\n/// delimited by a match of the regex. (A `limit` of `0` will return no\n/// spans.) Namely, each element of the iterator corresponds to a part\n/// of the haystack that *isn't* matched by the regular expression. The\n/// remainder of the haystack that is not split will be the last element in\n/// the iterator.\n///\n/// # Example\n///\n/// Get the first two words in some haystack:\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\"\\W+\").unwrap();\n/// let hay = \"Hey! How are you?\";\n/// let fields: Vec<&str> =\n///     re.splitn(hay, 3).map(|span| &hay[span]).collect();\n/// assert_eq!(fields, vec![\"Hey\", \"How\", \"are you?\"]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// # Examples: more cases\n///\n/// ```\n/// use regex_automata::meta::Regex;\n///\n/// let re = Regex::new(r\" \")?;\n/// let hay = \"Mary had a little lamb\";\n/// let got: Vec<&str> = re.splitn(hay, 3).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"Mary\", \"had\", \"a little lamb\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"\";\n/// let got: Vec<&str> = re.splitn(hay, 3).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"lionXXtigerXleopard\";\n/// let got: Vec<&str> = re.splitn(hay, 3).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"lion\", \"\", \"tigerXleopard\"]);\n///\n/// let re = Regex::new(r\"::\")?;\n/// let hay = \"lion::tiger::leopard\";\n/// let got: Vec<&str> = re.splitn(hay, 2).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"lion\", \"tiger::leopard\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"abcXdef\";\n/// let got: Vec<&str> = re.splitn(hay, 1).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"abcXdef\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"abcdef\";\n/// let got: Vec<&str> = re.splitn(hay, 2).map(|sp| &hay[sp]).collect();\n/// assert_eq!(got, vec![\"abcdef\"]);\n///\n/// let re = Regex::new(r\"X\")?;\n/// let hay = \"abcXdef\";\n/// let got: Vec<&str> = re.splitn(hay, 0).map(|sp| &hay[sp]).collect();\n/// assert!(got.is_empty());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n888 pub fn splitn<'r, 'h, I: Into<Input<'h>>>(\n889     &'r self,\n890     input: I,\n891     limit: usize,\n892 ) -> SplitN<'r, 'h> {\n893     SplitN { splits: self.split(input), limit }\n894 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}