{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\nfn symbolic_name_normalize_bytes(slice: &mut [u8]) -> &mut [u8] {\n    let mut start = 0;\n    let mut starts_with_is = false;\n    if slice.len() >= 2 {\n        starts_with_is = slice[0..2] == b\"is\"[..] || slice[0..2] == b\"IS\"[..]\n            || slice[0..2] == b\"iS\"[..] || slice[0..2] == b\"Is\"[..];\n        if starts_with_is {\n            start = 2;\n        }\n    }\n    let mut next_write = 0;\n    for i in start..slice.len() {\n        let b = slice[i];\n        if b == b' ' || b == b'_' || b == b'-' {\n            continue;\n        } else if b'A' <= b && b <= b'Z' {\n            slice[next_write] = b + (b'a' - b'A');\n            next_write += 1;\n        } else if b <= 0x7F {\n            slice[next_write] = b;\n            next_write += 1;\n        }\n    }\n    if starts_with_is && next_write == 1 && slice[0] == b'c' {\n        slice[0] = b'i';\n        slice[1] = b's';\n        slice[2] = b'c';\n        next_write = 3;\n    }\n    &mut slice[..next_write]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Normalize the given symbolic name in place according to UAX44-LM3.\n///\n/// A \"symbolic name\" typically corresponds to property names and property\n/// value aliases. Note, though, that it should not be applied to property\n/// string values.\n///\n/// The slice returned is guaranteed to be valid UTF-8 for all possible values\n/// of `slice`.\n///\n/// See: https://unicode.org/reports/tr44/#UAX44-LM3\n902 fn symbolic_name_normalize_bytes(slice: &mut [u8]) -> &mut [u8] {\n903     // I couldn't find a place in the standard that specified that property\n904     // names/aliases had a particular structure (unlike character names), but\n905     // we assume that it's ASCII only and drop anything that isn't ASCII.\n906     let mut start = 0;\n907     let mut starts_with_is = false;\n908     if slice.len() >= 2 {\n909         // Ignore any \"is\" prefix.\n910         starts_with_is = slice[0..2] == b\"is\"[..]\n911             || slice[0..2] == b\"IS\"[..]\n912             || slice[0..2] == b\"iS\"[..]\n913             || slice[0..2] == b\"Is\"[..];\n914         if starts_with_is {\n915             start = 2;\n916         }\n917     }\n918     let mut next_write = 0;\n919     for i in start..slice.len() {\n920         // VALIDITY ARGUMENT: To guarantee that the resulting slice is valid\n921         // UTF-8, we ensure that the slice contains only ASCII bytes. In\n922         // particular, we drop every non-ASCII byte from the normalized string.\n923         let b = slice[i];\n924         if b == b' ' || b == b'_' || b == b'-' {\n925             continue;\n926         } else if b'A' <= b && b <= b'Z' {\n927             slice[next_write] = b + (b'a' - b'A');\n928             next_write += 1;\n929         } else if b <= 0x7F {\n930             slice[next_write] = b;\n931             next_write += 1;\n932         }\n933     }\n934     // Special case: ISO_Comment has a 'isc' abbreviation. Since we generally\n935     // ignore 'is' prefixes, the 'isc' abbreviation gets caught in the cross\n936     // fire and ends up creating an alias for 'c' to 'ISO_Comment', but it\n937     // is actually an alias for the 'Other' general category.\n938     if starts_with_is && next_write == 1 && slice[0] == b'c' {\n939         slice[0] = b'i';\n940         slice[1] = b's';\n941         slice[2] = b'c';\n942         next_write = 3;\n943     }\n944     &mut slice[..next_write]\n945 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}