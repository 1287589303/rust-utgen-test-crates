{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{\n    bytes::{Regex, RegexSet},\n    error::Error,\n};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {\n        self.builder.unicode(yes);\n        self\n    }\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {\n        self.syntaxc = self.syntaxc.unicode(yes);\n        self\n    }\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures Unicode mode for the entire pattern.\n///\n/// Enabling Unicode mode does a number of things:\n///\n/// * Most fundamentally, it causes the fundamental atom of matching\n/// to be a single codepoint. When Unicode mode is disabled, it's a\n/// single byte. For example, when Unicode mode is enabled, `.` will\n/// match `ðŸ’©` once, where as it will match 4 times when Unicode mode\n/// is disabled. (Since the UTF-8 encoding of `ðŸ’©` is 4 bytes long.)\n/// * Case insensitive matching uses Unicode simple case folding rules.\n/// * Unicode character classes like `\\p{Letter}` and `\\p{Greek}` are\n/// available.\n/// * Perl character classes are Unicode aware. That is, `\\w`, `\\s` and\n/// `\\d`.\n/// * The word boundary assertions, `\\b` and `\\B`, use the Unicode\n/// definition of a word character.\n///\n/// Note that unlike the top-level `Regex` for searching `&str`, it\n/// is permitted to disable Unicode mode even if the resulting pattern\n/// could match invalid UTF-8. For example, `(?-u:.)` is not a valid\n/// pattern for a top-level `Regex`, but is valid for a `bytes::Regex`.\n///\n/// For more details on the Unicode support in this crate, see the\n/// [Unicode section](crate#unicode) in this crate's top-level\n/// documentation.\n///\n/// The default for this is `true`.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"\\w\")\n///     .unicode(false)\n///     .build()\n///     .unwrap();\n/// // Normally greek letters would be included in \\w, but since\n/// // Unicode mode is disabled, it only matches ASCII letters.\n/// assert!(!re.is_match(\"Î´\".as_bytes()));\n///\n/// let re = RegexBuilder::new(r\"s\")\n///     .case_insensitive(true)\n///     .unicode(false)\n///     .build()\n///     .unwrap();\n/// // Normally 'Å¿' is included when searching for 's' case\n/// // insensitively due to Unicode's simple case folding rules. But\n/// // when Unicode mode is disabled, only ASCII case insensitive rules\n/// // are used.\n/// assert!(!re.is_match(\"Å¿\".as_bytes()));\n/// ```\n///\n/// Since this builder is for constructing a [`bytes::Regex`](Regex),\n/// one can disable Unicode mode even if it would match invalid UTF-8:\n///\n/// ```\n/// use regex::bytes::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\".\")\n///     .unicode(false)\n///     .build()\n///     .unwrap();\n/// // Normally greek letters would be included in \\w, but since\n/// // Unicode mode is disabled, it only matches ASCII letters.\n/// assert!(re.is_match(b\"\\xFF\"));\n/// ```\n1463 pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {\n1464     self.builder.unicode(yes);\n1465     self\n1466 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}