{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\npub(crate) fn try_read_u128(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(u128, usize), DeserializeError> {\n    check_slice_len(slice, size_of::<u128>(), what)?;\n    Ok((read_u128(slice), size_of::<u128>()))\n}\npub(crate) fn read_u128(slice: &[u8]) -> u128 {\n    let bytes: [u8; 16] = slice[..size_of::<u128>()].try_into().unwrap();\n    u128::from_ne_bytes(bytes)\n}\npub(crate) fn check_slice_len<T>(\n    slice: &[T],\n    at_least_len: usize,\n    what: &'static str,\n) -> Result<(), DeserializeError> {\n    if slice.len() < at_least_len {\n        return Err(DeserializeError::buffer_too_small(what));\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Try to read a u128 from the beginning of the given slice in native endian\n/// format. If the slice has fewer than 16 bytes, then this returns an error.\n/// The error message will include the `what` description of what is being\n/// deserialized, for better error messages. `what` should be a noun in\n/// singular form.\n///\n/// Upon success, this also returns the number of bytes read.\n746 pub(crate) fn try_read_u128(\n747     slice: &[u8],\n748     what: &'static str,\n749 ) -> Result<(u128, usize), DeserializeError> {\n750     check_slice_len(slice, size_of::<u128>(), what)?;\n751     Ok((read_u128(slice), size_of::<u128>()))\n752 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}