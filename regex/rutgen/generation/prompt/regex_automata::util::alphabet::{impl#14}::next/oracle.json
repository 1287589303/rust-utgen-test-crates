{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Debug)]\npub(crate) struct ByteSetRangeIter<'a> {\n    set: &'a ByteSet,\n    b: usize,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\nimpl<'a> Iterator for ByteSetRangeIter<'a> {\n    type Item = (u8, u8);\n    fn next(&mut self) -> Option<(u8, u8)> {\n        let asu8 = |n: usize| u8::try_from(n).unwrap();\n        while self.b <= 255 {\n            let start = asu8(self.b);\n            self.b += 1;\n            if !self.set.contains(start) {\n                continue;\n            }\n            let mut end = start;\n            while self.b <= 255 && self.set.contains(asu8(self.b)) {\n                end = asu8(self.b);\n                self.b += 1;\n            }\n            return Some((start, end));\n        }\n        None\n    }\n}\nimpl ByteSet {\n    pub(crate) fn empty() -> ByteSet {}\n    pub(crate) fn add(&mut self, byte: u8) {}\n    pub(crate) fn remove(&mut self, byte: u8) {}\n    pub(crate) fn contains(&self, byte: u8) -> bool {\n        let bucket = byte / 128;\n        let bit = byte % 128;\n        self.bits.0[usize::from(bucket)] & (1 << bit) > 0\n    }\n    pub(crate) fn contains_range(&self, start: u8, end: u8) -> bool {}\n    pub(crate) fn iter(&self) -> ByteSetIter {}\n    pub(crate) fn iter_ranges(&self) -> ByteSetRangeIter {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteSet, usize), DeserializeError> {}\n    pub(crate) fn write_to<E: crate::util::wire::Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n898 fn next(&mut self) -> Option<(u8, u8)> {\n899     let asu8 = |n: usize| u8::try_from(n).unwrap();\n900     while self.b <= 255 {\n901         let start = asu8(self.b);\n902         self.b += 1;\n903         if !self.set.contains(start) {\n904             continue;\n905         }\n906 \n907         let mut end = start;\n908         while self.b <= 255 && self.set.contains(asu8(self.b)) {\n909             end = asu8(self.b);\n910             self.b += 1;\n911         }\n912         return Some((start, end));\n913     }\n914     None\n915 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}