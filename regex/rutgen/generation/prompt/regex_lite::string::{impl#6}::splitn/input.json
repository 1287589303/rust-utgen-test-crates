{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Debug)]\npub struct SplitN<'r, 'h> {\n    splits: Split<'r, 'h>,\n    limit: usize,\n}\n#[derive(Debug)]\npub struct Split<'r, 'h> {\n    haystack: &'h str,\n    finder: Matches<'r, 'h>,\n    last: usize,\n}\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {\n        Split {\n            haystack,\n            finder: self.find_iter(haystack),\n            last: 0,\n        }\n    }\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {\n        SplitN {\n            splits: self.split(haystack),\n            limit,\n        }\n    }\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator of at most `limit` substrings of the haystack\n/// given, delimited by a match of the regex. (A `limit` of `0` will return\n/// no substrings.) Namely, each element of the iterator corresponds to a\n/// part of the haystack that *isn't* matched by the regular expression.\n/// The remainder of the haystack that is not split will be the last\n/// element in the iterator.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// Although note that the worst case time here has an upper bound given\n/// by the `limit` parameter.\n///\n/// # Example\n///\n/// Get the first two words in some haystack:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"\\W+\").unwrap();\n/// let hay = \"Hey! How are you?\";\n/// let fields: Vec<&str> = re.splitn(hay, 3).collect();\n/// assert_eq!(fields, vec![\"Hey\", \"How\", \"are you?\"]);\n/// ```\n///\n/// # Examples: more cases\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = \"Mary had a little lamb\";\n/// let got: Vec<&str> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![\"Mary\", \"had\", \"a little lamb\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"\";\n/// let got: Vec<&str> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![\"\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"lionXXtigerXleopard\";\n/// let got: Vec<&str> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![\"lion\", \"\", \"tigerXleopard\"]);\n///\n/// let re = Regex::new(r\"::\").unwrap();\n/// let hay = \"lion::tiger::leopard\";\n/// let got: Vec<&str> = re.splitn(hay, 2).collect();\n/// assert_eq!(got, vec![\"lion\", \"tiger::leopard\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"abcXdef\";\n/// let got: Vec<&str> = re.splitn(hay, 1).collect();\n/// assert_eq!(got, vec![\"abcXdef\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"abcdef\";\n/// let got: Vec<&str> = re.splitn(hay, 2).collect();\n/// assert_eq!(got, vec![\"abcdef\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"abcXdef\";\n/// let got: Vec<&str> = re.splitn(hay, 0).collect();\n/// assert!(got.is_empty());\n/// ```\n625 pub fn splitn<'r, 'h>(\n626     &'r self,\n627     haystack: &'h str,\n628     limit: usize,\n629 ) -> SplitN<'r, 'h> {\n630     SplitN { splits: self.split(haystack), limit }\n631 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}