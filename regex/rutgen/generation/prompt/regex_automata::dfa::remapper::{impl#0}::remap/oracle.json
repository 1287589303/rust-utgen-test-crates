{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/remapper.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::util::primitives::StateID;\n#[derive(Debug)]\npub(super) struct Remapper {\n    /// A map from the index of a state to its pre-multiplied identifier.\n    ///\n    /// When a state is swapped with another, then their corresponding\n    /// locations in this map are also swapped. Thus, its new position will\n    /// still point to its old pre-multiplied StateID.\n    ///\n    /// While there is a bit more to it, this then allows us to rewrite the\n    /// state IDs in a DFA's transition table in a single pass. This is done\n    /// by iterating over every ID in this map, then iterating over each\n    /// transition for the state at that ID and re-mapping the transition from\n    /// `old_id` to `map[dfa.to_index(old_id)]`. That is, we find the position\n    /// in this map where `old_id` *started*, and set it to where it ended up\n    /// after all swaps have been completed.\n    map: Vec<StateID>,\n    /// A mapper from state index to state ID (and back).\n    idxmap: IndexMapper,\n}\n#[derive(Debug)]\nstruct IndexMapper {\n    /// The power of 2 corresponding to the stride of the corresponding\n    /// transition table. 'id >> stride2' de-multiplies an ID while 'index <<\n    /// stride2' pre-multiplies an index to an ID.\n    stride2: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl Remapper {\n    pub(super) fn new(r: &impl Remappable) -> Remapper {}\n    pub(super) fn swap(&mut self, r: &mut impl Remappable, id1: StateID, id2: StateID) {}\n    pub(super) fn remap(mut self, r: &mut impl Remappable) {\n        let oldmap = self.map.clone();\n        for i in 0..r.state_len() {\n            let cur_id = self.idxmap.to_state_id(i);\n            let mut new_id = oldmap[i];\n            if cur_id == new_id {\n                continue;\n            }\n            loop {\n                let id = oldmap[self.idxmap.to_index(new_id)];\n                if cur_id == id {\n                    self.map[i] = new_id;\n                    break;\n                }\n                new_id = id;\n            }\n        }\n        r.remap(|next| self.map[self.idxmap.to_index(next)]);\n    }\n}\nimpl IndexMapper {\n    fn to_index(&self, id: StateID) -> usize {\n        id.as_usize() >> self.stride2\n    }\n    fn to_state_id(&self, index: usize) -> StateID {\n        StateID::new_unchecked(index << self.stride2)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Complete the remapping process by rewriting all state IDs in the\n/// remappable value according to the swaps performed.\n115 pub(super) fn remap(mut self, r: &mut impl Remappable) {\n116     // Update the map to account for states that have been swapped\n117     // multiple times. For example, if (A, C) and (C, G) are swapped, then\n118     // transitions previously pointing to A should now point to G. But if\n119     // we don't update our map, they will erroneously be set to C. All we\n120     // do is follow the swaps in our map until we see our original state\n121     // ID.\n122     //\n123     // The intuition here is to think about how changes are made to the\n124     // map: only through pairwise swaps. That means that starting at any\n125     // given state, it is always possible to find the loop back to that\n126     // state by following the swaps represented in the map (which might be\n127     // 0 swaps).\n128     //\n129     // We are also careful to clone the map before starting in order to\n130     // freeze it. We use the frozen map to find our loops, since we need to\n131     // update our map as well. Without freezing it, our updates could break\n132     // the loops referenced above and produce incorrect results.\n133     let oldmap = self.map.clone();\n134     for i in 0..r.state_len() {\n135         let cur_id = self.idxmap.to_state_id(i);\n136         let mut new_id = oldmap[i];\n137         if cur_id == new_id {\n138             continue;\n139         }\n140         loop {\n141             let id = oldmap[self.idxmap.to_index(new_id)];\n142             if cur_id == id {\n143                 self.map[i] = new_id;\n144                 break;\n145             }\n146             new_id = id;\n147         }\n148     }\n149     r.remap(|next| self.map[self.idxmap.to_index(next)]);\n150 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}