{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\nstruct BitSet([u128; 2]);\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl ByteSet {\n    pub(crate) fn empty() -> ByteSet {}\n    pub(crate) fn add(&mut self, byte: u8) {}\n    pub(crate) fn remove(&mut self, byte: u8) {}\n    pub(crate) fn contains(&self, byte: u8) -> bool {}\n    pub(crate) fn contains_range(&self, start: u8, end: u8) -> bool {}\n    pub(crate) fn iter(&self) -> ByteSetIter {}\n    pub(crate) fn iter_ranges(&self) -> ByteSetRangeIter {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteSet, usize), DeserializeError> {\n        use core::mem::size_of;\n        wire::check_slice_len(slice, 2 * size_of::<u128>(), \"byte set\")?;\n        let mut nread = 0;\n        let (low, nr) = wire::try_read_u128(slice, \"byte set low bucket\")?;\n        nread += nr;\n        let (high, nr) = wire::try_read_u128(slice, \"byte set high bucket\")?;\n        nread += nr;\n        Ok((\n            ByteSet {\n                bits: BitSet([low, high]),\n            },\n            nread,\n        ))\n    }\n    pub(crate) fn write_to<E: crate::util::wire::Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n}\npub(crate) fn try_read_u128(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(u128, usize), DeserializeError> {\n    check_slice_len(slice, size_of::<u128>(), what)?;\n    Ok((read_u128(slice), size_of::<u128>()))\n}\npub(crate) fn check_slice_len<T>(\n    slice: &[T],\n    at_least_len: usize,\n    what: &'static str,\n) -> Result<(), DeserializeError> {\n    if slice.len() < at_least_len {\n        return Err(DeserializeError::buffer_too_small(what));\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Deserializes a byte set from the given slice. If the slice is of\n/// incorrect length or is otherwise malformed, then an error is returned.\n/// Upon success, the number of bytes read along with the set are returned.\n/// The number of bytes read is always a multiple of 8.\n808 pub(crate) fn from_bytes(\n809     slice: &[u8],\n810 ) -> Result<(ByteSet, usize), DeserializeError> {\n811     use core::mem::size_of;\n812 \n813     wire::check_slice_len(slice, 2 * size_of::<u128>(), \"byte set\")?;\n814     let mut nread = 0;\n815     let (low, nr) = wire::try_read_u128(slice, \"byte set low bucket\")?;\n816     nread += nr;\n817     let (high, nr) = wire::try_read_u128(slice, \"byte set high bucket\")?;\n818     nread += nr;\n819     Ok((ByteSet { bits: BitSet([low, high]) }, nread))\n820 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}