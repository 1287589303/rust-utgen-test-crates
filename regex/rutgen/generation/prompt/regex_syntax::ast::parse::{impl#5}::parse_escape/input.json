{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassPerl {\n    /// The span of this class.\n    pub span: Span,\n    /// The kind of Perl class.\n    pub kind: ClassPerlKind,\n    /// Whether the class is negated or not. e.g., `\\d` is not negated but\n    /// `\\D` is.\n    pub negated: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Assertion {\n    /// The span of this assertion.\n    pub span: Span,\n    /// The assertion kind, e.g., `\\b` or `^`.\n    pub kind: AssertionKind,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Position {\n    /// The absolute offset of this position, starting at `0` from the\n    /// beginning of the regular expression pattern string.\n    pub offset: usize,\n    /// The line number, starting at `1`.\n    pub line: usize,\n    /// The approximate column number, starting at `1`.\n    pub column: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ErrorKind {\n    /// The capturing group limit was exceeded.\n    ///\n    /// Note that this represents a limit on the total number of capturing\n    /// groups in a regex and not necessarily the number of nested capturing\n    /// groups. That is, the nest limit can be low and it is still possible for\n    /// this error to occur.\n    CaptureLimitExceeded,\n    /// An invalid escape sequence was found in a character class set.\n    ClassEscapeInvalid,\n    /// An invalid character class range was found. An invalid range is any\n    /// range where the start is greater than the end.\n    ClassRangeInvalid,\n    /// An invalid range boundary was found in a character class. Range\n    /// boundaries must be a single literal codepoint, but this error indicates\n    /// that something else was found, such as a nested class.\n    ClassRangeLiteral,\n    /// An opening `[` was found with no corresponding closing `]`.\n    ClassUnclosed,\n    /// Note that this error variant is no longer used. Namely, a decimal\n    /// number can only appear as a repetition quantifier. When the number\n    /// in a repetition quantifier is empty, then it gets its own specialized\n    /// error, `RepetitionCountDecimalEmpty`.\n    DecimalEmpty,\n    /// An invalid decimal number was given where one was expected.\n    DecimalInvalid,\n    /// A bracketed hex literal was empty.\n    EscapeHexEmpty,\n    /// A bracketed hex literal did not correspond to a Unicode scalar value.\n    EscapeHexInvalid,\n    /// An invalid hexadecimal digit was found.\n    EscapeHexInvalidDigit,\n    /// EOF was found before an escape sequence was completed.\n    EscapeUnexpectedEof,\n    /// An unrecognized escape sequence.\n    EscapeUnrecognized,\n    /// A dangling negation was used when setting flags, e.g., `i-`.\n    FlagDanglingNegation,\n    /// A flag was used twice, e.g., `i-i`.\n    FlagDuplicate {\n        /// The position of the original flag. The error position\n        /// points to the duplicate flag.\n        original: Span,\n    },\n    /// The negation operator was used twice, e.g., `-i-s`.\n    FlagRepeatedNegation {\n        /// The position of the original negation operator. The error position\n        /// points to the duplicate negation operator.\n        original: Span,\n    },\n    /// Expected a flag but got EOF, e.g., `(?`.\n    FlagUnexpectedEof,\n    /// Unrecognized flag, e.g., `a`.\n    FlagUnrecognized,\n    /// A duplicate capture name was found.\n    GroupNameDuplicate {\n        /// The position of the initial occurrence of the capture name. The\n        /// error position itself points to the duplicate occurrence.\n        original: Span,\n    },\n    /// A capture group name is empty, e.g., `(?P<>abc)`.\n    GroupNameEmpty,\n    /// An invalid character was seen for a capture group name. This includes\n    /// errors where the first character is a digit (even though subsequent\n    /// characters are allowed to be digits).\n    GroupNameInvalid,\n    /// A closing `>` could not be found for a capture group name.\n    GroupNameUnexpectedEof,\n    /// An unclosed group, e.g., `(ab`.\n    ///\n    /// The span of this error corresponds to the unclosed parenthesis.\n    GroupUnclosed,\n    /// An unopened group, e.g., `ab)`.\n    GroupUnopened,\n    /// The nest limit was exceeded. The limit stored here is the limit\n    /// configured in the parser.\n    NestLimitExceeded(u32),\n    /// The range provided in a counted repetition operator is invalid. The\n    /// range is invalid if the start is greater than the end.\n    RepetitionCountInvalid,\n    /// An opening `{` was not followed by a valid decimal value.\n    /// For example, `x{}` or `x{]}` would fail.\n    RepetitionCountDecimalEmpty,\n    /// An opening `{` was found with no corresponding closing `}`.\n    RepetitionCountUnclosed,\n    /// A repetition operator was applied to a missing sub-expression. This\n    /// occurs, for example, in the regex consisting of just a `*` or even\n    /// `(?i)*`. It is, however, possible to create a repetition operating on\n    /// an empty sub-expression. For example, `()*` is still considered valid.\n    RepetitionMissing,\n    /// The special word boundary syntax, `\\b{something}`, was used, but\n    /// either EOF without `}` was seen, or an invalid character in the\n    /// braces was seen.\n    SpecialWordBoundaryUnclosed,\n    /// The special word boundary syntax, `\\b{something}`, was used, but\n    /// `something` was not recognized as a valid word boundary kind.\n    SpecialWordBoundaryUnrecognized,\n    /// The syntax `\\b{` was observed, but afterwards the end of the pattern\n    /// was observed without being able to tell whether it was meant to be a\n    /// bounded repetition on the `\\b` or the beginning of a special word\n    /// boundary assertion.\n    SpecialWordOrRepetitionUnexpectedEof,\n    /// The Unicode class is not valid. This typically occurs when a `\\p` is\n    /// followed by something other than a `{`.\n    UnicodeClassInvalid,\n    /// When octal support is disabled, this error is produced when an octal\n    /// escape is used. The octal escape is assumed to be an invocation of\n    /// a backreference, which is the common case.\n    UnsupportedBackreference,\n    /// When syntax similar to PCRE's look-around is used, this error is\n    /// returned. Some example syntaxes that are rejected include, but are\n    /// not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and\n    /// `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this\n    /// error is used to improve the user experience.\n    UnsupportedLookAround,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum SpecialLiteralKind {\n    /// Bell, spelled `\\a` (`\\x07`).\n    Bell,\n    /// Form feed, spelled `\\f` (`\\x0C`).\n    FormFeed,\n    /// Tab, spelled `\\t` (`\\x09`).\n    Tab,\n    /// Line feed, spelled `\\n` (`\\x0A`).\n    LineFeed,\n    /// Carriage return, spelled `\\r` (`\\x0D`).\n    CarriageReturn,\n    /// Vertical tab, spelled `\\v` (`\\x0B`).\n    VerticalTab,\n    /// Space, spelled `\\ ` (`\\x20`). Note that this can only appear when\n    /// parsing in verbose mode.\n    Space,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\nenum Primitive {\n    Literal(ast::Literal),\n    Assertion(ast::Assertion),\n    Dot(Span),\n    Perl(ast::ClassPerl),\n    Unicode(ast::ClassUnicode),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum AssertionKind {\n    /// `^`\n    StartLine,\n    /// `$`\n    EndLine,\n    /// `\\A`\n    StartText,\n    /// `\\z`\n    EndText,\n    /// `\\b`\n    WordBoundary,\n    /// `\\B`\n    NotWordBoundary,\n    /// `\\b{start}`\n    WordBoundaryStart,\n    /// `\\b{end}`\n    WordBoundaryEnd,\n    /// `\\<` (alias for `\\b{start}`)\n    WordBoundaryStartAngle,\n    /// `\\>` (alias for `\\b{end}`)\n    WordBoundaryEndAngle,\n    /// `\\b{start-half}`\n    WordBoundaryStartHalf,\n    /// `\\b{end-half}`\n    WordBoundaryEndHalf,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum LiteralKind {\n    /// The literal is written verbatim, e.g., `a` or `☃`.\n    Verbatim,\n    /// The literal is written as an escape because it is otherwise a special\n    /// regex meta character, e.g., `\\*` or `\\[`.\n    Meta,\n    /// The literal is written as an escape despite the fact that the escape is\n    /// unnecessary, e.g., `\\%` or `\\/`.\n    Superfluous,\n    /// The literal is written as an octal escape, e.g., `\\141`.\n    Octal,\n    /// The literal is written as a hex code with a fixed number of digits\n    /// depending on the type of the escape, e.g., `\\x61` or `\\u0061` or\n    /// `\\U00000061`.\n    HexFixed(HexLiteralKind),\n    /// The literal is written as a hex code with a bracketed number of\n    /// digits. The only restriction is that the bracketed hex code must refer\n    /// to a valid Unicode scalar value.\n    HexBrace(HexLiteralKind),\n    /// The literal is written as a specially recognized escape, e.g., `\\f`\n    /// or `\\n`.\n    Special(SpecialLiteralKind),\n}\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    fn parse(&self) -> Result<Ast> {}\n    fn parse_with_comments(&self) -> Result<ast::WithComments> {}\n    #[inline(never)]\n    fn parse_uncounted_repetition(\n        &self,\n        mut concat: ast::Concat,\n        kind: ast::RepetitionKind,\n    ) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn parse_counted_repetition(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn parse_group(&self) -> Result<Either<ast::SetFlags, ast::Group>> {}\n    #[inline(never)]\n    fn parse_capture_name(&self, capture_index: u32) -> Result<ast::CaptureName> {}\n    #[inline(never)]\n    fn parse_flags(&self) -> Result<ast::Flags> {}\n    #[inline(never)]\n    fn parse_flag(&self) -> Result<ast::Flag> {}\n    fn parse_primitive(&self) -> Result<Primitive> {}\n    #[inline(never)]\n    fn parse_escape(&self) -> Result<Primitive> {\n        assert_eq!(self.char(), '\\\\');\n        let start = self.pos();\n        if !self.bump() {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::EscapeUnexpectedEof,\n                    ),\n            );\n        }\n        let c = self.char();\n        match c {\n            '0'..='7' => {\n                if !self.parser().octal {\n                    return Err(\n                        self\n                            .error(\n                                Span::new(start, self.span_char().end),\n                                ast::ErrorKind::UnsupportedBackreference,\n                            ),\n                    );\n                }\n                let mut lit = self.parse_octal();\n                lit.span.start = start;\n                return Ok(Primitive::Literal(lit));\n            }\n            '8'..='9' if !self.parser().octal => {\n                return Err(\n                    self\n                        .error(\n                            Span::new(start, self.span_char().end),\n                            ast::ErrorKind::UnsupportedBackreference,\n                        ),\n                );\n            }\n            'x' | 'u' | 'U' => {\n                let mut lit = self.parse_hex()?;\n                lit.span.start = start;\n                return Ok(Primitive::Literal(lit));\n            }\n            'p' | 'P' => {\n                let mut cls = self.parse_unicode_class()?;\n                cls.span.start = start;\n                return Ok(Primitive::Unicode(cls));\n            }\n            'd' | 's' | 'w' | 'D' | 'S' | 'W' => {\n                let mut cls = self.parse_perl_class();\n                cls.span.start = start;\n                return Ok(Primitive::Perl(cls));\n            }\n            _ => {}\n        }\n        self.bump();\n        let span = Span::new(start, self.pos());\n        if is_meta_character(c) {\n            return Ok(\n                Primitive::Literal(ast::Literal {\n                    span,\n                    kind: ast::LiteralKind::Meta,\n                    c,\n                }),\n            );\n        }\n        if is_escapeable_character(c) {\n            return Ok(\n                Primitive::Literal(ast::Literal {\n                    span,\n                    kind: ast::LiteralKind::Superfluous,\n                    c,\n                }),\n            );\n        }\n        let special = |kind, c| {\n            Ok(\n                Primitive::Literal(ast::Literal {\n                    span,\n                    kind: ast::LiteralKind::Special(kind),\n                    c,\n                }),\n            )\n        };\n        match c {\n            'a' => special(ast::SpecialLiteralKind::Bell, '\\x07'),\n            'f' => special(ast::SpecialLiteralKind::FormFeed, '\\x0C'),\n            't' => special(ast::SpecialLiteralKind::Tab, '\\t'),\n            'n' => special(ast::SpecialLiteralKind::LineFeed, '\\n'),\n            'r' => special(ast::SpecialLiteralKind::CarriageReturn, '\\r'),\n            'v' => special(ast::SpecialLiteralKind::VerticalTab, '\\x0B'),\n            'A' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::StartText,\n                    }),\n                )\n            }\n            'z' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::EndText,\n                    }),\n                )\n            }\n            'b' => {\n                let mut wb = ast::Assertion {\n                    span,\n                    kind: ast::AssertionKind::WordBoundary,\n                };\n                if !self.is_eof() && self.char() == '{' {\n                    if let Some(kind) = self.maybe_parse_special_word_boundary(start)? {\n                        wb.kind = kind;\n                        wb.span.end = self.pos();\n                    }\n                }\n                Ok(Primitive::Assertion(wb))\n            }\n            'B' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::NotWordBoundary,\n                    }),\n                )\n            }\n            '<' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::WordBoundaryStartAngle,\n                    }),\n                )\n            }\n            '>' => {\n                Ok(\n                    Primitive::Assertion(ast::Assertion {\n                        span,\n                        kind: ast::AssertionKind::WordBoundaryEndAngle,\n                    }),\n                )\n            }\n            _ => Err(self.error(span, ast::ErrorKind::EscapeUnrecognized)),\n        }\n    }\n    fn maybe_parse_special_word_boundary(\n        &self,\n        wb_start: Position,\n    ) -> Result<Option<ast::AssertionKind>> {\n        assert_eq!(self.char(), '{');\n        let is_valid_char = |c| match c {\n            'A'..='Z' | 'a'..='z' | '-' => true,\n            _ => false,\n        };\n        let start = self.pos();\n        if !self.bump_and_bump_space() {\n            return Err(\n                self\n                    .error(\n                        Span::new(wb_start, self.pos()),\n                        ast::ErrorKind::SpecialWordOrRepetitionUnexpectedEof,\n                    ),\n            );\n        }\n        let start_contents = self.pos();\n        if !is_valid_char(self.char()) {\n            self.parser().pos.set(start);\n            return Ok(None);\n        }\n        let mut scratch = self.parser().scratch.borrow_mut();\n        scratch.clear();\n        while !self.is_eof() && is_valid_char(self.char()) {\n            scratch.push(self.char());\n            self.bump_and_bump_space();\n        }\n        if self.is_eof() || self.char() != '}' {\n            return Err(\n                self\n                    .error(\n                        Span::new(start, self.pos()),\n                        ast::ErrorKind::SpecialWordBoundaryUnclosed,\n                    ),\n            );\n        }\n        let end = self.pos();\n        self.bump();\n        let kind = match scratch.as_str() {\n            \"start\" => ast::AssertionKind::WordBoundaryStart,\n            \"end\" => ast::AssertionKind::WordBoundaryEnd,\n            \"start-half\" => ast::AssertionKind::WordBoundaryStartHalf,\n            \"end-half\" => ast::AssertionKind::WordBoundaryEndHalf,\n            _ => {\n                return Err(\n                    self\n                        .error(\n                            Span::new(start_contents, end),\n                            ast::ErrorKind::SpecialWordBoundaryUnrecognized,\n                        ),\n                );\n            }\n        };\n        Ok(Some(kind))\n    }\n    #[inline(never)]\n    fn parse_octal(&self) -> ast::Literal {\n        assert!(self.parser().octal);\n        assert!('0' <= self.char() && self.char() <= '7');\n        let start = self.pos();\n        while self.bump() && '0' <= self.char() && self.char() <= '7'\n            && self.pos().offset - start.offset <= 2\n        {}\n        let end = self.pos();\n        let octal = &self.pattern()[start.offset..end.offset];\n        let codepoint = u32::from_str_radix(octal, 8).expect(\"valid octal number\");\n        let c = char::from_u32(codepoint).expect(\"Unicode scalar value\");\n        ast::Literal {\n            span: Span::new(start, end),\n            kind: ast::LiteralKind::Octal,\n            c,\n        }\n    }\n    #[inline(never)]\n    fn parse_hex(&self) -> Result<ast::Literal> {\n        assert!(self.char() == 'x' || self.char() == 'u' || self.char() == 'U');\n        let hex_kind = match self.char() {\n            'x' => ast::HexLiteralKind::X,\n            'u' => ast::HexLiteralKind::UnicodeShort,\n            _ => ast::HexLiteralKind::UnicodeLong,\n        };\n        if !self.bump_and_bump_space() {\n            return Err(self.error(self.span(), ast::ErrorKind::EscapeUnexpectedEof));\n        }\n        if self.char() == '{' {\n            self.parse_hex_brace(hex_kind)\n        } else {\n            self.parse_hex_digits(hex_kind)\n        }\n    }\n    #[inline(never)]\n    fn parse_hex_digits(&self, kind: ast::HexLiteralKind) -> Result<ast::Literal> {}\n    #[inline(never)]\n    fn parse_hex_brace(&self, kind: ast::HexLiteralKind) -> Result<ast::Literal> {}\n    fn parse_decimal(&self) -> Result<u32> {}\n    #[inline(never)]\n    fn parse_set_class(&self) -> Result<ast::ClassBracketed> {}\n    #[inline(never)]\n    fn parse_set_class_range(&self) -> Result<ast::ClassSetItem> {}\n    #[inline(never)]\n    fn parse_set_class_item(&self) -> Result<Primitive> {}\n    #[inline(never)]\n    fn parse_set_class_open(&self) -> Result<(ast::ClassBracketed, ast::ClassSetUnion)> {}\n    #[inline(never)]\n    fn maybe_parse_ascii_class(&self) -> Option<ast::ClassAscii> {}\n    #[inline(never)]\n    fn parse_unicode_class(&self) -> Result<ast::ClassUnicode> {\n        assert!(self.char() == 'p' || self.char() == 'P');\n        let mut scratch = self.parser().scratch.borrow_mut();\n        scratch.clear();\n        let negated = self.char() == 'P';\n        if !self.bump_and_bump_space() {\n            return Err(self.error(self.span(), ast::ErrorKind::EscapeUnexpectedEof));\n        }\n        let (start, kind) = if self.char() == '{' {\n            let start = self.span_char().end;\n            while self.bump_and_bump_space() && self.char() != '}' {\n                scratch.push(self.char());\n            }\n            if self.is_eof() {\n                return Err(self.error(self.span(), ast::ErrorKind::EscapeUnexpectedEof));\n            }\n            assert_eq!(self.char(), '}');\n            self.bump();\n            let name = scratch.as_str();\n            if let Some(i) = name.find(\"!=\") {\n                (\n                    start,\n                    ast::ClassUnicodeKind::NamedValue {\n                        op: ast::ClassUnicodeOpKind::NotEqual,\n                        name: name[..i].to_string(),\n                        value: name[i + 2..].to_string(),\n                    },\n                )\n            } else if let Some(i) = name.find(':') {\n                (\n                    start,\n                    ast::ClassUnicodeKind::NamedValue {\n                        op: ast::ClassUnicodeOpKind::Colon,\n                        name: name[..i].to_string(),\n                        value: name[i + 1..].to_string(),\n                    },\n                )\n            } else if let Some(i) = name.find('=') {\n                (\n                    start,\n                    ast::ClassUnicodeKind::NamedValue {\n                        op: ast::ClassUnicodeOpKind::Equal,\n                        name: name[..i].to_string(),\n                        value: name[i + 1..].to_string(),\n                    },\n                )\n            } else {\n                (start, ast::ClassUnicodeKind::Named(name.to_string()))\n            }\n        } else {\n            let start = self.pos();\n            let c = self.char();\n            if c == '\\\\' {\n                return Err(\n                    self.error(self.span_char(), ast::ErrorKind::UnicodeClassInvalid),\n                );\n            }\n            self.bump_and_bump_space();\n            let kind = ast::ClassUnicodeKind::OneLetter(c);\n            (start, kind)\n        };\n        Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })\n    }\n    #[inline(never)]\n    fn parse_perl_class(&self) -> ast::ClassPerl {\n        let c = self.char();\n        let span = self.span_char();\n        self.bump();\n        let (negated, kind) = match c {\n            'd' => (false, ast::ClassPerlKind::Digit),\n            'D' => (true, ast::ClassPerlKind::Digit),\n            's' => (false, ast::ClassPerlKind::Space),\n            'S' => (true, ast::ClassPerlKind::Space),\n            'w' => (false, ast::ClassPerlKind::Word),\n            'W' => (true, ast::ClassPerlKind::Word),\n            c => panic!(\"expected valid Perl class but got '{}'\", c),\n        };\n        ast::ClassPerl {\n            span,\n            kind,\n            negated,\n        }\n    }\n}\nimpl Span {\n    pub fn new(start: Position, end: Position) -> Span {\n        Span { start, end }\n    }\n    pub fn splat(pos: Position) -> Span {}\n    pub fn with_start(self, pos: Position) -> Span {}\n    pub fn with_end(self, pos: Position) -> Span {}\n    pub fn is_one_line(&self) -> bool {}\n    pub fn is_empty(&self) -> bool {}\n}\npub fn is_escapeable_character(c: char) -> bool {\n    if is_meta_character(c) {\n        return true;\n    }\n    if !c.is_ascii() {\n        return false;\n    }\n    match c {\n        '0'..='9' | 'A'..='Z' | 'a'..='z' => false,\n        '<' | '>' => false,\n        _ => true,\n    }\n}\npub fn is_meta_character(c: char) -> bool {\n    match c {\n        '\\\\' | '.' | '+' | '*' | '?' | '(' | ')' | '|' | '[' | ']' | '{' | '}' | '^'\n        | '$' | '#' | '&' | '-' | '~' => true,\n        _ => false,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parse an escape sequence as a primitive AST.\n///\n/// This assumes the parser is positioned at the start of the escape\n/// sequence, i.e., `\\`. It advances the parser to the first position\n/// immediately following the escape sequence.\n1479 fn parse_escape(&self) -> Result<Primitive> {\n1480     assert_eq!(self.char(), '\\\\');\n1481     let start = self.pos();\n1482     if !self.bump() {\n1483         return Err(self.error(\n1484             Span::new(start, self.pos()),\n1485             ast::ErrorKind::EscapeUnexpectedEof,\n1486         ));\n1487     }\n1488     let c = self.char();\n1489     // Put some of the more complicated routines into helpers.\n1490     match c {\n1491         '0'..='7' => {\n1492             if !self.parser().octal {\n1493                 return Err(self.error(\n1494                     Span::new(start, self.span_char().end),\n1495                     ast::ErrorKind::UnsupportedBackreference,\n1496                 ));\n1497             }\n1498             let mut lit = self.parse_octal();\n1499             lit.span.start = start;\n1500             return Ok(Primitive::Literal(lit));\n1501         }\n1502         '8'..='9' if !self.parser().octal => {\n1503             return Err(self.error(\n1504                 Span::new(start, self.span_char().end),\n1505                 ast::ErrorKind::UnsupportedBackreference,\n1506             ));\n1507         }\n1508         'x' | 'u' | 'U' => {\n1509             let mut lit = self.parse_hex()?;\n1510             lit.span.start = start;\n1511             return Ok(Primitive::Literal(lit));\n1512         }\n1513         'p' | 'P' => {\n1514             let mut cls = self.parse_unicode_class()?;\n1515             cls.span.start = start;\n1516             return Ok(Primitive::Unicode(cls));\n1517         }\n1518         'd' | 's' | 'w' | 'D' | 'S' | 'W' => {\n1519             let mut cls = self.parse_perl_class();\n1520             cls.span.start = start;\n1521             return Ok(Primitive::Perl(cls));\n1522         }\n1523         _ => {}\n1524     }\n1525 \n1526     // Handle all of the one letter sequences inline.\n1527     self.bump();\n1528     let span = Span::new(start, self.pos());\n1529     if is_meta_character(c) {\n1530         return Ok(Primitive::Literal(ast::Literal {\n1531             span,\n1532             kind: ast::LiteralKind::Meta,\n1533             c,\n1534         }));\n1535     }\n1536     if is_escapeable_character(c) {\n1537         return Ok(Primitive::Literal(ast::Literal {\n1538             span,\n1539             kind: ast::LiteralKind::Superfluous,\n1540             c,\n1541         }));\n1542     }\n1543     let special = |kind, c| {\n1544         Ok(Primitive::Literal(ast::Literal {\n1545             span,\n1546             kind: ast::LiteralKind::Special(kind),\n1547             c,\n1548         }))\n1549     };\n1550     match c {\n1551         'a' => special(ast::SpecialLiteralKind::Bell, '\\x07'),\n1552         'f' => special(ast::SpecialLiteralKind::FormFeed, '\\x0C'),\n1553         't' => special(ast::SpecialLiteralKind::Tab, '\\t'),\n1554         'n' => special(ast::SpecialLiteralKind::LineFeed, '\\n'),\n1555         'r' => special(ast::SpecialLiteralKind::CarriageReturn, '\\r'),\n1556         'v' => special(ast::SpecialLiteralKind::VerticalTab, '\\x0B'),\n1557         'A' => Ok(Primitive::Assertion(ast::Assertion {\n1558             span,\n1559             kind: ast::AssertionKind::StartText,\n1560         })),\n1561         'z' => Ok(Primitive::Assertion(ast::Assertion {\n1562             span,\n1563             kind: ast::AssertionKind::EndText,\n1564         })),\n1565         'b' => {\n1566             let mut wb = ast::Assertion {\n1567                 span,\n1568                 kind: ast::AssertionKind::WordBoundary,\n1569             };\n1570             // After a \\b, we \"try\" to parse things like \\b{start} for\n1571             // special word boundary assertions.\n1572             if !self.is_eof() && self.char() == '{' {\n1573                 if let Some(kind) =\n1574                     self.maybe_parse_special_word_boundary(start)?\n1575                 {\n1576                     wb.kind = kind;\n1577                     wb.span.end = self.pos();\n1578                 }\n1579             }\n1580             Ok(Primitive::Assertion(wb))\n1581         }\n1582         'B' => Ok(Primitive::Assertion(ast::Assertion {\n1583             span,\n1584             kind: ast::AssertionKind::NotWordBoundary,\n1585         })),\n1586         '<' => Ok(Primitive::Assertion(ast::Assertion {\n1587             span,\n1588             kind: ast::AssertionKind::WordBoundaryStartAngle,\n1589         })),\n1590         '>' => Ok(Primitive::Assertion(ast::Assertion {\n1591             span,\n1592             kind: ast::AssertionKind::WordBoundaryEndAngle,\n1593         })),\n1594         _ => Err(self.error(span, ast::ErrorKind::EscapeUnrecognized)),\n1595     }\n1596 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}