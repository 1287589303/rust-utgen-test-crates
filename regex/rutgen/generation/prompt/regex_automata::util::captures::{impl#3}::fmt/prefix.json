{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\nstruct CapturesDebugMap<'a> {\n    pid: PatternID,\n    caps: &'a Captures,\n}\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Clone)]\npub struct Captures {\n    /// The group info that these capture groups are coupled to. This is what\n    /// gives the \"convenience\" of the `Captures` API. Namely, it provides the\n    /// slot mapping and the name|-->index mapping for capture lookups by name.\n    group_info: GroupInfo,\n    /// The ID of the pattern that matched. Regex engines must set this to\n    /// None when no match occurs.\n    pid: Option<PatternID>,\n    /// The slot values, i.e., submatch offsets.\n    ///\n    /// In theory, the smallest sequence of slots would be something like\n    /// `max(groups(pattern) for pattern in regex) * 2`, but instead, we use\n    /// `sum(groups(pattern) for pattern in regex) * 2`. Why?\n    ///\n    /// Well, the former could be used in theory, because we don't generally\n    /// have any overlapping APIs that involve capturing groups. Therefore,\n    /// there's technically never any need to have slots set for multiple\n    /// patterns. However, this might change some day, in which case, we would\n    /// need to have slots available.\n    ///\n    /// The other reason is that during the execution of some regex engines,\n    /// there exists a point in time where multiple slots for different\n    /// patterns may be written to before knowing which pattern has matched.\n    /// Therefore, the regex engines themselves, in order to support multiple\n    /// patterns correctly, must have all slots available. If `Captures`\n    /// doesn't have all slots available, then regex engines can't write\n    /// directly into the caller provided `Captures` and must instead write\n    /// into some other storage and then copy the slots involved in the match\n    /// at the end of the search.\n    ///\n    /// So overall, at least as of the time of writing, it seems like the path\n    /// of least resistance is to just require allocating all possible slots\n    /// instead of the conceptual minimum. Another way to justify this is that\n    /// the most common case is a single pattern, in which case, there is no\n    /// inefficiency here since the 'max' and 'sum' calculations above are\n    /// equivalent in that case.\n    ///\n    /// N.B. The mapping from group index to slot is maintained by `GroupInfo`\n    /// and is considered an API guarantee. See `GroupInfo` for more details on\n    /// that mapping.\n    ///\n    /// N.B. `Option<NonMaxUsize>` has the same size as a `usize`.\n    slots: Vec<Option<NonMaxUsize>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Debug)]\npub struct GroupInfoPatternNames<'a> {\n    it: core::slice::Iter<'a, Option<Arc<str>>>,\n}\nimpl<'a> core::fmt::Debug for CapturesDebugMap<'a> {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        struct Key<'a>(usize, Option<&'a str>);\n        impl<'a> core::fmt::Debug for Key<'a> {\n            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                write!(f, \"{}\", self.0)?;\n                if let Some(name) = self.1 {\n                    write!(f, \"/{:?}\", name)?;\n                }\n                Ok(())\n            }\n        }\n        let mut map = f.debug_map();\n        let names = self.caps.group_info().pattern_names(self.pid);\n        for (group_index, maybe_name) in names.enumerate() {\n            let key = Key(group_index, maybe_name);\n            match self.caps.get_group(group_index) {\n                None => map.entry(&key, &None::<()>),\n                Some(span) => map.entry(&key, &span),\n            };\n        }\n        map.finish()\n    }\n}\nimpl GroupInfo {\n    pub fn new<P, G, N>(pattern_groups: P) -> Result<GroupInfo, GroupInfoError>\n    where\n        P: IntoIterator<Item = G>,\n        G: IntoIterator<Item = Option<N>>,\n        N: AsRef<str>,\n    {}\n    pub fn empty() -> GroupInfo {}\n    #[inline]\n    pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {}\n    #[inline]\n    pub fn to_name(&self, pid: PatternID, group_index: usize) -> Option<&str> {}\n    #[inline]\n    pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {\n        GroupInfoPatternNames {\n            it: self\n                .0\n                .index_to_name\n                .get(pid.as_usize())\n                .map(|indices| indices.iter())\n                .unwrap_or([].iter()),\n        }\n    }\n    #[inline]\n    pub fn all_names(&self) -> GroupInfoAllNames<'_> {}\n    #[inline]\n    pub fn slots(&self, pid: PatternID, group_index: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn slot(&self, pid: PatternID, group_index: usize) -> Option<usize> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn group_len(&self, pid: PatternID) -> usize {}\n    #[inline]\n    pub fn all_group_len(&self) -> usize {}\n    #[inline]\n    pub fn slot_len(&self) -> usize {}\n    #[inline]\n    pub fn implicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn explicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl Captures {\n    pub fn all(group_info: GroupInfo) -> Captures {}\n    pub fn matches(group_info: GroupInfo) -> Captures {}\n    pub fn empty(group_info: GroupInfo) -> Captures {}\n    #[inline]\n    pub fn is_match(&self) -> bool {}\n    #[inline]\n    pub fn pattern(&self) -> Option<PatternID> {}\n    #[inline]\n    pub fn get_match(&self) -> Option<Match> {}\n    #[inline]\n    pub fn get_group(&self, index: usize) -> Option<Span> {\n        let pid = self.pattern()?;\n        let (slot_start, slot_end) = if self.group_info().pattern_len() == 1 {\n            (index.checked_mul(2)?, index.checked_mul(2)?.checked_add(1)?)\n        } else {\n            self.group_info().slots(pid, index)?\n        };\n        let start = self.slots.get(slot_start).copied()??;\n        let end = self.slots.get(slot_end).copied()??;\n        Some(Span {\n            start: start.get(),\n            end: end.get(),\n        })\n    }\n    pub fn get_group_by_name(&self, name: &str) -> Option<Span> {}\n    pub fn iter(&self) -> CapturesPatternIter<'_> {}\n    pub fn group_len(&self) -> usize {}\n    pub fn group_info(&self) -> &GroupInfo {\n        &self.group_info\n    }\n    pub fn interpolate_string(&self, haystack: &str, replacement: &str) -> String {}\n    pub fn interpolate_string_into(\n        &self,\n        haystack: &str,\n        replacement: &str,\n        dst: &mut String,\n    ) {}\n    pub fn interpolate_bytes(&self, haystack: &[u8], replacement: &[u8]) -> Vec<u8> {}\n    pub fn interpolate_bytes_into(\n        &self,\n        haystack: &[u8],\n        replacement: &[u8],\n        dst: &mut Vec<u8>,\n    ) {}\n    pub fn extract<'h, const N: usize>(\n        &self,\n        haystack: &'h str,\n    ) -> (&'h str, [&'h str; N]) {}\n    pub fn extract_bytes<'h, const N: usize>(\n        &self,\n        haystack: &'h [u8],\n    ) -> (&'h [u8], [&'h [u8]; N]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1223 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1224     struct Key<'a>(usize, Option<&'a str>);\n1225 \n1226     impl<'a> core::fmt::Debug for Key<'a> {\n1227         fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1228             write!(f, \"{}\", self.0)?;\n1229             if let Some(name) = self.1 {\n1230                 write!(f, \"/{:?}\", name)?;\n1231             }\n1232             Ok(())\n1233         }\n1234     }\n1235 \n1236     let mut map = f.debug_map();\n1237     let names = self.caps.group_info().pattern_names(self.pid);\n1238     for (group_index, maybe_name) in names.enumerate() {\n1239         let key = Key(group_index, maybe_name);\n1240         match self.caps.get_group(group_index) {\n1241             None => map.entry(&key, &None::<()>),\n1242             Some(span) => map.entry(&key, &span),\n1243         };\n1244     }\n1245     map.finish()\n1246 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}