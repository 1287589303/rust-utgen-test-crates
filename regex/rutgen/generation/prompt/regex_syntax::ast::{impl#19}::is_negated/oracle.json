{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/mod.rs\n// crate name is regex_syntax\nuse core::cmp::Ordering;\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\npub use crate::ast::visitor::{visit, Visitor};\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ClassUnicodeKind {\n    /// A one letter abbreviated class, e.g., `\\pN`.\n    OneLetter(char),\n    /// A binary property, general category or script. The string may be\n    /// empty.\n    Named(String),\n    /// A property name and an associated value.\n    NamedValue {\n        /// The type of Unicode op used to associate `name` with `value`.\n        op: ClassUnicodeOpKind,\n        /// The property name (which may be empty).\n        name: String,\n        /// The property value (which may be empty).\n        value: String,\n    },\n}\nimpl ClassUnicode {\n    pub fn is_negated(&self) -> bool {\n        match self.kind {\n            ClassUnicodeKind::NamedValue { op: ClassUnicodeOpKind::NotEqual, .. } => {\n                !self.negated\n            }\n            _ => self.negated,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if this class has been negated.\n///\n/// Note that this takes the Unicode op into account, if it's present.\n/// e.g., `is_negated` for `\\P{scx!=Katakana}` will return `false`.\n909 pub fn is_negated(&self) -> bool {\n910     match self.kind {\n911         ClassUnicodeKind::NamedValue {\n912             op: ClassUnicodeOpKind::NotEqual,\n913             ..\n914         } => !self.negated,\n915         _ => self.negated,\n916     }\n917 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}