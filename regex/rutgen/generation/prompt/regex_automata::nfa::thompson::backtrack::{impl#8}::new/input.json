{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/backtrack.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchError, Span},\n    },\n};\n#[derive(Clone, Debug)]\nstruct Visited {\n    /// The actual underlying bitset. Each element in the bitset corresponds\n    /// to a particular (StateID, offset) pair. States correspond to the rows\n    /// and the offsets correspond to the columns.\n    ///\n    /// If our underlying NFA has N states and the haystack we're searching\n    /// has M bytes, then we have N*(M+1) entries in our bitset table. The\n    /// M+1 occurs because our matches are delayed by one byte (to support\n    /// look-around), and so we need to handle the end position itself rather\n    /// than stopping just before the end. (If there is no end position, then\n    /// it's treated as \"end-of-input,\" which is matched by things like '$'.)\n    ///\n    /// Given BITS=N*(M+1), we wind up with div_ceil(BITS, sizeof(usize))\n    /// blocks.\n    ///\n    /// We use 'usize' to represent our blocks because it makes some of the\n    /// arithmetic in 'insert' a bit nicer. For example, if we used 'u32' for\n    /// our block, we'd either need to cast u32s to usizes or usizes to u32s.\n    bitset: Vec<usize>,\n    /// The stride represents one plus length of the haystack we're searching\n    /// (as described above). The stride must be initialized for each search.\n    stride: usize,\n}\n#[derive(Clone, Debug)]\npub struct BoundedBacktracker {\n    config: Config,\n    nfa: NFA,\n}\nimpl Visited {\n    const BLOCK_SIZE: usize = 8 * core::mem::size_of::<usize>();\n    fn new(re: &BoundedBacktracker) -> Visited {\n        let mut visited = Visited {\n            bitset: vec![],\n            stride: 0,\n        };\n        visited.reset(re);\n        visited\n    }\n    fn insert(&mut self, sid: StateID, at: usize) -> bool {}\n    fn reset(&mut self, _: &BoundedBacktracker) {\n        self.bitset.truncate(0);\n    }\n    fn setup_search(\n        &mut self,\n        re: &BoundedBacktracker,\n        input: &Input<'_>,\n    ) -> Result<(), MatchError> {}\n    fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new visited set for the given backtracker.\n///\n/// The set is ready to use, but must be setup at the beginning of each\n/// search by calling `setup_search`.\n1811 fn new(re: &BoundedBacktracker) -> Visited {\n1812     let mut visited = Visited { bitset: vec![], stride: 0 };\n1813     visited.reset(re);\n1814     visited\n1815 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}