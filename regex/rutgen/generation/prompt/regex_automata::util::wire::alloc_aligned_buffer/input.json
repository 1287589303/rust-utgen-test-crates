{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[cfg(feature = \"alloc\")]\npub(crate) fn alloc_aligned_buffer<T>(size: usize) -> (Vec<u8>, usize) {\n    let buf = vec![0; size];\n    let align = core::mem::align_of::<T>();\n    let address = buf.as_ptr().as_usize();\n    if address % align == 0 {\n        return (buf, 0);\n    }\n    let extra = align - 1;\n    let mut buf = vec![0; size + extra];\n    let address = buf.as_ptr().as_usize();\n    if address % align == 0 {\n        buf.truncate(size);\n        return (buf, 0);\n    }\n    let padding = ((address & !(align - 1)).checked_add(align).unwrap())\n        .checked_sub(address)\n        .unwrap();\n    assert!(padding <= 7, \"padding of {} is bigger than 7\", padding);\n    assert!(\n        padding <= extra, \"padding of {} is bigger than extra {} bytes\", padding, extra\n    );\n    buf.truncate(size + padding);\n    assert_eq!(size + padding, buf.len());\n    assert_eq!(\n        0, buf[padding..].as_ptr().as_usize() % align,\n        \"expected end of initial padding to be aligned to {}\", align,\n    );\n    (buf, padding)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Allocate a byte buffer of the given size, along with some initial padding\n/// such that `buf[padding..]` has the same alignment as `T`, where the\n/// alignment of `T` must be at most `8`. In particular, callers should treat\n/// the first N bytes (second return value) as padding bytes that must not be\n/// overwritten. In all cases, the following identity holds:\n///\n/// ```ignore\n/// let (buf, padding) = alloc_aligned_buffer::<StateID>(SIZE);\n/// assert_eq!(SIZE, buf[padding..].len());\n/// ```\n///\n/// In practice, padding is often zero.\n///\n/// The requirement for `8` as a maximum here is somewhat arbitrary. In\n/// practice, we never need anything bigger in this crate, and so this function\n/// does some sanity asserts under the assumption of a max alignment of `8`.\n365 pub(crate) fn alloc_aligned_buffer<T>(size: usize) -> (Vec<u8>, usize) {\n366     // NOTE: This is a kludge because there's no easy way to allocate a Vec<u8>\n367     // with an alignment guaranteed to be greater than 1. We could create a\n368     // Vec<u32>, but this cannot be safely transmuted to a Vec<u8> without\n369     // concern, since reallocing or dropping the Vec<u8> is UB (different\n370     // alignment than the initial allocation). We could define a wrapper type\n371     // to manage this for us, but it seems like more machinery than it's worth.\n372     let buf = vec![0; size];\n373     let align = core::mem::align_of::<T>();\n374     let address = buf.as_ptr().as_usize();\n375     if address % align == 0 {\n376         return (buf, 0);\n377     }\n378     // Let's try this again. We have to create a totally new alloc with\n379     // the maximum amount of bytes we might need. We can't just extend our\n380     // pre-existing 'buf' because that might create a new alloc with a\n381     // different alignment.\n382     let extra = align - 1;\n383     let mut buf = vec![0; size + extra];\n384     let address = buf.as_ptr().as_usize();\n385     // The code below handles the case where 'address' is aligned to T, so if\n386     // we got lucky and 'address' is now aligned to T (when it previously\n387     // wasn't), then we're done.\n388     if address % align == 0 {\n389         buf.truncate(size);\n390         return (buf, 0);\n391     }\n392     let padding = ((address & !(align - 1)).checked_add(align).unwrap())\n393         .checked_sub(address)\n394         .unwrap();\n395     assert!(padding <= 7, \"padding of {} is bigger than 7\", padding);\n396     assert!(\n397         padding <= extra,\n398         \"padding of {} is bigger than extra {} bytes\",\n399         padding,\n400         extra\n401     );\n402     buf.truncate(size + padding);\n403     assert_eq!(size + padding, buf.len());\n404     assert_eq!(\n405         0,\n406         buf[padding..].as_ptr().as_usize() % align,\n407         \"expected end of initial padding to be aligned to {}\",\n408         align,\n409     );\n410     (buf, padding)\n411 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}