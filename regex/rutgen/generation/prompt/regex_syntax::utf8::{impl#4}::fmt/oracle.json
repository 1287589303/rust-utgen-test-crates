{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Utf8Range {\n    /// Start of byte range (inclusive).\n    pub start: u8,\n    /// End of byte range (inclusive).\n    pub end: u8,\n}\nimpl fmt::Debug for Utf8Range {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        if self.start == self.end {\n            write!(f, \"[{:X}]\", self.start)\n        } else {\n            write!(f, \"[{:X}-{:X}]\", self.start, self.end)\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n237 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n238     if self.start == self.end {\n239         write!(f, \"[{:X}]\", self.start)\n240     } else {\n241         write!(f, \"[{:X}-{:X}]\", self.start, self.end)\n242     }\n243 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}