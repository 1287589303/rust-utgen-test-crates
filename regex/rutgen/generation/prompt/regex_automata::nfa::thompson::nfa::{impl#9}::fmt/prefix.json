{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/nfa.rs\n// crate name is regex_automata\nuse core::{fmt, mem};\nuse alloc::{boxed::Box, format, string::String, sync::Arc, vec, vec::Vec};\n#[cfg(feature = \"syntax\")]\nuse crate::nfa::thompson::{\n    compiler::{Compiler, Config},\n    error::BuildError,\n};\nuse crate::{\n    nfa::thompson::builder::Builder,\n    util::{\n        alphabet::{self, ByteClassSet, ByteClasses},\n        captures::{GroupInfo, GroupInfoError},\n        look::{Look, LookMatcher, LookSet},\n        primitives::{IteratorIndexExt, PatternID, PatternIDIter, SmallIndex, StateID},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\nimpl fmt::Debug for Transition {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        use crate::util::escape::DebugByte;\n        let Transition { start, end, next } = *self;\n        if self.start == self.end {\n            write!(f, \"{:?} => {:?}\", DebugByte(start), next.as_usize())\n        } else {\n            write!(\n                f, \"{:?}-{:?} => {:?}\", DebugByte(start), DebugByte(end), next\n                .as_usize(),\n            )\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1999 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n2000     use crate::util::escape::DebugByte;\n2001 \n2002     let Transition { start, end, next } = *self;\n2003     if self.start == self.end {\n2004         write!(f, \"{:?} => {:?}\", DebugByte(start), next.as_usize())\n2005     } else {\n2006         write!(\n2007             f,\n2008             \"{:?}-{:?} => {:?}\",\n2009             DebugByte(start),\n2010             DebugByte(end),\n2011             next.as_usize(),\n2012         )\n2013     }\n2014 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}