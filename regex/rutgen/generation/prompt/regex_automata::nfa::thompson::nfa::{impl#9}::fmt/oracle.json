{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/nfa.rs\n// crate name is regex_automata\nuse core::{fmt, mem};\nuse alloc::{boxed::Box, format, string::String, sync::Arc, vec, vec::Vec};\n#[cfg(feature = \"syntax\")]\nuse crate::nfa::thompson::{\n    compiler::{Compiler, Config},\n    error::BuildError,\n};\nuse crate::{\n    nfa::thompson::builder::Builder,\n    util::{\n        alphabet::{self, ByteClassSet, ByteClasses},\n        captures::{GroupInfo, GroupInfoError},\n        look::{Look, LookMatcher, LookSet},\n        primitives::{IteratorIndexExt, PatternID, PatternIDIter, SmallIndex, StateID},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\nimpl fmt::Debug for Transition {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        use crate::util::escape::DebugByte;\n        let Transition { start, end, next } = *self;\n        if self.start == self.end {\n            write!(f, \"{:?} => {:?}\", DebugByte(start), next.as_usize())\n        } else {\n            write!(\n                f, \"{:?}-{:?} => {:?}\", DebugByte(start), DebugByte(end), next\n                .as_usize(),\n            )\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1999 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n2000     use crate::util::escape::DebugByte;\n2001 \n2002     let Transition { start, end, next } = *self;\n2003     if self.start == self.end {\n2004         write!(f, \"{:?} => {:?}\", DebugByte(start), next.as_usize())\n2005     } else {\n2006         write!(\n2007             f,\n2008             \"{:?}-{:?} => {:?}\",\n2009             DebugByte(start),\n2010             DebugByte(end),\n2011             next.as_usize(),\n2012         )\n2013     }\n2014 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}