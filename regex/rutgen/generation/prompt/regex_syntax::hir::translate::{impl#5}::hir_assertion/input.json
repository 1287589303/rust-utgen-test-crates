{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self);\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Clone, Debug)]\nstruct TranslatorI<'t, 'p> {\n    trans: &'t Translator,\n    pattern: &'p str,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    crlf: Option<bool>,\n}\n#[derive(Clone, Debug)]\npub struct Translator {\n    /// Our call stack, but on the heap.\n    stack: RefCell<Vec<HirFrame>>,\n    /// The current flag settings.\n    flags: Cell<Flags>,\n    /// Whether we're allowed to produce HIR that can match arbitrary bytes.\n    utf8: bool,\n    /// The line terminator to use for `.`.\n    line_terminator: u8,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Assertion {\n    /// The span of this assertion.\n    pub span: Span,\n    /// The assertion kind, e.g., `\\b` or `^`.\n    pub kind: AssertionKind,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the translator's Ast was parsed from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error, derived from the Ast given to the translator.\n    span: Span,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\nimpl<'t, 'p> TranslatorI<'t, 'p> {\n    fn new(trans: &'t Translator, pattern: &'p str) -> TranslatorI<'t, 'p> {}\n    fn trans(&self) -> &Translator {}\n    fn push(&self, frame: HirFrame) {}\n    fn push_char(&self, ch: char) {}\n    fn push_byte(&self, byte: u8) {}\n    fn pop(&self) -> Option<HirFrame> {}\n    fn pop_concat_expr(&self) -> Option<Hir> {}\n    fn pop_alt_expr(&self) -> Option<Hir> {}\n    fn error(&self, span: Span, kind: ErrorKind) -> Error {}\n    fn flags(&self) -> Flags {\n        self.trans().flags.get()\n    }\n    fn set_flags(&self, ast_flags: &ast::Flags) -> Flags {}\n    fn ast_literal_to_scalar(&self, lit: &ast::Literal) -> Result<Either<char, u8>> {}\n    fn case_fold_char(&self, span: Span, c: char) -> Result<Option<Hir>> {}\n    fn hir_dot(&self, span: Span) -> Result<Hir> {}\n    fn hir_assertion(&self, asst: &ast::Assertion) -> Result<Hir> {\n        let unicode = self.flags().unicode();\n        let multi_line = self.flags().multi_line();\n        let crlf = self.flags().crlf();\n        Ok(\n            match asst.kind {\n                ast::AssertionKind::StartLine => {\n                    Hir::look(\n                        if multi_line {\n                            if crlf { hir::Look::StartCRLF } else { hir::Look::StartLF }\n                        } else {\n                            hir::Look::Start\n                        },\n                    )\n                }\n                ast::AssertionKind::EndLine => {\n                    Hir::look(\n                        if multi_line {\n                            if crlf { hir::Look::EndCRLF } else { hir::Look::EndLF }\n                        } else {\n                            hir::Look::End\n                        },\n                    )\n                }\n                ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n                ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n                ast::AssertionKind::WordBoundary => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordUnicode\n                        } else {\n                            hir::Look::WordAscii\n                        },\n                    )\n                }\n                ast::AssertionKind::NotWordBoundary => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordUnicodeNegate\n                        } else {\n                            hir::Look::WordAsciiNegate\n                        },\n                    )\n                }\n                ast::AssertionKind::WordBoundaryStart\n                | ast::AssertionKind::WordBoundaryStartAngle => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordStartUnicode\n                        } else {\n                            hir::Look::WordStartAscii\n                        },\n                    )\n                }\n                ast::AssertionKind::WordBoundaryEnd\n                | ast::AssertionKind::WordBoundaryEndAngle => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordEndUnicode\n                        } else {\n                            hir::Look::WordEndAscii\n                        },\n                    )\n                }\n                ast::AssertionKind::WordBoundaryStartHalf => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordStartHalfUnicode\n                        } else {\n                            hir::Look::WordStartHalfAscii\n                        },\n                    )\n                }\n                ast::AssertionKind::WordBoundaryEndHalf => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordEndHalfUnicode\n                        } else {\n                            hir::Look::WordEndHalfAscii\n                        },\n                    )\n                }\n            },\n        )\n    }\n    fn hir_capture(&self, group: &ast::Group, expr: Hir) -> Hir {}\n    fn hir_repetition(&self, rep: &ast::Repetition, expr: Hir) -> Hir {}\n    fn hir_unicode_class(\n        &self,\n        ast_class: &ast::ClassUnicode,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_ascii_unicode_class(\n        &self,\n        ast: &ast::ClassAscii,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_ascii_byte_class(&self, ast: &ast::ClassAscii) -> Result<hir::ClassBytes> {}\n    fn hir_perl_unicode_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_perl_byte_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassBytes> {}\n    fn convert_unicode_class_error(\n        &self,\n        span: &Span,\n        result: core::result::Result<hir::ClassUnicode, unicode::Error>,\n    ) -> Result<hir::ClassUnicode> {}\n    fn unicode_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassUnicode,\n    ) -> Result<()> {}\n    fn bytes_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassBytes,\n    ) -> Result<()> {}\n    fn class_literal_byte(&self, ast: &ast::Literal) -> Result<u8> {}\n}\nimpl Hir {\n    #[inline]\n    pub fn empty() -> Hir {}\n    #[inline]\n    pub fn fail() -> Hir {}\n    #[inline]\n    pub fn literal<B: Into<Box<[u8]>>>(lit: B) -> Hir {}\n    #[inline]\n    pub fn class(class: Class) -> Hir {}\n    #[inline]\n    pub fn look(look: Look) -> Hir {\n        let props = Properties::look(look);\n        Hir {\n            kind: HirKind::Look(look),\n            props,\n        }\n    }\n    #[inline]\n    pub fn repetition(mut rep: Repetition) -> Hir {}\n    #[inline]\n    pub fn capture(capture: Capture) -> Hir {}\n    pub fn concat(subs: Vec<Hir>) -> Hir {}\n    pub fn alternation(subs: Vec<Hir>) -> Hir {}\n    #[inline]\n    pub fn dot(dot: Dot) -> Hir {}\n}\nimpl Flags {\n    fn from_ast(ast: &ast::Flags) -> Flags {}\n    fn merge(&mut self, previous: &Flags) {}\n    fn case_insensitive(&self) -> bool {}\n    fn multi_line(&self) -> bool {\n        self.multi_line.unwrap_or(false)\n    }\n    fn dot_matches_new_line(&self) -> bool {}\n    fn swap_greed(&self) -> bool {}\n    fn unicode(&self) -> bool {\n        self.unicode.unwrap_or(true)\n    }\n    fn crlf(&self) -> bool {\n        self.crlf.unwrap_or(false)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n923 fn hir_assertion(&self, asst: &ast::Assertion) -> Result<Hir> {\n924     let unicode = self.flags().unicode();\n925     let multi_line = self.flags().multi_line();\n926     let crlf = self.flags().crlf();\n927     Ok(match asst.kind {\n928         ast::AssertionKind::StartLine => Hir::look(if multi_line {\n929             if crlf {\n930                 hir::Look::StartCRLF\n931             } else {\n932                 hir::Look::StartLF\n933             }\n934         } else {\n935             hir::Look::Start\n936         }),\n937         ast::AssertionKind::EndLine => Hir::look(if multi_line {\n938             if crlf {\n939                 hir::Look::EndCRLF\n940             } else {\n941                 hir::Look::EndLF\n942             }\n943         } else {\n944             hir::Look::End\n945         }),\n946         ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n947         ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n948         ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n949             hir::Look::WordUnicode\n950         } else {\n951             hir::Look::WordAscii\n952         }),\n953         ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n954             hir::Look::WordUnicodeNegate\n955         } else {\n956             hir::Look::WordAsciiNegate\n957         }),\n958         ast::AssertionKind::WordBoundaryStart\n959         | ast::AssertionKind::WordBoundaryStartAngle => {\n960             Hir::look(if unicode {\n961                 hir::Look::WordStartUnicode\n962             } else {\n963                 hir::Look::WordStartAscii\n964             })\n965         }\n966         ast::AssertionKind::WordBoundaryEnd\n967         | ast::AssertionKind::WordBoundaryEndAngle => {\n968             Hir::look(if unicode {\n969                 hir::Look::WordEndUnicode\n970             } else {\n971                 hir::Look::WordEndAscii\n972             })\n973         }\n974         ast::AssertionKind::WordBoundaryStartHalf => {\n975             Hir::look(if unicode {\n976                 hir::Look::WordStartHalfUnicode\n977             } else {\n978                 hir::Look::WordStartHalfAscii\n979             })\n980         }\n981         ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n982             hir::Look::WordEndHalfUnicode\n983         } else {\n984             hir::Look::WordEndHalfAscii\n985         }),\n986     })\n987 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}