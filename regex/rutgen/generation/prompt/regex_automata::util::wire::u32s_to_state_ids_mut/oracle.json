{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\npub(crate) fn u32s_to_state_ids_mut(slice: &mut [u32]) -> &mut [StateID] {\n    unsafe {\n        core::slice::from_raw_parts_mut(\n            slice.as_mut_ptr().cast::<StateID>(),\n            slice.len(),\n        )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Safely converts a `&mut [u32]` to `&mut [StateID]` with zero cost.\n285 pub(crate) fn u32s_to_state_ids_mut(slice: &mut [u32]) -> &mut [StateID] {\n286     // SAFETY: This is safe because StateID is defined to have the same memory\n287     // representation as a u32 (it is repr(transparent)). While not every u32\n288     // is a \"valid\" StateID, callers are not permitted to rely on the validity\n289     // of StateIDs for memory safety. It can only lead to logical errors. (This\n290     // is why StateID::new_unchecked is safe.)\n291     unsafe {\n292         core::slice::from_raw_parts_mut(\n293             slice.as_mut_ptr().cast::<StateID>(),\n294             slice.len(),\n295         )\n296     }\n297 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}