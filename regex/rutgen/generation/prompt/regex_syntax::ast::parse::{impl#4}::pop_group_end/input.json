{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Concat {\n    /// The span of this concatenation.\n    pub span: Span,\n    /// The concatenation regular expressions.\n    pub asts: Vec<Ast>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Group {\n    /// The span of this group.\n    pub span: Span,\n    /// The kind of this group.\n    pub kind: GroupKind,\n    /// The regular expression in this group.\n    pub ast: Box<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Alternation {\n    /// The span of this alternation.\n    pub span: Span,\n    /// The alternate regular expressions.\n    pub asts: Vec<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Position {\n    /// The absolute offset of this position, starting at `0` from the\n    /// beginning of the regular expression pattern string.\n    pub offset: usize,\n    /// The line number, starting at `1`.\n    pub line: usize,\n    /// The approximate column number, starting at `1`.\n    pub column: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Box<Span>),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(Box<SetFlags>),\n    /// A single character literal, which includes escape sequences.\n    Literal(Box<Literal>),\n    /// The \"any character\" class.\n    Dot(Box<Span>),\n    /// A single zero-width assertion.\n    Assertion(Box<Assertion>),\n    /// A single Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    ClassUnicode(Box<ClassUnicode>),\n    /// A single perl character class, e.g., `\\d` or `\\W`.\n    ClassPerl(Box<ClassPerl>),\n    /// A single bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    ClassBracketed(Box<ClassBracketed>),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Box<Repetition>),\n    /// A grouped regular expression.\n    Group(Box<Group>),\n    /// An alternation of regular expressions.\n    Alternation(Box<Alternation>),\n    /// A concatenation of regular expressions.\n    Concat(Box<Concat>),\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ErrorKind {\n    /// The capturing group limit was exceeded.\n    ///\n    /// Note that this represents a limit on the total number of capturing\n    /// groups in a regex and not necessarily the number of nested capturing\n    /// groups. That is, the nest limit can be low and it is still possible for\n    /// this error to occur.\n    CaptureLimitExceeded,\n    /// An invalid escape sequence was found in a character class set.\n    ClassEscapeInvalid,\n    /// An invalid character class range was found. An invalid range is any\n    /// range where the start is greater than the end.\n    ClassRangeInvalid,\n    /// An invalid range boundary was found in a character class. Range\n    /// boundaries must be a single literal codepoint, but this error indicates\n    /// that something else was found, such as a nested class.\n    ClassRangeLiteral,\n    /// An opening `[` was found with no corresponding closing `]`.\n    ClassUnclosed,\n    /// Note that this error variant is no longer used. Namely, a decimal\n    /// number can only appear as a repetition quantifier. When the number\n    /// in a repetition quantifier is empty, then it gets its own specialized\n    /// error, `RepetitionCountDecimalEmpty`.\n    DecimalEmpty,\n    /// An invalid decimal number was given where one was expected.\n    DecimalInvalid,\n    /// A bracketed hex literal was empty.\n    EscapeHexEmpty,\n    /// A bracketed hex literal did not correspond to a Unicode scalar value.\n    EscapeHexInvalid,\n    /// An invalid hexadecimal digit was found.\n    EscapeHexInvalidDigit,\n    /// EOF was found before an escape sequence was completed.\n    EscapeUnexpectedEof,\n    /// An unrecognized escape sequence.\n    EscapeUnrecognized,\n    /// A dangling negation was used when setting flags, e.g., `i-`.\n    FlagDanglingNegation,\n    /// A flag was used twice, e.g., `i-i`.\n    FlagDuplicate {\n        /// The position of the original flag. The error position\n        /// points to the duplicate flag.\n        original: Span,\n    },\n    /// The negation operator was used twice, e.g., `-i-s`.\n    FlagRepeatedNegation {\n        /// The position of the original negation operator. The error position\n        /// points to the duplicate negation operator.\n        original: Span,\n    },\n    /// Expected a flag but got EOF, e.g., `(?`.\n    FlagUnexpectedEof,\n    /// Unrecognized flag, e.g., `a`.\n    FlagUnrecognized,\n    /// A duplicate capture name was found.\n    GroupNameDuplicate {\n        /// The position of the initial occurrence of the capture name. The\n        /// error position itself points to the duplicate occurrence.\n        original: Span,\n    },\n    /// A capture group name is empty, e.g., `(?P<>abc)`.\n    GroupNameEmpty,\n    /// An invalid character was seen for a capture group name. This includes\n    /// errors where the first character is a digit (even though subsequent\n    /// characters are allowed to be digits).\n    GroupNameInvalid,\n    /// A closing `>` could not be found for a capture group name.\n    GroupNameUnexpectedEof,\n    /// An unclosed group, e.g., `(ab`.\n    ///\n    /// The span of this error corresponds to the unclosed parenthesis.\n    GroupUnclosed,\n    /// An unopened group, e.g., `ab)`.\n    GroupUnopened,\n    /// The nest limit was exceeded. The limit stored here is the limit\n    /// configured in the parser.\n    NestLimitExceeded(u32),\n    /// The range provided in a counted repetition operator is invalid. The\n    /// range is invalid if the start is greater than the end.\n    RepetitionCountInvalid,\n    /// An opening `{` was not followed by a valid decimal value.\n    /// For example, `x{}` or `x{]}` would fail.\n    RepetitionCountDecimalEmpty,\n    /// An opening `{` was found with no corresponding closing `}`.\n    RepetitionCountUnclosed,\n    /// A repetition operator was applied to a missing sub-expression. This\n    /// occurs, for example, in the regex consisting of just a `*` or even\n    /// `(?i)*`. It is, however, possible to create a repetition operating on\n    /// an empty sub-expression. For example, `()*` is still considered valid.\n    RepetitionMissing,\n    /// The special word boundary syntax, `\\b{something}`, was used, but\n    /// either EOF without `}` was seen, or an invalid character in the\n    /// braces was seen.\n    SpecialWordBoundaryUnclosed,\n    /// The special word boundary syntax, `\\b{something}`, was used, but\n    /// `something` was not recognized as a valid word boundary kind.\n    SpecialWordBoundaryUnrecognized,\n    /// The syntax `\\b{` was observed, but afterwards the end of the pattern\n    /// was observed without being able to tell whether it was meant to be a\n    /// bounded repetition on the `\\b` or the beginning of a special word\n    /// boundary assertion.\n    SpecialWordOrRepetitionUnexpectedEof,\n    /// The Unicode class is not valid. This typically occurs when a `\\p` is\n    /// followed by something other than a `{`.\n    UnicodeClassInvalid,\n    /// When octal support is disabled, this error is produced when an octal\n    /// escape is used. The octal escape is assumed to be an invocation of\n    /// a backreference, which is the common case.\n    UnsupportedBackreference,\n    /// When syntax similar to PCRE's look-around is used, this error is\n    /// returned. Some example syntaxes that are rejected include, but are\n    /// not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and\n    /// `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this\n    /// error is used to improve the user experience.\n    UnsupportedLookAround,\n}\n#[derive(Clone, Debug)]\nenum GroupState {\n    /// This state is pushed whenever an opening group is found.\n    Group {\n        /// The concatenation immediately preceding the opening group.\n        concat: ast::Concat,\n        /// The group that has been opened. Its sub-AST is always empty.\n        group: ast::Group,\n        /// Whether this group has the `x` flag enabled or not.\n        ignore_whitespace: bool,\n    },\n    /// This state is pushed whenever a new alternation branch is found. If\n    /// an alternation branch is found and this state is at the top of the\n    /// stack, then this state should be modified to include the new\n    /// alternation.\n    Alternation(ast::Alternation),\n}\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    fn new(parser: P, pattern: &'s str) -> ParserI<'s, P> {}\n    fn parser(&self) -> &Parser {\n        self.parser.borrow()\n    }\n    fn pattern(&self) -> &str {}\n    fn error(&self, span: Span, kind: ast::ErrorKind) -> ast::Error {\n        ast::Error {\n            kind,\n            pattern: self.pattern().to_string(),\n            span,\n        }\n    }\n    fn offset(&self) -> usize {}\n    fn line(&self) -> usize {}\n    fn column(&self) -> usize {}\n    fn next_capture_index(&self, span: Span) -> Result<u32> {}\n    fn add_capture_name(&self, cap: &ast::CaptureName) -> Result<()> {}\n    fn ignore_whitespace(&self) -> bool {}\n    fn char(&self) -> char {\n        self.char_at(self.offset())\n    }\n    fn char_at(&self, i: usize) -> char {}\n    fn bump(&self) -> bool {}\n    fn bump_if(&self, prefix: &str) -> bool {}\n    fn is_lookaround_prefix(&self) -> bool {}\n    fn bump_and_bump_space(&self) -> bool {}\n    fn bump_space(&self) {}\n    fn peek(&self) -> Option<char> {}\n    fn peek_space(&self) -> Option<char> {}\n    fn is_eof(&self) -> bool {}\n    fn pos(&self) -> Position {\n        self.parser().pos.get()\n    }\n    fn span(&self) -> Span {}\n    fn span_char(&self) -> Span {}\n    #[inline(never)]\n    fn push_alternate(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    fn push_or_add_alternation(&self, concat: ast::Concat) {}\n    #[inline(never)]\n    fn push_group(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn pop_group(&self, mut group_concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn pop_group_end(&self, mut concat: ast::Concat) -> Result<Ast> {\n        concat.span.end = self.pos();\n        let mut stack = self.parser().stack_group.borrow_mut();\n        let ast = match stack.pop() {\n            None => Ok(concat.into_ast()),\n            Some(GroupState::Alternation(mut alt)) => {\n                alt.span.end = self.pos();\n                alt.asts.push(concat.into_ast());\n                Ok(Ast::alternation(alt))\n            }\n            Some(GroupState::Group { group, .. }) => {\n                return Err(self.error(group.span, ast::ErrorKind::GroupUnclosed));\n            }\n        };\n        match stack.pop() {\n            None => ast,\n            Some(GroupState::Alternation(_)) => unreachable!(),\n            Some(GroupState::Group { group, .. }) => {\n                Err(self.error(group.span, ast::ErrorKind::GroupUnclosed))\n            }\n        }\n    }\n    #[inline(never)]\n    fn push_class_open(\n        &self,\n        parent_union: ast::ClassSetUnion,\n    ) -> Result<ast::ClassSetUnion> {}\n    #[inline(never)]\n    fn pop_class(\n        &self,\n        nested_union: ast::ClassSetUnion,\n    ) -> Result<Either<ast::ClassSetUnion, ast::ClassBracketed>> {}\n    #[inline(never)]\n    fn unclosed_class_error(&self) -> ast::Error {}\n    #[inline(never)]\n    fn push_class_op(\n        &self,\n        next_kind: ast::ClassSetBinaryOpKind,\n        next_union: ast::ClassSetUnion,\n    ) -> ast::ClassSetUnion {}\n    #[inline(never)]\n    fn pop_class_op(&self, rhs: ast::ClassSet) -> ast::ClassSet {}\n}\nimpl Concat {\n    pub fn into_ast(mut self) -> Ast {\n        match self.asts.len() {\n            0 => Ast::empty(self.span),\n            1 => self.asts.pop().unwrap(),\n            _ => Ast::concat(self),\n        }\n    }\n}\nimpl Ast {\n    pub fn empty(span: Span) -> Ast {}\n    pub fn flags(e: SetFlags) -> Ast {}\n    pub fn literal(e: Literal) -> Ast {}\n    pub fn dot(span: Span) -> Ast {}\n    pub fn assertion(e: Assertion) -> Ast {}\n    pub fn class_unicode(e: ClassUnicode) -> Ast {}\n    pub fn class_perl(e: ClassPerl) -> Ast {}\n    pub fn class_bracketed(e: ClassBracketed) -> Ast {}\n    pub fn repetition(e: Repetition) -> Ast {}\n    pub fn group(e: Group) -> Ast {}\n    pub fn alternation(e: Alternation) -> Ast {\n        Ast::Alternation(Box::new(e))\n    }\n    pub fn concat(e: Concat) -> Ast {}\n    pub fn span(&self) -> &Span {}\n    pub fn is_empty(&self) -> bool {}\n    fn has_subexprs(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Pop the last state from the parser's internal stack, if it exists, and\n/// add the given concatenation to it. There either must be no state or a\n/// single alternation item on the stack. Any other scenario produces an\n/// error.\n///\n/// This assumes that the parser has advanced to the end.\n796 fn pop_group_end(&self, mut concat: ast::Concat) -> Result<Ast> {\n797     concat.span.end = self.pos();\n798     let mut stack = self.parser().stack_group.borrow_mut();\n799     let ast = match stack.pop() {\n800         None => Ok(concat.into_ast()),\n801         Some(GroupState::Alternation(mut alt)) => {\n802             alt.span.end = self.pos();\n803             alt.asts.push(concat.into_ast());\n804             Ok(Ast::alternation(alt))\n805         }\n806         Some(GroupState::Group { group, .. }) => {\n807             return Err(\n808                 self.error(group.span, ast::ErrorKind::GroupUnclosed)\n809             );\n810         }\n811     };\n812     // If we try to pop again, there should be nothing.\n813     match stack.pop() {\n814         None => ast,\n815         Some(GroupState::Alternation(_)) => {\n816             // This unreachable is unfortunate. This case can't happen\n817             // because the only way we can be here is if there were two\n818             // `GroupState::Alternation`s adjacent in the parser's stack,\n819             // which we guarantee to never happen because we never push a\n820             // `GroupState::Alternation` if one is already at the top of\n821             // the stack.\n822             unreachable!()\n823         }\n824         Some(GroupState::Group { group, .. }) => {\n825             Err(self.error(group.span, ast::ErrorKind::GroupUnclosed))\n826         }\n827     }\n828 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}