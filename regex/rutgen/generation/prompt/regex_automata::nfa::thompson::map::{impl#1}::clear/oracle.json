{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/map.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::Transition,\n    util::{\n        int::{Usize, U64},\n        primitives::StateID,\n    },\n};\nconst PRIME: u64 = 1099511628211;\nconst INIT: u64 = 14695981039346656037;\n#[derive(Clone, Debug)]\npub struct Utf8SuffixMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8SuffixEntry>,\n}\n#[derive(Clone, Debug, Default)]\nstruct Utf8SuffixEntry {\n    /// The version of the map used to produce this entry. If this entry's\n    /// version does not match the current version of the map, then the map\n    /// should behave as if this entry does not exist.\n    version: u16,\n    /// The key, which consists of a transition in a particular state.\n    key: Utf8SuffixKey,\n    /// The identifier that the transition in the key maps to.\n    val: StateID,\n}\nimpl Utf8SuffixMap {\n    pub fn new(capacity: usize) -> Utf8SuffixMap {}\n    pub fn clear(&mut self) {\n        if self.map.is_empty() {\n            self.map = vec![Utf8SuffixEntry::default(); self.capacity];\n        } else {\n            self.version = self.version.wrapping_add(1);\n            if self.version == 0 {\n                self.map = vec![Utf8SuffixEntry::default(); self.capacity];\n            }\n        }\n    }\n    pub fn hash(&self, key: &Utf8SuffixKey) -> usize {}\n    pub fn get(&mut self, key: &Utf8SuffixKey, hash: usize) -> Option<StateID> {}\n    pub fn set(&mut self, key: Utf8SuffixKey, hash: usize, state_id: StateID) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Clear this map of all entries, but permit the reuse of allocation\n/// if possible.\n///\n/// This must be called before the map can be used.\n242 pub fn clear(&mut self) {\n243     if self.map.is_empty() {\n244         self.map = vec![Utf8SuffixEntry::default(); self.capacity];\n245     } else {\n246         self.version = self.version.wrapping_add(1);\n247         if self.version == 0 {\n248             self.map = vec![Utf8SuffixEntry::default(); self.capacity];\n249         }\n250     }\n251 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}