{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/utf8.rs\n// crate name is regex_lite\nconst ACCEPT: usize = 12;\nconst REJECT: usize = 0;\nfn decode_step(state: &mut usize, cp: &mut u32, b: u8) {\n    #[rustfmt::skip]\n    const CLASSES: [u8; 256] = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        9,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        7,\n        8,\n        8,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        10,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        3,\n        4,\n        3,\n        3,\n        11,\n        6,\n        6,\n        6,\n        5,\n        8,\n        8,\n        8,\n        8,\n        8,\n        8,\n        8,\n        8,\n        8,\n        8,\n        8,\n    ];\n    #[rustfmt::skip]\n    const STATES_FORWARD: &'static [u8] = &[\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        12,\n        0,\n        24,\n        36,\n        60,\n        96,\n        84,\n        0,\n        0,\n        0,\n        48,\n        72,\n        0,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        12,\n        0,\n        12,\n        0,\n        0,\n        0,\n        24,\n        0,\n        0,\n        0,\n        0,\n        0,\n        24,\n        0,\n        24,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        24,\n        0,\n        0,\n        0,\n        0,\n        0,\n        24,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        24,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        36,\n        0,\n        36,\n        0,\n        0,\n        0,\n        36,\n        0,\n        0,\n        0,\n        0,\n        0,\n        36,\n        0,\n        36,\n        0,\n        0,\n        0,\n        36,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    ];\n    let class = CLASSES[usize::from(b)];\n    if *state == ACCEPT {\n        *cp = (0xFF >> class) & (b as u32);\n    } else {\n        *cp = (b as u32 & 0b111111) | (*cp << 6);\n    }\n    *state = usize::from(STATES_FORWARD[*state + usize::from(class)]);\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Transitions to the next state and updates `cp` while it does.\n 86 fn decode_step(state: &mut usize, cp: &mut u32, b: u8) {\n 87     // Splits the space of all bytes into equivalence classes, such that\n 88     // any byte in the same class can never discriminate between whether a\n 89     // particular sequence is valid UTF-8 or not.\n 90     #[rustfmt::skip]\n 91     const CLASSES: [u8; 256] = [\n 92        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n 93        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n 94        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n 95        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n 96        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\n 97        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n 98        8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\n 99       10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3, 11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,\n100     ];\n101 \n102     // A state machine taken from `bstr` which was in turn adapted from:\n103     // https://bjoern.hoehrmann.de/utf-8/decoder/dfa/\n104     #[rustfmt::skip]\n105     const STATES_FORWARD: &'static [u8] = &[\n106       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n107       12, 0, 24, 36, 60, 96, 84, 0, 0, 0, 48, 72,\n108       0, 12, 0, 0, 0, 0, 0, 12, 0, 12, 0, 0,\n109       0, 24, 0, 0, 0, 0, 0, 24, 0, 24, 0, 0,\n110       0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0,\n111       0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0,\n112       0, 0, 0, 0, 0, 0, 0, 36, 0, 36, 0, 0,\n113       0, 36, 0, 0, 0, 0, 0, 36, 0, 36, 0, 0,\n114       0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n115     ];\n116 \n117     let class = CLASSES[usize::from(b)];\n118     if *state == ACCEPT {\n119         *cp = (0xFF >> class) & (b as u32);\n120     } else {\n121         *cp = (b as u32 & 0b111111) | (*cp << 6);\n122     }\n123     *state = usize::from(STATES_FORWARD[*state + usize::from(class)]);\n124 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}