{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/parse.rs\n// crate name is regex_lite\nuse core::cell::{Cell, RefCell};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{error::Error, hir::{self, Config, Flags, Hir, HirKind}};\nconst ERR_TOO_MUCH_NESTING: &str = \"pattern has too much nesting\";\nconst ERR_TOO_MANY_CAPTURES: &str = \"too many capture groups\";\nconst ERR_DUPLICATE_CAPTURE_NAME: &str = \"duplicate capture group name\";\nconst ERR_UNCLOSED_GROUP: &str = \"found open group without closing ')'\";\nconst ERR_UNCLOSED_GROUP_QUESTION: &str = \"expected closing ')', but got end of pattern\";\nconst ERR_UNOPENED_GROUP: &str = \"found closing ')' without matching '('\";\nconst ERR_LOOK_UNSUPPORTED: &str = \"look-around is not supported\";\nconst ERR_EMPTY_FLAGS: &str = \"empty flag directive '(?)' is not allowed\";\nconst ERR_MISSING_GROUP_NAME: &str = \"expected capture group name, but got end of pattern\";\nconst ERR_INVALID_GROUP_NAME: &str = \"invalid group name\";\nconst ERR_UNCLOSED_GROUP_NAME: &str = \"expected end of capture group name, but got end of pattern\";\nconst ERR_EMPTY_GROUP_NAME: &str = \"empty capture group names are not allowed\";\nconst ERR_FLAG_UNRECOGNIZED: &str = \"unrecognized inline flag\";\nconst ERR_FLAG_REPEATED_NEGATION: &str = \"inline flag negation cannot be repeated\";\nconst ERR_FLAG_DUPLICATE: &str = \"duplicate inline flag is not allowed\";\nconst ERR_FLAG_UNEXPECTED_EOF: &str = \"expected ':' or ')' to end inline flags, but got end of pattern\";\nconst ERR_FLAG_DANGLING_NEGATION: &str = \"inline flags cannot end with negation directive\";\nconst ERR_DECIMAL_NO_DIGITS: &str = \"expected decimal number, but found no digits\";\nconst ERR_DECIMAL_INVALID: &str = \"got invalid decimal number\";\nconst ERR_HEX_BRACE_INVALID_DIGIT: &str = \"expected hexadecimal number in braces, but got non-hex digit\";\nconst ERR_HEX_BRACE_UNEXPECTED_EOF: &str = \"expected hexadecimal number, but saw end of pattern before closing brace\";\nconst ERR_HEX_BRACE_EMPTY: &str = \"expected hexadecimal number in braces, but got no digits\";\nconst ERR_HEX_BRACE_INVALID: &str = \"got invalid hexadecimal number in braces\";\nconst ERR_HEX_FIXED_UNEXPECTED_EOF: &str = \"expected fixed length hexadecimal number, but saw end of pattern first\";\nconst ERR_HEX_FIXED_INVALID_DIGIT: &str = \"expected fixed length hexadecimal number, but got non-hex digit\";\nconst ERR_HEX_FIXED_INVALID: &str = \"got invalid fixed length hexadecimal number\";\nconst ERR_HEX_UNEXPECTED_EOF: &str = \"expected hexadecimal number, but saw end of pattern first\";\nconst ERR_ESCAPE_UNEXPECTED_EOF: &str = \"saw start of escape sequence, but saw end of pattern before it finished\";\nconst ERR_BACKREF_UNSUPPORTED: &str = \"backreferences are not supported\";\nconst ERR_UNICODE_CLASS_UNSUPPORTED: &str = \"Unicode character classes are not supported\";\nconst ERR_ESCAPE_UNRECOGNIZED: &str = \"unrecognized escape sequence\";\nconst ERR_POSIX_CLASS_UNRECOGNIZED: &str = \"unrecognized POSIX character class\";\nconst ERR_UNCOUNTED_REP_SUB_MISSING: &str = \"uncounted repetition operator must be applied to a sub-expression\";\nconst ERR_COUNTED_REP_SUB_MISSING: &str = \"counted repetition operator must be applied to a sub-expression\";\nconst ERR_COUNTED_REP_UNCLOSED: &str = \"found unclosed counted repetition operator\";\nconst ERR_COUNTED_REP_MIN_UNCLOSED: &str = \"found incomplete and unclosed counted repetition operator\";\nconst ERR_COUNTED_REP_COMMA_UNCLOSED: &str = \"found counted repetition operator with a comma that is unclosed\";\nconst ERR_COUNTED_REP_MIN_MAX_UNCLOSED: &str = \"found counted repetition with min and max that is unclosed\";\nconst ERR_COUNTED_REP_INVALID: &str = \"expected closing brace for counted repetition, but got something else\";\nconst ERR_COUNTED_REP_INVALID_RANGE: &str = \"found counted repetition with a min bigger than its max\";\nconst ERR_CLASS_UNCLOSED_AFTER_ITEM: &str = \"non-empty character class has no closing bracket\";\nconst ERR_CLASS_INVALID_RANGE_ITEM: &str = \"character class ranges must start and end with a single character\";\nconst ERR_CLASS_INVALID_ITEM: &str = \"invalid escape sequence in character class\";\nconst ERR_CLASS_UNCLOSED_AFTER_DASH: &str = \"non-empty character class has no closing bracket after dash\";\nconst ERR_CLASS_UNCLOSED_AFTER_NEGATION: &str = \"negated character class has no closing bracket\";\nconst ERR_CLASS_UNCLOSED_AFTER_CLOSING: &str = \"character class begins with literal ']' but has no closing bracket\";\nconst ERR_CLASS_INVALID_RANGE: &str = \"invalid range in character class\";\nconst ERR_CLASS_UNCLOSED: &str = \"found unclosed character class\";\nconst ERR_CLASS_NEST_UNSUPPORTED: &str = \"nested character classes are not supported\";\nconst ERR_CLASS_INTERSECTION_UNSUPPORTED: &str = \"character class intersection is not supported\";\nconst ERR_CLASS_DIFFERENCE_UNSUPPORTED: &str = \"character class difference is not supported\";\nconst ERR_CLASS_SYMDIFFERENCE_UNSUPPORTED: &str = \"character class symmetric difference is not supported\";\nconst ERR_SPECIAL_WORD_BOUNDARY_UNCLOSED: &str = \"special word boundary assertion is unclosed or has an invalid character\";\nconst ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED: &str = \"special word boundary assertion is unrecognized\";\nconst ERR_SPECIAL_WORD_OR_REP_UNEXPECTED_EOF: &str = \"found start of special word boundary or repetition without an end\";\n#[derive(Clone, Debug)]\npub(super) struct Parser<'a> {\n    /// The configuration of the parser as given by the caller.\n    config: Config,\n    /// The pattern we're parsing as given by the caller.\n    pattern: &'a str,\n    /// The call depth of the parser. This is incremented for each\n    /// sub-expression parsed. Its peak value is the maximum nesting of the\n    /// pattern.\n    depth: Cell<u32>,\n    /// The current position of the parser.\n    pos: Cell<usize>,\n    /// The current codepoint of the parser. The codepoint corresponds to the\n    /// codepoint encoded in `pattern` beginning at `pos`.\n    ///\n    /// This is `None` if and only if `pos == pattern.len()`.\n    char: Cell<Option<char>>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The flags that are currently set.\n    flags: RefCell<Flags>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<String>>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Class {\n    pub(crate) ranges: Vec<ClassRange>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]\npub(crate) struct ClassRange {\n    pub(crate) start: char,\n    pub(crate) end: char,\n}\n#[derive(Clone, Copy, Debug, Default)]\npub(crate) struct Flags {\n    /// Whether to match case insensitively.\n    ///\n    /// This is the `i` flag.\n    pub(crate) case_insensitive: bool,\n    /// Whether `^` and `$` should be treated as line anchors or not.\n    ///\n    /// This is the `m` flag.\n    pub(crate) multi_line: bool,\n    /// Whether `.` should match line terminators or not.\n    ///\n    /// This is the `s` flag.\n    pub(crate) dot_matches_new_line: bool,\n    /// Whether to swap the meaning of greedy and non-greedy operators.\n    ///\n    /// This is the `U` flag.\n    pub(crate) swap_greed: bool,\n    /// Whether to enable CRLF mode.\n    ///\n    /// This is the `R` flag.\n    pub(crate) crlf: bool,\n    /// Whether to ignore whitespace. i.e., verbose mode.\n    ///\n    /// This is the `x` flag.\n    pub(crate) ignore_whitespace: bool,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\nimpl<'a> Parser<'a> {\n    pub(super) fn parse(&self) -> Result<Hir, Error> {}\n    fn parse_inner(&self) -> Result<Hir, Error> {}\n    fn parse_primitive(&self) -> Result<Hir, Error> {}\n    fn parse_escape(&self) -> Result<Hir, Error> {}\n    fn maybe_parse_special_word_boundary(&self) -> Result<Option<Hir>, Error> {}\n    fn parse_hex(&self) -> Result<Hir, Error> {}\n    fn parse_hex_digits(&self, digit_len: usize) -> Result<Hir, Error> {}\n    fn parse_hex_brace(&self) -> Result<Hir, Error> {}\n    fn parse_decimal(&self) -> Result<u32, Error> {}\n    fn parse_uncounted_repetition(\n        &self,\n        mut concat: Vec<Hir>,\n    ) -> Result<Vec<Hir>, Error> {}\n    fn parse_counted_repetition(&self, mut concat: Vec<Hir>) -> Result<Vec<Hir>, Error> {}\n    fn parse_group(&self) -> Result<Option<Hir>, Error> {}\n    fn parse_capture_name(&self) -> Result<&str, Error> {}\n    fn parse_flags(&self) -> Result<Flags, Error> {}\n    fn parse_flag(&self, flags: &mut Flags, negate: bool) -> Result<(), Error> {}\n    fn parse_class(&self) -> Result<Hir, Error> {\n        assert_eq!(self.char(), '[');\n        let mut union = vec![];\n        if !self.bump_and_bump_space() {\n            return Err(Error::new(ERR_CLASS_UNCLOSED));\n        }\n        let negate = if self.char() != '^' {\n            false\n        } else {\n            if !self.bump_and_bump_space() {\n                return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_NEGATION));\n            }\n            true\n        };\n        while self.char() == '-' {\n            union\n                .push(hir::ClassRange {\n                    start: '-',\n                    end: '-',\n                });\n            if !self.bump_and_bump_space() {\n                return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_DASH));\n            }\n        }\n        if union.is_empty() && self.char() == ']' {\n            union\n                .push(hir::ClassRange {\n                    start: ']',\n                    end: ']',\n                });\n            if !self.bump_and_bump_space() {\n                return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_CLOSING));\n            }\n        }\n        loop {\n            self.bump_space();\n            if self.is_done() {\n                return Err(Error::new(ERR_CLASS_UNCLOSED));\n            }\n            match self.char() {\n                '[' => {\n                    if let Some(class) = self.maybe_parse_posix_class() {\n                        union.extend_from_slice(&class.ranges);\n                        continue;\n                    }\n                    return Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED));\n                }\n                ']' => {\n                    self.bump();\n                    let mut class = hir::Class::new(union);\n                    if self.flags().case_insensitive {\n                        class.ascii_case_fold();\n                    }\n                    if negate {\n                        class.negate();\n                    }\n                    return Ok(Hir::class(class));\n                }\n                '&' if self.peek() == Some('&') => {\n                    return Err(Error::new(ERR_CLASS_INTERSECTION_UNSUPPORTED));\n                }\n                '-' if self.peek() == Some('-') => {\n                    return Err(Error::new(ERR_CLASS_DIFFERENCE_UNSUPPORTED));\n                }\n                '~' if self.peek() == Some('~') => {\n                    return Err(Error::new(ERR_CLASS_SYMDIFFERENCE_UNSUPPORTED));\n                }\n                _ => self.parse_class_range(&mut union)?,\n            }\n        }\n    }\n    fn parse_class_range(&self, union: &mut Vec<hir::ClassRange>) -> Result<(), Error> {\n        let prim1 = self.parse_class_item()?;\n        self.bump_space();\n        if self.is_done() {\n            return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_ITEM));\n        }\n        if self.char() != '-' || self.peek_space() == Some(']')\n            || self.peek_space() == Some('-')\n        {\n            union.extend_from_slice(&into_class_item_ranges(prim1)?);\n            return Ok(());\n        }\n        if !self.bump_and_bump_space() {\n            return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_DASH));\n        }\n        let prim2 = self.parse_class_item()?;\n        let range = hir::ClassRange {\n            start: into_class_item_range(prim1)?,\n            end: into_class_item_range(prim2)?,\n        };\n        if range.start > range.end {\n            return Err(Error::new(ERR_CLASS_INVALID_RANGE));\n        }\n        union.push(range);\n        Ok(())\n    }\n    fn parse_class_item(&self) -> Result<Hir, Error> {}\n    fn maybe_parse_posix_class(&self) -> Option<hir::Class> {\n        assert_eq!(self.char(), '[');\n        let start_pos = self.pos();\n        let start_char = self.char.get();\n        let reset = || {\n            self.pos.set(start_pos);\n            self.char.set(start_char);\n        };\n        let mut negated = false;\n        if !self.bump() || self.char() != ':' {\n            reset();\n            return None;\n        }\n        if !self.bump() {\n            reset();\n            return None;\n        }\n        if self.char() == '^' {\n            negated = true;\n            if !self.bump() {\n                reset();\n                return None;\n            }\n        }\n        let name_start = self.pos();\n        while self.char() != ':' && self.bump() {}\n        if self.is_done() {\n            reset();\n            return None;\n        }\n        let name = &self.pattern()[name_start..self.pos()];\n        if !self.bump_if(\":]\") {\n            reset();\n            return None;\n        }\n        if let Ok(ranges) = posix_class(name) {\n            let mut class = hir::Class::new(ranges);\n            if negated {\n                class.negate();\n            }\n            return Some(class);\n        }\n        reset();\n        None\n    }\n    fn parse_perl_class(&self) -> Hir {}\n    fn hir_dot(&self) -> Hir {}\n    fn hir_anchor_start(&self) -> Hir {}\n    fn hir_anchor_end(&self) -> Hir {}\n    fn hir_char(&self, ch: char) -> Hir {}\n}\nimpl Class {\n    fn new<I: IntoIterator<Item = ClassRange>>(ranges: I) -> Class {}\n    fn ascii_case_fold(&mut self) {\n        let len = self.ranges.len();\n        for i in 0..len {\n            if let Some(folded) = self.ranges[i].ascii_case_fold() {\n                self.ranges.push(folded);\n            }\n        }\n        self.canonicalize();\n    }\n    fn negate(&mut self) {\n        const MIN: char = '\\x00';\n        const MAX: char = char::MAX;\n        if self.ranges.is_empty() {\n            self.ranges.push(ClassRange { start: MIN, end: MAX });\n            return;\n        }\n        let drain_end = self.ranges.len();\n        if self.ranges[0].start > MIN {\n            self.ranges\n                .push(ClassRange {\n                    start: MIN,\n                    end: prev_char(self.ranges[0].start).unwrap(),\n                });\n        }\n        for i in 1..drain_end {\n            self.ranges\n                .push(ClassRange {\n                    start: next_char(self.ranges[i - 1].end).unwrap(),\n                    end: prev_char(self.ranges[i].start).unwrap(),\n                });\n        }\n        if self.ranges[drain_end - 1].end < MAX {\n            self.ranges\n                .push(ClassRange {\n                    start: next_char(self.ranges[drain_end - 1].end).unwrap(),\n                    end: MAX,\n                });\n        }\n        self.ranges.drain(..drain_end);\n    }\n    fn canonicalize(&mut self) {}\n    fn is_canonical(&self) -> bool {}\n}\nimpl Hir {\n    pub(crate) fn parse(config: Config, pattern: &str) -> Result<Hir, Error> {}\n    pub(crate) fn kind(&self) -> &HirKind {}\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn is_match_empty(&self) -> bool {}\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {}\n    fn fail() -> Hir {}\n    fn empty() -> Hir {}\n    fn char(ch: char) -> Hir {}\n    fn class(class: Class) -> Hir {\n        let kind = HirKind::Class(class);\n        Hir {\n            kind,\n            is_start_anchored: false,\n            is_match_empty: false,\n            static_explicit_captures_len: Some(0),\n        }\n    }\n    fn look(look: Look) -> Hir {}\n    fn repetition(rep: Repetition) -> Hir {}\n    fn capture(cap: Capture) -> Hir {}\n    fn concat(mut subs: Vec<Hir>) -> Hir {}\n    fn alternation(mut subs: Vec<Hir>) -> Hir {}\n}\nimpl Error {\n    pub(crate) fn new(msg: &'static str) -> Error {\n        Error { msg }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parse a standard character class consisting primarily of characters or\n/// character ranges.\n///\n/// This assumes the parser is positioned at the opening `[`. If parsing\n/// is successful, then the parser is advanced to the position immediately\n/// following the closing `]`.\n 980 fn parse_class(&self) -> Result<Hir, Error> {\n 981     assert_eq!(self.char(), '[');\n 982 \n 983     let mut union = vec![];\n 984     if !self.bump_and_bump_space() {\n 985         return Err(Error::new(ERR_CLASS_UNCLOSED));\n 986     }\n 987     // Determine whether the class is negated or not.\n 988     let negate = if self.char() != '^' {\n 989         false\n 990     } else {\n 991         if !self.bump_and_bump_space() {\n 992             return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_NEGATION));\n 993         }\n 994         true\n 995     };\n 996     // Accept any number of `-` as literal `-`.\n 997     while self.char() == '-' {\n 998         union.push(hir::ClassRange { start: '-', end: '-' });\n 999         if !self.bump_and_bump_space() {\n1000             return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_DASH));\n1001         }\n1002     }\n1003     // If `]` is the *first* char in a set, then interpret it as a literal\n1004     // `]`. That is, an empty class is impossible to write.\n1005     if union.is_empty() && self.char() == ']' {\n1006         union.push(hir::ClassRange { start: ']', end: ']' });\n1007         if !self.bump_and_bump_space() {\n1008             return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_CLOSING));\n1009         }\n1010     }\n1011     loop {\n1012         self.bump_space();\n1013         if self.is_done() {\n1014             return Err(Error::new(ERR_CLASS_UNCLOSED));\n1015         }\n1016         match self.char() {\n1017             '[' => {\n1018                 // Attempt to treat this as the beginning of a POSIX class.\n1019                 // If POSIX class parsing fails, then the parser backs up\n1020                 // to `[`.\n1021                 if let Some(class) = self.maybe_parse_posix_class() {\n1022                     union.extend_from_slice(&class.ranges);\n1023                     continue;\n1024                 }\n1025                 // ... otherwise we don't support nested classes.\n1026                 return Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED));\n1027             }\n1028             ']' => {\n1029                 self.bump();\n1030                 let mut class = hir::Class::new(union);\n1031                 // Note that we must apply case folding before negation!\n1032                 // Consider `(?i)[^x]`. If we applied negation first, then\n1033                 // the result would be the character class that matched any\n1034                 // Unicode scalar value.\n1035                 if self.flags().case_insensitive {\n1036                     class.ascii_case_fold();\n1037                 }\n1038                 if negate {\n1039                     class.negate();\n1040                 }\n1041                 return Ok(Hir::class(class));\n1042             }\n1043             '&' if self.peek() == Some('&') => {\n1044                 return Err(Error::new(\n1045                     ERR_CLASS_INTERSECTION_UNSUPPORTED,\n1046                 ));\n1047             }\n1048             '-' if self.peek() == Some('-') => {\n1049                 return Err(Error::new(ERR_CLASS_DIFFERENCE_UNSUPPORTED));\n1050             }\n1051             '~' if self.peek() == Some('~') => {\n1052                 return Err(Error::new(\n1053                     ERR_CLASS_SYMDIFFERENCE_UNSUPPORTED,\n1054                 ));\n1055             }\n1056             _ => self.parse_class_range(&mut union)?,\n1057         }\n1058     }\n1059 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}