{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Debug, Default)]\nstruct GroupInfoInner {\n    slot_ranges: Vec<(SmallIndex, SmallIndex)>,\n    name_to_index: Vec<CaptureNameMap>,\n    index_to_name: Vec<Vec<Option<Arc<str>>>>,\n    memory_extra: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl GroupInfo {\n    pub fn new<P, G, N>(pattern_groups: P) -> Result<GroupInfo, GroupInfoError>\n    where\n        P: IntoIterator<Item = G>,\n        G: IntoIterator<Item = Option<N>>,\n        N: AsRef<str>,\n    {}\n    pub fn empty() -> GroupInfo {}\n    #[inline]\n    pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {}\n    #[inline]\n    pub fn to_name(&self, pid: PatternID, group_index: usize) -> Option<&str> {}\n    #[inline]\n    pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {}\n    #[inline]\n    pub fn all_names(&self) -> GroupInfoAllNames<'_> {}\n    #[inline]\n    pub fn slots(&self, pid: PatternID, group_index: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn slot(&self, pid: PatternID, group_index: usize) -> Option<usize> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn group_len(&self, pid: PatternID) -> usize {\n        self.0.group_len(pid)\n    }\n    #[inline]\n    pub fn all_group_len(&self) -> usize {}\n    #[inline]\n    pub fn slot_len(&self) -> usize {}\n    #[inline]\n    pub fn implicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn explicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl GroupInfoInner {\n    fn add_first_group(&mut self, pid: PatternID) {}\n    fn add_explicit_group<N: AsRef<str>>(\n        &mut self,\n        pid: PatternID,\n        group: SmallIndex,\n        maybe_name: Option<N>,\n    ) -> Result<(), GroupInfoError> {}\n    fn fixup_slot_ranges(&mut self) -> Result<(), GroupInfoError> {}\n    fn pattern_len(&self) -> usize {}\n    fn group_len(&self, pid: PatternID) -> usize {\n        let (start, end) = match self.slot_ranges.get(pid.as_usize()) {\n            None => return 0,\n            Some(range) => range,\n        };\n        1 + ((end.as_usize() - start.as_usize()) / 2)\n    }\n    fn small_slot_len(&self) -> SmallIndex {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the number of capture groups in a pattern.\n///\n/// If the pattern ID is invalid, then this returns `0`.\n///\n/// # Example\n///\n/// This example shows how the values returned by this routine may vary\n/// for different patterns and NFA configurations.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::{NFA, WhichCaptures}, PatternID};\n///\n/// let nfa = NFA::new(r\"(a)(b)(c)\")?;\n/// // There are 3 explicit groups in the pattern's concrete syntax and\n/// // 1 unnamed and implicit group spanning the entire pattern.\n/// assert_eq!(4, nfa.group_info().group_len(PatternID::ZERO));\n///\n/// let nfa = NFA::new(r\"abc\")?;\n/// // There is just the unnamed implicit group.\n/// assert_eq!(1, nfa.group_info().group_len(PatternID::ZERO));\n///\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().which_captures(WhichCaptures::None))\n///     .build(r\"abc\")?;\n/// // We disabled capturing groups, so there are none.\n/// assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));\n///\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().which_captures(WhichCaptures::None))\n///     .build(r\"(a)(b)(c)\")?;\n/// // We disabled capturing groups, so there are none, even if there are\n/// // explicit groups in the concrete syntax.\n/// assert_eq!(0, nfa.group_info().group_len(PatternID::ZERO));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1989 pub fn group_len(&self, pid: PatternID) -> usize {\n1990     self.0.group_len(pid)\n1991 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}