{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{\n    bytes::{Regex, RegexSet},\n    error::Error,\n};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {\n        self.builder.multi_line(yes);\n        self\n    }\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {\n        self.syntaxc = self.syntaxc.multi_line(yes);\n        self\n    }\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures multi-line mode for the entire pattern.\n///\n/// Enabling multi-line mode changes the behavior of the `^` and `$`\n/// anchor assertions. Instead of only matching at the beginning and\n/// end of a haystack, respectively, multi-line mode causes them to\n/// match at the beginning and end of a line *in addition* to the\n/// beginning and end of a haystack. More precisely, `^` will match at\n/// the position immediately following a `\\n` and `$` will match at the\n/// position immediately preceding a `\\n`.\n///\n/// The behavior of this option can be impacted by other settings too:\n///\n/// * The [`RegexBuilder::line_terminator`] option changes `\\n` above\n/// to any ASCII byte.\n/// * The [`RegexBuilder::crlf`] option changes the line terminator to\n/// be either `\\r` or `\\n`, but never at the position between a `\\r`\n/// and `\\n`.\n///\n/// This setting can also be configured using the inline flag `m` in\n/// the pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"^foo$\")\n///     .multi_line(true)\n///     .build()\n///     .unwrap();\n/// assert_eq!(Some(1..4), re.find(b\"\\nfoo\\n\").map(|m| m.range()));\n/// ```\n1531 pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {\n1532     self.builder.multi_line(yes);\n1533     self\n1534 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}