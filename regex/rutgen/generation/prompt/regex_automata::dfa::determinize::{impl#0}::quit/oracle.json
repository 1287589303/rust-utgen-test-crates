{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/determinize.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype StateMap = std::collections::HashMap<State, StateID>;\n#[cfg(not(feature = \"std\"))]\ntype StateMap = BTreeMap<State, StateID>;\nuse alloc::{collections::BTreeMap, vec::Vec};\nuse crate::{\n    dfa::{\n        dense::{self, BuildError},\n        DEAD,\n    },\n    nfa::thompson,\n    util::{\n        self, alphabet::{self, ByteSet},\n        determinize::{State, StateBuilderEmpty, StateBuilderNFA},\n        primitives::{PatternID, StateID},\n        search::{Anchored, MatchKind},\n        sparse_set::SparseSets, start::Start,\n    },\n};\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn run(\n        &self,\n        nfa: &thompson::NFA,\n        dfa: &mut dense::OwnedDFA,\n    ) -> Result<(), BuildError> {}\n    pub fn match_kind(&mut self, kind: MatchKind) -> &mut Config {}\n    pub fn quit(&mut self, set: ByteSet) -> &mut Config {\n        self.quit = set;\n        self\n    }\n    pub fn dfa_size_limit(&mut self, bytes: Option<usize>) -> &mut Config {}\n    pub fn determinize_size_limit(&mut self, bytes: Option<usize>) -> &mut Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// The set of bytes to use that will cause the DFA to enter a quit state,\n/// stop searching and return an error. By default, this is empty.\n96 pub fn quit(&mut self, set: ByteSet) -> &mut Config {\n97     self.quit = set;\n98     self\n99 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}