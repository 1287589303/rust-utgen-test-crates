{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]\npub(crate) struct ClassRange {\n    pub(crate) start: char,\n    pub(crate) end: char,\n}\nimpl ClassRange {\n    fn ascii_case_fold(&self) -> Option<ClassRange> {}\n    fn union(&self, other: &ClassRange) -> Option<ClassRange> {}\n    fn is_contiguous(&self, other: &ClassRange) -> bool {\n        let (s1, e1) = (u32::from(self.start), u32::from(self.end));\n        let (s2, e2) = (u32::from(other.start), u32::from(other.end));\n        core::cmp::max(s1, s2) <= core::cmp::min(e1, e2).saturating_add(1)\n    }\n    fn is_intersection_empty(&self, other: &ClassRange) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the two ranges are contiguous. Two ranges\n/// are contiguous if and only if the ranges are either overlapping or\n/// adjacent.\n563 fn is_contiguous(&self, other: &ClassRange) -> bool {\n564     let (s1, e1) = (u32::from(self.start), u32::from(self.end));\n565     let (s2, e2) = (u32::from(other.start), u32::from(other.end));\n566     core::cmp::max(s1, s2) <= core::cmp::min(e1, e2).saturating_add(1)\n567 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}