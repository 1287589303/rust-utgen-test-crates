{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{error::Error, Regex, RegexSet};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {\n        self.builder.unicode(yes);\n        self\n    }\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {\n        self.syntaxc = self.syntaxc.unicode(yes);\n        self\n    }\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures Unicode mode for the entire pattern.\n///\n/// Enabling Unicode mode does a number of things:\n///\n/// * Most fundamentally, it causes the fundamental atom of matching\n/// to be a single codepoint. When Unicode mode is disabled, it's a\n/// single byte. For example, when Unicode mode is enabled, `.` will\n/// match `ðŸ’©` once, where as it will match 4 times when Unicode mode\n/// is disabled. (Since the UTF-8 encoding of `ðŸ’©` is 4 bytes long.)\n/// * Case insensitive matching uses Unicode simple case folding rules.\n/// * Unicode character classes like `\\p{Letter}` and `\\p{Greek}` are\n/// available.\n/// * Perl character classes are Unicode aware. That is, `\\w`, `\\s` and\n/// `\\d`.\n/// * The word boundary assertions, `\\b` and `\\B`, use the Unicode\n/// definition of a word character.\n///\n/// Note that if Unicode mode is disabled, then the regex will fail to\n/// compile if it could match invalid UTF-8. For example, when Unicode\n/// mode is disabled, then since `.` matches any byte (except for\n/// `\\n`), then it can match invalid UTF-8 and thus building a regex\n/// from it will fail. Another example is `\\w` and `\\W`. Since `\\w` can\n/// only match ASCII bytes when Unicode mode is disabled, it's allowed.\n/// But `\\W` can match more than ASCII bytes, including invalid UTF-8,\n/// and so it is not allowed. This restriction can be lifted only by\n/// using a [`bytes::Regex`](crate::bytes::Regex).\n///\n/// For more details on the Unicode support in this crate, see the\n/// [Unicode section](crate#unicode) in this crate's top-level\n/// documentation.\n///\n/// The default for this is `true`.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"\\w\")\n///     .unicode(false)\n///     .build()\n///     .unwrap();\n/// // Normally greek letters would be included in \\w, but since\n/// // Unicode mode is disabled, it only matches ASCII letters.\n/// assert!(!re.is_match(\"Î´\"));\n///\n/// let re = RegexBuilder::new(r\"s\")\n///     .case_insensitive(true)\n///     .unicode(false)\n///     .build()\n///     .unwrap();\n/// // Normally 'Å¿' is included when searching for 's' case\n/// // insensitively due to Unicode's simple case folding rules. But\n/// // when Unicode mode is disabled, only ASCII case insensitive rules\n/// // are used.\n/// assert!(!re.is_match(\"Å¿\"));\n/// ```\n293 pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {\n294     self.builder.unicode(yes);\n295     self\n296 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}