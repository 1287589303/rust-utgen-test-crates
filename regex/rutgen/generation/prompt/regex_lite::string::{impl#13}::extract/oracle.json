{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Captures<'h> {\n    haystack: &'h str,\n    slots: CaptureLocations,\n    pikevm: Arc<PikeVM>,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone)]\npub(crate) struct NFA {\n    /// The pattern string this NFA was generated from.\n    ///\n    /// We put it here for lack of a better place to put it. ¯\\_(ツ)_/¯\n    pattern: String,\n    /// The states that make up this NFA.\n    states: Vec<State>,\n    /// The ID of the start state.\n    start: StateID,\n    /// Whether this NFA can only match at the beginning of a haystack.\n    is_start_anchored: bool,\n    /// Whether this NFA can match the empty string.\n    is_match_empty: bool,\n    /// If every match has the same number of matching capture groups, then\n    /// this corresponds to the number of groups.\n    static_explicit_captures_len: Option<usize>,\n    /// A map from capture group name to its corresponding index.\n    cap_name_to_index: CaptureNameMap,\n    /// A map from capture group index to the corresponding name, if one\n    /// exists.\n    cap_index_to_name: Vec<Option<Arc<str>>>,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Debug)]\npub struct CaptureLocations(Vec<Option<NonMaxUsize>>);\n#[derive(Clone, Debug)]\npub struct SubCaptureMatches<'c, 'h> {\n    caps: &'c Captures<'h>,\n    it: core::iter::Enumerate<nfa::CaptureNames<'c>>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {\n        let len = self\n            .pikevm\n            .nfa()\n            .static_explicit_captures_len()\n            .expect(\"number of capture groups can vary in a match\");\n        assert_eq!(N, len, \"asked for {} groups, but must ask for {}\", N, len);\n        let mut matched = self.iter().flatten();\n        let whole_match = matched.next().expect(\"a match\").as_str();\n        let group_matches = [0; N]\n            .map(|_| { matched.next().expect(\"too few matching groups\").as_str() });\n        (whole_match, group_matches)\n    }\n    #[inline]\n    pub fn expand(&self, replacement: &str, dst: &mut String) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {\n        SubCaptureMatches {\n            caps: self,\n            it: self.pikevm.nfa().capture_names().enumerate(),\n        }\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\nimpl<'h> Match<'h> {\n    #[inline]\n    fn new(haystack: &'h str, start: usize, end: usize) -> Match<'h> {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn range(&self) -> core::ops::Range<usize> {}\n    #[inline]\n    pub fn as_str(&self) -> &'h str {\n        &self.haystack[self.range()]\n    }\n}\nimpl PikeVM {\n    pub(crate) fn new(nfa: NFA) -> PikeVM {}\n    pub(crate) fn nfa(&self) -> &NFA {\n        &self.nfa\n    }\n    pub(crate) fn find_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> FindMatches<'r, 'h> {}\n    pub(crate) fn captures_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> CapturesMatches<'r, 'h> {}\n    pub(crate) fn search(\n        &self,\n        cache: &mut Cache,\n        haystack: &[u8],\n        start: usize,\n        end: usize,\n        earliest: bool,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {}\n    fn nexts(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr: &mut ActiveStates,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {}\n    fn next(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slot_table: &mut SlotTable,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        sid: StateID,\n    ) -> bool {}\n    fn epsilon_closure(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        sid: StateID,\n    ) {}\n    fn epsilon_closure_explore(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        mut sid: StateID,\n    ) {}\n}\nimpl NFA {\n    pub(crate) fn new(config: Config, pattern: String, hir: &Hir) -> Result<NFA, Error> {}\n    pub(crate) fn pattern(&self) -> &str {}\n    pub(crate) fn state(&self, id: StateID) -> &State {}\n    pub(crate) fn len(&self) -> usize {}\n    pub(crate) fn start(&self) -> StateID {}\n    pub(crate) fn to_index(&self, name: &str) -> Option<usize> {}\n    pub(crate) fn capture_names(&self) -> CaptureNames<'_> {}\n    pub(crate) fn group_len(&self) -> usize {}\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {\n        self.static_explicit_captures_len\n    }\n    fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This is a convenience routine for extracting the substrings\n/// corresponding to matching capture groups.\n///\n/// This returns a tuple where the first element corresponds to the full\n/// substring of the haystack that matched the regex. The second element is\n/// an array of substrings, with each corresponding to the substring that\n/// matched for a particular capture group.\n///\n/// # Panics\n///\n/// This panics if the number of possible matching groups in this\n/// `Captures` value is not fixed to `N` in all circumstances.\n/// More precisely, this routine only works when `N` is equivalent to\n/// [`Regex::static_captures_len`].\n///\n/// Stated more plainly, if the number of matching capture groups in a\n/// regex can vary from match to match, then this function always panics.\n///\n/// For example, `(a)(b)|(c)` could produce two matching capture groups\n/// or one matching capture group for any given match. Therefore, one\n/// cannot use `extract` with such a pattern.\n///\n/// But a pattern like `(a)(b)|(c)(d)` can be used with `extract` because\n/// the number of capture groups in every match is always equivalent,\n/// even if the capture _indices_ in each match are not.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\n/// let hay = \"On 2010-03-14, I became a Tenneessee lamb.\";\n/// let Some((full, [year, month, day])) =\n///     re.captures(hay).map(|caps| caps.extract()) else { return };\n/// assert_eq!(\"2010-03-14\", full);\n/// assert_eq!(\"2010\", year);\n/// assert_eq!(\"03\", month);\n/// assert_eq!(\"14\", day);\n/// ```\n///\n/// # Example: iteration\n///\n/// This example shows how to use this method when iterating over all\n/// `Captures` matches in a haystack.\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\n/// let hay = \"1973-01-05, 1975-08-25 and 1980-10-18\";\n///\n/// let mut dates: Vec<(&str, &str, &str)> = vec![];\n/// for (_, [y, m, d]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     dates.push((y, m, d));\n/// }\n/// assert_eq!(dates, vec![\n///     (\"1973\", \"01\", \"05\"),\n///     (\"1975\", \"08\", \"25\"),\n///     (\"1980\", \"10\", \"18\"),\n/// ]);\n/// ```\n///\n/// # Example: parsing different formats\n///\n/// This API is particularly useful when you need to extract a particular\n/// value that might occur in a different format. Consider, for example,\n/// an identifier that might be in double quotes or single quotes:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r#\"id:(?:\"([^\"]+)\"|'([^']+)')\"#).unwrap();\n/// let hay = r#\"The first is id:\"foo\" and the second is id:'bar'.\"#;\n/// let mut ids = vec![];\n/// for (_, [id]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     ids.push(id);\n/// }\n/// assert_eq!(ids, vec![\"foo\", \"bar\"]);\n/// ```\n1795 pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {\n1796     let len = self\n1797         .pikevm\n1798         .nfa()\n1799         .static_explicit_captures_len()\n1800         .expect(\"number of capture groups can vary in a match\");\n1801     assert_eq!(N, len, \"asked for {} groups, but must ask for {}\", N, len);\n1802     let mut matched = self.iter().flatten();\n1803     let whole_match = matched.next().expect(\"a match\").as_str();\n1804     let group_matches = [0; N].map(|_| {\n1805         matched.next().expect(\"too few matching groups\").as_str()\n1806     });\n1807     (whole_match, group_matches)\n1808 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}