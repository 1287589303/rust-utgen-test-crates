{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &[u8]) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h [u8]) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h [u8]) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(\n        &'r self,\n        haystack: &'h [u8],\n    ) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h [u8], limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h [u8], rep: R) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        rep: R,\n    ) -> Cow<'h, [u8]> {\n        self.replacen(haystack, 0, rep)\n    }\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, [u8]> {\n        if let Some(rep) = rep.no_expansion() {\n            let mut it = self.find_iter(haystack).enumerate().peekable();\n            if it.peek().is_none() {\n                return Cow::Borrowed(haystack);\n            }\n            let mut new = Vec::with_capacity(haystack.len());\n            let mut last_match = 0;\n            for (i, m) in it {\n                new.extend_from_slice(&haystack[last_match..m.start()]);\n                new.extend_from_slice(&rep);\n                last_match = m.end();\n                if limit > 0 && i >= limit - 1 {\n                    break;\n                }\n            }\n            new.extend_from_slice(&haystack[last_match..]);\n            return Cow::Owned(new);\n        }\n        let mut it = self.captures_iter(haystack).enumerate().peekable();\n        if it.peek().is_none() {\n            return Cow::Borrowed(haystack);\n        }\n        let mut new = Vec::with_capacity(haystack.len());\n        let mut last_match = 0;\n        for (i, cap) in it {\n            let m = cap.get(0).unwrap();\n            new.extend_from_slice(&haystack[last_match..m.start()]);\n            rep.replace_append(&cap, &mut new);\n            last_match = m.end();\n            if limit > 0 && i >= limit - 1 {\n                break;\n            }\n        }\n        new.extend_from_slice(&haystack[last_match..]);\n        Cow::Owned(new)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Replaces all non-overlapping matches in the haystack with the\n/// replacement provided. This is the same as calling `replacen` with\n/// `limit` set to `0`.\n///\n/// If no match is found, then the haystack is returned unchanged. In that\n/// case, this implementation will likely return a `Cow::Borrowed` value\n/// such that no allocation is performed.\n///\n/// When a `Cow::Borrowed` is returned, the value returned is guaranteed\n/// to be equivalent to the `haystack` given.\n///\n/// The documentation for [`Regex::replace`] goes into more detail about\n/// what kinds of replacement strings are supported.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// # Fallibility\n///\n/// If you need to write a replacement routine where any individual\n/// replacement might \"fail,\" doing so with this API isn't really feasible\n/// because there's no way to stop the search process if a replacement\n/// fails. Instead, if you need this functionality, you should consider\n/// implementing your own replacement routine:\n///\n/// ```\n/// use regex::bytes::{Captures, Regex};\n///\n/// fn replace_all<E>(\n///     re: &Regex,\n///     haystack: &[u8],\n///     replacement: impl Fn(&Captures) -> Result<Vec<u8>, E>,\n/// ) -> Result<Vec<u8>, E> {\n///     let mut new = Vec::with_capacity(haystack.len());\n///     let mut last_match = 0;\n///     for caps in re.captures_iter(haystack) {\n///         let m = caps.get(0).unwrap();\n///         new.extend_from_slice(&haystack[last_match..m.start()]);\n///         new.extend_from_slice(&replacement(&caps)?);\n///         last_match = m.end();\n///     }\n///     new.extend_from_slice(&haystack[last_match..]);\n///     Ok(new)\n/// }\n///\n/// // Let's replace each word with the number of bytes in that word.\n/// // But if we see a word that is \"too long,\" we'll give up.\n/// let re = Regex::new(r\"\\w+\").unwrap();\n/// let replacement = |caps: &Captures| -> Result<Vec<u8>, &'static str> {\n///     if caps[0].len() >= 5 {\n///         return Err(\"word too long\");\n///     }\n///     Ok(caps[0].len().to_string().into_bytes())\n/// };\n/// assert_eq!(\n///     Ok(b\"2 3 3 3?\".to_vec()),\n///     replace_all(&re, b\"hi how are you?\", &replacement),\n/// );\n/// assert!(replace_all(&re, b\"hi there\", &replacement).is_err());\n/// ```\n///\n/// # Example\n///\n/// This example shows how to flip the order of whitespace (excluding line\n/// terminators) delimited fields, and normalizes the whitespace that\n/// delimits the fields:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(?m)^(\\S+)[\\s--\\r\\n]+(\\S+)$\").unwrap();\n/// let hay = b\"\n/// Greetings  1973\n/// Wild\\t1973\n/// BornToRun\\t\\t\\t\\t1975\n/// Darkness                    1978\n/// TheRiver 1980\n/// \";\n/// let new = re.replace_all(hay, b\"$2 $1\");\n/// assert_eq!(new, &b\"\n/// 1973 Greetings\n/// 1973 Wild\n/// 1975 BornToRun\n/// 1978 Darkness\n/// 1980 TheRiver\n/// \"[..]);\n/// ```\n855 pub fn replace_all<'h, R: Replacer>(\n856     &self,\n857     haystack: &'h [u8],\n858     rep: R,\n859 ) -> Cow<'h, [u8]> {\n860     self.replacen(haystack, 0, rep)\n861 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}