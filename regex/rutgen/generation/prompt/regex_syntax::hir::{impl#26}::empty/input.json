{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where `i =\n    /// Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\nstruct PropertiesI {\n    minimum_len: Option<usize>,\n    maximum_len: Option<usize>,\n    look_set: LookSet,\n    look_set_prefix: LookSet,\n    look_set_suffix: LookSet,\n    look_set_prefix_any: LookSet,\n    look_set_suffix_any: LookSet,\n    utf8: bool,\n    explicit_captures_len: usize,\n    static_explicit_captures_len: Option<usize>,\n    literal: bool,\n    alternation_literal: bool,\n}\nimpl Properties {\n    fn empty() -> Properties {\n        let inner = PropertiesI {\n            minimum_len: Some(0),\n            maximum_len: Some(0),\n            look_set: LookSet::empty(),\n            look_set_prefix: LookSet::empty(),\n            look_set_suffix: LookSet::empty(),\n            look_set_prefix_any: LookSet::empty(),\n            look_set_suffix_any: LookSet::empty(),\n            utf8: true,\n            explicit_captures_len: 0,\n            static_explicit_captures_len: Some(0),\n            literal: false,\n            alternation_literal: false,\n        };\n        Properties(Box::new(inner))\n    }\n    fn literal(lit: &Literal) -> Properties {}\n    fn class(class: &Class) -> Properties {}\n    fn look(look: Look) -> Properties {}\n    fn repetition(rep: &Repetition) -> Properties {}\n    fn capture(capture: &Capture) -> Properties {}\n    fn concat(concat: &[Hir]) -> Properties {}\n    fn alternation(alts: &[Hir]) -> Properties {}\n}\nimpl LookSet {\n    #[inline]\n    pub fn empty() -> LookSet {\n        LookSet { bits: 0 }\n    }\n    #[inline]\n    pub fn full() -> LookSet {}\n    #[inline]\n    pub fn singleton(look: Look) -> LookSet {}\n    #[inline]\n    pub fn len(self) -> usize {}\n    #[inline]\n    pub fn is_empty(self) -> bool {}\n    #[inline]\n    pub fn contains(self, look: Look) -> bool {}\n    #[inline]\n    pub fn contains_anchor(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_haystack(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_line(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_lf(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_crlf(&self) -> bool {}\n    #[inline]\n    pub fn contains_word(self) -> bool {}\n    #[inline]\n    pub fn contains_word_unicode(self) -> bool {}\n    #[inline]\n    pub fn contains_word_ascii(self) -> bool {}\n    #[inline]\n    pub fn iter(self) -> LookSetIter {}\n    #[inline]\n    pub fn insert(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_insert(&mut self, look: Look) {}\n    #[inline]\n    pub fn remove(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_remove(&mut self, look: Look) {}\n    #[inline]\n    pub fn subtract(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_subtract(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn union(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_union(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn intersect(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_intersect(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn read_repr(slice: &[u8]) -> LookSet {}\n    #[inline]\n    pub fn write_repr(self, slice: &mut [u8]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new set of HIR properties for an empty regex.\n2397 fn empty() -> Properties {\n2398     let inner = PropertiesI {\n2399         minimum_len: Some(0),\n2400         maximum_len: Some(0),\n2401         look_set: LookSet::empty(),\n2402         look_set_prefix: LookSet::empty(),\n2403         look_set_suffix: LookSet::empty(),\n2404         look_set_prefix_any: LookSet::empty(),\n2405         look_set_suffix_any: LookSet::empty(),\n2406         // It is debatable whether an empty regex always matches at valid\n2407         // UTF-8 boundaries. Strictly speaking, at a byte oriented view,\n2408         // it is clearly false. There are, for example, many empty strings\n2409         // between the bytes encoding a 'â˜ƒ'.\n2410         //\n2411         // However, when Unicode mode is enabled, the fundamental atom\n2412         // of matching is really a codepoint. And in that scenario, an\n2413         // empty regex is defined to only match at valid UTF-8 boundaries\n2414         // and to never split a codepoint. It just so happens that this\n2415         // enforcement is somewhat tricky to do for regexes that match\n2416         // the empty string inside regex engines themselves. It usually\n2417         // requires some layer above the regex engine to filter out such\n2418         // matches.\n2419         //\n2420         // In any case, 'true' is really the only coherent option. If it\n2421         // were false, for example, then 'a*' would also need to be false\n2422         // since it too can match the empty string.\n2423         utf8: true,\n2424         explicit_captures_len: 0,\n2425         static_explicit_captures_len: Some(0),\n2426         literal: false,\n2427         alternation_literal: false,\n2428     };\n2429     Properties(Box::new(inner))\n2430 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}