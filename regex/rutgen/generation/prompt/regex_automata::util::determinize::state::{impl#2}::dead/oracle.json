{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\n#[derive(Clone, Eq, Hash, PartialEq, PartialOrd, Ord)]\npub(crate) struct State(Arc<[u8]>);\n#[derive(Clone, Debug)]\npub(crate) struct StateBuilderEmpty(Vec<u8>);\n#[derive(Clone)]\npub(crate) struct StateBuilderMatches(Vec<u8>);\n#[derive(Clone)]\npub(crate) struct StateBuilderNFA {\n    repr: Vec<u8>,\n    prev_nfa_state_id: StateID,\n}\nimpl State {\n    pub(crate) fn dead() -> State {\n        StateBuilderEmpty::new().into_matches().into_nfa().to_state()\n    }\n    pub(crate) fn is_match(&self) -> bool {}\n    pub(crate) fn is_from_word(&self) -> bool {}\n    pub(crate) fn is_half_crlf(&self) -> bool {}\n    pub(crate) fn look_have(&self) -> LookSet {}\n    pub(crate) fn look_need(&self) -> LookSet {}\n    pub(crate) fn match_len(&self) -> usize {}\n    pub(crate) fn match_pattern(&self, index: usize) -> PatternID {}\n    pub(crate) fn match_pattern_ids(&self) -> Option<Vec<PatternID>> {}\n    #[cfg(all(test, not(miri)))]\n    pub(crate) fn iter_match_pattern_ids<F: FnMut(PatternID)>(&self, f: F) {}\n    pub(crate) fn iter_nfa_state_ids<F: FnMut(StateID)>(&self, f: F) {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n    fn repr(&self) -> Repr<'_> {}\n}\nimpl StateBuilderEmpty {\n    pub(crate) fn new() -> StateBuilderEmpty {\n        StateBuilderEmpty(alloc::vec![])\n    }\n    pub(crate) fn into_matches(mut self) -> StateBuilderMatches {\n        self.0.extend_from_slice(&[0, 0, 0, 0, 0, 0, 0, 0, 0]);\n        StateBuilderMatches(self.0)\n    }\n    fn clear(&mut self) {}\n    pub(crate) fn capacity(&self) -> usize {}\n}\nimpl StateBuilderMatches {\n    pub(crate) fn into_nfa(mut self) -> StateBuilderNFA {\n        self.repr_vec().close_match_pattern_ids();\n        StateBuilderNFA {\n            repr: self.0,\n            prev_nfa_state_id: StateID::ZERO,\n        }\n    }\n    pub(crate) fn set_is_from_word(&mut self) {}\n    pub(crate) fn set_is_half_crlf(&mut self) {}\n    pub(crate) fn look_have(&self) -> LookSet {}\n    pub(crate) fn set_look_have(&mut self, set: impl FnMut(LookSet) -> LookSet) {}\n    pub(crate) fn add_match_pattern_id(&mut self, pid: PatternID) {}\n    fn repr(&self) -> Repr<'_> {}\n    fn repr_vec(&mut self) -> ReprVec<'_> {}\n}\nimpl StateBuilderNFA {\n    pub(crate) fn to_state(&self) -> State {\n        State(Arc::from(&*self.repr))\n    }\n    pub(crate) fn clear(self) -> StateBuilderEmpty {}\n    pub(crate) fn look_need(&self) -> LookSet {}\n    pub(crate) fn set_look_have(&mut self, set: impl FnMut(LookSet) -> LookSet) {}\n    pub(crate) fn set_look_need(&mut self, set: impl FnMut(LookSet) -> LookSet) {}\n    pub(crate) fn add_nfa_state_id(&mut self, sid: StateID) {}\n    pub(crate) fn as_bytes(&self) -> &[u8] {}\n    fn repr(&self) -> Repr<'_> {}\n    fn repr_vec(&mut self) -> ReprVec<'_> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n130 pub(crate) fn dead() -> State {\n131     StateBuilderEmpty::new().into_matches().into_nfa().to_state()\n132 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}