{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    #[inline]\n    pub fn as_str(&self) -> &str {}\n    #[inline]\n    pub fn capture_names(&self) -> CaptureNames<'_> {}\n    #[inline]\n    pub fn captures_len(&self) -> usize {\n        self.meta.group_info().group_len(PatternID::ZERO)\n    }\n    #[inline]\n    pub fn static_captures_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn capture_locations(&self) -> CaptureLocations {}\n    #[inline]\n    pub fn locations(&self) -> CaptureLocations {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the number of captures groups in this regex.\n///\n/// This includes all named and unnamed groups, including the implicit\n/// unnamed group that is always present and corresponds to the entire\n/// match.\n///\n/// Since the implicit unnamed group is always included in this length, the\n/// length returned is guaranteed to be greater than zero.\n///\n/// # Example\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"foo\").unwrap();\n/// assert_eq!(1, re.captures_len());\n///\n/// let re = Regex::new(r\"(foo)\").unwrap();\n/// assert_eq!(2, re.captures_len());\n///\n/// let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\n/// assert_eq!(5, re.captures_len());\n///\n/// let re = Regex::new(r\"[a&&b]\").unwrap();\n/// assert_eq!(1, re.captures_len());\n/// ```\n1356 pub fn captures_len(&self) -> usize {\n1357     self.meta.group_info().group_len(PatternID::ZERO)\n1358 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}