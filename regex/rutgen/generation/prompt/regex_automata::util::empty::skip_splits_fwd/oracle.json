{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/empty.rs\n// crate name is regex_automata\nuse crate::util::search::{Input, MatchError};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[cold]\n#[inline(never)]\npub(crate) fn skip_splits_fwd<T, F>(\n    input: &Input<'_>,\n    init_value: T,\n    match_offset: usize,\n    find: F,\n) -> Result<Option<T>, MatchError>\nwhere\n    F: FnMut(&Input<'_>) -> Result<Option<(T, usize)>, MatchError>,\n{\n    skip_splits(true, input, init_value, match_offset, find)\n}\nfn skip_splits<T, F>(\n    forward: bool,\n    input: &Input<'_>,\n    init_value: T,\n    mut match_offset: usize,\n    mut find: F,\n) -> Result<Option<T>, MatchError>\nwhere\n    F: FnMut(&Input<'_>) -> Result<Option<(T, usize)>, MatchError>,\n{\n    if input.get_anchored().is_anchored() {\n        return Ok(\n            if input.is_char_boundary(match_offset) { Some(init_value) } else { None },\n        );\n    }\n    let mut value = init_value;\n    let mut input = input.clone();\n    while !input.is_char_boundary(match_offset) {\n        if forward {\n            input.set_start(input.start().checked_add(1).unwrap());\n        } else {\n            input\n                .set_end(\n                    match input.end().checked_sub(1) {\n                        None => return Ok(None),\n                        Some(end) => end,\n                    },\n                );\n        }\n        match find(&input)? {\n            None => return Ok(None),\n            Some((new_value, new_match_end)) => {\n                value = new_value;\n                match_offset = new_match_end;\n            }\n        }\n    }\n    Ok(Some(value))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n161 pub(crate) fn skip_splits_fwd<T, F>(\n162     input: &Input<'_>,\n163     init_value: T,\n164     match_offset: usize,\n165     find: F,\n166 ) -> Result<Option<T>, MatchError>\n167 where\n168     F: FnMut(&Input<'_>) -> Result<Option<(T, usize)>, MatchError>,\n169 {\n170     skip_splits(true, input, init_value, match_offset, find)\n171 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}