{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/pikevm.rs\n// crate name is regex_lite\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    int::{NonMaxUsize, U32},\n    nfa::{State, StateID, NFA},\n    pool::CachePoolGuard, utf8,\n};\n#[derive(Clone, Debug)]\npub(crate) struct Cache {\n    /// Stack used while computing epsilon closure. This effectively lets us\n    /// move what is more naturally expressed through recursion to a stack\n    /// on the heap.\n    stack: Vec<FollowEpsilon>,\n    /// The current active states being explored for the current byte in the\n    /// haystack.\n    curr: ActiveStates,\n    /// The next set of states we're building that will be explored for the\n    /// next byte in the haystack.\n    next: ActiveStates,\n}\n#[derive(Clone, Debug)]\nstruct ActiveStates {\n    /// The set of active NFA states. This set preserves insertion order, which\n    /// is critical for simulating the match semantics of backtracking regex\n    /// engines.\n    set: SparseSet,\n    /// The slots for every NFA state, where each slot stores a (possibly\n    /// absent) offset. Every capturing group has two slots. One for a start\n    /// offset and one for an end offset.\n    slot_table: SlotTable,\n}\n#[derive(Clone, Debug)]\nenum FollowEpsilon {\n    /// Explore the epsilon transitions from a state ID.\n    Explore(StateID),\n    /// Reset the given `slot` to the given `offset` (which might be `None`).\n    RestoreCapture { slot: u32, offset: Option<NonMaxUsize> },\n}\nimpl Cache {\n    pub(crate) fn new(re: &PikeVM) -> Cache {}\n    fn setup_search(&mut self, captures_slot_len: usize) {\n        self.stack.clear();\n        self.curr.setup_search(captures_slot_len);\n        self.next.setup_search(captures_slot_len);\n    }\n}\nimpl ActiveStates {\n    fn new(re: &PikeVM) -> ActiveStates {}\n    fn reset(&mut self, re: &PikeVM) {}\n    fn setup_search(&mut self, captures_slot_len: usize) {\n        self.set.clear();\n        self.slot_table.setup_search(captures_slot_len);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Clears this cache. This should be called at the start of every search\n/// to ensure we start with a clean slate.\n///\n/// This also sets the length of the capturing groups used in the current\n/// search. This permits an optimization where by 'SlotTable::for_state'\n/// only returns the number of slots equivalent to the number of slots\n/// given in the 'Captures' value. This may be less than the total number\n/// of possible slots, e.g., when one only wants to track overall match\n/// offsets. This in turn permits less copying of capturing group spans\n/// in the PikeVM.\n581 fn setup_search(&mut self, captures_slot_len: usize) {\n582     self.stack.clear();\n583     self.curr.setup_search(captures_slot_len);\n584     self.next.setup_search(captures_slot_len);\n585 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}