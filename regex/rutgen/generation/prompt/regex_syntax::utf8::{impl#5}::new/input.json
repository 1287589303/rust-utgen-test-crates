{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\n#[derive(Debug)]\npub struct Utf8Sequences {\n    range_stack: Vec<ScalarRange>,\n}\nstruct ScalarRange {\n    start: u32,\n    end: u32,\n}\nimpl Utf8Sequences {\n    pub fn new(start: char, end: char) -> Self {\n        let range = ScalarRange {\n            start: u32::from(start),\n            end: u32::from(end),\n        };\n        Utf8Sequences {\n            range_stack: vec![range],\n        }\n    }\n    pub fn reset(&mut self, start: char, end: char) {}\n    fn push(&mut self, start: u32, end: u32) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new iterator over UTF-8 byte ranges for the scalar value range\n/// given.\n304 pub fn new(start: char, end: char) -> Self {\n305     let range =\n306         ScalarRange { start: u32::from(start), end: u32::from(end) };\n307     Utf8Sequences { range_stack: vec![range] }\n308 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}