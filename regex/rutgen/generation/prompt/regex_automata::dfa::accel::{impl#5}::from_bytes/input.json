{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accel {\n    /// The first byte is the length. Subsequent bytes are the accelerated\n    /// bytes.\n    ///\n    /// Note that we make every accelerator 8 bytes as a slightly wasteful\n    /// way of making sure alignment is always correct for state ID sizes of\n    /// 1, 2, 4 and 8. This should be okay since accelerated states aren't\n    /// particularly common, especially when Unicode is enabled.\n    bytes: [u8; ACCEL_CAP],\n}\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl Accel {\n    #[cfg(feature = \"dfa-build\")]\n    pub fn new() -> Accel {}\n    pub fn from_slice(mut slice: &[u8]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes(bytes: [u8; 4]) -> Result<Accel, DeserializeError> {\n        if usize::from(bytes[0]) >= ACCEL_LEN {\n            return Err(\n                DeserializeError::generic(\n                    \"accelerator bytes cannot have length more than 3\",\n                ),\n            );\n        }\n        Ok(Accel::from_bytes_unchecked(bytes))\n    }\n    fn from_bytes_unchecked(bytes: [u8; 4]) -> Accel {\n        Accel {\n            bytes: [bytes[0], bytes[1], bytes[2], bytes[3], 0, 0, 0, 0],\n        }\n    }\n    #[cfg(feature = \"dfa-build\")]\n    pub fn add(&mut self, byte: u8) -> bool {}\n    pub fn len(&self) -> usize {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn is_empty(&self) -> bool {}\n    fn needles(&self) -> &[u8] {}\n    #[cfg(feature = \"dfa-build\")]\n    fn contains(&self, byte: u8) -> bool {}\n    #[cfg(feature = \"dfa-build\")]\n    fn as_accel_tys(&self) -> [AccelTy; 2] {}\n}\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::Generic {\n            msg,\n        })\n    }\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a verified accelerator derived from raw bytes.\n///\n/// If the given bytes are invalid, then this returns an error.\n425 fn from_bytes(bytes: [u8; 4]) -> Result<Accel, DeserializeError> {\n426     if usize::from(bytes[0]) >= ACCEL_LEN {\n427         return Err(DeserializeError::generic(\n428             \"accelerator bytes cannot have length more than 3\",\n429         ));\n430     }\n431     Ok(Accel::from_bytes_unchecked(bytes))\n432 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}