{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/interpolate.rs\n// crate name is regex_lite\nuse alloc::string::String;\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nstruct CaptureRef<'a> {\n    cap: Ref<'a>,\n    end: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nenum Ref<'a> {\n    Named(&'a str),\n    Number(usize),\n}\nfn find_cap_ref_braced(rep: &[u8], mut i: usize) -> Option<CaptureRef<'_>> {\n    assert_eq!(b'{', rep[i.checked_sub(1).unwrap()]);\n    let start = i;\n    while rep.get(i).map_or(false, |&b| b != b'}') {\n        i += 1;\n    }\n    if !rep.get(i).map_or(false, |&b| b == b'}') {\n        return None;\n    }\n    let cap = match core::str::from_utf8(&rep[start..i]) {\n        Err(_) => return None,\n        Ok(cap) => cap,\n    };\n    Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: i + 1,\n    })\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Looks for a braced reference, e.g., `${foo1}`. This assumes that an opening\n/// brace has been found at `i-1` in `rep`. This then looks for a closing\n/// brace and returns the capture reference within the brace.\n248 fn find_cap_ref_braced(rep: &[u8], mut i: usize) -> Option<CaptureRef<'_>> {\n249     assert_eq!(b'{', rep[i.checked_sub(1).unwrap()]);\n250     let start = i;\n251     while rep.get(i).map_or(false, |&b| b != b'}') {\n252         i += 1;\n253     }\n254     if !rep.get(i).map_or(false, |&b| b == b'}') {\n255         return None;\n256     }\n257     // When looking at braced names, we don't put any restrictions on the name,\n258     // so it's possible it could be invalid UTF-8. But a capture group name\n259     // can never be invalid UTF-8, so if we have invalid UTF-8, then we can\n260     // safely return None.\n261     let cap = match core::str::from_utf8(&rep[start..i]) {\n262         Err(_) => return None,\n263         Ok(cap) => cap,\n264     };\n265     Some(CaptureRef {\n266         cap: match cap.parse::<usize>() {\n267             Ok(i) => Ref::Number(i),\n268             Err(_) => Ref::Named(cap),\n269         },\n270         end: i + 1,\n271     })\n272 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}