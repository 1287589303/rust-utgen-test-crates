{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\npub fn escape(pattern: &str) -> String {\n    let mut buf = String::new();\n    buf.reserve(pattern.len());\n    for ch in pattern.chars() {\n        if is_meta_character(ch) {\n            buf.push('\\\\');\n        }\n        buf.push(ch);\n    }\n    buf\n}\nfn is_meta_character(c: char) -> bool {\n    match c {\n        '\\\\' | '.' | '+' | '*' | '?' | '(' | ')' | '|' | '[' | ']' | '{' | '}' | '^'\n        | '$' | '#' | '&' | '-' | '~' => true,\n        _ => false,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Escapes all regular expression meta characters in `pattern`.\n///\n/// The string returned may be safely used as a literal in a regular\n/// expression.\n11 pub fn escape(pattern: &str) -> String {\n12     let mut buf = String::new();\n13     buf.reserve(pattern.len());\n14     for ch in pattern.chars() {\n15         if is_meta_character(ch) {\n16             buf.push('\\\\');\n17         }\n18         buf.push(ch);\n19     }\n20     buf\n21 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}