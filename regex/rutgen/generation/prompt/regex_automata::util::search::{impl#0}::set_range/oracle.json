{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {\n        use core::ops::Bound;\n        let start = match range.start_bound() {\n            Bound::Included(&i) => i,\n            Bound::Excluded(&i) => i.checked_add(1).unwrap(),\n            Bound::Unbounded => 0,\n        };\n        let end = match range.end_bound() {\n            Bound::Included(&i) => i.checked_add(1).unwrap(),\n            Bound::Excluded(&i) => i,\n            Bound::Unbounded => self.haystack().len(),\n        };\n        self.set_span(Span { start, end });\n    }\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {\n        self.haystack\n    }\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the span for this search configuration given any range.\n///\n/// This is like the [`Input::range`] method, except this mutates the\n/// span in place.\n///\n/// This routine does not panic if the range given is not a valid range for\n/// this search's haystack. If this search is run with an invalid range,\n/// then the most likely outcome is that the actual search execution will\n/// panic.\n///\n/// # Panics\n///\n/// This routine will panic if the given range could not be converted\n/// to a valid [`Range`]. For example, this would panic when given\n/// `0..=usize::MAX` since it cannot be represented using a half-open\n/// interval in terms of `usize`.\n///\n/// This also panics if the given span does not correspond to valid bounds\n/// in the haystack or the termination of a search.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::Input;\n///\n/// let mut input = Input::new(\"foobar\");\n/// assert_eq!(0..6, input.get_range());\n/// input.set_range(2..=4);\n/// assert_eq!(2..5, input.get_range());\n/// ```\n467 pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {\n468     use core::ops::Bound;\n469 \n470     // It's a little weird to convert ranges into spans, and then spans\n471     // back into ranges when we actually slice the haystack. Because\n472     // of that process, we always represent everything as a half-open\n473     // internal. Therefore, handling things like m..=n is a little awkward.\n474     let start = match range.start_bound() {\n475         Bound::Included(&i) => i,\n476         // Can this case ever happen? Range syntax doesn't support it...\n477         Bound::Excluded(&i) => i.checked_add(1).unwrap(),\n478         Bound::Unbounded => 0,\n479     };\n480     let end = match range.end_bound() {\n481         Bound::Included(&i) => i.checked_add(1).unwrap(),\n482         Bound::Excluded(&i) => i,\n483         Bound::Unbounded => self.haystack().len(),\n484     };\n485     self.set_span(Span { start, end });\n486 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}