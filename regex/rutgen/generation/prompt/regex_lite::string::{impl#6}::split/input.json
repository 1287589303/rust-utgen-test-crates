{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Debug)]\npub struct Split<'r, 'h> {\n    haystack: &'h str,\n    finder: Matches<'r, 'h>,\n    last: usize,\n}\n#[derive(Debug)]\npub struct Matches<'r, 'h> {\n    haystack: &'h str,\n    it: pikevm::FindMatches<'r, 'h>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {\n        Matches {\n            haystack,\n            it: self.pikevm.find_iter(self.pool.get(), haystack.as_bytes()),\n        }\n    }\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {\n        Split {\n            haystack,\n            finder: self.find_iter(haystack),\n            last: 0,\n        }\n    }\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator of substrings of the haystack given, delimited by a\n/// match of the regex. Namely, each element of the iterator corresponds to\n/// a part of the haystack that *isn't* matched by the regular expression.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// # Example\n///\n/// To split a string delimited by arbitrary amounts of spaces or tabs:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"[ \\t]+\").unwrap();\n/// let hay = \"a b \\t  c\\td    e\";\n/// let fields: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(fields, vec![\"a\", \"b\", \"c\", \"d\", \"e\"]);\n/// ```\n///\n/// # Example: more cases\n///\n/// Basic usage:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = \"Mary had a little lamb\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"lionXXtigerXleopard\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"lion\", \"\", \"tiger\", \"leopard\"]);\n///\n/// let re = Regex::new(r\"::\").unwrap();\n/// let hay = \"lion::tiger::leopard\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"lion\", \"tiger\", \"leopard\"]);\n/// ```\n///\n/// If a haystack contains multiple contiguous matches, you will end up\n/// with empty spans yielded by the iterator:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"XXXXaXXbXc\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n///\n/// let re = Regex::new(r\"/\").unwrap();\n/// let hay = \"(///)\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"(\", \"\", \"\", \")\"]);\n/// ```\n///\n/// Separators at the start or end of a haystack are neighbored by empty\n/// substring.\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"0\").unwrap();\n/// let hay = \"010\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"\", \"1\", \"\"]);\n/// ```\n///\n/// When the empty string is used as a regex, it splits at every valid\n/// UTF-8 boundary by default (which includes the beginning and end of the\n/// haystack):\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let hay = \"rust\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n///\n/// // Splitting by an empty string is UTF-8 aware by default!\n/// let re = Regex::new(r\"\").unwrap();\n/// let hay = \"☃\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"\", \"☃\", \"\"]);\n/// ```\n///\n/// Contiguous separators (commonly shows up with whitespace), can lead to\n/// possibly surprising behavior. For example, this code is correct:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = \"    a  b c\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// assert_eq!(got, vec![\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n/// ```\n///\n/// It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, you'd want\n/// to match contiguous space characters:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\" +\").unwrap();\n/// let hay = \"    a  b c\";\n/// let got: Vec<&str> = re.split(hay).collect();\n/// // N.B. This does still include a leading empty span because ' +'\n/// // matches at the beginning of the haystack.\n/// assert_eq!(got, vec![\"\", \"a\", \"b\", \"c\"]);\n/// ```\n550 pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {\n551     Split { haystack, finder: self.find_iter(haystack), last: 0 }\n552 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}