{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/primitives.rs\n// crate name is regex_automata\nuse core::num::NonZeroUsize;\n#[cfg(feature = \"alloc\")]\nuse alloc::vec::Vec;\nuse crate::util::int::{Usize, U16, U32, U64};\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn high_u16(self) -> u16;\n}\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct SmallIndex(u32);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct SmallIndexError {\n    attempted: u64,\n}\nimpl SmallIndex {\n    #[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n    pub const MAX: SmallIndex = SmallIndex::new_unchecked(core::i32::MAX as usize - 1);\n    #[cfg(target_pointer_width = \"16\")]\n    pub const MAX: SmallIndex = SmallIndex::new_unchecked(core::isize::MAX - 1);\n    pub const LIMIT: usize = SmallIndex::MAX.as_usize() + 1;\n    pub const ZERO: SmallIndex = SmallIndex::new_unchecked(0);\n    pub const SIZE: usize = core::mem::size_of::<SmallIndex>();\n    #[inline]\n    pub fn new(index: usize) -> Result<SmallIndex, SmallIndexError> {}\n    #[inline]\n    pub const fn new_unchecked(index: usize) -> SmallIndex {\n        SmallIndex(index as u32)\n    }\n    #[inline]\n    pub fn must(index: usize) -> SmallIndex {}\n    #[inline]\n    pub const fn as_usize(&self) -> usize {}\n    #[inline]\n    pub const fn as_u64(&self) -> u64 {}\n    #[inline]\n    pub const fn as_u32(&self) -> u32 {\n        self.0\n    }\n    #[inline]\n    pub const fn as_i32(&self) -> i32 {}\n    #[inline]\n    pub fn one_more(&self) -> usize {}\n    #[inline]\n    pub fn from_ne_bytes(bytes: [u8; 4]) -> Result<SmallIndex, SmallIndexError> {\n        let id = u32::from_ne_bytes(bytes);\n        if id > SmallIndex::MAX.as_u32() {\n            return Err(SmallIndexError {\n                attempted: u64::from(id),\n            });\n        }\n        Ok(SmallIndex::new_unchecked(id.as_usize()))\n    }\n    #[inline]\n    pub fn from_ne_bytes_unchecked(bytes: [u8; 4]) -> SmallIndex {}\n    #[inline]\n    pub fn to_ne_bytes(&self) -> [u8; 4] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode this small index from the bytes given using the native endian\n/// byte order for the current target.\n///\n/// If the decoded integer is not representable as a small index for the\n/// current target, then this returns an error.\n244 pub fn from_ne_bytes(\n245     bytes: [u8; 4],\n246 ) -> Result<SmallIndex, SmallIndexError> {\n247     let id = u32::from_ne_bytes(bytes);\n248     if id > SmallIndex::MAX.as_u32() {\n249         return Err(SmallIndexError { attempted: u64::from(id) });\n250     }\n251     Ok(SmallIndex::new_unchecked(id.as_usize()))\n252 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}