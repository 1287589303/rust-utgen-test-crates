{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\n#[derive(Debug)]\nstruct ByteClassElementRanges<'a> {\n    elements: ByteClassElements<'a>,\n    range: Option<(Unit, Unit)>,\n}\n#[derive(Debug)]\npub struct ByteClassIter<'a> {\n    classes: &'a ByteClasses,\n    i: usize,\n}\nimpl core::fmt::Debug for ByteClasses {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        if self.is_singleton() {\n            write!(f, \"ByteClasses({{singletons}})\")\n        } else {\n            write!(f, \"ByteClasses(\")?;\n            for (i, class) in self.iter().enumerate() {\n                if i > 0 {\n                    write!(f, \", \")?;\n                }\n                write!(f, \"{:?} => [\", class.as_usize())?;\n                for (start, end) in self.element_ranges(class) {\n                    if start == end {\n                        write!(f, \"{:?}\", start)?;\n                    } else {\n                        write!(f, \"{:?}-{:?}\", start, end)?;\n                    }\n                }\n                write!(f, \"]\")?;\n            }\n            write!(f, \")\")\n        }\n    }\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {}\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {}\n    pub fn as_u8(self) -> Option<u8> {}\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {\n        match self.0 {\n            UnitKind::U8(b) => usize::from(b),\n            UnitKind::EOI(eoi) => usize::from(eoi),\n        }\n    }\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {}\n    pub fn is_word_byte(self) -> bool {}\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {}\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {}\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {\n        self.alphabet_len() == 257\n    }\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {\n        ByteClassIter {\n            classes: self,\n            i: 0,\n        }\n    }\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {\n        ByteClassElementRanges {\n            elements: self.elements(class),\n            range: None,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n492 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n493     if self.is_singleton() {\n494         write!(f, \"ByteClasses({{singletons}})\")\n495     } else {\n496         write!(f, \"ByteClasses(\")?;\n497         for (i, class) in self.iter().enumerate() {\n498             if i > 0 {\n499                 write!(f, \", \")?;\n500             }\n501             write!(f, \"{:?} => [\", class.as_usize())?;\n502             for (start, end) in self.element_ranges(class) {\n503                 if start == end {\n504                     write!(f, \"{:?}\", start)?;\n505                 } else {\n506                     write!(f, \"{:?}-{:?}\", start, end)?;\n507                 }\n508             }\n509             write!(f, \"]\")?;\n510         }\n511         write!(f, \")\")\n512     }\n513 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}