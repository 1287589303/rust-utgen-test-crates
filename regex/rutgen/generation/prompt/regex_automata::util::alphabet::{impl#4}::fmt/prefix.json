{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\n#[derive(Debug)]\nstruct ByteClassElementRanges<'a> {\n    elements: ByteClassElements<'a>,\n    range: Option<(Unit, Unit)>,\n}\n#[derive(Debug)]\npub struct ByteClassIter<'a> {\n    classes: &'a ByteClasses,\n    i: usize,\n}\nimpl core::fmt::Debug for ByteClasses {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        if self.is_singleton() {\n            write!(f, \"ByteClasses({{singletons}})\")\n        } else {\n            write!(f, \"ByteClasses(\")?;\n            for (i, class) in self.iter().enumerate() {\n                if i > 0 {\n                    write!(f, \", \")?;\n                }\n                write!(f, \"{:?} => [\", class.as_usize())?;\n                for (start, end) in self.element_ranges(class) {\n                    if start == end {\n                        write!(f, \"{:?}\", start)?;\n                    } else {\n                        write!(f, \"{:?}-{:?}\", start, end)?;\n                    }\n                }\n                write!(f, \"]\")?;\n            }\n            write!(f, \")\")\n        }\n    }\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {}\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {}\n    pub fn as_u8(self) -> Option<u8> {}\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {\n        match self.0 {\n            UnitKind::U8(b) => usize::from(b),\n            UnitKind::EOI(eoi) => usize::from(eoi),\n        }\n    }\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {}\n    pub fn is_word_byte(self) -> bool {}\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {}\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {}\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {\n        self.alphabet_len() == 257\n    }\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {\n        ByteClassIter {\n            classes: self,\n            i: 0,\n        }\n    }\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {\n        ByteClassElementRanges {\n            elements: self.elements(class),\n            range: None,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n492 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n493     if self.is_singleton() {\n494         write!(f, \"ByteClasses({{singletons}})\")\n495     } else {\n496         write!(f, \"ByteClasses(\")?;\n497         for (i, class) in self.iter().enumerate() {\n498             if i > 0 {\n499                 write!(f, \", \")?;\n500             }\n501             write!(f, \"{:?} => [\", class.as_usize())?;\n502             for (start, end) in self.element_ranges(class) {\n503                 if start == end {\n504                     write!(f, \"{:?}\", start)?;\n505                 } else {\n506                     write!(f, \"{:?}-{:?}\", start, end)?;\n507                 }\n508             }\n509             write!(f, \"]\")?;\n510         }\n511         write!(f, \")\")\n512     }\n513 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}