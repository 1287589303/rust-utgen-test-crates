{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self);\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Clone, Debug)]\nstruct TranslatorI<'t, 'p> {\n    trans: &'t Translator,\n    pattern: &'p str,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the translator's Ast was parsed from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error, derived from the Ast given to the translator.\n    span: Span,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n#[derive(Clone, Debug)]\npub struct Translator {\n    /// Our call stack, but on the heap.\n    stack: RefCell<Vec<HirFrame>>,\n    /// The current flag settings.\n    flags: Cell<Flags>,\n    /// Whether we're allowed to produce HIR that can match arbitrary bytes.\n    utf8: bool,\n    /// The line terminator to use for `.`.\n    line_terminator: u8,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Either<Left, Right> {\n    Left(Left),\n    Right(Right),\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ErrorKind {\n    /// This error occurs when a Unicode feature is used when Unicode\n    /// support is disabled. For example `(?-u:\\pL)` would trigger this error.\n    UnicodeNotAllowed,\n    /// This error occurs when translating a pattern that could match a byte\n    /// sequence that isn't UTF-8 and `utf8` was enabled.\n    InvalidUtf8,\n    /// This error occurs when one uses a non-ASCII byte for a line terminator,\n    /// but where Unicode mode is enabled and UTF-8 mode is disabled.\n    InvalidLineTerminator,\n    /// This occurs when an unrecognized Unicode property name could not\n    /// be found.\n    UnicodePropertyNotFound,\n    /// This occurs when an unrecognized Unicode property value could not\n    /// be found.\n    UnicodePropertyValueNotFound,\n    /// This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or\n    /// `\\d`) could not be found. This can occur when the `unicode-perl`\n    /// crate feature is not enabled.\n    UnicodePerlClassNotFound,\n    /// This occurs when the Unicode simple case mapping tables are not\n    /// available, and the regular expression required Unicode aware case\n    /// insensitivity.\n    UnicodeCaseUnavailable,\n}\nimpl<'t, 'p> TranslatorI<'t, 'p> {\n    fn new(trans: &'t Translator, pattern: &'p str) -> TranslatorI<'t, 'p> {}\n    fn trans(&self) -> &Translator {}\n    fn push(&self, frame: HirFrame) {}\n    fn push_char(&self, ch: char) {}\n    fn push_byte(&self, byte: u8) {}\n    fn pop(&self) -> Option<HirFrame> {}\n    fn pop_concat_expr(&self) -> Option<Hir> {}\n    fn pop_alt_expr(&self) -> Option<Hir> {}\n    fn error(&self, span: Span, kind: ErrorKind) -> Error {\n        Error {\n            kind,\n            pattern: self.pattern.to_string(),\n            span,\n        }\n    }\n    fn flags(&self) -> Flags {}\n    fn set_flags(&self, ast_flags: &ast::Flags) -> Flags {}\n    fn ast_literal_to_scalar(&self, lit: &ast::Literal) -> Result<Either<char, u8>> {\n        if self.flags().unicode() {\n            return Ok(Either::Left(lit.c));\n        }\n        let byte = match lit.byte() {\n            None => return Ok(Either::Left(lit.c)),\n            Some(byte) => byte,\n        };\n        if byte <= 0x7F {\n            return Ok(Either::Left(char::try_from(byte).unwrap()));\n        }\n        if self.trans().utf8 {\n            return Err(self.error(lit.span, ErrorKind::InvalidUtf8));\n        }\n        Ok(Either::Right(byte))\n    }\n    fn case_fold_char(&self, span: Span, c: char) -> Result<Option<Hir>> {}\n    fn hir_dot(&self, span: Span) -> Result<Hir> {}\n    fn hir_assertion(&self, asst: &ast::Assertion) -> Result<Hir> {}\n    fn hir_capture(&self, group: &ast::Group, expr: Hir) -> Hir {}\n    fn hir_repetition(&self, rep: &ast::Repetition, expr: Hir) -> Hir {}\n    fn hir_unicode_class(\n        &self,\n        ast_class: &ast::ClassUnicode,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_ascii_unicode_class(\n        &self,\n        ast: &ast::ClassAscii,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_ascii_byte_class(&self, ast: &ast::ClassAscii) -> Result<hir::ClassBytes> {}\n    fn hir_perl_unicode_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_perl_byte_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassBytes> {}\n    fn convert_unicode_class_error(\n        &self,\n        span: &Span,\n        result: core::result::Result<hir::ClassUnicode, unicode::Error>,\n    ) -> Result<hir::ClassUnicode> {}\n    fn unicode_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassUnicode,\n    ) -> Result<()> {}\n    fn bytes_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassBytes,\n    ) -> Result<()> {}\n    fn class_literal_byte(&self, ast: &ast::Literal) -> Result<u8> {\n        match self.ast_literal_to_scalar(ast)? {\n            Either::Right(byte) => Ok(byte),\n            Either::Left(ch) => {\n                if ch.is_ascii() {\n                    Ok(u8::try_from(ch).unwrap())\n                } else {\n                    Err(self.error(ast.span, ErrorKind::UnicodeNotAllowed))\n                }\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a scalar byte value suitable for use as a literal in a byte\n/// character class.\n1203 fn class_literal_byte(&self, ast: &ast::Literal) -> Result<u8> {\n1204     match self.ast_literal_to_scalar(ast)? {\n1205         Either::Right(byte) => Ok(byte),\n1206         Either::Left(ch) => {\n1207             if ch.is_ascii() {\n1208                 Ok(u8::try_from(ch).unwrap())\n1209             } else {\n1210                 // We can't feasibly support Unicode in\n1211                 // byte oriented classes. Byte classes don't\n1212                 // do Unicode case folding.\n1213                 Err(self.error(ast.span, ErrorKind::UnicodeNotAllowed))\n1214             }\n1215         }\n1216     }\n1217 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}