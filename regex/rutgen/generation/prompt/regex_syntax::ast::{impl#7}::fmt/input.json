{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/mod.rs\n// crate name is regex_syntax\nuse core::cmp::Ordering;\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\npub use crate::ast::visitor::{visit, Visitor};\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Position {\n    /// The absolute offset of this position, starting at `0` from the\n    /// beginning of the regular expression pattern string.\n    pub offset: usize,\n    /// The line number, starting at `1`.\n    pub line: usize,\n    /// The approximate column number, starting at `1`.\n    pub column: usize,\n}\nimpl core::fmt::Debug for Position {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        write!(\n            f, \"Position(o: {:?}, l: {:?}, c: {:?})\", self.offset, self.line, self.column\n        )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n361 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n362     write!(\n363         f,\n364         \"Position(o: {:?}, l: {:?}, c: {:?})\",\n365         self.offset, self.line, self.column\n366     )\n367 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}