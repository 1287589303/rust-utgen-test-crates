{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[derive(Clone)]\npub(crate) struct StartTable<T> {\n    /// The initial start state IDs.\n    ///\n    /// In practice, T is either `Vec<u32>` or `&[u32]`.\n    ///\n    /// The first `2 * stride` (currently always 8) entries always correspond\n    /// to the starts states for the entire DFA, with the first 4 entries being\n    /// for unanchored searches and the second 4 entries being for anchored\n    /// searches. To keep things simple, we always use 8 entries even if the\n    /// `StartKind` is not both.\n    ///\n    /// After that, there are `stride * patterns` state IDs, where `patterns`\n    /// may be zero in the case of a DFA with no patterns or in the case where\n    /// the DFA was built without enabling starting states for each pattern.\n    table: T,\n    /// The starting state configuration supported. When 'both', both\n    /// unanchored and anchored searches work. When 'unanchored', anchored\n    /// searches panic. When 'anchored', unanchored searches panic.\n    kind: StartKind,\n    /// The start state configuration for every possible byte.\n    start_map: StartByteMap,\n    /// The number of starting state IDs per pattern.\n    stride: usize,\n    /// The total number of patterns for which starting states are encoded.\n    /// This is `None` for DFAs that were built without start states for each\n    /// pattern. Thus, one cannot use this field to say how many patterns\n    /// are in the DFA in all cases. It is specific to how many patterns are\n    /// represented in this start table.\n    pattern_len: Option<usize>,\n    /// The universal starting state for unanchored searches. This is only\n    /// present when the DFA supports unanchored searches and when all starting\n    /// state IDs for an unanchored search are equivalent.\n    universal_start_unanchored: Option<StateID>,\n    /// The universal starting state for anchored searches. This is only\n    /// present when the DFA supports anchored searches and when all starting\n    /// state IDs for an anchored search are equivalent.\n    universal_start_anchored: Option<StateID>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone)]\npub(crate) struct StartByteMap {\n    map: [Start; 256],\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub(crate) enum Start {\n    /// This occurs when the starting position is not any of the ones below.\n    NonWordByte = 0,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is an ASCII word byte.\n    WordByte = 1,\n    /// This occurs when the starting position of the search corresponds to the\n    /// beginning of the haystack.\n    Text = 2,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is a line terminator. Specifically, `\\n`.\n    LineLF = 3,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is a line terminator. Specifically, `\\r`.\n    LineCR = 4,\n    /// This occurs when a custom line terminator has been set via a\n    /// `LookMatcher`, and when that line terminator is neither a `\\r` or a\n    /// `\\n`.\n    ///\n    /// If the custom line terminator is a word byte, then this start\n    /// configuration is still selected. DFAs that implement word boundary\n    /// assertions will likely need to check whether the custom line terminator\n    /// is a word byte, in which case, it should behave as if the byte\n    /// satisfies `\\b` in addition to multi-line anchors.\n    CustomLineTerminator = 5,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl StartTable<Vec<u32>> {\n    fn dead(\n        kind: StartKind,\n        lookm: &LookMatcher,\n        pattern_len: Option<usize>,\n    ) -> Result<StartTable<Vec<u32>>, BuildError> {\n        if let Some(len) = pattern_len {\n            assert!(len <= PatternID::LIMIT);\n        }\n        let stride = Start::len();\n        let starts_len = stride.checked_mul(2).unwrap();\n        let pattern_starts_len = match stride.checked_mul(pattern_len.unwrap_or(0)) {\n            Some(x) => x,\n            None => return Err(BuildError::too_many_start_states()),\n        };\n        let table_len = match starts_len.checked_add(pattern_starts_len) {\n            Some(x) => x,\n            None => return Err(BuildError::too_many_start_states()),\n        };\n        if let Err(_) = isize::try_from(table_len) {\n            return Err(BuildError::too_many_start_states());\n        }\n        let table = vec![DEAD.as_u32(); table_len];\n        let start_map = StartByteMap::new(lookm);\n        Ok(StartTable {\n            table,\n            kind,\n            start_map,\n            stride,\n            pattern_len,\n            universal_start_unanchored: None,\n            universal_start_anchored: None,\n        })\n    }\n}\nimpl Start {\n    pub(crate) fn from_usize(n: usize) -> Option<Start> {}\n    pub(crate) fn len() -> usize {\n        6\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn as_u8(&self) -> u8 {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn as_usize(&self) -> usize {}\n}\n#[cfg(feature = \"dfa-build\")]\nimpl BuildError {\n    fn kind(&self) -> &BuildErrorKind {}\n    pub(crate) fn nfa(err: thompson::BuildError) -> BuildError {}\n    pub(crate) fn unsupported_dfa_word_boundary_unicode() -> BuildError {}\n    pub(crate) fn too_many_states() -> BuildError {}\n    pub(crate) fn too_many_start_states() -> BuildError {\n        BuildError {\n            kind: BuildErrorKind::TooManyStartStates,\n        }\n    }\n    pub(crate) fn too_many_match_pattern_ids() -> BuildError {}\n    pub(crate) fn dfa_exceeded_size_limit(limit: usize) -> BuildError {}\n    pub(crate) fn determinize_exceeded_size_limit(limit: usize) -> BuildError {}\n}\nimpl StartByteMap {\n    pub(crate) fn new(lookm: &LookMatcher) -> StartByteMap {\n        let mut map = [Start::NonWordByte; 256];\n        map[usize::from(b'\\n')] = Start::LineLF;\n        map[usize::from(b'\\r')] = Start::LineCR;\n        map[usize::from(b'_')] = Start::WordByte;\n        let mut byte = b'0';\n        while byte <= b'9' {\n            map[usize::from(byte)] = Start::WordByte;\n            byte += 1;\n        }\n        byte = b'A';\n        while byte <= b'Z' {\n            map[usize::from(byte)] = Start::WordByte;\n            byte += 1;\n        }\n        byte = b'a';\n        while byte <= b'z' {\n            map[usize::from(byte)] = Start::WordByte;\n            byte += 1;\n        }\n        let lineterm = lookm.get_line_terminator();\n        if lineterm != b'\\r' && lineterm != b'\\n' {\n            map[usize::from(lineterm)] = Start::CustomLineTerminator;\n        }\n        StartByteMap { map }\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn get(&self, byte: u8) -> Start {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(StartByteMap, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a valid set of start states all pointing to the dead state.\n///\n/// When the corresponding DFA is constructed with start states for each\n/// pattern, then `patterns` should be the number of patterns. Otherwise,\n/// it should be zero.\n///\n/// If the total table size could exceed the allocatable limit, then this\n/// returns an error. In practice, this is unlikely to be able to occur,\n/// since it's likely that allocation would have failed long before it got\n/// to this point.\n3902 fn dead(\n3903     kind: StartKind,\n3904     lookm: &LookMatcher,\n3905     pattern_len: Option<usize>,\n3906 ) -> Result<StartTable<Vec<u32>>, BuildError> {\n3907     if let Some(len) = pattern_len {\n3908         assert!(len <= PatternID::LIMIT);\n3909     }\n3910     let stride = Start::len();\n3911     // OK because 2*4 is never going to overflow anything.\n3912     let starts_len = stride.checked_mul(2).unwrap();\n3913     let pattern_starts_len =\n3914         match stride.checked_mul(pattern_len.unwrap_or(0)) {\n3915             Some(x) => x,\n3916             None => return Err(BuildError::too_many_start_states()),\n3917         };\n3918     let table_len = match starts_len.checked_add(pattern_starts_len) {\n3919         Some(x) => x,\n3920         None => return Err(BuildError::too_many_start_states()),\n3921     };\n3922     if let Err(_) = isize::try_from(table_len) {\n3923         return Err(BuildError::too_many_start_states());\n3924     }\n3925     let table = vec![DEAD.as_u32(); table_len];\n3926     let start_map = StartByteMap::new(lookm);\n3927     Ok(StartTable {\n3928         table,\n3929         kind,\n3930         start_map,\n3931         stride,\n3932         pattern_len,\n3933         universal_start_unanchored: None,\n3934         universal_start_anchored: None,\n3935     })\n3936 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}