{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy)]\nstruct Slots(u32);\n#[derive(Debug)]\nstruct SlotsIter {\n    slots: Slots,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\nimpl Slots {\n    const LIMIT: usize = 32;\n    fn insert(self, slot: usize) -> Slots {}\n    fn remove(self, slot: usize) -> Slots {}\n    fn is_empty(self) -> bool {\n        self.0 == 0\n    }\n    fn iter(self) -> SlotsIter {\n        SlotsIter { slots: self }\n    }\n    fn apply(self, at: usize, caller_explicit_slots: &mut [Option<NonMaxUsize>]) {\n        if self.is_empty() {\n            return;\n        }\n        let at = NonMaxUsize::new(at);\n        for slot in self.iter() {\n            if slot >= caller_explicit_slots.len() {\n                break;\n            }\n            caller_explicit_slots[slot] = at;\n        }\n    }\n}\nimpl Iterator for SlotsIter {\n    type Item = usize;\n    fn next(&mut self) -> Option<usize> {\n        let slot = self.slots.0.trailing_zeros().as_usize();\n        if slot >= Slots::LIMIT {\n            return None;\n        }\n        self.slots = self.slots.remove(slot);\n        Some(slot)\n    }\n}\nimpl NonMaxUsize {\n    #[inline]\n    pub fn new(value: usize) -> Option<NonMaxUsize> {\n        NonZeroUsize::new(value.wrapping_add(1)).map(NonMaxUsize)\n    }\n    #[inline]\n    pub fn get(self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// For the position `at` in the current haystack, copy it to\n/// `caller_explicit_slots` for all slots that are in this set.\n///\n/// Callers may pass a slice of any length. Slots in this set bigger than\n/// the length of the given explicit slots are simply skipped.\n///\n/// The slice *must* correspond only to the explicit slots and the first\n/// element of the slice must always correspond to the first explicit slot\n/// in the corresponding NFA.\n2920 fn apply(\n2921     self,\n2922     at: usize,\n2923     caller_explicit_slots: &mut [Option<NonMaxUsize>],\n2924 ) {\n2925     if self.is_empty() {\n2926         return;\n2927     }\n2928     let at = NonMaxUsize::new(at);\n2929     for slot in self.iter() {\n2930         if slot >= caller_explicit_slots.len() {\n2931             break;\n2932         }\n2933         caller_explicit_slots[slot] = at;\n2934     }\n2935 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}