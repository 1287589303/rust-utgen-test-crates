{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {\n        self.starts_for_each_pattern = Some(yes);\n        self\n    }\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn size_limit(mut self, limit: Option<usize>) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether to compile a separate start state for each pattern in the\n/// one-pass DFA.\n///\n/// When enabled, a separate **anchored** start state is added for each\n/// pattern in the DFA. When this start state is used, then the DFA will\n/// only search for matches for the pattern specified, even if there are\n/// other patterns in the DFA.\n///\n/// The main downside of this option is that it can potentially increase\n/// the size of the DFA and/or increase the time it takes to build the DFA.\n///\n/// You might want to enable this option when you want to both search for\n/// anchored matches of any pattern or to search for anchored matches of\n/// one particular pattern while using the same DFA. (Otherwise, you would\n/// need to compile a new DFA for each pattern.)\n///\n/// By default this is disabled.\n///\n/// # Example\n///\n/// This example shows how to build a multi-regex and then search for\n/// matches for a any of the patterns or matches for a specific pattern.\n///\n/// ```\n/// use regex_automata::{\n///     dfa::onepass::DFA, Anchored, Input, Match, PatternID,\n/// };\n///\n/// let re = DFA::builder()\n///     .configure(DFA::config().starts_for_each_pattern(true))\n///     .build_many(&[\"[a-z]+\", \"[0-9]+\"])?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n/// let haystack = \"123abc\";\n/// let input = Input::new(haystack).anchored(Anchored::Yes);\n///\n/// // A normal multi-pattern search will show pattern 1 matches.\n/// re.try_search(&mut cache, &input, &mut caps)?;\n/// assert_eq!(Some(Match::must(1, 0..3)), caps.get_match());\n///\n/// // If we only want to report pattern 0 matches, then we'll get no\n/// // match here.\n/// let input = input.anchored(Anchored::Pattern(PatternID::must(0)));\n/// re.try_search(&mut cache, &input, &mut caps)?;\n/// assert_eq!(None, caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n154 pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {\n155     self.starts_for_each_pattern = Some(yes);\n156     self\n157 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}