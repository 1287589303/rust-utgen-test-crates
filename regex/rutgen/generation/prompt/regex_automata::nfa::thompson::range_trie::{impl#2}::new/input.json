{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/range_trie.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem, ops::RangeInclusive};\nuse alloc::{format, string::String, vec, vec::Vec};\nuse regex_syntax::utf8::Utf8Range;\nuse crate::util::primitives::StateID;\nconst FINAL: StateID = StateID::ZERO;\nconst ROOT: StateID = StateID::new_unchecked(1);\n#[derive(Clone, Debug)]\nstruct NextInsert {\n    /// The next state to begin inserting ranges. This state should be the\n    /// state at which `ranges[0]` should be inserted.\n    state_id: StateID,\n    /// The ranges to insert. We used a fixed-size array here to avoid an\n    /// allocation.\n    ranges: [Utf8Range; 4],\n    /// The number of valid ranges in the above array.\n    len: u8,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl NextInsert {\n    fn new(state_id: StateID, ranges: &[Utf8Range]) -> NextInsert {\n        let len = ranges.len();\n        assert!(len > 0);\n        assert!(len <= 4);\n        let mut tmp = [Utf8Range { start: 0, end: 0 }; 4];\n        tmp[..len].copy_from_slice(ranges);\n        NextInsert {\n            state_id,\n            ranges: tmp,\n            len: u8::try_from(len).unwrap(),\n        }\n    }\n    fn push(\n        trie: &mut RangeTrie,\n        stack: &mut Vec<NextInsert>,\n        ranges: &[Utf8Range],\n    ) -> StateID {}\n    fn state_id(&self) -> StateID {}\n    fn ranges(&self) -> &[Utf8Range] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create the next item to visit. The given state ID should correspond\n/// to the state at which the first range in the given slice should be\n/// inserted. The slice given must not be empty and it must be no longer\n/// than 4.\n644 fn new(state_id: StateID, ranges: &[Utf8Range]) -> NextInsert {\n645     let len = ranges.len();\n646     assert!(len > 0);\n647     assert!(len <= 4);\n648 \n649     let mut tmp = [Utf8Range { start: 0, end: 0 }; 4];\n650     tmp[..len].copy_from_slice(ranges);\n651     NextInsert { state_id, ranges: tmp, len: u8::try_from(len).unwrap() }\n652 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}