{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/pikevm.rs\n// crate name is regex_lite\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    int::{NonMaxUsize, U32},\n    nfa::{State, StateID, NFA},\n    pool::CachePoolGuard, utf8,\n};\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n}\n#[derive(Clone, Debug)]\nstruct SlotTable {\n    /// The actual table of offsets.\n    table: Vec<Option<NonMaxUsize>>,\n    /// The number of slots per state, i.e., the table's stride or the length\n    /// of each row.\n    slots_per_state: usize,\n    /// The number of slots in the caller-provided `Captures` value for the\n    /// current search. Setting this to `slots_per_state` is always correct,\n    /// but may be wasteful.\n    slots_for_captures: usize,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub(crate) struct NonMaxUsize(NonZeroUsize);\nimpl SlotTable {\n    fn new() -> SlotTable {}\n    fn reset(&mut self, re: &PikeVM) {}\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n    fn for_state(&mut self, sid: StateID) -> &mut [Option<NonMaxUsize>] {\n        let i = sid.as_usize() * self.slots_per_state;\n        &mut self.table[i..i + self.slots_for_captures]\n    }\n    fn all_absent(&mut self) -> &mut [Option<NonMaxUsize>] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a mutable slice of the slots for the given state.\n///\n/// Note that the length of the slice returned may be less than the total\n/// number of slots available for this state. In particular, the length\n/// always matches the number of slots indicated via `setup_search`.\n718 fn for_state(&mut self, sid: StateID) -> &mut [Option<NonMaxUsize>] {\n719     let i = sid.as_usize() * self.slots_per_state;\n720     &mut self.table[i..i + self.slots_for_captures]\n721 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}