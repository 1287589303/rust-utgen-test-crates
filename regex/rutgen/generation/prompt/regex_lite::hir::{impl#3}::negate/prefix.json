{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Class {\n    pub(crate) ranges: Vec<ClassRange>,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]\npub(crate) struct ClassRange {\n    pub(crate) start: char,\n    pub(crate) end: char,\n}\nimpl Class {\n    fn new<I: IntoIterator<Item = ClassRange>>(ranges: I) -> Class {}\n    fn ascii_case_fold(&mut self) {}\n    fn negate(&mut self) {\n        const MIN: char = '\\x00';\n        const MAX: char = char::MAX;\n        if self.ranges.is_empty() {\n            self.ranges.push(ClassRange { start: MIN, end: MAX });\n            return;\n        }\n        let drain_end = self.ranges.len();\n        if self.ranges[0].start > MIN {\n            self.ranges\n                .push(ClassRange {\n                    start: MIN,\n                    end: prev_char(self.ranges[0].start).unwrap(),\n                });\n        }\n        for i in 1..drain_end {\n            self.ranges\n                .push(ClassRange {\n                    start: next_char(self.ranges[i - 1].end).unwrap(),\n                    end: prev_char(self.ranges[i].start).unwrap(),\n                });\n        }\n        if self.ranges[drain_end - 1].end < MAX {\n            self.ranges\n                .push(ClassRange {\n                    start: next_char(self.ranges[drain_end - 1].end).unwrap(),\n                    end: MAX,\n                });\n        }\n        self.ranges.drain(..drain_end);\n    }\n    fn canonicalize(&mut self) {}\n    fn is_canonical(&self) -> bool {}\n}\nfn prev_char(ch: char) -> Option<char> {\n    if ch == '\\u{E000}' {\n        return Some('\\u{D7FF}');\n    }\n    Some(char::from_u32(u32::from(ch).checked_sub(1)?).unwrap())\n}\nfn next_char(ch: char) -> Option<char> {\n    if ch == '\\u{D7FF}' {\n        return Some('\\u{E000}');\n    }\n    char::from_u32(u32::from(ch).checked_add(1).unwrap())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Negate this set.\n///\n/// For all `x` where `x` is any element, if `x` was in this set, then it\n/// will not be in this set after negation.\n418 fn negate(&mut self) {\n419     const MIN: char = '\\x00';\n420     const MAX: char = char::MAX;\n421 \n422     if self.ranges.is_empty() {\n423         self.ranges.push(ClassRange { start: MIN, end: MAX });\n424         return;\n425     }\n426 \n427     // There should be a way to do this in-place with constant memory,\n428     // but I couldn't figure out a simple way to do it. So just append\n429     // the negation to the end of this range, and then drain it before\n430     // we're done.\n431     let drain_end = self.ranges.len();\n432 \n433     // If our class doesn't start the minimum possible char, then negation\n434     // needs to include all codepoints up to the minimum in this set.\n435     if self.ranges[0].start > MIN {\n436         self.ranges.push(ClassRange {\n437             start: MIN,\n438             // OK because we know it's bigger than MIN.\n439             end: prev_char(self.ranges[0].start).unwrap(),\n440         });\n441     }\n442     for i in 1..drain_end {\n443         // let lower = self.ranges[i - 1].upper().increment();\n444         // let upper = self.ranges[i].lower().decrement();\n445         // self.ranges.push(I::create(lower, upper));\n446         self.ranges.push(ClassRange {\n447             // OK because we know i-1 is never the last range and therefore\n448             // there must be a range greater than it. It therefore follows\n449             // that 'end' can never be char::MAX, and thus there must be\n450             // a next char.\n451             start: next_char(self.ranges[i - 1].end).unwrap(),\n452             // Since 'i' is guaranteed to never be the first range, it\n453             // follows that there is always a range before this and thus\n454             // 'start' can never be '\\x00'. Thus, there must be a previous\n455             // char.\n456             end: prev_char(self.ranges[i].start).unwrap(),\n457         });\n458     }\n459     if self.ranges[drain_end - 1].end < MAX {\n460         // let lower = self.ranges[drain_end - 1].upper().increment();\n461         // self.ranges.push(I::create(lower, I::Bound::max_value()));\n462         self.ranges.push(ClassRange {\n463             // OK because we know 'end' is less than char::MAX, and thus\n464             // there is a next char.\n465             start: next_char(self.ranges[drain_end - 1].end).unwrap(),\n466             end: MAX,\n467         });\n468     }\n469     self.ranges.drain(..drain_end);\n470     // We don't need to canonicalize because we processed the ranges above\n471     // in canonical order and the new ranges we added based on those are\n472     // also necessarily in canonical order.\n473 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}