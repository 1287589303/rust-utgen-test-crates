{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/backtrack.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchError, Span},\n    },\n};\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn visited_capacity(mut self, capacity: usize) -> Config {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_visited_capacity(&self) -> usize {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {\n        Config {\n            pre: o.pre.or_else(|| self.pre.clone()),\n            visited_capacity: o.visited_capacity.or(self.visited_capacity),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Overwrite the default configuration such that the options in `o` are\n/// always used. If an option in `o` is not set, then the corresponding\n/// option in `self` is used. If it's not set in `self` either, then it\n/// remains not set.\n194 pub(crate) fn overwrite(&self, o: Config) -> Config {\n195     Config {\n196         pre: o.pre.or_else(|| self.pre.clone()),\n197         visited_capacity: o.visited_capacity.or(self.visited_capacity),\n198     }\n199 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}