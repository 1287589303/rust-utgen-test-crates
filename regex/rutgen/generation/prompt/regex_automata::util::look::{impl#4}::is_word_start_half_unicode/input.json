{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, utf8};\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\n#[derive(Clone, Debug)]\npub struct UnicodeWordBoundaryError(());\nimpl LookMatcher {\n    pub fn new() -> LookMatcher {}\n    pub fn set_line_terminator(&mut self, byte: u8) -> &mut LookMatcher {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    #[inline]\n    pub fn matches(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_inline(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn matches_set(&self, set: LookSet, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_set_inline(\n        &self,\n        set: LookSet,\n        haystack: &[u8],\n        at: usize,\n    ) -> bool {}\n    #[cfg(feature = \"alloc\")]\n    pub(crate) fn add_to_byteset(\n        &self,\n        look: Look,\n        set: &mut crate::util::alphabet::ByteClassSet,\n    ) {}\n    #[inline]\n    pub fn is_start(&self, _haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii_negate(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_unicode_negate(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {\n        let word_before = at > 0\n            && match utf8::decode_last(&haystack[..at]) {\n                None | Some(Err(_)) => return Ok(false),\n                Some(Ok(_)) => is_word_char::rev(haystack, at)?,\n            };\n        Ok(!word_before)\n    }\n    #[inline]\n    pub fn is_word_end_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(super) fn rev(\n    _bytes: &[u8],\n    _at: usize,\n) -> Result<bool, super::UnicodeWordBoundaryError> {\n    Err(super::UnicodeWordBoundaryError::new())\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode_last(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let mut start = bytes.len() - 1;\n    let limit = bytes.len().saturating_sub(4);\n    while start > limit && !is_leading_or_invalid_byte(bytes[start]) {\n        start -= 1;\n    }\n    match decode(&bytes[start..]) {\n        None => None,\n        Some(Ok(ch)) => Some(Ok(ch)),\n        Some(Err(_)) => Some(Err(bytes[bytes.len() - 1])),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true when [`Look::WordStartHalfUnicode`] is satisfied `at` the\n/// given position in `haystack`.\n///\n/// # Panics\n///\n/// This may panic when `at > haystack.len()`. Note that `at ==\n/// haystack.len()` is legal and guaranteed not to panic.\n///\n/// # Errors\n///\n/// This returns an error when Unicode word boundary tables\n/// are not available. Specifically, this only occurs when the\n/// `unicode-word-boundary` feature is not enabled.\n1214 pub fn is_word_start_half_unicode(\n1215     &self,\n1216     haystack: &[u8],\n1217     at: usize,\n1218 ) -> Result<bool, UnicodeWordBoundaryError> {\n1219     // See `is_word_unicode_negate` for why we need to do this. We don't\n1220     // need to do it for `is_word_start_unicode` because that guarantees\n1221     // that the position matched falls on a valid UTF-8 boundary given\n1222     // that the right side must be in \\w.\n1223     let word_before = at > 0\n1224         && match utf8::decode_last(&haystack[..at]) {\n1225             None | Some(Err(_)) => return Ok(false),\n1226             Some(Ok(_)) => is_word_char::rev(haystack, at)?,\n1227         };\n1228     Ok(!word_before)\n1229 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}