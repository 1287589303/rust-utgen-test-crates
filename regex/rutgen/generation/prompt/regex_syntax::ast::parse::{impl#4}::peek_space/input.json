{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    fn new(parser: P, pattern: &'s str) -> ParserI<'s, P> {}\n    fn parser(&self) -> &Parser {}\n    fn pattern(&self) -> &str {\n        self.pattern\n    }\n    fn error(&self, span: Span, kind: ast::ErrorKind) -> ast::Error {}\n    fn offset(&self) -> usize {\n        self.parser().pos.get().offset\n    }\n    fn line(&self) -> usize {}\n    fn column(&self) -> usize {}\n    fn next_capture_index(&self, span: Span) -> Result<u32> {}\n    fn add_capture_name(&self, cap: &ast::CaptureName) -> Result<()> {}\n    fn ignore_whitespace(&self) -> bool {\n        self.parser().ignore_whitespace.get()\n    }\n    fn char(&self) -> char {\n        self.char_at(self.offset())\n    }\n    fn char_at(&self, i: usize) -> char {}\n    fn bump(&self) -> bool {}\n    fn bump_if(&self, prefix: &str) -> bool {}\n    fn is_lookaround_prefix(&self) -> bool {}\n    fn bump_and_bump_space(&self) -> bool {}\n    fn bump_space(&self) {}\n    fn peek(&self) -> Option<char> {\n        if self.is_eof() {\n            return None;\n        }\n        self.pattern()[self.offset() + self.char().len_utf8()..].chars().next()\n    }\n    fn peek_space(&self) -> Option<char> {\n        if !self.ignore_whitespace() {\n            return self.peek();\n        }\n        if self.is_eof() {\n            return None;\n        }\n        let mut start = self.offset() + self.char().len_utf8();\n        let mut in_comment = false;\n        for (i, c) in self.pattern()[start..].char_indices() {\n            if c.is_whitespace() {\n                continue;\n            } else if !in_comment && c == '#' {\n                in_comment = true;\n            } else if in_comment && c == '\\n' {\n                in_comment = false;\n            } else {\n                start += i;\n                break;\n            }\n        }\n        self.pattern()[start..].chars().next()\n    }\n    fn is_eof(&self) -> bool {\n        self.offset() == self.pattern().len()\n    }\n    fn pos(&self) -> Position {}\n    fn span(&self) -> Span {}\n    fn span_char(&self) -> Span {}\n    #[inline(never)]\n    fn push_alternate(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    fn push_or_add_alternation(&self, concat: ast::Concat) {}\n    #[inline(never)]\n    fn push_group(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn pop_group(&self, mut group_concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn pop_group_end(&self, mut concat: ast::Concat) -> Result<Ast> {}\n    #[inline(never)]\n    fn push_class_open(\n        &self,\n        parent_union: ast::ClassSetUnion,\n    ) -> Result<ast::ClassSetUnion> {}\n    #[inline(never)]\n    fn pop_class(\n        &self,\n        nested_union: ast::ClassSetUnion,\n    ) -> Result<Either<ast::ClassSetUnion, ast::ClassBracketed>> {}\n    #[inline(never)]\n    fn unclosed_class_error(&self) -> ast::Error {}\n    #[inline(never)]\n    fn push_class_op(\n        &self,\n        next_kind: ast::ClassSetBinaryOpKind,\n        next_union: ast::ClassSetUnion,\n    ) -> ast::ClassSetUnion {}\n    #[inline(never)]\n    fn pop_class_op(&self, rhs: ast::ClassSet) -> ast::ClassSet {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like peek, but will ignore spaces when the parser is in whitespace\n/// insensitive mode.\n600 fn peek_space(&self) -> Option<char> {\n601     if !self.ignore_whitespace() {\n602         return self.peek();\n603     }\n604     if self.is_eof() {\n605         return None;\n606     }\n607     let mut start = self.offset() + self.char().len_utf8();\n608     let mut in_comment = false;\n609     for (i, c) in self.pattern()[start..].char_indices() {\n610         if c.is_whitespace() {\n611             continue;\n612         } else if !in_comment && c == '#' {\n613             in_comment = true;\n614         } else if in_comment && c == '\\n' {\n615             in_comment = false;\n616         } else {\n617             start += i;\n618             break;\n619         }\n620     }\n621     self.pattern()[start..].chars().next()\n622 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}