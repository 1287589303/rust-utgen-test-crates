{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/wrappers.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError},\n        regex::RegexInfo,\n    },\n    nfa::thompson::{pikevm, NFA},\n    util::{prefilter::Prefilter, primitives::NonMaxUsize},\n    HalfMatch, Input, Match, MatchKind, PatternID, PatternSet,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa;\n#[cfg(feature = \"dfa-onepass\")]\nuse crate::dfa::onepass;\n#[cfg(feature = \"hybrid\")]\nuse crate::hybrid;\n#[cfg(feature = \"nfa-backtrack\")]\nuse crate::nfa::thompson::backtrack;\n#[derive(Debug)]\npub(crate) struct Hybrid(Option<HybridEngine>);\n#[derive(Debug)]\npub(crate) struct HybridEngine(\n    #[cfg(feature = \"hybrid\")]\n    hybrid::regex::Regex,\n    #[cfg(not(feature = \"hybrid\"))]\n    (),\n);\n#[derive(Clone, Debug)]\npub(crate) struct RegexInfo(Arc<RegexInfoI>);\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\nimpl Hybrid {\n    pub(crate) fn none() -> Hybrid {}\n    pub(crate) fn new(\n        info: &RegexInfo,\n        pre: Option<Prefilter>,\n        nfa: &NFA,\n        nfarev: &NFA,\n    ) -> Hybrid {\n        Hybrid(HybridEngine::new(info, pre, nfa, nfarev))\n    }\n    pub(crate) fn create_cache(&self) -> HybridCache {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn get(&self, _input: &Input<'_>) -> Option<&HybridEngine> {}\n    pub(crate) fn is_some(&self) -> bool {}\n}\nimpl HybridEngine {\n    pub(crate) fn new(\n        info: &RegexInfo,\n        pre: Option<Prefilter>,\n        nfa: &NFA,\n        nfarev: &NFA,\n    ) -> Option<HybridEngine> {\n        #[cfg(feature = \"hybrid\")]\n        {\n            if !info.config().get_hybrid() {\n                return None;\n            }\n            let dfa_config = hybrid::dfa::Config::new()\n                .match_kind(info.config().get_match_kind())\n                .prefilter(pre.clone())\n                .starts_for_each_pattern(true)\n                .byte_classes(info.config().get_byte_classes())\n                .unicode_word_boundary(true)\n                .specialize_start_states(pre.is_some())\n                .cache_capacity(info.config().get_hybrid_cache_capacity())\n                .skip_cache_capacity_check(false)\n                .minimum_cache_clear_count(Some(3))\n                .minimum_bytes_per_state(Some(10));\n            let result = hybrid::dfa::Builder::new()\n                .configure(dfa_config.clone())\n                .build_from_nfa(nfa.clone());\n            let fwd = match result {\n                Ok(fwd) => fwd,\n                Err(_err) => {\n                    debug!(\"forward lazy DFA failed to build: {}\", _err);\n                    return None;\n                }\n            };\n            let result = hybrid::dfa::Builder::new()\n                .configure(\n                    dfa_config\n                        .clone()\n                        .match_kind(MatchKind::All)\n                        .prefilter(None)\n                        .specialize_start_states(false),\n                )\n                .build_from_nfa(nfarev.clone());\n            let rev = match result {\n                Ok(rev) => rev,\n                Err(_err) => {\n                    debug!(\"reverse lazy DFA failed to build: {}\", _err);\n                    return None;\n                }\n            };\n            let engine = hybrid::regex::Builder::new().build_from_dfas(fwd, rev);\n            debug!(\"lazy DFA built\");\n            Some(HybridEngine(engine))\n        }\n        #[cfg(not(feature = \"hybrid\"))] { None }\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search(\n        &self,\n        cache: &mut HybridCache,\n        input: &Input<'_>,\n    ) -> Result<Option<Match>, RetryFailError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_fwd(\n        &self,\n        cache: &mut HybridCache,\n        input: &Input<'_>,\n    ) -> Result<Option<HalfMatch>, RetryFailError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_fwd_stopat(\n        &self,\n        cache: &mut HybridCache,\n        input: &Input<'_>,\n    ) -> Result<Result<HalfMatch, usize>, RetryFailError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_rev(\n        &self,\n        cache: &mut HybridCache,\n        input: &Input<'_>,\n    ) -> Result<Option<HalfMatch>, RetryFailError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn try_search_half_rev_limited(\n        &self,\n        cache: &mut HybridCache,\n        input: &Input<'_>,\n        min_start: usize,\n    ) -> Result<Option<HalfMatch>, RetryError> {}\n    #[inline]\n    pub(crate) fn try_which_overlapping_matches(\n        &self,\n        cache: &mut HybridCache,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) -> Result<(), RetryFailError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n531 pub(crate) fn new(\n532     info: &RegexInfo,\n533     pre: Option<Prefilter>,\n534     nfa: &NFA,\n535     nfarev: &NFA,\n536 ) -> Hybrid {\n537     Hybrid(HybridEngine::new(info, pre, nfa, nfarev))\n538 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}