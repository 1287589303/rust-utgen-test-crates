{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Debug, Default)]\nstruct GroupInfoInner {\n    slot_ranges: Vec<(SmallIndex, SmallIndex)>,\n    name_to_index: Vec<CaptureNameMap>,\n    index_to_name: Vec<Vec<Option<Arc<str>>>>,\n    memory_extra: usize,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct SmallIndex(u32);\n#[derive(Clone, Debug)]\npub struct GroupInfoError {\n    kind: GroupInfoErrorKind,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct SmallIndexError {\n    attempted: u64,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl GroupInfoInner {\n    fn add_first_group(&mut self, pid: PatternID) {}\n    fn add_explicit_group<N: AsRef<str>>(\n        &mut self,\n        pid: PatternID,\n        group: SmallIndex,\n        maybe_name: Option<N>,\n    ) -> Result<(), GroupInfoError> {}\n    fn fixup_slot_ranges(&mut self) -> Result<(), GroupInfoError> {\n        use crate::util::primitives::IteratorIndexExt;\n        let offset = self.pattern_len().checked_mul(2).unwrap();\n        for (pid, &mut (ref mut start, ref mut end)) in self\n            .slot_ranges\n            .iter_mut()\n            .with_pattern_ids()\n        {\n            let group_len = 1 + ((end.as_usize() - start.as_usize()) / 2);\n            let new_end = match end.as_usize().checked_add(offset) {\n                Some(new_end) => new_end,\n                None => return Err(GroupInfoError::too_many_groups(pid, group_len)),\n            };\n            *end = SmallIndex::new(new_end)\n                .map_err(|_| { GroupInfoError::too_many_groups(pid, group_len) })?;\n            *start = SmallIndex::new(start.as_usize() + offset).unwrap();\n        }\n        Ok(())\n    }\n    fn pattern_len(&self) -> usize {\n        self.slot_ranges.len()\n    }\n    fn group_len(&self, pid: PatternID) -> usize {}\n    fn small_slot_len(&self) -> SmallIndex {}\n}\nimpl SmallIndex {\n    #[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n    pub const MAX: SmallIndex = SmallIndex::new_unchecked(core::i32::MAX as usize - 1);\n    #[cfg(target_pointer_width = \"16\")]\n    pub const MAX: SmallIndex = SmallIndex::new_unchecked(core::isize::MAX - 1);\n    pub const LIMIT: usize = SmallIndex::MAX.as_usize() + 1;\n    pub const ZERO: SmallIndex = SmallIndex::new_unchecked(0);\n    pub const SIZE: usize = core::mem::size_of::<SmallIndex>();\n    #[inline]\n    pub fn new(index: usize) -> Result<SmallIndex, SmallIndexError> {\n        SmallIndex::try_from(index)\n    }\n    #[inline]\n    pub const fn new_unchecked(index: usize) -> SmallIndex {}\n    #[inline]\n    pub fn must(index: usize) -> SmallIndex {}\n    #[inline]\n    pub const fn as_usize(&self) -> usize {\n        self.0 as usize\n    }\n    #[inline]\n    pub const fn as_u64(&self) -> u64 {}\n    #[inline]\n    pub const fn as_u32(&self) -> u32 {}\n    #[inline]\n    pub const fn as_i32(&self) -> i32 {}\n    #[inline]\n    pub fn one_more(&self) -> usize {}\n    #[inline]\n    pub fn from_ne_bytes(bytes: [u8; 4]) -> Result<SmallIndex, SmallIndexError> {}\n    #[inline]\n    pub fn from_ne_bytes_unchecked(bytes: [u8; 4]) -> SmallIndex {}\n    #[inline]\n    pub fn to_ne_bytes(&self) -> [u8; 4] {}\n}\nimpl GroupInfoError {\n    fn too_many_patterns(err: PatternIDError) -> GroupInfoError {}\n    fn too_many_groups(pattern: PatternID, minimum: usize) -> GroupInfoError {\n        GroupInfoError {\n            kind: GroupInfoErrorKind::TooManyGroups {\n                pattern,\n                minimum,\n            },\n        }\n    }\n    fn missing_groups(pattern: PatternID) -> GroupInfoError {}\n    fn first_must_be_unnamed(pattern: PatternID) -> GroupInfoError {}\n    fn duplicate(pattern: PatternID, name: &str) -> GroupInfoError {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This corrects the slot ranges to account for the slots corresponding\n/// to the zeroth group of each pattern. That is, every slot range is\n/// offset by 'pattern_len() * 2', since each pattern uses two slots to\n/// represent the zeroth group.\n2266 fn fixup_slot_ranges(&mut self) -> Result<(), GroupInfoError> {\n2267     use crate::util::primitives::IteratorIndexExt;\n2268     // Since we know number of patterns fits in PatternID and\n2269     // PatternID::MAX < isize::MAX, it follows that multiplying by 2 will\n2270     // never overflow usize.\n2271     let offset = self.pattern_len().checked_mul(2).unwrap();\n2272     for (pid, &mut (ref mut start, ref mut end)) in\n2273         self.slot_ranges.iter_mut().with_pattern_ids()\n2274     {\n2275         let group_len = 1 + ((end.as_usize() - start.as_usize()) / 2);\n2276         let new_end = match end.as_usize().checked_add(offset) {\n2277             Some(new_end) => new_end,\n2278             None => {\n2279                 return Err(GroupInfoError::too_many_groups(\n2280                     pid, group_len,\n2281                 ))\n2282             }\n2283         };\n2284         *end = SmallIndex::new(new_end).map_err(|_| {\n2285             GroupInfoError::too_many_groups(pid, group_len)\n2286         })?;\n2287         // Since start <= end, if end is valid then start must be too.\n2288         *start = SmallIndex::new(start.as_usize() + offset).unwrap();\n2289     }\n2290     Ok(())\n2291 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}