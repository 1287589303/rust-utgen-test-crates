{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/backtrack.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchError, Span},\n    },\n};\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {\n        self.pre = Some(pre);\n        self\n    }\n    pub fn visited_capacity(mut self, capacity: usize) -> Config {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_visited_capacity(&self) -> usize {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set a prefilter to be used whenever a start state is entered.\n///\n/// A [`Prefilter`] in this context is meant to accelerate searches by\n/// looking for literal prefixes that every match for the corresponding\n/// pattern (or patterns) must start with. Once a prefilter produces a\n/// match, the underlying search routine continues on to try and confirm\n/// the match.\n///\n/// Be warned that setting a prefilter does not guarantee that the search\n/// will be faster. While it's usually a good bet, if the prefilter\n/// produces a lot of false positive candidates (i.e., positions matched\n/// by the prefilter but not by the regex), then the overall result can\n/// be slower than if you had just executed the regex engine without any\n/// prefilters.\n///\n/// By default no prefilter is set.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::backtrack::BoundedBacktracker,\n///     util::prefilter::Prefilter,\n///     Input, Match, MatchKind,\n/// };\n///\n/// let pre = Prefilter::new(MatchKind::LeftmostFirst, &[\"foo\", \"bar\"]);\n/// let re = BoundedBacktracker::builder()\n///     .configure(BoundedBacktracker::config().prefilter(pre))\n///     .build(r\"(foo|bar)[a-z]+\")?;\n/// let mut cache = re.create_cache();\n/// let input = Input::new(\"foo1 barfox bar\");\n/// assert_eq!(\n///     Some(Match::must(0, 5..11)),\n///     re.try_find(&mut cache, input)?,\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Be warned though that an incorrect prefilter can lead to incorrect\n/// results!\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::backtrack::BoundedBacktracker,\n///     util::prefilter::Prefilter,\n///     Input, HalfMatch, MatchKind,\n/// };\n///\n/// let pre = Prefilter::new(MatchKind::LeftmostFirst, &[\"foo\", \"car\"]);\n/// let re = BoundedBacktracker::builder()\n///     .configure(BoundedBacktracker::config().prefilter(pre))\n///     .build(r\"(foo|bar)[a-z]+\")?;\n/// let mut cache = re.create_cache();\n/// let input = Input::new(\"foo1 barfox bar\");\n/// // No match reported even though there clearly is one!\n/// assert_eq!(None, re.try_find(&mut cache, input)?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n122 pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {\n123     self.pre = Some(pre);\n124     self\n125 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}