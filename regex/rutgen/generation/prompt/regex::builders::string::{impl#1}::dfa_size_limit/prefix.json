{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{error::Error, Regex, RegexSet};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexSetBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexSetBuilder {\n    pub fn new<I, S>(patterns: I) -> RegexSetBuilder\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {}\n    pub fn build(&self) -> Result<RegexSet, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexSetBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {\n        self.builder.dfa_size_limit(bytes);\n        self\n    }\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexSetBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {\n        self.metac = self.metac.clone().hybrid_cache_capacity(limit);\n        self\n    }\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the approximate capacity, in bytes, of the cache of transitions\n/// used by the lazy DFA.\n///\n/// While the lazy DFA isn't always used, in tends to be the most\n/// commonly use regex engine in default configurations. It tends to\n/// adopt the performance profile of a fully build DFA, but without the\n/// downside of taking worst case exponential time to build.\n///\n/// The downside is that it needs to keep a cache of transitions and\n/// states that are built while running a search, and this cache\n/// can fill up. When it fills up, the cache will reset itself. Any\n/// previously generated states and transitions will then need to be\n/// re-generated. If this happens too many times, then this library\n/// will bail out of using the lazy DFA and switch to a different regex\n/// engine.\n///\n/// If your regex provokes this particular downside of the lazy DFA,\n/// then it may be beneficial to increase its cache capacity. This will\n/// potentially reduce the frequency of cache resetting (ideally to\n/// `0`). While it won't fix all potential performance problems with\n/// the lazy DFA, increasing the cache capacity does fix some.\n///\n/// There is no easy way to determine, a priori, whether increasing\n/// this cache capacity will help. In general, the larger your regex,\n/// the more cache it's likely to use. But that isn't an ironclad rule.\n/// For example, a regex like `[01]*1[01]{N}` would normally produce a\n/// fully build DFA that is exponential in size with respect to `N`.\n/// The lazy DFA will prevent exponential space blow-up, but it cache\n/// is likely to fill up, even when it's large and even for smallish\n/// values of `N`.\n///\n/// If you aren't sure whether this helps or not, it is sensible to\n/// set this to some arbitrarily large number in testing, such as\n/// `usize::MAX`. Namely, this represents the amount of capacity that\n/// *may* be used. It's probably not a good idea to use `usize::MAX` in\n/// production though, since it implies there are no controls on heap\n/// memory used by this library during a search. In effect, set it to\n/// whatever you're willing to allocate for a single regex search.\n1306 pub fn dfa_size_limit(\n1307     &mut self,\n1308     bytes: usize,\n1309 ) -> &mut RegexSetBuilder {\n1310     self.builder.dfa_size_limit(bytes);\n1311     self\n1312 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}