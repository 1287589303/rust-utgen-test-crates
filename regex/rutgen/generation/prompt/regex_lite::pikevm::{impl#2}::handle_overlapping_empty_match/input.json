{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/pikevm.rs\n// crate name is regex_lite\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    int::{NonMaxUsize, U32},\n    nfa::{State, StateID, NFA},\n    pool::CachePoolGuard, utf8,\n};\n#[derive(Debug)]\npub(crate) struct FindMatches<'r, 'h> {\n    pikevm: &'r PikeVM,\n    cache: CachePoolGuard<'r>,\n    haystack: &'h [u8],\n    at: usize,\n    slots: Vec<Option<NonMaxUsize>>,\n    last_match_end: Option<usize>,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub(crate) struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Cache {\n    /// Stack used while computing epsilon closure. This effectively lets us\n    /// move what is more naturally expressed through recursion to a stack\n    /// on the heap.\n    stack: Vec<FollowEpsilon>,\n    /// The current active states being explored for the current byte in the\n    /// haystack.\n    curr: ActiveStates,\n    /// The next set of states we're building that will be explored for the\n    /// next byte in the haystack.\n    next: ActiveStates,\n}\nimpl<'r, 'h> FindMatches<'r, 'h> {\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_match(\n        &mut self,\n        mut m: (usize, usize),\n    ) -> Option<(usize, usize)> {\n        assert!(m.0 >= m.1);\n        if Some(m.1) == self.last_match_end {\n            let len = core::cmp::max(1, utf8::decode(&self.haystack[self.at..]).1);\n            self.at = self.at.checked_add(len).unwrap();\n            if !self\n                .pikevm\n                .search(\n                    &mut self.cache,\n                    self.haystack,\n                    self.at,\n                    self.haystack.len(),\n                    false,\n                    &mut self.slots,\n                )\n            {\n                return None;\n            }\n            m = (self.slots[0].unwrap().get(), self.slots[1].unwrap().get());\n        }\n        Some(m)\n    }\n}\nimpl NonMaxUsize {\n    pub(crate) fn new(value: usize) -> Option<NonMaxUsize> {}\n    pub(crate) fn get(self) -> usize {\n        self.0.get().wrapping_sub(1)\n    }\n}\nimpl PikeVM {\n    pub(crate) fn new(nfa: NFA) -> PikeVM {}\n    pub(crate) fn nfa(&self) -> &NFA {}\n    pub(crate) fn find_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> FindMatches<'r, 'h> {}\n    pub(crate) fn captures_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> CapturesMatches<'r, 'h> {}\n    pub(crate) fn search(\n        &self,\n        cache: &mut Cache,\n        haystack: &[u8],\n        start: usize,\n        end: usize,\n        earliest: bool,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {\n        cache.setup_search(slots.len());\n        if start > end {\n            return false;\n        }\n        assert!(\n            haystack.len() < core::usize::MAX,\n            \"byte slice lengths must be less than usize MAX\",\n        );\n        let Cache { ref mut stack, ref mut curr, ref mut next } = cache;\n        let start_id = self.nfa().start();\n        let anchored = self.nfa().is_start_anchored();\n        let mut matched = false;\n        let mut at = start;\n        while at <= end {\n            if curr.set.is_empty() {\n                if matched {\n                    break;\n                }\n                if anchored && at > start {\n                    break;\n                }\n            }\n            if !matched {\n                let slots = next.slot_table.all_absent();\n                self.epsilon_closure(stack, slots, curr, haystack, at, start_id);\n            }\n            let (ch, len) = utf8::decode_lossy(&haystack[at..]);\n            if self.nexts(stack, curr, next, haystack, at, ch, len, slots) {\n                matched = true;\n            }\n            if (earliest && matched) || len == 0 {\n                break;\n            }\n            core::mem::swap(curr, next);\n            next.set.clear();\n            at += len;\n        }\n        matched\n    }\n    fn nexts(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr: &mut ActiveStates,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {}\n    fn next(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slot_table: &mut SlotTable,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        sid: StateID,\n    ) -> bool {}\n    fn epsilon_closure(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        sid: StateID,\n    ) {}\n    fn epsilon_closure_explore(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        mut sid: StateID,\n    ) {}\n}\npub(crate) fn decode<B: AsRef<[u8]>>(slice: B) -> (Option<char>, usize) {\n    let slice = slice.as_ref();\n    match slice.get(0) {\n        None => return (None, 0),\n        Some(&b) if b <= 0x7F => return (Some(b as char), 1),\n        _ => {}\n    }\n    let (mut state, mut cp, mut i) = (ACCEPT, 0, 0);\n    while i < slice.len() {\n        decode_step(&mut state, &mut cp, slice[i]);\n        i += 1;\n        if state == ACCEPT {\n            let ch = char::from_u32(cp).unwrap();\n            return (Some(ch), i);\n        } else if state == REJECT {\n            return (None, core::cmp::max(1, i.saturating_sub(1)));\n        }\n    }\n    (None, i)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Handles the special case of an empty match by ensuring that 1) the\n/// iterator always advances and 2) empty matches never overlap with other\n/// matches.\n///\n/// Note that we mark this cold and forcefully prevent inlining because\n/// handling empty matches like this is extremely rare and does require a\n/// bit of code, comparatively. Keeping this code out of the main iterator\n/// function keeps it smaller and more amenable to inlining itself.\n488 fn handle_overlapping_empty_match(\n489     &mut self,\n490     mut m: (usize, usize),\n491 ) -> Option<(usize, usize)> {\n492     assert!(m.0 >= m.1);\n493     if Some(m.1) == self.last_match_end {\n494         let len =\n495             core::cmp::max(1, utf8::decode(&self.haystack[self.at..]).1);\n496         self.at = self.at.checked_add(len).unwrap();\n497         if !self.pikevm.search(\n498             &mut self.cache,\n499             self.haystack,\n500             self.at,\n501             self.haystack.len(),\n502             false,\n503             &mut self.slots,\n504         ) {\n505             return None;\n506         }\n507         m = (self.slots[0].unwrap().get(), self.slots[1].unwrap().get());\n508     }\n509     Some(m)\n510 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}