{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/escape.rs\n// crate name is regex_automata\nuse crate::util::utf8;\npub struct DebugHaystack<'a>(pub &'a [u8]);\nimpl<'a> core::fmt::Debug for DebugHaystack<'a> {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        write!(f, \"\\\"\")?;\n        let mut bytes = self.0;\n        while let Some(result) = utf8::decode(bytes) {\n            let ch = match result {\n                Ok(ch) => ch,\n                Err(byte) => {\n                    write!(f, r\"\\x{:02x}\", byte)?;\n                    bytes = &bytes[1..];\n                    continue;\n                }\n            };\n            bytes = &bytes[ch.len_utf8()..];\n            match ch {\n                '\\0' => write!(f, \"\\\\0\")?,\n                '\\x01'..='\\x08' | '\\x0b' | '\\x0c' | '\\x0e'..='\\x19' | '\\x7f' => {\n                    write!(f, \"\\\\x{:02x}\", u32::from(ch))?;\n                }\n                '\\n' | '\\r' | '\\t' | _ => {\n                    write!(f, \"{}\", ch.escape_debug())?;\n                }\n            }\n        }\n        write!(f, \"\\\"\")?;\n        Ok(())\n    }\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n52 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n53     write!(f, \"\\\"\")?;\n54     // This is a sad re-implementation of a similar impl found in bstr.\n55     let mut bytes = self.0;\n56     while let Some(result) = utf8::decode(bytes) {\n57         let ch = match result {\n58             Ok(ch) => ch,\n59             Err(byte) => {\n60                 write!(f, r\"\\x{:02x}\", byte)?;\n61                 bytes = &bytes[1..];\n62                 continue;\n63             }\n64         };\n65         bytes = &bytes[ch.len_utf8()..];\n66         match ch {\n67             '\\0' => write!(f, \"\\\\0\")?,\n68             // ASCII control characters except \\0, \\n, \\r, \\t\n69             '\\x01'..='\\x08'\n70             | '\\x0b'\n71             | '\\x0c'\n72             | '\\x0e'..='\\x19'\n73             | '\\x7f' => {\n74                 write!(f, \"\\\\x{:02x}\", u32::from(ch))?;\n75             }\n76             '\\n' | '\\r' | '\\t' | _ => {\n77                 write!(f, \"{}\", ch.escape_debug())?;\n78             }\n79         }\n80     }\n81     write!(f, \"\\\"\")?;\n82     Ok(())\n83 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}