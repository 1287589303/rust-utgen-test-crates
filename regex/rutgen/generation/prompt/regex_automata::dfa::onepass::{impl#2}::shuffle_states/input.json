{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Debug)]\nstruct InternalBuilder<'a> {\n    /// The DFA we're building.\n    dfa: DFA,\n    /// An unordered collection of NFA state IDs that we haven't yet tried to\n    /// build into a DFA state yet.\n    ///\n    /// This collection does not ultimately wind up including every NFA state\n    /// ID. Instead, each ID represents a \"start\" state for a sub-graph of the\n    /// NFA. The set of NFA states we then use to build a DFA state consists\n    /// of that \"start\" state and all states reachable from it via epsilon\n    /// transitions.\n    uncompiled_nfa_ids: Vec<StateID>,\n    /// A map from NFA state ID to DFA state ID. This is useful for easily\n    /// determining whether an NFA state has been used as a \"starting\" point\n    /// to build a DFA state yet. If it hasn't, then it is mapped to DEAD,\n    /// and since DEAD is specially added and never corresponds to any NFA\n    /// state, it follows that a mapping to DEAD implies the NFA state has\n    /// no corresponding DFA state yet.\n    nfa_to_dfa_id: Vec<StateID>,\n    /// A stack used to traverse the NFA states that make up a single DFA\n    /// state. Traversal occurs until the stack is empty, and we only push to\n    /// the stack when the state ID isn't in 'seen'. Actually, even more than\n    /// that, if we try to push something on to this stack that is already in\n    /// 'seen', then we bail out on construction completely, since it implies\n    /// that the NFA is not one-pass.\n    stack: Vec<(StateID, Epsilons)>,\n    /// The set of NFA states that we've visited via 'stack'.\n    seen: SparseSet,\n    /// Whether a match NFA state has been observed while constructing a\n    /// one-pass DFA state. Once a match state is seen, assuming we are using\n    /// leftmost-first match semantics, then we don't add any more transitions\n    /// to the DFA state we're building.\n    matched: bool,\n    /// The config passed to the builder.\n    ///\n    /// This is duplicated in dfa.config.\n    config: Config,\n    /// The NFA we're building a one-pass DFA from.\n    ///\n    /// This is duplicated in dfa.nfa.\n    nfa: &'a NFA,\n    /// The equivalence classes that make up the alphabet for this DFA>\n    ///\n    /// This is duplicated in dfa.classes.\n    classes: ByteClasses,\n}\n#[derive(Debug)]\npub(super) struct Remapper {\n    /// A map from the index of a state to its pre-multiplied identifier.\n    ///\n    /// When a state is swapped with another, then their corresponding\n    /// locations in this map are also swapped. Thus, its new position will\n    /// still point to its old pre-multiplied StateID.\n    ///\n    /// While there is a bit more to it, this then allows us to rewrite the\n    /// state IDs in a DFA's transition table in a single pass. This is done\n    /// by iterating over every ID in this map, then iterating over each\n    /// transition for the state at that ID and re-mapping the transition from\n    /// `old_id` to `map[dfa.to_index(old_id)]`. That is, we find the position\n    /// in this map where `old_id` *started*, and set it to where it ended up\n    /// after all swaps have been completed.\n    map: Vec<StateID>,\n    /// A mapper from state index to state ID (and back).\n    idxmap: IndexMapper,\n}\n#[derive(Clone)]\npub struct DFA {\n    /// The configuration provided by the caller.\n    config: Config,\n    /// The NFA used to build this DFA.\n    ///\n    /// NOTE: We probably don't need to store the NFA here, but we use enough\n    /// bits from it that it's convenient to do so. And there really isn't much\n    /// cost to doing so either, since an NFA is reference counted internally.\n    nfa: NFA,\n    /// The transition table. Given a state ID 's' and a byte of haystack 'b',\n    /// the next state is `table[sid + classes[byte]]`.\n    ///\n    /// The stride of this table (i.e., the number of columns) is always\n    /// a power of 2, even if the alphabet length is smaller. This makes\n    /// converting between state IDs and state indices very cheap.\n    ///\n    /// Note that the stride always includes room for one extra \"transition\"\n    /// that isn't actually a transition. It is a 'PatternEpsilons' that is\n    /// used for match states only. Because of this, the maximum number of\n    /// active columns in the transition table is 257, which means the maximum\n    /// stride is 512 (the next power of 2 greater than or equal to 257).\n    table: Vec<Transition>,\n    /// The DFA state IDs of the starting states.\n    ///\n    /// `starts[0]` is always present and corresponds to the starting state\n    /// when searching for matches of any pattern in the DFA.\n    ///\n    /// `starts[i]` where i>0 corresponds to the starting state for the pattern\n    /// ID 'i-1'. These starting states are optional.\n    starts: Vec<StateID>,\n    /// Every state ID >= this value corresponds to a match state.\n    ///\n    /// This is what a search uses to detect whether a state is a match state\n    /// or not. It requires only a simple comparison instead of bit-unpacking\n    /// the PatternEpsilons from every state.\n    min_match_id: StateID,\n    /// The alphabet of this DFA, split into equivalence classes. Bytes in the\n    /// same equivalence class can never discriminate between a match and a\n    /// non-match.\n    classes: ByteClasses,\n    /// The number of elements in each state in the transition table. This may\n    /// be less than the stride, since the stride is always a power of 2 and\n    /// the alphabet length can be anything up to and including 256.\n    alphabet_len: usize,\n    /// The number of columns in the transition table, expressed as a power of\n    /// 2.\n    stride2: usize,\n    /// The offset at which the PatternEpsilons for a match state is stored in\n    /// the transition table.\n    ///\n    /// PERF: One wonders whether it would be better to put this in a separate\n    /// allocation, since only match states have a non-empty PatternEpsilons\n    /// and the number of match states tends be dwarfed by the number of\n    /// non-match states. So this would save '8*len(non_match_states)' for each\n    /// DFA. The question is whether moving this to a different allocation will\n    /// lead to a perf hit during searches. You might think dealing with match\n    /// states is rare, but some regexes spend a lot of time in match states\n    /// gobbling up input. But... match state handling is already somewhat\n    /// expensive, so maybe this wouldn't do much? Either way, it's worth\n    /// experimenting.\n    pateps_offset: usize,\n    /// The first explicit slot index. This refers to the first slot appearing\n    /// immediately after the last implicit slot. It is always 'patterns.len()\n    /// * 2'.\n    ///\n    /// We record this because we only store the explicit slots in our DFA\n    /// transition table that need to be saved. Implicit slots are handled\n    /// automatically as part of the search.\n    explicit_slot_start: usize,\n}\n#[derive(Clone, Copy)]\nstruct PatternEpsilons(u64);\n#[derive(Clone)]\npub struct DFA<T> {\n    /// The transition table for this DFA. This includes the transitions\n    /// themselves, along with the stride, number of states and the equivalence\n    /// class mapping.\n    tt: TransitionTable<T>,\n    /// The set of starting state identifiers for this DFA. The starting state\n    /// IDs act as pointers into the transition table. The specific starting\n    /// state chosen for each search is dependent on the context at which the\n    /// search begins.\n    st: StartTable<T>,\n    /// The set of match states and the patterns that match for each\n    /// corresponding match state.\n    ///\n    /// This structure is technically only needed because of support for\n    /// multi-regexes. Namely, multi-regexes require answering not just whether\n    /// a match exists, but _which_ patterns match. So we need to store the\n    /// matching pattern IDs for each match state. We do this even when there\n    /// is only one pattern for the sake of simplicity. In practice, this uses\n    /// up very little space for the case of one pattern.\n    ms: MatchStates<T>,\n    /// Information about which states are \"special.\" Special states are states\n    /// that are dead, quit, matching, starting or accelerated. For more info,\n    /// see the docs for `Special`.\n    special: Special,\n    /// The accelerators for this DFA.\n    ///\n    /// If a state is accelerated, then there exist only a small number of\n    /// bytes that can cause the DFA to leave the state. This permits searching\n    /// to use optimized routines to find those specific bytes instead of using\n    /// the transition table.\n    ///\n    /// All accelerated states exist in a contiguous range in the DFA's\n    /// transition table. See dfa/special.rs for more details on how states are\n    /// arranged.\n    accels: Accels<T>,\n    /// Any prefilter attached to this DFA.\n    ///\n    /// Note that currently prefilters are not serialized. When deserializing\n    /// a DFA from bytes, this is always set to `None`.\n    pre: Option<Prefilter>,\n    /// The set of \"quit\" bytes for this DFA.\n    ///\n    /// This is only used when computing the start state for a particular\n    /// position in a haystack. Namely, in the case where there is a quit\n    /// byte immediately before the start of the search, this set needs to be\n    /// explicitly consulted. In all other cases, quit bytes are detected by\n    /// the DFA itself, by transitioning all quit bytes to a special \"quit\n    /// state.\"\n    quitset: ByteSet,\n    /// Various flags describing the behavior of this DFA.\n    flags: Flags,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct DFA {\n    config: Config,\n    nfa: thompson::NFA,\n    stride2: usize,\n    start_map: StartByteMap,\n    classes: ByteClasses,\n    quitset: ByteSet,\n    cache_capacity: usize,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Debug)]\npub(crate) struct DFA(Option<DFAEngine>);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone)]\npub(crate) struct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone)]\npub struct DFA<T> {\n    tt: Transitions<T>,\n    st: StartTable<T>,\n    special: Special,\n    pre: Option<Prefilter>,\n    quitset: ByteSet,\n    flags: Flags,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\nimpl<'a> InternalBuilder<'a> {\n    fn new(config: Config, nfa: &'a NFA) -> InternalBuilder<'a> {}\n    fn build(mut self) -> Result<DFA, BuildError> {}\n    fn shuffle_states(&mut self) {\n        let mut remapper = Remapper::new(&self.dfa);\n        let mut next_dest = self.dfa.last_state_id();\n        for i in (0..self.dfa.state_len()).rev() {\n            let id = StateID::must(i);\n            let is_match = self.dfa.pattern_epsilons(id).pattern_id().is_some();\n            if !is_match {\n                continue;\n            }\n            remapper.swap(&mut self.dfa, next_dest, id);\n            self.dfa.min_match_id = next_dest;\n            next_dest = self\n                .dfa\n                .prev_state_id(next_dest)\n                .expect(\"match states should be a proper subset of all states\");\n        }\n        remapper.remap(&mut self.dfa);\n    }\n    fn compile_transition(\n        &mut self,\n        dfa_id: StateID,\n        trans: &thompson::Transition,\n        epsilons: Epsilons,\n    ) -> Result<(), BuildError> {}\n    fn add_start_state(\n        &mut self,\n        pid: Option<PatternID>,\n        nfa_id: StateID,\n    ) -> Result<StateID, BuildError> {}\n    fn add_dfa_state_for_nfa_state(\n        &mut self,\n        nfa_id: StateID,\n    ) -> Result<StateID, BuildError> {}\n    fn add_empty_state(&mut self) -> Result<StateID, BuildError> {}\n    fn stack_push(\n        &mut self,\n        nfa_id: StateID,\n        epsilons: Epsilons,\n    ) -> Result<(), BuildError> {}\n}\nimpl Remapper {\n    pub(super) fn new(r: &impl Remappable) -> Remapper {\n        let idxmap = IndexMapper {\n            stride2: r.stride2(),\n        };\n        let map = (0..r.state_len()).map(|i| idxmap.to_state_id(i)).collect();\n        Remapper { map, idxmap }\n    }\n    pub(super) fn swap(&mut self, r: &mut impl Remappable, id1: StateID, id2: StateID) {\n        if id1 == id2 {\n            return;\n        }\n        r.swap_states(id1, id2);\n        self.map.swap(self.idxmap.to_index(id1), self.idxmap.to_index(id2));\n    }\n    pub(super) fn remap(mut self, r: &mut impl Remappable) {\n        let oldmap = self.map.clone();\n        for i in 0..r.state_len() {\n            let cur_id = self.idxmap.to_state_id(i);\n            let mut new_id = oldmap[i];\n            if cur_id == new_id {\n                continue;\n            }\n            loop {\n                let id = oldmap[self.idxmap.to_index(new_id)];\n                if cur_id == id {\n                    self.map[i] = new_id;\n                    break;\n                }\n                new_id = id;\n            }\n        }\n        r.remap(|next| self.map[self.idxmap.to_index(next)]);\n    }\n}\nimpl DFA {\n    fn start(&self) -> StateID {}\n    fn start_pattern(&self, pid: PatternID) -> Result<StateID, MatchError> {}\n    fn transition(&self, sid: StateID, byte: u8) -> Transition {}\n    fn set_transition(&mut self, sid: StateID, byte: u8, to: Transition) {}\n    fn sparse_transitions(&self, sid: StateID) -> SparseTransitionIter<'_> {}\n    fn pattern_epsilons(&self, sid: StateID) -> PatternEpsilons {\n        let offset = sid.as_usize() << self.stride2();\n        PatternEpsilons(self.table[offset + self.pateps_offset].0)\n    }\n    fn set_pattern_epsilons(&mut self, sid: StateID, pateps: PatternEpsilons) {}\n    fn prev_state_id(&self, id: StateID) -> Option<StateID> {\n        if id == DEAD {\n            None\n        } else {\n            Some(StateID::new_unchecked(id.as_usize().checked_sub(1).unwrap()))\n        }\n    }\n    fn last_state_id(&self) -> StateID {\n        StateID::new_unchecked(\n            (self.table.len() >> self.stride2()).checked_sub(1).unwrap(),\n        )\n    }\n    pub(super) fn swap_states(&mut self, id1: StateID, id2: StateID) {}\n    pub(super) fn remap(&mut self, map: impl Fn(StateID) -> StateID) {}\n}\nimpl PatternEpsilons {\n    const PATTERN_ID_BITS: u64 = 22;\n    const PATTERN_ID_SHIFT: u64 = 64 - PatternEpsilons::PATTERN_ID_BITS;\n    const PATTERN_ID_NONE: u64 = 0x00000000_003FFFFF;\n    const PATTERN_ID_LIMIT: u64 = PatternEpsilons::PATTERN_ID_NONE;\n    const PATTERN_ID_MASK: u64 = 0xFFFFFC00_00000000;\n    const EPSILONS_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn empty() -> PatternEpsilons {}\n    fn is_empty(self) -> bool {}\n    fn pattern_id(self) -> Option<PatternID> {\n        let pid = self.0 >> PatternEpsilons::PATTERN_ID_SHIFT;\n        if pid == PatternEpsilons::PATTERN_ID_LIMIT {\n            None\n        } else {\n            Some(PatternID::new_unchecked(pid.as_usize()))\n        }\n    }\n    fn pattern_id_unchecked(self) -> PatternID {}\n    fn set_pattern_id(self, pid: PatternID) -> PatternEpsilons {}\n    fn epsilons(self) -> Epsilons {}\n    fn set_epsilons(self, epsilons: Epsilons) -> PatternEpsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Shuffle all match states to the end of the transition table and set\n/// 'min_match_id' to the ID of the first such match state.\n///\n/// The point of this is to make it extremely cheap to determine whether\n/// a state is a match state or not. We need to check on this on every\n/// transition during a search, so it being cheap is important. This\n/// permits us to check it by simply comparing two state identifiers, as\n/// opposed to looking for the pattern ID in the state's `PatternEpsilons`.\n/// (Which requires a memory load and some light arithmetic.)\n737 fn shuffle_states(&mut self) {\n738     let mut remapper = Remapper::new(&self.dfa);\n739     let mut next_dest = self.dfa.last_state_id();\n740     for i in (0..self.dfa.state_len()).rev() {\n741         let id = StateID::must(i);\n742         let is_match =\n743             self.dfa.pattern_epsilons(id).pattern_id().is_some();\n744         if !is_match {\n745             continue;\n746         }\n747         remapper.swap(&mut self.dfa, next_dest, id);\n748         self.dfa.min_match_id = next_dest;\n749         next_dest = self.dfa.prev_state_id(next_dest).expect(\n750             \"match states should be a proper subset of all states\",\n751         );\n752     }\n753     remapper.remap(&mut self.dfa);\n754 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}