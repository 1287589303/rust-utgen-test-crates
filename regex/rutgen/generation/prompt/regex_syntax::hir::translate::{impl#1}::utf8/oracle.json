{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\n#[derive(Clone, Debug)]\npub struct TranslatorBuilder {\n    utf8: bool,\n    line_terminator: u8,\n    flags: Flags,\n}\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    crlf: Option<bool>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Flags {\n    /// The span of this group of flags.\n    pub span: Span,\n    /// A sequence of flag items. Each item is either a flag or a negation\n    /// operator.\n    pub items: Vec<FlagsItem>,\n}\nimpl TranslatorBuilder {\n    pub fn new() -> TranslatorBuilder {}\n    pub fn build(&self) -> Translator {}\n    pub fn utf8(&mut self, yes: bool) -> &mut TranslatorBuilder {\n        self.utf8 = yes;\n        self\n    }\n    pub fn line_terminator(&mut self, byte: u8) -> &mut TranslatorBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn unicode(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// When disabled, translation will permit the construction of a regular\n/// expression that may match invalid UTF-8.\n///\n/// When enabled (the default), the translator is guaranteed to produce an\n/// expression that, for non-empty matches, will only ever produce spans\n/// that are entirely valid UTF-8 (otherwise, the translator will return an\n/// error).\n///\n/// Perhaps surprisingly, when UTF-8 is enabled, an empty regex or even\n/// a negated ASCII word boundary (uttered as `(?-u:\\B)` in the concrete\n/// syntax) will be allowed even though they can produce matches that split\n/// a UTF-8 encoded codepoint. This only applies to zero-width or \"empty\"\n/// matches, and it is expected that the regex engine itself must handle\n/// these cases if necessary (perhaps by suppressing any zero-width matches\n/// that split a codepoint).\n67 pub fn utf8(&mut self, yes: bool) -> &mut TranslatorBuilder {\n68     self.utf8 = yes;\n69     self\n70 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}