{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Debug, Default)]\nstruct GroupInfoInner {\n    slot_ranges: Vec<(SmallIndex, SmallIndex)>,\n    name_to_index: Vec<CaptureNameMap>,\n    index_to_name: Vec<Vec<Option<Arc<str>>>>,\n    memory_extra: usize,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct SmallIndex(u32);\nimpl GroupInfoInner {\n    fn add_first_group(&mut self, pid: PatternID) {}\n    fn add_explicit_group<N: AsRef<str>>(\n        &mut self,\n        pid: PatternID,\n        group: SmallIndex,\n        maybe_name: Option<N>,\n    ) -> Result<(), GroupInfoError> {}\n    fn fixup_slot_ranges(&mut self) -> Result<(), GroupInfoError> {}\n    fn pattern_len(&self) -> usize {}\n    fn group_len(&self, pid: PatternID) -> usize {}\n    fn small_slot_len(&self) -> SmallIndex {\n        self.slot_ranges.last().map_or(SmallIndex::ZERO, |&(_, end)| end)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the total number of slots in this capture slot info as a\n/// \"small index.\"\n2316 fn small_slot_len(&self) -> SmallIndex {\n2317     // Since slots are allocated in order of pattern (starting at 0) and\n2318     // then in order of capture group, it follows that the number of slots\n2319     // is the end of the range of slots for the last pattern. This is\n2320     // true even when the last pattern has no capturing groups, since\n2321     // 'slot_ranges' will still represent it explicitly with an empty\n2322     // range.\n2323     self.slot_ranges.last().map_or(SmallIndex::ZERO, |&(_, end)| end)\n2324 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}