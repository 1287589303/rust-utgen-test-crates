{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Debug)]\npub struct SplitN<'r, 'h> {\n    splits: Split<'r, 'h>,\n    limit: usize,\n}\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Debug)]\npub struct Split<'r, 'h> {\n    finder: FindMatches<'r, 'h>,\n    last: usize,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\nstruct Split {\n    partitions: [SplitRange; 3],\n    len: usize,\n}\nimpl<'r, 'h> Iterator for SplitN<'r, 'h> {\n    type Item = Span;\n    fn next(&mut self) -> Option<Span> {\n        if self.limit == 0 {\n            return None;\n        }\n        self.limit -= 1;\n        if self.limit > 0 {\n            return self.splits.next();\n        }\n        let len = self.splits.finder.it.input().haystack().len();\n        if self.splits.last > len {\n            None\n        } else {\n            Some(Span::from(self.splits.last..len))\n        }\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {}\n}\nimpl<'h> Searcher<'h> {\n    pub fn new(input: Input<'h>) -> Searcher<'h> {}\n    pub fn input<'s>(&'s self) -> &'s Input<'h> {\n        &self.input\n    }\n    #[inline]\n    pub fn advance_half<F>(&mut self, finder: F) -> Option<HalfMatch>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn advance<F>(&mut self, finder: F) -> Option<Match>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance_half<F>(\n        &mut self,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance<F>(&mut self, mut finder: F) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_half_matches_iter<F>(self, finder: F) -> TryHalfMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_matches_iter<F>(self, finder: F) -> TryMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub fn into_captures_iter<F>(\n        self,\n        caps: Captures,\n        finder: F,\n    ) -> TryCapturesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_half_match<F>(\n        &mut self,\n        _: HalfMatch,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_match<F>(\n        &mut self,\n        m: Match,\n        mut finder: F,\n    ) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {\n        self.haystack\n    }\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2254 fn next(&mut self) -> Option<Span> {\n2255     if self.limit == 0 {\n2256         return None;\n2257     }\n2258 \n2259     self.limit -= 1;\n2260     if self.limit > 0 {\n2261         return self.splits.next();\n2262     }\n2263 \n2264     let len = self.splits.finder.it.input().haystack().len();\n2265     if self.splits.last > len {\n2266         // We've already returned all substrings.\n2267         None\n2268     } else {\n2269         // self.n == 0, so future calls will return None immediately\n2270         Some(Span::from(self.splits.last..len))\n2271     }\n2272 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}