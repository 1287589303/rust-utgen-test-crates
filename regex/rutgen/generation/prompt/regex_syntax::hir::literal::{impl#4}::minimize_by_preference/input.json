{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Eq, PartialEq)]\npub struct Seq {\n    /// The members of this seq.\n    ///\n    /// When `None`, the seq represents all possible literals. That is, it\n    /// prevents one from making assumptions about specific literals in the\n    /// seq, and forces one to treat it as if any literal might be in the seq.\n    ///\n    /// Note that `Some(vec![])` is valid and corresponds to the empty seq of\n    /// literals, i.e., a regex that can never match. For example, `[a&&b]`.\n    /// It is distinct from `Some(vec![\"\"])`, which corresponds to the seq\n    /// containing an empty string, which matches at every position.\n    literals: Option<Vec<Literal>>,\n}\n#[derive(Debug)]\nstruct PreferenceTrie {\n    /// The states in this trie. The index of a state in this vector is its ID.\n    states: Vec<State>,\n    /// This vec indicates which states are match states. It always has\n    /// the same length as `states` and is indexed by the same state ID.\n    /// A state with identifier `sid` is a match state if and only if\n    /// `matches[sid].is_some()`. The option contains the index of the literal\n    /// corresponding to the match. The index is offset by 1 so that it fits in\n    /// a NonZeroUsize.\n    matches: Vec<Option<NonZeroUsize>>,\n    /// The index to allocate to the next literal added to this trie. Starts at\n    /// 1 and increments by 1 for every literal successfully added to the trie.\n    next_literal_index: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n#[derive(Clone, Eq, PartialEq, PartialOrd, Ord)]\npub struct Literal {\n    bytes: Vec<u8>,\n    exact: bool,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Literal(pub Box<[u8]>);\nimpl Seq {\n    #[inline]\n    pub fn empty() -> Seq {}\n    #[inline]\n    pub fn infinite() -> Seq {}\n    #[inline]\n    pub fn singleton(lit: Literal) -> Seq {}\n    #[inline]\n    pub fn new<I, B>(it: I) -> Seq\n    where\n        I: IntoIterator<Item = B>,\n        B: AsRef<[u8]>,\n    {}\n    #[inline]\n    pub fn literals(&self) -> Option<&[Literal]> {}\n    #[inline]\n    pub fn push(&mut self, lit: Literal) {}\n    #[inline]\n    pub fn make_inexact(&mut self) {}\n    #[inline]\n    pub fn make_infinite(&mut self) {}\n    #[inline]\n    pub fn cross_forward(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn cross_reverse(&mut self, other: &mut Seq) {}\n    fn cross_preamble<'a>(\n        &'a mut self,\n        other: &'a mut Seq,\n    ) -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {}\n    #[inline]\n    pub fn union(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn union_into_empty(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn dedup(&mut self) {}\n    #[inline]\n    pub fn sort(&mut self) {}\n    #[inline]\n    pub fn reverse_literals(&mut self) {}\n    #[inline]\n    pub fn minimize_by_preference(&mut self) {\n        if let Some(ref mut lits) = self.literals {\n            PreferenceTrie::minimize(lits, false);\n        }\n    }\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn is_finite(&self) -> bool {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn is_inexact(&self) -> bool {}\n    #[inline]\n    pub fn max_union_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn max_cross_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn min_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn max_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn longest_common_prefix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn longest_common_suffix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn optimize_for_prefix_by_preference(&mut self) {}\n    #[inline]\n    pub fn optimize_for_suffix_by_preference(&mut self) {}\n    fn optimize_by_preference(&mut self, prefix: bool) {}\n}\nimpl PreferenceTrie {\n    fn minimize(literals: &mut Vec<Literal>, keep_exact: bool) {\n        let mut trie = PreferenceTrie {\n            states: vec![],\n            matches: vec![],\n            next_literal_index: 1,\n        };\n        let mut make_inexact = vec![];\n        literals\n            .retain_mut(|lit| match trie.insert(lit.as_bytes()) {\n                Ok(_) => true,\n                Err(i) => {\n                    if !keep_exact {\n                        make_inexact.push(i.checked_sub(1).unwrap());\n                    }\n                    false\n                }\n            });\n        for i in make_inexact {\n            literals[i].make_inexact();\n        }\n    }\n    fn insert(&mut self, bytes: &[u8]) -> Result<usize, usize> {}\n    fn root(&mut self) -> usize {}\n    fn create_state(&mut self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Shrinks this seq to its minimal size while respecting the preference\n/// order of its literals.\n///\n/// While this routine will remove duplicate literals from this seq, it\n/// will also remove literals that can never match in a leftmost-first or\n/// \"preference order\" search. Similar to [`Seq::dedup`], if a literal is\n/// deduped, then the one that remains is made inexact.\n///\n/// This is a no-op on seqs that are empty or not finite.\n///\n/// # Example\n///\n/// This example shows the difference between `{sam, samwise}` and\n/// `{samwise, sam}`.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// // If 'sam' comes before 'samwise' and a preference order search is\n/// // executed, then 'samwise' can never match.\n/// let mut seq = Seq::new(&[\"sam\", \"samwise\"]);\n/// seq.minimize_by_preference();\n/// assert_eq!(Seq::from_iter([Literal::inexact(\"sam\")]), seq);\n///\n/// // But if they are reversed, then it's possible for 'samwise' to match\n/// // since it is given higher preference.\n/// let mut seq = Seq::new(&[\"samwise\", \"sam\"]);\n/// seq.minimize_by_preference();\n/// assert_eq!(Seq::new(&[\"samwise\", \"sam\"]), seq);\n/// ```\n///\n/// This example shows that if an empty string is in this seq, then\n/// anything that comes after it can never match.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// // An empty string is a prefix of all strings, so it automatically\n/// // inhibits any subsequent strings from matching.\n/// let mut seq = Seq::new(&[\"foo\", \"bar\", \"\", \"quux\", \"fox\"]);\n/// seq.minimize_by_preference();\n/// let expected = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::exact(\"bar\"),\n///     Literal::inexact(\"\"),\n/// ]);\n/// assert_eq!(expected, seq);\n///\n/// // And of course, if it's at the beginning, then it makes it impossible\n/// // for anything else to match.\n/// let mut seq = Seq::new(&[\"\", \"foo\", \"quux\", \"fox\"]);\n/// seq.minimize_by_preference();\n/// assert_eq!(Seq::from_iter([Literal::inexact(\"\")]), seq);\n/// ```\n1463 pub fn minimize_by_preference(&mut self) {\n1464     if let Some(ref mut lits) = self.literals {\n1465         PreferenceTrie::minimize(lits, false);\n1466     }\n1467 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}