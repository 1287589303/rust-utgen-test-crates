{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/backtrack.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchError, Span},\n    },\n};\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn visited_capacity(mut self, capacity: usize) -> Config {\n        self.visited_capacity = Some(capacity);\n        self\n    }\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_visited_capacity(&self) -> usize {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the visited capacity used to bound backtracking.\n///\n/// The visited capacity represents the amount of heap memory (in bytes) to\n/// allocate toward tracking which parts of the backtracking search have\n/// been done before. The heap memory needed for any particular search is\n/// proportional to `haystack.len() * nfa.states().len()`, which an be\n/// quite large. Therefore, the bounded backtracker is typically only able\n/// to run on shorter haystacks.\n///\n/// For a given regex, increasing the visited capacity means that the\n/// maximum haystack length that can be searched is increased. The\n/// [`BoundedBacktracker::max_haystack_len`] method returns that maximum.\n///\n/// The default capacity is a reasonable but empirically chosen size.\n///\n/// # Example\n///\n/// As with other regex engines, Unicode is what tends to make the bounded\n/// backtracker less useful by making the maximum haystack length quite\n/// small. If necessary, increasing the visited capacity using this routine\n/// will increase the maximum haystack length at the cost of using more\n/// memory.\n///\n/// Note though that the specific maximum values here are not an API\n/// guarantee. The default visited capacity is subject to change and not\n/// covered by semver.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::backtrack::BoundedBacktracker;\n///\n/// // Unicode inflates the size of the underlying NFA quite a bit, and\n/// // thus means that the backtracker can only handle smaller haystacks,\n/// // assuming that the visited capacity remains unchanged.\n/// let re = BoundedBacktracker::new(r\"\\w+\")?;\n/// assert!(re.max_haystack_len() <= 7_000);\n/// // But we can increase the visited capacity to handle bigger haystacks!\n/// let re = BoundedBacktracker::builder()\n///     .configure(BoundedBacktracker::config().visited_capacity(1<<20))\n///     .build(r\"\\w+\")?;\n/// assert!(re.max_haystack_len() >= 25_000);\n/// assert!(re.max_haystack_len() <= 28_000);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n171 pub fn visited_capacity(mut self, capacity: usize) -> Config {\n172     self.visited_capacity = Some(capacity);\n173     self\n174 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}