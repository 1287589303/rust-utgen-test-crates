{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassBytes {\n    set: IntervalSet<ClassBytesRange>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\n#[derive(Clone, Eq, PartialEq)]\npub enum Class {\n    /// A set of characters represented by Unicode scalar values.\n    Unicode(ClassUnicode),\n    /// A set of characters represented by arbitrary bytes (one byte per\n    /// character).\n    Bytes(ClassBytes),\n}\nimpl Class {\n    pub fn case_fold_simple(&mut self) {}\n    pub fn try_case_fold_simple(&mut self) -> core::result::Result<(), CaseFoldError> {}\n    pub fn negate(&mut self) {}\n    pub fn is_utf8(&self) -> bool {}\n    pub fn minimum_len(&self) -> Option<usize> {}\n    pub fn maximum_len(&self) -> Option<usize> {\n        match *self {\n            Class::Unicode(ref x) => x.maximum_len(),\n            Class::Bytes(ref x) => x.maximum_len(),\n        }\n    }\n    pub fn is_empty(&self) -> bool {}\n    pub fn literal(&self) -> Option<Vec<u8>> {}\n}\nimpl ClassBytes {\n    pub fn new<I>(ranges: I) -> ClassBytes\n    where\n        I: IntoIterator<Item = ClassBytesRange>,\n    {}\n    pub fn empty() -> ClassBytes {}\n    pub fn push(&mut self, range: ClassBytesRange) {}\n    pub fn iter(&self) -> ClassBytesIter<'_> {}\n    pub fn ranges(&self) -> &[ClassBytesRange] {}\n    pub fn case_fold_simple(&mut self) {}\n    pub fn negate(&mut self) {}\n    pub fn union(&mut self, other: &ClassBytes) {}\n    pub fn intersect(&mut self, other: &ClassBytes) {}\n    pub fn difference(&mut self, other: &ClassBytes) {}\n    pub fn symmetric_difference(&mut self, other: &ClassBytes) {}\n    pub fn is_ascii(&self) -> bool {}\n    pub fn minimum_len(&self) -> Option<usize> {}\n    pub fn maximum_len(&self) -> Option<usize> {\n        if self.ranges().is_empty() { None } else { Some(1) }\n    }\n    pub fn literal(&self) -> Option<Vec<u8>> {}\n    pub fn to_unicode_class(&self) -> Option<ClassUnicode> {}\n}\nimpl ClassUnicode {\n    pub fn new<I>(ranges: I) -> ClassUnicode\n    where\n        I: IntoIterator<Item = ClassUnicodeRange>,\n    {}\n    pub fn empty() -> ClassUnicode {}\n    pub fn push(&mut self, range: ClassUnicodeRange) {}\n    pub fn iter(&self) -> ClassUnicodeIter<'_> {}\n    pub fn ranges(&self) -> &[ClassUnicodeRange] {}\n    pub fn case_fold_simple(&mut self) {}\n    pub fn try_case_fold_simple(&mut self) -> core::result::Result<(), CaseFoldError> {}\n    pub fn negate(&mut self) {}\n    pub fn union(&mut self, other: &ClassUnicode) {}\n    pub fn intersect(&mut self, other: &ClassUnicode) {}\n    pub fn difference(&mut self, other: &ClassUnicode) {}\n    pub fn symmetric_difference(&mut self, other: &ClassUnicode) {}\n    pub fn is_ascii(&self) -> bool {}\n    pub fn minimum_len(&self) -> Option<usize> {}\n    pub fn maximum_len(&self) -> Option<usize> {\n        let last = self.ranges().last()?;\n        Some(last.end.len_utf8())\n    }\n    pub fn literal(&self) -> Option<Vec<u8>> {}\n    pub fn to_byte_class(&self) -> Option<ClassBytes> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the length, in bytes, of the longest string matched by this\n/// character class.\n///\n/// For non-empty byte oriented classes, this always returns `1`. For\n/// non-empty Unicode oriented classes, this can return `1`, `2`, `3` or\n/// `4`. For empty classes, `None` is returned. It is impossible for `0` to\n/// be returned.\n///\n/// # Example\n///\n/// This example shows some examples of regexes and their corresponding\n/// maximum length, if any.\n///\n/// ```\n/// use regex_syntax::{hir::Properties, parse};\n///\n/// // The empty string has a max length of 0.\n/// let hir = parse(r\"\")?;\n/// assert_eq!(Some(0), hir.properties().maximum_len());\n/// // As do other types of regexes that only match the empty string.\n/// let hir = parse(r\"^$\\b\\B\")?;\n/// assert_eq!(Some(0), hir.properties().maximum_len());\n/// // A regex that matches nothing has no maximum defined.\n/// let hir = parse(r\"[a&&b]\")?;\n/// assert_eq!(None, hir.properties().maximum_len());\n/// // Bounded repeats work as you expect.\n/// let hir = parse(r\"x{2,10}\")?;\n/// assert_eq!(Some(10), hir.properties().maximum_len());\n/// // An unbounded repeat means there is no maximum.\n/// let hir = parse(r\"x{2,}\")?;\n/// assert_eq!(None, hir.properties().maximum_len());\n/// // With Unicode enabled, \\w can match up to 4 bytes!\n/// let hir = parse(r\"\\w\")?;\n/// assert_eq!(Some(4), hir.properties().maximum_len());\n/// // Without Unicode enabled, \\w matches at most 1 byte.\n/// let hir = parse(r\"(?-u)\\w\")?;\n/// assert_eq!(Some(1), hir.properties().maximum_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n 997 pub fn maximum_len(&self) -> Option<usize> {\n 998     match *self {\n 999         Class::Unicode(ref x) => x.maximum_len(),\n1000         Class::Bytes(ref x) => x.maximum_len(),\n1001     }\n1002 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}