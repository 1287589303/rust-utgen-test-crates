{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub struct SimpleCaseFolder {\n    /// The simple case fold table. It's a sorted association list, where the\n    /// keys are Unicode scalar values and the values are the corresponding\n    /// equivalence class (not including the key) of the \"simple\" case folded\n    /// Unicode scalar values.\n    table: &'static [(char, &'static [char])],\n    /// The last codepoint that was used for a lookup.\n    last: Option<char>,\n    /// The index to the entry in `table` corresponding to the smallest key `k`\n    /// such that `k > k0`, where `k0` is the most recent key lookup. Note that\n    /// in particular, `k0` may not be in the table!\n    next: usize,\n}\nimpl SimpleCaseFolder {\n    pub fn new() -> Result<SimpleCaseFolder, CaseFoldError> {}\n    pub fn mapping(&mut self, c: char) -> &'static [char] {}\n    pub fn overlaps(&self, start: char, end: char) -> bool {\n        use core::cmp::Ordering;\n        assert!(start <= end);\n        self.table\n            .binary_search_by(|&(c, _)| {\n                if start <= c && c <= end {\n                    Ordering::Equal\n                } else if c > end {\n                    Ordering::Greater\n                } else {\n                    Ordering::Less\n                }\n            })\n            .is_ok()\n    }\n    fn get(&self, c: char) -> Result<usize, usize> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given range overlaps with any region\n/// of the underlying case folding table. That is, when true, there exists\n/// at least one codepoint in the inclusive range `[start, end]` that has\n/// a non-trivial equivalence class of case folded codepoints. Conversely,\n/// when this returns false, all codepoints in the range `[start, end]`\n/// correspond to the trivial equivalence class of case folded codepoints,\n/// i.e., itself.\n///\n/// This is useful to call before iterating over the codepoints in the\n/// range and looking up the mapping for each. If you know none of the\n/// mappings will return anything, then you might be able to skip doing it\n/// altogether.\n///\n/// # Panics\n///\n/// This panics when `end < start`.\n178 pub fn overlaps(&self, start: char, end: char) -> bool {\n179     use core::cmp::Ordering;\n180 \n181     assert!(start <= end);\n182     self.table\n183         .binary_search_by(|&(c, _)| {\n184             if start <= c && c <= end {\n185                 Ordering::Equal\n186             } else if c > end {\n187                 Ordering::Greater\n188             } else {\n189                 Ordering::Less\n190             }\n191         })\n192         .is_ok()\n193 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}