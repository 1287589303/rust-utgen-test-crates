{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Eq, PartialEq)]\npub struct Seq {\n    /// The members of this seq.\n    ///\n    /// When `None`, the seq represents all possible literals. That is, it\n    /// prevents one from making assumptions about specific literals in the\n    /// seq, and forces one to treat it as if any literal might be in the seq.\n    ///\n    /// Note that `Some(vec![])` is valid and corresponds to the empty seq of\n    /// literals, i.e., a regex that can never match. For example, `[a&&b]`.\n    /// It is distinct from `Some(vec![\"\"])`, which corresponds to the seq\n    /// containing an empty string, which matches at every position.\n    literals: Option<Vec<Literal>>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Literal(pub Box<[u8]>);\n#[derive(Clone, Eq, PartialEq, PartialOrd, Ord)]\npub struct Literal {\n    bytes: Vec<u8>,\n    exact: bool,\n}\nimpl Seq {\n    #[inline]\n    pub fn empty() -> Seq {}\n    #[inline]\n    pub fn infinite() -> Seq {\n        Seq { literals: None }\n    }\n    #[inline]\n    pub fn singleton(lit: Literal) -> Seq {}\n    #[inline]\n    pub fn new<I, B>(it: I) -> Seq\n    where\n        I: IntoIterator<Item = B>,\n        B: AsRef<[u8]>,\n    {}\n    #[inline]\n    pub fn literals(&self) -> Option<&[Literal]> {}\n    #[inline]\n    pub fn push(&mut self, lit: Literal) {}\n    #[inline]\n    pub fn make_inexact(&mut self) {\n        let lits = match self.literals {\n            None => return,\n            Some(ref mut lits) => lits,\n        };\n        for lit in lits.iter_mut() {\n            lit.make_inexact();\n        }\n    }\n    #[inline]\n    pub fn make_infinite(&mut self) {}\n    #[inline]\n    pub fn cross_forward(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn cross_reverse(&mut self, other: &mut Seq) {}\n    fn cross_preamble<'a>(\n        &'a mut self,\n        other: &'a mut Seq,\n    ) -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {\n        let lits2 = match other.literals {\n            None => {\n                if self.min_literal_len() == Some(0) {\n                    *self = Seq::infinite();\n                } else {\n                    self.make_inexact();\n                }\n                return None;\n            }\n            Some(ref mut lits) => lits,\n        };\n        let lits1 = match self.literals {\n            None => {\n                lits2.drain(..);\n                return None;\n            }\n            Some(ref mut lits) => lits,\n        };\n        Some((lits1, lits2))\n    }\n    #[inline]\n    pub fn union(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn union_into_empty(&mut self, other: &mut Seq) {}\n    #[inline]\n    pub fn dedup(&mut self) {}\n    #[inline]\n    pub fn sort(&mut self) {}\n    #[inline]\n    pub fn reverse_literals(&mut self) {}\n    #[inline]\n    pub fn minimize_by_preference(&mut self) {}\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn is_finite(&self) -> bool {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn is_inexact(&self) -> bool {}\n    #[inline]\n    pub fn max_union_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn max_cross_len(&self, other: &Seq) -> Option<usize> {}\n    #[inline]\n    pub fn min_literal_len(&self) -> Option<usize> {\n        self.literals.as_ref()?.iter().map(|x| x.len()).min()\n    }\n    #[inline]\n    pub fn max_literal_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn longest_common_prefix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn longest_common_suffix(&self) -> Option<&[u8]> {}\n    #[inline]\n    pub fn optimize_for_prefix_by_preference(&mut self) {}\n    #[inline]\n    pub fn optimize_for_suffix_by_preference(&mut self) {}\n    fn optimize_by_preference(&mut self, prefix: bool) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// A helper function the corresponds to the subtle preamble for both\n/// `cross_forward` and `cross_reverse`. In effect, it handles the cases\n/// of infinite sequences for both `self` and `other`, as well as ensuring\n/// that literals from `other` are drained even if they aren't used.\n1140 fn cross_preamble<'a>(\n1141     &'a mut self,\n1142     other: &'a mut Seq,\n1143 ) -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {\n1144     let lits2 = match other.literals {\n1145         None => {\n1146             // If our current seq contains the empty string and the seq\n1147             // we're adding matches any literal, then it follows that the\n1148             // current seq must now also match any literal.\n1149             //\n1150             // Otherwise, we just have to make sure everything in this\n1151             // sequence is inexact.\n1152             if self.min_literal_len() == Some(0) {\n1153                 *self = Seq::infinite();\n1154             } else {\n1155                 self.make_inexact();\n1156             }\n1157             return None;\n1158         }\n1159         Some(ref mut lits) => lits,\n1160     };\n1161     let lits1 = match self.literals {\n1162         None => {\n1163             // If we aren't going to make it to the end of this routine\n1164             // where lits2 is drained, then we need to do it now.\n1165             lits2.drain(..);\n1166             return None;\n1167         }\n1168         Some(ref mut lits) => lits,\n1169     };\n1170     Some((lits1, lits2))\n1171 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}