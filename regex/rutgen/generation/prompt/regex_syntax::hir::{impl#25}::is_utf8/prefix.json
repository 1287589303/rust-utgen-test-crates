{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Debug, Eq, PartialEq)]\nstruct PropertiesI {\n    minimum_len: Option<usize>,\n    maximum_len: Option<usize>,\n    look_set: LookSet,\n    look_set_prefix: LookSet,\n    look_set_suffix: LookSet,\n    look_set_prefix_any: LookSet,\n    look_set_suffix_any: LookSet,\n    utf8: bool,\n    explicit_captures_len: usize,\n    static_explicit_captures_len: Option<usize>,\n    literal: bool,\n    alternation_literal: bool,\n}\nimpl Properties {\n    #[inline]\n    pub fn minimum_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn maximum_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn look_set(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_suffix(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_suffix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {\n        self.0.utf8\n    }\n    #[inline]\n    pub fn explicit_captures_len(&self) -> usize {}\n    #[inline]\n    pub fn static_explicit_captures_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn is_literal(&self) -> bool {}\n    #[inline]\n    pub fn is_alternation_literal(&self) -> bool {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n    pub fn union<I, P>(props: I) -> Properties\n    where\n        I: IntoIterator<Item = P>,\n        P: core::borrow::Borrow<Properties>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return true if and only if the corresponding HIR will always match\n/// valid UTF-8.\n///\n/// When this returns false, then it is possible for this HIR expression to\n/// match invalid UTF-8, including by matching between the code units of\n/// a single UTF-8 encoded codepoint.\n///\n/// Note that this returns true even when the corresponding HIR can match\n/// the empty string. Since an empty string can technically appear between\n/// UTF-8 code units, it is possible for a match to be reported that splits\n/// a codepoint which could in turn be considered matching invalid UTF-8.\n/// However, it is generally assumed that such empty matches are handled\n/// specially by the search routine if it is absolutely required that\n/// matches not split a codepoint.\n///\n/// # Example\n///\n/// This code example shows the UTF-8 property of a variety of patterns.\n///\n/// ```\n/// use regex_syntax::{ParserBuilder, parse};\n///\n/// // Examples of 'is_utf8() == true'.\n/// assert!(parse(r\"a\")?.properties().is_utf8());\n/// assert!(parse(r\"[^a]\")?.properties().is_utf8());\n/// assert!(parse(r\".\")?.properties().is_utf8());\n/// assert!(parse(r\"\\W\")?.properties().is_utf8());\n/// assert!(parse(r\"\\b\")?.properties().is_utf8());\n/// assert!(parse(r\"\\B\")?.properties().is_utf8());\n/// assert!(parse(r\"(?-u)\\b\")?.properties().is_utf8());\n/// assert!(parse(r\"(?-u)\\B\")?.properties().is_utf8());\n/// // Unicode mode is enabled by default, and in\n/// // that mode, all \\x hex escapes are treated as\n/// // codepoints. So this actually matches the UTF-8\n/// // encoding of U+00FF.\n/// assert!(parse(r\"\\xFF\")?.properties().is_utf8());\n///\n/// // Now we show examples of 'is_utf8() == false'.\n/// // The only way to do this is to force the parser\n/// // to permit invalid UTF-8, otherwise all of these\n/// // would fail to parse!\n/// let parse = |pattern| {\n///     ParserBuilder::new().utf8(false).build().parse(pattern)\n/// };\n/// assert!(!parse(r\"(?-u)[^a]\")?.properties().is_utf8());\n/// assert!(!parse(r\"(?-u).\")?.properties().is_utf8());\n/// assert!(!parse(r\"(?-u)\\W\")?.properties().is_utf8());\n/// // Conversely to the equivalent example above,\n/// // when Unicode mode is disabled, \\x hex escapes\n/// // are treated as their raw byte values.\n/// assert!(!parse(r\"(?-u)\\xFF\")?.properties().is_utf8());\n/// // Note that just because we disabled UTF-8 in the\n/// // parser doesn't mean we still can't use Unicode.\n/// // It is enabled by default, so \\xFF is still\n/// // equivalent to matching the UTF-8 encoding of\n/// // U+00FF by default.\n/// assert!(parse(r\"\\xFF\")?.properties().is_utf8());\n/// // Even though we use raw bytes that individually\n/// // are not valid UTF-8, when combined together, the\n/// // overall expression *does* match valid UTF-8!\n/// assert!(parse(r\"(?-u)\\xE2\\x98\\x83\")?.properties().is_utf8());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n2140 pub fn is_utf8(&self) -> bool {\n2141     self.0.utf8\n2142 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}