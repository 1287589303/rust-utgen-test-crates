{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone, Debug)]\npub struct GroupInfoError {\n    kind: GroupInfoErrorKind,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug)]\nenum GroupInfoErrorKind {\n    /// This occurs when too many patterns have been added. i.e., It would\n    /// otherwise overflow a `PatternID`.\n    TooManyPatterns { err: PatternIDError },\n    /// This occurs when too many capturing groups have been added for a\n    /// particular pattern.\n    TooManyGroups {\n        /// The ID of the pattern that had too many groups.\n        pattern: PatternID,\n        /// The minimum number of groups that the caller has tried to add for\n        /// a pattern.\n        minimum: usize,\n    },\n    /// An error that occurs when a pattern has no capture groups. Either the\n    /// group info must be empty, or all patterns must have at least one group\n    /// (corresponding to the unnamed group for the entire pattern).\n    MissingGroups {\n        /// The ID of the pattern that had no capturing groups.\n        pattern: PatternID,\n    },\n    /// An error that occurs when one tries to provide a name for the capture\n    /// group at index 0. This capturing group must currently always be\n    /// unnamed.\n    FirstMustBeUnnamed {\n        /// The ID of the pattern that was found to have a named first\n        /// capturing group.\n        pattern: PatternID,\n    },\n    /// An error that occurs when duplicate capture group names for the same\n    /// pattern are added.\n    ///\n    /// NOTE: At time of writing, this error can never occur if you're using\n    /// regex-syntax, since the parser itself will reject patterns with\n    /// duplicate capture group names. This error can only occur when the\n    /// builder is used to hand construct NFAs.\n    Duplicate {\n        /// The pattern in which the duplicate capture group name was found.\n        pattern: PatternID,\n        /// The duplicate name.\n        name: String,\n    },\n}\nimpl GroupInfoError {\n    fn too_many_patterns(err: PatternIDError) -> GroupInfoError {}\n    fn too_many_groups(pattern: PatternID, minimum: usize) -> GroupInfoError {}\n    fn missing_groups(pattern: PatternID) -> GroupInfoError {}\n    fn first_must_be_unnamed(pattern: PatternID) -> GroupInfoError {}\n    fn duplicate(pattern: PatternID, name: &str) -> GroupInfoError {\n        GroupInfoError {\n            kind: GroupInfoErrorKind::Duplicate {\n                pattern,\n                name: String::from(name),\n            },\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2407 fn duplicate(pattern: PatternID, name: &str) -> GroupInfoError {\n2408     GroupInfoError {\n2409         kind: GroupInfoErrorKind::Duplicate {\n2410             pattern,\n2411             name: String::from(name),\n2412         },\n2413     }\n2414 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}