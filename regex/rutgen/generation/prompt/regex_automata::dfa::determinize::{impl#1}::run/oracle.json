{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/determinize.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype StateMap = std::collections::HashMap<State, StateID>;\n#[cfg(not(feature = \"std\"))]\ntype StateMap = BTreeMap<State, StateID>;\nuse alloc::{collections::BTreeMap, vec::Vec};\nuse crate::{\n    dfa::{\n        dense::{self, BuildError},\n        DEAD,\n    },\n    nfa::thompson,\n    util::{\n        self, alphabet::{self, ByteSet},\n        determinize::{State, StateBuilderEmpty, StateBuilderNFA},\n        primitives::{PatternID, StateID},\n        search::{Anchored, MatchKind},\n        sparse_set::SparseSets, start::Start,\n    },\n};\n#[derive(Debug)]\nstruct Runner<'a> {\n    /// The configuration used to initialize determinization.\n    config: Config,\n    /// The NFA we're converting into a DFA.\n    nfa: &'a thompson::NFA,\n    /// The DFA we're building.\n    dfa: &'a mut dense::OwnedDFA,\n    /// Each DFA state being built is defined as an *ordered* set of NFA\n    /// states, along with some meta facts about the ordered set of NFA states.\n    ///\n    /// This is never empty. The first state is always a dummy state such that\n    /// a state id == 0 corresponds to a dead state. The second state is always\n    /// the quit state.\n    ///\n    /// Why do we have states in both a `Vec` and in a cache map below?\n    /// Well, they serve two different roles based on access patterns.\n    /// `builder_states` is the canonical home of each state, and provides\n    /// constant random access by a DFA state's ID. The cache map below, on\n    /// the other hand, provides a quick way of searching for identical DFA\n    /// states by using the DFA state as a key in the map. Of course, we use\n    /// reference counting to avoid actually duplicating the state's data\n    /// itself. (Although this has never been benchmarked.) Note that the cache\n    /// map does not give us full minimization; it just lets us avoid some very\n    /// obvious redundant states.\n    ///\n    /// Note that the index into this Vec isn't quite the DFA's state ID.\n    /// Rather, it's just an index. To get the state ID, you have to multiply\n    /// it by the DFA's stride. That's done by self.dfa.from_index. And the\n    /// inverse is self.dfa.to_index.\n    ///\n    /// Moreover, DFA states don't usually retain the IDs assigned to them\n    /// by their position in this Vec. After determinization completes,\n    /// states are shuffled around to support other optimizations. See the\n    /// sibling 'special' module for more details on that. (The reason for\n    /// mentioning this is that if you print out the DFA for debugging during\n    /// determinization, and then print out the final DFA after it is fully\n    /// built, then the state IDs likely won't match up.)\n    builder_states: Vec<State>,\n    /// A cache of DFA states that already exist and can be easily looked up\n    /// via ordered sets of NFA states.\n    ///\n    /// See `builder_states` docs for why we store states in two different\n    /// ways.\n    cache: StateMap,\n    /// The memory usage, in bytes, used by builder_states and cache. We track\n    /// this as new states are added since states use a variable amount of\n    /// heap. Tracking this as we add states makes it possible to compute the\n    /// total amount of memory used by the determinizer in constant time.\n    memory_usage_state: usize,\n    /// A pair of sparse sets for tracking ordered sets of NFA state IDs.\n    /// These are reused throughout determinization. A bounded sparse set\n    /// gives us constant time insertion, membership testing and clearing.\n    sparses: SparseSets,\n    /// Scratch space for a stack of NFA states to visit, for depth first\n    /// visiting without recursion.\n    stack: Vec<StateID>,\n    /// Scratch space for storing an ordered sequence of NFA states, for\n    /// amortizing allocation. This is principally useful for when we avoid\n    /// adding a new DFA state since it already exists. In order to detect this\n    /// case though, we still need an ordered set of NFA state IDs. So we use\n    /// this space to stage that ordered set before we know whether we need to\n    /// create a new DFA state or not.\n    scratch_state_builder: StateBuilderEmpty,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where\n    /// `i = Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Eq, Hash, PartialEq, PartialOrd, Ord)]\npub(crate) struct State(Arc<[u8]>);\n#[derive(Clone, Debug)]\npub(crate) struct StateBuilderEmpty(Vec<u8>);\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\npub(crate) struct State<'a> {\n    id: StateID,\n    stride2: usize,\n    transitions: &'a [StateID],\n}\n#[derive(Clone, Debug)]\npub(crate) struct SparseSets {\n    pub(crate) set1: SparseSet,\n    pub(crate) set2: SparseSet,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone)]\nstruct State<'a> {\n    /// The identifier of this state.\n    id: StateID,\n    /// Whether this is a match state or not.\n    is_match: bool,\n    /// The number of transitions in this state.\n    ntrans: usize,\n    /// Pairs of input ranges, where there is one pair for each transition.\n    /// Each pair specifies an inclusive start and end byte range for the\n    /// corresponding transition.\n    input_ranges: &'a [u8],\n    /// Transitions to the next state. This slice contains native endian\n    /// encoded state identifiers, with `S` as the representation. Thus, there\n    /// are `ntrans * size_of::<S>()` bytes in this slice.\n    next: &'a [u8],\n    /// If this is a match state, then this contains the pattern IDs that match\n    /// when the DFA is in this state.\n    ///\n    /// This is a contiguous sequence of 32-bit native endian encoded integers.\n    pattern_ids: &'a [u8],\n    /// An accelerator for this state, if present. If this state has no\n    /// accelerator, then this is an empty slice. When non-empty, this slice\n    /// has length at most 3 and corresponds to the exhaustive set of bytes\n    /// that must be seen in order to transition out of this state.\n    accel: &'a [u8],\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Default)]\nstruct State {\n    transitions: Vec<Transition>,\n    chunks: Vec<(usize, usize)>,\n}\n#[derive(Clone)]\nstruct State {\n    /// A sorted sequence of non-overlapping transitions to other states. Each\n    /// transition corresponds to a single range of bytes.\n    transitions: Vec<Transition>,\n}\n#[derive(Debug)]\npub struct ByteClassRepresentatives<'a> {\n    classes: &'a ByteClasses,\n    cur_byte: usize,\n    end_byte: Option<usize>,\n    last_class: Option<u8>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\nenum State {\n    /// An empty state whose only purpose is to forward the automaton to\n    /// another state via an unconditional epsilon transition.\n    ///\n    /// Unconditional epsilon transitions are quite useful during the\n    /// construction of an NFA, as they permit the insertion of no-op\n    /// placeholders that make it easier to compose NFA sub-graphs. When\n    /// the Thompson NFA builder produces a final NFA, all unconditional\n    /// epsilon transitions are removed, and state identifiers are remapped\n    /// accordingly.\n    Empty {\n        /// The next state that this state should transition to.\n        next: StateID,\n    },\n    /// A state that only transitions to another state if the current input\n    /// byte is in a particular range of bytes.\n    ByteRange { trans: Transition },\n    /// A state with possibly many transitions, represented in a sparse\n    /// fashion. Transitions must be ordered lexicographically by input range\n    /// and be non-overlapping. As such, this may only be used when every\n    /// transition has equal priority. (In practice, this is only used for\n    /// encoding large UTF-8 automata.) In contrast, a `Union` state has each\n    /// alternate in order of priority. Priority is used to implement greedy\n    /// matching and also alternations themselves, e.g., `abc|a` where `abc`\n    /// has priority over `a`.\n    ///\n    /// To clarify, it is possible to remove `Sparse` and represent all things\n    /// that `Sparse` is used for via `Union`. But this creates a more bloated\n    /// NFA with more epsilon transitions than is necessary in the special case\n    /// of character classes.\n    Sparse { transitions: Vec<Transition> },\n    /// A conditional epsilon transition satisfied via some sort of\n    /// look-around.\n    Look { look: Look, next: StateID },\n    /// An empty state that records the start of a capture location. This is an\n    /// unconditional epsilon transition like `Empty`, except it can be used to\n    /// record position information for a capture group when using the NFA for\n    /// search.\n    CaptureStart {\n        /// The ID of the pattern that this capture was defined.\n        pattern_id: PatternID,\n        /// The capture group index that this capture state corresponds to.\n        /// The capture group index is always relative to its corresponding\n        /// pattern. Therefore, in the presence of multiple patterns, both the\n        /// pattern ID and the capture group index are required to uniquely\n        /// identify a capturing group.\n        group_index: SmallIndex,\n        /// The next state that this state should transition to.\n        next: StateID,\n    },\n    /// An empty state that records the end of a capture location. This is an\n    /// unconditional epsilon transition like `Empty`, except it can be used to\n    /// record position information for a capture group when using the NFA for\n    /// search.\n    CaptureEnd {\n        /// The ID of the pattern that this capture was defined.\n        pattern_id: PatternID,\n        /// The capture group index that this capture state corresponds to.\n        /// The capture group index is always relative to its corresponding\n        /// pattern. Therefore, in the presence of multiple patterns, both the\n        /// pattern ID and the capture group index are required to uniquely\n        /// identify a capturing group.\n        group_index: SmallIndex,\n        /// The next state that this state should transition to.\n        next: StateID,\n    },\n    /// An alternation such that there exists an epsilon transition to all\n    /// states in `alternates`, where matches found via earlier transitions\n    /// are preferred over later transitions.\n    Union { alternates: Vec<StateID> },\n    /// An alternation such that there exists an epsilon transition to all\n    /// states in `alternates`, where matches found via later transitions are\n    /// preferred over earlier transitions.\n    ///\n    /// This \"reverse\" state exists for convenience during compilation that\n    /// permits easy construction of non-greedy combinations of NFA states. At\n    /// the end of compilation, Union and UnionReverse states are merged into\n    /// one Union type of state, where the latter has its epsilon transitions\n    /// reversed to reflect the priority inversion.\n    ///\n    /// The \"convenience\" here arises from the fact that as new states are\n    /// added to the list of `alternates`, we would like that add operation\n    /// to be amortized constant time. But if we used a `Union`, we'd need to\n    /// prepend the state, which takes O(n) time. There are other approaches we\n    /// could use to solve this, but this seems simple enough.\n    UnionReverse { alternates: Vec<StateID> },\n    /// A state that cannot be transitioned out of. This is useful for cases\n    /// where you want to prevent matching from occurring. For example, if your\n    /// regex parser permits empty character classes, then one could choose a\n    /// `Fail` state to represent it.\n    Fail,\n    /// A match state. There is at most one such occurrence of this state in\n    /// an NFA for each pattern compiled into the NFA. At time of writing, a\n    /// match state is always produced for every pattern given, but in theory,\n    /// if a pattern can never lead to a match, then the match state could be\n    /// omitted.\n    ///\n    /// `pattern_id` refers to the ID of the pattern itself, which corresponds\n    /// to the pattern's index (starting at 0).\n    Match { pattern_id: PatternID },\n}\n#[derive(Clone, Eq, PartialEq)]\npub enum State {\n    /// A state with a single transition that can only be taken if the current\n    /// input symbol is in a particular range of bytes.\n    ByteRange {\n        /// The transition from this state to the next.\n        trans: Transition,\n    },\n    /// A state with possibly many transitions represented in a sparse fashion.\n    /// Transitions are non-overlapping and ordered lexicographically by input\n    /// range.\n    ///\n    /// In practice, this is used for encoding UTF-8 automata. Its presence is\n    /// primarily an optimization that avoids many additional unconditional\n    /// epsilon transitions (via [`Union`](State::Union) states), and thus\n    /// decreases the overhead of traversing the NFA. This can improve both\n    /// matching time and DFA construction time.\n    Sparse(SparseTransitions),\n    /// A dense representation of a state with multiple transitions.\n    Dense(DenseTransitions),\n    /// A conditional epsilon transition satisfied via some sort of\n    /// look-around. Look-around is limited to anchor and word boundary\n    /// assertions.\n    ///\n    /// Look-around states are meant to be evaluated while performing epsilon\n    /// closure (computing the set of states reachable from a particular state\n    /// via only epsilon transitions). If the current position in the haystack\n    /// satisfies the look-around assertion, then you're permitted to follow\n    /// that epsilon transition.\n    Look {\n        /// The look-around assertion that must be satisfied before moving\n        /// to `next`.\n        look: Look,\n        /// The state to transition to if the look-around assertion is\n        /// satisfied.\n        next: StateID,\n    },\n    /// An alternation such that there exists an epsilon transition to all\n    /// states in `alternates`, where matches found via earlier transitions\n    /// are preferred over later transitions.\n    Union {\n        /// An ordered sequence of unconditional epsilon transitions to other\n        /// states. Transitions earlier in the sequence are preferred over\n        /// transitions later in the sequence.\n        alternates: Box<[StateID]>,\n    },\n    /// An alternation such that there exists precisely two unconditional\n    /// epsilon transitions, where matches found via `alt1` are preferred over\n    /// matches found via `alt2`.\n    ///\n    /// This state exists as a common special case of Union where there are\n    /// only two alternates. In this case, we don't need any allocations to\n    /// represent the state. This saves a bit of memory and also saves an\n    /// additional memory access when traversing the NFA.\n    BinaryUnion {\n        /// An unconditional epsilon transition to another NFA state. This\n        /// is preferred over `alt2`.\n        alt1: StateID,\n        /// An unconditional epsilon transition to another NFA state. Matches\n        /// reported via this transition should only be reported if no matches\n        /// were found by following `alt1`.\n        alt2: StateID,\n    },\n    /// An empty state that records a capture location.\n    ///\n    /// From the perspective of finite automata, this is precisely equivalent\n    /// to an unconditional epsilon transition, but serves the purpose of\n    /// instructing NFA simulations to record additional state when the finite\n    /// state machine passes through this epsilon transition.\n    ///\n    /// `slot` in this context refers to the specific capture group slot\n    /// offset that is being recorded. Each capturing group has two slots\n    /// corresponding to the start and end of the matching portion of that\n    /// group.\n    ///\n    /// The pattern ID and capture group index are also included in this state\n    /// in case they are useful. But mostly, all you'll need is `next` and\n    /// `slot`.\n    Capture {\n        /// The state to transition to, unconditionally.\n        next: StateID,\n        /// The pattern ID that this capture belongs to.\n        pattern_id: PatternID,\n        /// The capture group index that this capture belongs to. Capture group\n        /// indices are local to each pattern. For example, when capturing\n        /// groups are enabled, every pattern has a capture group at index\n        /// `0`.\n        group_index: SmallIndex,\n        /// The slot index for this capture. Every capturing group has two\n        /// slots: one for the start haystack offset and one for the end\n        /// haystack offset. Unlike capture group indices, slot indices are\n        /// global across all patterns in this NFA. That is, each slot belongs\n        /// to a single pattern, but there is only one slot at index `i`.\n        slot: SmallIndex,\n    },\n    /// A state that cannot be transitioned out of. This is useful for cases\n    /// where you want to prevent matching from occurring. For example, if your\n    /// regex parser permits empty character classes, then one could choose\n    /// a `Fail` state to represent them. (An empty character class can be\n    /// thought of as an empty set. Since nothing is in an empty set, they can\n    /// never match anything.)\n    Fail,\n    /// A match state. There is at least one such occurrence of this state for\n    /// each regex that can match that is in this NFA.\n    Match {\n        /// The matching pattern ID.\n        pattern_id: PatternID,\n    },\n}\nimpl<'a> Runner<'a> {\n    fn run(mut self) -> Result<(), BuildError> {\n        if self.nfa.look_set_any().contains_word_unicode()\n            && !self.config.quit.contains_range(0x80, 0xFF)\n        {\n            return Err(BuildError::unsupported_dfa_word_boundary_unicode());\n        }\n        let representatives: Vec<alphabet::Unit> = self\n            .dfa\n            .byte_classes()\n            .representatives(..)\n            .collect();\n        let mut uncompiled = alloc::vec![];\n        self.add_all_starts(&mut uncompiled)?;\n        while let Some(dfa_id) = uncompiled.pop() {\n            for &unit in &representatives {\n                if unit.as_u8().map_or(false, |b| self.config.quit.contains(b)) {\n                    continue;\n                }\n                let (next_dfa_id, is_new) = self.cached_state(dfa_id, unit)?;\n                self.dfa.set_transition(dfa_id, unit, next_dfa_id);\n                if is_new {\n                    uncompiled.push(next_dfa_id);\n                }\n            }\n        }\n        debug!(\n            \"determinization complete, memory usage: {}, \\\n             dense DFA size: {}, \\\n             is reverse? {}\",\n            self.memory_usage(), self.dfa.memory_usage(), self.nfa.is_reverse(),\n        );\n        let mut matches: BTreeMap<StateID, Vec<PatternID>> = BTreeMap::new();\n        self.cache.clear();\n        #[cfg(feature = \"logging\")]\n        let mut total_pat_len = 0;\n        for (i, state) in self.builder_states.into_iter().enumerate() {\n            if let Some(pat_ids) = state.match_pattern_ids() {\n                let id = self.dfa.to_state_id(i);\n                log! {\n                    total_pat_len += pat_ids.len();\n                }\n                matches.insert(id, pat_ids);\n            }\n        }\n        log! {\n            use core::mem::size_of; let per_elem = size_of::< StateID > () + size_of::<\n            Vec < PatternID >> (); let pats = total_pat_len * size_of::< PatternID > ();\n            let mem = (matches.len() * per_elem) + pats;\n            log::debug!(\"matches map built, memory usage: {}\", mem);\n        }\n        self.dfa.shuffle(matches)?;\n        Ok(())\n    }\n    fn cached_state(\n        &mut self,\n        dfa_id: StateID,\n        unit: alphabet::Unit,\n    ) -> Result<(StateID, bool), BuildError> {\n        let empty_builder = self.get_state_builder();\n        let builder = util::determinize::next(\n            self.nfa,\n            self.config.match_kind,\n            &mut self.sparses,\n            &mut self.stack,\n            &self.builder_states[self.dfa.to_index(dfa_id)],\n            unit,\n            empty_builder,\n        );\n        self.maybe_add_state(builder)\n    }\n    fn add_all_starts(\n        &mut self,\n        dfa_state_ids: &mut Vec<StateID>,\n    ) -> Result<(), BuildError> {\n        assert!(dfa_state_ids.is_empty());\n        if self.dfa.start_kind().has_unanchored() {\n            self.add_start_group(Anchored::No, dfa_state_ids)?;\n        }\n        if self.dfa.start_kind().has_anchored() {\n            self.add_start_group(Anchored::Yes, dfa_state_ids)?;\n        }\n        if self.dfa.starts_for_each_pattern() {\n            for pid in self.nfa.patterns() {\n                self.add_start_group(Anchored::Pattern(pid), dfa_state_ids)?;\n            }\n        }\n        Ok(())\n    }\n    fn add_start_group(\n        &mut self,\n        anchored: Anchored,\n        dfa_state_ids: &mut Vec<StateID>,\n    ) -> Result<(), BuildError> {}\n    fn add_one_start(\n        &mut self,\n        nfa_start: StateID,\n        start: Start,\n    ) -> Result<(StateID, bool), BuildError> {}\n    fn maybe_add_state(\n        &mut self,\n        builder: StateBuilderNFA,\n    ) -> Result<(StateID, bool), BuildError> {}\n    fn add_state(&mut self, builder: StateBuilderNFA) -> Result<StateID, BuildError> {}\n    fn get_state_builder(&mut self) -> StateBuilderEmpty {}\n    fn put_state_builder(&mut self, builder: StateBuilderNFA) {}\n    fn memory_usage(&self) -> usize {}\n}\n#[cfg(feature = \"dfa-build\")]\nimpl BuildError {\n    fn kind(&self) -> &BuildErrorKind {}\n    pub(crate) fn nfa(err: thompson::BuildError) -> BuildError {}\n    pub(crate) fn unsupported_dfa_word_boundary_unicode() -> BuildError {\n        let msg = \"cannot build DFAs for regexes with Unicode word \\\n                   boundaries; switch to ASCII word boundaries, or \\\n                   heuristically enable Unicode word boundaries or use a \\\n                   different regex engine\";\n        BuildError {\n            kind: BuildErrorKind::Unsupported(msg),\n        }\n    }\n    pub(crate) fn too_many_states() -> BuildError {}\n    pub(crate) fn too_many_start_states() -> BuildError {}\n    pub(crate) fn too_many_match_pattern_ids() -> BuildError {}\n    pub(crate) fn dfa_exceeded_size_limit(limit: usize) -> BuildError {}\n    pub(crate) fn determinize_exceeded_size_limit(limit: usize) -> BuildError {}\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {}\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {}\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {\n        use core::ops::Bound;\n        let cur_byte = match range.start_bound() {\n            Bound::Included(&i) => usize::from(i),\n            Bound::Excluded(&i) => usize::from(i).checked_add(1).unwrap(),\n            Bound::Unbounded => 0,\n        };\n        let end_byte = match range.end_bound() {\n            Bound::Included(&i) => Some(usize::from(i).checked_add(1).unwrap()),\n            Bound::Excluded(&i) => Some(usize::from(i)),\n            Bound::Unbounded => None,\n        };\n        assert_ne!(cur_byte, usize::MAX, \"start range must be less than usize::MAX\",);\n        ByteClassRepresentatives {\n            classes: self,\n            cur_byte,\n            end_byte,\n            last_class: None,\n        }\n    }\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\nimpl LookSet {\n    #[inline]\n    pub fn empty() -> LookSet {}\n    #[inline]\n    pub fn full() -> LookSet {}\n    #[inline]\n    pub fn singleton(look: Look) -> LookSet {}\n    #[inline]\n    pub fn len(self) -> usize {}\n    #[inline]\n    pub fn is_empty(self) -> bool {}\n    #[inline]\n    pub fn contains(self, look: Look) -> bool {}\n    #[inline]\n    pub fn contains_anchor(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_haystack(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_line(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_lf(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_crlf(&self) -> bool {}\n    #[inline]\n    pub fn contains_word(self) -> bool {}\n    #[inline]\n    pub fn contains_word_unicode(self) -> bool {\n        self.contains(Look::WordUnicode) || self.contains(Look::WordUnicodeNegate)\n            || self.contains(Look::WordStartUnicode)\n            || self.contains(Look::WordEndUnicode)\n            || self.contains(Look::WordStartHalfUnicode)\n            || self.contains(Look::WordEndHalfUnicode)\n    }\n    #[inline]\n    pub fn contains_word_ascii(self) -> bool {}\n    #[inline]\n    pub fn iter(self) -> LookSetIter {}\n    #[inline]\n    pub fn insert(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_insert(&mut self, look: Look) {}\n    #[inline]\n    pub fn remove(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_remove(&mut self, look: Look) {}\n    #[inline]\n    pub fn subtract(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_subtract(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn union(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_union(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn intersect(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_intersect(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn read_repr(slice: &[u8]) -> LookSet {}\n    #[inline]\n    pub fn write_repr(self, slice: &mut [u8]) {}\n    pub fn available(self) -> Result<(), UnicodeWordBoundaryError> {}\n}\nimpl ByteSet {\n    pub(crate) fn empty() -> ByteSet {}\n    pub(crate) fn add(&mut self, byte: u8) {}\n    pub(crate) fn remove(&mut self, byte: u8) {}\n    pub(crate) fn contains(&self, byte: u8) -> bool {}\n    pub(crate) fn contains_range(&self, start: u8, end: u8) -> bool {\n        (start..=end).all(|b| self.contains(b))\n    }\n    pub(crate) fn iter(&self) -> ByteSetIter {}\n    pub(crate) fn iter_ranges(&self) -> ByteSetRangeIter {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_empty(&self) -> bool {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteSet, usize), DeserializeError> {}\n    pub(crate) fn write_to<E: crate::util::wire::Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {}\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {}\n    pub fn as_u8(self) -> Option<u8> {\n        match self.0 {\n            UnitKind::U8(b) => Some(b),\n            UnitKind::EOI(_) => None,\n        }\n    }\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {}\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {}\n    pub fn is_word_byte(self) -> bool {}\n}\nimpl NFA {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<NFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<NFA, BuildError> {}\n    pub fn always_match() -> NFA {}\n    pub fn never_match() -> NFA {}\n    #[cfg(feature = \"syntax\")]\n    pub fn config() -> Config {}\n    #[cfg(feature = \"syntax\")]\n    pub fn compiler() -> Compiler {}\n    pub fn patterns(&self) -> PatternIter<'_> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn start_anchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_unanchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_pattern(&self, pid: PatternID) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn byte_class_set(&self) -> &ByteClassSet {}\n    #[inline]\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    #[inline]\n    pub fn state(&self, id: StateID) -> &State {}\n    #[inline]\n    pub fn states(&self) -> &[State] {}\n    #[inline]\n    pub fn group_info(&self) -> &GroupInfo {}\n    #[inline]\n    pub fn has_capture(&self) -> bool {}\n    #[inline]\n    pub fn has_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {}\n    #[inline]\n    pub fn is_reverse(&self) -> bool {}\n    #[inline]\n    pub fn is_always_start_anchored(&self) -> bool {}\n    #[inline]\n    pub fn look_matcher(&self) -> &LookMatcher {}\n    #[inline]\n    pub fn look_set_any(&self) -> LookSet {\n        self.0.look_set_any\n    }\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl State {\n    pub(crate) fn dead() -> State {}\n    pub(crate) fn is_match(&self) -> bool {}\n    pub(crate) fn is_from_word(&self) -> bool {}\n    pub(crate) fn is_half_crlf(&self) -> bool {}\n    pub(crate) fn look_have(&self) -> LookSet {}\n    pub(crate) fn look_need(&self) -> LookSet {}\n    pub(crate) fn match_len(&self) -> usize {}\n    pub(crate) fn match_pattern(&self, index: usize) -> PatternID {}\n    pub(crate) fn match_pattern_ids(&self) -> Option<Vec<PatternID>> {\n        self.repr().match_pattern_ids()\n    }\n    #[cfg(all(test, not(miri)))]\n    pub(crate) fn iter_match_pattern_ids<F: FnMut(PatternID)>(&self, f: F) {}\n    pub(crate) fn iter_nfa_state_ids<F: FnMut(StateID)>(&self, f: F) {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n    fn repr(&self) -> Repr<'_> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Build the DFA. If there was a problem constructing the DFA (e.g., if\n/// the chosen state identifier representation is too small), then an error\n/// is returned.\n215 fn run(mut self) -> Result<(), BuildError> {\n216     if self.nfa.look_set_any().contains_word_unicode()\n217         && !self.config.quit.contains_range(0x80, 0xFF)\n218     {\n219         return Err(BuildError::unsupported_dfa_word_boundary_unicode());\n220     }\n221 \n222     // A sequence of \"representative\" bytes drawn from each equivalence\n223     // class. These representative bytes are fed to the NFA to compute\n224     // state transitions. This allows us to avoid re-computing state\n225     // transitions for bytes that are guaranteed to produce identical\n226     // results. Since computing the representatives needs to do a little\n227     // work, we do it once here because we'll be iterating over them a lot.\n228     let representatives: Vec<alphabet::Unit> =\n229         self.dfa.byte_classes().representatives(..).collect();\n230     // The set of all DFA state IDs that still need to have their\n231     // transitions set. We start by seeding this with all starting states.\n232     let mut uncompiled = alloc::vec![];\n233     self.add_all_starts(&mut uncompiled)?;\n234     while let Some(dfa_id) = uncompiled.pop() {\n235         for &unit in &representatives {\n236             if unit.as_u8().map_or(false, |b| self.config.quit.contains(b))\n237             {\n238                 continue;\n239             }\n240             // In many cases, the state we transition to has already been\n241             // computed. 'cached_state' will do the minimal amount of work\n242             // to check this, and if it exists, immediately return an\n243             // already existing state ID.\n244             let (next_dfa_id, is_new) = self.cached_state(dfa_id, unit)?;\n245             self.dfa.set_transition(dfa_id, unit, next_dfa_id);\n246             // If the state ID we got back is newly created, then we need\n247             // to compile it, so add it to our uncompiled frontier.\n248             if is_new {\n249                 uncompiled.push(next_dfa_id);\n250             }\n251         }\n252     }\n253     debug!(\n254         \"determinization complete, memory usage: {}, \\\n255          dense DFA size: {}, \\\n256          is reverse? {}\",\n257         self.memory_usage(),\n258         self.dfa.memory_usage(),\n259         self.nfa.is_reverse(),\n260     );\n261 \n262     // A map from DFA state ID to one or more NFA match IDs. Each NFA match\n263     // ID corresponds to a distinct regex pattern that matches in the state\n264     // corresponding to the key.\n265     let mut matches: BTreeMap<StateID, Vec<PatternID>> = BTreeMap::new();\n266     self.cache.clear();\n267     #[cfg(feature = \"logging\")]\n268     let mut total_pat_len = 0;\n269     for (i, state) in self.builder_states.into_iter().enumerate() {\n270         if let Some(pat_ids) = state.match_pattern_ids() {\n271             let id = self.dfa.to_state_id(i);\n272             log! {\n273                 total_pat_len += pat_ids.len();\n274             }\n275             matches.insert(id, pat_ids);\n276         }\n277     }\n278     log! {\n279         use core::mem::size_of;\n280         let per_elem = size_of::<StateID>() + size_of::<Vec<PatternID>>();\n281         let pats = total_pat_len * size_of::<PatternID>();\n282         let mem = (matches.len() * per_elem) + pats;\n283         log::debug!(\"matches map built, memory usage: {}\", mem);\n284     }\n285     // At this point, we shuffle the \"special\" states in the final DFA.\n286     // This permits a DFA's match loop to detect a match condition (among\n287     // other things) by merely inspecting the current state's identifier,\n288     // and avoids the need for any additional auxiliary storage.\n289     self.dfa.shuffle(matches)?;\n290     Ok(())\n291 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}