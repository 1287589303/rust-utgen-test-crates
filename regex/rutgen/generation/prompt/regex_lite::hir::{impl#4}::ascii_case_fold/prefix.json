{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]\npub(crate) struct ClassRange {\n    pub(crate) start: char,\n    pub(crate) end: char,\n}\nimpl ClassRange {\n    fn ascii_case_fold(&self) -> Option<ClassRange> {\n        if !(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) {\n            let start = core::cmp::max(self.start, 'a');\n            let end = core::cmp::min(self.end, 'z');\n            return Some(ClassRange {\n                start: char::try_from(u32::from(start) - 32).unwrap(),\n                end: char::try_from(u32::from(end) - 32).unwrap(),\n            });\n        }\n        if !(ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self) {\n            let start = core::cmp::max(self.start, 'A');\n            let end = core::cmp::min(self.end, 'Z');\n            return Some(ClassRange {\n                start: char::try_from(u32::from(start) + 32).unwrap(),\n                end: char::try_from(u32::from(end) + 32).unwrap(),\n            });\n        }\n        None\n    }\n    fn union(&self, other: &ClassRange) -> Option<ClassRange> {}\n    fn is_contiguous(&self, other: &ClassRange) -> bool {}\n    fn is_intersection_empty(&self, other: &ClassRange) -> bool {\n        let (s1, e1) = (self.start, self.end);\n        let (s2, e2) = (other.start, other.end);\n        core::cmp::max(s1, s2) > core::cmp::min(e1, e2)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Apply simple case folding to this byte range. Only ASCII case mappings\n/// (for A-Za-z) are applied.\n///\n/// Additional ranges are appended to the given vector. Canonical ordering\n/// is *not* maintained in the given vector.\n528 fn ascii_case_fold(&self) -> Option<ClassRange> {\n529     if !(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) {\n530         let start = core::cmp::max(self.start, 'a');\n531         let end = core::cmp::min(self.end, 'z');\n532         return Some(ClassRange {\n533             start: char::try_from(u32::from(start) - 32).unwrap(),\n534             end: char::try_from(u32::from(end) - 32).unwrap(),\n535         });\n536     }\n537     if !(ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self) {\n538         let start = core::cmp::max(self.start, 'A');\n539         let end = core::cmp::min(self.end, 'Z');\n540         return Some(ClassRange {\n541             start: char::try_from(u32::from(start) + 32).unwrap(),\n542             end: char::try_from(u32::from(end) + 32).unwrap(),\n543         });\n544     }\n545     None\n546 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}