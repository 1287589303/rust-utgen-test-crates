{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]\npub(crate) struct ClassRange {\n    pub(crate) start: char,\n    pub(crate) end: char,\n}\nimpl ClassRange {\n    fn ascii_case_fold(&self) -> Option<ClassRange> {\n        if !(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) {\n            let start = core::cmp::max(self.start, 'a');\n            let end = core::cmp::min(self.end, 'z');\n            return Some(ClassRange {\n                start: char::try_from(u32::from(start) - 32).unwrap(),\n                end: char::try_from(u32::from(end) - 32).unwrap(),\n            });\n        }\n        if !(ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self) {\n            let start = core::cmp::max(self.start, 'A');\n            let end = core::cmp::min(self.end, 'Z');\n            return Some(ClassRange {\n                start: char::try_from(u32::from(start) + 32).unwrap(),\n                end: char::try_from(u32::from(end) + 32).unwrap(),\n            });\n        }\n        None\n    }\n    fn union(&self, other: &ClassRange) -> Option<ClassRange> {}\n    fn is_contiguous(&self, other: &ClassRange) -> bool {}\n    fn is_intersection_empty(&self, other: &ClassRange) -> bool {\n        let (s1, e1) = (self.start, self.end);\n        let (s2, e2) = (other.start, other.end);\n        core::cmp::max(s1, s2) > core::cmp::min(e1, e2)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Apply simple case folding to this byte range. Only ASCII case mappings\n/// (for A-Za-z) are applied.\n///\n/// Additional ranges are appended to the given vector. Canonical ordering\n/// is *not* maintained in the given vector.\n528 fn ascii_case_fold(&self) -> Option<ClassRange> {\n529     if !(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) {\n530         let start = core::cmp::max(self.start, 'a');\n531         let end = core::cmp::min(self.end, 'z');\n532         return Some(ClassRange {\n533             start: char::try_from(u32::from(start) - 32).unwrap(),\n534             end: char::try_from(u32::from(end) - 32).unwrap(),\n535         });\n536     }\n537     if !(ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self) {\n538         let start = core::cmp::max(self.start, 'A');\n539         let end = core::cmp::min(self.end, 'Z');\n540         return Some(ClassRange {\n541             start: char::try_from(u32::from(start) + 32).unwrap(),\n542             end: char::try_from(u32::from(end) + 32).unwrap(),\n543         });\n544     }\n545     None\n546 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}