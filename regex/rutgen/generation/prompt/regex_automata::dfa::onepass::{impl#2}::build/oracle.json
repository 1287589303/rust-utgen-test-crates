{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\npub(crate) trait Usize {\n    fn as_u8(self) -> u8;\n    fn as_u16(self) -> u16;\n    fn as_u32(self) -> u32;\n    fn as_u64(self) -> u64;\n}\n#[derive(Debug)]\nstruct InternalBuilder<'a> {\n    /// The DFA we're building.\n    dfa: DFA,\n    /// An unordered collection of NFA state IDs that we haven't yet tried to\n    /// build into a DFA state yet.\n    ///\n    /// This collection does not ultimately wind up including every NFA state\n    /// ID. Instead, each ID represents a \"start\" state for a sub-graph of the\n    /// NFA. The set of NFA states we then use to build a DFA state consists\n    /// of that \"start\" state and all states reachable from it via epsilon\n    /// transitions.\n    uncompiled_nfa_ids: Vec<StateID>,\n    /// A map from NFA state ID to DFA state ID. This is useful for easily\n    /// determining whether an NFA state has been used as a \"starting\" point\n    /// to build a DFA state yet. If it hasn't, then it is mapped to DEAD,\n    /// and since DEAD is specially added and never corresponds to any NFA\n    /// state, it follows that a mapping to DEAD implies the NFA state has\n    /// no corresponding DFA state yet.\n    nfa_to_dfa_id: Vec<StateID>,\n    /// A stack used to traverse the NFA states that make up a single DFA\n    /// state. Traversal occurs until the stack is empty, and we only push to\n    /// the stack when the state ID isn't in 'seen'. Actually, even more than\n    /// that, if we try to push something on to this stack that is already in\n    /// 'seen', then we bail out on construction completely, since it implies\n    /// that the NFA is not one-pass.\n    stack: Vec<(StateID, Epsilons)>,\n    /// The set of NFA states that we've visited via 'stack'.\n    seen: SparseSet,\n    /// Whether a match NFA state has been observed while constructing a\n    /// one-pass DFA state. Once a match state is seen, assuming we are using\n    /// leftmost-first match semantics, then we don't add any more transitions\n    /// to the DFA state we're building.\n    matched: bool,\n    /// The config passed to the builder.\n    ///\n    /// This is duplicated in dfa.config.\n    config: Config,\n    /// The NFA we're building a one-pass DFA from.\n    ///\n    /// This is duplicated in dfa.nfa.\n    nfa: &'a NFA,\n    /// The equivalence classes that make up the alphabet for this DFA>\n    ///\n    /// This is duplicated in dfa.classes.\n    classes: ByteClasses,\n}\n#[derive(Clone, Debug)]\npub struct LookSetIter {\n    set: LookSet,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Copy)]\nstruct PatternEpsilons(u64);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct SmallIndex(u32);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct DenseTransitions {\n    /// A dense representation of this state's transitions on the heap. This\n    /// always has length 256.\n    pub transitions: Box<[StateID]>,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone)]\npub(crate) struct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where\n    /// `i = Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Clone)]\npub struct DFA {\n    /// The configuration provided by the caller.\n    config: Config,\n    /// The NFA used to build this DFA.\n    ///\n    /// NOTE: We probably don't need to store the NFA here, but we use enough\n    /// bits from it that it's convenient to do so. And there really isn't much\n    /// cost to doing so either, since an NFA is reference counted internally.\n    nfa: NFA,\n    /// The transition table. Given a state ID 's' and a byte of haystack 'b',\n    /// the next state is `table[sid + classes[byte]]`.\n    ///\n    /// The stride of this table (i.e., the number of columns) is always\n    /// a power of 2, even if the alphabet length is smaller. This makes\n    /// converting between state IDs and state indices very cheap.\n    ///\n    /// Note that the stride always includes room for one extra \"transition\"\n    /// that isn't actually a transition. It is a 'PatternEpsilons' that is\n    /// used for match states only. Because of this, the maximum number of\n    /// active columns in the transition table is 257, which means the maximum\n    /// stride is 512 (the next power of 2 greater than or equal to 257).\n    table: Vec<Transition>,\n    /// The DFA state IDs of the starting states.\n    ///\n    /// `starts[0]` is always present and corresponds to the starting state\n    /// when searching for matches of any pattern in the DFA.\n    ///\n    /// `starts[i]` where i>0 corresponds to the starting state for the pattern\n    /// ID 'i-1'. These starting states are optional.\n    starts: Vec<StateID>,\n    /// Every state ID >= this value corresponds to a match state.\n    ///\n    /// This is what a search uses to detect whether a state is a match state\n    /// or not. It requires only a simple comparison instead of bit-unpacking\n    /// the PatternEpsilons from every state.\n    min_match_id: StateID,\n    /// The alphabet of this DFA, split into equivalence classes. Bytes in the\n    /// same equivalence class can never discriminate between a match and a\n    /// non-match.\n    classes: ByteClasses,\n    /// The number of elements in each state in the transition table. This may\n    /// be less than the stride, since the stride is always a power of 2 and\n    /// the alphabet length can be anything up to and including 256.\n    alphabet_len: usize,\n    /// The number of columns in the transition table, expressed as a power of\n    /// 2.\n    stride2: usize,\n    /// The offset at which the PatternEpsilons for a match state is stored in\n    /// the transition table.\n    ///\n    /// PERF: One wonders whether it would be better to put this in a separate\n    /// allocation, since only match states have a non-empty PatternEpsilons\n    /// and the number of match states tends be dwarfed by the number of\n    /// non-match states. So this would save '8*len(non_match_states)' for each\n    /// DFA. The question is whether moving this to a different allocation will\n    /// lead to a perf hit during searches. You might think dealing with match\n    /// states is rare, but some regexes spend a lot of time in match states\n    /// gobbling up input. But... match state handling is already somewhat\n    /// expensive, so maybe this wouldn't do much? Either way, it's worth\n    /// experimenting.\n    pateps_offset: usize,\n    /// The first explicit slot index. This refers to the first slot appearing\n    /// immediately after the last implicit slot. It is always 'patterns.len()\n    /// * 2'.\n    ///\n    /// We record this because we only store the explicit slots in our DFA\n    /// transition table that need to be saved. Implicit slots are handled\n    /// automatically as part of the search.\n    explicit_slot_start: usize,\n}\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Clone, Copy)]\nstruct Slots(u32);\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug)]\npub struct DFA {\n    config: Config,\n    nfa: thompson::NFA,\n    stride2: usize,\n    start_map: StartByteMap,\n    classes: ByteClasses,\n    quitset: ByteSet,\n    cache_capacity: usize,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone)]\npub struct DFA<T> {\n    /// The transition table for this DFA. This includes the transitions\n    /// themselves, along with the stride, number of states and the equivalence\n    /// class mapping.\n    tt: TransitionTable<T>,\n    /// The set of starting state identifiers for this DFA. The starting state\n    /// IDs act as pointers into the transition table. The specific starting\n    /// state chosen for each search is dependent on the context at which the\n    /// search begins.\n    st: StartTable<T>,\n    /// The set of match states and the patterns that match for each\n    /// corresponding match state.\n    ///\n    /// This structure is technically only needed because of support for\n    /// multi-regexes. Namely, multi-regexes require answering not just whether\n    /// a match exists, but _which_ patterns match. So we need to store the\n    /// matching pattern IDs for each match state. We do this even when there\n    /// is only one pattern for the sake of simplicity. In practice, this uses\n    /// up very little space for the case of one pattern.\n    ms: MatchStates<T>,\n    /// Information about which states are \"special.\" Special states are states\n    /// that are dead, quit, matching, starting or accelerated. For more info,\n    /// see the docs for `Special`.\n    special: Special,\n    /// The accelerators for this DFA.\n    ///\n    /// If a state is accelerated, then there exist only a small number of\n    /// bytes that can cause the DFA to leave the state. This permits searching\n    /// to use optimized routines to find those specific bytes instead of using\n    /// the transition table.\n    ///\n    /// All accelerated states exist in a contiguous range in the DFA's\n    /// transition table. See dfa/special.rs for more details on how states are\n    /// arranged.\n    accels: Accels<T>,\n    /// Any prefilter attached to this DFA.\n    ///\n    /// Note that currently prefilters are not serialized. When deserializing\n    /// a DFA from bytes, this is always set to `None`.\n    pre: Option<Prefilter>,\n    /// The set of \"quit\" bytes for this DFA.\n    ///\n    /// This is only used when computing the start state for a particular\n    /// position in a haystack. Namely, in the case where there is a quit\n    /// byte immediately before the start of the search, this set needs to be\n    /// explicitly consulted. In all other cases, quit bytes are detected by\n    /// the DFA itself, by transitioning all quit bytes to a special \"quit\n    /// state.\"\n    quitset: ByteSet,\n    /// Various flags describing the behavior of this DFA.\n    flags: Flags,\n}\n#[derive(Debug)]\npub struct PatternIter<'a> {\n    it: PatternIDIter,\n    /// We explicitly associate a lifetime with this iterator even though we\n    /// don't actually borrow anything from the NFA. We do this for backward\n    /// compatibility purposes. If we ever do need to borrow something from\n    /// the NFA, then we can and just get rid of this marker without breaking\n    /// the public API.\n    _marker: core::marker::PhantomData<&'a ()>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Debug)]\npub(crate) struct DFA(Option<DFAEngine>);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct SparseTransitions {\n    /// The sorted sequence of non-overlapping transitions.\n    pub transitions: Box<[Transition]>,\n}\n#[derive(Clone, Debug)]\npub struct UnicodeWordBoundaryError(());\n#[derive(Clone)]\npub struct DFA<T> {\n    tt: Transitions<T>,\n    st: StartTable<T>,\n    special: Special,\n    pre: Option<Prefilter>,\n    quitset: ByteSet,\n    flags: Flags,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\n#[derive(Clone, Eq, PartialEq)]\npub enum State {\n    /// A state with a single transition that can only be taken if the current\n    /// input symbol is in a particular range of bytes.\n    ByteRange {\n        /// The transition from this state to the next.\n        trans: Transition,\n    },\n    /// A state with possibly many transitions represented in a sparse fashion.\n    /// Transitions are non-overlapping and ordered lexicographically by input\n    /// range.\n    ///\n    /// In practice, this is used for encoding UTF-8 automata. Its presence is\n    /// primarily an optimization that avoids many additional unconditional\n    /// epsilon transitions (via [`Union`](State::Union) states), and thus\n    /// decreases the overhead of traversing the NFA. This can improve both\n    /// matching time and DFA construction time.\n    Sparse(SparseTransitions),\n    /// A dense representation of a state with multiple transitions.\n    Dense(DenseTransitions),\n    /// A conditional epsilon transition satisfied via some sort of\n    /// look-around. Look-around is limited to anchor and word boundary\n    /// assertions.\n    ///\n    /// Look-around states are meant to be evaluated while performing epsilon\n    /// closure (computing the set of states reachable from a particular state\n    /// via only epsilon transitions). If the current position in the haystack\n    /// satisfies the look-around assertion, then you're permitted to follow\n    /// that epsilon transition.\n    Look {\n        /// The look-around assertion that must be satisfied before moving\n        /// to `next`.\n        look: Look,\n        /// The state to transition to if the look-around assertion is\n        /// satisfied.\n        next: StateID,\n    },\n    /// An alternation such that there exists an epsilon transition to all\n    /// states in `alternates`, where matches found via earlier transitions\n    /// are preferred over later transitions.\n    Union {\n        /// An ordered sequence of unconditional epsilon transitions to other\n        /// states. Transitions earlier in the sequence are preferred over\n        /// transitions later in the sequence.\n        alternates: Box<[StateID]>,\n    },\n    /// An alternation such that there exists precisely two unconditional\n    /// epsilon transitions, where matches found via `alt1` are preferred over\n    /// matches found via `alt2`.\n    ///\n    /// This state exists as a common special case of Union where there are\n    /// only two alternates. In this case, we don't need any allocations to\n    /// represent the state. This saves a bit of memory and also saves an\n    /// additional memory access when traversing the NFA.\n    BinaryUnion {\n        /// An unconditional epsilon transition to another NFA state. This\n        /// is preferred over `alt2`.\n        alt1: StateID,\n        /// An unconditional epsilon transition to another NFA state. Matches\n        /// reported via this transition should only be reported if no matches\n        /// were found by following `alt1`.\n        alt2: StateID,\n    },\n    /// An empty state that records a capture location.\n    ///\n    /// From the perspective of finite automata, this is precisely equivalent\n    /// to an unconditional epsilon transition, but serves the purpose of\n    /// instructing NFA simulations to record additional state when the finite\n    /// state machine passes through this epsilon transition.\n    ///\n    /// `slot` in this context refers to the specific capture group slot\n    /// offset that is being recorded. Each capturing group has two slots\n    /// corresponding to the start and end of the matching portion of that\n    /// group.\n    ///\n    /// The pattern ID and capture group index are also included in this state\n    /// in case they are useful. But mostly, all you'll need is `next` and\n    /// `slot`.\n    Capture {\n        /// The state to transition to, unconditionally.\n        next: StateID,\n        /// The pattern ID that this capture belongs to.\n        pattern_id: PatternID,\n        /// The capture group index that this capture belongs to. Capture group\n        /// indices are local to each pattern. For example, when capturing\n        /// groups are enabled, every pattern has a capture group at index\n        /// `0`.\n        group_index: SmallIndex,\n        /// The slot index for this capture. Every capturing group has two\n        /// slots: one for the start haystack offset and one for the end\n        /// haystack offset. Unlike capture group indices, slot indices are\n        /// global across all patterns in this NFA. That is, each slot belongs\n        /// to a single pattern, but there is only one slot at index `i`.\n        slot: SmallIndex,\n    },\n    /// A state that cannot be transitioned out of. This is useful for cases\n    /// where you want to prevent matching from occurring. For example, if your\n    /// regex parser permits empty character classes, then one could choose\n    /// a `Fail` state to represent them. (An empty character class can be\n    /// thought of as an empty set. Since nothing is in an empty set, they can\n    /// never match anything.)\n    Fail,\n    /// A match state. There is at least one such occurrence of this state for\n    /// each regex that can match that is in this NFA.\n    Match {\n        /// The matching pattern ID.\n        pattern_id: PatternID,\n    },\n}\nimpl<'a> InternalBuilder<'a> {\n    fn new(config: Config, nfa: &'a NFA) -> InternalBuilder<'a> {}\n    fn build(mut self) -> Result<DFA, BuildError> {\n        self.nfa.look_set_any().available().map_err(BuildError::word)?;\n        for look in self.nfa.look_set_any().iter() {\n            if look.as_repr() > Look::WordUnicodeNegate.as_repr() {\n                return Err(BuildError::unsupported_look(look));\n            }\n        }\n        if self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT {\n            return Err(BuildError::too_many_patterns(PatternEpsilons::PATTERN_ID_LIMIT));\n        }\n        if self.nfa.group_info().explicit_slot_len() > Slots::LIMIT {\n            return Err(\n                BuildError::not_one_pass(\n                    \"too many explicit capturing groups (max is 16)\",\n                ),\n            );\n        }\n        assert_eq!(DEAD, self.add_empty_state() ?);\n        let explicit_slot_start = self.nfa.pattern_len() * 2;\n        self.add_start_state(None, self.nfa.start_anchored())?;\n        if self.config.get_starts_for_each_pattern() {\n            for pid in self.nfa.patterns() {\n                self.add_start_state(Some(pid), self.nfa.start_pattern(pid).unwrap())?;\n            }\n        }\n        while let Some(nfa_id) = self.uncompiled_nfa_ids.pop() {\n            let dfa_id = self.nfa_to_dfa_id[nfa_id];\n            self.matched = false;\n            self.seen.clear();\n            self.stack_push(nfa_id, Epsilons::empty())?;\n            while let Some((id, epsilons)) = self.stack.pop() {\n                match *self.nfa.state(id) {\n                    thompson::State::ByteRange { ref trans } => {\n                        self.compile_transition(dfa_id, trans, epsilons)?;\n                    }\n                    thompson::State::Sparse(ref sparse) => {\n                        for trans in sparse.transitions.iter() {\n                            self.compile_transition(dfa_id, trans, epsilons)?;\n                        }\n                    }\n                    thompson::State::Dense(ref dense) => {\n                        for trans in dense.iter() {\n                            self.compile_transition(dfa_id, &trans, epsilons)?;\n                        }\n                    }\n                    thompson::State::Look { look, next } => {\n                        let looks = epsilons.looks().insert(look);\n                        self.stack_push(next, epsilons.set_looks(looks))?;\n                    }\n                    thompson::State::Union { ref alternates } => {\n                        for &sid in alternates.iter().rev() {\n                            self.stack_push(sid, epsilons)?;\n                        }\n                    }\n                    thompson::State::BinaryUnion { alt1, alt2 } => {\n                        self.stack_push(alt2, epsilons)?;\n                        self.stack_push(alt1, epsilons)?;\n                    }\n                    thompson::State::Capture { next, slot, .. } => {\n                        let slot = slot.as_usize();\n                        let epsilons = if slot < explicit_slot_start {\n                            epsilons\n                        } else {\n                            let offset = slot - explicit_slot_start;\n                            epsilons.set_slots(epsilons.slots().insert(offset))\n                        };\n                        self.stack_push(next, epsilons)?;\n                    }\n                    thompson::State::Fail => {\n                        continue;\n                    }\n                    thompson::State::Match { pattern_id } => {\n                        if self.matched {\n                            return Err(\n                                BuildError::not_one_pass(\n                                    \"multiple epsilon transitions to match state\",\n                                ),\n                            );\n                        }\n                        self.matched = true;\n                        self.dfa\n                            .set_pattern_epsilons(\n                                dfa_id,\n                                PatternEpsilons::empty()\n                                    .set_pattern_id(pattern_id)\n                                    .set_epsilons(epsilons),\n                            );\n                    }\n                }\n            }\n        }\n        self.shuffle_states();\n        Ok(self.dfa)\n    }\n    fn shuffle_states(&mut self) {\n        let mut remapper = Remapper::new(&self.dfa);\n        let mut next_dest = self.dfa.last_state_id();\n        for i in (0..self.dfa.state_len()).rev() {\n            let id = StateID::must(i);\n            let is_match = self.dfa.pattern_epsilons(id).pattern_id().is_some();\n            if !is_match {\n                continue;\n            }\n            remapper.swap(&mut self.dfa, next_dest, id);\n            self.dfa.min_match_id = next_dest;\n            next_dest = self\n                .dfa\n                .prev_state_id(next_dest)\n                .expect(\"match states should be a proper subset of all states\");\n        }\n        remapper.remap(&mut self.dfa);\n    }\n    fn compile_transition(\n        &mut self,\n        dfa_id: StateID,\n        trans: &thompson::Transition,\n        epsilons: Epsilons,\n    ) -> Result<(), BuildError> {\n        let next_dfa_id = self.add_dfa_state_for_nfa_state(trans.next)?;\n        for byte in self\n            .classes\n            .representatives(trans.start..=trans.end)\n            .filter_map(|r| r.as_u8())\n        {\n            let oldtrans = self.dfa.transition(dfa_id, byte);\n            let newtrans = Transition::new(self.matched, next_dfa_id, epsilons);\n            if oldtrans.state_id() == DEAD {\n                self.dfa.set_transition(dfa_id, byte, newtrans);\n            } else if oldtrans != newtrans {\n                return Err(BuildError::not_one_pass(\"conflicting transition\"));\n            }\n        }\n        Ok(())\n    }\n    fn add_start_state(\n        &mut self,\n        pid: Option<PatternID>,\n        nfa_id: StateID,\n    ) -> Result<StateID, BuildError> {\n        match pid {\n            None => assert!(self.dfa.starts.is_empty()),\n            Some(pid) => assert!(self.dfa.starts.len() == pid.one_more()),\n        }\n        let dfa_id = self.add_dfa_state_for_nfa_state(nfa_id)?;\n        self.dfa.starts.push(dfa_id);\n        Ok(dfa_id)\n    }\n    fn add_dfa_state_for_nfa_state(\n        &mut self,\n        nfa_id: StateID,\n    ) -> Result<StateID, BuildError> {}\n    fn add_empty_state(&mut self) -> Result<StateID, BuildError> {\n        let state_limit = Transition::STATE_ID_LIMIT;\n        let next_id = self.dfa.table.len() >> self.dfa.stride2();\n        let id = StateID::new(next_id)\n            .map_err(|_| BuildError::too_many_states(state_limit))?;\n        if id.as_u64() > Transition::STATE_ID_LIMIT {\n            return Err(BuildError::too_many_states(state_limit));\n        }\n        self.dfa.table.extend(core::iter::repeat(Transition(0)).take(self.dfa.stride()));\n        self.dfa.set_pattern_epsilons(id, PatternEpsilons::empty());\n        if let Some(size_limit) = self.config.get_size_limit() {\n            if self.dfa.memory_usage() > size_limit {\n                return Err(BuildError::exceeded_size_limit(size_limit));\n            }\n        }\n        Ok(id)\n    }\n    fn stack_push(\n        &mut self,\n        nfa_id: StateID,\n        epsilons: Epsilons,\n    ) -> Result<(), BuildError> {\n        if !self.seen.insert(nfa_id) {\n            return Err(\n                BuildError::not_one_pass(\"multiple epsilon transitions to same state\"),\n            );\n        }\n        self.stack.push((nfa_id, epsilons));\n        Ok(())\n    }\n}\nimpl Iterator for LookSetIter {\n    type Item = Look;\n    #[inline]\n    fn next(&mut self) -> Option<Look> {\n        if self.set.is_empty() {\n            return None;\n        }\n        let bit = u16::try_from(self.set.bits.trailing_zeros()).unwrap();\n        let look = Look::from_repr(1 << bit)?;\n        self.set = self.set.remove(look);\n        Some(look)\n    }\n}\nimpl BuildError {\n    fn nfa(err: crate::nfa::thompson::BuildError) -> BuildError {}\n    fn word(err: UnicodeWordBoundaryError) -> BuildError {}\n    fn too_many_states(limit: u64) -> BuildError {}\n    fn too_many_patterns(limit: u64) -> BuildError {\n        BuildError {\n            kind: BuildErrorKind::TooManyPatterns {\n                limit,\n            },\n        }\n    }\n    fn unsupported_look(look: Look) -> BuildError {\n        BuildError {\n            kind: BuildErrorKind::UnsupportedLook {\n                look,\n            },\n        }\n    }\n    fn exceeded_size_limit(limit: usize) -> BuildError {}\n    fn not_one_pass(msg: &'static str) -> BuildError {\n        BuildError {\n            kind: BuildErrorKind::NotOnePass { msg },\n        }\n    }\n}\nimpl PatternEpsilons {\n    const PATTERN_ID_BITS: u64 = 22;\n    const PATTERN_ID_SHIFT: u64 = 64 - PatternEpsilons::PATTERN_ID_BITS;\n    const PATTERN_ID_NONE: u64 = 0x00000000_003FFFFF;\n    const PATTERN_ID_LIMIT: u64 = PatternEpsilons::PATTERN_ID_NONE;\n    const PATTERN_ID_MASK: u64 = 0xFFFFFC00_00000000;\n    const EPSILONS_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn empty() -> PatternEpsilons {\n        PatternEpsilons(\n            PatternEpsilons::PATTERN_ID_NONE << PatternEpsilons::PATTERN_ID_SHIFT,\n        )\n    }\n    fn is_empty(self) -> bool {}\n    fn pattern_id(self) -> Option<PatternID> {}\n    fn pattern_id_unchecked(self) -> PatternID {}\n    fn set_pattern_id(self, pid: PatternID) -> PatternEpsilons {\n        PatternEpsilons(\n            (pid.as_u64() << PatternEpsilons::PATTERN_ID_SHIFT)\n                | (self.0 & PatternEpsilons::EPSILONS_MASK),\n        )\n    }\n    fn epsilons(self) -> Epsilons {}\n    fn set_epsilons(self, epsilons: Epsilons) -> PatternEpsilons {\n        PatternEpsilons(\n            (self.0 & PatternEpsilons::PATTERN_ID_MASK)\n                | (u64::from(epsilons.0) & PatternEpsilons::EPSILONS_MASK),\n        )\n    }\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn size_limit(mut self, limit: Option<usize>) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {\n        self.starts_for_each_pattern.unwrap_or(false)\n    }\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\nimpl SmallIndex {\n    #[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n    pub const MAX: SmallIndex = SmallIndex::new_unchecked(core::i32::MAX as usize - 1);\n    #[cfg(target_pointer_width = \"16\")]\n    pub const MAX: SmallIndex = SmallIndex::new_unchecked(core::isize::MAX - 1);\n    pub const LIMIT: usize = SmallIndex::MAX.as_usize() + 1;\n    pub const ZERO: SmallIndex = SmallIndex::new_unchecked(0);\n    pub const SIZE: usize = core::mem::size_of::<SmallIndex>();\n    #[inline]\n    pub fn new(index: usize) -> Result<SmallIndex, SmallIndexError> {}\n    #[inline]\n    pub const fn new_unchecked(index: usize) -> SmallIndex {}\n    #[inline]\n    pub fn must(index: usize) -> SmallIndex {}\n    #[inline]\n    pub const fn as_usize(&self) -> usize {\n        self.0 as usize\n    }\n    #[inline]\n    pub const fn as_u64(&self) -> u64 {}\n    #[inline]\n    pub const fn as_u32(&self) -> u32 {}\n    #[inline]\n    pub const fn as_i32(&self) -> i32 {}\n    #[inline]\n    pub fn one_more(&self) -> usize {}\n    #[inline]\n    pub fn from_ne_bytes(bytes: [u8; 4]) -> Result<SmallIndex, SmallIndexError> {}\n    #[inline]\n    pub fn from_ne_bytes_unchecked(bytes: [u8; 4]) -> SmallIndex {}\n    #[inline]\n    pub fn to_ne_bytes(&self) -> [u8; 4] {}\n}\nimpl DenseTransitions {\n    #[inline]\n    pub fn matches(&self, haystack: &[u8], at: usize) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn matches_unit(&self, unit: alphabet::Unit) -> Option<StateID> {}\n    #[inline]\n    pub fn matches_byte(&self, byte: u8) -> Option<StateID> {}\n    pub(crate) fn iter(&self) -> impl Iterator<Item = Transition> + '_ {\n        use crate::util::int::Usize;\n        self.transitions\n            .iter()\n            .enumerate()\n            .filter(|&(_, &sid)| sid != StateID::ZERO)\n            .map(|(byte, &next)| Transition {\n                start: byte.as_u8(),\n                end: byte.as_u8(),\n                next,\n            })\n    }\n}\nimpl NFA {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<NFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<NFA, BuildError> {}\n    pub fn always_match() -> NFA {}\n    pub fn never_match() -> NFA {}\n    #[cfg(feature = \"syntax\")]\n    pub fn config() -> Config {}\n    #[cfg(feature = \"syntax\")]\n    pub fn compiler() -> Compiler {}\n    pub fn patterns(&self) -> PatternIter<'_> {\n        PatternIter {\n            it: PatternID::iter(self.pattern_len()),\n            _marker: core::marker::PhantomData,\n        }\n    }\n    #[inline]\n    pub fn pattern_len(&self) -> usize {\n        self.0.start_pattern.len()\n    }\n    #[inline]\n    pub fn start_anchored(&self) -> StateID {\n        self.0.start_anchored\n    }\n    #[inline]\n    pub fn start_unanchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_pattern(&self, pid: PatternID) -> Option<StateID> {\n        self.0.start_pattern.get(pid.as_usize()).copied()\n    }\n    #[inline]\n    pub(crate) fn byte_class_set(&self) -> &ByteClassSet {}\n    #[inline]\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    #[inline]\n    pub fn state(&self, id: StateID) -> &State {\n        &self.states()[id]\n    }\n    #[inline]\n    pub fn states(&self) -> &[State] {}\n    #[inline]\n    pub fn group_info(&self) -> &GroupInfo {\n        &self.0.group_info()\n    }\n    #[inline]\n    pub fn has_capture(&self) -> bool {}\n    #[inline]\n    pub fn has_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {}\n    #[inline]\n    pub fn is_reverse(&self) -> bool {}\n    #[inline]\n    pub fn is_always_start_anchored(&self) -> bool {}\n    #[inline]\n    pub fn look_matcher(&self) -> &LookMatcher {}\n    #[inline]\n    pub fn look_set_any(&self) -> LookSet {\n        self.0.look_set_any\n    }\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl Look {\n    #[inline]\n    pub const fn reversed(self) -> Look {}\n    #[inline]\n    pub const fn as_repr(self) -> u32 {\n        self as u32\n    }\n    #[inline]\n    pub const fn from_repr(repr: u32) -> Option<Look> {}\n    #[inline]\n    pub const fn as_char(self) -> char {}\n}\nimpl Epsilons {\n    const SLOT_MASK: u64 = 0x000003FF_FFFFFC00;\n    const SLOT_SHIFT: u64 = 10;\n    const LOOK_MASK: u64 = 0x00000000_000003FF;\n    fn empty() -> Epsilons {\n        Epsilons(0)\n    }\n    fn is_empty(self) -> bool {}\n    fn slots(self) -> Slots {\n        Slots((self.0 >> Epsilons::SLOT_SHIFT).low_u32())\n    }\n    fn set_slots(self, slots: Slots) -> Epsilons {\n        Epsilons(\n            (u64::from(slots.0) << Epsilons::SLOT_SHIFT) | (self.0 & Epsilons::LOOK_MASK),\n        )\n    }\n    fn looks(self) -> LookSet {\n        LookSet {\n            bits: (self.0 & Epsilons::LOOK_MASK).low_u32(),\n        }\n    }\n    fn set_looks(self, look_set: LookSet) -> Epsilons {\n        Epsilons(\n            (self.0 & Epsilons::SLOT_MASK)\n                | (u64::from(look_set.bits) & Epsilons::LOOK_MASK),\n        )\n    }\n}\nimpl SparseSet {\n    #[inline]\n    pub(crate) fn new(capacity: usize) -> SparseSet {}\n    #[inline]\n    pub(crate) fn resize(&mut self, new_capacity: usize) {}\n    #[inline]\n    pub(crate) fn capacity(&self) -> usize {}\n    #[inline]\n    pub(crate) fn len(&self) -> usize {}\n    #[inline]\n    pub(crate) fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn insert(&mut self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn contains(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn clear(&mut self) {\n        self.len = 0;\n    }\n    #[inline]\n    pub(crate) fn iter(&self) -> SparseSetIter<'_> {}\n    #[inline]\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\nimpl LookSet {\n    #[inline]\n    pub fn empty() -> LookSet {}\n    #[inline]\n    pub fn full() -> LookSet {}\n    #[inline]\n    pub fn singleton(look: Look) -> LookSet {}\n    #[inline]\n    pub fn len(self) -> usize {}\n    #[inline]\n    pub fn is_empty(self) -> bool {}\n    #[inline]\n    pub fn contains(self, look: Look) -> bool {}\n    #[inline]\n    pub fn contains_anchor(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_haystack(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_line(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_lf(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_crlf(&self) -> bool {}\n    #[inline]\n    pub fn contains_word(self) -> bool {}\n    #[inline]\n    pub fn contains_word_unicode(self) -> bool {}\n    #[inline]\n    pub fn contains_word_ascii(self) -> bool {}\n    #[inline]\n    pub fn iter(self) -> LookSetIter {\n        LookSetIter { set: self }\n    }\n    #[inline]\n    pub fn insert(self, look: Look) -> LookSet {\n        LookSet {\n            bits: self.bits | look.as_repr(),\n        }\n    }\n    #[inline]\n    pub fn set_insert(&mut self, look: Look) {}\n    #[inline]\n    pub fn remove(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_remove(&mut self, look: Look) {}\n    #[inline]\n    pub fn subtract(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_subtract(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn union(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_union(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn intersect(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_intersect(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn read_repr(slice: &[u8]) -> LookSet {}\n    #[inline]\n    pub fn write_repr(self, slice: &mut [u8]) {}\n    pub fn available(self) -> Result<(), UnicodeWordBoundaryError> {\n        if self.contains_word_unicode() {\n            UnicodeWordBoundaryError::check()?;\n        }\n        Ok(())\n    }\n}\nimpl DFA {\n    fn start(&self) -> StateID {}\n    fn start_pattern(&self, pid: PatternID) -> Result<StateID, MatchError> {}\n    fn transition(&self, sid: StateID, byte: u8) -> Transition {}\n    fn set_transition(&mut self, sid: StateID, byte: u8, to: Transition) {}\n    fn sparse_transitions(&self, sid: StateID) -> SparseTransitionIter<'_> {}\n    fn pattern_epsilons(&self, sid: StateID) -> PatternEpsilons {}\n    fn set_pattern_epsilons(&mut self, sid: StateID, pateps: PatternEpsilons) {\n        let offset = sid.as_usize() << self.stride2();\n        self.table[offset + self.pateps_offset] = Transition(pateps.0);\n    }\n    fn prev_state_id(&self, id: StateID) -> Option<StateID> {}\n    fn last_state_id(&self) -> StateID {}\n    pub(super) fn swap_states(&mut self, id1: StateID, id2: StateID) {}\n    pub(super) fn remap(&mut self, map: impl Fn(StateID) -> StateID) {}\n}\nimpl GroupInfo {\n    pub fn new<P, G, N>(pattern_groups: P) -> Result<GroupInfo, GroupInfoError>\n    where\n        P: IntoIterator<Item = G>,\n        G: IntoIterator<Item = Option<N>>,\n        N: AsRef<str>,\n    {}\n    pub fn empty() -> GroupInfo {}\n    #[inline]\n    pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {}\n    #[inline]\n    pub fn to_name(&self, pid: PatternID, group_index: usize) -> Option<&str> {}\n    #[inline]\n    pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {}\n    #[inline]\n    pub fn all_names(&self) -> GroupInfoAllNames<'_> {}\n    #[inline]\n    pub fn slots(&self, pid: PatternID, group_index: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn slot(&self, pid: PatternID, group_index: usize) -> Option<usize> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn group_len(&self, pid: PatternID) -> usize {}\n    #[inline]\n    pub fn all_group_len(&self) -> usize {}\n    #[inline]\n    pub fn slot_len(&self) -> usize {}\n    #[inline]\n    pub fn implicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn explicit_slot_len(&self) -> usize {\n        self.slot_len().saturating_sub(self.implicit_slot_len())\n    }\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl Slots {\n    const LIMIT: usize = 32;\n    fn insert(self, slot: usize) -> Slots {\n        debug_assert!(slot < Slots::LIMIT);\n        Slots(self.0 | (1 << slot.as_u32()))\n    }\n    fn remove(self, slot: usize) -> Slots {}\n    fn is_empty(self) -> bool {}\n    fn iter(self) -> SlotsIter {}\n    fn apply(self, at: usize, caller_explicit_slots: &mut [Option<NonMaxUsize>]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Build the DFA from the NFA given to this builder. If the NFA is not\n/// one-pass, then return an error. An error may also be returned if a\n/// particular limit is exceeded. (Some limits, like the total heap memory\n/// used, are configurable. Others, like the total patterns or slots, are\n/// hard-coded based on representational limitations.)\n581 fn build(mut self) -> Result<DFA, BuildError> {\n582     self.nfa.look_set_any().available().map_err(BuildError::word)?;\n583     for look in self.nfa.look_set_any().iter() {\n584         // This is a future incompatibility check where if we add any\n585         // more look-around assertions, then the one-pass DFA either\n586         // needs to reject them (what we do here) or it needs to have its\n587         // Transition representation modified to be capable of storing the\n588         // new assertions.\n589         if look.as_repr() > Look::WordUnicodeNegate.as_repr() {\n590             return Err(BuildError::unsupported_look(look));\n591         }\n592     }\n593     if self.nfa.pattern_len().as_u64() > PatternEpsilons::PATTERN_ID_LIMIT\n594     {\n595         return Err(BuildError::too_many_patterns(\n596             PatternEpsilons::PATTERN_ID_LIMIT,\n597         ));\n598     }\n599     if self.nfa.group_info().explicit_slot_len() > Slots::LIMIT {\n600         return Err(BuildError::not_one_pass(\n601             \"too many explicit capturing groups (max is 16)\",\n602         ));\n603     }\n604     assert_eq!(DEAD, self.add_empty_state()?);\n605 \n606     // This is where the explicit slots start. We care about this because\n607     // we only need to track explicit slots. The implicit slots---two for\n608     // each pattern---are tracked as part of the search routine itself.\n609     let explicit_slot_start = self.nfa.pattern_len() * 2;\n610     self.add_start_state(None, self.nfa.start_anchored())?;\n611     if self.config.get_starts_for_each_pattern() {\n612         for pid in self.nfa.patterns() {\n613             self.add_start_state(\n614                 Some(pid),\n615                 self.nfa.start_pattern(pid).unwrap(),\n616             )?;\n617         }\n618     }\n619     // NOTE: One wonders what the effects of treating 'uncompiled_nfa_ids'\n620     // as a stack are. It is really an unordered *set* of NFA state IDs.\n621     // If it, for example, in practice led to discovering whether a regex\n622     // was or wasn't one-pass later than if we processed NFA state IDs in\n623     // ascending order, then that would make this routine more costly in\n624     // the somewhat common case of a regex that isn't one-pass.\n625     while let Some(nfa_id) = self.uncompiled_nfa_ids.pop() {\n626         let dfa_id = self.nfa_to_dfa_id[nfa_id];\n627         // Once we see a match, we keep going, but don't add any new\n628         // transitions. Normally we'd just stop, but we have to keep\n629         // going in order to verify that our regex is actually one-pass.\n630         self.matched = false;\n631         // The NFA states we've already explored for this DFA state.\n632         self.seen.clear();\n633         // The NFA states to explore via epsilon transitions. If we ever\n634         // try to push an NFA state that we've already seen, then the NFA\n635         // is not one-pass because it implies there are multiple epsilon\n636         // transition paths that lead to the same NFA state. In other\n637         // words, there is ambiguity.\n638         self.stack_push(nfa_id, Epsilons::empty())?;\n639         while let Some((id, epsilons)) = self.stack.pop() {\n640             match *self.nfa.state(id) {\n641                 thompson::State::ByteRange { ref trans } => {\n642                     self.compile_transition(dfa_id, trans, epsilons)?;\n643                 }\n644                 thompson::State::Sparse(ref sparse) => {\n645                     for trans in sparse.transitions.iter() {\n646                         self.compile_transition(dfa_id, trans, epsilons)?;\n647                     }\n648                 }\n649                 thompson::State::Dense(ref dense) => {\n650                     for trans in dense.iter() {\n651                         self.compile_transition(dfa_id, &trans, epsilons)?;\n652                     }\n653                 }\n654                 thompson::State::Look { look, next } => {\n655                     let looks = epsilons.looks().insert(look);\n656                     self.stack_push(next, epsilons.set_looks(looks))?;\n657                 }\n658                 thompson::State::Union { ref alternates } => {\n659                     for &sid in alternates.iter().rev() {\n660                         self.stack_push(sid, epsilons)?;\n661                     }\n662                 }\n663                 thompson::State::BinaryUnion { alt1, alt2 } => {\n664                     self.stack_push(alt2, epsilons)?;\n665                     self.stack_push(alt1, epsilons)?;\n666                 }\n667                 thompson::State::Capture { next, slot, .. } => {\n668                     let slot = slot.as_usize();\n669                     let epsilons = if slot < explicit_slot_start {\n670                         // If this is an implicit slot, we don't care\n671                         // about it, since we handle implicit slots in\n672                         // the search routine. We can get away with that\n673                         // because there are 2 implicit slots for every\n674                         // pattern.\n675                         epsilons\n676                     } else {\n677                         // Offset our explicit slots so that they start\n678                         // at index 0.\n679                         let offset = slot - explicit_slot_start;\n680                         epsilons.set_slots(epsilons.slots().insert(offset))\n681                     };\n682                     self.stack_push(next, epsilons)?;\n683                 }\n684                 thompson::State::Fail => {\n685                     continue;\n686                 }\n687                 thompson::State::Match { pattern_id } => {\n688                     // If we found two different paths to a match state\n689                     // for the same DFA state, then we have ambiguity.\n690                     // Thus, it's not one-pass.\n691                     if self.matched {\n692                         return Err(BuildError::not_one_pass(\n693                             \"multiple epsilon transitions to match state\",\n694                         ));\n695                     }\n696                     self.matched = true;\n697                     // Shove the matching pattern ID and the 'epsilons'\n698                     // into the current DFA state's pattern epsilons. The\n699                     // 'epsilons' includes the slots we need to capture\n700                     // before reporting the match and also the conditional\n701                     // epsilon transitions we need to check before we can\n702                     // report a match.\n703                     self.dfa.set_pattern_epsilons(\n704                         dfa_id,\n705                         PatternEpsilons::empty()\n706                             .set_pattern_id(pattern_id)\n707                             .set_epsilons(epsilons),\n708                     );\n709                     // N.B. It is tempting to just bail out here when\n710                     // compiling a leftmost-first DFA, since we will never\n711                     // compile any more transitions in that case. But we\n712                     // actually need to keep going in order to verify that\n713                     // we actually have a one-pass regex. e.g., We might\n714                     // see more Match states (e.g., for other patterns)\n715                     // that imply that we don't have a one-pass regex.\n716                     // So instead, we mark that we've found a match and\n717                     // continue on. When we go to compile a new DFA state,\n718                     // we just skip that part. But otherwise check that the\n719                     // one-pass property is upheld.\n720                 }\n721             }\n722         }\n723     }\n724     self.shuffle_states();\n725     Ok(self.dfa)\n726 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}