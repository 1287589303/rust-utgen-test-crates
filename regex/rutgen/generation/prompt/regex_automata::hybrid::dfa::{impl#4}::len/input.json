{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/hybrid/dfa.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype StateMap = std::collections::HashMap<State, LazyStateID>;\n#[cfg(not(feature = \"std\"))]\ntype StateMap = alloc::collections::BTreeMap<State, LazyStateID>;\nuse core::{iter, mem::size_of};\nuse alloc::vec::Vec;\nuse crate::{\n    hybrid::{\n        error::{BuildError, CacheError, StartError},\n        id::{LazyStateID, LazyStateIDError},\n        search,\n    },\n    nfa::thompson,\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        determinize::{self, State, StateBuilderEmpty, StateBuilderNFA},\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID as NFAStateID},\n        search::{Anchored, HalfMatch, Input, MatchError, MatchKind, PatternSet},\n        sparse_set::SparseSets, start::{self, Start, StartByteMap},\n    },\n};\nconst MIN_STATES: usize = SENTINEL_STATES + 2;\nconst SENTINEL_STATES: usize = 3;\n#[derive(Clone, Debug)]\nstruct SearchProgress {\n    start: usize,\n    at: usize,\n}\nimpl SearchProgress {\n    fn len(&self) -> usize {\n        if self.start <= self.at { self.at - self.start } else { self.start - self.at }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the length, in bytes, of this search so far.\n///\n/// This automatically handles the case of a reverse search, where `at`\n/// is likely to be less than `start`.\n2058 fn len(&self) -> usize {\n2059     if self.start <= self.at {\n2060         self.at - self.start\n2061     } else {\n2062         self.start - self.at\n2063     }\n2064 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}