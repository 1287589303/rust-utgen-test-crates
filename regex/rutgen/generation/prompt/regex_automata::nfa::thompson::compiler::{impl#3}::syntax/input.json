{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Clone, Debug)]\npub struct Compiler {\n    /// A regex parser, used when compiling an NFA directly from a pattern\n    /// string.\n    parser: ParserBuilder,\n    /// The compiler configuration.\n    config: Config,\n    /// The builder for actually constructing an NFA. This provides a\n    /// convenient abstraction for writing a compiler.\n    builder: RefCell<Builder>,\n    /// State used for compiling character classes to UTF-8 byte automata.\n    /// State is not retained between character class compilations. This just\n    /// serves to amortize allocation to the extent possible.\n    utf8_state: RefCell<Utf8State>,\n    /// State used for arranging character classes in reverse into a trie.\n    trie_state: RefCell<RangeTrie>,\n    /// State used for caching common suffixes when compiling reverse UTF-8\n    /// automata (for Unicode character classes).\n    utf8_suffix: RefCell<Utf8SuffixMap>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    #[cfg(feature = \"dfa-build\")]\n    dfa: dense::Builder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Utf8SuffixMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8SuffixEntry>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone)]\npub struct RangeTrie {\n    /// The states in this trie. The first is always the shared final state.\n    /// The second is always the root state. Otherwise, there is no\n    /// particular order.\n    states: Vec<State>,\n    /// A free-list of states. When a range trie is cleared, all of its states\n    /// are added to this list. Creating a new state reuses states from this\n    /// list before allocating a new one.\n    free: Vec<State>,\n    /// A stack for traversing this trie to yield sequences of byte ranges in\n    /// lexicographic order.\n    iter_stack: RefCell<Vec<NextIter>>,\n    /// A buffer that stores the current sequence during iteration.\n    iter_ranges: RefCell<Vec<Utf8Range>>,\n    /// A stack used for traversing the trie in order to (deeply) duplicate\n    /// a state. States are recursively duplicated when ranges are split.\n    dupe_stack: Vec<NextDupe>,\n    /// A stack used for traversing the trie during insertion of a new\n    /// sequence of byte ranges.\n    insert_stack: Vec<NextInsert>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    dfa: dfa::Builder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\nstruct Utf8State {\n    compiled: Utf8BoundedMap,\n    uncompiled: Vec<Utf8Node>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Builder {\n    /// The ID of the pattern that we're currently building.\n    ///\n    /// Callers are required to set (and unset) this by calling\n    /// {start,finish}_pattern. Otherwise, most methods will panic.\n    pattern_id: Option<PatternID>,\n    /// A sequence of intermediate NFA states. Once a state is added to this\n    /// sequence, it is assigned a state ID equivalent to its index. Once a\n    /// state is added, it is still expected to be mutated, e.g., to set its\n    /// transition to a state that didn't exist at the time it was added.\n    states: Vec<State>,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// A map from pattern ID to capture group index to name. (If no name\n    /// exists, then a None entry is present. Thus, all capturing groups are\n    /// present in this mapping.)\n    ///\n    /// The outer vec is indexed by pattern ID, while the inner vec is indexed\n    /// by capture index offset for the corresponding pattern.\n    ///\n    /// The first capture group for each pattern is always unnamed and is thus\n    /// always None.\n    captures: Vec<Vec<Option<Arc<str>>>>,\n    /// The combined memory used by each of the 'State's in 'states'. This\n    /// only includes heap usage by each state, and not the size of the state\n    /// itself. In other words, this tracks heap memory used that isn't\n    /// captured via `size_of::<State>() * states.len()`.\n    memory_states: usize,\n    /// Whether this NFA only matches UTF-8 and whether regex engines using\n    /// this NFA for searching should report empty matches that split a\n    /// codepoint.\n    utf8: bool,\n    /// Whether this NFA should be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to use for look-around assertions.\n    look_matcher: LookMatcher,\n    /// A size limit to respect when building an NFA. If the total heap memory\n    /// of the intermediate NFA states exceeds (or would exceed) this amount,\n    /// then an error is returned.\n    size_limit: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\nimpl Compiler {\n    pub fn new() -> Compiler {}\n    pub fn build(&self, pattern: &str) -> Result<NFA, BuildError> {}\n    pub fn build_many<P: AsRef<str>>(&self, patterns: &[P]) -> Result<NFA, BuildError> {}\n    pub fn build_from_hir(&self, expr: &Hir) -> Result<NFA, BuildError> {}\n    pub fn build_many_from_hir<H: Borrow<Hir>>(\n        &self,\n        exprs: &[H],\n    ) -> Result<NFA, BuildError> {}\n    pub fn configure(&mut self, config: Config) -> &mut Compiler {}\n    pub fn syntax(&mut self, config: crate::util::syntax::Config) -> &mut Compiler {\n        config.apply(&mut self.parser);\n        self\n    }\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn case_insensitive(mut self, yes: bool) -> Config {}\n    pub fn multi_line(mut self, yes: bool) -> Config {}\n    pub fn dot_matches_new_line(mut self, yes: bool) -> Config {}\n    pub fn crlf(mut self, yes: bool) -> Config {}\n    pub fn line_terminator(mut self, byte: u8) -> Config {}\n    pub fn swap_greed(mut self, yes: bool) -> Config {}\n    pub fn ignore_whitespace(mut self, yes: bool) -> Config {}\n    pub fn unicode(mut self, yes: bool) -> Config {}\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn nest_limit(mut self, limit: u32) -> Config {}\n    pub fn octal(mut self, yes: bool) -> Config {}\n    pub fn get_unicode(&self) -> bool {}\n    pub fn get_case_insensitive(&self) -> bool {}\n    pub fn get_multi_line(&self) -> bool {}\n    pub fn get_dot_matches_new_line(&self) -> bool {}\n    pub fn get_crlf(&self) -> bool {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    pub fn get_swap_greed(&self) -> bool {}\n    pub fn get_ignore_whitespace(&self) -> bool {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn get_nest_limit(&self) -> u32 {}\n    pub fn get_octal(&self) -> bool {}\n    pub(crate) fn apply(&self, builder: &mut ParserBuilder) {\n        builder\n            .unicode(self.unicode)\n            .case_insensitive(self.case_insensitive)\n            .multi_line(self.multi_line)\n            .dot_matches_new_line(self.dot_matches_new_line)\n            .crlf(self.crlf)\n            .line_terminator(self.line_terminator)\n            .swap_greed(self.swap_greed)\n            .ignore_whitespace(self.ignore_whitespace)\n            .utf8(self.utf8)\n            .nest_limit(self.nest_limit)\n            .octal(self.octal);\n    }\n    pub(crate) fn apply_ast(&self, builder: &mut ast::parse::ParserBuilder) {}\n    pub(crate) fn apply_hir(&self, builder: &mut hir::translate::TranslatorBuilder) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the syntax configuration for this builder using\n/// [`syntax::Config`](crate::util::syntax::Config).\n///\n/// This permits setting things like case insensitivity, Unicode and multi\n/// line mode.\n///\n/// This syntax configuration only applies when an NFA is built directly\n/// from a pattern string. If an NFA is built from an HIR, then all syntax\n/// settings are ignored.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, util::syntax};\n///\n/// let syntax_config = syntax::Config::new().unicode(false);\n/// let nfa = NFA::compiler().syntax(syntax_config).build(r\"\\w\")?;\n/// // If Unicode were enabled, the number of states would be much bigger.\n/// assert!(nfa.states().len() < 15);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n924 pub fn syntax(\n925     &mut self,\n926     config: crate::util::syntax::Config,\n927 ) -> &mut Compiler {\n928     config.apply(&mut self.parser);\n929     self\n930 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}