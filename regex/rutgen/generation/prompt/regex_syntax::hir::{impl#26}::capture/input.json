{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Capture {\n    /// The capture index of the capture.\n    pub index: u32,\n    /// The name of the capture, if it exists.\n    pub name: Option<Box<str>>,\n    /// The expression inside the capturing group, which may be empty.\n    pub sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\nstruct PropertiesI {\n    minimum_len: Option<usize>,\n    maximum_len: Option<usize>,\n    look_set: LookSet,\n    look_set_prefix: LookSet,\n    look_set_suffix: LookSet,\n    look_set_prefix_any: LookSet,\n    look_set_suffix_any: LookSet,\n    utf8: bool,\n    explicit_captures_len: usize,\n    static_explicit_captures_len: Option<usize>,\n    literal: bool,\n    alternation_literal: bool,\n}\nimpl Properties {\n    fn empty() -> Properties {}\n    fn literal(lit: &Literal) -> Properties {}\n    fn class(class: &Class) -> Properties {}\n    fn look(look: Look) -> Properties {}\n    fn repetition(rep: &Repetition) -> Properties {}\n    fn capture(capture: &Capture) -> Properties {\n        let p = capture.sub.properties();\n        Properties(\n            Box::new(PropertiesI {\n                explicit_captures_len: p.explicit_captures_len().saturating_add(1),\n                static_explicit_captures_len: p\n                    .static_explicit_captures_len()\n                    .map(|len| len.saturating_add(1)),\n                literal: false,\n                alternation_literal: false,\n                ..*p.0.clone()\n            }),\n        )\n    }\n    fn concat(concat: &[Hir]) -> Properties {}\n    fn alternation(alts: &[Hir]) -> Properties {}\n}\nimpl Hir {\n    pub fn kind(&self) -> &HirKind {}\n    pub fn into_kind(mut self) -> HirKind {}\n    pub fn properties(&self) -> &Properties {\n        &self.props\n    }\n    fn into_parts(mut self) -> (HirKind, Properties) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new set of HIR properties for a capture.\n2557 fn capture(capture: &Capture) -> Properties {\n2558     let p = capture.sub.properties();\n2559     Properties(Box::new(PropertiesI {\n2560         explicit_captures_len: p.explicit_captures_len().saturating_add(1),\n2561         static_explicit_captures_len: p\n2562             .static_explicit_captures_len()\n2563             .map(|len| len.saturating_add(1)),\n2564         literal: false,\n2565         alternation_literal: false,\n2566         ..*p.0.clone()\n2567     }))\n2568 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}