{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/lazy.rs\n// crate name is regex_automata\nuse core::fmt;\npub struct Lazy<T, F = fn() -> T>(lazy::Lazy<T, F>);\npub(super) struct Lazy<T, F> {\n    state: AtomicU8,\n    create: Cell<Option<F>>,\n    data: Cell<MaybeUninit<T>>,\n}\n#[derive(Debug)]\nstruct Lazy<'i, 'c> {\n    dfa: &'i DFA,\n    cache: &'c mut Cache,\n}\nimpl<T, F: Fn() -> T> Lazy<T, F> {\n    pub fn get(this: &Lazy<T, F>) -> &T {\n        this.0.get()\n    }\n}\nimpl<T, F: FnOnce() -> T> Lazy<T, F> {\n    pub(super) fn get(&self) -> &T {\n        while self.state.load(Ordering::Acquire) != LAZY_STATE_DONE {\n            let result = self\n                .state\n                .compare_exchange(\n                    LAZY_STATE_INIT,\n                    LAZY_STATE_BUSY,\n                    Ordering::AcqRel,\n                    Ordering::Acquire,\n                );\n            if let Ok(_) = result {\n                let create = unsafe {\n                    (*self.create.as_ptr())\n                        .take()\n                        .expect(\n                            \"Lazy's create function panicked, \\\n                             preventing initialization,\n                             poisoning current thread\",\n                        )\n                };\n                let guard = Guard { state: &self.state };\n                unsafe {\n                    (*self.data.as_ptr()).as_mut_ptr().write(create());\n                }\n                core::mem::forget(guard);\n                self.state.store(LAZY_STATE_DONE, Ordering::Release);\n                break;\n            }\n            core::hint::spin_loop();\n        }\n        self.poll().unwrap()\n    }\n    fn poll(&self) -> Option<&T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a reference to the lazily initialized value.\n///\n/// This routine may block if another thread is initializing a `T`.\n///\n/// Note that given a `x` which has type `Lazy`, this must be called via\n/// `Lazy::get(x)` and not `x.get()`. This routine is defined this way\n/// because `Lazy` impls `Deref` with a target of `T`.\n///\n/// # Panics\n///\n/// This panics if the `create` function inside this lazy value panics.\n/// If the panic occurred in another thread, then this routine _may_ also\n/// panic (but is not guaranteed to do so).\n78 pub fn get(this: &Lazy<T, F>) -> &T {\n79     this.0.get()\n80 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}