{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Debug, Eq, PartialEq)]\nstruct PropertiesI {\n    minimum_len: Option<usize>,\n    maximum_len: Option<usize>,\n    look_set: LookSet,\n    look_set_prefix: LookSet,\n    look_set_suffix: LookSet,\n    look_set_prefix_any: LookSet,\n    look_set_suffix_any: LookSet,\n    utf8: bool,\n    explicit_captures_len: usize,\n    static_explicit_captures_len: Option<usize>,\n    literal: bool,\n    alternation_literal: bool,\n}\nimpl Properties {\n    #[inline]\n    pub fn minimum_len(&self) -> Option<usize> {\n        self.0.minimum_len\n    }\n    #[inline]\n    pub fn maximum_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn look_set(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_suffix(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_suffix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {}\n    #[inline]\n    pub fn explicit_captures_len(&self) -> usize {}\n    #[inline]\n    pub fn static_explicit_captures_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn is_literal(&self) -> bool {}\n    #[inline]\n    pub fn is_alternation_literal(&self) -> bool {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n    pub fn union<I, P>(props: I) -> Properties\n    where\n        I: IntoIterator<Item = P>,\n        P: core::borrow::Borrow<Properties>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the length (in bytes) of the smallest string matched by this\n/// HIR.\n///\n/// A return value of `0` is possible and occurs when the HIR can match an\n/// empty string.\n///\n/// `None` is returned when there is no minimum length. This occurs in\n/// precisely the cases where the HIR matches nothing. i.e., The language\n/// the regex matches is empty. An example of such a regex is `\\P{any}`.\n2000 pub fn minimum_len(&self) -> Option<usize> {\n2001     self.0.minimum_len\n2002 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}