{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/lib.rs\n// crate name is regex_syntax\npub use crate::{\n    error::Error, parser::{parse, Parser, ParserBuilder},\n    unicode::UnicodeWordError,\n};\nuse alloc::string::String;\npub fn is_meta_character(c: char) -> bool {\n    match c {\n        '\\\\' | '.' | '+' | '*' | '?' | '(' | ')' | '|' | '[' | ']' | '{' | '}' | '^'\n        | '$' | '#' | '&' | '-' | '~' => true,\n        _ => false,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if the given character has significance in a regex.\n///\n/// Generally speaking, these are the only characters which _must_ be escaped\n/// in order to match their literal meaning. For example, to match a literal\n/// `|`, one could write `\\|`. Sometimes escaping isn't always necessary. For\n/// example, `-` is treated as a meta character because of its significance\n/// for writing ranges inside of character classes, but the regex `-` will\n/// match a literal `-` because `-` has no special meaning outside of character\n/// classes.\n///\n/// In order to determine whether a character may be escaped at all, the\n/// [`is_escapeable_character`] routine should be used. The difference between\n/// `is_meta_character` and `is_escapeable_character` is that the latter will\n/// return true for some characters that are _not_ meta characters. For\n/// example, `%` and `\\%` both match a literal `%` in all contexts. In other\n/// words, `is_escapeable_character` includes \"superfluous\" escapes.\n///\n/// Note that the set of characters for which this function returns `true` or\n/// `false` is fixed and won't change in a semver compatible release. (In this\n/// case, \"semver compatible release\" actually refers to the `regex` crate\n/// itself, since reducing or expanding the set of meta characters would be a\n/// breaking change for not just `regex-syntax` but also `regex` itself.)\n///\n/// # Example\n///\n/// ```\n/// use regex_syntax::is_meta_character;\n///\n/// assert!(is_meta_character('?'));\n/// assert!(is_meta_character('-'));\n/// assert!(is_meta_character('&'));\n/// assert!(is_meta_character('#'));\n///\n/// assert!(!is_meta_character('%'));\n/// assert!(!is_meta_character('/'));\n/// assert!(!is_meta_character('!'));\n/// assert!(!is_meta_character('\"'));\n/// assert!(!is_meta_character('e'));\n/// ```\n260 pub fn is_meta_character(c: char) -> bool {\n261     match c {\n262         '\\\\' | '.' | '+' | '*' | '?' | '(' | ')' | '|' | '[' | ']' | '{'\n263         | '}' | '^' | '$' | '#' | '&' | '-' | '~' => true,\n264         _ => false,\n265     }\n266 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}