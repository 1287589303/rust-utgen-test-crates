{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/lib.rs\n// crate name is regex_syntax\npub use crate::{\n    error::Error, parser::{parse, Parser, ParserBuilder},\n    unicode::UnicodeWordError,\n};\nuse alloc::string::String;\npub fn is_meta_character(c: char) -> bool {\n    match c {\n        '\\\\' | '.' | '+' | '*' | '?' | '(' | ')' | '|' | '[' | ']' | '{' | '}' | '^'\n        | '$' | '#' | '&' | '-' | '~' => true,\n        _ => false,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if the given character has significance in a regex.\n///\n/// Generally speaking, these are the only characters which _must_ be escaped\n/// in order to match their literal meaning. For example, to match a literal\n/// `|`, one could write `\\|`. Sometimes escaping isn't always necessary. For\n/// example, `-` is treated as a meta character because of its significance\n/// for writing ranges inside of character classes, but the regex `-` will\n/// match a literal `-` because `-` has no special meaning outside of character\n/// classes.\n///\n/// In order to determine whether a character may be escaped at all, the\n/// [`is_escapeable_character`] routine should be used. The difference between\n/// `is_meta_character` and `is_escapeable_character` is that the latter will\n/// return true for some characters that are _not_ meta characters. For\n/// example, `%` and `\\%` both match a literal `%` in all contexts. In other\n/// words, `is_escapeable_character` includes \"superfluous\" escapes.\n///\n/// Note that the set of characters for which this function returns `true` or\n/// `false` is fixed and won't change in a semver compatible release. (In this\n/// case, \"semver compatible release\" actually refers to the `regex` crate\n/// itself, since reducing or expanding the set of meta characters would be a\n/// breaking change for not just `regex-syntax` but also `regex` itself.)\n///\n/// # Example\n///\n/// ```\n/// use regex_syntax::is_meta_character;\n///\n/// assert!(is_meta_character('?'));\n/// assert!(is_meta_character('-'));\n/// assert!(is_meta_character('&'));\n/// assert!(is_meta_character('#'));\n///\n/// assert!(!is_meta_character('%'));\n/// assert!(!is_meta_character('/'));\n/// assert!(!is_meta_character('!'));\n/// assert!(!is_meta_character('\"'));\n/// assert!(!is_meta_character('e'));\n/// ```\n260 pub fn is_meta_character(c: char) -> bool {\n261     match c {\n262         '\\\\' | '.' | '+' | '*' | '?' | '(' | ')' | '|' | '[' | ']' | '{'\n263         | '}' | '^' | '$' | '#' | '&' | '-' | '~' => true,\n264         _ => false,\n265     }\n266 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}