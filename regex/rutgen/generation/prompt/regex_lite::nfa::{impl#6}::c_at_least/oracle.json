{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/nfa.rs\n// crate name is regex_lite\npub(crate) type StateID = u32;\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, u32>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, u32>;\nuse core::{cell::RefCell, mem::size_of};\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::{\n    error::Error, hir::{self, Hir, HirKind},\n    int::U32,\n};\n#[derive(Debug)]\nstruct Compiler {\n    config: Config,\n    nfa: RefCell<NFA>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Copy, Debug)]\nstruct ThompsonRef {\n    start: StateID,\n    end: StateID,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\n#[derive(Clone)]\npub(crate) struct NFA {\n    /// The pattern string this NFA was generated from.\n    ///\n    /// We put it here for lack of a better place to put it. ¯\\_(ツ)_/¯\n    pattern: String,\n    /// The states that make up this NFA.\n    states: Vec<State>,\n    /// The ID of the start state.\n    start: StateID,\n    /// Whether this NFA can only match at the beginning of a haystack.\n    is_start_anchored: bool,\n    /// Whether this NFA can match the empty string.\n    is_match_empty: bool,\n    /// If every match has the same number of matching capture groups, then\n    /// this corresponds to the number of groups.\n    static_explicit_captures_len: Option<usize>,\n    /// A map from capture group name to its corresponding index.\n    cap_name_to_index: CaptureNameMap,\n    /// A map from capture group index to the corresponding name, if one\n    /// exists.\n    cap_index_to_name: Vec<Option<Arc<str>>>,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Eq, PartialEq)]\npub(crate) enum State {\n    Char { target: StateID, ch: char },\n    Ranges { target: StateID, ranges: Vec<(char, char)> },\n    Splits { targets: Vec<StateID>, reverse: bool },\n    Goto { target: StateID, look: Option<hir::Look> },\n    Capture { target: StateID, slot: u32 },\n    Fail,\n    Match,\n}\nimpl Compiler {\n    fn new(config: Config, pattern: String) -> Compiler {}\n    fn compile(self, hir: &Hir) -> Result<NFA, Error> {}\n    fn c(&self, hir: &Hir) -> Result<ThompsonRef, Error> {\n        match *hir.kind() {\n            HirKind::Empty => self.c_empty(),\n            HirKind::Char(ch) => self.c_char(ch),\n            HirKind::Class(ref class) => self.c_class(class),\n            HirKind::Look(ref look) => self.c_look(look),\n            HirKind::Repetition(ref rep) => self.c_repetition(rep),\n            HirKind::Capture(ref cap) => {\n                self.c_capture(cap.index, cap.name.as_deref(), &cap.sub)\n            }\n            HirKind::Concat(ref subs) => self.c_concat(subs.iter().map(|s| self.c(s))),\n            HirKind::Alternation(ref subs) => {\n                self.c_alternation(subs.iter().map(|s| self.c(s)))\n            }\n        }\n    }\n    fn c_fail(&self) -> Result<ThompsonRef, Error> {}\n    fn c_empty(&self) -> Result<ThompsonRef, Error> {}\n    fn c_char(&self, ch: char) -> Result<ThompsonRef, Error> {}\n    fn c_class(&self, class: &hir::Class) -> Result<ThompsonRef, Error> {}\n    fn c_look(&self, look: &hir::Look) -> Result<ThompsonRef, Error> {}\n    fn c_repetition(&self, rep: &hir::Repetition) -> Result<ThompsonRef, Error> {}\n    fn c_bounded(\n        &self,\n        hir: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> Result<ThompsonRef, Error> {}\n    fn c_at_least(&self, hir: &Hir, greedy: bool, n: u32) -> Result<ThompsonRef, Error> {\n        if n == 0 {\n            if !hir.is_match_empty() {\n                let splits = self\n                    .add(State::Splits {\n                        targets: vec![],\n                        reverse: !greedy,\n                    })?;\n                let compiled = self.c(hir)?;\n                self.patch(splits, compiled.start)?;\n                self.patch(compiled.end, splits)?;\n                return Ok(ThompsonRef {\n                    start: splits,\n                    end: splits,\n                });\n            }\n            let compiled = self.c(hir)?;\n            let plus = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            self.patch(compiled.end, plus)?;\n            self.patch(plus, compiled.start)?;\n            let question = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            let empty = self.add_empty()?;\n            self.patch(question, compiled.start)?;\n            self.patch(question, empty)?;\n            self.patch(plus, empty)?;\n            Ok(ThompsonRef {\n                start: question,\n                end: empty,\n            })\n        } else if n == 1 {\n            let compiled = self.c(hir)?;\n            let splits = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            self.patch(compiled.end, splits)?;\n            self.patch(splits, compiled.start)?;\n            Ok(ThompsonRef {\n                start: compiled.start,\n                end: splits,\n            })\n        } else {\n            let prefix = self.c_exactly(hir, n - 1)?;\n            let last = self.c(hir)?;\n            let splits = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            self.patch(prefix.end, last.start)?;\n            self.patch(last.end, splits)?;\n            self.patch(splits, last.start)?;\n            Ok(ThompsonRef {\n                start: prefix.start,\n                end: splits,\n            })\n        }\n    }\n    fn c_zero_or_one(&self, hir: &Hir, greedy: bool) -> Result<ThompsonRef, Error> {}\n    fn c_exactly(&self, hir: &Hir, n: u32) -> Result<ThompsonRef, Error> {\n        self.c_concat((0..n).map(|_| self.c(hir)))\n    }\n    fn c_capture(\n        &self,\n        index: u32,\n        name: Option<&str>,\n        hir: &Hir,\n    ) -> Result<ThompsonRef, Error> {}\n    fn c_concat<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn c_alternation<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn add_empty(&self) -> Result<StateID, Error> {\n        self.add(State::Goto {\n            target: 0,\n            look: None,\n        })\n    }\n    fn add(&self, state: State) -> Result<StateID, Error> {\n        let id = u32::try_from(self.nfa.borrow().states.len())\n            .map_err(|_| Error::new(\"exhausted state IDs, too many states\"))?;\n        self.nfa.borrow_mut().memory_extra += state.memory_usage();\n        self.nfa.borrow_mut().states.push(state);\n        self.check_size_limit()?;\n        Ok(id)\n    }\n    fn patch(&self, from: StateID, to: StateID) -> Result<(), Error> {\n        let mut new_memory_extra = self.nfa.borrow().memory_extra;\n        match self.nfa.borrow_mut().states[from.as_usize()] {\n            State::Char { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Ranges { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Splits { ref mut targets, .. } => {\n                targets.push(to);\n                new_memory_extra += size_of::<StateID>();\n            }\n            State::Goto { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Capture { ref mut target, .. } => {\n                *target = to;\n            }\n            State::Fail | State::Match => {}\n        }\n        if new_memory_extra != self.nfa.borrow().memory_extra {\n            self.nfa.borrow_mut().memory_extra = new_memory_extra;\n            self.check_size_limit()?;\n        }\n        Ok(())\n    }\n    fn check_size_limit(&self) -> Result<(), Error> {}\n}\nimpl Hir {\n    pub(crate) fn parse(config: Config, pattern: &str) -> Result<Hir, Error> {}\n    pub(crate) fn kind(&self) -> &HirKind {}\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn is_match_empty(&self) -> bool {\n        self.is_match_empty\n    }\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {}\n    fn fail() -> Hir {}\n    fn empty() -> Hir {}\n    fn char(ch: char) -> Hir {}\n    fn class(class: Class) -> Hir {}\n    fn look(look: Look) -> Hir {}\n    fn repetition(rep: Repetition) -> Hir {}\n    fn capture(cap: Capture) -> Hir {}\n    fn concat(mut subs: Vec<Hir>) -> Hir {}\n    fn alternation(mut subs: Vec<Hir>) -> Hir {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compile the given expression such that it may be matched `n` or more\n/// times, where `n` can be any integer. (Although a particularly large\n/// integer is likely to run afoul of any configured size limits.)\n///\n/// When `greedy` is true, then the preference is for the expression to\n/// match as much as possible. Otherwise, it will match as little as\n/// possible.\n443 fn c_at_least(\n444     &self,\n445     hir: &Hir,\n446     greedy: bool,\n447     n: u32,\n448 ) -> Result<ThompsonRef, Error> {\n449     if n == 0 {\n450         // When the expression cannot match the empty string, then we\n451         // can get away with something much simpler: just one 'alt'\n452         // instruction that optionally repeats itself. But if the expr\n453         // can match the empty string... see below.\n454         if !hir.is_match_empty() {\n455             let splits = self.add(State::Splits {\n456                 targets: vec![],\n457                 reverse: !greedy,\n458             })?;\n459             let compiled = self.c(hir)?;\n460             self.patch(splits, compiled.start)?;\n461             self.patch(compiled.end, splits)?;\n462             return Ok(ThompsonRef { start: splits, end: splits });\n463         }\n464 \n465         // What's going on here? Shouldn't x* be simpler than this? It\n466         // turns out that when implementing leftmost-first (Perl-like)\n467         // match semantics, x* results in an incorrect preference order\n468         // when computing the transitive closure of states if and only if\n469         // 'x' can match the empty string. So instead, we compile x* as\n470         // (x+)?, which preserves the correct preference order.\n471         //\n472         // See: https://github.com/rust-lang/regex/issues/779\n473         let compiled = self.c(hir)?;\n474         let plus =\n475             self.add(State::Splits { targets: vec![], reverse: !greedy })?;\n476         self.patch(compiled.end, plus)?;\n477         self.patch(plus, compiled.start)?;\n478 \n479         let question =\n480             self.add(State::Splits { targets: vec![], reverse: !greedy })?;\n481         let empty = self.add_empty()?;\n482         self.patch(question, compiled.start)?;\n483         self.patch(question, empty)?;\n484         self.patch(plus, empty)?;\n485         Ok(ThompsonRef { start: question, end: empty })\n486     } else if n == 1 {\n487         let compiled = self.c(hir)?;\n488         let splits =\n489             self.add(State::Splits { targets: vec![], reverse: !greedy })?;\n490         self.patch(compiled.end, splits)?;\n491         self.patch(splits, compiled.start)?;\n492         Ok(ThompsonRef { start: compiled.start, end: splits })\n493     } else {\n494         let prefix = self.c_exactly(hir, n - 1)?;\n495         let last = self.c(hir)?;\n496         let splits =\n497             self.add(State::Splits { targets: vec![], reverse: !greedy })?;\n498         self.patch(prefix.end, last.start)?;\n499         self.patch(last.end, splits)?;\n500         self.patch(splits, last.start)?;\n501         Ok(ThompsonRef { start: prefix.start, end: splits })\n502     }\n503 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}