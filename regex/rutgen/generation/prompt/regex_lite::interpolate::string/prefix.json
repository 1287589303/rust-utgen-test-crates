{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/interpolate.rs\n// crate name is regex_lite\nuse alloc::string::String;\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nstruct CaptureRef<'a> {\n    cap: Ref<'a>,\n    end: usize,\n}\npub fn string(\n    mut replacement: &str,\n    mut append: impl FnMut(usize, &mut String),\n    mut name_to_index: impl FnMut(&str) -> Option<usize>,\n    dst: &mut String,\n) {\n    while !replacement.is_empty() {\n        match replacement.find('$') {\n            None => break,\n            Some(i) => {\n                dst.push_str(&replacement[..i]);\n                replacement = &replacement[i..];\n            }\n        }\n        if replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') {\n            dst.push_str(\"$\");\n            replacement = &replacement[2..];\n            continue;\n        }\n        debug_assert!(! replacement.is_empty());\n        let cap_ref = match find_cap_ref(replacement.as_bytes()) {\n            Some(cap_ref) => cap_ref,\n            None => {\n                dst.push_str(\"$\");\n                replacement = &replacement[1..];\n                continue;\n            }\n        };\n        replacement = &replacement[cap_ref.end..];\n        match cap_ref.cap {\n            Ref::Number(i) => append(i, dst),\n            Ref::Named(name) => {\n                if let Some(i) = name_to_index(name) {\n                    append(i, dst);\n                }\n            }\n        }\n    }\n    dst.push_str(replacement);\n}\nfn find_cap_ref(replacement: &[u8]) -> Option<CaptureRef<'_>> {\n    let mut i = 0;\n    let rep: &[u8] = replacement;\n    if rep.len() <= 1 || rep[0] != b'$' {\n        return None;\n    }\n    i += 1;\n    if rep[i] == b'{' {\n        return find_cap_ref_braced(rep, i + 1);\n    }\n    let mut cap_end = i;\n    while rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) {\n        cap_end += 1;\n    }\n    if cap_end == i {\n        return None;\n    }\n    let cap = core::str::from_utf8(&rep[i..cap_end]).expect(\"valid UTF-8 capture name\");\n    Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Accepts a replacement string and interpolates capture references with their\n/// corresponding values.\n///\n/// `append` should be a function that appends the string value of a capture\n/// group at a particular index to the string given. If the capture group\n/// index is invalid, then nothing should be appended.\n///\n/// `name_to_index` should be a function that maps a capture group name to a\n/// capture group index. If the given name doesn't exist, then `None` should\n/// be returned.\n///\n/// Finally, `dst` is where the final interpolated contents should be written.\n/// If `replacement` contains no capture group references, then `dst` will be\n/// equivalent to `replacement`.\n///\n/// See the [module documentation](self) for details about the format\n/// supported.\n 67 pub fn string(\n 68     mut replacement: &str,\n 69     mut append: impl FnMut(usize, &mut String),\n 70     mut name_to_index: impl FnMut(&str) -> Option<usize>,\n 71     dst: &mut String,\n 72 ) {\n 73     while !replacement.is_empty() {\n 74         match replacement.find('$') {\n 75             None => break,\n 76             Some(i) => {\n 77                 dst.push_str(&replacement[..i]);\n 78                 replacement = &replacement[i..];\n 79             }\n 80         }\n 81         // Handle escaping of '$'.\n 82         if replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') {\n 83             dst.push_str(\"$\");\n 84             replacement = &replacement[2..];\n 85             continue;\n 86         }\n 87         debug_assert!(!replacement.is_empty());\n 88         let cap_ref = match find_cap_ref(replacement.as_bytes()) {\n 89             Some(cap_ref) => cap_ref,\n 90             None => {\n 91                 dst.push_str(\"$\");\n 92                 replacement = &replacement[1..];\n 93                 continue;\n 94             }\n 95         };\n 96         replacement = &replacement[cap_ref.end..];\n 97         match cap_ref.cap {\n 98             Ref::Number(i) => append(i, dst),\n 99             Ref::Named(name) => {\n100                 if let Some(i) = name_to_index(name) {\n101                     append(i, dst);\n102                 }\n103             }\n104         }\n105     }\n106     dst.push_str(replacement);\n107 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}