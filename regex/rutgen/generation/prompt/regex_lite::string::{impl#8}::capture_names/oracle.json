{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone)]\npub(crate) struct NFA {\n    /// The pattern string this NFA was generated from.\n    ///\n    /// We put it here for lack of a better place to put it. ¯\\_(ツ)_/¯\n    pattern: String,\n    /// The states that make up this NFA.\n    states: Vec<State>,\n    /// The ID of the start state.\n    start: StateID,\n    /// Whether this NFA can only match at the beginning of a haystack.\n    is_start_anchored: bool,\n    /// Whether this NFA can match the empty string.\n    is_match_empty: bool,\n    /// If every match has the same number of matching capture groups, then\n    /// this corresponds to the number of groups.\n    static_explicit_captures_len: Option<usize>,\n    /// A map from capture group name to its corresponding index.\n    cap_name_to_index: CaptureNameMap,\n    /// A map from capture group index to the corresponding name, if one\n    /// exists.\n    cap_index_to_name: Vec<Option<Arc<str>>>,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct CaptureNames<'a> {\n    it: core::slice::Iter<'a, Option<Arc<str>>>,\n}\n#[derive(Clone, Debug)]\npub struct CaptureNames<'r>(nfa::CaptureNames<'r>);\nimpl Regex {\n    #[inline]\n    pub fn as_str(&self) -> &str {}\n    #[inline]\n    pub fn capture_names(&self) -> CaptureNames<'_> {\n        CaptureNames(self.pikevm.nfa().capture_names())\n    }\n    #[inline]\n    pub fn captures_len(&self) -> usize {}\n    #[inline]\n    pub fn static_captures_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn capture_locations(&self) -> CaptureLocations {}\n}\nimpl PikeVM {\n    pub(crate) fn new(nfa: NFA) -> PikeVM {}\n    pub(crate) fn nfa(&self) -> &NFA {\n        &self.nfa\n    }\n    pub(crate) fn find_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> FindMatches<'r, 'h> {}\n    pub(crate) fn captures_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> CapturesMatches<'r, 'h> {}\n    pub(crate) fn search(\n        &self,\n        cache: &mut Cache,\n        haystack: &[u8],\n        start: usize,\n        end: usize,\n        earliest: bool,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {}\n    fn nexts(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr: &mut ActiveStates,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {}\n    fn next(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slot_table: &mut SlotTable,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        sid: StateID,\n    ) -> bool {}\n    fn epsilon_closure(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        sid: StateID,\n    ) {}\n    fn epsilon_closure_explore(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        mut sid: StateID,\n    ) {}\n}\nimpl NFA {\n    pub(crate) fn new(config: Config, pattern: String, hir: &Hir) -> Result<NFA, Error> {}\n    pub(crate) fn pattern(&self) -> &str {}\n    pub(crate) fn state(&self, id: StateID) -> &State {}\n    pub(crate) fn len(&self) -> usize {}\n    pub(crate) fn start(&self) -> StateID {}\n    pub(crate) fn to_index(&self, name: &str) -> Option<usize> {}\n    pub(crate) fn capture_names(&self) -> CaptureNames<'_> {\n        CaptureNames {\n            it: self.cap_index_to_name.iter(),\n        }\n    }\n    pub(crate) fn group_len(&self) -> usize {}\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {}\n    fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over the capture names in this regex.\n///\n/// The iterator returned yields elements of type `Option<&str>`. That is,\n/// the iterator yields values for all capture groups, even ones that are\n/// unnamed. The order of the groups corresponds to the order of the group's\n/// corresponding opening parenthesis.\n///\n/// The first element of the iterator always yields the group corresponding\n/// to the overall match, and this group is always unnamed. Therefore, the\n/// iterator always yields at least one group.\n///\n/// # Example\n///\n/// This shows basic usage with a mix of named and unnamed capture groups:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), Some(Some(\"a\")));\n/// assert_eq!(names.next(), Some(Some(\"b\")));\n/// assert_eq!(names.next(), Some(None));\n/// // the '(?:.)' group is non-capturing and so doesn't appear here!\n/// assert_eq!(names.next(), Some(Some(\"c\")));\n/// assert_eq!(names.next(), None);\n/// ```\n///\n/// The iterator always yields at least one element, even for regexes with\n/// no capture groups and even for regexes that can never match:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), None);\n///\n/// let re = Regex::new(r\"[^\\s\\S]\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), None);\n/// ```\n1336 pub fn capture_names(&self) -> CaptureNames<'_> {\n1337     CaptureNames(self.pikevm.nfa().capture_names())\n1338 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}