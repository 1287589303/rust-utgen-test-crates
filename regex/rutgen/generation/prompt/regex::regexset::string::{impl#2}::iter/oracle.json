{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/string.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{Error, RegexSetBuilder};\n#[derive(Clone, Debug)]\npub struct SetMatches(PatternSet);\n#[derive(Clone, Debug)]\npub struct SetMatchesIter<'a>(PatternSetIter<'a>);\nimpl SetMatches {\n    #[inline]\n    pub fn matched_any(&self) -> bool {}\n    pub fn matched_all(&self) -> bool {}\n    #[inline]\n    pub fn matched(&self, index: usize) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn iter(&self) -> SetMatchesIter<'_> {\n        SetMatchesIter(self.0.iter())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over the indices of the regexes that matched.\n///\n/// This will always produces matches in ascending order, where the index\n/// yielded corresponds to the index of the regex that matched with respect\n/// to its position when initially building the set.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[0-9]\",\n///     r\"[a-z]\",\n///     r\"[A-Z]\",\n///     r\"\\p{Greek}\",\n/// ]).unwrap();\n/// let hay = \"βa1\";\n/// let matches: Vec<_> = set.matches(hay).iter().collect();\n/// assert_eq!(matches, vec![0, 1, 3]);\n/// ```\n///\n/// Note that `SetMatches` also implemnets the `IntoIterator` trait, so\n/// this method is not always needed. For example:\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[0-9]\",\n///     r\"[a-z]\",\n///     r\"[A-Z]\",\n///     r\"\\p{Greek}\",\n/// ]).unwrap();\n/// let hay = \"βa1\";\n/// let mut matches = vec![];\n/// for index in set.matches(hay) {\n///     matches.push(index);\n/// }\n/// assert_eq!(matches, vec![0, 1, 3]);\n/// ```\n600 pub fn iter(&self) -> SetMatchesIter<'_> {\n601     SetMatchesIter(self.0.iter())\n602 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}