{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/string.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{Error, RegexSetBuilder};\n#[derive(Clone, Debug)]\npub struct SetMatches(PatternSet);\n#[derive(Clone, Debug)]\npub struct SetMatchesIter<'a>(PatternSetIter<'a>);\nimpl SetMatches {\n    #[inline]\n    pub fn matched_any(&self) -> bool {}\n    pub fn matched_all(&self) -> bool {}\n    #[inline]\n    pub fn matched(&self, index: usize) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn iter(&self) -> SetMatchesIter<'_> {\n        SetMatchesIter(self.0.iter())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over the indices of the regexes that matched.\n///\n/// This will always produces matches in ascending order, where the index\n/// yielded corresponds to the index of the regex that matched with respect\n/// to its position when initially building the set.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[0-9]\",\n///     r\"[a-z]\",\n///     r\"[A-Z]\",\n///     r\"\\p{Greek}\",\n/// ]).unwrap();\n/// let hay = \"βa1\";\n/// let matches: Vec<_> = set.matches(hay).iter().collect();\n/// assert_eq!(matches, vec![0, 1, 3]);\n/// ```\n///\n/// Note that `SetMatches` also implemnets the `IntoIterator` trait, so\n/// this method is not always needed. For example:\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[0-9]\",\n///     r\"[a-z]\",\n///     r\"[A-Z]\",\n///     r\"\\p{Greek}\",\n/// ]).unwrap();\n/// let hay = \"βa1\";\n/// let mut matches = vec![];\n/// for index in set.matches(hay) {\n///     matches.push(index);\n/// }\n/// assert_eq!(matches, vec![0, 1, 3]);\n/// ```\n600 pub fn iter(&self) -> SetMatchesIter<'_> {\n601     SetMatchesIter(self.0.iter())\n602 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}