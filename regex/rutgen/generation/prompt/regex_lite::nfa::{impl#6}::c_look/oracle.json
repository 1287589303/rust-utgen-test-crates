{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/nfa.rs\n// crate name is regex_lite\npub(crate) type StateID = u32;\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, u32>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, u32>;\nuse core::{cell::RefCell, mem::size_of};\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::{\n    error::Error, hir::{self, Hir, HirKind},\n    int::U32,\n};\n#[derive(Debug)]\nstruct Compiler {\n    config: Config,\n    nfa: RefCell<NFA>,\n}\n#[derive(Clone)]\npub(crate) struct NFA {\n    /// The pattern string this NFA was generated from.\n    ///\n    /// We put it here for lack of a better place to put it. ¯\\_(ツ)_/¯\n    pattern: String,\n    /// The states that make up this NFA.\n    states: Vec<State>,\n    /// The ID of the start state.\n    start: StateID,\n    /// Whether this NFA can only match at the beginning of a haystack.\n    is_start_anchored: bool,\n    /// Whether this NFA can match the empty string.\n    is_match_empty: bool,\n    /// If every match has the same number of matching capture groups, then\n    /// this corresponds to the number of groups.\n    static_explicit_captures_len: Option<usize>,\n    /// A map from capture group name to its corresponding index.\n    cap_name_to_index: CaptureNameMap,\n    /// A map from capture group index to the corresponding name, if one\n    /// exists.\n    cap_index_to_name: Vec<Option<Arc<str>>>,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Copy, Debug)]\nstruct ThompsonRef {\n    start: StateID,\n    end: StateID,\n}\n#[derive(Clone, Eq, PartialEq)]\npub(crate) enum State {\n    Char { target: StateID, ch: char },\n    Ranges { target: StateID, ranges: Vec<(char, char)> },\n    Splits { targets: Vec<StateID>, reverse: bool },\n    Goto { target: StateID, look: Option<hir::Look> },\n    Capture { target: StateID, slot: u32 },\n    Fail,\n    Match,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub(crate) enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    Word = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordNegate = 1 << 7,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStart = 1 << 8,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEnd = 1 << 9,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalf = 1 << 10,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalf = 1 << 11,\n}\nimpl Compiler {\n    fn new(config: Config, pattern: String) -> Compiler {}\n    fn compile(self, hir: &Hir) -> Result<NFA, Error> {}\n    fn c(&self, hir: &Hir) -> Result<ThompsonRef, Error> {}\n    fn c_fail(&self) -> Result<ThompsonRef, Error> {}\n    fn c_empty(&self) -> Result<ThompsonRef, Error> {}\n    fn c_char(&self, ch: char) -> Result<ThompsonRef, Error> {}\n    fn c_class(&self, class: &hir::Class) -> Result<ThompsonRef, Error> {}\n    fn c_look(&self, look: &hir::Look) -> Result<ThompsonRef, Error> {\n        let id = self\n            .add(State::Goto {\n                target: 0,\n                look: Some(*look),\n            })?;\n        Ok(ThompsonRef { start: id, end: id })\n    }\n    fn c_repetition(&self, rep: &hir::Repetition) -> Result<ThompsonRef, Error> {}\n    fn c_bounded(\n        &self,\n        hir: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> Result<ThompsonRef, Error> {}\n    fn c_at_least(&self, hir: &Hir, greedy: bool, n: u32) -> Result<ThompsonRef, Error> {}\n    fn c_zero_or_one(&self, hir: &Hir, greedy: bool) -> Result<ThompsonRef, Error> {}\n    fn c_exactly(&self, hir: &Hir, n: u32) -> Result<ThompsonRef, Error> {}\n    fn c_capture(\n        &self,\n        index: u32,\n        name: Option<&str>,\n        hir: &Hir,\n    ) -> Result<ThompsonRef, Error> {}\n    fn c_concat<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn c_alternation<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn add_empty(&self) -> Result<StateID, Error> {}\n    fn add(&self, state: State) -> Result<StateID, Error> {\n        let id = u32::try_from(self.nfa.borrow().states.len())\n            .map_err(|_| Error::new(\"exhausted state IDs, too many states\"))?;\n        self.nfa.borrow_mut().memory_extra += state.memory_usage();\n        self.nfa.borrow_mut().states.push(state);\n        self.check_size_limit()?;\n        Ok(id)\n    }\n    fn patch(&self, from: StateID, to: StateID) -> Result<(), Error> {}\n    fn check_size_limit(&self) -> Result<(), Error> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compile the given HIR look-around assertion to an NFA look-around\n/// assertion.\n355 fn c_look(&self, look: &hir::Look) -> Result<ThompsonRef, Error> {\n356     let id = self.add(State::Goto { target: 0, look: Some(*look) })?;\n357     Ok(ThompsonRef { start: id, end: id })\n358 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}