{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/string.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{Error, RegexSetBuilder};\n#[derive(Clone)]\npub struct RegexSet {\n    pub(crate) meta: meta::Regex,\n    pub(crate) patterns: alloc::sync::Arc<[String]>,\n}\n#[derive(Clone, Debug)]\npub struct SetMatches(PatternSet);\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl RegexSet {\n    pub fn new<I, S>(exprs: I) -> Result<RegexSet, Error>\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    pub fn empty() -> RegexSet {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {}\n    #[inline]\n    pub fn matches(&self, haystack: &str) -> SetMatches {\n        self.matches_at(haystack, 0)\n    }\n    #[inline]\n    pub fn matches_at(&self, haystack: &str, start: usize) -> SetMatches {\n        let input = Input::new(haystack).span(start..haystack.len());\n        let mut patset = PatternSet::new(self.meta.pattern_len());\n        self.meta.which_overlapping_matches(&input, &mut patset);\n        SetMatches(patset)\n    }\n    #[inline]\n    pub fn matches_read_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &str,\n        start: usize,\n    ) -> bool {}\n    #[inline]\n    pub fn read_matches_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &str,\n        start: usize,\n    ) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn patterns(&self) -> &[String] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the set of regexes that match in the given haystack.\n///\n/// The set returned contains the index of each regex that matches in\n/// the given haystack. The index is in correspondence with the order of\n/// regular expressions given to `RegexSet`'s constructor.\n///\n/// The set can also be used to iterate over the matched indices. The order\n/// of iteration is always ascending with respect to the matching indices.\n///\n/// Note that as with searches using [`Regex`](crate::Regex), the\n/// expression is unanchored by default. That is, if the regex does not\n/// start with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\n/// to match anywhere in the haystack.\n///\n/// # Example\n///\n/// Tests which regular expressions match the given haystack:\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"\\w+\",\n///     r\"\\d+\",\n///     r\"\\pL+\",\n///     r\"foo\",\n///     r\"bar\",\n///     r\"barfoo\",\n///     r\"foobar\",\n/// ]).unwrap();\n/// let matches: Vec<_> = set.matches(\"foobar\").into_iter().collect();\n/// assert_eq!(matches, vec![0, 2, 3, 4, 6]);\n///\n/// // You can also test whether a particular regex matched:\n/// let matches = set.matches(\"foobar\");\n/// assert!(!matches.matched(5));\n/// assert!(matches.matched(6));\n/// ```\n287 pub fn matches(&self, haystack: &str) -> SetMatches {\n288     self.matches_at(haystack, 0)\n289 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}