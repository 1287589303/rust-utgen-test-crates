{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\npub(crate) trait Usize {\n    fn as_u8(self) -> u8;\n    fn as_u16(self) -> u16;\n    fn as_u32(self) -> u32;\n    fn as_u64(self) -> u64;\n}\n#[derive(Clone)]\npub(crate) struct StartTable<T> {\n    /// The initial start state IDs.\n    ///\n    /// In practice, T is either `Vec<u32>` or `&[u32]`.\n    ///\n    /// The first `2 * stride` (currently always 8) entries always correspond\n    /// to the starts states for the entire DFA, with the first 4 entries being\n    /// for unanchored searches and the second 4 entries being for anchored\n    /// searches. To keep things simple, we always use 8 entries even if the\n    /// `StartKind` is not both.\n    ///\n    /// After that, there are `stride * patterns` state IDs, where `patterns`\n    /// may be zero in the case of a DFA with no patterns or in the case where\n    /// the DFA was built without enabling starting states for each pattern.\n    table: T,\n    /// The starting state configuration supported. When 'both', both\n    /// unanchored and anchored searches work. When 'unanchored', anchored\n    /// searches panic. When 'anchored', unanchored searches panic.\n    kind: StartKind,\n    /// The start state configuration for every possible byte.\n    start_map: StartByteMap,\n    /// The number of starting state IDs per pattern.\n    stride: usize,\n    /// The total number of patterns for which starting states are encoded.\n    /// This is `None` for DFAs that were built without start states for each\n    /// pattern. Thus, one cannot use this field to say how many patterns\n    /// are in the DFA in all cases. It is specific to how many patterns are\n    /// represented in this start table.\n    pattern_len: Option<usize>,\n    /// The universal starting state for unanchored searches. This is only\n    /// present when the DFA supports unanchored searches and when all starting\n    /// state IDs for an unanchored search are equivalent.\n    universal_start_unanchored: Option<StateID>,\n    /// The universal starting state for anchored searches. This is only\n    /// present when the DFA supports anchored searches and when all starting\n    /// state IDs for an anchored search are equivalent.\n    universal_start_anchored: Option<StateID>,\n}\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\n#[derive(Clone)]\npub(crate) struct StartByteMap {\n    map: [Start; 256],\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub(crate) enum Start {\n    /// This occurs when the starting position is not any of the ones below.\n    NonWordByte = 0,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is an ASCII word byte.\n    WordByte = 1,\n    /// This occurs when the starting position of the search corresponds to the\n    /// beginning of the haystack.\n    Text = 2,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is a line terminator. Specifically, `\\n`.\n    LineLF = 3,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is a line terminator. Specifically, `\\r`.\n    LineCR = 4,\n    /// This occurs when a custom line terminator has been set via a\n    /// `LookMatcher`, and when that line terminator is neither a `\\r` or a\n    /// `\\n`.\n    ///\n    /// If the custom line terminator is a word byte, then this start\n    /// configuration is still selected. DFAs that implement word boundary\n    /// assertions will likely need to check whether the custom line terminator\n    /// is a word byte, in which case, it should behave as if the byte\n    /// satisfies `\\b` in addition to multi-line anchors.\n    CustomLineTerminator = 5,\n}\nimpl<'a> StartTable<&'a [u32]> {\n    unsafe fn from_bytes_unchecked(\n        mut slice: &'a [u8],\n    ) -> Result<(StartTable<&'a [u32]>, usize), DeserializeError> {\n        let slice_start = slice.as_ptr().as_usize();\n        let (kind, nr) = StartKind::from_bytes(slice)?;\n        slice = &slice[nr..];\n        let (start_map, nr) = StartByteMap::from_bytes(slice)?;\n        slice = &slice[nr..];\n        let (stride, nr) = wire::try_read_u32_as_usize(slice, \"start table stride\")?;\n        slice = &slice[nr..];\n        if stride != Start::len() {\n            return Err(DeserializeError::generic(\"invalid starting table stride\"));\n        }\n        let (maybe_pattern_len, nr) = wire::try_read_u32_as_usize(\n            slice,\n            \"start table patterns\",\n        )?;\n        slice = &slice[nr..];\n        let pattern_len = if maybe_pattern_len.as_u32() == u32::MAX {\n            None\n        } else {\n            Some(maybe_pattern_len)\n        };\n        if pattern_len.map_or(false, |len| len > PatternID::LIMIT) {\n            return Err(DeserializeError::generic(\"invalid number of patterns\"));\n        }\n        let (universal_unanchored, nr) = wire::try_read_u32(\n            slice,\n            \"universal unanchored start\",\n        )?;\n        slice = &slice[nr..];\n        let universal_start_unanchored = if universal_unanchored == u32::MAX {\n            None\n        } else {\n            Some(\n                StateID::try_from(universal_unanchored)\n                    .map_err(|e| {\n                        DeserializeError::state_id_error(e, \"universal unanchored start\")\n                    })?,\n            )\n        };\n        let (universal_anchored, nr) = wire::try_read_u32(\n            slice,\n            \"universal anchored start\",\n        )?;\n        slice = &slice[nr..];\n        let universal_start_anchored = if universal_anchored == u32::MAX {\n            None\n        } else {\n            Some(\n                StateID::try_from(universal_anchored)\n                    .map_err(|e| {\n                        DeserializeError::state_id_error(e, \"universal anchored start\")\n                    })?,\n            )\n        };\n        let pattern_table_size = wire::mul(\n            stride,\n            pattern_len.unwrap_or(0),\n            \"invalid pattern length\",\n        )?;\n        let start_state_len = wire::add(\n            wire::mul(2, stride, \"start state stride too big\")?,\n            pattern_table_size,\n            \"invalid 'any' pattern starts size\",\n        )?;\n        let table_bytes_len = wire::mul(\n            start_state_len,\n            StateID::SIZE,\n            \"pattern table bytes length\",\n        )?;\n        wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?;\n        wire::check_alignment::<StateID>(slice)?;\n        let table_bytes = &slice[..table_bytes_len];\n        slice = &slice[table_bytes_len..];\n        let table = core::slice::from_raw_parts(\n            table_bytes.as_ptr().cast::<u32>(),\n            start_state_len,\n        );\n        let st = StartTable {\n            table,\n            kind,\n            start_map,\n            stride,\n            pattern_len,\n            universal_start_unanchored,\n            universal_start_anchored,\n        };\n        Ok((st, slice.as_ptr().as_usize() - slice_start))\n    }\n}\nimpl StartKind {\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(StartKind, usize), DeserializeError> {\n        wire::check_slice_len(slice, size_of::<u32>(), \"start kind bytes\")?;\n        let (n, nr) = wire::try_read_u32(slice, \"start kind integer\")?;\n        match n {\n            0 => Ok((StartKind::Both, nr)),\n            1 => Ok((StartKind::Unanchored, nr)),\n            2 => Ok((StartKind::Anchored, nr)),\n            _ => Err(DeserializeError::generic(\"unrecognized start kind\")),\n        }\n    }\n    pub(crate) fn write_to<E: Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn has_unanchored(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn has_anchored(&self) -> bool {}\n}\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::Generic {\n            msg,\n        })\n    }\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\nimpl StartByteMap {\n    pub(crate) fn new(lookm: &LookMatcher) -> StartByteMap {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn get(&self, byte: u8) -> Start {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(StartByteMap, usize), DeserializeError> {\n        wire::check_slice_len(slice, 256, \"start byte map\")?;\n        let mut map = [Start::NonWordByte; 256];\n        for (i, &repr) in slice[..256].iter().enumerate() {\n            map[i] = match Start::from_usize(usize::from(repr)) {\n                Some(start) => start,\n                None => {\n                    return Err(\n                        DeserializeError::generic(\"found invalid starting configuration\"),\n                    );\n                }\n            };\n        }\n        Ok((StartByteMap { map }, 256))\n    }\n    pub(crate) fn write_to(&self, dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n}\nimpl Start {\n    pub(crate) fn from_usize(n: usize) -> Option<Start> {}\n    pub(crate) fn len() -> usize {\n        6\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn as_u8(&self) -> u8 {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn as_usize(&self) -> usize {}\n}\npub(crate) fn check_slice_len<T>(\n    slice: &[T],\n    at_least_len: usize,\n    what: &'static str,\n) -> Result<(), DeserializeError> {\n    if slice.len() < at_least_len {\n        return Err(DeserializeError::buffer_too_small(what));\n    }\n    Ok(())\n}\npub(crate) fn add(\n    a: usize,\n    b: usize,\n    what: &'static str,\n) -> Result<usize, DeserializeError> {\n    match a.checked_add(b) {\n        Some(c) => Ok(c),\n        None => Err(DeserializeError::arithmetic_overflow(what)),\n    }\n}\npub(crate) fn check_alignment<T>(slice: &[u8]) -> Result<(), DeserializeError> {\n    let alignment = core::mem::align_of::<T>();\n    let address = slice.as_ptr().as_usize();\n    if address % alignment == 0 {\n        return Ok(());\n    }\n    Err(DeserializeError::alignment_mismatch(alignment, address))\n}\npub(crate) fn try_read_u32_as_usize(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(usize, usize), DeserializeError> {\n    try_read_u32(slice, what)\n        .and_then(|(n, nr)| {\n            usize::try_from(n)\n                .map(|n| (n, nr))\n                .map_err(|_| DeserializeError::invalid_usize(what))\n        })\n}\npub(crate) fn mul(\n    a: usize,\n    b: usize,\n    what: &'static str,\n) -> Result<usize, DeserializeError> {\n    match a.checked_mul(b) {\n        Some(c) => Ok(c),\n        None => Err(DeserializeError::arithmetic_overflow(what)),\n    }\n}\npub(crate) fn try_read_u32(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(u32, usize), DeserializeError> {\n    check_slice_len(slice, size_of::<u32>(), what)?;\n    Ok((read_u32(slice), size_of::<u32>()))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Deserialize a table of start state IDs starting at the beginning of\n/// `slice`. Upon success, return the total number of bytes read along with\n/// the table of starting state IDs.\n///\n/// If there was a problem deserializing any part of the starting IDs,\n/// then this returns an error. Notably, if the given slice does not have\n/// the same alignment as `StateID`, then this will return an error (among\n/// other possible errors).\n///\n/// This is guaranteed to execute in constant time.\n///\n/// # Safety\n///\n/// This routine is not safe because it does not check the validity of the\n/// starting state IDs themselves. In particular, the number of starting\n/// IDs can be of variable length, so it's possible that checking their\n/// validity cannot be done in constant time. An invalid starting state\n/// ID is not safe because other code may rely on the starting IDs being\n/// correct (such as explicit bounds check elision). Therefore, an invalid\n/// start ID can lead to undefined behavior.\n///\n/// Callers that use this function must either pass on the safety invariant\n/// or guarantee that the bytes given contain valid starting state IDs.\n/// This guarantee is upheld by the bytes written by `write_to`.\n3964 unsafe fn from_bytes_unchecked(\n3965     mut slice: &'a [u8],\n3966 ) -> Result<(StartTable<&'a [u32]>, usize), DeserializeError> {\n3967     let slice_start = slice.as_ptr().as_usize();\n3968 \n3969     let (kind, nr) = StartKind::from_bytes(slice)?;\n3970     slice = &slice[nr..];\n3971 \n3972     let (start_map, nr) = StartByteMap::from_bytes(slice)?;\n3973     slice = &slice[nr..];\n3974 \n3975     let (stride, nr) =\n3976         wire::try_read_u32_as_usize(slice, \"start table stride\")?;\n3977     slice = &slice[nr..];\n3978     if stride != Start::len() {\n3979         return Err(DeserializeError::generic(\n3980             \"invalid starting table stride\",\n3981         ));\n3982     }\n3983 \n3984     let (maybe_pattern_len, nr) =\n3985         wire::try_read_u32_as_usize(slice, \"start table patterns\")?;\n3986     slice = &slice[nr..];\n3987     let pattern_len = if maybe_pattern_len.as_u32() == u32::MAX {\n3988         None\n3989     } else {\n3990         Some(maybe_pattern_len)\n3991     };\n3992     if pattern_len.map_or(false, |len| len > PatternID::LIMIT) {\n3993         return Err(DeserializeError::generic(\n3994             \"invalid number of patterns\",\n3995         ));\n3996     }\n3997 \n3998     let (universal_unanchored, nr) =\n3999         wire::try_read_u32(slice, \"universal unanchored start\")?;\n4000     slice = &slice[nr..];\n4001     let universal_start_unanchored = if universal_unanchored == u32::MAX {\n4002         None\n4003     } else {\n4004         Some(StateID::try_from(universal_unanchored).map_err(|e| {\n4005             DeserializeError::state_id_error(\n4006                 e,\n4007                 \"universal unanchored start\",\n4008             )\n4009         })?)\n4010     };\n4011 \n4012     let (universal_anchored, nr) =\n4013         wire::try_read_u32(slice, \"universal anchored start\")?;\n4014     slice = &slice[nr..];\n4015     let universal_start_anchored = if universal_anchored == u32::MAX {\n4016         None\n4017     } else {\n4018         Some(StateID::try_from(universal_anchored).map_err(|e| {\n4019             DeserializeError::state_id_error(e, \"universal anchored start\")\n4020         })?)\n4021     };\n4022 \n4023     let pattern_table_size = wire::mul(\n4024         stride,\n4025         pattern_len.unwrap_or(0),\n4026         \"invalid pattern length\",\n4027     )?;\n4028     // Our start states always start with a two stride of start states for\n4029     // the entire automaton. The first stride is for unanchored starting\n4030     // states and the second stride is for anchored starting states. What\n4031     // follows it are an optional set of start states for each pattern.\n4032     let start_state_len = wire::add(\n4033         wire::mul(2, stride, \"start state stride too big\")?,\n4034         pattern_table_size,\n4035         \"invalid 'any' pattern starts size\",\n4036     )?;\n4037     let table_bytes_len = wire::mul(\n4038         start_state_len,\n4039         StateID::SIZE,\n4040         \"pattern table bytes length\",\n4041     )?;\n4042     wire::check_slice_len(slice, table_bytes_len, \"start ID table\")?;\n4043     wire::check_alignment::<StateID>(slice)?;\n4044     let table_bytes = &slice[..table_bytes_len];\n4045     slice = &slice[table_bytes_len..];\n4046     // SAFETY: Since StateID is always representable as a u32, all we need\n4047     // to do is ensure that we have the proper length and alignment. We've\n4048     // checked both above, so the cast below is safe.\n4049     //\n4050     // N.B. This is the only not-safe code in this function.\n4051     let table = core::slice::from_raw_parts(\n4052         table_bytes.as_ptr().cast::<u32>(),\n4053         start_state_len,\n4054     );\n4055     let st = StartTable {\n4056         table,\n4057         kind,\n4058         start_map,\n4059         stride,\n4060         pattern_len,\n4061         universal_start_unanchored,\n4062         universal_start_anchored,\n4063     };\n4064     Ok((st, slice.as_ptr().as_usize() - slice_start))\n4065 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}