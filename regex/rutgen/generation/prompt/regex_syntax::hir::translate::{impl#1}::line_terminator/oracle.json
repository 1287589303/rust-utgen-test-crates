{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\n#[derive(Clone, Debug)]\npub struct TranslatorBuilder {\n    utf8: bool,\n    line_terminator: u8,\n    flags: Flags,\n}\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    crlf: Option<bool>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Flags {\n    /// The span of this group of flags.\n    pub span: Span,\n    /// A sequence of flag items. Each item is either a flag or a negation\n    /// operator.\n    pub items: Vec<FlagsItem>,\n}\nimpl TranslatorBuilder {\n    pub fn new() -> TranslatorBuilder {}\n    pub fn build(&self) -> Translator {}\n    pub fn utf8(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut TranslatorBuilder {\n        self.line_terminator = byte;\n        self\n    }\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n    pub fn unicode(&mut self, yes: bool) -> &mut TranslatorBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the line terminator for use with `(?u-s:.)` and `(?-us:.)`.\n///\n/// Namely, instead of `.` (by default) matching everything except for `\\n`,\n/// this will cause `.` to match everything except for the byte given.\n///\n/// If `.` is used in a context where Unicode mode is enabled and this byte\n/// isn't ASCII, then an error will be returned. When Unicode mode is\n/// disabled, then any byte is permitted, but will return an error if UTF-8\n/// mode is enabled and it is a non-ASCII byte.\n///\n/// In short, any ASCII value for a line terminator is always okay. But a\n/// non-ASCII byte might result in an error depending on whether Unicode\n/// mode or UTF-8 mode are enabled.\n///\n/// Note that if `R` mode is enabled then it always takes precedence and\n/// the line terminator will be treated as `\\r` and `\\n` simultaneously.\n///\n/// Note also that this *doesn't* impact the look-around assertions\n/// `(?m:^)` and `(?m:$)`. That's usually controlled by additional\n/// configuration in the regex engine itself.\n92 pub fn line_terminator(&mut self, byte: u8) -> &mut TranslatorBuilder {\n93     self.line_terminator = byte;\n94     self\n95 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}