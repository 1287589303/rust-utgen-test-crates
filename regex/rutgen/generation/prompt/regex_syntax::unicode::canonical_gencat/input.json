{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn canonical_gencat(normalized_value: &str) -> Result<Option<&'static str>, Error> {\n    Ok(\n        match normalized_value {\n            \"any\" => Some(\"Any\"),\n            \"assigned\" => Some(\"Assigned\"),\n            \"ascii\" => Some(\"ASCII\"),\n            _ => {\n                let gencats = property_values(\"General_Category\")?.unwrap();\n                canonical_value(gencats, normalized_value)\n            }\n        },\n    )\n}\nfn canonical_value(\n    vals: PropertyValues,\n    normalized_value: &str,\n) -> Option<&'static str> {\n    vals.binary_search_by_key(&normalized_value, |&(n, _)| n).ok().map(|i| vals[i].1)\n}\nfn property_values(\n    canonical_property_name: &'static str,\n) -> Result<Option<PropertyValues>, Error> {\n    #[cfg(\n        not(\n            any(\n                feature = \"unicode-age\",\n                feature = \"unicode-bool\",\n                feature = \"unicode-gencat\",\n                feature = \"unicode-perl\",\n                feature = \"unicode-script\",\n                feature = \"unicode-segment\",\n            )\n        )\n    )]\n    fn imp(_: &'static str) -> Result<Option<PropertyValues>, Error> {\n        Err(Error::PropertyValueNotFound)\n    }\n    #[cfg(\n        any(\n            feature = \"unicode-age\",\n            feature = \"unicode-bool\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-perl\",\n            feature = \"unicode-script\",\n            feature = \"unicode-segment\",\n        )\n    )]\n    fn imp(name: &'static str) -> Result<Option<PropertyValues>, Error> {\n        use crate::unicode_tables::property_values::PROPERTY_VALUES;\n        Ok(\n            PROPERTY_VALUES\n                .binary_search_by_key(&name, |&(n, _)| n)\n                .ok()\n                .map(|i| PROPERTY_VALUES[i].1),\n        )\n    }\n    imp(canonical_property_name)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n501 fn canonical_gencat(\n502     normalized_value: &str,\n503 ) -> Result<Option<&'static str>, Error> {\n504     Ok(match normalized_value {\n505         \"any\" => Some(\"Any\"),\n506         \"assigned\" => Some(\"Assigned\"),\n507         \"ascii\" => Some(\"ASCII\"),\n508         _ => {\n509             let gencats = property_values(\"General_Category\")?.unwrap();\n510             canonical_value(gencats, normalized_value)\n511         }\n512     })\n513 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}