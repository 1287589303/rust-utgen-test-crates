{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/start.rs\n// crate name is regex_automata\nuse crate::util::{\n    look::LookMatcher, search::{Anchored, Input},\n    wire::{self, DeserializeError, SerializeError},\n};\n#[derive(Clone)]\npub(crate) struct StartByteMap {\n    map: [Start; 256],\n}\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub(crate) enum Start {\n    /// This occurs when the starting position is not any of the ones below.\n    NonWordByte = 0,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is an ASCII word byte.\n    WordByte = 1,\n    /// This occurs when the starting position of the search corresponds to the\n    /// beginning of the haystack.\n    Text = 2,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is a line terminator. Specifically, `\\n`.\n    LineLF = 3,\n    /// This occurs when the byte immediately preceding the start of the search\n    /// is a line terminator. Specifically, `\\r`.\n    LineCR = 4,\n    /// This occurs when a custom line terminator has been set via a\n    /// `LookMatcher`, and when that line terminator is neither a `\\r` or a\n    /// `\\n`.\n    ///\n    /// If the custom line terminator is a word byte, then this start\n    /// configuration is still selected. DFAs that implement word boundary\n    /// assertions will likely need to check whether the custom line terminator\n    /// is a word byte, in which case, it should behave as if the byte\n    /// satisfies `\\b` in addition to multi-line anchors.\n    CustomLineTerminator = 5,\n}\nimpl core::fmt::Debug for StartByteMap {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        use crate::util::escape::DebugByte;\n        write!(f, \"StartByteMap{{\")?;\n        for byte in 0..=255 {\n            if byte > 0 {\n                write!(f, \", \")?;\n            }\n            let start = self.map[usize::from(byte)];\n            write!(f, \"{:?} => {:?}\", DebugByte(byte), start)?;\n        }\n        write!(f, \"}}\")?;\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n308 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n309     use crate::util::escape::DebugByte;\n310 \n311     write!(f, \"StartByteMap{{\")?;\n312     for byte in 0..=255 {\n313         if byte > 0 {\n314             write!(f, \", \")?;\n315         }\n316         let start = self.map[usize::from(byte)];\n317         write!(f, \"{:?} => {:?}\", DebugByte(byte), start)?;\n318     }\n319     write!(f, \"}}\")?;\n320     Ok(())\n321 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}