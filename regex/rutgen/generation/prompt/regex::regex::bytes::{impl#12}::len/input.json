{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h [u8], [&'h [u8]; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &[u8], dst: &mut Vec<u8>) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.caps.group_len()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the total number of capture groups. This includes both\n/// matching and non-matching groups.\n///\n/// The length returned is always equivalent to the number of elements\n/// yielded by [`Captures::iter`]. Consequently, the length is always\n/// greater than zero since every `Captures` value always includes the\n/// match for the entire regex.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(\\w)(\\d)?(\\w)\").unwrap();\n/// let caps = re.captures(b\"AZ\").unwrap();\n/// assert_eq!(caps.len(), 4);\n/// ```\n1905 pub fn len(&self) -> usize {\n1906     self.caps.group_len()\n1907 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}