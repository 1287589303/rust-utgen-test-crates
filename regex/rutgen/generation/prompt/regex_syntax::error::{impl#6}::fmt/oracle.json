{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/error.rs\n// crate name is regex_syntax\nuse alloc::{\n    format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{ast, hir};\n#[derive(Debug)]\npub struct Formatter<'e, E> {\n    /// The original regex pattern in which the error occurred.\n    pattern: &'e str,\n    /// The error kind. It must impl fmt::Display.\n    err: &'e E,\n    /// The primary span of the error.\n    span: &'e ast::Span,\n    /// An auxiliary and optional span, in case the error needs to point to\n    /// two locations (e.g., when reporting a duplicate capture group name).\n    aux_span: Option<&'e ast::Span>,\n}\nstruct Spans<'p> {\n    /// The original regex pattern string.\n    pattern: &'p str,\n    /// The total width that should be used for line numbers. The width is\n    /// used for left padding the line numbers for alignment.\n    ///\n    /// A value of `0` means line numbers should not be displayed. That is,\n    /// the pattern is itself only one line.\n    line_number_width: usize,\n    /// All error spans that occur on a single line. This sequence always has\n    /// length equivalent to the number of lines in `pattern`, where the index\n    /// of the sequence represents a line number, starting at `0`. The spans\n    /// in each line are sorted in ascending order.\n    by_line: Vec<Vec<ast::Span>>,\n    /// All error spans that occur over one or more lines. That is, the start\n    /// and end position of the span have different line numbers. The spans are\n    /// sorted in ascending order.\n    multi_line: Vec<ast::Span>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\nimpl<'e, E: core::fmt::Display> core::fmt::Display for Formatter<'e, E> {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        let spans = Spans::from_formatter(self);\n        if self.pattern.contains('\\n') {\n            let divider = repeat_char('~', 79);\n            writeln!(f, \"regex parse error:\")?;\n            writeln!(f, \"{}\", divider)?;\n            let notated = spans.notate();\n            write!(f, \"{}\", notated)?;\n            writeln!(f, \"{}\", divider)?;\n            if !spans.multi_line.is_empty() {\n                let mut notes = vec![];\n                for span in &spans.multi_line {\n                    notes\n                        .push(\n                            format!(\n                                \"on line {} (column {}) through line {} (column {})\", span\n                                .start.line, span.start.column, span.end.line, span.end\n                                .column - 1\n                            ),\n                        );\n                }\n                writeln!(f, \"{}\", notes.join(\"\\n\"))?;\n            }\n            write!(f, \"error: {}\", self.err)?;\n        } else {\n            writeln!(f, \"regex parse error:\")?;\n            let notated = Spans::from_formatter(self).notate();\n            write!(f, \"{}\", notated)?;\n            write!(f, \"error: {}\", self.err)?;\n        }\n        Ok(())\n    }\n}\nimpl<'p> Spans<'p> {\n    fn from_formatter<'e, E: core::fmt::Display>(\n        fmter: &'p Formatter<'e, E>,\n    ) -> Spans<'p> {}\n    fn add(&mut self, span: ast::Span) {}\n    fn notate(&self) -> String {\n        let mut notated = String::new();\n        for (i, line) in self.pattern.lines().enumerate() {\n            if self.line_number_width > 0 {\n                notated.push_str(&self.left_pad_line_number(i + 1));\n                notated.push_str(\": \");\n            } else {\n                notated.push_str(\"    \");\n            }\n            notated.push_str(line);\n            notated.push('\\n');\n            if let Some(notes) = self.notate_line(i) {\n                notated.push_str(&notes);\n                notated.push('\\n');\n            }\n        }\n        notated\n    }\n    fn notate_line(&self, i: usize) -> Option<String> {}\n    fn left_pad_line_number(&self, n: usize) -> String {}\n    fn line_number_padding(&self) -> usize {}\n}\nfn repeat_char(c: char, count: usize) -> String {\n    core::iter::repeat(c).take(count).collect()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 90 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n 91     let spans = Spans::from_formatter(self);\n 92     if self.pattern.contains('\\n') {\n 93         let divider = repeat_char('~', 79);\n 94 \n 95         writeln!(f, \"regex parse error:\")?;\n 96         writeln!(f, \"{}\", divider)?;\n 97         let notated = spans.notate();\n 98         write!(f, \"{}\", notated)?;\n 99         writeln!(f, \"{}\", divider)?;\n100         // If we have error spans that cover multiple lines, then we just\n101         // note the line numbers.\n102         if !spans.multi_line.is_empty() {\n103             let mut notes = vec![];\n104             for span in &spans.multi_line {\n105                 notes.push(format!(\n106                     \"on line {} (column {}) through line {} (column {})\",\n107                     span.start.line,\n108                     span.start.column,\n109                     span.end.line,\n110                     span.end.column - 1\n111                 ));\n112             }\n113             writeln!(f, \"{}\", notes.join(\"\\n\"))?;\n114         }\n115         write!(f, \"error: {}\", self.err)?;\n116     } else {\n117         writeln!(f, \"regex parse error:\")?;\n118         let notated = Spans::from_formatter(self).notate();\n119         write!(f, \"{}\", notated)?;\n120         write!(f, \"error: {}\", self.err)?;\n121     }\n122     Ok(())\n123 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}