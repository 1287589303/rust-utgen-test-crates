{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, utf8};\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[cfg(feature = \"alloc\")]\n#[derive(Clone, Debug)]\npub(crate) struct ByteClassSet(ByteSet);\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\nimpl LookMatcher {\n    pub fn new() -> LookMatcher {}\n    pub fn set_line_terminator(&mut self, byte: u8) -> &mut LookMatcher {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    #[inline]\n    pub fn matches(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_inline(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn matches_set(&self, set: LookSet, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_set_inline(\n        &self,\n        set: LookSet,\n        haystack: &[u8],\n        at: usize,\n    ) -> bool {}\n    #[cfg(feature = \"alloc\")]\n    pub(crate) fn add_to_byteset(\n        &self,\n        look: Look,\n        set: &mut crate::util::alphabet::ByteClassSet,\n    ) {\n        match look {\n            Look::Start | Look::End => {}\n            Look::StartLF | Look::EndLF => {\n                set.set_range(self.lineterm.0, self.lineterm.0);\n            }\n            Look::StartCRLF | Look::EndCRLF => {\n                set.set_range(b'\\r', b'\\r');\n                set.set_range(b'\\n', b'\\n');\n            }\n            Look::WordAscii\n            | Look::WordAsciiNegate\n            | Look::WordUnicode\n            | Look::WordUnicodeNegate\n            | Look::WordStartAscii\n            | Look::WordEndAscii\n            | Look::WordStartUnicode\n            | Look::WordEndUnicode\n            | Look::WordStartHalfAscii\n            | Look::WordEndHalfAscii\n            | Look::WordStartHalfUnicode\n            | Look::WordEndHalfUnicode => {\n                let iswb = utf8::is_word_byte;\n                let asu8 = |b: u16| u8::try_from(b).unwrap();\n                let mut b1: u16 = 0;\n                let mut b2: u16;\n                while b1 <= 255 {\n                    b2 = b1 + 1;\n                    while b2 <= 255 && iswb(asu8(b1)) == iswb(asu8(b2)) {\n                        b2 += 1;\n                    }\n                    assert!(b2 <= 256);\n                    set.set_range(asu8(b1), asu8(b2.checked_sub(1).unwrap()));\n                    b1 = b2;\n                }\n            }\n        }\n    }\n    #[inline]\n    pub fn is_start(&self, _haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii_negate(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_unicode_negate(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n}\n#[cfg(feature = \"alloc\")]\nimpl ByteClassSet {\n    pub(crate) fn empty() -> Self {\n        ByteClassSet(ByteSet::empty())\n    }\n    pub(crate) fn set_range(&mut self, start: u8, end: u8) {\n        debug_assert!(start <= end);\n        if start > 0 {\n            self.0.add(start - 1);\n        }\n        self.0.add(end);\n    }\n    pub(crate) fn add_set(&mut self, set: &ByteSet) {}\n    pub(crate) fn byte_classes(&self) -> ByteClasses {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Split up the given byte classes into equivalence classes in a way that\n/// is consistent with this look-around assertion.\n837 pub(crate) fn add_to_byteset(\n838     &self,\n839     look: Look,\n840     set: &mut crate::util::alphabet::ByteClassSet,\n841 ) {\n842     match look {\n843         Look::Start | Look::End => {}\n844         Look::StartLF | Look::EndLF => {\n845             set.set_range(self.lineterm.0, self.lineterm.0);\n846         }\n847         Look::StartCRLF | Look::EndCRLF => {\n848             set.set_range(b'\\r', b'\\r');\n849             set.set_range(b'\\n', b'\\n');\n850         }\n851         Look::WordAscii\n852         | Look::WordAsciiNegate\n853         | Look::WordUnicode\n854         | Look::WordUnicodeNegate\n855         | Look::WordStartAscii\n856         | Look::WordEndAscii\n857         | Look::WordStartUnicode\n858         | Look::WordEndUnicode\n859         | Look::WordStartHalfAscii\n860         | Look::WordEndHalfAscii\n861         | Look::WordStartHalfUnicode\n862         | Look::WordEndHalfUnicode => {\n863             // We need to mark all ranges of bytes whose pairs result in\n864             // evaluating \\b differently. This isn't technically correct\n865             // for Unicode word boundaries, but DFAs can't handle those\n866             // anyway, and thus, the byte classes don't need to either\n867             // since they are themselves only used in DFAs.\n868             //\n869             // FIXME: It seems like the calls to 'set_range' here are\n870             // completely invariant, which means we could just hard-code\n871             // them here without needing to write a loop. And we only need\n872             // to do this dance at most once per regex.\n873             //\n874             // FIXME: Is this correct for \\B?\n875             let iswb = utf8::is_word_byte;\n876             // This unwrap is OK because we guard every use of 'asu8' with\n877             // a check that the input is <= 255.\n878             let asu8 = |b: u16| u8::try_from(b).unwrap();\n879             let mut b1: u16 = 0;\n880             let mut b2: u16;\n881             while b1 <= 255 {\n882                 b2 = b1 + 1;\n883                 while b2 <= 255 && iswb(asu8(b1)) == iswb(asu8(b2)) {\n884                     b2 += 1;\n885                 }\n886                 // The guards above guarantee that b2 can never get any\n887                 // bigger.\n888                 assert!(b2 <= 256);\n889                 // Subtracting 1 from b2 is always OK because it is always\n890                 // at least 1 greater than b1, and the assert above\n891                 // guarantees that the asu8 conversion will succeed.\n892                 set.set_range(asu8(b1), asu8(b2.checked_sub(1).unwrap()));\n893                 b1 = b2;\n894             }\n895         }\n896     }\n897 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}