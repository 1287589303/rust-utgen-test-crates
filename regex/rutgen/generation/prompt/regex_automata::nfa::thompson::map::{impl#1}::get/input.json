{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/map.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::Transition,\n    util::{\n        int::{Usize, U64},\n        primitives::StateID,\n    },\n};\nconst PRIME: u64 = 1099511628211;\nconst INIT: u64 = 14695981039346656037;\n#[derive(Clone, Debug)]\npub struct Utf8SuffixMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8SuffixEntry>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug, Default, Eq, PartialEq)]\npub struct Utf8SuffixKey {\n    pub from: StateID,\n    pub start: u8,\n    pub end: u8,\n}\n#[derive(Clone, Debug, Default)]\nstruct Utf8SuffixEntry {\n    /// The version of the map used to produce this entry. If this entry's\n    /// version does not match the current version of the map, then the map\n    /// should behave as if this entry does not exist.\n    version: u16,\n    /// The key, which consists of a transition in a particular state.\n    key: Utf8SuffixKey,\n    /// The identifier that the transition in the key maps to.\n    val: StateID,\n}\nimpl Utf8SuffixMap {\n    pub fn new(capacity: usize) -> Utf8SuffixMap {}\n    pub fn clear(&mut self) {}\n    pub fn hash(&self, key: &Utf8SuffixKey) -> usize {}\n    pub fn get(&mut self, key: &Utf8SuffixKey, hash: usize) -> Option<StateID> {\n        let entry = &self.map[hash];\n        if entry.version != self.version {\n            return None;\n        }\n        if key != &entry.key {\n            return None;\n        }\n        Some(entry.val)\n    }\n    pub fn set(&mut self, key: Utf8SuffixKey, hash: usize, state_id: StateID) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Retrieve the cached state ID corresponding to the given key. The hash\n/// given must have been computed with `hash` using the same key value.\n///\n/// If there is no cached state with the given key, then None is returned.\n271 pub fn get(\n272     &mut self,\n273     key: &Utf8SuffixKey,\n274     hash: usize,\n275 ) -> Option<StateID> {\n276     let entry = &self.map[hash];\n277     if entry.version != self.version {\n278         return None;\n279     }\n280     if key != &entry.key {\n281         return None;\n282     }\n283     Some(entry.val)\n284 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}