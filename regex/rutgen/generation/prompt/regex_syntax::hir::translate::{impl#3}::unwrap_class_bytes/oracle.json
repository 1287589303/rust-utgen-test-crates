{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassBytes {\n    set: IntervalSet<ClassBytesRange>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Flags {\n    /// The span of this group of flags.\n    pub span: Span,\n    /// A sequence of flag items. Each item is either a flag or a negation\n    /// operator.\n    pub items: Vec<FlagsItem>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    crlf: Option<bool>,\n}\n#[derive(Clone, Debug)]\nenum HirFrame {\n    /// An arbitrary HIR expression. These get pushed whenever we hit a base\n    /// case in the Ast. They get popped after an inductive (i.e., recursive)\n    /// step is complete.\n    Expr(Hir),\n    /// A literal that is being constructed, character by character, from the\n    /// AST. We need this because the AST gives each individual character its\n    /// own node. So as we see characters, we peek at the top-most HirFrame.\n    /// If it's a literal, then we add to it. Otherwise, we push a new literal.\n    /// When it comes time to pop it, we convert it to an Hir via Hir::literal.\n    Literal(Vec<u8>),\n    /// A Unicode character class. This frame is mutated as we descend into\n    /// the Ast of a character class (which is itself its own mini recursive\n    /// structure).\n    ClassUnicode(hir::ClassUnicode),\n    /// A byte-oriented character class. This frame is mutated as we descend\n    /// into the Ast of a character class (which is itself its own mini\n    /// recursive structure).\n    ///\n    /// Byte character classes are created when Unicode mode (`u`) is disabled.\n    /// If `utf8` is enabled (the default), then a byte character is only\n    /// permitted to match ASCII text.\n    ClassBytes(hir::ClassBytes),\n    /// This is pushed whenever a repetition is observed. After visiting every\n    /// sub-expression in the repetition, the translator's stack is expected to\n    /// have this sentinel at the top.\n    ///\n    /// This sentinel only exists to stop other things (like flattening\n    /// literals) from reaching across repetition operators.\n    Repetition,\n    /// This is pushed on to the stack upon first seeing any kind of capture,\n    /// indicated by parentheses (including non-capturing groups). It is popped\n    /// upon leaving a group.\n    Group {\n        /// The old active flags when this group was opened.\n        ///\n        /// If this group sets flags, then the new active flags are set to the\n        /// result of merging the old flags with the flags introduced by this\n        /// group. If the group doesn't set any flags, then this is simply\n        /// equivalent to whatever flags were set when the group was opened.\n        ///\n        /// When this group is popped, the active flags should be restored to\n        /// the flags set here.\n        ///\n        /// The \"active\" flags correspond to whatever flags are set in the\n        /// Translator.\n        old_flags: Flags,\n    },\n    /// This is pushed whenever a concatenation is observed. After visiting\n    /// every sub-expression in the concatenation, the translator's stack is\n    /// popped until it sees a Concat frame.\n    Concat,\n    /// This is pushed whenever an alternation is observed. After visiting\n    /// every sub-expression in the alternation, the translator's stack is\n    /// popped until it sees an Alternation frame.\n    Alternation,\n    /// This is pushed immediately before each sub-expression in an\n    /// alternation. This separates the branches of an alternation on the\n    /// stack and prevents literal flattening from reaching across alternation\n    /// branches.\n    ///\n    /// It is popped after each expression in a branch until an 'Alternation'\n    /// frame is observed when doing a post visit on an alternation.\n    AlternationBranch,\n}\nimpl HirFrame {\n    fn unwrap_expr(self) -> Hir {}\n    fn unwrap_class_unicode(self) -> hir::ClassUnicode {}\n    fn unwrap_class_bytes(self) -> hir::ClassBytes {\n        match self {\n            HirFrame::ClassBytes(cls) => cls,\n            _ => {\n                panic!(\n                    \"tried to unwrap byte class \\\n                 from HirFrame, got: {:?}\",\n                    self\n                )\n            }\n        }\n    }\n    fn unwrap_repetition(self) {}\n    fn unwrap_group(self) -> Flags {}\n    fn unwrap_alternation_pipe(self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Assert that the current stack frame is a byte class expression and\n/// return it.\n276 fn unwrap_class_bytes(self) -> hir::ClassBytes {\n277     match self {\n278         HirFrame::ClassBytes(cls) => cls,\n279         _ => panic!(\n280             \"tried to unwrap byte class \\\n281              from HirFrame, got: {:?}\",\n282             self\n283         ),\n284     }\n285 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}