{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn bool_property(canonical_name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(feature = \"unicode-bool\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PropertyNotFound)\n    }\n    #[cfg(feature = \"unicode-bool\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::property_bool::BY_NAME;\n        property_set(BY_NAME, name).map(hir_class).ok_or(Error::PropertyNotFound)\n    }\n    match canonical_name {\n        \"Decimal_Number\" => perl_digit(),\n        \"White_Space\" => perl_space(),\n        name => imp(name),\n    }\n}\n#[cfg(feature = \"unicode-bool\")]\nfn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    use crate::unicode_tables::property_bool::BY_NAME;\n    property_set(BY_NAME, name).map(hir_class).ok_or(Error::PropertyNotFound)\n}\npub fn perl_digit() -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-gencat\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PerlClassNotFound)\n    }\n    #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-gencat\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::perl_decimal::DECIMAL_NUMBER;\n        Ok(hir_class(DECIMAL_NUMBER))\n    }\n    #[cfg(feature = \"unicode-gencat\")]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::general_category::DECIMAL_NUMBER;\n        Ok(hir_class(DECIMAL_NUMBER))\n    }\n    imp()\n}\npub fn perl_space() -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-bool\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PerlClassNotFound)\n    }\n    #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-bool\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::perl_space::WHITE_SPACE;\n        Ok(hir_class(WHITE_SPACE))\n    }\n    #[cfg(feature = \"unicode-bool\")]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::property_bool::WHITE_SPACE;\n        Ok(hir_class(WHITE_SPACE))\n    }\n    imp()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the Unicode HIR class corresponding to the given Unicode boolean\n/// property.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given boolean property could not be found, or if the boolean\n/// property data is not available, then an error is returned.\n783 fn bool_property(\n784     canonical_name: &'static str,\n785 ) -> Result<hir::ClassUnicode, Error> {\n786     #[cfg(not(feature = \"unicode-bool\"))]\n787     fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n788         Err(Error::PropertyNotFound)\n789     }\n790 \n791     #[cfg(feature = \"unicode-bool\")]\n792     fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n793         use crate::unicode_tables::property_bool::BY_NAME;\n794         property_set(BY_NAME, name)\n795             .map(hir_class)\n796             .ok_or(Error::PropertyNotFound)\n797     }\n798 \n799     match canonical_name {\n800         \"Decimal_Number\" => perl_digit(),\n801         \"White_Space\" => perl_space(),\n802         name => imp(name),\n803     }\n804 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}