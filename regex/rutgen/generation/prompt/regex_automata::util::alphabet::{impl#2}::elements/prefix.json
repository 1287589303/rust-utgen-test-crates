{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\n#[derive(Debug)]\npub struct ByteClassElements<'a> {\n    classes: &'a ByteClasses,\n    class: Unit,\n    byte: usize,\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {}\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {}\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {\n        ByteClassElements {\n            classes: self,\n            class,\n            byte: 0,\n        }\n    }\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator of the bytes in the given equivalence class.\n///\n/// This is useful when one needs to know the actual bytes that belong to\n/// an equivalence class. For example, conceptually speaking, accelerating\n/// a DFA state occurs when a state only has a few outgoing transitions.\n/// But in reality, what is required is that there are only a small\n/// number of distinct bytes that can lead to an outgoing transition. The\n/// difference is that any one transition can correspond to an equivalence\n/// class which may contains many bytes. Therefore, DFA state acceleration\n/// considers the actual elements in each equivalence class of each\n/// outgoing transition.\n///\n/// # Example\n///\n/// This shows an example of how to get all of the elements in an\n/// equivalence class.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, util::alphabet::Unit};\n///\n/// let nfa = NFA::new(\"[a-z]+\")?;\n/// let classes = nfa.byte_classes();\n/// let elements: Vec<Unit> = classes.elements(Unit::u8(1)).collect();\n/// let expected: Vec<Unit> = (b'a'..=b'z').map(Unit::u8).collect();\n/// assert_eq!(expected, elements);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n472 pub fn elements(&self, class: Unit) -> ByteClassElements {\n473     ByteClassElements { classes: self, class, byte: 0 }\n474 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}