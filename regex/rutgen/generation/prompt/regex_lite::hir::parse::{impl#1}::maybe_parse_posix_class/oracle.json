{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/parse.rs\n// crate name is regex_lite\nuse core::cell::{Cell, RefCell};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{error::Error, hir::{self, Config, Flags, Hir, HirKind}};\nconst ERR_TOO_MUCH_NESTING: &str = \"pattern has too much nesting\";\nconst ERR_TOO_MANY_CAPTURES: &str = \"too many capture groups\";\nconst ERR_DUPLICATE_CAPTURE_NAME: &str = \"duplicate capture group name\";\nconst ERR_UNCLOSED_GROUP: &str = \"found open group without closing ')'\";\nconst ERR_UNCLOSED_GROUP_QUESTION: &str = \"expected closing ')', but got end of pattern\";\nconst ERR_UNOPENED_GROUP: &str = \"found closing ')' without matching '('\";\nconst ERR_LOOK_UNSUPPORTED: &str = \"look-around is not supported\";\nconst ERR_EMPTY_FLAGS: &str = \"empty flag directive '(?)' is not allowed\";\nconst ERR_MISSING_GROUP_NAME: &str = \"expected capture group name, but got end of pattern\";\nconst ERR_INVALID_GROUP_NAME: &str = \"invalid group name\";\nconst ERR_UNCLOSED_GROUP_NAME: &str = \"expected end of capture group name, but got end of pattern\";\nconst ERR_EMPTY_GROUP_NAME: &str = \"empty capture group names are not allowed\";\nconst ERR_FLAG_UNRECOGNIZED: &str = \"unrecognized inline flag\";\nconst ERR_FLAG_REPEATED_NEGATION: &str = \"inline flag negation cannot be repeated\";\nconst ERR_FLAG_DUPLICATE: &str = \"duplicate inline flag is not allowed\";\nconst ERR_FLAG_UNEXPECTED_EOF: &str = \"expected ':' or ')' to end inline flags, but got end of pattern\";\nconst ERR_FLAG_DANGLING_NEGATION: &str = \"inline flags cannot end with negation directive\";\nconst ERR_DECIMAL_NO_DIGITS: &str = \"expected decimal number, but found no digits\";\nconst ERR_DECIMAL_INVALID: &str = \"got invalid decimal number\";\nconst ERR_HEX_BRACE_INVALID_DIGIT: &str = \"expected hexadecimal number in braces, but got non-hex digit\";\nconst ERR_HEX_BRACE_UNEXPECTED_EOF: &str = \"expected hexadecimal number, but saw end of pattern before closing brace\";\nconst ERR_HEX_BRACE_EMPTY: &str = \"expected hexadecimal number in braces, but got no digits\";\nconst ERR_HEX_BRACE_INVALID: &str = \"got invalid hexadecimal number in braces\";\nconst ERR_HEX_FIXED_UNEXPECTED_EOF: &str = \"expected fixed length hexadecimal number, but saw end of pattern first\";\nconst ERR_HEX_FIXED_INVALID_DIGIT: &str = \"expected fixed length hexadecimal number, but got non-hex digit\";\nconst ERR_HEX_FIXED_INVALID: &str = \"got invalid fixed length hexadecimal number\";\nconst ERR_HEX_UNEXPECTED_EOF: &str = \"expected hexadecimal number, but saw end of pattern first\";\nconst ERR_ESCAPE_UNEXPECTED_EOF: &str = \"saw start of escape sequence, but saw end of pattern before it finished\";\nconst ERR_BACKREF_UNSUPPORTED: &str = \"backreferences are not supported\";\nconst ERR_UNICODE_CLASS_UNSUPPORTED: &str = \"Unicode character classes are not supported\";\nconst ERR_ESCAPE_UNRECOGNIZED: &str = \"unrecognized escape sequence\";\nconst ERR_POSIX_CLASS_UNRECOGNIZED: &str = \"unrecognized POSIX character class\";\nconst ERR_UNCOUNTED_REP_SUB_MISSING: &str = \"uncounted repetition operator must be applied to a sub-expression\";\nconst ERR_COUNTED_REP_SUB_MISSING: &str = \"counted repetition operator must be applied to a sub-expression\";\nconst ERR_COUNTED_REP_UNCLOSED: &str = \"found unclosed counted repetition operator\";\nconst ERR_COUNTED_REP_MIN_UNCLOSED: &str = \"found incomplete and unclosed counted repetition operator\";\nconst ERR_COUNTED_REP_COMMA_UNCLOSED: &str = \"found counted repetition operator with a comma that is unclosed\";\nconst ERR_COUNTED_REP_MIN_MAX_UNCLOSED: &str = \"found counted repetition with min and max that is unclosed\";\nconst ERR_COUNTED_REP_INVALID: &str = \"expected closing brace for counted repetition, but got something else\";\nconst ERR_COUNTED_REP_INVALID_RANGE: &str = \"found counted repetition with a min bigger than its max\";\nconst ERR_CLASS_UNCLOSED_AFTER_ITEM: &str = \"non-empty character class has no closing bracket\";\nconst ERR_CLASS_INVALID_RANGE_ITEM: &str = \"character class ranges must start and end with a single character\";\nconst ERR_CLASS_INVALID_ITEM: &str = \"invalid escape sequence in character class\";\nconst ERR_CLASS_UNCLOSED_AFTER_DASH: &str = \"non-empty character class has no closing bracket after dash\";\nconst ERR_CLASS_UNCLOSED_AFTER_NEGATION: &str = \"negated character class has no closing bracket\";\nconst ERR_CLASS_UNCLOSED_AFTER_CLOSING: &str = \"character class begins with literal ']' but has no closing bracket\";\nconst ERR_CLASS_INVALID_RANGE: &str = \"invalid range in character class\";\nconst ERR_CLASS_UNCLOSED: &str = \"found unclosed character class\";\nconst ERR_CLASS_NEST_UNSUPPORTED: &str = \"nested character classes are not supported\";\nconst ERR_CLASS_INTERSECTION_UNSUPPORTED: &str = \"character class intersection is not supported\";\nconst ERR_CLASS_DIFFERENCE_UNSUPPORTED: &str = \"character class difference is not supported\";\nconst ERR_CLASS_SYMDIFFERENCE_UNSUPPORTED: &str = \"character class symmetric difference is not supported\";\nconst ERR_SPECIAL_WORD_BOUNDARY_UNCLOSED: &str = \"special word boundary assertion is unclosed or has an invalid character\";\nconst ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED: &str = \"special word boundary assertion is unrecognized\";\nconst ERR_SPECIAL_WORD_OR_REP_UNEXPECTED_EOF: &str = \"found start of special word boundary or repetition without an end\";\n#[derive(Clone, Debug)]\npub(super) struct Parser<'a> {\n    /// The configuration of the parser as given by the caller.\n    config: Config,\n    /// The pattern we're parsing as given by the caller.\n    pattern: &'a str,\n    /// The call depth of the parser. This is incremented for each\n    /// sub-expression parsed. Its peak value is the maximum nesting of the\n    /// pattern.\n    depth: Cell<u32>,\n    /// The current position of the parser.\n    pos: Cell<usize>,\n    /// The current codepoint of the parser. The codepoint corresponds to the\n    /// codepoint encoded in `pattern` beginning at `pos`.\n    ///\n    /// This is `None` if and only if `pos == pattern.len()`.\n    char: Cell<Option<char>>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The flags that are currently set.\n    flags: RefCell<Flags>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<String>>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Class {\n    pub(crate) ranges: Vec<ClassRange>,\n}\n#[derive(Clone, Copy, Debug, Default)]\npub(crate) struct Flags {\n    /// Whether to match case insensitively.\n    ///\n    /// This is the `i` flag.\n    pub(crate) case_insensitive: bool,\n    /// Whether `^` and `$` should be treated as line anchors or not.\n    ///\n    /// This is the `m` flag.\n    pub(crate) multi_line: bool,\n    /// Whether `.` should match line terminators or not.\n    ///\n    /// This is the `s` flag.\n    pub(crate) dot_matches_new_line: bool,\n    /// Whether to swap the meaning of greedy and non-greedy operators.\n    ///\n    /// This is the `U` flag.\n    pub(crate) swap_greed: bool,\n    /// Whether to enable CRLF mode.\n    ///\n    /// This is the `R` flag.\n    pub(crate) crlf: bool,\n    /// Whether to ignore whitespace. i.e., verbose mode.\n    ///\n    /// This is the `x` flag.\n    pub(crate) ignore_whitespace: bool,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\nimpl<'a> Parser<'a> {\n    pub(super) fn parse(&self) -> Result<Hir, Error> {}\n    fn parse_inner(&self) -> Result<Hir, Error> {}\n    fn parse_primitive(&self) -> Result<Hir, Error> {}\n    fn parse_escape(&self) -> Result<Hir, Error> {}\n    fn maybe_parse_special_word_boundary(&self) -> Result<Option<Hir>, Error> {}\n    fn parse_hex(&self) -> Result<Hir, Error> {}\n    fn parse_hex_digits(&self, digit_len: usize) -> Result<Hir, Error> {}\n    fn parse_hex_brace(&self) -> Result<Hir, Error> {}\n    fn parse_decimal(&self) -> Result<u32, Error> {}\n    fn parse_uncounted_repetition(\n        &self,\n        mut concat: Vec<Hir>,\n    ) -> Result<Vec<Hir>, Error> {}\n    fn parse_counted_repetition(&self, mut concat: Vec<Hir>) -> Result<Vec<Hir>, Error> {}\n    fn parse_group(&self) -> Result<Option<Hir>, Error> {}\n    fn parse_capture_name(&self) -> Result<&str, Error> {}\n    fn parse_flags(&self) -> Result<Flags, Error> {}\n    fn parse_flag(&self, flags: &mut Flags, negate: bool) -> Result<(), Error> {}\n    fn parse_class(&self) -> Result<Hir, Error> {}\n    fn parse_class_range(&self, union: &mut Vec<hir::ClassRange>) -> Result<(), Error> {}\n    fn parse_class_item(&self) -> Result<Hir, Error> {}\n    fn maybe_parse_posix_class(&self) -> Option<hir::Class> {\n        assert_eq!(self.char(), '[');\n        let start_pos = self.pos();\n        let start_char = self.char.get();\n        let reset = || {\n            self.pos.set(start_pos);\n            self.char.set(start_char);\n        };\n        let mut negated = false;\n        if !self.bump() || self.char() != ':' {\n            reset();\n            return None;\n        }\n        if !self.bump() {\n            reset();\n            return None;\n        }\n        if self.char() == '^' {\n            negated = true;\n            if !self.bump() {\n                reset();\n                return None;\n            }\n        }\n        let name_start = self.pos();\n        while self.char() != ':' && self.bump() {}\n        if self.is_done() {\n            reset();\n            return None;\n        }\n        let name = &self.pattern()[name_start..self.pos()];\n        if !self.bump_if(\":]\") {\n            reset();\n            return None;\n        }\n        if let Ok(ranges) = posix_class(name) {\n            let mut class = hir::Class::new(ranges);\n            if negated {\n                class.negate();\n            }\n            return Some(class);\n        }\n        reset();\n        None\n    }\n    fn parse_perl_class(&self) -> Hir {}\n    fn hir_dot(&self) -> Hir {}\n    fn hir_anchor_start(&self) -> Hir {}\n    fn hir_anchor_end(&self) -> Hir {}\n    fn hir_char(&self, ch: char) -> Hir {}\n}\nimpl Class {\n    fn new<I: IntoIterator<Item = ClassRange>>(ranges: I) -> Class {}\n    fn ascii_case_fold(&mut self) {}\n    fn negate(&mut self) {\n        const MIN: char = '\\x00';\n        const MAX: char = char::MAX;\n        if self.ranges.is_empty() {\n            self.ranges.push(ClassRange { start: MIN, end: MAX });\n            return;\n        }\n        let drain_end = self.ranges.len();\n        if self.ranges[0].start > MIN {\n            self.ranges\n                .push(ClassRange {\n                    start: MIN,\n                    end: prev_char(self.ranges[0].start).unwrap(),\n                });\n        }\n        for i in 1..drain_end {\n            self.ranges\n                .push(ClassRange {\n                    start: next_char(self.ranges[i - 1].end).unwrap(),\n                    end: prev_char(self.ranges[i].start).unwrap(),\n                });\n        }\n        if self.ranges[drain_end - 1].end < MAX {\n            self.ranges\n                .push(ClassRange {\n                    start: next_char(self.ranges[drain_end - 1].end).unwrap(),\n                    end: MAX,\n                });\n        }\n        self.ranges.drain(..drain_end);\n    }\n    fn canonicalize(&mut self) {}\n    fn is_canonical(&self) -> bool {}\n}\nfn posix_class(kind: &str) -> Result<impl Iterator<Item = hir::ClassRange>, Error> {\n    let slice: &'static [(u8, u8)] = match kind {\n        \"alnum\" => &[(b'0', b'9'), (b'A', b'Z'), (b'a', b'z')],\n        \"alpha\" => &[(b'A', b'Z'), (b'a', b'z')],\n        \"ascii\" => &[(b'\\x00', b'\\x7F')],\n        \"blank\" => &[(b'\\t', b'\\t'), (b' ', b' ')],\n        \"cntrl\" => &[(b'\\x00', b'\\x1F'), (b'\\x7F', b'\\x7F')],\n        \"digit\" => &[(b'0', b'9')],\n        \"graph\" => &[(b'!', b'~')],\n        \"lower\" => &[(b'a', b'z')],\n        \"print\" => &[(b' ', b'~')],\n        \"punct\" => &[(b'!', b'/'), (b':', b'@'), (b'[', b'`'), (b'{', b'~')],\n        \"space\" => {\n            &[\n                (b'\\t', b'\\t'),\n                (b'\\n', b'\\n'),\n                (b'\\x0B', b'\\x0B'),\n                (b'\\x0C', b'\\x0C'),\n                (b'\\r', b'\\r'),\n                (b' ', b' '),\n            ]\n        }\n        \"upper\" => &[(b'A', b'Z')],\n        \"word\" => &[(b'0', b'9'), (b'A', b'Z'), (b'_', b'_'), (b'a', b'z')],\n        \"xdigit\" => &[(b'0', b'9'), (b'A', b'F'), (b'a', b'f')],\n        _ => return Err(Error::new(ERR_POSIX_CLASS_UNRECOGNIZED)),\n    };\n    Ok(\n        slice\n            .iter()\n            .map(|&(start, end)| hir::ClassRange {\n                start: char::from(start),\n                end: char::from(end),\n            }),\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Attempt to parse a POSIX character class, e.g., `[:alnum:]`.\n///\n/// This assumes the parser is positioned at the opening `[`.\n///\n/// If no valid POSIX character class could be found, then this does not\n/// advance the parser and `None` is returned. Otherwise, the parser is\n/// advanced to the first byte following the closing `]` and the\n/// corresponding POSIX class is returned.\n1140 fn maybe_parse_posix_class(&self) -> Option<hir::Class> {\n1141     // POSIX character classes are interesting from a parsing perspective\n1142     // because parsing cannot fail with any interesting error. For example,\n1143     // in order to use an POSIX character class, it must be enclosed in\n1144     // double brackets, e.g., `[[:alnum:]]`. Alternatively, you might think\n1145     // of it as \"POSIX character classes have the syntax `[:NAME:]` which\n1146     // can only appear within character brackets.\" This means that things\n1147     // like `[[:lower:]A]` are legal constructs.\n1148     //\n1149     // However, if one types an incorrect POSIX character class, e.g.,\n1150     // `[[:loower:]]`, then we treat that as if it were normal nested\n1151     // character class containing the characters `:elorw`. (Which isn't\n1152     // supported and results in an error in regex-lite.) One might argue\n1153     // that we should return an error instead since the repeated colons\n1154     // give away the intent to write an POSIX class. But what if the user\n1155     // typed `[[:lower]]` instead? How can we tell that was intended to be\n1156     // a POSXI class and not just a normal nested class?\n1157     //\n1158     // Reasonable people can probably disagree over this, but for better\n1159     // or worse, we implement semantics that never fails at the expense of\n1160     // better failure modes.\n1161     assert_eq!(self.char(), '[');\n1162 \n1163     // If parsing fails, then we back up the parser to this starting point.\n1164     let start_pos = self.pos();\n1165     let start_char = self.char.get();\n1166     let reset = || {\n1167         self.pos.set(start_pos);\n1168         self.char.set(start_char);\n1169     };\n1170 \n1171     let mut negated = false;\n1172     if !self.bump() || self.char() != ':' {\n1173         reset();\n1174         return None;\n1175     }\n1176     if !self.bump() {\n1177         reset();\n1178         return None;\n1179     }\n1180     if self.char() == '^' {\n1181         negated = true;\n1182         if !self.bump() {\n1183             reset();\n1184             return None;\n1185         }\n1186     }\n1187     let name_start = self.pos();\n1188     while self.char() != ':' && self.bump() {}\n1189     if self.is_done() {\n1190         reset();\n1191         return None;\n1192     }\n1193     let name = &self.pattern()[name_start..self.pos()];\n1194     if !self.bump_if(\":]\") {\n1195         reset();\n1196         return None;\n1197     }\n1198     if let Ok(ranges) = posix_class(name) {\n1199         let mut class = hir::Class::new(ranges);\n1200         if negated {\n1201             class.negate();\n1202         }\n1203         return Some(class);\n1204     }\n1205     reset();\n1206     None\n1207 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}