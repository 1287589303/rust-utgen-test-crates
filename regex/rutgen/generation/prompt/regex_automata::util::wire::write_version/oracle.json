{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct SerializeError {\n    /// The name of the thing that a buffer is too small for.\n    ///\n    /// Currently, the only kind of serialization error is one that is\n    /// committed by a caller: providing a destination buffer that is too\n    /// small to fit the serialized object. This makes sense conceptually,\n    /// since every valid inhabitant of a type should be serializable.\n    ///\n    /// This is somewhat exposed in the public API of this crate. For example,\n    /// the `to_bytes_{big,little}_endian` APIs return a `Vec<u8>` and are\n    /// guaranteed to never panic or error. This is only possible because the\n    /// implementation guarantees that it will allocate a `Vec<u8>` that is\n    /// big enough.\n    ///\n    /// In summary, if a new serialization error kind needs to be added, then\n    /// it will need careful consideration.\n    what: &'static str,\n}\nimpl SerializeError {\n    pub(crate) fn buffer_too_small(what: &'static str) -> SerializeError {\n        SerializeError { what }\n    }\n}\npub(crate) fn write_version<E: Endian>(\n    version: u32,\n    dst: &mut [u8],\n) -> Result<usize, SerializeError> {\n    let nwrite = write_version_len();\n    if dst.len() < nwrite {\n        return Err(SerializeError::buffer_too_small(\"version number\"));\n    }\n    E::write_u32(version, dst);\n    Ok(nwrite)\n}\npub(crate) fn write_version_len() -> usize {\n    size_of::<u32>()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Writes the given version number to the beginning of the given slice.\n///\n/// This is useful for writing into the header of a serialized object. It can\n/// be read during deserialization as a sanity check to ensure that the library\n/// code supports the format of the serialized object.\n///\n/// Upon success, the total number of bytes written is returned.\n559 pub(crate) fn write_version<E: Endian>(\n560     version: u32,\n561     dst: &mut [u8],\n562 ) -> Result<usize, SerializeError> {\n563     let nwrite = write_version_len();\n564     if dst.len() < nwrite {\n565         return Err(SerializeError::buffer_too_small(\"version number\"));\n566     }\n567     E::write_u32(version, dst);\n568     Ok(nwrite)\n569 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}