{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/mod.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\npub(crate) use self::state::{\n    State, StateBuilderEmpty, StateBuilderMatches, StateBuilderNFA,\n};\nuse crate::{\n    nfa::thompson,\n    util::{\n        alphabet, look::{Look, LookSet},\n        primitives::StateID, search::MatchKind, sparse_set::{SparseSet, SparseSets},\n        start::Start, utf8,\n    },\n};\n#[derive(Clone)]\npub(crate) struct StateBuilderNFA {\n    repr: Vec<u8>,\n    prev_nfa_state_id: StateID,\n}\n#[derive(Clone)]\npub(crate) struct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where\n    /// `i = Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Debug)]\npub(crate) struct SparseSetIter<'a>(core::slice::Iter<'a, StateID>);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\n#[derive(Clone, Eq, PartialEq)]\npub enum State {\n    /// A state with a single transition that can only be taken if the current\n    /// input symbol is in a particular range of bytes.\n    ByteRange {\n        /// The transition from this state to the next.\n        trans: Transition,\n    },\n    /// A state with possibly many transitions represented in a sparse fashion.\n    /// Transitions are non-overlapping and ordered lexicographically by input\n    /// range.\n    ///\n    /// In practice, this is used for encoding UTF-8 automata. Its presence is\n    /// primarily an optimization that avoids many additional unconditional\n    /// epsilon transitions (via [`Union`](State::Union) states), and thus\n    /// decreases the overhead of traversing the NFA. This can improve both\n    /// matching time and DFA construction time.\n    Sparse(SparseTransitions),\n    /// A dense representation of a state with multiple transitions.\n    Dense(DenseTransitions),\n    /// A conditional epsilon transition satisfied via some sort of\n    /// look-around. Look-around is limited to anchor and word boundary\n    /// assertions.\n    ///\n    /// Look-around states are meant to be evaluated while performing epsilon\n    /// closure (computing the set of states reachable from a particular state\n    /// via only epsilon transitions). If the current position in the haystack\n    /// satisfies the look-around assertion, then you're permitted to follow\n    /// that epsilon transition.\n    Look {\n        /// The look-around assertion that must be satisfied before moving\n        /// to `next`.\n        look: Look,\n        /// The state to transition to if the look-around assertion is\n        /// satisfied.\n        next: StateID,\n    },\n    /// An alternation such that there exists an epsilon transition to all\n    /// states in `alternates`, where matches found via earlier transitions\n    /// are preferred over later transitions.\n    Union {\n        /// An ordered sequence of unconditional epsilon transitions to other\n        /// states. Transitions earlier in the sequence are preferred over\n        /// transitions later in the sequence.\n        alternates: Box<[StateID]>,\n    },\n    /// An alternation such that there exists precisely two unconditional\n    /// epsilon transitions, where matches found via `alt1` are preferred over\n    /// matches found via `alt2`.\n    ///\n    /// This state exists as a common special case of Union where there are\n    /// only two alternates. In this case, we don't need any allocations to\n    /// represent the state. This saves a bit of memory and also saves an\n    /// additional memory access when traversing the NFA.\n    BinaryUnion {\n        /// An unconditional epsilon transition to another NFA state. This\n        /// is preferred over `alt2`.\n        alt1: StateID,\n        /// An unconditional epsilon transition to another NFA state. Matches\n        /// reported via this transition should only be reported if no matches\n        /// were found by following `alt1`.\n        alt2: StateID,\n    },\n    /// An empty state that records a capture location.\n    ///\n    /// From the perspective of finite automata, this is precisely equivalent\n    /// to an unconditional epsilon transition, but serves the purpose of\n    /// instructing NFA simulations to record additional state when the finite\n    /// state machine passes through this epsilon transition.\n    ///\n    /// `slot` in this context refers to the specific capture group slot\n    /// offset that is being recorded. Each capturing group has two slots\n    /// corresponding to the start and end of the matching portion of that\n    /// group.\n    ///\n    /// The pattern ID and capture group index are also included in this state\n    /// in case they are useful. But mostly, all you'll need is `next` and\n    /// `slot`.\n    Capture {\n        /// The state to transition to, unconditionally.\n        next: StateID,\n        /// The pattern ID that this capture belongs to.\n        pattern_id: PatternID,\n        /// The capture group index that this capture belongs to. Capture group\n        /// indices are local to each pattern. For example, when capturing\n        /// groups are enabled, every pattern has a capture group at index\n        /// `0`.\n        group_index: SmallIndex,\n        /// The slot index for this capture. Every capturing group has two\n        /// slots: one for the start haystack offset and one for the end\n        /// haystack offset. Unlike capture group indices, slot indices are\n        /// global across all patterns in this NFA. That is, each slot belongs\n        /// to a single pattern, but there is only one slot at index `i`.\n        slot: SmallIndex,\n    },\n    /// A state that cannot be transitioned out of. This is useful for cases\n    /// where you want to prevent matching from occurring. For example, if your\n    /// regex parser permits empty character classes, then one could choose\n    /// a `Fail` state to represent them. (An empty character class can be\n    /// thought of as an empty set. Since nothing is in an empty set, they can\n    /// never match anything.)\n    Fail,\n    /// A match state. There is at least one such occurrence of this state for\n    /// each regex that can match that is in this NFA.\n    Match {\n        /// The matching pattern ID.\n        pattern_id: PatternID,\n    },\n}\nimpl StateBuilderNFA {\n    pub(crate) fn to_state(&self) -> State {}\n    pub(crate) fn clear(self) -> StateBuilderEmpty {}\n    pub(crate) fn look_need(&self) -> LookSet {\n        self.repr().look_need()\n    }\n    pub(crate) fn set_look_have(&mut self, set: impl FnMut(LookSet) -> LookSet) {\n        self.repr_vec().set_look_have(set)\n    }\n    pub(crate) fn set_look_need(&mut self, set: impl FnMut(LookSet) -> LookSet) {\n        self.repr_vec().set_look_need(set)\n    }\n    pub(crate) fn add_nfa_state_id(&mut self, sid: StateID) {\n        ReprVec(&mut self.repr).add_nfa_state_id(&mut self.prev_nfa_state_id, sid)\n    }\n    pub(crate) fn as_bytes(&self) -> &[u8] {}\n    fn repr(&self) -> Repr<'_> {}\n    fn repr_vec(&mut self) -> ReprVec<'_> {}\n}\nimpl SparseSet {\n    #[inline]\n    pub(crate) fn new(capacity: usize) -> SparseSet {}\n    #[inline]\n    pub(crate) fn resize(&mut self, new_capacity: usize) {}\n    #[inline]\n    pub(crate) fn capacity(&self) -> usize {}\n    #[inline]\n    pub(crate) fn len(&self) -> usize {}\n    #[inline]\n    pub(crate) fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn insert(&mut self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn contains(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn clear(&mut self) {}\n    #[inline]\n    pub(crate) fn iter(&self) -> SparseSetIter<'_> {\n        SparseSetIter(self.dense[..self.len()].iter())\n    }\n    #[inline]\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\nimpl NFA {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<NFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<NFA, BuildError> {}\n    pub fn always_match() -> NFA {}\n    pub fn never_match() -> NFA {}\n    #[cfg(feature = \"syntax\")]\n    pub fn config() -> Config {}\n    #[cfg(feature = \"syntax\")]\n    pub fn compiler() -> Compiler {}\n    pub fn patterns(&self) -> PatternIter<'_> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn start_anchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_unanchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_pattern(&self, pid: PatternID) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn byte_class_set(&self) -> &ByteClassSet {}\n    #[inline]\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    #[inline]\n    pub fn state(&self, id: StateID) -> &State {\n        &self.states()[id]\n    }\n    #[inline]\n    pub fn states(&self) -> &[State] {}\n    #[inline]\n    pub fn group_info(&self) -> &GroupInfo {}\n    #[inline]\n    pub fn has_capture(&self) -> bool {}\n    #[inline]\n    pub fn has_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {}\n    #[inline]\n    pub fn is_reverse(&self) -> bool {}\n    #[inline]\n    pub fn is_always_start_anchored(&self) -> bool {}\n    #[inline]\n    pub fn look_matcher(&self) -> &LookMatcher {}\n    #[inline]\n    pub fn look_set_any(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl LookSet {\n    #[inline]\n    pub fn empty() -> LookSet {}\n    #[inline]\n    pub fn full() -> LookSet {}\n    #[inline]\n    pub fn singleton(look: Look) -> LookSet {}\n    #[inline]\n    pub fn len(self) -> usize {}\n    #[inline]\n    pub fn is_empty(self) -> bool {\n        self.len() == 0\n    }\n    #[inline]\n    pub fn contains(self, look: Look) -> bool {}\n    #[inline]\n    pub fn contains_anchor(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_haystack(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_line(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_lf(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_crlf(&self) -> bool {}\n    #[inline]\n    pub fn contains_word(self) -> bool {}\n    #[inline]\n    pub fn contains_word_unicode(self) -> bool {}\n    #[inline]\n    pub fn contains_word_ascii(self) -> bool {}\n    #[inline]\n    pub fn iter(self) -> LookSetIter {}\n    #[inline]\n    pub fn insert(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_insert(&mut self, look: Look) {}\n    #[inline]\n    pub fn remove(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_remove(&mut self, look: Look) {}\n    #[inline]\n    pub fn subtract(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_subtract(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn union(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_union(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn intersect(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_intersect(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn read_repr(slice: &[u8]) -> LookSet {}\n    #[inline]\n    pub fn write_repr(self, slice: &mut [u8]) {}\n    pub fn available(self) -> Result<(), UnicodeWordBoundaryError> {}\n}\npub(crate) fn add_nfa_states(\n    nfa: &thompson::NFA,\n    set: &SparseSet,\n    builder: &mut StateBuilderNFA,\n) {\n    for nfa_id in set.iter() {\n        match *nfa.state(nfa_id) {\n            thompson::State::ByteRange { .. } => {\n                builder.add_nfa_state_id(nfa_id);\n            }\n            thompson::State::Sparse { .. } => {\n                builder.add_nfa_state_id(nfa_id);\n            }\n            thompson::State::Dense { .. } => {\n                builder.add_nfa_state_id(nfa_id);\n            }\n            thompson::State::Look { look, .. } => {\n                builder.add_nfa_state_id(nfa_id);\n                builder.set_look_need(|need| need.insert(look));\n            }\n            thompson::State::Union { .. } | thompson::State::BinaryUnion { .. } => {\n                builder.add_nfa_state_id(nfa_id);\n            }\n            thompson::State::Capture { .. } => {}\n            thompson::State::Fail => {\n                builder.add_nfa_state_id(nfa_id);\n            }\n            thompson::State::Match { .. } => {\n                builder.add_nfa_state_id(nfa_id);\n            }\n        }\n    }\n    if builder.look_need().is_empty() {\n        builder.set_look_have(|_| LookSet::empty());\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Add the NFA state IDs in the given `set` to the given DFA builder state.\n/// The order in which states are added corresponds to the order in which they\n/// were added to `set`.\n///\n/// The DFA builder state given should already have its complete set of match\n/// pattern IDs added (if any) and any look-behind assertions (StartLF, Start\n/// and whether this state is being generated for a transition over a word byte\n/// when applicable) that are true immediately prior to transitioning into this\n/// state (via `builder.look_have()`). The match pattern IDs should correspond\n/// to matches that occurred on the previous transition, since all matches are\n/// delayed by one byte. The things that should _not_ be set are look-ahead\n/// assertions (EndLF, End and whether the next byte is a word byte or not).\n/// The builder state should also not have anything in `look_need` set, as this\n/// routine will compute that for you.\n///\n/// The given NFA should be able to resolve all identifiers in `set` to a\n/// particular NFA state. Additionally, `set` must have capacity equivalent\n/// to `nfa.len()`.\n448 pub(crate) fn add_nfa_states(\n449     nfa: &thompson::NFA,\n450     set: &SparseSet,\n451     builder: &mut StateBuilderNFA,\n452 ) {\n453     for nfa_id in set.iter() {\n454         match *nfa.state(nfa_id) {\n455             thompson::State::ByteRange { .. } => {\n456                 builder.add_nfa_state_id(nfa_id);\n457             }\n458             thompson::State::Sparse { .. } => {\n459                 builder.add_nfa_state_id(nfa_id);\n460             }\n461             thompson::State::Dense { .. } => {\n462                 builder.add_nfa_state_id(nfa_id);\n463             }\n464             thompson::State::Look { look, .. } => {\n465                 builder.add_nfa_state_id(nfa_id);\n466                 builder.set_look_need(|need| need.insert(look));\n467             }\n468             thompson::State::Union { .. }\n469             | thompson::State::BinaryUnion { .. } => {\n470                 // Pure epsilon transitions don't need to be tracked as part\n471                 // of the DFA state. Tracking them is actually superfluous;\n472                 // they won't cause any harm other than making determinization\n473                 // slower.\n474                 //\n475                 // Why aren't these needed? Well, in an NFA, epsilon\n476                 // transitions are really just jumping points to other states.\n477                 // So once you hit an epsilon transition, the same set of\n478                 // resulting states always appears. Therefore, putting them in\n479                 // a DFA's set of ordered NFA states is strictly redundant.\n480                 //\n481                 // Look-around states are also epsilon transitions, but\n482                 // they are *conditional*. So their presence could be\n483                 // discriminatory, and thus, they are tracked above.\n484                 //\n485                 // But wait... why are epsilon states in our `set` in the first\n486                 // place? Why not just leave them out? They're in our `set`\n487                 // because it was generated by computing an epsilon closure,\n488                 // and we want to keep track of all states we visited to avoid\n489                 // re-visiting them. In exchange, we have to do this second\n490                 // iteration over our collected states to finalize our DFA\n491                 // state. In theory, we could avoid this second iteration if\n492                 // we maintained two sets during epsilon closure: the set of\n493                 // visited states (to avoid cycles) and the set of states that\n494                 // will actually be used to construct the next DFA state.\n495                 //\n496                 // Note that this optimization requires that we re-compute the\n497                 // epsilon closure to account for look-ahead in 'next' *only\n498                 // when necessary*. Namely, only when the set of look-around\n499                 // assertions changes and only when those changes are within\n500                 // the set of assertions that are needed in order to step\n501                 // through the closure correctly. Otherwise, if we re-do the\n502                 // epsilon closure needlessly, it could change based on the\n503                 // fact that we are omitting epsilon states here.\n504                 //\n505                 // -----\n506                 //\n507                 // Welp, scratch the above. It turns out that recording these\n508                 // is in fact necessary to seemingly handle one particularly\n509                 // annoying case: when a conditional epsilon transition is\n510                 // put inside of a repetition operator. One specific case I\n511                 // ran into was the regex `(?:\\b|%)+` on the haystack `z%`.\n512                 // The correct leftmost first matches are: [0, 0] and [1, 1].\n513                 // But the DFA was reporting [0, 0] and [1, 2]. To understand\n514                 // why this happens, consider the NFA for the aforementioned\n515                 // regex:\n516                 //\n517                 //     >000000: binary-union(4, 1)\n518                 //      000001: \\x00-\\xFF => 0\n519                 //      000002: WordAscii => 5\n520                 //      000003: % => 5\n521                 //     ^000004: binary-union(2, 3)\n522                 //      000005: binary-union(4, 6)\n523                 //      000006: MATCH(0)\n524                 //\n525                 // The problem here is that one of the DFA start states is\n526                 // going to consist of the NFA states [2, 3] by computing the\n527                 // epsilon closure of state 4. State 4 isn't included because\n528                 // we previously were not keeping track of union states. But\n529                 // only a subset of transitions out of this state will be able\n530                 // to follow WordAscii, and in those cases, the epsilon closure\n531                 // is redone. The only problem is that computing the epsilon\n532                 // closure from [2, 3] is different than computing the epsilon\n533                 // closure from [4]. In the former case, assuming the WordAscii\n534                 // assertion is satisfied, you get: [2, 3, 6]. In the latter\n535                 // case, you get: [2, 6, 3]. Notice that '6' is the match state\n536                 // and appears AFTER '3' in the former case. This leads to a\n537                 // preferential but incorrect match of '%' before returning\n538                 // a match. In the latter case, the match is preferred over\n539                 // continuing to accept the '%'.\n540                 //\n541                 // It almost feels like we might be able to fix the NFA states\n542                 // to avoid this, or to at least only keep track of union\n543                 // states where this actually matters, since in the vast\n544                 // majority of cases, this doesn't matter.\n545                 //\n546                 // Another alternative would be to define a new HIR property\n547                 // called \"assertion is repeated anywhere\" and compute it\n548                 // inductively over the entire pattern. If it happens anywhere,\n549                 // which is probably pretty rare, then we record union states.\n550                 // Otherwise we don't.\n551                 builder.add_nfa_state_id(nfa_id);\n552             }\n553             // Capture states we definitely do not need to record, since they\n554             // are unconditional epsilon transitions with no branching.\n555             thompson::State::Capture { .. } => {}\n556             // It's not totally clear whether we need to record fail states or\n557             // not, but we do so out of an abundance of caution. Since they are\n558             // quite rare in practice, there isn't much cost to recording them.\n559             thompson::State::Fail => {\n560                 builder.add_nfa_state_id(nfa_id);\n561             }\n562             thompson::State::Match { .. } => {\n563                 // Normally, the NFA match state doesn't actually need to\n564                 // be inside the DFA state. But since we delay matches by\n565                 // one byte, the matching DFA state corresponds to states\n566                 // that transition from the one we're building here. And\n567                 // the way we detect those cases is by looking for an NFA\n568                 // match state. See 'next' for how this is handled.\n569                 builder.add_nfa_state_id(nfa_id);\n570             }\n571         }\n572     }\n573     // If we know this state contains no look-around assertions, then\n574     // there's no reason to track which look-around assertions were\n575     // satisfied when this state was created.\n576     if builder.look_need().is_empty() {\n577         builder.set_look_have(|_| LookSet::empty());\n578     }\n579 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}