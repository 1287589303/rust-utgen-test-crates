{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/lazy.rs\n// crate name is regex_automata\nuse core::{\n    cell::Cell, fmt, mem::MaybeUninit, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicU8, Ordering},\n};\nconst LAZY_STATE_INIT: u8 = 0;\nconst LAZY_STATE_BUSY: u8 = 1;\nconst LAZY_STATE_DONE: u8 = 2;\npub(super) struct Lazy<T, F> {\n    state: AtomicU8,\n    create: Cell<Option<F>>,\n    data: Cell<MaybeUninit<T>>,\n}\nimpl<T, F: FnOnce() -> T> Lazy<T, F> {\n    pub(super) fn get(&self) -> &T {}\n    fn poll(&self) -> Option<&T> {\n        if self.state.load(Ordering::Acquire) == LAZY_STATE_DONE {\n            Some(unsafe { &*(*self.data.as_ptr()).as_ptr() })\n        } else {\n            None\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// If this lazy value has been initialized successfully, then return\n/// that value. Otherwise return None immediately. This never attempts\n/// to run initialization itself.\n195 fn poll(&self) -> Option<&T> {\n196     let ptr = self.data.load(Ordering::Acquire);\n197     if ptr.is_null() {\n198         return None;\n199     }\n200     // SAFETY: We just checked that the pointer is not null. Since it's\n201     // not null, it must have been fully initialized by 'get' at some\n202     // point.\n203     Some(unsafe { &*ptr })\n204 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}