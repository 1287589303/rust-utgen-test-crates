{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/string.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{Error, RegexSetBuilder};\n#[derive(Clone, Debug)]\npub struct SetMatches(PatternSet);\nimpl SetMatches {\n    #[inline]\n    pub fn matched_any(&self) -> bool {}\n    pub fn matched_all(&self) -> bool {}\n    #[inline]\n    pub fn matched(&self, index: usize) -> bool {\n        self.0.contains(PatternID::new_unchecked(index))\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn iter(&self) -> SetMatchesIter<'_> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether the regex at the given index matched.\n///\n/// The index for a regex is determined by its insertion order upon the\n/// initial construction of a `RegexSet`, starting at `0`.\n///\n/// # Panics\n///\n/// If `index` is greater than or equal to the number of regexes in the\n/// original set that produced these matches. Equivalently, when `index`\n/// is greater than or equal to [`SetMatches::len`].\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n///     r\"[a-z]+\\.(com|org|net)\",\n/// ]).unwrap();\n/// let matches = set.matches(\"example.com\");\n/// assert!(!matches.matched(0));\n/// assert!(matches.matched(1));\n/// ```\n524 pub fn matched(&self, index: usize) -> bool {\n525     self.0.contains(PatternID::new_unchecked(index))\n526 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}