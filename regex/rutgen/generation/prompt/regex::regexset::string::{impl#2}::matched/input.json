{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/string.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{Error, RegexSetBuilder};\n#[derive(Clone, Debug)]\npub struct SetMatches(PatternSet);\nimpl SetMatches {\n    #[inline]\n    pub fn matched_any(&self) -> bool {}\n    pub fn matched_all(&self) -> bool {}\n    #[inline]\n    pub fn matched(&self, index: usize) -> bool {\n        self.0.contains(PatternID::new_unchecked(index))\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn iter(&self) -> SetMatchesIter<'_> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether the regex at the given index matched.\n///\n/// The index for a regex is determined by its insertion order upon the\n/// initial construction of a `RegexSet`, starting at `0`.\n///\n/// # Panics\n///\n/// If `index` is greater than or equal to the number of regexes in the\n/// original set that produced these matches. Equivalently, when `index`\n/// is greater than or equal to [`SetMatches::len`].\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n///     r\"[a-z]+\\.(com|org|net)\",\n/// ]).unwrap();\n/// let matches = set.matches(\"example.com\");\n/// assert!(!matches.matched(0));\n/// assert!(matches.matched(1));\n/// ```\n524 pub fn matched(&self, index: usize) -> bool {\n525     self.0.contains(PatternID::new_unchecked(index))\n526 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}