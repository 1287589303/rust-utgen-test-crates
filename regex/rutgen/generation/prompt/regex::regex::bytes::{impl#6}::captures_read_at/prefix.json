{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone, Debug)]\npub struct CaptureLocations(captures::Captures);\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h [u8],\n    start: usize,\n    end: usize,\n}\nimpl Regex {\n    #[inline]\n    pub fn shortest_match(&self, haystack: &[u8]) -> Option<usize> {}\n    #[inline]\n    pub fn shortest_match_at(&self, haystack: &[u8], start: usize) -> Option<usize> {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &[u8], start: usize) -> bool {}\n    #[inline]\n    pub fn find_at<'h>(&self, haystack: &'h [u8], start: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_at<'h>(\n        &self,\n        haystack: &'h [u8],\n        start: usize,\n    ) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_read<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h [u8],\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_read_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h [u8],\n        start: usize,\n    ) -> Option<Match<'h>> {\n        let input = Input::new(haystack).span(start..haystack.len());\n        self.meta.search_captures(&input, &mut locs.0);\n        locs.0.get_match().map(|m| Match::new(haystack, m.start(), m.end()))\n    }\n    #[inline]\n    pub fn read_captures_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h [u8],\n        start: usize,\n    ) -> Option<Match<'h>> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the same as [`Regex::captures_read`], but starts the search at\n/// the given offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = b\"eschew\";\n/// let mut locs = re.capture_locations();\n/// // We get a match here, but it's probably not intended.\n/// assert!(re.captures_read(&mut locs, &hay[2..]).is_some());\n/// // No match because the  assertions take the context into account.\n/// assert!(re.captures_read_at(&mut locs, hay, 2).is_none());\n/// ```\n1235 pub fn captures_read_at<'h>(\n1236     &self,\n1237     locs: &mut CaptureLocations,\n1238     haystack: &'h [u8],\n1239     start: usize,\n1240 ) -> Option<Match<'h>> {\n1241     let input = Input::new(haystack).span(start..haystack.len());\n1242     self.meta.search_captures(&input, &mut locs.0);\n1243     locs.0.get_match().map(|m| Match::new(haystack, m.start(), m.end()))\n1244 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}