{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/mod.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\n#[cfg(feature = \"alloc\")]\nuse alloc::sync::Arc;\n#[cfg(feature = \"syntax\")]\nuse regex_syntax::hir::{literal, Hir};\nuse crate::util::search::{MatchKind, Span};\npub(crate) use crate::util::prefilter::{\n    aho_corasick::AhoCorasick, byteset::ByteSet, memchr::{Memchr, Memchr2, Memchr3},\n    memmem::Memmem, teddy::Teddy,\n};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\nimpl Prefilter {\n    pub fn new<B: AsRef<[u8]>>(kind: MatchKind, needles: &[B]) -> Option<Prefilter> {}\n    fn from_choice(choice: Choice, max_needle_len: usize) -> Option<Prefilter> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn from_hir_prefix(kind: MatchKind, hir: &Hir) -> Option<Prefilter> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn from_hirs_prefix<H: Borrow<Hir>>(\n        kind: MatchKind,\n        hirs: &[H],\n    ) -> Option<Prefilter> {}\n    #[inline]\n    pub fn find(&self, haystack: &[u8], span: Span) -> Option<Span> {}\n    #[inline]\n    pub fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span> {\n        #[cfg(not(feature = \"alloc\"))] { unreachable!() }\n        #[cfg(feature = \"alloc\")] { self.pre.prefix(haystack, span) }\n    }\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n    #[inline]\n    pub fn max_needle_len(&self) -> usize {}\n    #[inline]\n    pub fn is_fast(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the span of a prefix of `haystack[span.start..span.end]` if\n/// the prefilter matches.\n///\n/// The span returned is guaranteed to have a start position equivalent to\n/// the one given, and an end position less than or equal to the one given.\n///\n/// # Example\n///\n/// This example shows how to build a prefilter directly from an [`Hir`]\n/// expression, and use it to find an occurrence of a prefix from the regex\n/// pattern that begins at the start of a haystack only.\n///\n/// ```\n/// use regex_automata::{\n///     util::{prefilter::Prefilter, syntax},\n///     MatchKind, Span,\n/// };\n///\n/// let hir = syntax::parse(r\"Bruce \\w+\")?;\n/// let pre = Prefilter::from_hir_prefix(MatchKind::LeftmostFirst, &hir)\n///     .expect(\"a prefilter\");\n/// let hay = \"Hello Bruce Springsteen!\";\n/// // Nothing is found here because 'Bruce' does\n/// // not occur at the beginning of our search.\n/// assert_eq!(\n///     None,\n///     pre.prefix(hay.as_bytes(), Span::from(0..hay.len())),\n/// );\n/// // But if we change where we start the search\n/// // to begin where 'Bruce ' begins, then a\n/// // match will be found.\n/// assert_eq!(\n///     Some(Span::from(6..12)),\n///     pre.prefix(hay.as_bytes(), Span::from(6..hay.len())),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n399 pub fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span> {\n400     #[cfg(not(feature = \"alloc\"))]\n401     {\n402         unreachable!()\n403     }\n404     #[cfg(feature = \"alloc\")]\n405     {\n406         self.pre.prefix(haystack, span)\n407     }\n408 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}