{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/pikevm.rs\n// crate name is regex_lite\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    int::{NonMaxUsize, U32},\n    nfa::{State, StateID, NFA},\n    pool::CachePoolGuard, utf8,\n};\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n}\n#[derive(Clone)]\nstruct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\nimpl SparseSet {\n    fn new(capacity: usize) -> SparseSet {}\n    fn resize(&mut self, new_capacity: usize) {}\n    fn capacity(&self) -> usize {\n        self.dense.len()\n    }\n    fn len(&self) -> usize {\n        self.len\n    }\n    fn is_empty(&self) -> bool {}\n    fn insert(&mut self, id: StateID) -> bool {\n        if self.contains(id) {\n            return false;\n        }\n        let index = self.len();\n        assert!(\n            index < self.capacity(), \"{:?} exceeds capacity of {:?} when inserting {:?}\",\n            index, self.capacity(), id,\n        );\n        self.dense[index] = id;\n        self.sparse[id.as_usize()] = u32::try_from(index).unwrap();\n        self.len += 1;\n        true\n    }\n    fn contains(&self, id: StateID) -> bool {\n        let index = self.sparse[id.as_usize()];\n        index.as_usize() < self.len() && self.dense[index.as_usize()] == id\n    }\n    fn clear(&mut self) {}\n    fn iter(&self) -> SparseSetIter<'_> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Insert the state ID value into this set and return true if the given\n/// state ID was not previously in this set.\n///\n/// This operation is idempotent. If the given value is already in this\n/// set, then this is a no-op.\n///\n/// If more than `capacity` ids are inserted, then this panics.\n858 fn insert(&mut self, id: StateID) -> bool {\n859     if self.contains(id) {\n860         return false;\n861     }\n862 \n863     let index = self.len();\n864     assert!(\n865         index < self.capacity(),\n866         \"{:?} exceeds capacity of {:?} when inserting {:?}\",\n867         index,\n868         self.capacity(),\n869         id,\n870     );\n871     self.dense[index] = id;\n872     // OK because we don't permit the capacity to be set higher than\n873     // u32::MAX.\n874     self.sparse[id.as_usize()] = u32::try_from(index).unwrap();\n875     self.len += 1;\n876     true\n877 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}