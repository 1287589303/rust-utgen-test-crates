{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self) {}\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Clone, Debug)]\nstruct TranslatorI<'t, 'p> {\n    trans: &'t Translator,\n    pattern: &'p str,\n}\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    crlf: Option<bool>,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Repetition {\n    /// The span of this operation.\n    pub span: Span,\n    /// The actual operation.\n    pub op: RepetitionOp,\n    /// Whether this operation was applied greedily or not.\n    pub greedy: bool,\n    /// The regular expression under repetition.\n    pub ast: Box<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the translator's Ast was parsed from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error, derived from the Ast given to the translator.\n    span: Span,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassBracketed {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not. e.g., `[a]` is not negated but\n    /// `[^a]` is.\n    pub negated: bool,\n    /// The type of this set. A set is either a normal union of things, e.g.,\n    /// `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n    pub kind: ClassSet,\n}\n#[derive(Clone, Debug)]\npub struct Translator {\n    /// Our call stack, but on the heap.\n    stack: RefCell<Vec<HirFrame>>,\n    /// The current flag settings.\n    flags: Cell<Flags>,\n    /// Whether we're allowed to produce HIR that can match arbitrary bytes.\n    utf8: bool,\n    /// The line terminator to use for `.`.\n    line_terminator: u8,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct SetFlags {\n    /// The span of these flags, including the grouping parentheses.\n    pub span: Span,\n    /// The actual sequence of flags.\n    pub flags: Flags,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassBytes {\n    set: IntervalSet<ClassBytesRange>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Group {\n    /// The span of this group.\n    pub span: Span,\n    /// The kind of this group.\n    pub kind: GroupKind,\n    /// The regular expression in this group.\n    pub ast: Box<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassPerl {\n    /// The span of this class.\n    pub span: Span,\n    /// The kind of Perl class.\n    pub kind: ClassPerlKind,\n    /// Whether the class is negated or not. e.g., `\\d` is not negated but\n    /// `\\D` is.\n    pub negated: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Flags {\n    /// The span of this group of flags.\n    pub span: Span,\n    /// A sequence of flag items. Each item is either a flag or a negation\n    /// operator.\n    pub items: Vec<FlagsItem>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Assertion {\n    /// The span of this assertion.\n    pub span: Span,\n    /// The assertion kind, e.g., `\\b` or `^`.\n    pub kind: AssertionKind,\n}\n#[derive(Clone, Debug)]\nenum HirFrame {\n    /// An arbitrary HIR expression. These get pushed whenever we hit a base\n    /// case in the Ast. They get popped after an inductive (i.e., recursive)\n    /// step is complete.\n    Expr(Hir),\n    /// A literal that is being constructed, character by character, from the\n    /// AST. We need this because the AST gives each individual character its\n    /// own node. So as we see characters, we peek at the top-most HirFrame.\n    /// If it's a literal, then we add to it. Otherwise, we push a new literal.\n    /// When it comes time to pop it, we convert it to an Hir via Hir::literal.\n    Literal(Vec<u8>),\n    /// A Unicode character class. This frame is mutated as we descend into\n    /// the Ast of a character class (which is itself its own mini recursive\n    /// structure).\n    ClassUnicode(hir::ClassUnicode),\n    /// A byte-oriented character class. This frame is mutated as we descend\n    /// into the Ast of a character class (which is itself its own mini\n    /// recursive structure).\n    ///\n    /// Byte character classes are created when Unicode mode (`u`) is disabled.\n    /// If `utf8` is enabled (the default), then a byte character is only\n    /// permitted to match ASCII text.\n    ClassBytes(hir::ClassBytes),\n    /// This is pushed whenever a repetition is observed. After visiting every\n    /// sub-expression in the repetition, the translator's stack is expected to\n    /// have this sentinel at the top.\n    ///\n    /// This sentinel only exists to stop other things (like flattening\n    /// literals) from reaching across repetition operators.\n    Repetition,\n    /// This is pushed on to the stack upon first seeing any kind of capture,\n    /// indicated by parentheses (including non-capturing groups). It is popped\n    /// upon leaving a group.\n    Group {\n        /// The old active flags when this group was opened.\n        ///\n        /// If this group sets flags, then the new active flags are set to the\n        /// result of merging the old flags with the flags introduced by this\n        /// group. If the group doesn't set any flags, then this is simply\n        /// equivalent to whatever flags were set when the group was opened.\n        ///\n        /// When this group is popped, the active flags should be restored to\n        /// the flags set here.\n        ///\n        /// The \"active\" flags correspond to whatever flags are set in the\n        /// Translator.\n        old_flags: Flags,\n    },\n    /// This is pushed whenever a concatenation is observed. After visiting\n    /// every sub-expression in the concatenation, the translator's stack is\n    /// popped until it sees a Concat frame.\n    Concat,\n    /// This is pushed whenever an alternation is observed. After visiting\n    /// every sub-expression in the alternation, the translator's stack is\n    /// popped until it sees an Alternation frame.\n    Alternation,\n    /// This is pushed immediately before each sub-expression in an\n    /// alternation. This separates the branches of an alternation on the\n    /// stack and prevents literal flattening from reaching across alternation\n    /// branches.\n    ///\n    /// It is popped after each expression in a branch until an 'Alternation'\n    /// frame is observed when doing a post visit on an alternation.\n    AlternationBranch,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Error {\n    /// An error that occurred while translating concrete syntax into abstract\n    /// syntax (AST).\n    Parse(ast::Error),\n    /// An error that occurred while translating abstract syntax into a high\n    /// level intermediate representation (HIR).\n    Translate(hir::Error),\n}\n#[derive(Clone, Eq, PartialEq)]\npub enum Class {\n    /// A set of characters represented by Unicode scalar values.\n    Unicode(ClassUnicode),\n    /// A set of characters represented by arbitrary bytes (one byte per\n    /// character).\n    Bytes(ClassBytes),\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Either<Left, Right> {\n    Left(Left),\n    Right(Right),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Box<Span>),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(Box<SetFlags>),\n    /// A single character literal, which includes escape sequences.\n    Literal(Box<Literal>),\n    /// The \"any character\" class.\n    Dot(Box<Span>),\n    /// A single zero-width assertion.\n    Assertion(Box<Assertion>),\n    /// A single Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    ClassUnicode(Box<ClassUnicode>),\n    /// A single perl character class, e.g., `\\d` or `\\W`.\n    ClassPerl(Box<ClassPerl>),\n    /// A single bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    ClassBracketed(Box<ClassBracketed>),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Box<Repetition>),\n    /// A grouped regular expression.\n    Group(Box<Group>),\n    /// An alternation of regular expressions.\n    Alternation(Box<Alternation>),\n    /// A concatenation of regular expressions.\n    Concat(Box<Concat>),\n}\nimpl<'t, 'p> Visitor for TranslatorI<'t, 'p> {\n    type Output = Hir;\n    type Err = Error;\n    fn finish(self) -> Result<Hir> {}\n    fn visit_pre(&mut self, ast: &Ast) -> Result<()> {}\n    fn visit_post(&mut self, ast: &Ast) -> Result<()> {\n        match *ast {\n            Ast::Empty(_) => {\n                self.push(HirFrame::Expr(Hir::empty()));\n            }\n            Ast::Flags(ref x) => {\n                self.set_flags(&x.flags);\n                self.push(HirFrame::Expr(Hir::empty()));\n            }\n            Ast::Literal(ref x) => {\n                match self.ast_literal_to_scalar(x)? {\n                    Either::Right(byte) => self.push_byte(byte),\n                    Either::Left(ch) => {\n                        match self.case_fold_char(x.span, ch)? {\n                            None => self.push_char(ch),\n                            Some(expr) => self.push(HirFrame::Expr(expr)),\n                        }\n                    }\n                }\n            }\n            Ast::Dot(ref span) => {\n                self.push(HirFrame::Expr(self.hir_dot(**span)?));\n            }\n            Ast::Assertion(ref x) => {\n                self.push(HirFrame::Expr(self.hir_assertion(x)?));\n            }\n            Ast::ClassPerl(ref x) => {\n                if self.flags().unicode() {\n                    let cls = self.hir_perl_unicode_class(x)?;\n                    let hcls = hir::Class::Unicode(cls);\n                    self.push(HirFrame::Expr(Hir::class(hcls)));\n                } else {\n                    let cls = self.hir_perl_byte_class(x)?;\n                    let hcls = hir::Class::Bytes(cls);\n                    self.push(HirFrame::Expr(Hir::class(hcls)));\n                }\n            }\n            Ast::ClassUnicode(ref x) => {\n                let cls = hir::Class::Unicode(self.hir_unicode_class(x)?);\n                self.push(HirFrame::Expr(Hir::class(cls)));\n            }\n            Ast::ClassBracketed(ref ast) => {\n                if self.flags().unicode() {\n                    let mut cls = self.pop().unwrap().unwrap_class_unicode();\n                    self.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls)?;\n                    let expr = Hir::class(hir::Class::Unicode(cls));\n                    self.push(HirFrame::Expr(expr));\n                } else {\n                    let mut cls = self.pop().unwrap().unwrap_class_bytes();\n                    self.bytes_fold_and_negate(&ast.span, ast.negated, &mut cls)?;\n                    let expr = Hir::class(hir::Class::Bytes(cls));\n                    self.push(HirFrame::Expr(expr));\n                }\n            }\n            Ast::Repetition(ref x) => {\n                let expr = self.pop().unwrap().unwrap_expr();\n                self.pop().unwrap().unwrap_repetition();\n                self.push(HirFrame::Expr(self.hir_repetition(x, expr)));\n            }\n            Ast::Group(ref x) => {\n                let expr = self.pop().unwrap().unwrap_expr();\n                let old_flags = self.pop().unwrap().unwrap_group();\n                self.trans().flags.set(old_flags);\n                self.push(HirFrame::Expr(self.hir_capture(x, expr)));\n            }\n            Ast::Concat(_) => {\n                let mut exprs = vec![];\n                while let Some(expr) = self.pop_concat_expr() {\n                    if !matches!(* expr.kind(), HirKind::Empty) {\n                        exprs.push(expr);\n                    }\n                }\n                exprs.reverse();\n                self.push(HirFrame::Expr(Hir::concat(exprs)));\n            }\n            Ast::Alternation(_) => {\n                let mut exprs = vec![];\n                while let Some(expr) = self.pop_alt_expr() {\n                    self.pop().unwrap().unwrap_alternation_pipe();\n                    exprs.push(expr);\n                }\n                exprs.reverse();\n                self.push(HirFrame::Expr(Hir::alternation(exprs)));\n            }\n        }\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<()> {}\n    fn visit_class_set_item_pre(&mut self, ast: &ast::ClassSetItem) -> Result<()> {}\n    fn visit_class_set_item_post(&mut self, ast: &ast::ClassSetItem) -> Result<()> {}\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _op: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {}\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _op: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {}\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        op: &ast::ClassSetBinaryOp,\n    ) -> Result<()> {}\n}\nimpl<'t, 'p> TranslatorI<'t, 'p> {\n    fn new(trans: &'t Translator, pattern: &'p str) -> TranslatorI<'t, 'p> {}\n    fn trans(&self) -> &Translator {\n        &self.trans\n    }\n    fn push(&self, frame: HirFrame) {\n        self.trans().stack.borrow_mut().push(frame);\n    }\n    fn push_char(&self, ch: char) {\n        let mut buf = [0; 4];\n        let bytes = ch.encode_utf8(&mut buf).as_bytes();\n        let mut stack = self.trans().stack.borrow_mut();\n        if let Some(HirFrame::Literal(ref mut literal)) = stack.last_mut() {\n            literal.extend_from_slice(bytes);\n        } else {\n            stack.push(HirFrame::Literal(bytes.to_vec()));\n        }\n    }\n    fn push_byte(&self, byte: u8) {\n        let mut stack = self.trans().stack.borrow_mut();\n        if let Some(HirFrame::Literal(ref mut literal)) = stack.last_mut() {\n            literal.push(byte);\n        } else {\n            stack.push(HirFrame::Literal(vec![byte]));\n        }\n    }\n    fn pop(&self) -> Option<HirFrame> {\n        self.trans().stack.borrow_mut().pop()\n    }\n    fn pop_concat_expr(&self) -> Option<Hir> {\n        let frame = self.pop()?;\n        match frame {\n            HirFrame::Concat => None,\n            HirFrame::Expr(expr) => Some(expr),\n            HirFrame::Literal(lit) => Some(Hir::literal(lit)),\n            HirFrame::ClassUnicode(_) => {\n                unreachable!(\"expected expr or concat, got Unicode class\")\n            }\n            HirFrame::ClassBytes(_) => {\n                unreachable!(\"expected expr or concat, got byte class\")\n            }\n            HirFrame::Repetition => {\n                unreachable!(\"expected expr or concat, got repetition\")\n            }\n            HirFrame::Group { .. } => unreachable!(\"expected expr or concat, got group\"),\n            HirFrame::Alternation => {\n                unreachable!(\"expected expr or concat, got alt marker\")\n            }\n            HirFrame::AlternationBranch => {\n                unreachable!(\"expected expr or concat, got alt branch marker\")\n            }\n        }\n    }\n    fn pop_alt_expr(&self) -> Option<Hir> {\n        let frame = self.pop()?;\n        match frame {\n            HirFrame::Alternation => None,\n            HirFrame::Expr(expr) => Some(expr),\n            HirFrame::Literal(lit) => Some(Hir::literal(lit)),\n            HirFrame::ClassUnicode(_) => {\n                unreachable!(\"expected expr or alt, got Unicode class\")\n            }\n            HirFrame::ClassBytes(_) => {\n                unreachable!(\"expected expr or alt, got byte class\")\n            }\n            HirFrame::Repetition => unreachable!(\"expected expr or alt, got repetition\"),\n            HirFrame::Group { .. } => unreachable!(\"expected expr or alt, got group\"),\n            HirFrame::Concat => unreachable!(\"expected expr or alt, got concat marker\"),\n            HirFrame::AlternationBranch => {\n                unreachable!(\"expected expr or alt, got alt branch marker\")\n            }\n        }\n    }\n    fn error(&self, span: Span, kind: ErrorKind) -> Error {}\n    fn flags(&self) -> Flags {\n        self.trans().flags.get()\n    }\n    fn set_flags(&self, ast_flags: &ast::Flags) -> Flags {\n        let old_flags = self.flags();\n        let mut new_flags = Flags::from_ast(ast_flags);\n        new_flags.merge(&old_flags);\n        self.trans().flags.set(new_flags);\n        old_flags\n    }\n    fn ast_literal_to_scalar(&self, lit: &ast::Literal) -> Result<Either<char, u8>> {\n        if self.flags().unicode() {\n            return Ok(Either::Left(lit.c));\n        }\n        let byte = match lit.byte() {\n            None => return Ok(Either::Left(lit.c)),\n            Some(byte) => byte,\n        };\n        if byte <= 0x7F {\n            return Ok(Either::Left(char::try_from(byte).unwrap()));\n        }\n        if self.trans().utf8 {\n            return Err(self.error(lit.span, ErrorKind::InvalidUtf8));\n        }\n        Ok(Either::Right(byte))\n    }\n    fn case_fold_char(&self, span: Span, c: char) -> Result<Option<Hir>> {\n        if !self.flags().case_insensitive() {\n            return Ok(None);\n        }\n        if self.flags().unicode() {\n            let map = unicode::SimpleCaseFolder::new()\n                .map(|f| f.overlaps(c, c))\n                .map_err(|_| { self.error(span, ErrorKind::UnicodeCaseUnavailable) })?;\n            if !map {\n                return Ok(None);\n            }\n            let mut cls = hir::ClassUnicode::new(\n                vec![hir::ClassUnicodeRange::new(c, c,)],\n            );\n            cls.try_case_fold_simple()\n                .map_err(|_| { self.error(span, ErrorKind::UnicodeCaseUnavailable) })?;\n            Ok(Some(Hir::class(hir::Class::Unicode(cls))))\n        } else {\n            if !c.is_ascii() {\n                return Ok(None);\n            }\n            match c {\n                'A'..='Z' | 'a'..='z' => {}\n                _ => return Ok(None),\n            }\n            let mut cls = hir::ClassBytes::new(\n                vec![\n                    hir::ClassBytesRange::new(u8::try_from(c).unwrap(), u8::try_from(c)\n                    .unwrap(),)\n                ],\n            );\n            cls.case_fold_simple();\n            Ok(Some(Hir::class(hir::Class::Bytes(cls))))\n        }\n    }\n    fn hir_dot(&self, span: Span) -> Result<Hir> {\n        let (utf8, lineterm, flags) = (\n            self.trans().utf8,\n            self.trans().line_terminator,\n            self.flags(),\n        );\n        if utf8 && (!flags.unicode() || !lineterm.is_ascii()) {\n            return Err(self.error(span, ErrorKind::InvalidUtf8));\n        }\n        let dot = if flags.dot_matches_new_line() {\n            if flags.unicode() { hir::Dot::AnyChar } else { hir::Dot::AnyByte }\n        } else {\n            if flags.unicode() {\n                if flags.crlf() {\n                    hir::Dot::AnyCharExceptCRLF\n                } else {\n                    if !lineterm.is_ascii() {\n                        return Err(self.error(span, ErrorKind::InvalidLineTerminator));\n                    }\n                    hir::Dot::AnyCharExcept(char::from(lineterm))\n                }\n            } else {\n                if flags.crlf() {\n                    hir::Dot::AnyByteExceptCRLF\n                } else {\n                    hir::Dot::AnyByteExcept(lineterm)\n                }\n            }\n        };\n        Ok(Hir::dot(dot))\n    }\n    fn hir_assertion(&self, asst: &ast::Assertion) -> Result<Hir> {\n        let unicode = self.flags().unicode();\n        let multi_line = self.flags().multi_line();\n        let crlf = self.flags().crlf();\n        Ok(\n            match asst.kind {\n                ast::AssertionKind::StartLine => {\n                    Hir::look(\n                        if multi_line {\n                            if crlf { hir::Look::StartCRLF } else { hir::Look::StartLF }\n                        } else {\n                            hir::Look::Start\n                        },\n                    )\n                }\n                ast::AssertionKind::EndLine => {\n                    Hir::look(\n                        if multi_line {\n                            if crlf { hir::Look::EndCRLF } else { hir::Look::EndLF }\n                        } else {\n                            hir::Look::End\n                        },\n                    )\n                }\n                ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n                ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n                ast::AssertionKind::WordBoundary => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordUnicode\n                        } else {\n                            hir::Look::WordAscii\n                        },\n                    )\n                }\n                ast::AssertionKind::NotWordBoundary => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordUnicodeNegate\n                        } else {\n                            hir::Look::WordAsciiNegate\n                        },\n                    )\n                }\n                ast::AssertionKind::WordBoundaryStart\n                | ast::AssertionKind::WordBoundaryStartAngle => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordStartUnicode\n                        } else {\n                            hir::Look::WordStartAscii\n                        },\n                    )\n                }\n                ast::AssertionKind::WordBoundaryEnd\n                | ast::AssertionKind::WordBoundaryEndAngle => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordEndUnicode\n                        } else {\n                            hir::Look::WordEndAscii\n                        },\n                    )\n                }\n                ast::AssertionKind::WordBoundaryStartHalf => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordStartHalfUnicode\n                        } else {\n                            hir::Look::WordStartHalfAscii\n                        },\n                    )\n                }\n                ast::AssertionKind::WordBoundaryEndHalf => {\n                    Hir::look(\n                        if unicode {\n                            hir::Look::WordEndHalfUnicode\n                        } else {\n                            hir::Look::WordEndHalfAscii\n                        },\n                    )\n                }\n            },\n        )\n    }\n    fn hir_capture(&self, group: &ast::Group, expr: Hir) -> Hir {\n        let (index, name) = match group.kind {\n            ast::GroupKind::CaptureIndex(index) => (index, None),\n            ast::GroupKind::CaptureName { ref name, .. } => {\n                (name.index, Some(name.name.clone().into_boxed_str()))\n            }\n            ast::GroupKind::NonCapturing(_) => return expr,\n        };\n        Hir::capture(hir::Capture {\n            index,\n            name,\n            sub: Box::new(expr),\n        })\n    }\n    fn hir_repetition(&self, rep: &ast::Repetition, expr: Hir) -> Hir {\n        let (min, max) = match rep.op.kind {\n            ast::RepetitionKind::ZeroOrOne => (0, Some(1)),\n            ast::RepetitionKind::ZeroOrMore => (0, None),\n            ast::RepetitionKind::OneOrMore => (1, None),\n            ast::RepetitionKind::Range(ast::RepetitionRange::Exactly(m)) => (m, Some(m)),\n            ast::RepetitionKind::Range(ast::RepetitionRange::AtLeast(m)) => (m, None),\n            ast::RepetitionKind::Range(ast::RepetitionRange::Bounded(m, n)) => {\n                (m, Some(n))\n            }\n        };\n        let greedy = if self.flags().swap_greed() { !rep.greedy } else { rep.greedy };\n        Hir::repetition(hir::Repetition {\n            min,\n            max,\n            greedy,\n            sub: Box::new(expr),\n        })\n    }\n    fn hir_unicode_class(\n        &self,\n        ast_class: &ast::ClassUnicode,\n    ) -> Result<hir::ClassUnicode> {\n        use crate::ast::ClassUnicodeKind::*;\n        if !self.flags().unicode() {\n            return Err(self.error(ast_class.span, ErrorKind::UnicodeNotAllowed));\n        }\n        let query = match ast_class.kind {\n            OneLetter(name) => ClassQuery::OneLetter(name),\n            Named(ref name) => ClassQuery::Binary(name),\n            NamedValue { ref name, ref value, .. } => {\n                ClassQuery::ByValue {\n                    property_name: name,\n                    property_value: value,\n                }\n            }\n        };\n        let mut result = self\n            .convert_unicode_class_error(&ast_class.span, unicode::class(query));\n        if let Ok(ref mut class) = result {\n            self.unicode_fold_and_negate(&ast_class.span, ast_class.negated, class)?;\n        }\n        result\n    }\n    fn hir_ascii_unicode_class(\n        &self,\n        ast: &ast::ClassAscii,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_ascii_byte_class(&self, ast: &ast::ClassAscii) -> Result<hir::ClassBytes> {}\n    fn hir_perl_unicode_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassUnicode> {\n        use crate::ast::ClassPerlKind::*;\n        assert!(self.flags().unicode());\n        let result = match ast_class.kind {\n            Digit => unicode::perl_digit(),\n            Space => unicode::perl_space(),\n            Word => unicode::perl_word(),\n        };\n        let mut class = self.convert_unicode_class_error(&ast_class.span, result)?;\n        if ast_class.negated {\n            class.negate();\n        }\n        Ok(class)\n    }\n    fn hir_perl_byte_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassBytes> {\n        use crate::ast::ClassPerlKind::*;\n        assert!(! self.flags().unicode());\n        let mut class = match ast_class.kind {\n            Digit => hir_ascii_class_bytes(&ast::ClassAsciiKind::Digit),\n            Space => hir_ascii_class_bytes(&ast::ClassAsciiKind::Space),\n            Word => hir_ascii_class_bytes(&ast::ClassAsciiKind::Word),\n        };\n        if ast_class.negated {\n            class.negate();\n        }\n        if self.trans().utf8 && !class.is_ascii() {\n            return Err(self.error(ast_class.span, ErrorKind::InvalidUtf8));\n        }\n        Ok(class)\n    }\n    fn convert_unicode_class_error(\n        &self,\n        span: &Span,\n        result: core::result::Result<hir::ClassUnicode, unicode::Error>,\n    ) -> Result<hir::ClassUnicode> {}\n    fn unicode_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassUnicode,\n    ) -> Result<()> {\n        if self.flags().case_insensitive() {\n            class\n                .try_case_fold_simple()\n                .map_err(|_| {\n                    self.error(span.clone(), ErrorKind::UnicodeCaseUnavailable)\n                })?;\n        }\n        if negated {\n            class.negate();\n        }\n        Ok(())\n    }\n    fn bytes_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassBytes,\n    ) -> Result<()> {\n        if self.flags().case_insensitive() {\n            class.case_fold_simple();\n        }\n        if negated {\n            class.negate();\n        }\n        if self.trans().utf8 && !class.is_ascii() {\n            return Err(self.error(span.clone(), ErrorKind::InvalidUtf8));\n        }\n        Ok(())\n    }\n    fn class_literal_byte(&self, ast: &ast::Literal) -> Result<u8> {}\n}\nimpl Flags {\n    fn from_ast(ast: &ast::Flags) -> Flags {}\n    fn merge(&mut self, previous: &Flags) {}\n    fn case_insensitive(&self) -> bool {}\n    fn multi_line(&self) -> bool {}\n    fn dot_matches_new_line(&self) -> bool {}\n    fn swap_greed(&self) -> bool {}\n    fn unicode(&self) -> bool {\n        self.unicode.unwrap_or(true)\n    }\n    fn crlf(&self) -> bool {}\n}\nimpl HirFrame {\n    fn unwrap_expr(self) -> Hir {\n        match self {\n            HirFrame::Expr(expr) => expr,\n            HirFrame::Literal(lit) => Hir::literal(lit),\n            _ => panic!(\"tried to unwrap expr from HirFrame, got: {:?}\", self),\n        }\n    }\n    fn unwrap_class_unicode(self) -> hir::ClassUnicode {\n        match self {\n            HirFrame::ClassUnicode(cls) => cls,\n            _ => {\n                panic!(\n                    \"tried to unwrap Unicode class \\\n                 from HirFrame, got: {:?}\",\n                    self\n                )\n            }\n        }\n    }\n    fn unwrap_class_bytes(self) -> hir::ClassBytes {\n        match self {\n            HirFrame::ClassBytes(cls) => cls,\n            _ => {\n                panic!(\n                    \"tried to unwrap byte class \\\n                 from HirFrame, got: {:?}\",\n                    self\n                )\n            }\n        }\n    }\n    fn unwrap_repetition(self) {\n        match self {\n            HirFrame::Repetition => {}\n            _ => panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", self),\n        }\n    }\n    fn unwrap_group(self) -> Flags {\n        match self {\n            HirFrame::Group { old_flags } => old_flags,\n            _ => panic!(\"tried to unwrap group from HirFrame, got: {:?}\", self),\n        }\n    }\n    fn unwrap_alternation_pipe(self) {\n        match self {\n            HirFrame::AlternationBranch => {}\n            _ => panic!(\"tried to unwrap alt pipe from HirFrame, got: {:?}\", self),\n        }\n    }\n}\nimpl Hir {\n    #[inline]\n    pub fn empty() -> Hir {\n        let props = Properties::empty();\n        Hir { kind: HirKind::Empty, props }\n    }\n    #[inline]\n    pub fn fail() -> Hir {}\n    #[inline]\n    pub fn literal<B: Into<Box<[u8]>>>(lit: B) -> Hir {}\n    #[inline]\n    pub fn class(class: Class) -> Hir {\n        if class.is_empty() {\n            return Hir::fail();\n        } else if let Some(bytes) = class.literal() {\n            return Hir::literal(bytes);\n        }\n        let props = Properties::class(&class);\n        Hir {\n            kind: HirKind::Class(class),\n            props,\n        }\n    }\n    #[inline]\n    pub fn look(look: Look) -> Hir {}\n    #[inline]\n    pub fn repetition(mut rep: Repetition) -> Hir {}\n    #[inline]\n    pub fn capture(capture: Capture) -> Hir {}\n    pub fn concat(subs: Vec<Hir>) -> Hir {\n        let mut new = vec![];\n        let mut prior_lit: Option<Vec<u8>> = None;\n        for sub in subs {\n            let (kind, props) = sub.into_parts();\n            match kind {\n                HirKind::Literal(Literal(bytes)) => {\n                    if let Some(ref mut prior_bytes) = prior_lit {\n                        prior_bytes.extend_from_slice(&bytes);\n                    } else {\n                        prior_lit = Some(bytes.to_vec());\n                    }\n                }\n                HirKind::Concat(subs2) => {\n                    for sub2 in subs2 {\n                        let (kind2, props2) = sub2.into_parts();\n                        match kind2 {\n                            HirKind::Literal(Literal(bytes)) => {\n                                if let Some(ref mut prior_bytes) = prior_lit {\n                                    prior_bytes.extend_from_slice(&bytes);\n                                } else {\n                                    prior_lit = Some(bytes.to_vec());\n                                }\n                            }\n                            kind2 => {\n                                if let Some(prior_bytes) = prior_lit.take() {\n                                    new.push(Hir::literal(prior_bytes));\n                                }\n                                new.push(Hir { kind: kind2, props: props2 });\n                            }\n                        }\n                    }\n                }\n                HirKind::Empty => {}\n                kind => {\n                    if let Some(prior_bytes) = prior_lit.take() {\n                        new.push(Hir::literal(prior_bytes));\n                    }\n                    new.push(Hir { kind, props });\n                }\n            }\n        }\n        if let Some(prior_bytes) = prior_lit.take() {\n            new.push(Hir::literal(prior_bytes));\n        }\n        if new.is_empty() {\n            return Hir::empty();\n        } else if new.len() == 1 {\n            return new.pop().unwrap();\n        }\n        let props = Properties::concat(&new);\n        Hir {\n            kind: HirKind::Concat(new),\n            props,\n        }\n    }\n    pub fn alternation(subs: Vec<Hir>) -> Hir {\n        let mut new = Vec::with_capacity(subs.len());\n        for sub in subs {\n            let (kind, props) = sub.into_parts();\n            match kind {\n                HirKind::Alternation(subs2) => {\n                    new.extend(subs2);\n                }\n                kind => {\n                    new.push(Hir { kind, props });\n                }\n            }\n        }\n        if new.is_empty() {\n            return Hir::fail();\n        } else if new.len() == 1 {\n            return new.pop().unwrap();\n        }\n        if let Some(singletons) = singleton_chars(&new) {\n            let it = singletons\n                .into_iter()\n                .map(|ch| ClassUnicodeRange {\n                    start: ch,\n                    end: ch,\n                });\n            return Hir::class(Class::Unicode(ClassUnicode::new(it)));\n        }\n        if let Some(singletons) = singleton_bytes(&new) {\n            let it = singletons\n                .into_iter()\n                .map(|b| ClassBytesRange {\n                    start: b,\n                    end: b,\n                });\n            return Hir::class(Class::Bytes(ClassBytes::new(it)));\n        }\n        if let Some(cls) = class_chars(&new) {\n            return Hir::class(cls);\n        }\n        if let Some(cls) = class_bytes(&new) {\n            return Hir::class(cls);\n        }\n        new = match lift_common_prefix(new) {\n            Ok(hir) => return hir,\n            Err(unchanged) => unchanged,\n        };\n        let props = Properties::alternation(&new);\n        Hir {\n            kind: HirKind::Alternation(new),\n            props,\n        }\n    }\n    #[inline]\n    pub fn dot(dot: Dot) -> Hir {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n371 fn visit_post(&mut self, ast: &Ast) -> Result<()> {\n372     match *ast {\n373         Ast::Empty(_) => {\n374             self.push(HirFrame::Expr(Hir::empty()));\n375         }\n376         Ast::Flags(ref x) => {\n377             self.set_flags(&x.flags);\n378             // Flags in the AST are generally considered directives and\n379             // not actual sub-expressions. However, they can be used in\n380             // the concrete syntax like `((?i))`, and we need some kind of\n381             // indication of an expression there, and Empty is the correct\n382             // choice.\n383             //\n384             // There can also be things like `(?i)+`, but we rule those out\n385             // in the parser. In the future, we might allow them for\n386             // consistency sake.\n387             self.push(HirFrame::Expr(Hir::empty()));\n388         }\n389         Ast::Literal(ref x) => match self.ast_literal_to_scalar(x)? {\n390             Either::Right(byte) => self.push_byte(byte),\n391             Either::Left(ch) => match self.case_fold_char(x.span, ch)? {\n392                 None => self.push_char(ch),\n393                 Some(expr) => self.push(HirFrame::Expr(expr)),\n394             },\n395         },\n396         Ast::Dot(ref span) => {\n397             self.push(HirFrame::Expr(self.hir_dot(**span)?));\n398         }\n399         Ast::Assertion(ref x) => {\n400             self.push(HirFrame::Expr(self.hir_assertion(x)?));\n401         }\n402         Ast::ClassPerl(ref x) => {\n403             if self.flags().unicode() {\n404                 let cls = self.hir_perl_unicode_class(x)?;\n405                 let hcls = hir::Class::Unicode(cls);\n406                 self.push(HirFrame::Expr(Hir::class(hcls)));\n407             } else {\n408                 let cls = self.hir_perl_byte_class(x)?;\n409                 let hcls = hir::Class::Bytes(cls);\n410                 self.push(HirFrame::Expr(Hir::class(hcls)));\n411             }\n412         }\n413         Ast::ClassUnicode(ref x) => {\n414             let cls = hir::Class::Unicode(self.hir_unicode_class(x)?);\n415             self.push(HirFrame::Expr(Hir::class(cls)));\n416         }\n417         Ast::ClassBracketed(ref ast) => {\n418             if self.flags().unicode() {\n419                 let mut cls = self.pop().unwrap().unwrap_class_unicode();\n420                 self.unicode_fold_and_negate(\n421                     &ast.span,\n422                     ast.negated,\n423                     &mut cls,\n424                 )?;\n425                 let expr = Hir::class(hir::Class::Unicode(cls));\n426                 self.push(HirFrame::Expr(expr));\n427             } else {\n428                 let mut cls = self.pop().unwrap().unwrap_class_bytes();\n429                 self.bytes_fold_and_negate(\n430                     &ast.span,\n431                     ast.negated,\n432                     &mut cls,\n433                 )?;\n434                 let expr = Hir::class(hir::Class::Bytes(cls));\n435                 self.push(HirFrame::Expr(expr));\n436             }\n437         }\n438         Ast::Repetition(ref x) => {\n439             let expr = self.pop().unwrap().unwrap_expr();\n440             self.pop().unwrap().unwrap_repetition();\n441             self.push(HirFrame::Expr(self.hir_repetition(x, expr)));\n442         }\n443         Ast::Group(ref x) => {\n444             let expr = self.pop().unwrap().unwrap_expr();\n445             let old_flags = self.pop().unwrap().unwrap_group();\n446             self.trans().flags.set(old_flags);\n447             self.push(HirFrame::Expr(self.hir_capture(x, expr)));\n448         }\n449         Ast::Concat(_) => {\n450             let mut exprs = vec![];\n451             while let Some(expr) = self.pop_concat_expr() {\n452                 if !matches!(*expr.kind(), HirKind::Empty) {\n453                     exprs.push(expr);\n454                 }\n455             }\n456             exprs.reverse();\n457             self.push(HirFrame::Expr(Hir::concat(exprs)));\n458         }\n459         Ast::Alternation(_) => {\n460             let mut exprs = vec![];\n461             while let Some(expr) = self.pop_alt_expr() {\n462                 self.pop().unwrap().unwrap_alternation_pipe();\n463                 exprs.push(expr);\n464             }\n465             exprs.reverse();\n466             self.push(HirFrame::Expr(Hir::alternation(exprs)));\n467         }\n468     }\n469     Ok(())\n470 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}