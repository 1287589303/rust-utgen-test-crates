{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Utf8Range {\n    /// Start of byte range (inclusive).\n    pub start: u8,\n    /// End of byte range (inclusive).\n    pub end: u8,\n}\n#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord)]\npub enum Utf8Sequence {\n    /// One byte range.\n    One(Utf8Range),\n    /// Two successive byte ranges.\n    Two([Utf8Range; 2]),\n    /// Three successive byte ranges.\n    Three([Utf8Range; 3]),\n    /// Four successive byte ranges.\n    Four([Utf8Range; 4]),\n}\nimpl Utf8Sequence {\n    fn from_encoded_range(start: &[u8], end: &[u8]) -> Self {\n        assert_eq!(start.len(), end.len());\n        match start.len() {\n            2 => {\n                Utf8Sequence::Two([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                ])\n            }\n            3 => {\n                Utf8Sequence::Three([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                    Utf8Range::new(start[2], end[2]),\n                ])\n            }\n            4 => {\n                Utf8Sequence::Four([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                    Utf8Range::new(start[2], end[2]),\n                    Utf8Range::new(start[3], end[3]),\n                ])\n            }\n            n => unreachable!(\"invalid encoded length: {}\", n),\n        }\n    }\n    pub fn as_slice(&self) -> &[Utf8Range] {}\n    pub fn len(&self) -> usize {}\n    pub fn reverse(&mut self) {}\n    pub fn matches(&self, bytes: &[u8]) -> bool {}\n}\nimpl Utf8Range {\n    fn new(start: u8, end: u8) -> Self {\n        Utf8Range { start, end }\n    }\n    pub fn matches(&self, b: u8) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a new UTF-8 sequence from the encoded bytes of a scalar value\n/// range.\n///\n/// This assumes that `start` and `end` have the same length.\n113 fn from_encoded_range(start: &[u8], end: &[u8]) -> Self {\n114     assert_eq!(start.len(), end.len());\n115     match start.len() {\n116         2 => Utf8Sequence::Two([\n117             Utf8Range::new(start[0], end[0]),\n118             Utf8Range::new(start[1], end[1]),\n119         ]),\n120         3 => Utf8Sequence::Three([\n121             Utf8Range::new(start[0], end[0]),\n122             Utf8Range::new(start[1], end[1]),\n123             Utf8Range::new(start[2], end[2]),\n124         ]),\n125         4 => Utf8Sequence::Four([\n126             Utf8Range::new(start[0], end[0]),\n127             Utf8Range::new(start[1], end[1]),\n128             Utf8Range::new(start[2], end[2]),\n129             Utf8Range::new(start[3], end[3]),\n130         ]),\n131         n => unreachable!(\"invalid encoded length: {}\", n),\n132     }\n133 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}