{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {\n        let len = self\n            .static_captures_len\n            .expect(\"number of capture groups can vary in a match\")\n            .checked_sub(1)\n            .expect(\"number of groups is always greater than zero\");\n        assert_eq!(N, len, \"asked for {} groups, but must ask for {}\", N, len);\n        self.caps.extract(self.haystack)\n    }\n    #[inline]\n    pub fn expand(&self, replacement: &str, dst: &mut String) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This is a convenience routine for extracting the substrings\n/// corresponding to matching capture groups.\n///\n/// This returns a tuple where the first element corresponds to the full\n/// substring of the haystack that matched the regex. The second element is\n/// an array of substrings, with each corresponding to the substring that\n/// matched for a particular capture group.\n///\n/// # Panics\n///\n/// This panics if the number of possible matching groups in this\n/// `Captures` value is not fixed to `N` in all circumstances.\n/// More precisely, this routine only works when `N` is equivalent to\n/// [`Regex::static_captures_len`].\n///\n/// Stated more plainly, if the number of matching capture groups in a\n/// regex can vary from match to match, then this function always panics.\n///\n/// For example, `(a)(b)|(c)` could produce two matching capture groups\n/// or one matching capture group for any given match. Therefore, one\n/// cannot use `extract` with such a pattern.\n///\n/// But a pattern like `(a)(b)|(c)(d)` can be used with `extract` because\n/// the number of capture groups in every match is always equivalent,\n/// even if the capture _indices_ in each match are not.\n///\n/// # Example\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\n/// let hay = \"On 2010-03-14, I became a Tenneessee lamb.\";\n/// let Some((full, [year, month, day])) =\n///     re.captures(hay).map(|caps| caps.extract()) else { return };\n/// assert_eq!(\"2010-03-14\", full);\n/// assert_eq!(\"2010\", year);\n/// assert_eq!(\"03\", month);\n/// assert_eq!(\"14\", day);\n/// ```\n///\n/// # Example: iteration\n///\n/// This example shows how to use this method when iterating over all\n/// `Captures` matches in a haystack.\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\n/// let hay = \"1973-01-05, 1975-08-25 and 1980-10-18\";\n///\n/// let mut dates: Vec<(&str, &str, &str)> = vec![];\n/// for (_, [y, m, d]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     dates.push((y, m, d));\n/// }\n/// assert_eq!(dates, vec![\n///     (\"1973\", \"01\", \"05\"),\n///     (\"1975\", \"08\", \"25\"),\n///     (\"1980\", \"10\", \"18\"),\n/// ]);\n/// ```\n///\n/// # Example: parsing different formats\n///\n/// This API is particularly useful when you need to extract a particular\n/// value that might occur in a different format. Consider, for example,\n/// an identifier that might be in double quotes or single quotes:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r#\"id:(?:\"([^\"]+)\"|'([^']+)')\"#).unwrap();\n/// let hay = r#\"The first is id:\"foo\" and the second is id:'bar'.\"#;\n/// let mut ids = vec![];\n/// for (_, [id]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     ids.push(id);\n/// }\n/// assert_eq!(ids, vec![\"foo\", \"bar\"]);\n/// ```\n1794 pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {\n1795     let len = self\n1796         .static_captures_len\n1797         .expect(\"number of capture groups can vary in a match\")\n1798         .checked_sub(1)\n1799         .expect(\"number of groups is always greater than zero\");\n1800     assert_eq!(N, len, \"asked for {} groups, but must ask for {}\", N, len);\n1801     // The regex-automata variant of extract is a bit more permissive.\n1802     // It doesn't require the number of matching capturing groups to be\n1803     // static, and you can even request fewer groups than what's there. So\n1804     // this is guaranteed to never panic because we've asserted above that\n1805     // the user has requested precisely the number of groups that must be\n1806     // present in any match for this regex.\n1807     self.caps.extract(self.haystack)\n1808 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}