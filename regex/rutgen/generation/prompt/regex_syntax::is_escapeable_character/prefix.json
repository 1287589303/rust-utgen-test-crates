{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/lib.rs\n// crate name is regex_syntax\npub use crate::{\n    error::Error, parser::{parse, Parser, ParserBuilder},\n    unicode::UnicodeWordError,\n};\nuse alloc::string::String;\npub fn is_escapeable_character(c: char) -> bool {\n    if is_meta_character(c) {\n        return true;\n    }\n    if !c.is_ascii() {\n        return false;\n    }\n    match c {\n        '0'..='9' | 'A'..='Z' | 'a'..='z' => false,\n        '<' | '>' => false,\n        _ => true,\n    }\n}\npub fn is_meta_character(c: char) -> bool {\n    match c {\n        '\\\\' | '.' | '+' | '*' | '?' | '(' | ')' | '|' | '[' | ']' | '{' | '}' | '^'\n        | '$' | '#' | '&' | '-' | '~' => true,\n        _ => false,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if the given character can be escaped in a regex.\n///\n/// This returns true in all cases that `is_meta_character` returns true, but\n/// also returns true in some cases where `is_meta_character` returns false.\n/// For example, `%` is not a meta character, but it is escapeable. That is,\n/// `%` and `\\%` both match a literal `%` in all contexts.\n///\n/// The purpose of this routine is to provide knowledge about what characters\n/// may be escaped. Namely, most regex engines permit \"superfluous\" escapes\n/// where characters without any special significance may be escaped even\n/// though there is no actual _need_ to do so.\n///\n/// This will return false for some characters. For example, `e` is not\n/// escapeable. Therefore, `\\e` will either result in a parse error (which is\n/// true today), or it could backwards compatibly evolve into a new construct\n/// with its own meaning. Indeed, that is the purpose of banning _some_\n/// superfluous escapes: it provides a way to evolve the syntax in a compatible\n/// manner.\n///\n/// # Example\n///\n/// ```\n/// use regex_syntax::is_escapeable_character;\n///\n/// assert!(is_escapeable_character('?'));\n/// assert!(is_escapeable_character('-'));\n/// assert!(is_escapeable_character('&'));\n/// assert!(is_escapeable_character('#'));\n/// assert!(is_escapeable_character('%'));\n/// assert!(is_escapeable_character('/'));\n/// assert!(is_escapeable_character('!'));\n/// assert!(is_escapeable_character('\"'));\n///\n/// assert!(!is_escapeable_character('e'));\n/// ```\n303 pub fn is_escapeable_character(c: char) -> bool {\n304     // Certainly escapeable if it's a meta character.\n305     if is_meta_character(c) {\n306         return true;\n307     }\n308     // Any character that isn't ASCII is definitely not escapeable. There's\n309     // no real need to allow things like \\â˜ƒ right?\n310     if !c.is_ascii() {\n311         return false;\n312     }\n313     // Otherwise, we basically say that everything is escapeable unless it's a\n314     // letter or digit. Things like \\3 are either octal (when enabled) or an\n315     // error, and we should keep it that way. Otherwise, letters are reserved\n316     // for adding new syntax in a backwards compatible way.\n317     match c {\n318         '0'..='9' | 'A'..='Z' | 'a'..='z' => false,\n319         // While not currently supported, we keep these as not escapeable to\n320         // give us some flexibility with respect to supporting the \\< and\n321         // \\> word boundary assertions in the future. By rejecting them as\n322         // escapeable, \\< and \\> will result in a parse error. Thus, we can\n323         // turn them into something else in the future without it being a\n324         // backwards incompatible change.\n325         //\n326         // OK, now we support \\< and \\>, and we need to retain them as *not*\n327         // escapeable here since the escape sequence is significant.\n328         '<' | '>' => false,\n329         _ => true,\n330     }\n331 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}