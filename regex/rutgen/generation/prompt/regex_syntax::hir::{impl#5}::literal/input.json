{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Eq, PartialEq)]\npub struct Literal(pub Box<[u8]>);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    #[inline]\n    pub fn empty() -> Hir {\n        let props = Properties::empty();\n        Hir { kind: HirKind::Empty, props }\n    }\n    #[inline]\n    pub fn fail() -> Hir {}\n    #[inline]\n    pub fn literal<B: Into<Box<[u8]>>>(lit: B) -> Hir {\n        let bytes = lit.into();\n        if bytes.is_empty() {\n            return Hir::empty();\n        }\n        let lit = Literal(bytes);\n        let props = Properties::literal(&lit);\n        Hir {\n            kind: HirKind::Literal(lit),\n            props,\n        }\n    }\n    #[inline]\n    pub fn class(class: Class) -> Hir {}\n    #[inline]\n    pub fn look(look: Look) -> Hir {}\n    #[inline]\n    pub fn repetition(mut rep: Repetition) -> Hir {}\n    #[inline]\n    pub fn capture(capture: Capture) -> Hir {}\n    pub fn concat(subs: Vec<Hir>) -> Hir {}\n    pub fn alternation(subs: Vec<Hir>) -> Hir {}\n    #[inline]\n    pub fn dot(dot: Dot) -> Hir {}\n}\nimpl Properties {\n    fn empty() -> Properties {}\n    fn literal(lit: &Literal) -> Properties {\n        let inner = PropertiesI {\n            minimum_len: Some(lit.0.len()),\n            maximum_len: Some(lit.0.len()),\n            look_set: LookSet::empty(),\n            look_set_prefix: LookSet::empty(),\n            look_set_suffix: LookSet::empty(),\n            look_set_prefix_any: LookSet::empty(),\n            look_set_suffix_any: LookSet::empty(),\n            utf8: core::str::from_utf8(&lit.0).is_ok(),\n            explicit_captures_len: 0,\n            static_explicit_captures_len: Some(0),\n            literal: true,\n            alternation_literal: true,\n        };\n        Properties(Box::new(inner))\n    }\n    fn class(class: &Class) -> Properties {}\n    fn look(look: Look) -> Properties {}\n    fn repetition(rep: &Repetition) -> Properties {}\n    fn capture(capture: &Capture) -> Properties {}\n    fn concat(concat: &[Hir]) -> Properties {}\n    fn alternation(alts: &[Hir]) -> Properties {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a literal HIR expression.\n///\n/// This accepts anything that can be converted into a `Box<[u8]>`.\n///\n/// Note that there is no mechanism for storing a `char` or a `Box<str>`\n/// in an HIR. Everything is \"just bytes.\" Whether a `Literal` (or\n/// any HIR node) matches valid UTF-8 exclusively can be queried via\n/// [`Properties::is_utf8`].\n///\n/// # Example\n///\n/// This example shows that concatenations of `Literal` HIR values will\n/// automatically get flattened and combined together. So for example, even\n/// if you concat multiple `Literal` values that are themselves not valid\n/// UTF-8, they might add up to valid UTF-8. This also demonstrates just\n/// how \"smart\" Hir's smart constructors are.\n///\n/// ```\n/// use regex_syntax::hir::{Hir, HirKind, Literal};\n///\n/// let literals = vec![\n///     Hir::literal([0xE2]),\n///     Hir::literal([0x98]),\n///     Hir::literal([0x83]),\n/// ];\n/// // Each literal, on its own, is invalid UTF-8.\n/// assert!(literals.iter().all(|hir| !hir.properties().is_utf8()));\n///\n/// let concat = Hir::concat(literals);\n/// // But the concatenation is valid UTF-8!\n/// assert!(concat.properties().is_utf8());\n///\n/// // And also notice that the literals have been concatenated into a\n/// // single `Literal`, to the point where there is no explicit `Concat`!\n/// let expected = HirKind::Literal(Literal(Box::from(\"☃\".as_bytes())));\n/// assert_eq!(&expected, concat.kind());\n/// ```\n///\n/// # Example: building a literal from a `char`\n///\n/// This example shows how to build a single `Hir` literal from a `char`\n/// value. Since a [`Literal`] is just bytes, we just need to UTF-8\n/// encode a `char` value:\n///\n/// ```\n/// use regex_syntax::hir::{Hir, HirKind, Literal};\n///\n/// let ch = '☃';\n/// let got = Hir::literal(ch.encode_utf8(&mut [0; 4]).as_bytes());\n///\n/// let expected = HirKind::Literal(Literal(Box::from(\"☃\".as_bytes())));\n/// assert_eq!(&expected, got.kind());\n/// ```\n342 pub fn literal<B: Into<Box<[u8]>>>(lit: B) -> Hir {\n343     let bytes = lit.into();\n344     if bytes.is_empty() {\n345         return Hir::empty();\n346     }\n347 \n348     let lit = Literal(bytes);\n349     let props = Properties::literal(&lit);\n350     Hir { kind: HirKind::Literal(lit), props }\n351 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}