{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{error::Error, Regex, RegexSet};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {\n        self.builder.line_terminator(byte);\n        self\n    }\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {\n        self.metac = self.metac.clone().line_terminator(byte);\n        self.syntaxc = self.syntaxc.line_terminator(byte);\n        self\n    }\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Configures the line terminator to be used by the regex.\n///\n/// The line terminator is relevant in two ways for a particular regex:\n///\n/// * When dot-matches-new-line mode is *not* enabled (the default),\n/// then `.` will match any character except for the configured line\n/// terminator.\n/// * When multi-line mode is enabled (not the default), then `^` and\n/// `$` will match immediately after and before, respectively, a line\n/// terminator.\n///\n/// In both cases, if CRLF mode is enabled in a particular context,\n/// then it takes precedence over any configured line terminator.\n///\n/// This option cannot be configured from within the pattern.\n///\n/// The default line terminator is `\\n`.\n///\n/// # Example\n///\n/// This shows how to treat the NUL byte as a line terminator. This can\n/// be a useful heuristic when searching binary data.\n///\n/// ```\n/// use regex::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"^foo$\")\n///     .multi_line(true)\n///     .line_terminator(b'\\x00')\n///     .build()\n///     .unwrap();\n/// let hay = \"\\x00foo\\x00\";\n/// assert_eq!(Some(1..4), re.find(hay).map(|m| m.range()));\n/// ```\n///\n/// This example shows that the behavior of `.` is impacted by this\n/// setting as well:\n///\n/// ```\n/// use regex::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\".\")\n///     .line_terminator(b'\\x00')\n///     .build()\n///     .unwrap();\n/// assert!(re.is_match(\"\\n\"));\n/// assert!(!re.is_match(\"\\x00\"));\n/// ```\n///\n/// This shows that building a regex will fail if the byte given\n/// is not ASCII and the pattern could result in matching invalid\n/// UTF-8. This is because any singular non-ASCII byte is not valid\n/// UTF-8, and it is not permitted for a [`Regex`] to match invalid\n/// UTF-8. (It is permissible to use a non-ASCII byte when building a\n/// [`bytes::Regex`](crate::bytes::Regex).)\n///\n/// ```\n/// use regex::RegexBuilder;\n///\n/// assert!(RegexBuilder::new(r\".\").line_terminator(0x80).build().is_err());\n/// // Note that using a non-ASCII byte isn't enough on its own to\n/// // cause regex compilation to fail. You actually have to make use\n/// // of it in the regex in a way that leads to matching invalid\n/// // UTF-8. If you don't, then regex compilation will succeed!\n/// assert!(RegexBuilder::new(r\"a\").line_terminator(0x80).build().is_ok());\n/// ```\n521 pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {\n522     self.builder.line_terminator(byte);\n523     self\n524 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}