{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub enum ClassQuery<'a> {\n    /// Return a class corresponding to a Unicode binary property, named by\n    /// a single letter.\n    OneLetter(char),\n    /// Return a class corresponding to a Unicode binary property.\n    ///\n    /// Note that, by special exception (see UTS#18, Section 1.2), both\n    /// general category values and script values are permitted here as if\n    /// they were a binary property.\n    Binary(&'a str),\n    /// Return a class corresponding to all codepoints whose property\n    /// (identified by `property_name`) corresponds to the given value\n    /// (identified by `property_value`).\n    ByValue {\n        /// A property name.\n        property_name: &'a str,\n        /// A property value.\n        property_value: &'a str,\n    },\n}\n#[derive(Debug, Eq, PartialEq)]\nenum CanonicalClassQuery {\n    /// The canonical binary property name.\n    Binary(&'static str),\n    /// The canonical general category name.\n    GeneralCategory(&'static str),\n    /// The canonical script name.\n    Script(&'static str),\n    /// An arbitrary association between property and value, both of which\n    /// have been canonicalized.\n    ///\n    /// Note that by construction, the property name of ByValue will never\n    /// be General_Category or Script. Those two cases are subsumed by the\n    /// eponymous variants.\n    ByValue {\n        /// The canonical property name.\n        property_name: &'static str,\n        /// The canonical property value.\n        property_value: &'static str,\n    },\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nimpl<'a> ClassQuery<'a> {\n    fn canonicalize(&self) -> Result<CanonicalClassQuery, Error> {\n        match *self {\n            ClassQuery::OneLetter(c) => self.canonical_binary(&c.to_string()),\n            ClassQuery::Binary(name) => self.canonical_binary(name),\n            ClassQuery::ByValue { property_name, property_value } => {\n                let property_name = symbolic_name_normalize(property_name);\n                let property_value = symbolic_name_normalize(property_value);\n                let canon_name = match canonical_prop(&property_name)? {\n                    None => return Err(Error::PropertyNotFound),\n                    Some(canon_name) => canon_name,\n                };\n                Ok(\n                    match canon_name {\n                        \"General_Category\" => {\n                            let canon = match canonical_gencat(&property_value)? {\n                                None => return Err(Error::PropertyValueNotFound),\n                                Some(canon) => canon,\n                            };\n                            CanonicalClassQuery::GeneralCategory(canon)\n                        }\n                        \"Script\" => {\n                            let canon = match canonical_script(&property_value)? {\n                                None => return Err(Error::PropertyValueNotFound),\n                                Some(canon) => canon,\n                            };\n                            CanonicalClassQuery::Script(canon)\n                        }\n                        _ => {\n                            let vals = match property_values(canon_name)? {\n                                None => return Err(Error::PropertyValueNotFound),\n                                Some(vals) => vals,\n                            };\n                            let canon_val = match canonical_value(\n                                vals,\n                                &property_value,\n                            ) {\n                                None => return Err(Error::PropertyValueNotFound),\n                                Some(canon_val) => canon_val,\n                            };\n                            CanonicalClassQuery::ByValue {\n                                property_name: canon_name,\n                                property_value: canon_val,\n                            }\n                        }\n                    },\n                )\n            }\n        }\n    }\n    fn canonical_binary(&self, name: &str) -> Result<CanonicalClassQuery, Error> {\n        let norm = symbolic_name_normalize(name);\n        if norm != \"cf\" && norm != \"sc\" && norm != \"lc\" {\n            if let Some(canon) = canonical_prop(&norm)? {\n                return Ok(CanonicalClassQuery::Binary(canon));\n            }\n        }\n        if let Some(canon) = canonical_gencat(&norm)? {\n            return Ok(CanonicalClassQuery::GeneralCategory(canon));\n        }\n        if let Some(canon) = canonical_script(&norm)? {\n            return Ok(CanonicalClassQuery::Script(canon));\n        }\n        Err(Error::PropertyNotFound)\n    }\n}\nfn canonical_script(normalized_value: &str) -> Result<Option<&'static str>, Error> {\n    let scripts = property_values(\"Script\")?.unwrap();\n    Ok(canonical_value(scripts, normalized_value))\n}\nfn canonical_gencat(normalized_value: &str) -> Result<Option<&'static str>, Error> {\n    Ok(\n        match normalized_value {\n            \"any\" => Some(\"Any\"),\n            \"assigned\" => Some(\"Assigned\"),\n            \"ascii\" => Some(\"ASCII\"),\n            _ => {\n                let gencats = property_values(\"General_Category\")?.unwrap();\n                canonical_value(gencats, normalized_value)\n            }\n        },\n    )\n}\nfn canonical_prop(normalized_name: &str) -> Result<Option<&'static str>, Error> {\n    #[cfg(\n        not(\n            any(\n                feature = \"unicode-age\",\n                feature = \"unicode-bool\",\n                feature = \"unicode-gencat\",\n                feature = \"unicode-perl\",\n                feature = \"unicode-script\",\n                feature = \"unicode-segment\",\n            )\n        )\n    )]\n    fn imp(_: &str) -> Result<Option<&'static str>, Error> {\n        Err(Error::PropertyNotFound)\n    }\n    #[cfg(\n        any(\n            feature = \"unicode-age\",\n            feature = \"unicode-bool\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-perl\",\n            feature = \"unicode-script\",\n            feature = \"unicode-segment\",\n        )\n    )]\n    fn imp(name: &str) -> Result<Option<&'static str>, Error> {\n        use crate::unicode_tables::property_names::PROPERTY_NAMES;\n        Ok(\n            PROPERTY_NAMES\n                .binary_search_by_key(&name, |&(n, _)| n)\n                .ok()\n                .map(|i| PROPERTY_NAMES[i].1),\n        )\n    }\n    imp(normalized_name)\n}\nfn property_values(\n    canonical_property_name: &'static str,\n) -> Result<Option<PropertyValues>, Error> {\n    #[cfg(\n        not(\n            any(\n                feature = \"unicode-age\",\n                feature = \"unicode-bool\",\n                feature = \"unicode-gencat\",\n                feature = \"unicode-perl\",\n                feature = \"unicode-script\",\n                feature = \"unicode-segment\",\n            )\n        )\n    )]\n    fn imp(_: &'static str) -> Result<Option<PropertyValues>, Error> {\n        Err(Error::PropertyValueNotFound)\n    }\n    #[cfg(\n        any(\n            feature = \"unicode-age\",\n            feature = \"unicode-bool\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-perl\",\n            feature = \"unicode-script\",\n            feature = \"unicode-segment\",\n        )\n    )]\n    fn imp(name: &'static str) -> Result<Option<PropertyValues>, Error> {\n        use crate::unicode_tables::property_values::PROPERTY_VALUES;\n        Ok(\n            PROPERTY_VALUES\n                .binary_search_by_key(&name, |&(n, _)| n)\n                .ok()\n                .map(|i| PROPERTY_VALUES[i].1),\n        )\n    }\n    imp(canonical_property_name)\n}\nfn canonical_value(\n    vals: PropertyValues,\n    normalized_value: &str,\n) -> Option<&'static str> {\n    vals.binary_search_by_key(&normalized_value, |&(n, _)| n).ok().map(|i| vals[i].1)\n}\nfn symbolic_name_normalize(x: &str) -> String {\n    let mut tmp = x.as_bytes().to_vec();\n    let len = symbolic_name_normalize_bytes(&mut tmp).len();\n    tmp.truncate(len);\n    String::from_utf8(tmp).unwrap()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n238 fn canonicalize(&self) -> Result<CanonicalClassQuery, Error> {\n239     match *self {\n240         ClassQuery::OneLetter(c) => self.canonical_binary(&c.to_string()),\n241         ClassQuery::Binary(name) => self.canonical_binary(name),\n242         ClassQuery::ByValue { property_name, property_value } => {\n243             let property_name = symbolic_name_normalize(property_name);\n244             let property_value = symbolic_name_normalize(property_value);\n245 \n246             let canon_name = match canonical_prop(&property_name)? {\n247                 None => return Err(Error::PropertyNotFound),\n248                 Some(canon_name) => canon_name,\n249             };\n250             Ok(match canon_name {\n251                 \"General_Category\" => {\n252                     let canon = match canonical_gencat(&property_value)? {\n253                         None => return Err(Error::PropertyValueNotFound),\n254                         Some(canon) => canon,\n255                     };\n256                     CanonicalClassQuery::GeneralCategory(canon)\n257                 }\n258                 \"Script\" => {\n259                     let canon = match canonical_script(&property_value)? {\n260                         None => return Err(Error::PropertyValueNotFound),\n261                         Some(canon) => canon,\n262                     };\n263                     CanonicalClassQuery::Script(canon)\n264                 }\n265                 _ => {\n266                     let vals = match property_values(canon_name)? {\n267                         None => return Err(Error::PropertyValueNotFound),\n268                         Some(vals) => vals,\n269                     };\n270                     let canon_val =\n271                         match canonical_value(vals, &property_value) {\n272                             None => {\n273                                 return Err(Error::PropertyValueNotFound)\n274                             }\n275                             Some(canon_val) => canon_val,\n276                         };\n277                     CanonicalClassQuery::ByValue {\n278                         property_name: canon_name,\n279                         property_value: canon_val,\n280                     }\n281                 }\n282             })\n283         }\n284     }\n285 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}