{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\n#[derive(Debug)]\npub struct RegexBuilder {\n    pattern: String,\n    hir_config: hir::Config,\n    nfa_config: nfa::Config,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {\n        self.hir_config.flags.multi_line = yes;\n        self\n    }\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, limit: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures multi-line mode for the entire pattern.\n///\n/// Enabling multi-line mode changes the behavior of the `^` and `$` anchor\n/// assertions. Instead of only matching at the beginning and end of a\n/// haystack, respectively, multi-line mode causes them to match at the\n/// beginning and end of a line *in addition* to the beginning and end of\n/// a haystack. More precisely, `^` will match at the position immediately\n/// following a `\\n` and `$` will match at the position immediately\n/// preceding a `\\n`.\n///\n/// The behavior of this option is impacted by the [`RegexBuilder::crlf`]\n/// setting. Namely, CRLF mode changes the line terminator to be either\n/// `\\r` or `\\n`, but never at the position between a `\\r` and `\\`n.\n///\n/// This setting can also be configured using the inline flag `m` in the\n/// pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"^foo$\")\n///     .multi_line(true)\n///     .build()\n///     .unwrap();\n/// assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));\n/// ```\n2724 pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {\n2725     self.hir_config.flags.multi_line = yes;\n2726     self\n2727 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}