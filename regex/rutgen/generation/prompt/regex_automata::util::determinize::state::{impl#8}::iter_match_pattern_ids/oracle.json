{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\nstruct Repr<'a>(&'a [u8]);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl<'a> Repr<'a> {\n    fn is_match(&self) -> bool {\n        self.0[0] & (1 << 0) > 0\n    }\n    fn has_pattern_ids(&self) -> bool {\n        self.0[0] & (1 << 1) > 0\n    }\n    fn is_from_word(&self) -> bool {}\n    fn is_half_crlf(&self) -> bool {}\n    fn look_have(&self) -> LookSet {}\n    fn look_need(&self) -> LookSet {}\n    fn match_len(&self) -> usize {}\n    fn match_pattern(&self, index: usize) -> PatternID {}\n    fn match_pattern_ids(&self) -> Option<Vec<PatternID>> {}\n    fn iter_match_pattern_ids<F: FnMut(PatternID)>(&self, mut f: F) {\n        if !self.is_match() {\n            return;\n        }\n        if !self.has_pattern_ids() {\n            f(PatternID::ZERO);\n            return;\n        }\n        let mut pids = &self.0[13..self.pattern_offset_end()];\n        while !pids.is_empty() {\n            let pid = wire::read_u32(pids);\n            pids = &pids[PatternID::SIZE..];\n            f(PatternID::new_unchecked(usize::try_from(pid).unwrap()));\n        }\n    }\n    fn iter_nfa_state_ids<F: FnMut(StateID)>(&self, mut f: F) {}\n    fn pattern_offset_end(&self) -> usize {\n        let encoded = self.encoded_pattern_len();\n        if encoded == 0 {\n            return 9;\n        }\n        encoded.checked_mul(4).unwrap().checked_add(13).unwrap()\n    }\n    fn encoded_pattern_len(&self) -> usize {}\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn read_u32(slice: &[u8]) -> u32 {\n    let bytes: [u8; 4] = slice[..size_of::<u32>()].try_into().unwrap();\n    u32::from_ne_bytes(bytes)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calls the given function on every pattern ID in this state.\n499 fn iter_match_pattern_ids<F: FnMut(PatternID)>(&self, mut f: F) {\n500     if !self.is_match() {\n501         return;\n502     }\n503     // As an optimization for a very common case, when this is a match\n504     // state for an NFA with only one pattern, we don't actually write the\n505     // pattern ID to the state representation. Instead, we know it must\n506     // be there since it is the only possible choice.\n507     if !self.has_pattern_ids() {\n508         f(PatternID::ZERO);\n509         return;\n510     }\n511     let mut pids = &self.0[13..self.pattern_offset_end()];\n512     while !pids.is_empty() {\n513         let pid = wire::read_u32(pids);\n514         pids = &pids[PatternID::SIZE..];\n515         // This is OK since we only ever serialize valid PatternIDs to\n516         // states. And since pattern IDs can never exceed a usize, the\n517         // unwrap is OK.\n518         f(PatternID::new_unchecked(usize::try_from(pid).unwrap()));\n519     }\n520 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}