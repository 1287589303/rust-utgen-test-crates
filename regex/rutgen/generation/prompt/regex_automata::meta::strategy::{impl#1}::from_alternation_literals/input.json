{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/strategy.rs\n// crate name is regex_automata\nuse core::{fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::sync::Arc;\nuse regex_syntax::hir::{literal, Hir};\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError, RetryQuadraticError},\n        regex::{Cache, RegexInfo},\n        reverse_inner, wrappers,\n    },\n    nfa::thompson::{self, WhichCaptures, NFA},\n    util::{\n        captures::{Captures, GroupInfo},\n        look::LookMatcher, prefilter::{self, Prefilter, PrefilterI},\n        primitives::{NonMaxUsize, PatternID},\n        search::{Anchored, HalfMatch, Input, Match, MatchKind, PatternSet},\n    },\n};\npub(super) trait Strategy: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn group_info(&self) -> &GroupInfo;\n    fn create_cache(&self) -> Cache;\n    fn reset_cache(&self, cache: &mut Cache);\n    fn is_accelerated(&self) -> bool;\n    fn memory_usage(&self) -> usize;\n    fn search(&self, cache: &mut Cache, input: &Input<'_>) -> Option<Match>;\n    fn search_half(&self, cache: &mut Cache, input: &Input<'_>) -> Option<HalfMatch>;\n    fn is_match(&self, cache: &mut Cache, input: &Input<'_>) -> bool;\n    fn search_slots(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<PatternID>;\n    fn which_overlapping_matches(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    );\n}\n#[derive(Clone, Debug)]\nstruct Pre<P> {\n    pre: P,\n    group_info: GroupInfo,\n}\n#[derive(Clone, Debug)]\npub(crate) struct RegexInfo(Arc<RegexInfoI>);\n#[derive(Clone, Debug)]\npub(crate) struct AhoCorasick {\n    #[cfg(not(feature = \"perf-literal-multisubstring\"))]\n    _unused: (),\n    #[cfg(feature = \"perf-literal-multisubstring\")]\n    ac: aho_corasick::AhoCorasick,\n}\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Pre<()> {\n    fn from_prefixes(\n        info: &RegexInfo,\n        prefixes: &literal::Seq,\n    ) -> Option<Arc<dyn Strategy>> {}\n    fn from_alternation_literals(\n        info: &RegexInfo,\n        hirs: &[&Hir],\n    ) -> Option<Arc<dyn Strategy>> {\n        use crate::util::prefilter::AhoCorasick;\n        let lits = crate::meta::literal::alternation_literals(info, hirs)?;\n        let ac = AhoCorasick::new(MatchKind::LeftmostFirst, &lits)?;\n        Some(Pre::new(ac))\n    }\n}\nimpl<P: PrefilterI> Pre<P> {\n    fn new(pre: P) -> Arc<dyn Strategy> {\n        let group_info = GroupInfo::new([[None::<&str>]]).unwrap();\n        Arc::new(Pre { pre, group_info })\n    }\n}\npub(crate) fn alternation_literals(\n    info: &RegexInfo,\n    hirs: &[&Hir],\n) -> Option<Vec<Vec<u8>>> {\n    use regex_syntax::hir::{HirKind, Literal};\n    if !cfg!(feature = \"perf-literal-multisubstring\") {\n        return None;\n    }\n    if hirs.len() != 1 || !info.props()[0].look_set().is_empty()\n        || info.props()[0].explicit_captures_len() > 0\n        || !info.props()[0].is_alternation_literal()\n        || info.config().get_match_kind() != MatchKind::LeftmostFirst\n    {\n        return None;\n    }\n    let hir = &hirs[0];\n    let alts = match *hir.kind() {\n        HirKind::Alternation(ref alts) => alts,\n        _ => return None,\n    };\n    let mut lits = vec![];\n    for alt in alts {\n        let mut lit = vec![];\n        match *alt.kind() {\n            HirKind::Literal(Literal(ref bytes)) => lit.extend_from_slice(bytes),\n            HirKind::Concat(ref exprs) => {\n                for e in exprs {\n                    match *e.kind() {\n                        HirKind::Literal(Literal(ref bytes)) => {\n                            lit.extend_from_slice(bytes);\n                        }\n                        _ => unreachable!(\"expected literal, got {:?}\", e),\n                    }\n                }\n            }\n            _ => unreachable!(\"expected literal or concat, got {:?}\", alt),\n        }\n        lits.push(lit);\n    }\n    if lits.len() < 3000 {\n        debug!(\"skipping Aho-Corasick because there are too few literals\");\n        return None;\n    }\n    Some(lits)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Attempts to extract an alternation of literals, and if it's deemed\n/// worth doing, returns an Aho-Corasick prefilter as a strategy.\n///\n/// And currently, this only returns something when 'hirs.len() == 1'. This\n/// could in theory do something if there are multiple HIRs where all of\n/// them are alternation of literals, but I haven't had the time to go down\n/// that path yet.\n314 fn from_alternation_literals(\n315     info: &RegexInfo,\n316     hirs: &[&Hir],\n317 ) -> Option<Arc<dyn Strategy>> {\n318     use crate::util::prefilter::AhoCorasick;\n319 \n320     let lits = crate::meta::literal::alternation_literals(info, hirs)?;\n321     let ac = AhoCorasick::new(MatchKind::LeftmostFirst, &lits)?;\n322     Some(Pre::new(ac))\n323 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}