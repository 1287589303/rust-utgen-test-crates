{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Debug)]\npub struct Regex {\n    /// The actual regex implementation.\n    imp: Arc<RegexI>,\n    /// A thread safe pool of caches.\n    ///\n    /// For the higher level search APIs, a `Cache` is automatically plucked\n    /// from this pool before running a search. The lower level `with` methods\n    /// permit the caller to provide their own cache, thereby bypassing\n    /// accesses to this pool.\n    ///\n    /// Note that we put this outside the `Arc` so that cloning a `Regex`\n    /// results in creating a fresh `CachePool`. This in turn permits callers\n    /// to clone regexes into separate threads where each such regex gets\n    /// the pool's \"thread owner\" optimization. Otherwise, if one shares the\n    /// `Regex` directly, then the pool will go through a slower mutex path for\n    /// all threads except for the \"owner.\"\n    pool: CachePool,\n}\n#[derive(Debug)]\nstruct RegexI {\n    /// The core matching engine.\n    ///\n    /// Why is this reference counted when RegexI is already wrapped in an Arc?\n    /// Well, we need to capture this in a closure to our `Pool` below in order\n    /// to create new `Cache` values when needed. So since it needs to be in\n    /// two places, we make it reference counted.\n    ///\n    /// We make `RegexI` itself reference counted too so that `Regex` itself\n    /// stays extremely small and very cheap to clone.\n    strat: Arc<dyn Strategy>,\n    /// Metadata about the regexes driving the strategy. The metadata is also\n    /// usually stored inside the strategy too, but we put it here as well\n    /// so that we can get quick access to it (without virtual calls) before\n    /// executing the regex engine. For example, we use this metadata to\n    /// detect a subset of cases where we know a match is impossible, and can\n    /// thus avoid calling into the strategy at all.\n    ///\n    /// Since `RegexInfo` is stored in multiple places, it is also reference\n    /// counted.\n    info: RegexInfo,\n}\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\nimpl Regex {\n    pub fn create_captures(&self) -> Captures {}\n    pub fn create_cache(&self) -> Cache {}\n    pub fn pattern_len(&self) -> usize {}\n    pub fn captures_len(&self) -> usize {}\n    #[inline]\n    pub fn static_captures_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn group_info(&self) -> &GroupInfo {\n        self.imp.strat.group_info()\n    }\n    #[inline]\n    pub fn get_config(&self) -> &Config {}\n    #[inline]\n    pub fn is_accelerated(&self) -> bool {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return information about the capture groups in this `Regex`.\n///\n/// A `GroupInfo` is an immutable object that can be cheaply cloned. It\n/// is responsible for maintaining a mapping between the capture groups\n/// in the concrete syntax of zero or more regex patterns and their\n/// internal representation used by some of the regex matchers. It is also\n/// responsible for maintaining a mapping between the name of each group\n/// (if one exists) and its corresponding group index.\n///\n/// A `GroupInfo` is ultimately what is used to build a [`Captures`] value,\n/// which is some mutable space where group offsets are stored as a result\n/// of a search.\n///\n/// # Example\n///\n/// This shows some alternatives to [`Regex::create_captures`]:\n///\n/// ```\n/// use regex_automata::{\n///     meta::Regex,\n///     util::captures::Captures,\n///     Match, PatternID, Span,\n/// };\n///\n/// let re = Regex::new(r\"(?<first>[A-Z][a-z]+) (?<last>[A-Z][a-z]+)\")?;\n///\n/// // This is equivalent to Regex::create_captures. It stores matching\n/// // offsets for all groups in the regex.\n/// let mut all = Captures::all(re.group_info().clone());\n/// re.captures(\"Bruce Springsteen\", &mut all);\n/// assert_eq!(Some(Match::must(0, 0..17)), all.get_match());\n/// assert_eq!(Some(Span::from(0..5)), all.get_group_by_name(\"first\"));\n/// assert_eq!(Some(Span::from(6..17)), all.get_group_by_name(\"last\"));\n///\n/// // In this version, we only care about the implicit groups, which\n/// // means offsets for the explicit groups will be unavailable. It can\n/// // sometimes be faster to ask for fewer groups, since the underlying\n/// // regex engine needs to do less work to keep track of them.\n/// let mut matches = Captures::matches(re.group_info().clone());\n/// re.captures(\"Bruce Springsteen\", &mut matches);\n/// // We still get the overall match info.\n/// assert_eq!(Some(Match::must(0, 0..17)), matches.get_match());\n/// // But now the explicit groups are unavailable.\n/// assert_eq!(None, matches.get_group_by_name(\"first\"));\n/// assert_eq!(None, matches.get_group_by_name(\"last\"));\n///\n/// // Finally, in this version, we don't ask to keep track of offsets for\n/// // *any* groups. All we get back is whether a match occurred, and if\n/// // so, the ID of the pattern that matched.\n/// let mut empty = Captures::empty(re.group_info().clone());\n/// re.captures(\"Bruce Springsteen\", &mut empty);\n/// // it's a match!\n/// assert!(empty.is_match());\n/// // for pattern ID 0\n/// assert_eq!(Some(PatternID::ZERO), empty.pattern());\n/// // Match offsets are unavailable.\n/// assert_eq!(None, empty.get_match());\n/// // And of course, explicit groups are unavailable too.\n/// assert_eq!(None, empty.get_group_by_name(\"first\"));\n/// assert_eq!(None, empty.get_group_by_name(\"last\"));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1812 pub fn group_info(&self) -> &GroupInfo {\n1813     self.imp.strat.group_info()\n1814 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}