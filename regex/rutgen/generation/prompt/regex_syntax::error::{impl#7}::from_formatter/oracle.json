{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/error.rs\n// crate name is regex_syntax\nuse alloc::{\n    format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{ast, hir};\nstruct Spans<'p> {\n    /// The original regex pattern string.\n    pattern: &'p str,\n    /// The total width that should be used for line numbers. The width is\n    /// used for left padding the line numbers for alignment.\n    ///\n    /// A value of `0` means line numbers should not be displayed. That is,\n    /// the pattern is itself only one line.\n    line_number_width: usize,\n    /// All error spans that occur on a single line. This sequence always has\n    /// length equivalent to the number of lines in `pattern`, where the index\n    /// of the sequence represents a line number, starting at `0`. The spans\n    /// in each line are sorted in ascending order.\n    by_line: Vec<Vec<ast::Span>>,\n    /// All error spans that occur over one or more lines. That is, the start\n    /// and end position of the span have different line numbers. The spans are\n    /// sorted in ascending order.\n    multi_line: Vec<ast::Span>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Debug)]\npub struct Formatter<'e, E> {\n    /// The original regex pattern in which the error occurred.\n    pattern: &'e str,\n    /// The error kind. It must impl fmt::Display.\n    err: &'e E,\n    /// The primary span of the error.\n    span: &'e ast::Span,\n    /// An auxiliary and optional span, in case the error needs to point to\n    /// two locations (e.g., when reporting a duplicate capture group name).\n    aux_span: Option<&'e ast::Span>,\n}\nimpl<'p> Spans<'p> {\n    fn from_formatter<'e, E: core::fmt::Display>(\n        fmter: &'p Formatter<'e, E>,\n    ) -> Spans<'p> {\n        let mut line_count = fmter.pattern.lines().count();\n        if fmter.pattern.ends_with('\\n') {\n            line_count += 1;\n        }\n        let line_number_width = if line_count <= 1 {\n            0\n        } else {\n            line_count.to_string().len()\n        };\n        let mut spans = Spans {\n            pattern: &fmter.pattern,\n            line_number_width,\n            by_line: vec![vec![]; line_count],\n            multi_line: vec![],\n        };\n        spans.add(fmter.span.clone());\n        if let Some(span) = fmter.aux_span {\n            spans.add(span.clone());\n        }\n        spans\n    }\n    fn add(&mut self, span: ast::Span) {\n        if span.is_one_line() {\n            let i = span.start.line - 1;\n            self.by_line[i].push(span);\n            self.by_line[i].sort();\n        } else {\n            self.multi_line.push(span);\n            self.multi_line.sort();\n        }\n    }\n    fn notate(&self) -> String {}\n    fn notate_line(&self, i: usize) -> Option<String> {}\n    fn left_pad_line_number(&self, n: usize) -> String {}\n    fn line_number_padding(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Build a sequence of spans from a formatter.\n156 fn from_formatter<'e, E: core::fmt::Display>(\n157     fmter: &'p Formatter<'e, E>,\n158 ) -> Spans<'p> {\n159     let mut line_count = fmter.pattern.lines().count();\n160     // If the pattern ends with a `\\n` literal, then our line count is\n161     // off by one, since a span can occur immediately after the last `\\n`,\n162     // which is consider to be an additional line.\n163     if fmter.pattern.ends_with('\\n') {\n164         line_count += 1;\n165     }\n166     let line_number_width =\n167         if line_count <= 1 { 0 } else { line_count.to_string().len() };\n168     let mut spans = Spans {\n169         pattern: &fmter.pattern,\n170         line_number_width,\n171         by_line: vec![vec![]; line_count],\n172         multi_line: vec![],\n173     };\n174     spans.add(fmter.span.clone());\n175     if let Some(span) = fmter.aux_span {\n176         spans.add(span.clone());\n177     }\n178     spans\n179 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}