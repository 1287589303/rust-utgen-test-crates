{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Debug)]\nstruct ByteClassElementRanges<'a> {\n    elements: ByteClassElements<'a>,\n    range: Option<(Unit, Unit)>,\n}\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\n#[derive(Debug)]\npub struct ByteClassElements<'a> {\n    classes: &'a ByteClasses,\n    class: Unit,\n    byte: usize,\n}\nimpl<'a> Iterator for ByteClassElementRanges<'a> {\n    type Item = (Unit, Unit);\n    fn next(&mut self) -> Option<(Unit, Unit)> {\n        loop {\n            let element = match self.elements.next() {\n                None => return self.range.take(),\n                Some(element) => element,\n            };\n            match self.range.take() {\n                None => {\n                    self.range = Some((element, element));\n                }\n                Some((start, end)) => {\n                    if end.as_usize() + 1 != element.as_usize() || element.is_eoi() {\n                        self.range = Some((element, element));\n                        return Some((start, end));\n                    }\n                    self.range = Some((start, element));\n                }\n            }\n        }\n    }\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {}\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {}\n    pub fn as_u8(self) -> Option<u8> {}\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {\n        match self.0 {\n            UnitKind::U8(b) => usize::from(b),\n            UnitKind::EOI(eoi) => usize::from(eoi),\n        }\n    }\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {\n        self.as_eoi().is_some()\n    }\n    pub fn is_word_byte(self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n637 fn next(&mut self) -> Option<(Unit, Unit)> {\n638     loop {\n639         let element = match self.elements.next() {\n640             None => return self.range.take(),\n641             Some(element) => element,\n642         };\n643         match self.range.take() {\n644             None => {\n645                 self.range = Some((element, element));\n646             }\n647             Some((start, end)) => {\n648                 if end.as_usize() + 1 != element.as_usize()\n649                     || element.is_eoi()\n650                 {\n651                     self.range = Some((element, element));\n652                     return Some((start, end));\n653                 }\n654                 self.range = Some((start, element));\n655             }\n656         }\n657     }\n658 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}