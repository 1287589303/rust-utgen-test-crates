{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Captures<'h> {\n    haystack: &'h str,\n    slots: CaptureLocations,\n    pikevm: Arc<PikeVM>,\n}\n#[derive(Clone, Debug)]\npub struct CaptureLocations(Vec<Option<NonMaxUsize>>);\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {\n        self.slots.get(i).map(|(s, e)| Match::new(self.haystack, s, e))\n    }\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &str, dst: &mut String) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\nimpl CaptureLocations {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<(usize, usize)> {\n        let slot = i.checked_mul(2)?;\n        let start = self.0.get(slot).copied()??.get();\n        let slot = slot.checked_add(1)?;\n        let end = self.0.get(slot).copied()??.get();\n        Some((start, end))\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the `Match` associated with the capture group at index `i`. If\n/// `i` does not correspond to a capture group, or if the capture group did\n/// not participate in the match, then `None` is returned.\n///\n/// When `i == 0`, this is guaranteed to return a non-`None` value.\n///\n/// # Examples\n///\n/// Get the substring that matched with a default of an empty string if the\n/// group didn't participate in the match:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();\n/// let caps = re.captures(\"abc123\").unwrap();\n///\n/// let substr1 = caps.get(1).map_or(\"\", |m| m.as_str());\n/// let substr2 = caps.get(2).map_or(\"\", |m| m.as_str());\n/// assert_eq!(substr1, \"123\");\n/// assert_eq!(substr2, \"\");\n/// ```\n1676 pub fn get(&self, i: usize) -> Option<Match<'h>> {\n1677     self.slots.get(i).map(|(s, e)| Match::new(self.haystack, s, e))\n1678 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}