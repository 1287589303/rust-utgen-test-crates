{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Capture {\n    /// The capture index of the capture.\n    pub(crate) index: u32,\n    /// The name of the capture, if it exists.\n    pub(crate) name: Option<Box<str>>,\n    /// The expression inside the capturing group, which may be empty.\n    pub(crate) sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) enum HirKind {\n    Empty,\n    Char(char),\n    Class(Class),\n    Look(Look),\n    Repetition(Repetition),\n    Capture(Capture),\n    Concat(Vec<Hir>),\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    pub(crate) fn parse(config: Config, pattern: &str) -> Result<Hir, Error> {}\n    pub(crate) fn kind(&self) -> &HirKind {}\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn is_match_empty(&self) -> bool {}\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {}\n    fn fail() -> Hir {}\n    fn empty() -> Hir {}\n    fn char(ch: char) -> Hir {}\n    fn class(class: Class) -> Hir {}\n    fn look(look: Look) -> Hir {}\n    fn repetition(rep: Repetition) -> Hir {}\n    fn capture(cap: Capture) -> Hir {\n        let is_start_anchored = cap.sub.is_start_anchored;\n        let is_match_empty = cap.sub.is_match_empty;\n        let static_explicit_captures_len = cap\n            .sub\n            .static_explicit_captures_len\n            .map(|len| len.saturating_add(1));\n        let kind = HirKind::Capture(cap);\n        Hir {\n            kind,\n            is_start_anchored,\n            is_match_empty,\n            static_explicit_captures_len,\n        }\n    }\n    fn concat(mut subs: Vec<Hir>) -> Hir {}\n    fn alternation(mut subs: Vec<Hir>) -> Hir {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n295 fn capture(cap: Capture) -> Hir {\n296     let is_start_anchored = cap.sub.is_start_anchored;\n297     let is_match_empty = cap.sub.is_match_empty;\n298     let static_explicit_captures_len = cap\n299         .sub\n300         .static_explicit_captures_len\n301         .map(|len| len.saturating_add(1));\n302     let kind = HirKind::Capture(cap);\n303     Hir {\n304         kind,\n305         is_start_anchored,\n306         is_match_empty,\n307         static_explicit_captures_len,\n308     }\n309 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}