{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Capture {\n    /// The capture index of the capture.\n    pub(crate) index: u32,\n    /// The name of the capture, if it exists.\n    pub(crate) name: Option<Box<str>>,\n    /// The expression inside the capturing group, which may be empty.\n    pub(crate) sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) enum HirKind {\n    Empty,\n    Char(char),\n    Class(Class),\n    Look(Look),\n    Repetition(Repetition),\n    Capture(Capture),\n    Concat(Vec<Hir>),\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    pub(crate) fn parse(config: Config, pattern: &str) -> Result<Hir, Error> {}\n    pub(crate) fn kind(&self) -> &HirKind {}\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn is_match_empty(&self) -> bool {}\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {}\n    fn fail() -> Hir {}\n    fn empty() -> Hir {}\n    fn char(ch: char) -> Hir {}\n    fn class(class: Class) -> Hir {}\n    fn look(look: Look) -> Hir {}\n    fn repetition(rep: Repetition) -> Hir {}\n    fn capture(cap: Capture) -> Hir {\n        let is_start_anchored = cap.sub.is_start_anchored;\n        let is_match_empty = cap.sub.is_match_empty;\n        let static_explicit_captures_len = cap\n            .sub\n            .static_explicit_captures_len\n            .map(|len| len.saturating_add(1));\n        let kind = HirKind::Capture(cap);\n        Hir {\n            kind,\n            is_start_anchored,\n            is_match_empty,\n            static_explicit_captures_len,\n        }\n    }\n    fn concat(mut subs: Vec<Hir>) -> Hir {}\n    fn alternation(mut subs: Vec<Hir>) -> Hir {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n295 fn capture(cap: Capture) -> Hir {\n296     let is_start_anchored = cap.sub.is_start_anchored;\n297     let is_match_empty = cap.sub.is_match_empty;\n298     let static_explicit_captures_len = cap\n299         .sub\n300         .static_explicit_captures_len\n301         .map(|len| len.saturating_add(1));\n302     let kind = HirKind::Capture(cap);\n303     Hir {\n304         kind,\n305         is_start_anchored,\n306         is_match_empty,\n307         static_explicit_captures_len,\n308     }\n309 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}