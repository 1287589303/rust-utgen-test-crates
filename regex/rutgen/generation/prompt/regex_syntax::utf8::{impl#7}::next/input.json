{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\n#[derive(Debug)]\npub struct Utf8Sequences {\n    range_stack: Vec<ScalarRange>,\n}\nstruct ScalarRange {\n    start: u32,\n    end: u32,\n}\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Utf8Range {\n    /// Start of byte range (inclusive).\n    pub start: u8,\n    /// End of byte range (inclusive).\n    pub end: u8,\n}\n#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord)]\npub enum Utf8Sequence {\n    /// One byte range.\n    One(Utf8Range),\n    /// Two successive byte ranges.\n    Two([Utf8Range; 2]),\n    /// Three successive byte ranges.\n    Three([Utf8Range; 3]),\n    /// Four successive byte ranges.\n    Four([Utf8Range; 4]),\n}\nimpl Iterator for Utf8Sequences {\n    type Item = Utf8Sequence;\n    fn next(&mut self) -> Option<Self::Item> {\n        'TOP: while let Some(mut r) = self.range_stack.pop() {\n            'INNER: loop {\n                if let Some((r1, r2)) = r.split() {\n                    self.push(r2.start, r2.end);\n                    r.start = r1.start;\n                    r.end = r1.end;\n                    continue 'INNER;\n                }\n                if !r.is_valid() {\n                    continue 'TOP;\n                }\n                for i in 1..MAX_UTF8_BYTES {\n                    let max = max_scalar_value(i);\n                    if r.start <= max && max < r.end {\n                        self.push(max + 1, r.end);\n                        r.end = max;\n                        continue 'INNER;\n                    }\n                }\n                if let Some(ascii_range) = r.as_ascii() {\n                    return Some(Utf8Sequence::One(ascii_range));\n                }\n                for i in 1..MAX_UTF8_BYTES {\n                    let m = (1 << (6 * i)) - 1;\n                    if (r.start & !m) != (r.end & !m) {\n                        if (r.start & m) != 0 {\n                            self.push((r.start | m) + 1, r.end);\n                            r.end = r.start | m;\n                            continue 'INNER;\n                        }\n                        if (r.end & m) != m {\n                            self.push(r.end & !m, r.end);\n                            r.end = (r.end & !m) - 1;\n                            continue 'INNER;\n                        }\n                    }\n                }\n                let mut start = [0; MAX_UTF8_BYTES];\n                let mut end = [0; MAX_UTF8_BYTES];\n                let n = r.encode(&mut start, &mut end);\n                return Some(Utf8Sequence::from_encoded_range(&start[0..n], &end[0..n]));\n            }\n        }\n        None\n    }\n}\nimpl Utf8Sequences {\n    pub fn new(start: char, end: char) -> Self {\n        let range = ScalarRange {\n            start: u32::from(start),\n            end: u32::from(end),\n        };\n        Utf8Sequences {\n            range_stack: vec![range],\n        }\n    }\n    pub fn reset(&mut self, start: char, end: char) {}\n    fn push(&mut self, start: u32, end: u32) {\n        self.range_stack.push(ScalarRange { start, end });\n    }\n}\nimpl ScalarRange {\n    fn split(&self) -> Option<(ScalarRange, ScalarRange)> {\n        if self.start < 0xE000 && self.end > 0xD7FF {\n            Some((\n                ScalarRange {\n                    start: self.start,\n                    end: 0xD7FF,\n                },\n                ScalarRange {\n                    start: 0xE000,\n                    end: self.end,\n                },\n            ))\n        } else {\n            None\n        }\n    }\n    fn is_valid(&self) -> bool {\n        self.start <= self.end\n    }\n    fn as_ascii(&self) -> Option<Utf8Range> {\n        if self.is_ascii() {\n            let start = u8::try_from(self.start).unwrap();\n            let end = u8::try_from(self.end).unwrap();\n            Some(Utf8Range::new(start, end))\n        } else {\n            None\n        }\n    }\n    fn is_ascii(&self) -> bool {}\n    fn encode(&self, start: &mut [u8], end: &mut [u8]) -> usize {\n        let cs = char::from_u32(self.start).unwrap();\n        let ce = char::from_u32(self.end).unwrap();\n        let ss = cs.encode_utf8(start);\n        let se = ce.encode_utf8(end);\n        assert_eq!(ss.len(), se.len());\n        ss.len()\n    }\n}\nimpl Utf8Sequence {\n    fn from_encoded_range(start: &[u8], end: &[u8]) -> Self {\n        assert_eq!(start.len(), end.len());\n        match start.len() {\n            2 => {\n                Utf8Sequence::Two([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                ])\n            }\n            3 => {\n                Utf8Sequence::Three([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                    Utf8Range::new(start[2], end[2]),\n                ])\n            }\n            4 => {\n                Utf8Sequence::Four([\n                    Utf8Range::new(start[0], end[0]),\n                    Utf8Range::new(start[1], end[1]),\n                    Utf8Range::new(start[2], end[2]),\n                    Utf8Range::new(start[3], end[3]),\n                ])\n            }\n            n => unreachable!(\"invalid encoded length: {}\", n),\n        }\n    }\n    pub fn as_slice(&self) -> &[Utf8Range] {}\n    pub fn len(&self) -> usize {}\n    pub fn reverse(&mut self) {}\n    pub fn matches(&self, bytes: &[u8]) -> bool {}\n}\nfn max_scalar_value(nbytes: usize) -> u32 {\n    match nbytes {\n        1 => 0x007F,\n        2 => 0x07FF,\n        3 => 0xFFFF,\n        4 => 0x0010_FFFF,\n        _ => unreachable!(\"invalid UTF-8 byte sequence size\"),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n339 fn next(&mut self) -> Option<Self::Item> {\n340     'TOP: while let Some(mut r) = self.range_stack.pop() {\n341         'INNER: loop {\n342             if let Some((r1, r2)) = r.split() {\n343                 self.push(r2.start, r2.end);\n344                 r.start = r1.start;\n345                 r.end = r1.end;\n346                 continue 'INNER;\n347             }\n348             if !r.is_valid() {\n349                 continue 'TOP;\n350             }\n351             for i in 1..MAX_UTF8_BYTES {\n352                 let max = max_scalar_value(i);\n353                 if r.start <= max && max < r.end {\n354                     self.push(max + 1, r.end);\n355                     r.end = max;\n356                     continue 'INNER;\n357                 }\n358             }\n359             if let Some(ascii_range) = r.as_ascii() {\n360                 return Some(Utf8Sequence::One(ascii_range));\n361             }\n362             for i in 1..MAX_UTF8_BYTES {\n363                 let m = (1 << (6 * i)) - 1;\n364                 if (r.start & !m) != (r.end & !m) {\n365                     if (r.start & m) != 0 {\n366                         self.push((r.start | m) + 1, r.end);\n367                         r.end = r.start | m;\n368                         continue 'INNER;\n369                     }\n370                     if (r.end & m) != m {\n371                         self.push(r.end & !m, r.end);\n372                         r.end = (r.end & !m) - 1;\n373                         continue 'INNER;\n374                     }\n375                 }\n376             }\n377             let mut start = [0; MAX_UTF8_BYTES];\n378             let mut end = [0; MAX_UTF8_BYTES];\n379             let n = r.encode(&mut start, &mut end);\n380             return Some(Utf8Sequence::from_encoded_range(\n381                 &start[0..n],\n382                 &end[0..n],\n383             ));\n384         }\n385     }\n386     None\n387 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}