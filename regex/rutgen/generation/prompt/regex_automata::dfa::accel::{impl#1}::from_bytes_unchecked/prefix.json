{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accels<A> {\n    /// A length prefixed slice of contiguous accelerators. See the top comment\n    /// in this module for more details on how we can jump from a DFA's state\n    /// ID to an accelerator in this list.\n    ///\n    /// The first 4 bytes always correspond to the number of accelerators\n    /// that follow.\n    accels: A,\n}\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl<'a> Accels<&'a [AccelTy]> {\n    pub fn from_bytes_unchecked(\n        mut slice: &'a [u8],\n    ) -> Result<(Accels<&'a [AccelTy]>, usize), DeserializeError> {\n        let slice_start = slice.as_ptr().as_usize();\n        let (accel_len, _) = wire::try_read_u32_as_usize(slice, \"accelerators length\")?;\n        let accel_tys_len = wire::add(\n            wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?,\n            1,\n            \"total number of accel_tys\",\n        )?;\n        let accel_tys_bytes_len = wire::mul(\n            ACCEL_TY_SIZE,\n            accel_tys_len,\n            \"total number of bytes in accelerators\",\n        )?;\n        wire::check_slice_len(slice, accel_tys_bytes_len, \"accelerators\")?;\n        wire::check_alignment::<AccelTy>(slice)?;\n        let accel_tys = &slice[..accel_tys_bytes_len];\n        slice = &slice[accel_tys_bytes_len..];\n        let accels = unsafe {\n            core::slice::from_raw_parts(\n                accel_tys.as_ptr().cast::<AccelTy>(),\n                accel_tys_len,\n            )\n        };\n        Ok((Accels { accels }, slice.as_ptr().as_usize() - slice_start))\n    }\n}\npub(crate) fn check_alignment<T>(slice: &[u8]) -> Result<(), DeserializeError> {\n    let alignment = core::mem::align_of::<T>();\n    let address = slice.as_ptr().as_usize();\n    if address % alignment == 0 {\n        return Ok(());\n    }\n    Err(DeserializeError::alignment_mismatch(alignment, address))\n}\npub(crate) fn mul(\n    a: usize,\n    b: usize,\n    what: &'static str,\n) -> Result<usize, DeserializeError> {\n    match a.checked_mul(b) {\n        Some(c) => Ok(c),\n        None => Err(DeserializeError::arithmetic_overflow(what)),\n    }\n}\npub(crate) fn try_read_u32_as_usize(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(usize, usize), DeserializeError> {\n    try_read_u32(slice, what)\n        .and_then(|(n, nr)| {\n            usize::try_from(n)\n                .map(|n| (n, nr))\n                .map_err(|_| DeserializeError::invalid_usize(what))\n        })\n}\npub(crate) fn check_slice_len<T>(\n    slice: &[T],\n    at_least_len: usize,\n    what: &'static str,\n) -> Result<(), DeserializeError> {\n    if slice.len() < at_least_len {\n        return Err(DeserializeError::buffer_too_small(what));\n    }\n    Ok(())\n}\npub(crate) fn add(\n    a: usize,\n    b: usize,\n    what: &'static str,\n) -> Result<usize, DeserializeError> {\n    match a.checked_add(b) {\n        Some(c) => Ok(c),\n        None => Err(DeserializeError::arithmetic_overflow(what)),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Deserialize a sequence of accelerators from the given bytes. If there\n/// was a problem deserializing, then an error is returned.\n///\n/// This is guaranteed to run in constant time. This does not guarantee\n/// that every accelerator in the returned collection is valid. Thus,\n/// accessing one may panic, or not-safe code that relies on accelerators\n/// being correct my result in UB.\n///\n/// Callers may check the validity of every accelerator with the `validate`\n/// method.\n186 pub fn from_bytes_unchecked(\n187     mut slice: &'a [u8],\n188 ) -> Result<(Accels<&'a [AccelTy]>, usize), DeserializeError> {\n189     let slice_start = slice.as_ptr().as_usize();\n190 \n191     let (accel_len, _) =\n192         wire::try_read_u32_as_usize(slice, \"accelerators length\")?;\n193     // The accelerator length is part of the accel_tys slice that\n194     // we deserialize. This is perhaps a bit idiosyncratic. It would\n195     // probably be better to split out the length into a real field.\n196 \n197     let accel_tys_len = wire::add(\n198         wire::mul(accel_len, 2, \"total number of accelerator accel_tys\")?,\n199         1,\n200         \"total number of accel_tys\",\n201     )?;\n202     let accel_tys_bytes_len = wire::mul(\n203         ACCEL_TY_SIZE,\n204         accel_tys_len,\n205         \"total number of bytes in accelerators\",\n206     )?;\n207     wire::check_slice_len(slice, accel_tys_bytes_len, \"accelerators\")?;\n208     wire::check_alignment::<AccelTy>(slice)?;\n209     let accel_tys = &slice[..accel_tys_bytes_len];\n210     slice = &slice[accel_tys_bytes_len..];\n211     // SAFETY: We've checked the length and alignment above, and since\n212     // slice is just bytes and AccelTy is just a u32, we can safely cast to\n213     // a slice of &[AccelTy].\n214     let accels = unsafe {\n215         core::slice::from_raw_parts(\n216             accel_tys.as_ptr().cast::<AccelTy>(),\n217             accel_tys_len,\n218         )\n219     };\n220     Ok((Accels { accels }, slice.as_ptr().as_usize() - slice_start))\n221 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}