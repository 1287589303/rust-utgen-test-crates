{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {}\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::EndianMismatch {\n            expected,\n            found,\n        })\n    }\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\npub(crate) fn read_endianness_check(slice: &[u8]) -> Result<usize, DeserializeError> {\n    let (n, nr) = try_read_u32(slice, \"endianness check\")?;\n    assert_eq!(nr, write_endianness_check_len());\n    if n != 0xFEFF {\n        return Err(DeserializeError::endian_mismatch(0xFEFF, n));\n    }\n    Ok(nr)\n}\npub(crate) fn try_read_u32(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(u32, usize), DeserializeError> {\n    check_slice_len(slice, size_of::<u32>(), what)?;\n    Ok((read_u32(slice), size_of::<u32>()))\n}\npub(crate) fn write_endianness_check_len() -> usize {\n    size_of::<u32>()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reads the endianness check from the beginning of the given slice and\n/// confirms that the endianness of the serialized object matches the expected\n/// endianness. If the slice is too small or if the endianness check fails,\n/// this returns an error.\n///\n/// Upon success, the total number of bytes read is returned.\n497 pub(crate) fn read_endianness_check(\n498     slice: &[u8],\n499 ) -> Result<usize, DeserializeError> {\n500     let (n, nr) = try_read_u32(slice, \"endianness check\")?;\n501     assert_eq!(nr, write_endianness_check_len());\n502     if n != 0xFEFF {\n503         return Err(DeserializeError::endian_mismatch(0xFEFF, n));\n504     }\n505     Ok(nr)\n506 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}