{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/interpolate.rs\n// crate name is regex_automata\nuse alloc::{string::String, vec::Vec};\nuse crate::util::memchr::memchr;\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nstruct CaptureRef<'a> {\n    cap: Ref<'a>,\n    end: usize,\n}\npub fn bytes(\n    mut replacement: &[u8],\n    mut append: impl FnMut(usize, &mut Vec<u8>),\n    mut name_to_index: impl FnMut(&str) -> Option<usize>,\n    dst: &mut Vec<u8>,\n) {\n    while !replacement.is_empty() {\n        match memchr(b'$', replacement) {\n            None => break,\n            Some(i) => {\n                dst.extend_from_slice(&replacement[..i]);\n                replacement = &replacement[i..];\n            }\n        }\n        if replacement.get(1).map_or(false, |&b| b == b'$') {\n            dst.push(b'$');\n            replacement = &replacement[2..];\n            continue;\n        }\n        debug_assert!(! replacement.is_empty());\n        let cap_ref = match find_cap_ref(replacement) {\n            Some(cap_ref) => cap_ref,\n            None => {\n                dst.push(b'$');\n                replacement = &replacement[1..];\n                continue;\n            }\n        };\n        replacement = &replacement[cap_ref.end..];\n        match cap_ref.cap {\n            Ref::Number(i) => append(i, dst),\n            Ref::Named(name) => {\n                if let Some(i) = name_to_index(name) {\n                    append(i, dst);\n                }\n            }\n        }\n    }\n    dst.extend_from_slice(replacement);\n}\nfn find_cap_ref(replacement: &[u8]) -> Option<CaptureRef<'_>> {\n    let mut i = 0;\n    let rep: &[u8] = replacement;\n    if rep.len() <= 1 || rep[0] != b'$' {\n        return None;\n    }\n    i += 1;\n    if rep[i] == b'{' {\n        return find_cap_ref_braced(rep, i + 1);\n    }\n    let mut cap_end = i;\n    while rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) {\n        cap_end += 1;\n    }\n    if cap_end == i {\n        return None;\n    }\n    let cap = core::str::from_utf8(&rep[i..cap_end]).expect(\"valid UTF-8 capture name\");\n    Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn memchr(n1: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == n1)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Accepts a replacement byte string and interpolates capture references with\n/// their corresponding values.\n///\n/// `append` should be a function that appends the byte string value of a\n/// capture group at a particular index to the byte string given. If the\n/// capture group index is invalid, then nothing should be appended.\n///\n/// `name_to_index` should be a function that maps a capture group name to a\n/// capture group index. If the given name doesn't exist, then `None` should\n/// be returned.\n///\n/// Finally, `dst` is where the final interpolated contents should be written.\n/// If `replacement` contains no capture group references, then `dst` will be\n/// equivalent to `replacement`.\n///\n/// See the [module documentation](self) for details about the format\n/// supported.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::util::interpolate;\n///\n/// let mut dst = vec![];\n/// interpolate::bytes(\n///     b\"foo $bar baz\",\n///     |index, dst| {\n///         if index == 0 {\n///             dst.extend_from_slice(b\"BAR\");\n///         }\n///     },\n///     |name| {\n///         if name == \"bar\" {\n///             Some(0)\n///         } else {\n///             None\n///         }\n///     },\n///     &mut dst,\n/// );\n/// assert_eq!(&b\"foo BAR baz\"[..], dst);\n/// ```\n178 pub fn bytes(\n179     mut replacement: &[u8],\n180     mut append: impl FnMut(usize, &mut Vec<u8>),\n181     mut name_to_index: impl FnMut(&str) -> Option<usize>,\n182     dst: &mut Vec<u8>,\n183 ) {\n184     while !replacement.is_empty() {\n185         match memchr(b'$', replacement) {\n186             None => break,\n187             Some(i) => {\n188                 dst.extend_from_slice(&replacement[..i]);\n189                 replacement = &replacement[i..];\n190             }\n191         }\n192         // Handle escaping of '$'.\n193         if replacement.get(1).map_or(false, |&b| b == b'$') {\n194             dst.push(b'$');\n195             replacement = &replacement[2..];\n196             continue;\n197         }\n198         debug_assert!(!replacement.is_empty());\n199         let cap_ref = match find_cap_ref(replacement) {\n200             Some(cap_ref) => cap_ref,\n201             None => {\n202                 dst.push(b'$');\n203                 replacement = &replacement[1..];\n204                 continue;\n205             }\n206         };\n207         replacement = &replacement[cap_ref.end..];\n208         match cap_ref.cap {\n209             Ref::Number(i) => append(i, dst),\n210             Ref::Named(name) => {\n211                 if let Some(i) = name_to_index(name) {\n212                     append(i, dst);\n213                 }\n214             }\n215         }\n216     }\n217     dst.extend_from_slice(replacement);\n218 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}