{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Debug)]\nstruct PreferenceTrie {\n    /// The states in this trie. The index of a state in this vector is its ID.\n    states: Vec<State>,\n    /// This vec indicates which states are match states. It always has\n    /// the same length as `states` and is indexed by the same state ID.\n    /// A state with identifier `sid` is a match state if and only if\n    /// `matches[sid].is_some()`. The option contains the index of the literal\n    /// corresponding to the match. The index is offset by 1 so that it fits in\n    /// a NonZeroUsize.\n    matches: Vec<Option<NonZeroUsize>>,\n    /// The index to allocate to the next literal added to this trie. Starts at\n    /// 1 and increments by 1 for every literal successfully added to the trie.\n    next_literal_index: usize,\n}\n#[derive(Debug, Default)]\nstruct State {\n    /// Sparse representation of the transitions out of this state. Transitions\n    /// are sorted by byte. There is at most one such transition for any\n    /// particular byte.\n    trans: Vec<(u8, usize)>,\n}\nimpl PreferenceTrie {\n    fn minimize(literals: &mut Vec<Literal>, keep_exact: bool) {}\n    fn insert(&mut self, bytes: &[u8]) -> Result<usize, usize> {\n        let mut prev = self.root();\n        if let Some(idx) = self.matches[prev] {\n            return Err(idx.get());\n        }\n        for &b in bytes.iter() {\n            match self.states[prev].trans.binary_search_by_key(&b, |t| t.0) {\n                Ok(i) => {\n                    prev = self.states[prev].trans[i].1;\n                    if let Some(idx) = self.matches[prev] {\n                        return Err(idx.get());\n                    }\n                }\n                Err(i) => {\n                    let next = self.create_state();\n                    self.states[prev].trans.insert(i, (b, next));\n                    prev = next;\n                }\n            }\n        }\n        let idx = self.next_literal_index;\n        self.next_literal_index += 1;\n        self.matches[prev] = NonZeroUsize::new(idx);\n        Ok(idx)\n    }\n    fn root(&mut self) -> usize {\n        if !self.states.is_empty() { 0 } else { self.create_state() }\n    }\n    fn create_state(&mut self) -> usize {\n        let id = self.states.len();\n        self.states.push(State::default());\n        self.matches.push(None);\n        id\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns `Ok` if the given byte string is accepted into this trie and\n/// `Err` otherwise. The index for the success case corresponds to the\n/// index of the literal added. The index for the error case corresponds to\n/// the index of the literal already in the trie that prevented the given\n/// byte string from being added. (Which implies it is a prefix of the one\n/// given.)\n///\n/// In short, the byte string given is accepted into the trie if and only\n/// if it is possible for it to match when executing a preference order\n/// search.\n2268 fn insert(&mut self, bytes: &[u8]) -> Result<usize, usize> {\n2269     let mut prev = self.root();\n2270     if let Some(idx) = self.matches[prev] {\n2271         return Err(idx.get());\n2272     }\n2273     for &b in bytes.iter() {\n2274         match self.states[prev].trans.binary_search_by_key(&b, |t| t.0) {\n2275             Ok(i) => {\n2276                 prev = self.states[prev].trans[i].1;\n2277                 if let Some(idx) = self.matches[prev] {\n2278                     return Err(idx.get());\n2279                 }\n2280             }\n2281             Err(i) => {\n2282                 let next = self.create_state();\n2283                 self.states[prev].trans.insert(i, (b, next));\n2284                 prev = next;\n2285             }\n2286         }\n2287     }\n2288     let idx = self.next_literal_index;\n2289     self.next_literal_index += 1;\n2290     self.matches[prev] = NonZeroUsize::new(idx);\n2291     Ok(idx)\n2292 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}