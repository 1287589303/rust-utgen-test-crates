{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    pub fn kind(&self) -> &HirKind {\n        &self.kind\n    }\n    pub fn into_kind(mut self) -> HirKind {\n        core::mem::replace(&mut self.kind, HirKind::Empty)\n    }\n    pub fn properties(&self) -> &Properties {}\n    fn into_parts(mut self) -> (HirKind, Properties) {}\n}\nfn lift_common_prefix(hirs: Vec<Hir>) -> Result<Hir, Vec<Hir>> {\n    if hirs.len() <= 1 {\n        return Err(hirs);\n    }\n    let mut prefix = match hirs[0].kind() {\n        HirKind::Concat(ref xs) => &**xs,\n        _ => return Err(hirs),\n    };\n    if prefix.is_empty() {\n        return Err(hirs);\n    }\n    for h in hirs.iter().skip(1) {\n        let concat = match h.kind() {\n            HirKind::Concat(ref xs) => xs,\n            _ => return Err(hirs),\n        };\n        let common_len = prefix\n            .iter()\n            .zip(concat.iter())\n            .take_while(|(x, y)| x == y)\n            .count();\n        prefix = &prefix[..common_len];\n        if prefix.is_empty() {\n            return Err(hirs);\n        }\n    }\n    let len = prefix.len();\n    assert_ne!(0, len);\n    let mut prefix_concat = vec![];\n    let mut suffix_alts = vec![];\n    for h in hirs {\n        let mut concat = match h.into_kind() {\n            HirKind::Concat(xs) => xs,\n            _ => unreachable!(),\n        };\n        suffix_alts.push(Hir::concat(concat.split_off(len)));\n        if prefix_concat.is_empty() {\n            prefix_concat = concat;\n        }\n    }\n    let mut concat = prefix_concat;\n    concat.push(Hir::alternation(suffix_alts));\n    Ok(Hir::concat(concat))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Looks for a common prefix in the list of alternation branches given. If one\n/// is found, then an equivalent but (hopefully) simplified Hir is returned.\n/// Otherwise, the original given list of branches is returned unmodified.\n///\n/// This is not quite as good as it could be. Right now, it requires that\n/// all branches are 'Concat' expressions. It also doesn't do well with\n/// literals. For example, given 'foofoo|foobar', it will not refactor it to\n/// 'foo(?:foo|bar)' because literals are flattened into their own special\n/// concatenation. (One wonders if perhaps 'Literal' should be a single atom\n/// instead of a string of bytes because of this. Otherwise, handling the\n/// current representation in this routine will be pretty gnarly. Sigh.)\n3027 fn lift_common_prefix(hirs: Vec<Hir>) -> Result<Hir, Vec<Hir>> {\n3028     if hirs.len() <= 1 {\n3029         return Err(hirs);\n3030     }\n3031     let mut prefix = match hirs[0].kind() {\n3032         HirKind::Concat(ref xs) => &**xs,\n3033         _ => return Err(hirs),\n3034     };\n3035     if prefix.is_empty() {\n3036         return Err(hirs);\n3037     }\n3038     for h in hirs.iter().skip(1) {\n3039         let concat = match h.kind() {\n3040             HirKind::Concat(ref xs) => xs,\n3041             _ => return Err(hirs),\n3042         };\n3043         let common_len = prefix\n3044             .iter()\n3045             .zip(concat.iter())\n3046             .take_while(|(x, y)| x == y)\n3047             .count();\n3048         prefix = &prefix[..common_len];\n3049         if prefix.is_empty() {\n3050             return Err(hirs);\n3051         }\n3052     }\n3053     let len = prefix.len();\n3054     assert_ne!(0, len);\n3055     let mut prefix_concat = vec![];\n3056     let mut suffix_alts = vec![];\n3057     for h in hirs {\n3058         let mut concat = match h.into_kind() {\n3059             HirKind::Concat(xs) => xs,\n3060             // We required all sub-expressions to be\n3061             // concats above, so we're only here if we\n3062             // have a concat.\n3063             _ => unreachable!(),\n3064         };\n3065         suffix_alts.push(Hir::concat(concat.split_off(len)));\n3066         if prefix_concat.is_empty() {\n3067             prefix_concat = concat;\n3068         }\n3069     }\n3070     let mut concat = prefix_concat;\n3071     concat.push(Hir::alternation(suffix_alts));\n3072     Ok(Hir::concat(concat))\n3073 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}