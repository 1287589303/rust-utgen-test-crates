{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\nimpl Hir {\n    pub fn kind(&self) -> &HirKind {\n        &self.kind\n    }\n    pub fn into_kind(mut self) -> HirKind {\n        core::mem::replace(&mut self.kind, HirKind::Empty)\n    }\n    pub fn properties(&self) -> &Properties {}\n    fn into_parts(mut self) -> (HirKind, Properties) {}\n}\nfn lift_common_prefix(hirs: Vec<Hir>) -> Result<Hir, Vec<Hir>> {\n    if hirs.len() <= 1 {\n        return Err(hirs);\n    }\n    let mut prefix = match hirs[0].kind() {\n        HirKind::Concat(ref xs) => &**xs,\n        _ => return Err(hirs),\n    };\n    if prefix.is_empty() {\n        return Err(hirs);\n    }\n    for h in hirs.iter().skip(1) {\n        let concat = match h.kind() {\n            HirKind::Concat(ref xs) => xs,\n            _ => return Err(hirs),\n        };\n        let common_len = prefix\n            .iter()\n            .zip(concat.iter())\n            .take_while(|(x, y)| x == y)\n            .count();\n        prefix = &prefix[..common_len];\n        if prefix.is_empty() {\n            return Err(hirs);\n        }\n    }\n    let len = prefix.len();\n    assert_ne!(0, len);\n    let mut prefix_concat = vec![];\n    let mut suffix_alts = vec![];\n    for h in hirs {\n        let mut concat = match h.into_kind() {\n            HirKind::Concat(xs) => xs,\n            _ => unreachable!(),\n        };\n        suffix_alts.push(Hir::concat(concat.split_off(len)));\n        if prefix_concat.is_empty() {\n            prefix_concat = concat;\n        }\n    }\n    let mut concat = prefix_concat;\n    concat.push(Hir::alternation(suffix_alts));\n    Ok(Hir::concat(concat))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Looks for a common prefix in the list of alternation branches given. If one\n/// is found, then an equivalent but (hopefully) simplified Hir is returned.\n/// Otherwise, the original given list of branches is returned unmodified.\n///\n/// This is not quite as good as it could be. Right now, it requires that\n/// all branches are 'Concat' expressions. It also doesn't do well with\n/// literals. For example, given 'foofoo|foobar', it will not refactor it to\n/// 'foo(?:foo|bar)' because literals are flattened into their own special\n/// concatenation. (One wonders if perhaps 'Literal' should be a single atom\n/// instead of a string of bytes because of this. Otherwise, handling the\n/// current representation in this routine will be pretty gnarly. Sigh.)\n3027 fn lift_common_prefix(hirs: Vec<Hir>) -> Result<Hir, Vec<Hir>> {\n3028     if hirs.len() <= 1 {\n3029         return Err(hirs);\n3030     }\n3031     let mut prefix = match hirs[0].kind() {\n3032         HirKind::Concat(ref xs) => &**xs,\n3033         _ => return Err(hirs),\n3034     };\n3035     if prefix.is_empty() {\n3036         return Err(hirs);\n3037     }\n3038     for h in hirs.iter().skip(1) {\n3039         let concat = match h.kind() {\n3040             HirKind::Concat(ref xs) => xs,\n3041             _ => return Err(hirs),\n3042         };\n3043         let common_len = prefix\n3044             .iter()\n3045             .zip(concat.iter())\n3046             .take_while(|(x, y)| x == y)\n3047             .count();\n3048         prefix = &prefix[..common_len];\n3049         if prefix.is_empty() {\n3050             return Err(hirs);\n3051         }\n3052     }\n3053     let len = prefix.len();\n3054     assert_ne!(0, len);\n3055     let mut prefix_concat = vec![];\n3056     let mut suffix_alts = vec![];\n3057     for h in hirs {\n3058         let mut concat = match h.into_kind() {\n3059             HirKind::Concat(xs) => xs,\n3060             // We required all sub-expressions to be\n3061             // concats above, so we're only here if we\n3062             // have a concat.\n3063             _ => unreachable!(),\n3064         };\n3065         suffix_alts.push(Hir::concat(concat.split_off(len)));\n3066         if prefix_concat.is_empty() {\n3067             prefix_concat = concat;\n3068         }\n3069     }\n3070     let mut concat = prefix_concat;\n3071     concat.push(Hir::alternation(suffix_alts));\n3072     Ok(Hir::concat(concat))\n3073 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}