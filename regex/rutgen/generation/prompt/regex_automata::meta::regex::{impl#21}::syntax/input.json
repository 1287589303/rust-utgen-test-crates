{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\nimpl Builder {\n    pub fn new() -> Builder {}\n    pub fn build(&self, pattern: &str) -> Result<Regex, BuildError> {}\n    pub fn build_many<P: AsRef<str>>(\n        &self,\n        patterns: &[P],\n    ) -> Result<Regex, BuildError> {}\n    pub fn build_from_hir(&self, hir: &Hir) -> Result<Regex, BuildError> {}\n    pub fn build_many_from_hir<H: Borrow<Hir>>(\n        &self,\n        hirs: &[H],\n    ) -> Result<Regex, BuildError> {}\n    pub fn configure(&mut self, config: Config) -> &mut Builder {}\n    pub fn syntax(&mut self, config: crate::util::syntax::Config) -> &mut Builder {\n        config.apply_ast(&mut self.ast);\n        config.apply_hir(&mut self.hir);\n        self\n    }\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn case_insensitive(mut self, yes: bool) -> Config {}\n    pub fn multi_line(mut self, yes: bool) -> Config {}\n    pub fn dot_matches_new_line(mut self, yes: bool) -> Config {}\n    pub fn crlf(mut self, yes: bool) -> Config {}\n    pub fn line_terminator(mut self, byte: u8) -> Config {}\n    pub fn swap_greed(mut self, yes: bool) -> Config {}\n    pub fn ignore_whitespace(mut self, yes: bool) -> Config {}\n    pub fn unicode(mut self, yes: bool) -> Config {}\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn nest_limit(mut self, limit: u32) -> Config {}\n    pub fn octal(mut self, yes: bool) -> Config {}\n    pub fn get_unicode(&self) -> bool {}\n    pub fn get_case_insensitive(&self) -> bool {}\n    pub fn get_multi_line(&self) -> bool {}\n    pub fn get_dot_matches_new_line(&self) -> bool {}\n    pub fn get_crlf(&self) -> bool {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    pub fn get_swap_greed(&self) -> bool {}\n    pub fn get_ignore_whitespace(&self) -> bool {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn get_nest_limit(&self) -> u32 {}\n    pub fn get_octal(&self) -> bool {}\n    pub(crate) fn apply(&self, builder: &mut ParserBuilder) {}\n    pub(crate) fn apply_ast(&self, builder: &mut ast::parse::ParserBuilder) {\n        builder\n            .ignore_whitespace(self.ignore_whitespace)\n            .nest_limit(self.nest_limit)\n            .octal(self.octal);\n    }\n    pub(crate) fn apply_hir(&self, builder: &mut hir::translate::TranslatorBuilder) {\n        builder\n            .unicode(self.unicode)\n            .case_insensitive(self.case_insensitive)\n            .multi_line(self.multi_line)\n            .crlf(self.crlf)\n            .dot_matches_new_line(self.dot_matches_new_line)\n            .line_terminator(self.line_terminator)\n            .swap_greed(self.swap_greed)\n            .utf8(self.utf8);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Configure the syntax options when parsing a pattern string while\n/// building a `Regex`.\n///\n/// These options _only_ apply when [`Builder::build`] or [`Builder::build_many`]\n/// are used. The other build methods accept `Hir` values, which have\n/// already been parsed.\n///\n/// # Example\n///\n/// This example shows how to enable case insensitive mode.\n///\n/// ```\n/// use regex_automata::{meta::Regex, util::syntax, Match};\n///\n/// let re = Regex::builder()\n///     .syntax(syntax::Config::new().case_insensitive(true))\n///     .build(r\"δ\")?;\n/// assert_eq!(Some(Match::must(0, 0..2)), re.find(r\"Δ\"));\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n3626 pub fn syntax(\n3627     &mut self,\n3628     config: crate::util::syntax::Config,\n3629 ) -> &mut Builder {\n3630     config.apply_ast(&mut self.ast);\n3631     config.apply_hir(&mut self.hir);\n3632     self\n3633 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}