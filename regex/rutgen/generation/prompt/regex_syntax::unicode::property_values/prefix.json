{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn property_values(\n    canonical_property_name: &'static str,\n) -> Result<Option<PropertyValues>, Error> {\n    #[cfg(\n        not(\n            any(\n                feature = \"unicode-age\",\n                feature = \"unicode-bool\",\n                feature = \"unicode-gencat\",\n                feature = \"unicode-perl\",\n                feature = \"unicode-script\",\n                feature = \"unicode-segment\",\n            )\n        )\n    )]\n    fn imp(_: &'static str) -> Result<Option<PropertyValues>, Error> {\n        Err(Error::PropertyValueNotFound)\n    }\n    #[cfg(\n        any(\n            feature = \"unicode-age\",\n            feature = \"unicode-bool\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-perl\",\n            feature = \"unicode-script\",\n            feature = \"unicode-segment\",\n        )\n    )]\n    fn imp(name: &'static str) -> Result<Option<PropertyValues>, Error> {\n        use crate::unicode_tables::property_values::PROPERTY_VALUES;\n        Ok(\n            PROPERTY_VALUES\n                .binary_search_by_key(&name, |&(n, _)| n)\n                .ok()\n                .map(|i| PROPERTY_VALUES[i].1),\n        )\n    }\n    imp(canonical_property_name)\n}\n#[cfg(\n    any(\n        feature = \"unicode-age\",\n        feature = \"unicode-bool\",\n        feature = \"unicode-gencat\",\n        feature = \"unicode-perl\",\n        feature = \"unicode-script\",\n        feature = \"unicode-segment\",\n    )\n)]\nfn imp(name: &'static str) -> Result<Option<PropertyValues>, Error> {\n    use crate::unicode_tables::property_values::PROPERTY_VALUES;\n    Ok(\n        PROPERTY_VALUES\n            .binary_search_by_key(&name, |&(n, _)| n)\n            .ok()\n            .map(|i| PROPERTY_VALUES[i].1),\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the table of property values for the given property name.\n///\n/// If the property values data is not available, then an error is returned.\n587 fn property_values(\n588     canonical_property_name: &'static str,\n589 ) -> Result<Option<PropertyValues>, Error> {\n590     #[cfg(not(any(\n591         feature = \"unicode-age\",\n592         feature = \"unicode-bool\",\n593         feature = \"unicode-gencat\",\n594         feature = \"unicode-perl\",\n595         feature = \"unicode-script\",\n596         feature = \"unicode-segment\",\n597     )))]\n598     fn imp(_: &'static str) -> Result<Option<PropertyValues>, Error> {\n599         Err(Error::PropertyValueNotFound)\n600     }\n601 \n602     #[cfg(any(\n603         feature = \"unicode-age\",\n604         feature = \"unicode-bool\",\n605         feature = \"unicode-gencat\",\n606         feature = \"unicode-perl\",\n607         feature = \"unicode-script\",\n608         feature = \"unicode-segment\",\n609     ))]\n610     fn imp(name: &'static str) -> Result<Option<PropertyValues>, Error> {\n611         use crate::unicode_tables::property_values::PROPERTY_VALUES;\n612 \n613         Ok(PROPERTY_VALUES\n614             .binary_search_by_key(&name, |&(n, _)| n)\n615             .ok()\n616             .map(|i| PROPERTY_VALUES[i].1))\n617     }\n618 \n619     imp(canonical_property_name)\n620 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}