{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[derive(Clone, Debug)]\nstruct MatchStates<T> {\n    /// Slices is a flattened sequence of pairs, where each pair points to a\n    /// sub-slice of pattern_ids. The first element of the pair is an offset\n    /// into pattern_ids and the second element of the pair is the number\n    /// of 32-bit pattern IDs starting at that position. That is, each pair\n    /// corresponds to a single DFA match state and its corresponding match\n    /// IDs. The number of pairs always corresponds to the number of distinct\n    /// DFA match states.\n    ///\n    /// In practice, T is either Vec<u32> or &[u32].\n    slices: T,\n    /// A flattened sequence of pattern IDs for each DFA match state. The only\n    /// way to correctly read this sequence is indirectly via `slices`.\n    ///\n    /// In practice, T is either Vec<u32> or &[u32].\n    pattern_ids: T,\n    /// The total number of unique patterns represented by these match states.\n    pattern_len: usize,\n}\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl<'a> MatchStates<&'a [u32]> {\n    unsafe fn from_bytes_unchecked(\n        mut slice: &'a [u8],\n    ) -> Result<(MatchStates<&'a [u32]>, usize), DeserializeError> {\n        let slice_start = slice.as_ptr().as_usize();\n        let (state_len, nr) = wire::try_read_u32_as_usize(slice, \"match state length\")?;\n        slice = &slice[nr..];\n        let pair_len = wire::mul(2, state_len, \"match state offset pairs\")?;\n        let slices_bytes_len = wire::mul(\n            pair_len,\n            PatternID::SIZE,\n            \"match state slice offset byte length\",\n        )?;\n        wire::check_slice_len(slice, slices_bytes_len, \"match state slices\")?;\n        wire::check_alignment::<PatternID>(slice)?;\n        let slices_bytes = &slice[..slices_bytes_len];\n        slice = &slice[slices_bytes_len..];\n        let slices = core::slice::from_raw_parts(\n            slices_bytes.as_ptr().cast::<u32>(),\n            pair_len,\n        );\n        let (pattern_len, nr) = wire::try_read_u32_as_usize(slice, \"pattern length\")?;\n        slice = &slice[nr..];\n        let (idlen, nr) = wire::try_read_u32_as_usize(slice, \"pattern ID length\")?;\n        slice = &slice[nr..];\n        let pattern_ids_len = wire::mul(\n            idlen,\n            PatternID::SIZE,\n            \"pattern ID byte length\",\n        )?;\n        wire::check_slice_len(slice, pattern_ids_len, \"match pattern IDs\")?;\n        wire::check_alignment::<PatternID>(slice)?;\n        let pattern_ids_bytes = &slice[..pattern_ids_len];\n        slice = &slice[pattern_ids_len..];\n        let pattern_ids = core::slice::from_raw_parts(\n            pattern_ids_bytes.as_ptr().cast::<u32>(),\n            idlen,\n        );\n        let ms = MatchStates {\n            slices,\n            pattern_ids,\n            pattern_len,\n        };\n        Ok((ms, slice.as_ptr().as_usize() - slice_start))\n    }\n}\npub(crate) fn check_alignment<T>(slice: &[u8]) -> Result<(), DeserializeError> {\n    let alignment = core::mem::align_of::<T>();\n    let address = slice.as_ptr().as_usize();\n    if address % alignment == 0 {\n        return Ok(());\n    }\n    Err(DeserializeError::alignment_mismatch(alignment, address))\n}\npub(crate) fn mul(\n    a: usize,\n    b: usize,\n    what: &'static str,\n) -> Result<usize, DeserializeError> {\n    match a.checked_mul(b) {\n        Some(c) => Ok(c),\n        None => Err(DeserializeError::arithmetic_overflow(what)),\n    }\n}\npub(crate) fn try_read_u32_as_usize(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(usize, usize), DeserializeError> {\n    try_read_u32(slice, what)\n        .and_then(|(n, nr)| {\n            usize::try_from(n)\n                .map(|n| (n, nr))\n                .map_err(|_| DeserializeError::invalid_usize(what))\n        })\n}\npub(crate) fn check_slice_len<T>(\n    slice: &[T],\n    at_least_len: usize,\n    what: &'static str,\n) -> Result<(), DeserializeError> {\n    if slice.len() < at_least_len {\n        return Err(DeserializeError::buffer_too_small(what));\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n4356 unsafe fn from_bytes_unchecked(\n4357     mut slice: &'a [u8],\n4358 ) -> Result<(MatchStates<&'a [u32]>, usize), DeserializeError> {\n4359     let slice_start = slice.as_ptr().as_usize();\n4360 \n4361     // Read the total number of match states.\n4362     let (state_len, nr) =\n4363         wire::try_read_u32_as_usize(slice, \"match state length\")?;\n4364     slice = &slice[nr..];\n4365 \n4366     // Read the slice start/length pairs.\n4367     let pair_len = wire::mul(2, state_len, \"match state offset pairs\")?;\n4368     let slices_bytes_len = wire::mul(\n4369         pair_len,\n4370         PatternID::SIZE,\n4371         \"match state slice offset byte length\",\n4372     )?;\n4373     wire::check_slice_len(slice, slices_bytes_len, \"match state slices\")?;\n4374     wire::check_alignment::<PatternID>(slice)?;\n4375     let slices_bytes = &slice[..slices_bytes_len];\n4376     slice = &slice[slices_bytes_len..];\n4377     // SAFETY: Since PatternID is always representable as a u32, all we\n4378     // need to do is ensure that we have the proper length and alignment.\n4379     // We've checked both above, so the cast below is safe.\n4380     //\n4381     // N.B. This is one of the few not-safe snippets in this function,\n4382     // so we mark it explicitly to call it out.\n4383     let slices = core::slice::from_raw_parts(\n4384         slices_bytes.as_ptr().cast::<u32>(),\n4385         pair_len,\n4386     );\n4387 \n4388     // Read the total number of unique pattern IDs (which is always 1 more\n4389     // than the maximum pattern ID in this automaton, since pattern IDs are\n4390     // handed out contiguously starting at 0).\n4391     let (pattern_len, nr) =\n4392         wire::try_read_u32_as_usize(slice, \"pattern length\")?;\n4393     slice = &slice[nr..];\n4394 \n4395     // Now read the pattern ID length. We don't need to store this\n4396     // explicitly, but we need it to know how many pattern IDs to read.\n4397     let (idlen, nr) =\n4398         wire::try_read_u32_as_usize(slice, \"pattern ID length\")?;\n4399     slice = &slice[nr..];\n4400 \n4401     // Read the actual pattern IDs.\n4402     let pattern_ids_len =\n4403         wire::mul(idlen, PatternID::SIZE, \"pattern ID byte length\")?;\n4404     wire::check_slice_len(slice, pattern_ids_len, \"match pattern IDs\")?;\n4405     wire::check_alignment::<PatternID>(slice)?;\n4406     let pattern_ids_bytes = &slice[..pattern_ids_len];\n4407     slice = &slice[pattern_ids_len..];\n4408     // SAFETY: Since PatternID is always representable as a u32, all we\n4409     // need to do is ensure that we have the proper length and alignment.\n4410     // We've checked both above, so the cast below is safe.\n4411     //\n4412     // N.B. This is one of the few not-safe snippets in this function,\n4413     // so we mark it explicitly to call it out.\n4414     let pattern_ids = core::slice::from_raw_parts(\n4415         pattern_ids_bytes.as_ptr().cast::<u32>(),\n4416         idlen,\n4417     );\n4418 \n4419     let ms = MatchStates { slices, pattern_ids, pattern_len };\n4420     Ok((ms, slice.as_ptr().as_usize() - slice_start))\n4421 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}