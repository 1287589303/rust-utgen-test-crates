{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Utf8Range {\n    /// Start of byte range (inclusive).\n    pub start: u8,\n    /// End of byte range (inclusive).\n    pub end: u8,\n}\n#[derive(Copy, Clone, Eq, PartialEq, PartialOrd, Ord)]\npub enum Utf8Sequence {\n    /// One byte range.\n    One(Utf8Range),\n    /// Two successive byte ranges.\n    Two([Utf8Range; 2]),\n    /// Three successive byte ranges.\n    Three([Utf8Range; 3]),\n    /// Four successive byte ranges.\n    Four([Utf8Range; 4]),\n}\nimpl fmt::Debug for Utf8Sequence {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        use self::Utf8Sequence::*;\n        match *self {\n            One(ref r) => write!(f, \"{:?}\", r),\n            Two(ref r) => write!(f, \"{:?}{:?}\", r[0], r[1]),\n            Three(ref r) => write!(f, \"{:?}{:?}{:?}\", r[0], r[1], r[2]),\n            Four(ref r) => write!(f, \"{:?}{:?}{:?}{:?}\", r[0], r[1], r[2], r[3]),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n203 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n204     use self::Utf8Sequence::*;\n205     match *self {\n206         One(ref r) => write!(f, \"{:?}\", r),\n207         Two(ref r) => write!(f, \"{:?}{:?}\", r[0], r[1]),\n208         Three(ref r) => write!(f, \"{:?}{:?}{:?}\", r[0], r[1], r[2]),\n209         Four(ref r) => {\n210             write!(f, \"{:?}{:?}{:?}{:?}\", r[0], r[1], r[2], r[3])\n211         }\n212     }\n213 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}