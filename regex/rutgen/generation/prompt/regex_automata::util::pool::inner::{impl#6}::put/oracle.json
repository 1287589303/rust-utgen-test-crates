{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\nuse core::{\n    cell::UnsafeCell, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicBool, Ordering},\n};\nuse alloc::{boxed::Box, vec, vec::Vec};\npub(super) struct PoolGuard<'a, T: Send, F: Fn() -> T> {\n    /// The pool that this guard is attached to.\n    pool: &'a Pool<T, F>,\n    /// This is None after the guard has been put back into the pool.\n    value: Option<Box<T>>,\n}\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\npub struct Pool<T, F = fn() -> T>(alloc::boxed::Box<inner::Pool<T, F>>);\nimpl<'a, T: Send, F: Fn() -> T> PoolGuard<'a, T, F> {\n    #[inline]\n    pub(super) fn value(&self) -> &T {}\n    #[inline]\n    pub(super) fn value_mut(&mut self) -> &mut T {}\n    #[inline]\n    pub(super) fn put(this: PoolGuard<'_, T, F>) {\n        let mut this = core::mem::ManuallyDrop::new(this);\n        this.put_imp();\n    }\n    #[inline(always)]\n    fn put_imp(&mut self) {\n        if let Some(value) = self.value.take() {\n            self.pool.put_value(value);\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Consumes this guard and puts it back into the pool.\n729 pub(super) fn put(this: PoolGuard<'_, T, F>) {\n730     // Since this is effectively consuming the guard and putting the\n731     // value back into the pool, there's no reason to run its Drop\n732     // impl after doing this. I don't believe there is a correctness\n733     // problem with doing so, but there's definitely a perf problem\n734     // by redoing this work. So we avoid it.\n735     let mut this = core::mem::ManuallyDrop::new(this);\n736     this.put_imp();\n737 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}