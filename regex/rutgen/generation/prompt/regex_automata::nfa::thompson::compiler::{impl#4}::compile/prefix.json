{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Clone, Debug)]\npub struct Compiler {\n    /// A regex parser, used when compiling an NFA directly from a pattern\n    /// string.\n    parser: ParserBuilder,\n    /// The compiler configuration.\n    config: Config,\n    /// The builder for actually constructing an NFA. This provides a\n    /// convenient abstraction for writing a compiler.\n    builder: RefCell<Builder>,\n    /// State used for compiling character classes to UTF-8 byte automata.\n    /// State is not retained between character class compilations. This just\n    /// serves to amortize allocation to the extent possible.\n    utf8_state: RefCell<Utf8State>,\n    /// State used for arranging character classes in reverse into a trie.\n    trie_state: RefCell<RangeTrie>,\n    /// State used for caching common suffixes when compiling reverse UTF-8\n    /// automata (for Unicode character classes).\n    utf8_suffix: RefCell<Utf8SuffixMap>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Debug, Default)]\npub struct Builder {\n    /// The ID of the pattern that we're currently building.\n    ///\n    /// Callers are required to set (and unset) this by calling\n    /// {start,finish}_pattern. Otherwise, most methods will panic.\n    pattern_id: Option<PatternID>,\n    /// A sequence of intermediate NFA states. Once a state is added to this\n    /// sequence, it is assigned a state ID equivalent to its index. Once a\n    /// state is added, it is still expected to be mutated, e.g., to set its\n    /// transition to a state that didn't exist at the time it was added.\n    states: Vec<State>,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// A map from pattern ID to capture group index to name. (If no name\n    /// exists, then a None entry is present. Thus, all capturing groups are\n    /// present in this mapping.)\n    ///\n    /// The outer vec is indexed by pattern ID, while the inner vec is indexed\n    /// by capture index offset for the corresponding pattern.\n    ///\n    /// The first capture group for each pattern is always unnamed and is thus\n    /// always None.\n    captures: Vec<Vec<Option<Arc<str>>>>,\n    /// The combined memory used by each of the 'State's in 'states'. This\n    /// only includes heap usage by each state, and not the size of the state\n    /// itself. In other words, this tracks heap memory used that isn't\n    /// captured via `size_of::<State>() * states.len()`.\n    memory_states: usize,\n    /// Whether this NFA only matches UTF-8 and whether regex engines using\n    /// this NFA for searching should report empty matches that split a\n    /// codepoint.\n    utf8: bool,\n    /// Whether this NFA should be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to use for look-around assertions.\n    look_matcher: LookMatcher,\n    /// A size limit to respect when building an NFA. If the total heap memory\n    /// of the intermediate NFA states exceeds (or would exceed) this amount,\n    /// then an error is returned.\n    size_limit: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    #[cfg(feature = \"dfa-build\")]\n    dfa: dense::Builder,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone)]\npub struct RangeTrie {\n    /// The states in this trie. The first is always the shared final state.\n    /// The second is always the root state. Otherwise, there is no\n    /// particular order.\n    states: Vec<State>,\n    /// A free-list of states. When a range trie is cleared, all of its states\n    /// are added to this list. Creating a new state reuses states from this\n    /// list before allocating a new one.\n    free: Vec<State>,\n    /// A stack for traversing this trie to yield sequences of byte ranges in\n    /// lexicographic order.\n    iter_stack: RefCell<Vec<NextIter>>,\n    /// A buffer that stores the current sequence during iteration.\n    iter_ranges: RefCell<Vec<Utf8Range>>,\n    /// A stack used for traversing the trie in order to (deeply) duplicate\n    /// a state. States are recursively duplicated when ranges are split.\n    dupe_stack: Vec<NextDupe>,\n    /// A stack used for traversing the trie during insertion of a new\n    /// sequence of byte ranges.\n    insert_stack: Vec<NextInsert>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    dfa: dfa::Builder,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct ThompsonRef {\n    pub(crate) start: StateID,\n    pub(crate) end: StateID,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\nstruct Utf8State {\n    compiled: Utf8BoundedMap,\n    uncompiled: Vec<Utf8Node>,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Utf8SuffixMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8SuffixEntry>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Copy, Debug)]\npub enum WhichCaptures {\n    /// All capture states, including those corresponding to both implicit and\n    /// explicit capture groups, are included in the Thompson NFA.\n    All,\n    /// Only capture states corresponding to implicit capture groups are\n    /// included. Implicit capture groups appear in every pattern implicitly\n    /// and correspond to the overall match of a pattern.\n    ///\n    /// This is useful when one only cares about the overall match of a\n    /// pattern. By excluding capture states from explicit capture groups,\n    /// one might be able to reduce the memory usage of a multi-pattern regex\n    /// substantially if it was otherwise written to have many explicit capture\n    /// groups.\n    Implicit,\n    /// No capture states are compiled into the Thompson NFA.\n    ///\n    /// This is useful when capture states are either not needed (for example,\n    /// if one is only trying to build a DFA) or if they aren't supported (for\n    /// example, a reverse NFA).\n    None,\n}\nimpl Compiler {\n    fn compile<H: Borrow<Hir>>(&self, exprs: &[H]) -> Result<NFA, BuildError> {\n        if exprs.len() > PatternID::LIMIT {\n            return Err(BuildError::too_many_patterns(exprs.len()));\n        }\n        if self.config.get_reverse() && self.config.get_which_captures().is_any() {\n            return Err(BuildError::unsupported_captures());\n        }\n        self.builder.borrow_mut().clear();\n        self.builder.borrow_mut().set_utf8(self.config.get_utf8());\n        self.builder.borrow_mut().set_reverse(self.config.get_reverse());\n        self.builder.borrow_mut().set_look_matcher(self.config.get_look_matcher());\n        self.builder.borrow_mut().set_size_limit(self.config.get_nfa_size_limit())?;\n        let all_anchored = exprs\n            .iter()\n            .all(|e| {\n                let props = e.borrow().properties();\n                if self.config.get_reverse() {\n                    props.look_set_suffix().contains(hir::Look::End)\n                } else {\n                    props.look_set_prefix().contains(hir::Look::Start)\n                }\n            });\n        let anchored = !self.config.get_unanchored_prefix() || all_anchored;\n        let unanchored_prefix = if anchored {\n            self.c_empty()?\n        } else {\n            self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?\n        };\n        let compiled = self\n            .c_alt_iter(\n                exprs\n                    .iter()\n                    .map(|e| {\n                        let _ = self.start_pattern()?;\n                        let one = self.c_cap(0, None, e.borrow())?;\n                        let match_state_id = self.add_match()?;\n                        self.patch(one.end, match_state_id)?;\n                        let _ = self.finish_pattern(one.start)?;\n                        Ok(ThompsonRef {\n                            start: one.start,\n                            end: match_state_id,\n                        })\n                    }),\n            )?;\n        self.patch(unanchored_prefix.end, compiled.start)?;\n        let nfa = self\n            .builder\n            .borrow_mut()\n            .build(compiled.start, unanchored_prefix.start)?;\n        debug!(\"HIR-to-NFA compilation complete, config: {:?}\", self.config);\n        Ok(nfa)\n    }\n    fn c(&self, expr: &Hir) -> Result<ThompsonRef, BuildError> {}\n    fn c_concat<I>(&self, mut it: I) -> Result<ThompsonRef, BuildError>\n    where\n        I: DoubleEndedIterator<Item = Result<ThompsonRef, BuildError>>,\n    {}\n    fn c_alt_slice(&self, exprs: &[Hir]) -> Result<ThompsonRef, BuildError> {}\n    fn c_alt_iter<I>(&self, mut it: I) -> Result<ThompsonRef, BuildError>\n    where\n        I: Iterator<Item = Result<ThompsonRef, BuildError>>,\n    {}\n    fn c_cap(\n        &self,\n        index: u32,\n        name: Option<&str>,\n        expr: &Hir,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_repetition(&self, rep: &hir::Repetition) -> Result<ThompsonRef, BuildError> {}\n    fn c_bounded(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_at_least(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n        n: u32,\n    ) -> Result<ThompsonRef, BuildError> {\n        if n == 0 {\n            if expr.properties().minimum_len().map_or(false, |len| len > 0) {\n                let union = if greedy {\n                    self.add_union()\n                } else {\n                    self.add_union_reverse()\n                }?;\n                let compiled = self.c(expr)?;\n                self.patch(union, compiled.start)?;\n                self.patch(compiled.end, union)?;\n                return Ok(ThompsonRef {\n                    start: union,\n                    end: union,\n                });\n            }\n            let compiled = self.c(expr)?;\n            let plus = if greedy { self.add_union() } else { self.add_union_reverse() }?;\n            self.patch(compiled.end, plus)?;\n            self.patch(plus, compiled.start)?;\n            let question = if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?;\n            let empty = self.add_empty()?;\n            self.patch(question, compiled.start)?;\n            self.patch(question, empty)?;\n            self.patch(plus, empty)?;\n            Ok(ThompsonRef {\n                start: question,\n                end: empty,\n            })\n        } else if n == 1 {\n            let compiled = self.c(expr)?;\n            let union = if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?;\n            self.patch(compiled.end, union)?;\n            self.patch(union, compiled.start)?;\n            Ok(ThompsonRef {\n                start: compiled.start,\n                end: union,\n            })\n        } else {\n            let prefix = self.c_exactly(expr, n - 1)?;\n            let last = self.c(expr)?;\n            let union = if greedy {\n                self.add_union()\n            } else {\n                self.add_union_reverse()\n            }?;\n            self.patch(prefix.end, last.start)?;\n            self.patch(last.end, union)?;\n            self.patch(union, last.start)?;\n            Ok(ThompsonRef {\n                start: prefix.start,\n                end: union,\n            })\n        }\n    }\n    fn c_zero_or_one(\n        &self,\n        expr: &Hir,\n        greedy: bool,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_exactly(&self, expr: &Hir, n: u32) -> Result<ThompsonRef, BuildError> {}\n    fn c_byte_class(&self, cls: &hir::ClassBytes) -> Result<ThompsonRef, BuildError> {}\n    fn c_unicode_class(\n        &self,\n        cls: &hir::ClassUnicode,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_unicode_class_reverse_with_suffix(\n        &self,\n        cls: &hir::ClassUnicode,\n    ) -> Result<ThompsonRef, BuildError> {}\n    fn c_look(&self, anchor: &hir::Look) -> Result<ThompsonRef, BuildError> {}\n    fn c_literal(&self, bytes: &[u8]) -> Result<ThompsonRef, BuildError> {}\n    fn c_range(&self, start: u8, end: u8) -> Result<ThompsonRef, BuildError> {}\n    fn c_empty(&self) -> Result<ThompsonRef, BuildError> {\n        let id = self.add_empty()?;\n        Ok(ThompsonRef { start: id, end: id })\n    }\n    fn c_fail(&self) -> Result<ThompsonRef, BuildError> {}\n    fn patch(&self, from: StateID, to: StateID) -> Result<(), BuildError> {\n        self.builder.borrow_mut().patch(from, to)\n    }\n    fn start_pattern(&self) -> Result<PatternID, BuildError> {}\n    fn finish_pattern(&self, start_id: StateID) -> Result<PatternID, BuildError> {}\n    fn add_empty(&self) -> Result<StateID, BuildError> {}\n    fn add_range(&self, start: u8, end: u8) -> Result<StateID, BuildError> {}\n    fn add_sparse(&self, ranges: Vec<Transition>) -> Result<StateID, BuildError> {}\n    fn add_look(&self, mut look: Look) -> Result<StateID, BuildError> {}\n    fn add_union(&self) -> Result<StateID, BuildError> {}\n    fn add_union_reverse(&self) -> Result<StateID, BuildError> {}\n    fn add_capture_start(\n        &self,\n        capture_index: u32,\n        name: Option<&str>,\n    ) -> Result<StateID, BuildError> {}\n    fn add_capture_end(&self, capture_index: u32) -> Result<StateID, BuildError> {}\n    fn add_fail(&self) -> Result<StateID, BuildError> {}\n    fn add_match(&self) -> Result<StateID, BuildError> {}\n    fn is_reverse(&self) -> bool {}\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn reverse(mut self, yes: bool) -> Config {}\n    pub fn nfa_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn shrink(mut self, yes: bool) -> Config {}\n    #[deprecated(since = \"0.3.5\", note = \"use which_captures instead\")]\n    pub fn captures(self, yes: bool) -> Config {}\n    pub fn which_captures(mut self, which_captures: WhichCaptures) -> Config {}\n    pub fn look_matcher(mut self, m: LookMatcher) -> Config {}\n    #[cfg(test)]\n    fn unanchored_prefix(mut self, yes: bool) -> Config {}\n    pub fn get_utf8(&self) -> bool {\n        self.utf8.unwrap_or(true)\n    }\n    pub fn get_reverse(&self) -> bool {\n        self.reverse.unwrap_or(false)\n    }\n    pub fn get_nfa_size_limit(&self) -> Option<usize> {\n        self.nfa_size_limit.unwrap_or(None)\n    }\n    pub fn get_shrink(&self) -> bool {}\n    #[deprecated(since = \"0.3.5\", note = \"use get_which_captures instead\")]\n    pub fn get_captures(&self) -> bool {}\n    pub fn get_which_captures(&self) -> WhichCaptures {\n        self.which_captures.unwrap_or(WhichCaptures::All)\n    }\n    pub fn get_look_matcher(&self) -> LookMatcher {\n        self.look_matcher.clone().unwrap_or(LookMatcher::default())\n    }\n    fn get_unanchored_prefix(&self) -> bool {\n        #[cfg(test)] { self.unanchored_prefix.unwrap_or(true) }\n        #[cfg(not(test))] { true }\n    }\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\nimpl BuildError {\n    pub fn size_limit(&self) -> Option<usize> {}\n    fn kind(&self) -> &BuildErrorKind {}\n    #[cfg(feature = \"syntax\")]\n    pub(crate) fn syntax(err: regex_syntax::Error) -> BuildError {}\n    pub(crate) fn captures(err: captures::GroupInfoError) -> BuildError {}\n    pub(crate) fn word(err: look::UnicodeWordBoundaryError) -> BuildError {}\n    pub(crate) fn too_many_patterns(given: usize) -> BuildError {\n        let limit = PatternID::LIMIT;\n        BuildError {\n            kind: BuildErrorKind::TooManyPatterns {\n                given,\n                limit,\n            },\n        }\n    }\n    pub(crate) fn too_many_states(given: usize) -> BuildError {}\n    pub(crate) fn exceeded_size_limit(limit: usize) -> BuildError {}\n    pub(crate) fn invalid_capture_index(index: u32) -> BuildError {}\n    #[cfg(feature = \"syntax\")]\n    pub(crate) fn unsupported_captures() -> BuildError {\n        BuildError {\n            kind: BuildErrorKind::UnsupportedCaptures,\n        }\n    }\n}\nimpl WhichCaptures {\n    pub fn is_none(&self) -> bool {}\n    pub fn is_any(&self) -> bool {\n        !self.is_none()\n    }\n}\nimpl Builder {\n    pub fn new() -> Builder {}\n    pub fn clear(&mut self) {\n        self.pattern_id = None;\n        self.states.clear();\n        self.start_pattern.clear();\n        self.captures.clear();\n        self.memory_states = 0;\n    }\n    pub fn build(\n        &self,\n        start_anchored: StateID,\n        start_unanchored: StateID,\n    ) -> Result<NFA, BuildError> {\n        assert!(self.pattern_id.is_none(), \"must call 'finish_pattern' first\");\n        debug!(\n            \"intermediate NFA compilation via builder is complete, \\\n             intermediate NFA size: {} states, {} bytes on heap\",\n            self.states.len(), self.memory_usage(),\n        );\n        let mut nfa = nfa::Inner::default();\n        nfa.set_utf8(self.utf8);\n        nfa.set_reverse(self.reverse);\n        nfa.set_look_matcher(self.look_matcher.clone());\n        let mut empties = vec![];\n        let mut remap = vec![];\n        remap.resize(self.states.len(), StateID::ZERO);\n        nfa.set_starts(start_anchored, start_unanchored, &self.start_pattern);\n        nfa.set_captures(&self.captures).map_err(BuildError::captures)?;\n        for (sid, state) in self.states.iter().with_state_ids() {\n            match *state {\n                State::Empty { next } => {\n                    empties.push((sid, next));\n                }\n                State::ByteRange { trans } => {\n                    remap[sid] = nfa.add(nfa::State::ByteRange { trans });\n                }\n                State::Sparse { ref transitions } => {\n                    remap[sid] = match transitions.len() {\n                        0 => nfa.add(nfa::State::Fail),\n                        1 => {\n                            nfa.add(nfa::State::ByteRange {\n                                trans: transitions[0],\n                            })\n                        }\n                        _ => {\n                            let transitions = transitions.to_vec().into_boxed_slice();\n                            let sparse = SparseTransitions { transitions };\n                            nfa.add(nfa::State::Sparse(sparse))\n                        }\n                    };\n                }\n                State::Look { look, next } => {\n                    remap[sid] = nfa.add(nfa::State::Look { look, next });\n                }\n                State::CaptureStart { pattern_id, group_index, next } => {\n                    let slot = nfa\n                        .group_info()\n                        .slot(pattern_id, group_index.as_usize())\n                        .expect(\"invalid capture index\");\n                    let slot = SmallIndex::new(slot).expect(\"a small enough slot\");\n                    remap[sid] = nfa\n                        .add(nfa::State::Capture {\n                            next,\n                            pattern_id,\n                            group_index,\n                            slot,\n                        });\n                }\n                State::CaptureEnd { pattern_id, group_index, next } => {\n                    let slot = nfa\n                        .group_info()\n                        .slot(pattern_id, group_index.as_usize())\n                        .expect(\"invalid capture index\")\n                        .checked_add(1)\n                        .unwrap();\n                    let slot = SmallIndex::new(slot).expect(\"a small enough slot\");\n                    remap[sid] = nfa\n                        .add(nfa::State::Capture {\n                            next,\n                            pattern_id,\n                            group_index,\n                            slot,\n                        });\n                }\n                State::Union { ref alternates } => {\n                    if alternates.is_empty() {\n                        remap[sid] = nfa.add(nfa::State::Fail);\n                    } else if alternates.len() == 1 {\n                        empties.push((sid, alternates[0]));\n                        remap[sid] = alternates[0];\n                    } else if alternates.len() == 2 {\n                        remap[sid] = nfa\n                            .add(nfa::State::BinaryUnion {\n                                alt1: alternates[0],\n                                alt2: alternates[1],\n                            });\n                    } else {\n                        let alternates = alternates.to_vec().into_boxed_slice();\n                        remap[sid] = nfa.add(nfa::State::Union { alternates });\n                    }\n                }\n                State::UnionReverse { ref alternates } => {\n                    if alternates.is_empty() {\n                        remap[sid] = nfa.add(nfa::State::Fail);\n                    } else if alternates.len() == 1 {\n                        empties.push((sid, alternates[0]));\n                        remap[sid] = alternates[0];\n                    } else if alternates.len() == 2 {\n                        remap[sid] = nfa\n                            .add(nfa::State::BinaryUnion {\n                                alt1: alternates[1],\n                                alt2: alternates[0],\n                            });\n                    } else {\n                        let mut alternates = alternates.to_vec().into_boxed_slice();\n                        alternates.reverse();\n                        remap[sid] = nfa.add(nfa::State::Union { alternates });\n                    }\n                }\n                State::Fail => {\n                    remap[sid] = nfa.add(nfa::State::Fail);\n                }\n                State::Match { pattern_id } => {\n                    remap[sid] = nfa.add(nfa::State::Match { pattern_id });\n                }\n            }\n        }\n        let mut remapped = vec![false; self.states.len()];\n        for &(empty_id, empty_next) in empties.iter() {\n            if remapped[empty_id] {\n                continue;\n            }\n            let mut new_next = empty_next;\n            while let Some(next) = self.states[new_next].goto() {\n                new_next = next;\n            }\n            remap[empty_id] = remap[new_next];\n            remapped[empty_id] = true;\n            let mut next2 = empty_next;\n            while let Some(next) = self.states[next2].goto() {\n                remap[next2] = remap[new_next];\n                remapped[next2] = true;\n                next2 = next;\n            }\n        }\n        nfa.remap(&remap);\n        let final_nfa = nfa.into_nfa();\n        debug!(\n            \"NFA compilation via builder complete, \\\n             final NFA size: {} states, {} bytes on heap, \\\n             has empty? {:?}, utf8? {:?}\",\n            final_nfa.states().len(), final_nfa.memory_usage(), final_nfa.has_empty(),\n            final_nfa.is_utf8(),\n        );\n        Ok(final_nfa)\n    }\n    pub fn start_pattern(&mut self) -> Result<PatternID, BuildError> {}\n    pub fn finish_pattern(\n        &mut self,\n        start_id: StateID,\n    ) -> Result<PatternID, BuildError> {}\n    pub fn current_pattern_id(&self) -> PatternID {}\n    pub fn pattern_len(&self) -> usize {}\n    pub fn add_empty(&mut self) -> Result<StateID, BuildError> {}\n    pub fn add_union(\n        &mut self,\n        alternates: Vec<StateID>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_union_reverse(\n        &mut self,\n        alternates: Vec<StateID>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_range(&mut self, trans: Transition) -> Result<StateID, BuildError> {}\n    pub fn add_sparse(\n        &mut self,\n        transitions: Vec<Transition>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_look(\n        &mut self,\n        next: StateID,\n        look: Look,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_capture_start(\n        &mut self,\n        next: StateID,\n        group_index: u32,\n        name: Option<Arc<str>>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_capture_end(\n        &mut self,\n        next: StateID,\n        group_index: u32,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_fail(&mut self) -> Result<StateID, BuildError> {}\n    pub fn add_match(&mut self) -> Result<StateID, BuildError> {}\n    fn add(&mut self, state: State) -> Result<StateID, BuildError> {}\n    pub fn patch(&mut self, from: StateID, to: StateID) -> Result<(), BuildError> {}\n    pub fn set_utf8(&mut self, yes: bool) {\n        self.utf8 = yes;\n    }\n    pub fn get_utf8(&self) -> bool {}\n    pub fn set_reverse(&mut self, yes: bool) {\n        self.reverse = yes;\n    }\n    pub fn get_reverse(&self) -> bool {}\n    pub fn set_look_matcher(&mut self, m: LookMatcher) {\n        self.look_matcher = m;\n    }\n    pub fn get_look_matcher(&self) -> &LookMatcher {}\n    pub fn set_size_limit(&mut self, limit: Option<usize>) -> Result<(), BuildError> {\n        self.size_limit = limit;\n        self.check_size_limit()\n    }\n    pub fn get_size_limit(&self) -> Option<usize> {}\n    pub fn memory_usage(&self) -> usize {}\n    fn check_size_limit(&self) -> Result<(), BuildError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compile the sequence of HIR expressions given. Pattern IDs are\n/// allocated starting from 0, in correspondence with the slice given.\n///\n/// It is legal to provide an empty slice. In that case, the NFA returned\n/// has no patterns and will never match anything.\n939 fn compile<H: Borrow<Hir>>(&self, exprs: &[H]) -> Result<NFA, BuildError> {\n940     if exprs.len() > PatternID::LIMIT {\n941         return Err(BuildError::too_many_patterns(exprs.len()));\n942     }\n943     if self.config.get_reverse()\n944         && self.config.get_which_captures().is_any()\n945     {\n946         return Err(BuildError::unsupported_captures());\n947     }\n948 \n949     self.builder.borrow_mut().clear();\n950     self.builder.borrow_mut().set_utf8(self.config.get_utf8());\n951     self.builder.borrow_mut().set_reverse(self.config.get_reverse());\n952     self.builder\n953         .borrow_mut()\n954         .set_look_matcher(self.config.get_look_matcher());\n955     self.builder\n956         .borrow_mut()\n957         .set_size_limit(self.config.get_nfa_size_limit())?;\n958 \n959     // We always add an unanchored prefix unless we were specifically told\n960     // not to (for tests only), or if we know that the regex is anchored\n961     // for all matches. When an unanchored prefix is not added, then the\n962     // NFA's anchored and unanchored start states are equivalent.\n963     let all_anchored = exprs.iter().all(|e| {\n964         let props = e.borrow().properties();\n965         if self.config.get_reverse() {\n966             props.look_set_suffix().contains(hir::Look::End)\n967         } else {\n968             props.look_set_prefix().contains(hir::Look::Start)\n969         }\n970     });\n971     let anchored = !self.config.get_unanchored_prefix() || all_anchored;\n972     let unanchored_prefix = if anchored {\n973         self.c_empty()?\n974     } else {\n975         self.c_at_least(&Hir::dot(hir::Dot::AnyByte), false, 0)?\n976     };\n977 \n978     let compiled = self.c_alt_iter(exprs.iter().map(|e| {\n979         let _ = self.start_pattern()?;\n980         let one = self.c_cap(0, None, e.borrow())?;\n981         let match_state_id = self.add_match()?;\n982         self.patch(one.end, match_state_id)?;\n983         let _ = self.finish_pattern(one.start)?;\n984         Ok(ThompsonRef { start: one.start, end: match_state_id })\n985     }))?;\n986     self.patch(unanchored_prefix.end, compiled.start)?;\n987     let nfa = self\n988         .builder\n989         .borrow_mut()\n990         .build(compiled.start, unanchored_prefix.start)?;\n991 \n992     debug!(\"HIR-to-NFA compilation complete, config: {:?}\", self.config);\n993     Ok(nfa)\n994 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}