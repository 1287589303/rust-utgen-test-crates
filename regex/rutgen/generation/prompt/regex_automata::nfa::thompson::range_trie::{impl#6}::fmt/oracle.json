{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/range_trie.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem, ops::RangeInclusive};\nuse alloc::{format, string::String, vec, vec::Vec};\nuse regex_syntax::utf8::Utf8Range;\nuse crate::util::primitives::StateID;\nconst FINAL: StateID = StateID::ZERO;\nconst ROOT: StateID = StateID::new_unchecked(1);\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl fmt::Debug for Transition {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        if self.range.start == self.range.end {\n            write!(f, \"{:02X} => {:02X}\", self.range.start, self.next_id.as_usize(),)\n        } else {\n            write!(\n                f, \"{:02X}-{:02X} => {:02X}\", self.range.start, self.range.end, self\n                .next_id.as_usize(),\n            )\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n891 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n892     if self.range.start == self.range.end {\n893         write!(\n894             f,\n895             \"{:02X} => {:02X}\",\n896             self.range.start,\n897             self.next_id.as_usize(),\n898         )\n899     } else {\n900         write!(\n901             f,\n902             \"{:02X}-{:02X} => {:02X}\",\n903             self.range.start,\n904             self.range.end,\n905             self.next_id.as_usize(),\n906         )\n907     }\n908 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}