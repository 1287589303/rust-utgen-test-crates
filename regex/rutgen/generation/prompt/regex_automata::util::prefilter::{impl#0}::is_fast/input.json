{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/mod.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\n#[cfg(feature = \"alloc\")]\nuse alloc::sync::Arc;\n#[cfg(feature = \"syntax\")]\nuse regex_syntax::hir::{literal, Hir};\nuse crate::util::search::{MatchKind, Span};\npub(crate) use crate::util::prefilter::{\n    aho_corasick::AhoCorasick, byteset::ByteSet, memchr::{Memchr, Memchr2, Memchr3},\n    memmem::Memmem, teddy::Teddy,\n};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\nimpl Prefilter {\n    pub fn new<B: AsRef<[u8]>>(kind: MatchKind, needles: &[B]) -> Option<Prefilter> {}\n    fn from_choice(choice: Choice, max_needle_len: usize) -> Option<Prefilter> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn from_hir_prefix(kind: MatchKind, hir: &Hir) -> Option<Prefilter> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn from_hirs_prefix<H: Borrow<Hir>>(\n        kind: MatchKind,\n        hirs: &[H],\n    ) -> Option<Prefilter> {}\n    #[inline]\n    pub fn find(&self, haystack: &[u8], span: Span) -> Option<Span> {}\n    #[inline]\n    pub fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span> {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n    #[inline]\n    pub fn max_needle_len(&self) -> usize {}\n    #[inline]\n    pub fn is_fast(&self) -> bool {\n        #[cfg(not(feature = \"alloc\"))] { unreachable!() }\n        #[cfg(feature = \"alloc\")] { self.is_fast }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Implementations might return true here if they believe themselves to\n/// be \"fast.\" The concept of \"fast\" is deliberately left vague, but in\n/// practice this usually corresponds to whether it's believed that SIMD\n/// will be used.\n///\n/// Why do we care about this? Well, some prefilter tricks tend to come\n/// with their own bits of overhead, and so might only make sense if we\n/// know that a scan will be *much* faster than the regex engine itself.\n/// Otherwise, the trick may not be worth doing. Whether something is\n/// \"much\" faster than the regex engine generally boils down to whether\n/// SIMD is used. (But not always. Even a SIMD matcher with a high false\n/// positive rate can become quite slow.)\n///\n/// Even if this returns true, it is still possible for the prefilter to\n/// be \"slow.\" Remember, prefilters are just heuristics. We can't really\n/// *know* a prefilter will be fast without actually trying the prefilter.\n/// (Which of course we cannot afford to do.)\n455 pub fn is_fast(&self) -> bool {\n456     #[cfg(not(feature = \"alloc\"))]\n457     {\n458         unreachable!()\n459     }\n460     #[cfg(feature = \"alloc\")]\n461     {\n462         self.is_fast\n463     }\n464 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}