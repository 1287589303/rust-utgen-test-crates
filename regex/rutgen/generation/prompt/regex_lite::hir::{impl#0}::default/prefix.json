{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Copy, Debug, Default)]\npub(crate) struct Flags {\n    /// Whether to match case insensitively.\n    ///\n    /// This is the `i` flag.\n    pub(crate) case_insensitive: bool,\n    /// Whether `^` and `$` should be treated as line anchors or not.\n    ///\n    /// This is the `m` flag.\n    pub(crate) multi_line: bool,\n    /// Whether `.` should match line terminators or not.\n    ///\n    /// This is the `s` flag.\n    pub(crate) dot_matches_new_line: bool,\n    /// Whether to swap the meaning of greedy and non-greedy operators.\n    ///\n    /// This is the `U` flag.\n    pub(crate) swap_greed: bool,\n    /// Whether to enable CRLF mode.\n    ///\n    /// This is the `R` flag.\n    pub(crate) crlf: bool,\n    /// Whether to ignore whitespace. i.e., verbose mode.\n    ///\n    /// This is the `x` flag.\n    pub(crate) ignore_whitespace: bool,\n}\nimpl Default for Config {\n    fn default() -> Config {\n        Config {\n            nest_limit: 50,\n            flags: Flags::default(),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n114 fn default() -> Config {\n115     Config { nest_limit: 50, flags: Flags::default() }\n116 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}