{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Copy, Debug, Default)]\npub(crate) struct Flags {\n    /// Whether to match case insensitively.\n    ///\n    /// This is the `i` flag.\n    pub(crate) case_insensitive: bool,\n    /// Whether `^` and `$` should be treated as line anchors or not.\n    ///\n    /// This is the `m` flag.\n    pub(crate) multi_line: bool,\n    /// Whether `.` should match line terminators or not.\n    ///\n    /// This is the `s` flag.\n    pub(crate) dot_matches_new_line: bool,\n    /// Whether to swap the meaning of greedy and non-greedy operators.\n    ///\n    /// This is the `U` flag.\n    pub(crate) swap_greed: bool,\n    /// Whether to enable CRLF mode.\n    ///\n    /// This is the `R` flag.\n    pub(crate) crlf: bool,\n    /// Whether to ignore whitespace. i.e., verbose mode.\n    ///\n    /// This is the `x` flag.\n    pub(crate) ignore_whitespace: bool,\n}\nimpl Default for Config {\n    fn default() -> Config {\n        Config {\n            nest_limit: 50,\n            flags: Flags::default(),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n114 fn default() -> Config {\n115     Config { nest_limit: 50, flags: Flags::default() }\n116 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}