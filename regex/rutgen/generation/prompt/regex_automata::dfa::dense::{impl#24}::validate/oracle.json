{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[derive(Clone, Debug)]\nstruct MatchStates<T> {\n    /// Slices is a flattened sequence of pairs, where each pair points to a\n    /// sub-slice of pattern_ids. The first element of the pair is an offset\n    /// into pattern_ids and the second element of the pair is the number\n    /// of 32-bit pattern IDs starting at that position. That is, each pair\n    /// corresponds to a single DFA match state and its corresponding match\n    /// IDs. The number of pairs always corresponds to the number of distinct\n    /// DFA match states.\n    ///\n    /// In practice, T is either Vec<u32> or &[u32].\n    slices: T,\n    /// A flattened sequence of pattern IDs for each DFA match state. The only\n    /// way to correctly read this sequence is indirectly via `slices`.\n    ///\n    /// In practice, T is either Vec<u32> or &[u32].\n    pattern_ids: T,\n    /// The total number of unique patterns represented by these match states.\n    pattern_len: usize,\n}\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Special {\n    /// The identifier of the last special state in a DFA. A state is special\n    /// if and only if its identifier is less than or equal to `max`.\n    pub(crate) max: StateID,\n    /// The identifier of the quit state in a DFA. (There is no analogous field\n    /// for the dead state since the dead state's ID is always zero, regardless\n    /// of state ID size.)\n    pub(crate) quit_id: StateID,\n    /// The identifier of the first match state.\n    pub(crate) min_match: StateID,\n    /// The identifier of the last match state.\n    pub(crate) max_match: StateID,\n    /// The identifier of the first accelerated state.\n    pub(crate) min_accel: StateID,\n    /// The identifier of the last accelerated state.\n    pub(crate) max_accel: StateID,\n    /// The identifier of the first start state.\n    pub(crate) min_start: StateID,\n    /// The identifier of the last start state.\n    pub(crate) max_start: StateID,\n}\n#[derive(Clone)]\npub struct DFA<T> {\n    /// The transition table for this DFA. This includes the transitions\n    /// themselves, along with the stride, number of states and the equivalence\n    /// class mapping.\n    tt: TransitionTable<T>,\n    /// The set of starting state identifiers for this DFA. The starting state\n    /// IDs act as pointers into the transition table. The specific starting\n    /// state chosen for each search is dependent on the context at which the\n    /// search begins.\n    st: StartTable<T>,\n    /// The set of match states and the patterns that match for each\n    /// corresponding match state.\n    ///\n    /// This structure is technically only needed because of support for\n    /// multi-regexes. Namely, multi-regexes require answering not just whether\n    /// a match exists, but _which_ patterns match. So we need to store the\n    /// matching pattern IDs for each match state. We do this even when there\n    /// is only one pattern for the sake of simplicity. In practice, this uses\n    /// up very little space for the case of one pattern.\n    ms: MatchStates<T>,\n    /// Information about which states are \"special.\" Special states are states\n    /// that are dead, quit, matching, starting or accelerated. For more info,\n    /// see the docs for `Special`.\n    special: Special,\n    /// The accelerators for this DFA.\n    ///\n    /// If a state is accelerated, then there exist only a small number of\n    /// bytes that can cause the DFA to leave the state. This permits searching\n    /// to use optimized routines to find those specific bytes instead of using\n    /// the transition table.\n    ///\n    /// All accelerated states exist in a contiguous range in the DFA's\n    /// transition table. See dfa/special.rs for more details on how states are\n    /// arranged.\n    accels: Accels<T>,\n    /// Any prefilter attached to this DFA.\n    ///\n    /// Note that currently prefilters are not serialized. When deserializing\n    /// a DFA from bytes, this is always set to `None`.\n    pre: Option<Prefilter>,\n    /// The set of \"quit\" bytes for this DFA.\n    ///\n    /// This is only used when computing the start state for a particular\n    /// position in a haystack. Namely, in the case where there is a quit\n    /// byte immediately before the start of the search, this set needs to be\n    /// explicitly consulted. In all other cases, quit bytes are detected by\n    /// the DFA itself, by transitioning all quit bytes to a special \"quit\n    /// state.\"\n    quitset: ByteSet,\n    /// Various flags describing the behavior of this DFA.\n    flags: Flags,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl<T: AsRef<[u32]>> MatchStates<T> {\n    fn write_to<E: Endian>(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    fn write_to_len(&self) -> usize {}\n    fn validate(&self, dfa: &DFA<T>) -> Result<(), DeserializeError> {\n        if self.len() != dfa.special.match_len(dfa.stride()) {\n            return Err(DeserializeError::generic(\"match state length mismatch\"));\n        }\n        for si in 0..self.len() {\n            let start = self.slices()[si * 2].as_usize();\n            let len = self.slices()[si * 2 + 1].as_usize();\n            if start >= self.pattern_ids().len() {\n                return Err(DeserializeError::generic(\"invalid pattern ID start offset\"));\n            }\n            if start + len > self.pattern_ids().len() {\n                return Err(DeserializeError::generic(\"invalid pattern ID length\"));\n            }\n            for mi in 0..len {\n                let pid = self.pattern_id(si, mi);\n                if pid.as_usize() >= self.pattern_len {\n                    return Err(DeserializeError::generic(\"invalid pattern ID\"));\n                }\n            }\n        }\n        Ok(())\n    }\n    #[cfg(feature = \"dfa-build\")]\n    fn to_map(&self, dfa: &DFA<T>) -> BTreeMap<StateID, Vec<PatternID>> {}\n    fn as_ref(&self) -> MatchStates<&'_ [u32]> {}\n    #[cfg(feature = \"alloc\")]\n    fn to_owned(&self) -> MatchStates<alloc::vec::Vec<u32>> {}\n    fn match_state_id(&self, dfa: &DFA<T>, index: usize) -> StateID {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn pattern_id(&self, state_index: usize, match_index: usize) -> PatternID {\n        self.pattern_id_slice(state_index)[match_index]\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn pattern_len(&self, state_index: usize) -> usize {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn pattern_id_slice(&self, state_index: usize) -> &[PatternID] {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn slices(&self) -> &[PatternID] {\n        wire::u32s_to_pattern_ids(self.slices.as_ref())\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn len(&self) -> usize {\n        assert_eq!(0, self.slices().len() % 2);\n        self.slices().len() / 2\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn pattern_ids(&self) -> &[PatternID] {\n        wire::u32s_to_pattern_ids(self.pattern_ids.as_ref())\n    }\n    fn memory_usage(&self) -> usize {}\n}\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::Generic {\n            msg,\n        })\n    }\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\nimpl Special {\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn new() -> Special {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn remap(&self, map: impl Fn(StateID) -> StateID) -> Special {}\n    pub(crate) fn from_bytes(\n        mut slice: &[u8],\n    ) -> Result<(Special, usize), DeserializeError> {}\n    pub(crate) fn validate(&self) -> Result<(), DeserializeError> {}\n    pub(crate) fn validate_state_len(\n        &self,\n        len: usize,\n        stride2: usize,\n    ) -> Result<(), DeserializeError> {}\n    pub(crate) fn write_to<E: Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn set_max(&mut self) {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn set_no_special_start_states(&mut self) {}\n    #[inline]\n    pub(crate) fn is_special_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_dead_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_quit_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_match_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_accel_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn is_start_state(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn match_len(&self, stride: usize) -> usize {\n        if self.matches() {\n            (self.max_match.as_usize() - self.min_match.as_usize() + stride) / stride\n        } else {\n            0\n        }\n    }\n    #[inline]\n    pub(crate) fn matches(&self) -> bool {}\n    #[cfg(feature = \"dfa-build\")]\n    pub(crate) fn accel_len(&self, stride: usize) -> usize {}\n    #[inline]\n    pub(crate) fn accels(&self) -> bool {}\n    #[inline]\n    pub(crate) fn starts(&self) -> bool {}\n}\nimpl<T: AsRef<[u32]>> DFA<T> {\n    pub fn as_ref(&self) -> DFA<&'_ [u32]> {}\n    #[cfg(feature = \"alloc\")]\n    pub fn to_owned(&self) -> OwnedDFA {}\n    pub fn start_kind(&self) -> StartKind {}\n    pub(crate) fn start_map(&self) -> &StartByteMap {}\n    pub fn starts_for_each_pattern(&self) -> bool {}\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    pub fn alphabet_len(&self) -> usize {}\n    pub fn stride2(&self) -> usize {}\n    pub fn stride(&self) -> usize {\n        self.tt.stride()\n    }\n    pub fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Valides that the match state info is itself internally consistent and\n/// consistent with the recorded match state region in the given DFA.\n4520 fn validate(&self, dfa: &DFA<T>) -> Result<(), DeserializeError> {\n4521     if self.len() != dfa.special.match_len(dfa.stride()) {\n4522         return Err(DeserializeError::generic(\n4523             \"match state length mismatch\",\n4524         ));\n4525     }\n4526     for si in 0..self.len() {\n4527         let start = self.slices()[si * 2].as_usize();\n4528         let len = self.slices()[si * 2 + 1].as_usize();\n4529         if start >= self.pattern_ids().len() {\n4530             return Err(DeserializeError::generic(\n4531                 \"invalid pattern ID start offset\",\n4532             ));\n4533         }\n4534         if start + len > self.pattern_ids().len() {\n4535             return Err(DeserializeError::generic(\n4536                 \"invalid pattern ID length\",\n4537             ));\n4538         }\n4539         for mi in 0..len {\n4540             let pid = self.pattern_id(si, mi);\n4541             if pid.as_usize() >= self.pattern_len {\n4542                 return Err(DeserializeError::generic(\n4543                     \"invalid pattern ID\",\n4544                 ));\n4545             }\n4546         }\n4547     }\n4548     Ok(())\n4549 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}