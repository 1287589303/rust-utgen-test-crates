{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub(crate) struct RegexInfo(Arc<RegexInfoI>);\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Debug)]\npub struct Regex {\n    /// The actual regex implementation.\n    imp: Arc<RegexI>,\n    /// A thread safe pool of caches.\n    ///\n    /// For the higher level search APIs, a `Cache` is automatically plucked\n    /// from this pool before running a search. The lower level `with` methods\n    /// permit the caller to provide their own cache, thereby bypassing\n    /// accesses to this pool.\n    ///\n    /// Note that we put this outside the `Arc` so that cloning a `Regex`\n    /// results in creating a fresh `CachePool`. This in turn permits callers\n    /// to clone regexes into separate threads where each such regex gets\n    /// the pool's \"thread owner\" optimization. Otherwise, if one shares the\n    /// `Regex` directly, then the pool will go through a slower mutex path for\n    /// all threads except for the \"owner.\"\n    pool: CachePool,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Debug)]\nstruct RegexI {\n    /// The core matching engine.\n    ///\n    /// Why is this reference counted when RegexI is already wrapped in an Arc?\n    /// Well, we need to capture this in a closure to our `Pool` below in order\n    /// to create new `Cache` values when needed. So since it needs to be in\n    /// two places, we make it reference counted.\n    ///\n    /// We make `RegexI` itself reference counted too so that `Regex` itself\n    /// stays extremely small and very cheap to clone.\n    strat: Arc<dyn Strategy>,\n    /// Metadata about the regexes driving the strategy. The metadata is also\n    /// usually stored inside the strategy too, but we put it here as well\n    /// so that we can get quick access to it (without virtual calls) before\n    /// executing the regex engine. For example, we use this metadata to\n    /// detect a subset of cases where we know a match is impossible, and can\n    /// thus avoid calling into the strategy at all.\n    ///\n    /// Since `RegexInfo` is stored in multiple places, it is also reference\n    /// counted.\n    info: RegexInfo,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Debug, Clone)]\npub struct Cache {\n    pub(crate) capmatches: Captures,\n    pub(crate) pikevm: wrappers::PikeVMCache,\n    pub(crate) backtrack: wrappers::BoundedBacktrackerCache,\n    pub(crate) onepass: wrappers::OnePassCache,\n    pub(crate) hybrid: wrappers::HybridCache,\n    pub(crate) revhybrid: wrappers::ReverseHybridCache,\n}\nimpl Builder {\n    pub fn new() -> Builder {}\n    pub fn build(&self, pattern: &str) -> Result<Regex, BuildError> {}\n    pub fn build_many<P: AsRef<str>>(\n        &self,\n        patterns: &[P],\n    ) -> Result<Regex, BuildError> {}\n    pub fn build_from_hir(&self, hir: &Hir) -> Result<Regex, BuildError> {}\n    pub fn build_many_from_hir<H: Borrow<Hir>>(\n        &self,\n        hirs: &[H],\n    ) -> Result<Regex, BuildError> {\n        let config = self.config.clone();\n        let hirs: Vec<&Hir> = hirs.iter().map(|hir| hir.borrow()).collect();\n        let info = RegexInfo::new(config, &hirs);\n        let strat = strategy::new(&info, &hirs)?;\n        let pool = {\n            let strat = Arc::clone(&strat);\n            let create: CachePoolFn = Box::new(move || strat.create_cache());\n            Pool::new(create)\n        };\n        Ok(Regex {\n            imp: Arc::new(RegexI { strat, info }),\n            pool,\n        })\n    }\n    pub fn configure(&mut self, config: Config) -> &mut Builder {}\n    pub fn syntax(&mut self, config: crate::util::syntax::Config) -> &mut Builder {}\n}\nimpl RegexInfo {\n    fn new(config: Config, hirs: &[&Hir]) -> RegexInfo {\n        let mut props = vec![];\n        for hir in hirs.iter() {\n            props.push(hir.properties().clone());\n        }\n        let props_union = hir::Properties::union(&props);\n        RegexInfo(\n            Arc::new(RegexInfoI {\n                config,\n                props,\n                props_union,\n            }),\n        )\n    }\n    pub(crate) fn config(&self) -> &Config {}\n    pub(crate) fn props(&self) -> &[hir::Properties] {}\n    pub(crate) fn props_union(&self) -> &hir::Properties {}\n    pub(crate) fn pattern_len(&self) -> usize {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_anchored_start(&self, input: &Input<'_>) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_always_anchored_start(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_always_anchored_end(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn is_impossible(&self, input: &Input<'_>) -> bool {}\n}\npub(super) fn new(\n    info: &RegexInfo,\n    hirs: &[&Hir],\n) -> Result<Arc<dyn Strategy>, BuildError> {\n    let pre = if info.is_always_anchored_start() {\n        debug!(\"skipping literal extraction since regex is anchored\");\n        None\n    } else if let Some(pre) = info.config().get_prefilter() {\n        debug!(\"skipping literal extraction since the caller provided a prefilter\");\n        Some(pre.clone())\n    } else if info.config().get_auto_prefilter() {\n        let kind = info.config().get_match_kind();\n        let prefixes = crate::util::prefilter::prefixes(kind, hirs);\n        if let Some(pre) = Pre::from_prefixes(info, &prefixes) {\n            debug!(\n                \"found that the regex can be broken down to a literal \\\n                 search, avoiding the regex engine entirely\",\n            );\n            return Ok(pre);\n        }\n        if let Some(pre) = Pre::from_alternation_literals(info, hirs) {\n            debug!(\n                \"found plain alternation of literals, \\\n                 avoiding regex engine entirely and using Aho-Corasick\"\n            );\n            return Ok(pre);\n        }\n        prefixes\n            .literals()\n            .and_then(|strings| {\n                debug!(\n                    \"creating prefilter from {} literals: {:?}\", strings.len(), strings,\n                );\n                Prefilter::new(kind, strings)\n            })\n    } else {\n        debug!(\"skipping literal extraction since prefilters were disabled\");\n        None\n    };\n    let mut core = Core::new(info.clone(), pre.clone(), hirs)?;\n    core = match ReverseAnchored::new(core) {\n        Err(core) => core,\n        Ok(ra) => {\n            debug!(\"using reverse anchored strategy\");\n            return Ok(Arc::new(ra));\n        }\n    };\n    core = match ReverseSuffix::new(core, hirs) {\n        Err(core) => core,\n        Ok(rs) => {\n            debug!(\"using reverse suffix strategy\");\n            return Ok(Arc::new(rs));\n        }\n    };\n    core = match ReverseInner::new(core, hirs) {\n        Err(core) => core,\n        Ok(ri) => {\n            debug!(\"using reverse inner strategy\");\n            return Ok(Arc::new(ri));\n        }\n    };\n    debug!(\"using core strategy\");\n    Ok(Arc::new(core))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Builds a `Regex` directly from many `Hir` expressions.\n///\n/// This is useful if you needed to parse pattern strings into `Hir`\n/// expressions for other reasons (such as analysis or transformations).\n/// This routine permits building a `Regex` directly from the `Hir`\n/// expressions instead of first converting the `Hir` expressions back to\n/// pattern strings.\n///\n/// When using this method, any options set via [`Builder::syntax`] are\n/// ignored. Namely, the syntax options only apply when parsing a pattern\n/// string, which isn't relevant here.\n///\n/// If there was a problem building the underlying regex matcher for the\n/// given `Hir` expressions, then an error is returned.\n///\n/// Note that unlike [`Builder::build_many`], this can only fail as a\n/// result of building the underlying matcher. In that case, there is\n/// no single `Hir` expression that can be isolated as a reason for the\n/// failure. So if this routine fails, it's not possible to determine which\n/// `Hir` expression caused the failure.\n///\n/// # Example\n///\n/// This example shows how one can hand-construct multiple `Hir`\n/// expressions and build a single regex from them without doing any\n/// parsing at all.\n///\n/// ```\n/// use {\n///     regex_automata::{meta::Regex, Match},\n///     regex_syntax::hir::{Hir, Look},\n/// };\n///\n/// // (?Rm)^foo$\n/// let hir1 = Hir::concat(vec![\n///     Hir::look(Look::StartCRLF),\n///     Hir::literal(\"foo\".as_bytes()),\n///     Hir::look(Look::EndCRLF),\n/// ]);\n/// // (?Rm)^bar$\n/// let hir2 = Hir::concat(vec![\n///     Hir::look(Look::StartCRLF),\n///     Hir::literal(\"bar\".as_bytes()),\n///     Hir::look(Look::EndCRLF),\n/// ]);\n/// let re = Regex::builder()\n///     .build_many_from_hir(&[&hir1, &hir2])?;\n/// let hay = \"\\r\\nfoo\\r\\nbar\";\n/// let got: Vec<Match> = re.find_iter(hay).collect();\n/// let expected = vec![\n///     Match::must(0, 2..5),\n///     Match::must(1, 7..10),\n/// ];\n/// assert_eq!(expected, got);\n///\n/// Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n3543 pub fn build_many_from_hir<H: Borrow<Hir>>(\n3544     &self,\n3545     hirs: &[H],\n3546 ) -> Result<Regex, BuildError> {\n3547     let config = self.config.clone();\n3548     // We collect the HIRs into a vec so we can write internal routines\n3549     // with '&[&Hir]'. i.e., Don't use generics everywhere to keep code\n3550     // bloat down..\n3551     let hirs: Vec<&Hir> = hirs.iter().map(|hir| hir.borrow()).collect();\n3552     let info = RegexInfo::new(config, &hirs);\n3553     let strat = strategy::new(&info, &hirs)?;\n3554     let pool = {\n3555         let strat = Arc::clone(&strat);\n3556         let create: CachePoolFn = Box::new(move || strat.create_cache());\n3557         Pool::new(create)\n3558     };\n3559     Ok(Regex { imp: Arc::new(RegexI { strat, info }), pool })\n3560 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}