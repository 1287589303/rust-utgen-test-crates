{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {\n        self.is_match_at(haystack, 0)\n    }\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if there is a match for the regex anywhere\n/// in the haystack given.\n///\n/// It is recommended to use this method if all you need to do is test\n/// whether a match exists, since the underlying matching engine may be\n/// able to do less work.\n///\n/// # Example\n///\n/// Test if some haystack contains at least one word with exactly 13\n/// Unicode word characters:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\n/// let hay = \"I categorically deny having triskaidekaphobia.\";\n/// assert!(re.is_match(hay));\n/// ```\n204 pub fn is_match(&self, haystack: &str) -> bool {\n205     self.is_match_at(haystack, 0)\n206 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}