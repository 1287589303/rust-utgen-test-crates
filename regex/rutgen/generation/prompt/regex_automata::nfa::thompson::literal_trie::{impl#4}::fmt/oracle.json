{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/literal_trie.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, compiler::ThompsonRef, BuildError, Builder},\n    util::primitives::{IteratorIndexExt, StateID},\n};\n#[derive(Clone, Default)]\nstruct State {\n    transitions: Vec<Transition>,\n    chunks: Vec<(usize, usize)>,\n}\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Debug)]\nstruct StateChunksIter<'a> {\n    transitions: &'a [Transition],\n    chunks: core::slice::Iter<'a, (usize, usize)>,\n    active: Option<&'a [Transition]>,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\nimpl core::fmt::Debug for State {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        let mut spacing = \" \";\n        for (i, chunk) in self.chunks().enumerate() {\n            if i > 0 {\n                write!(f, \"{}MATCH\", spacing)?;\n            }\n            spacing = \"\";\n            for (j, t) in chunk.iter().enumerate() {\n                spacing = \" \";\n                if j == 0 && i > 0 {\n                    write!(f, \" \")?;\n                } else if j > 0 {\n                    write!(f, \", \")?;\n                }\n                write!(f, \"{:?}\", t)?;\n            }\n        }\n        Ok(())\n    }\n}\nimpl State {\n    fn add_match(&mut self) {}\n    fn is_leaf(&self) -> bool {}\n    fn chunks(&self) -> StateChunksIter<'_> {\n        StateChunksIter {\n            transitions: &*self.transitions,\n            chunks: self.chunks.iter(),\n            active: Some(self.active_chunk()),\n        }\n    }\n    fn active_chunk(&self) -> &[Transition] {}\n    fn active_chunk_start(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n418 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n419     let mut spacing = \" \";\n420     for (i, chunk) in self.chunks().enumerate() {\n421         if i > 0 {\n422             write!(f, \"{}MATCH\", spacing)?;\n423         }\n424         spacing = \"\";\n425         for (j, t) in chunk.iter().enumerate() {\n426             spacing = \" \";\n427             if j == 0 && i > 0 {\n428                 write!(f, \" \")?;\n429             } else if j > 0 {\n430                 write!(f, \", \")?;\n431             }\n432             write!(f, \"{:?}\", t)?;\n433         }\n434     }\n435     Ok(())\n436 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}