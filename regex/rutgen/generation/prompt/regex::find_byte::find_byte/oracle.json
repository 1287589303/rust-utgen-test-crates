{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/find_byte.rs\n// crate name is regex\npub(crate) fn find_byte(needle: u8, haystack: &[u8]) -> Option<usize> {\n    #[cfg(not(feature = \"perf-literal\"))]\n    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n        haystack.iter().position(|&b| b == needle)\n    }\n    #[cfg(feature = \"perf-literal\")]\n    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n        memchr::memchr(needle, haystack)\n    }\n    imp(needle, haystack)\n}\n#[cfg(feature = \"perf-literal\")]\nfn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n    memchr::memchr(needle, haystack)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Searches for the given needle in the given haystack.\n///\n/// If the perf-literal feature is enabled, then this uses the super optimized\n/// memchr crate. Otherwise, it uses the naive byte-at-a-time implementation.\n 5 pub(crate) fn find_byte(needle: u8, haystack: &[u8]) -> Option<usize> {\n 6     #[cfg(not(feature = \"perf-literal\"))]\n 7     fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n 8         haystack.iter().position(|&b| b == needle)\n 9     }\n10 \n11     #[cfg(feature = \"perf-literal\")]\n12     fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {\n13         memchr::memchr(needle, haystack)\n14     }\n15 \n16     imp(needle, haystack)\n17 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}