{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/remapper.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::util::primitives::StateID;\n#[derive(Debug)]\nstruct IndexMapper {\n    /// The power of 2 corresponding to the stride of the corresponding\n    /// transition table. 'id >> stride2' de-multiplies an ID while 'index <<\n    /// stride2' pre-multiplies an index to an ID.\n    stride2: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl IndexMapper {\n    fn to_index(&self, id: StateID) -> usize {}\n    fn to_state_id(&self, index: usize) -> StateID {\n        StateID::new_unchecked(index << self.stride2)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Convert a state index to a state ID.\n183 fn to_state_id(&self, index: usize) -> StateID {\n184     // CORRECTNESS: If the given index is not valid, then it is not\n185     // required for this to panic or return a valid state ID. We'll \"just\"\n186     // wind up with panics or silent logic errors at some other point.\n187     StateID::new_unchecked(index << self.stride2)\n188 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}