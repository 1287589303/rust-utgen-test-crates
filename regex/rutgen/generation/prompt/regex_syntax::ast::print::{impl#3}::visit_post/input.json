{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/print.rs\n// crate name is regex_syntax\nuse core::fmt;\nuse crate::ast::{\n    self, visitor::{self, Visitor},\n    Ast,\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self) {}\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Debug)]\nstruct Writer<W> {\n    wtr: W,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Group {\n    /// The span of this group.\n    pub span: Span,\n    /// The kind of this group.\n    pub kind: GroupKind,\n    /// The regular expression in this group.\n    pub ast: Box<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Repetition {\n    /// The span of this operation.\n    pub span: Span,\n    /// The actual operation.\n    pub op: RepetitionOp,\n    /// Whether this operation was applied greedily or not.\n    pub greedy: bool,\n    /// The regular expression under repetition.\n    pub ast: Box<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the translator's Ast was parsed from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error, derived from the Ast given to the translator.\n    span: Span,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Literal {\n    /// The span of this literal.\n    pub span: Span,\n    /// The kind of this literal.\n    pub kind: LiteralKind,\n    /// The Unicode scalar value corresponding to this literal.\n    pub c: char,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassBracketed {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not. e.g., `[a]` is not negated but\n    /// `[^a]` is.\n    pub negated: bool,\n    /// The type of this set. A set is either a normal union of things, e.g.,\n    /// `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n    pub kind: ClassSet,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Assertion {\n    /// The span of this assertion.\n    pub span: Span,\n    /// The assertion kind, e.g., `\\b` or `^`.\n    pub kind: AssertionKind,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassUnicode {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not.\n    ///\n    /// Note: be careful when using this attribute. This specifically refers\n    /// to whether the class is written as `\\p` or `\\P`, where the latter\n    /// is `negated = true`. However, it also possible to write something like\n    /// `\\P{scx!=Katakana}` which is actually equivalent to\n    /// `\\p{scx=Katakana}` and is therefore not actually negated even though\n    /// `negated = true` here. To test whether this class is truly negated\n    /// or not, use the `is_negated` method.\n    pub negated: bool,\n    /// The kind of Unicode class.\n    pub kind: ClassUnicodeKind,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct SetFlags {\n    /// The span of these flags, including the grouping parentheses.\n    pub span: Span,\n    /// The actual sequence of flags.\n    pub flags: Flags,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassPerl {\n    /// The span of this class.\n    pub span: Span,\n    /// The kind of Perl class.\n    pub kind: ClassPerlKind,\n    /// Whether the class is negated or not. e.g., `\\d` is not negated but\n    /// `\\D` is.\n    pub negated: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Error {\n    /// An error that occurred while translating concrete syntax into abstract\n    /// syntax (AST).\n    Parse(ast::Error),\n    /// An error that occurred while translating abstract syntax into a high\n    /// level intermediate representation (HIR).\n    Translate(hir::Error),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Box<Span>),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(Box<SetFlags>),\n    /// A single character literal, which includes escape sequences.\n    Literal(Box<Literal>),\n    /// The \"any character\" class.\n    Dot(Box<Span>),\n    /// A single zero-width assertion.\n    Assertion(Box<Assertion>),\n    /// A single Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    ClassUnicode(Box<ClassUnicode>),\n    /// A single perl character class, e.g., `\\d` or `\\W`.\n    ClassPerl(Box<ClassPerl>),\n    /// A single bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    ClassBracketed(Box<ClassBracketed>),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Box<Repetition>),\n    /// A grouped regular expression.\n    Group(Box<Group>),\n    /// An alternation of regular expressions.\n    Alternation(Box<Alternation>),\n    /// A concatenation of regular expressions.\n    Concat(Box<Concat>),\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nimpl<W: fmt::Write> Visitor for Writer<W> {\n    type Output = ();\n    type Err = fmt::Error;\n    fn finish(self) -> fmt::Result {}\n    fn visit_pre(&mut self, ast: &Ast) -> fmt::Result {}\n    fn visit_post(&mut self, ast: &Ast) -> fmt::Result {\n        match *ast {\n            Ast::Empty(_) => Ok(()),\n            Ast::Flags(ref x) => self.fmt_set_flags(x),\n            Ast::Literal(ref x) => self.fmt_literal(x),\n            Ast::Dot(_) => self.wtr.write_str(\".\"),\n            Ast::Assertion(ref x) => self.fmt_assertion(x),\n            Ast::ClassPerl(ref x) => self.fmt_class_perl(x),\n            Ast::ClassUnicode(ref x) => self.fmt_class_unicode(x),\n            Ast::ClassBracketed(ref x) => self.fmt_class_bracketed_post(x),\n            Ast::Repetition(ref x) => self.fmt_repetition(x),\n            Ast::Group(ref x) => self.fmt_group_post(x),\n            Ast::Alternation(_) => Ok(()),\n            Ast::Concat(_) => Ok(()),\n        }\n    }\n    fn visit_alternation_in(&mut self) -> fmt::Result {}\n    fn visit_class_set_item_pre(\n        &mut self,\n        ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        match *ast {\n            ast::ClassSetItem::Bracketed(ref x) => self.fmt_class_bracketed_pre(x),\n            _ => Ok(()),\n        }\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        use crate::ast::ClassSetItem::*;\n        match *ast {\n            Empty(_) => Ok(()),\n            Literal(ref x) => self.fmt_literal(x),\n            Range(ref x) => {\n                self.fmt_literal(&x.start)?;\n                self.wtr.write_str(\"-\")?;\n                self.fmt_literal(&x.end)?;\n                Ok(())\n            }\n            Ascii(ref x) => self.fmt_class_ascii(x),\n            Unicode(ref x) => self.fmt_class_unicode(x),\n            Perl(ref x) => self.fmt_class_perl(x),\n            Bracketed(ref x) => self.fmt_class_bracketed_post(x),\n            Union(_) => Ok(()),\n        }\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        self.fmt_class_set_binary_op_kind(&ast.kind)\n    }\n}\nimpl<W: fmt::Write> Writer<W> {\n    fn fmt_group_pre(&mut self, ast: &ast::Group) -> fmt::Result {}\n    fn fmt_group_post(&mut self, _ast: &ast::Group) -> fmt::Result {\n        self.wtr.write_str(\")\")\n    }\n    fn fmt_repetition(&mut self, ast: &ast::Repetition) -> fmt::Result {\n        use crate::ast::RepetitionKind::*;\n        match ast.op.kind {\n            ZeroOrOne if ast.greedy => self.wtr.write_str(\"?\"),\n            ZeroOrOne => self.wtr.write_str(\"??\"),\n            ZeroOrMore if ast.greedy => self.wtr.write_str(\"*\"),\n            ZeroOrMore => self.wtr.write_str(\"*?\"),\n            OneOrMore if ast.greedy => self.wtr.write_str(\"+\"),\n            OneOrMore => self.wtr.write_str(\"+?\"),\n            Range(ref x) => {\n                self.fmt_repetition_range(x)?;\n                if !ast.greedy {\n                    self.wtr.write_str(\"?\")?;\n                }\n                Ok(())\n            }\n        }\n    }\n    fn fmt_repetition_range(&mut self, ast: &ast::RepetitionRange) -> fmt::Result {}\n    fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {\n        use crate::ast::LiteralKind::*;\n        match ast.kind {\n            Verbatim => self.wtr.write_char(ast.c),\n            Meta | Superfluous => write!(self.wtr, r\"\\{}\", ast.c),\n            Octal => write!(self.wtr, r\"\\{:o}\", u32::from(ast.c)),\n            HexFixed(ast::HexLiteralKind::X) => {\n                write!(self.wtr, r\"\\x{:02X}\", u32::from(ast.c))\n            }\n            HexFixed(ast::HexLiteralKind::UnicodeShort) => {\n                write!(self.wtr, r\"\\u{:04X}\", u32::from(ast.c))\n            }\n            HexFixed(ast::HexLiteralKind::UnicodeLong) => {\n                write!(self.wtr, r\"\\U{:08X}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::X) => {\n                write!(self.wtr, r\"\\x{{{:X}}}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::UnicodeShort) => {\n                write!(self.wtr, r\"\\u{{{:X}}}\", u32::from(ast.c))\n            }\n            HexBrace(ast::HexLiteralKind::UnicodeLong) => {\n                write!(self.wtr, r\"\\U{{{:X}}}\", u32::from(ast.c))\n            }\n            Special(ast::SpecialLiteralKind::Bell) => self.wtr.write_str(r\"\\a\"),\n            Special(ast::SpecialLiteralKind::FormFeed) => self.wtr.write_str(r\"\\f\"),\n            Special(ast::SpecialLiteralKind::Tab) => self.wtr.write_str(r\"\\t\"),\n            Special(ast::SpecialLiteralKind::LineFeed) => self.wtr.write_str(r\"\\n\"),\n            Special(ast::SpecialLiteralKind::CarriageReturn) => self.wtr.write_str(r\"\\r\"),\n            Special(ast::SpecialLiteralKind::VerticalTab) => self.wtr.write_str(r\"\\v\"),\n            Special(ast::SpecialLiteralKind::Space) => self.wtr.write_str(r\"\\ \"),\n        }\n    }\n    fn fmt_assertion(&mut self, ast: &ast::Assertion) -> fmt::Result {\n        use crate::ast::AssertionKind::*;\n        match ast.kind {\n            StartLine => self.wtr.write_str(\"^\"),\n            EndLine => self.wtr.write_str(\"$\"),\n            StartText => self.wtr.write_str(r\"\\A\"),\n            EndText => self.wtr.write_str(r\"\\z\"),\n            WordBoundary => self.wtr.write_str(r\"\\b\"),\n            NotWordBoundary => self.wtr.write_str(r\"\\B\"),\n            WordBoundaryStart => self.wtr.write_str(r\"\\b{start}\"),\n            WordBoundaryEnd => self.wtr.write_str(r\"\\b{end}\"),\n            WordBoundaryStartAngle => self.wtr.write_str(r\"\\<\"),\n            WordBoundaryEndAngle => self.wtr.write_str(r\"\\>\"),\n            WordBoundaryStartHalf => self.wtr.write_str(r\"\\b{start-half}\"),\n            WordBoundaryEndHalf => self.wtr.write_str(r\"\\b{end-half}\"),\n        }\n    }\n    fn fmt_set_flags(&mut self, ast: &ast::SetFlags) -> fmt::Result {\n        self.wtr.write_str(\"(?\")?;\n        self.fmt_flags(&ast.flags)?;\n        self.wtr.write_str(\")\")?;\n        Ok(())\n    }\n    fn fmt_flags(&mut self, ast: &ast::Flags) -> fmt::Result {}\n    fn fmt_class_bracketed_pre(&mut self, ast: &ast::ClassBracketed) -> fmt::Result {}\n    fn fmt_class_bracketed_post(&mut self, _ast: &ast::ClassBracketed) -> fmt::Result {\n        self.wtr.write_str(\"]\")\n    }\n    fn fmt_class_set_binary_op_kind(\n        &mut self,\n        ast: &ast::ClassSetBinaryOpKind,\n    ) -> fmt::Result {}\n    fn fmt_class_perl(&mut self, ast: &ast::ClassPerl) -> fmt::Result {\n        use crate::ast::ClassPerlKind::*;\n        match ast.kind {\n            Digit if ast.negated => self.wtr.write_str(r\"\\D\"),\n            Digit => self.wtr.write_str(r\"\\d\"),\n            Space if ast.negated => self.wtr.write_str(r\"\\S\"),\n            Space => self.wtr.write_str(r\"\\s\"),\n            Word if ast.negated => self.wtr.write_str(r\"\\W\"),\n            Word => self.wtr.write_str(r\"\\w\"),\n        }\n    }\n    fn fmt_class_ascii(&mut self, ast: &ast::ClassAscii) -> fmt::Result {}\n    fn fmt_class_unicode(&mut self, ast: &ast::ClassUnicode) -> fmt::Result {\n        use crate::ast::ClassUnicodeKind::*;\n        use crate::ast::ClassUnicodeOpKind::*;\n        if ast.negated {\n            self.wtr.write_str(r\"\\P\")?;\n        } else {\n            self.wtr.write_str(r\"\\p\")?;\n        }\n        match ast.kind {\n            OneLetter(c) => self.wtr.write_char(c),\n            Named(ref x) => write!(self.wtr, \"{{{}}}\", x),\n            NamedValue { op: Equal, ref name, ref value } => {\n                write!(self.wtr, \"{{{}={}}}\", name, value)\n            }\n            NamedValue { op: Colon, ref name, ref value } => {\n                write!(self.wtr, \"{{{}:{}}}\", name, value)\n            }\n            NamedValue { op: NotEqual, ref name, ref value } => {\n                write!(self.wtr, \"{{{}!={}}}\", name, value)\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 88 fn visit_post(&mut self, ast: &Ast) -> fmt::Result {\n 89     match *ast {\n 90         Ast::Empty(_) => Ok(()),\n 91         Ast::Flags(ref x) => self.fmt_set_flags(x),\n 92         Ast::Literal(ref x) => self.fmt_literal(x),\n 93         Ast::Dot(_) => self.wtr.write_str(\".\"),\n 94         Ast::Assertion(ref x) => self.fmt_assertion(x),\n 95         Ast::ClassPerl(ref x) => self.fmt_class_perl(x),\n 96         Ast::ClassUnicode(ref x) => self.fmt_class_unicode(x),\n 97         Ast::ClassBracketed(ref x) => self.fmt_class_bracketed_post(x),\n 98         Ast::Repetition(ref x) => self.fmt_repetition(x),\n 99         Ast::Group(ref x) => self.fmt_group_post(x),\n100         Ast::Alternation(_) => Ok(()),\n101         Ast::Concat(_) => Ok(()),\n102     }\n103 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}