{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/interpolate.rs\n// crate name is regex_automata\nuse alloc::{string::String, vec::Vec};\nuse crate::util::memchr::memchr;\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nstruct CaptureRef<'a> {\n    cap: Ref<'a>,\n    end: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nenum Ref<'a> {\n    Named(&'a str),\n    Number(usize),\n}\nfn find_cap_ref_braced(rep: &[u8], mut i: usize) -> Option<CaptureRef<'_>> {\n    assert_eq!(b'{', rep[i.checked_sub(1).unwrap()]);\n    let start = i;\n    while rep.get(i).map_or(false, |&b| b != b'}') {\n        i += 1;\n    }\n    if !rep.get(i).map_or(false, |&b| b == b'}') {\n        return None;\n    }\n    let cap = match core::str::from_utf8(&rep[start..i]) {\n        Err(_) => return None,\n        Ok(cap) => cap,\n    };\n    Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: i + 1,\n    })\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Looks for a braced reference, e.g., `${foo1}`. This assumes that an opening\n/// brace has been found at `i-1` in `rep`. This then looks for a closing\n/// brace and returns the capture reference within the brace.\n295 fn find_cap_ref_braced(rep: &[u8], mut i: usize) -> Option<CaptureRef<'_>> {\n296     assert_eq!(b'{', rep[i.checked_sub(1).unwrap()]);\n297     let start = i;\n298     while rep.get(i).map_or(false, |&b| b != b'}') {\n299         i += 1;\n300     }\n301     if !rep.get(i).map_or(false, |&b| b == b'}') {\n302         return None;\n303     }\n304     // When looking at braced names, we don't put any restrictions on the name,\n305     // so it's possible it could be invalid UTF-8. But a capture group name\n306     // can never be invalid UTF-8, so if we have invalid UTF-8, then we can\n307     // safely return None.\n308     let cap = match core::str::from_utf8(&rep[start..i]) {\n309         Err(_) => return None,\n310         Ok(cap) => cap,\n311     };\n312     Some(CaptureRef {\n313         cap: match cap.parse::<usize>() {\n314             Ok(i) => Ref::Number(i),\n315             Err(_) => Ref::Named(cap),\n316         },\n317         end: i + 1,\n318     })\n319 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}