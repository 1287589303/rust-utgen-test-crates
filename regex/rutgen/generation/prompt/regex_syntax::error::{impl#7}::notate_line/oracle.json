{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/error.rs\n// crate name is regex_syntax\nuse alloc::{\n    format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{ast, hir};\nstruct Spans<'p> {\n    /// The original regex pattern string.\n    pattern: &'p str,\n    /// The total width that should be used for line numbers. The width is\n    /// used for left padding the line numbers for alignment.\n    ///\n    /// A value of `0` means line numbers should not be displayed. That is,\n    /// the pattern is itself only one line.\n    line_number_width: usize,\n    /// All error spans that occur on a single line. This sequence always has\n    /// length equivalent to the number of lines in `pattern`, where the index\n    /// of the sequence represents a line number, starting at `0`. The spans\n    /// in each line are sorted in ascending order.\n    by_line: Vec<Vec<ast::Span>>,\n    /// All error spans that occur over one or more lines. That is, the start\n    /// and end position of the span have different line numbers. The spans are\n    /// sorted in ascending order.\n    multi_line: Vec<ast::Span>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\nimpl<'p> Spans<'p> {\n    fn from_formatter<'e, E: core::fmt::Display>(\n        fmter: &'p Formatter<'e, E>,\n    ) -> Spans<'p> {}\n    fn add(&mut self, span: ast::Span) {}\n    fn notate(&self) -> String {}\n    fn notate_line(&self, i: usize) -> Option<String> {\n        let spans = &self.by_line[i];\n        if spans.is_empty() {\n            return None;\n        }\n        let mut notes = String::new();\n        for _ in 0..self.line_number_padding() {\n            notes.push(' ');\n        }\n        let mut pos = 0;\n        for span in spans {\n            for _ in pos..(span.start.column - 1) {\n                notes.push(' ');\n                pos += 1;\n            }\n            let note_len = span.end.column.saturating_sub(span.start.column);\n            for _ in 0..core::cmp::max(1, note_len) {\n                notes.push('^');\n                pos += 1;\n            }\n        }\n        Some(notes)\n    }\n    fn left_pad_line_number(&self, n: usize) -> String {}\n    fn line_number_padding(&self) -> usize {\n        if self.line_number_width == 0 { 4 } else { 2 + self.line_number_width }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return notes for the line indexed at `i` (zero-based). If there are no\n/// spans for the given line, then `None` is returned. Otherwise, an\n/// appropriately space padded string with correctly positioned `^` is\n/// returned, accounting for line numbers.\n220 fn notate_line(&self, i: usize) -> Option<String> {\n221     let spans = &self.by_line[i];\n222     if spans.is_empty() {\n223         return None;\n224     }\n225     let mut notes = String::new();\n226     for _ in 0..self.line_number_padding() {\n227         notes.push(' ');\n228     }\n229     let mut pos = 0;\n230     for span in spans {\n231         for _ in pos..(span.start.column - 1) {\n232             notes.push(' ');\n233             pos += 1;\n234         }\n235         let note_len = span.end.column.saturating_sub(span.start.column);\n236         for _ in 0..core::cmp::max(1, note_len) {\n237             notes.push('^');\n238             pos += 1;\n239         }\n240     }\n241     Some(notes)\n242 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}