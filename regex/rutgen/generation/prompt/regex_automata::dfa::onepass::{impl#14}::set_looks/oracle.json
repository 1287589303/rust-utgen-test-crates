{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where\n    /// `i = Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\nimpl Epsilons {\n    const SLOT_MASK: u64 = 0x000003FF_FFFFFC00;\n    const SLOT_SHIFT: u64 = 10;\n    const LOOK_MASK: u64 = 0x00000000_000003FF;\n    fn empty() -> Epsilons {}\n    fn is_empty(self) -> bool {}\n    fn slots(self) -> Slots {}\n    fn set_slots(self, slots: Slots) -> Epsilons {}\n    fn looks(self) -> LookSet {}\n    fn set_looks(self, look_set: LookSet) -> Epsilons {\n        Epsilons(\n            (self.0 & Epsilons::SLOT_MASK)\n                | (u64::from(look_set.bits) & Epsilons::LOOK_MASK),\n        )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the look-around assertions on these epsilon transitions.\n2822 fn set_looks(self, look_set: LookSet) -> Epsilons {\n2823     Epsilons(\n2824         (self.0 & Epsilons::SLOT_MASK)\n2825             | (u64::from(look_set.bits) & Epsilons::LOOK_MASK),\n2826     )\n2827 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}