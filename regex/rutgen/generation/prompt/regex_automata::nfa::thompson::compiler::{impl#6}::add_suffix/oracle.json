{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Debug)]\nstruct Utf8Compiler<'a> {\n    builder: &'a mut Builder,\n    state: &'a mut Utf8State,\n    target: StateID,\n}\n#[derive(Clone, Debug, Default)]\npub struct Builder {\n    /// The ID of the pattern that we're currently building.\n    ///\n    /// Callers are required to set (and unset) this by calling\n    /// {start,finish}_pattern. Otherwise, most methods will panic.\n    pattern_id: Option<PatternID>,\n    /// A sequence of intermediate NFA states. Once a state is added to this\n    /// sequence, it is assigned a state ID equivalent to its index. Once a\n    /// state is added, it is still expected to be mutated, e.g., to set its\n    /// transition to a state that didn't exist at the time it was added.\n    states: Vec<State>,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// A map from pattern ID to capture group index to name. (If no name\n    /// exists, then a None entry is present. Thus, all capturing groups are\n    /// present in this mapping.)\n    ///\n    /// The outer vec is indexed by pattern ID, while the inner vec is indexed\n    /// by capture index offset for the corresponding pattern.\n    ///\n    /// The first capture group for each pattern is always unnamed and is thus\n    /// always None.\n    captures: Vec<Vec<Option<Arc<str>>>>,\n    /// The combined memory used by each of the 'State's in 'states'. This\n    /// only includes heap usage by each state, and not the size of the state\n    /// itself. In other words, this tracks heap memory used that isn't\n    /// captured via `size_of::<State>() * states.len()`.\n    memory_states: usize,\n    /// Whether this NFA only matches UTF-8 and whether regex engines using\n    /// this NFA for searching should report empty matches that split a\n    /// codepoint.\n    utf8: bool,\n    /// Whether this NFA should be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to use for look-around assertions.\n    look_matcher: LookMatcher,\n    /// A size limit to respect when building an NFA. If the total heap memory\n    /// of the intermediate NFA states exceeds (or would exceed) this amount,\n    /// then an error is returned.\n    size_limit: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\nstruct Utf8State {\n    compiled: Utf8BoundedMap,\n    uncompiled: Vec<Utf8Node>,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    dfa: dfa::Builder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    #[cfg(feature = \"dfa-build\")]\n    dfa: dense::Builder,\n}\n#[derive(Clone, Debug)]\nstruct Utf8Node {\n    trans: Vec<Transition>,\n    last: Option<Utf8LastTransition>,\n}\n#[derive(Clone, Debug)]\nstruct Utf8LastTransition {\n    start: u8,\n    end: u8,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'a> Utf8Compiler<'a> {\n    fn new(\n        builder: &'a mut Builder,\n        state: &'a mut Utf8State,\n    ) -> Result<Utf8Compiler<'a>, BuildError> {}\n    fn finish(&mut self) -> Result<ThompsonRef, BuildError> {}\n    fn add(&mut self, ranges: &[Utf8Range]) -> Result<(), BuildError> {}\n    fn compile_from(&mut self, from: usize) -> Result<(), BuildError> {}\n    fn compile(&mut self, node: Vec<Transition>) -> Result<StateID, BuildError> {}\n    fn add_suffix(&mut self, ranges: &[Utf8Range]) {\n        assert!(! ranges.is_empty());\n        let last = self.state.uncompiled.len().checked_sub(1).expect(\"non-empty nodes\");\n        assert!(self.state.uncompiled[last].last.is_none());\n        self.state.uncompiled[last].last = Some(Utf8LastTransition {\n            start: ranges[0].start,\n            end: ranges[0].end,\n        });\n        for r in &ranges[1..] {\n            self.state\n                .uncompiled\n                .push(Utf8Node {\n                    trans: vec![],\n                    last: Some(Utf8LastTransition {\n                        start: r.start,\n                        end: r.end,\n                    }),\n                });\n        }\n    }\n    fn add_empty(&mut self) {}\n    fn pop_freeze(&mut self, next: StateID) -> Vec<Transition> {}\n    fn pop_root(&mut self) -> Vec<Transition> {}\n    fn top_last_freeze(&mut self, next: StateID) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1819 fn add_suffix(&mut self, ranges: &[Utf8Range]) {\n1820     assert!(!ranges.is_empty());\n1821     let last = self\n1822         .state\n1823         .uncompiled\n1824         .len()\n1825         .checked_sub(1)\n1826         .expect(\"non-empty nodes\");\n1827     assert!(self.state.uncompiled[last].last.is_none());\n1828     self.state.uncompiled[last].last = Some(Utf8LastTransition {\n1829         start: ranges[0].start,\n1830         end: ranges[0].end,\n1831     });\n1832     for r in &ranges[1..] {\n1833         self.state.uncompiled.push(Utf8Node {\n1834             trans: vec![],\n1835             last: Some(Utf8LastTransition { start: r.start, end: r.end }),\n1836         });\n1837     }\n1838 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}