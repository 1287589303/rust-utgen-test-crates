{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\npub fn perl_digit() -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-gencat\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PerlClassNotFound)\n    }\n    #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-gencat\")))]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::perl_decimal::DECIMAL_NUMBER;\n        Ok(hir_class(DECIMAL_NUMBER))\n    }\n    #[cfg(feature = \"unicode-gencat\")]\n    fn imp() -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::general_category::DECIMAL_NUMBER;\n        Ok(hir_class(DECIMAL_NUMBER))\n    }\n    imp()\n}\n#[cfg(feature = \"unicode-gencat\")]\nfn imp() -> Result<hir::ClassUnicode, Error> {\n    use crate::unicode_tables::general_category::DECIMAL_NUMBER;\n    Ok(hir_class(DECIMAL_NUMBER))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a Unicode aware class for \\d.\n///\n/// This returns an error if the data is not available for \\d.\n430 pub fn perl_digit() -> Result<hir::ClassUnicode, Error> {\n431     #[cfg(not(any(feature = \"unicode-perl\", feature = \"unicode-gencat\")))]\n432     fn imp() -> Result<hir::ClassUnicode, Error> {\n433         Err(Error::PerlClassNotFound)\n434     }\n435 \n436     #[cfg(all(feature = \"unicode-perl\", not(feature = \"unicode-gencat\")))]\n437     fn imp() -> Result<hir::ClassUnicode, Error> {\n438         use crate::unicode_tables::perl_decimal::DECIMAL_NUMBER;\n439         Ok(hir_class(DECIMAL_NUMBER))\n440     }\n441 \n442     #[cfg(feature = \"unicode-gencat\")]\n443     fn imp() -> Result<hir::ClassUnicode, Error> {\n444         use crate::unicode_tables::general_category::DECIMAL_NUMBER;\n445         Ok(hir_class(DECIMAL_NUMBER))\n446     }\n447 \n448     imp()\n449 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}