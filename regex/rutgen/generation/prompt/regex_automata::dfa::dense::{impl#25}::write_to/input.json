{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Flags {\n    /// Whether the DFA can match the empty string. When this is false, all\n    /// matches returned by this DFA are guaranteed to have non-zero length.\n    pub(crate) has_empty: bool,\n    /// Whether the DFA should only produce matches with spans that correspond\n    /// to valid UTF-8. This also includes omitting any zero-width matches that\n    /// split the UTF-8 encoding of a codepoint.\n    pub(crate) is_utf8: bool,\n    /// Whether the DFA is always anchored or not, regardless of `Input`\n    /// configuration. This is useful for avoiding a reverse scan even when\n    /// executing unanchored searches.\n    pub(crate) is_always_start_anchored: bool,\n}\n#[derive(Debug)]\npub struct SerializeError {\n    /// The name of the thing that a buffer is too small for.\n    ///\n    /// Currently, the only kind of serialization error is one that is\n    /// committed by a caller: providing a destination buffer that is too\n    /// small to fit the serialized object. This makes sense conceptually,\n    /// since every valid inhabitant of a type should be serializable.\n    ///\n    /// This is somewhat exposed in the public API of this crate. For example,\n    /// the `to_bytes_{big,little}_endian` APIs return a `Vec<u8>` and are\n    /// guaranteed to never panic or error. This is only possible because the\n    /// implementation guarantees that it will allocate a `Vec<u8>` that is\n    /// big enough.\n    ///\n    /// In summary, if a new serialization error kind needs to be added, then\n    /// it will need careful consideration.\n    what: &'static str,\n}\nimpl Flags {\n    #[cfg(feature = \"dfa-build\")]\n    fn from_nfa(nfa: &thompson::NFA) -> Flags {}\n    pub(crate) fn from_bytes(slice: &[u8]) -> Result<(Flags, usize), DeserializeError> {}\n    pub(crate) fn write_to<E: Endian>(\n        &self,\n        dst: &mut [u8],\n    ) -> Result<usize, SerializeError> {\n        fn bool_to_int(b: bool) -> u32 {\n            if b { 1 } else { 0 }\n        }\n        let nwrite = self.write_to_len();\n        if dst.len() < nwrite {\n            return Err(SerializeError::buffer_too_small(\"flag bitset\"));\n        }\n        let bits = (bool_to_int(self.has_empty) << 0) | (bool_to_int(self.is_utf8) << 1)\n            | (bool_to_int(self.is_always_start_anchored) << 2);\n        E::write_u32(bits, dst);\n        Ok(nwrite)\n    }\n    pub(crate) fn write_to_len(&self) -> usize {\n        size_of::<u32>()\n    }\n}\nimpl SerializeError {\n    pub(crate) fn buffer_too_small(what: &'static str) -> SerializeError {\n        SerializeError { what }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Writes these flags to the given byte slice. If the buffer is too small,\n/// then an error is returned. To determine how big the buffer must be,\n/// use `write_to_len`.\n4720 pub(crate) fn write_to<E: Endian>(\n4721     &self,\n4722     dst: &mut [u8],\n4723 ) -> Result<usize, SerializeError> {\n4724     fn bool_to_int(b: bool) -> u32 {\n4725         if b {\n4726             1\n4727         } else {\n4728             0\n4729         }\n4730     }\n4731 \n4732     let nwrite = self.write_to_len();\n4733     if dst.len() < nwrite {\n4734         return Err(SerializeError::buffer_too_small(\"flag bitset\"));\n4735     }\n4736     let bits = (bool_to_int(self.has_empty) << 0)\n4737         | (bool_to_int(self.is_utf8) << 1)\n4738         | (bool_to_int(self.is_always_start_anchored) << 2);\n4739     E::write_u32(bits, dst);\n4740     Ok(nwrite)\n4741 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}