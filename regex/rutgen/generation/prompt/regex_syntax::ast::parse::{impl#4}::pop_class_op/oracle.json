{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassSetBinaryOp {\n    /// The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.\n    pub span: Span,\n    /// The type of this set operation.\n    pub kind: ClassSetBinaryOpKind,\n    /// The left hand side of the operation.\n    pub lhs: Box<ClassSet>,\n    /// The right hand side of the operation.\n    pub rhs: Box<ClassSet>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Position {\n    /// The absolute offset of this position, starting at `0` from the\n    /// beginning of the regular expression pattern string.\n    pub offset: usize,\n    /// The line number, starting at `1`.\n    pub line: usize,\n    /// The approximate column number, starting at `1`.\n    pub column: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ClassSet {\n    /// An item, which can be a single literal, range, nested character class\n    /// or a union of items.\n    Item(ClassSetItem),\n    /// A single binary operation (i.e., &&, -- or ~~).\n    BinaryOp(ClassSetBinaryOp),\n}\n#[derive(Clone, Debug)]\nenum ClassState {\n    /// This state is pushed whenever an opening bracket is found.\n    Open {\n        /// The union of class items immediately preceding this class.\n        union: ast::ClassSetUnion,\n        /// The class that has been opened. Typically this just corresponds\n        /// to the `[`, but it can also include `[^` since `^` indicates\n        /// negation of the class.\n        set: ast::ClassBracketed,\n    },\n    /// This state is pushed when a operator is seen. When popped, the stored\n    /// set becomes the left hand side of the operator.\n    Op {\n        /// The type of the operation, i.e., &&, -- or ~~.\n        kind: ast::ClassSetBinaryOpKind,\n        /// The left-hand side of the operator.\n        lhs: ast::ClassSet,\n    },\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ClassSetBinaryOpKind {\n    /// The intersection of two sets, e.g., `\\pN&&[a-z]`.\n    Intersection,\n    /// The difference of two sets, e.g., `\\pN--[0-9]`.\n    Difference,\n    /// The symmetric difference of two sets. The symmetric difference is the\n    /// set of elements belonging to one but not both sets.\n    /// e.g., `[\\pL~~[:ascii:]]`.\n    SymmetricDifference,\n}\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    fn new(parser: P, pattern: &'s str) -> ParserI<'s, P> {}\n    fn parser(&self) -> &Parser {\n        self.parser.borrow()\n    }\n    fn pattern(&self) -> &str {}\n    fn error(&self, span: Span, kind: ast::ErrorKind) -> ast::Error {}\n    fn offset(&self) -> usize {}\n    fn line(&self) -> usize {}\n    fn column(&self) -> usize {}\n    fn next_capture_index(&self, span: Span) -> Result<u32> {}\n    fn add_capture_name(&self, cap: &ast::CaptureName) -> Result<()> {}\n    fn ignore_whitespace(&self) -> bool {}\n    fn char(&self) -> char {\n        self.char_at(self.offset())\n    }\n    fn char_at(&self, i: usize) -> char {}\n    fn bump(&self) -> bool {}\n    fn bump_if(&self, prefix: &str) -> bool {}\n    fn is_lookaround_prefix(&self) -> bool {}\n    fn bump_and_bump_space(&self) -> bool {}\n    fn bump_space(&self) {}\n    fn peek(&self) -> Option<char> {}\n    fn peek_space(&self) -> Option<char> {}\n    fn is_eof(&self) -> bool {}\n    fn pos(&self) -> Position {}\n    fn span(&self) -> Span {}\n    fn span_char(&self) -> Span {}\n    #[inline(never)]\n    fn push_alternate(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    fn push_or_add_alternation(&self, concat: ast::Concat) {}\n    #[inline(never)]\n    fn push_group(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn pop_group(&self, mut group_concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn pop_group_end(&self, mut concat: ast::Concat) -> Result<Ast> {}\n    #[inline(never)]\n    fn push_class_open(\n        &self,\n        parent_union: ast::ClassSetUnion,\n    ) -> Result<ast::ClassSetUnion> {}\n    #[inline(never)]\n    fn pop_class(\n        &self,\n        nested_union: ast::ClassSetUnion,\n    ) -> Result<Either<ast::ClassSetUnion, ast::ClassBracketed>> {}\n    #[inline(never)]\n    fn unclosed_class_error(&self) -> ast::Error {}\n    #[inline(never)]\n    fn push_class_op(\n        &self,\n        next_kind: ast::ClassSetBinaryOpKind,\n        next_union: ast::ClassSetUnion,\n    ) -> ast::ClassSetUnion {}\n    #[inline(never)]\n    fn pop_class_op(&self, rhs: ast::ClassSet) -> ast::ClassSet {\n        let mut stack = self.parser().stack_class.borrow_mut();\n        let (kind, lhs) = match stack.pop() {\n            Some(ClassState::Op { kind, lhs }) => (kind, lhs),\n            Some(state @ ClassState::Open { .. }) => {\n                stack.push(state);\n                return rhs;\n            }\n            None => unreachable!(),\n        };\n        let span = Span::new(lhs.span().start, rhs.span().end);\n        ast::ClassSet::BinaryOp(ast::ClassSetBinaryOp {\n            span,\n            kind,\n            lhs: Box::new(lhs),\n            rhs: Box::new(rhs),\n        })\n    }\n}\nimpl Span {\n    pub fn new(start: Position, end: Position) -> Span {\n        Span { start, end }\n    }\n    pub fn splat(pos: Position) -> Span {}\n    pub fn with_start(self, pos: Position) -> Span {}\n    pub fn with_end(self, pos: Position) -> Span {}\n    pub fn is_one_line(&self) -> bool {}\n    pub fn is_empty(&self) -> bool {}\n}\nimpl ClassSet {\n    pub fn union(ast: ClassSetUnion) -> ClassSet {}\n    pub fn span(&self) -> &Span {\n        match *self {\n            ClassSet::Item(ref x) => x.span(),\n            ClassSet::BinaryOp(ref x) => &x.span,\n        }\n    }\n    fn is_empty(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Pop a character class set from the character class parser stack. If the\n/// top of the stack is just an item (not an operation), then return the\n/// given set unchanged. If the top of the stack is an operation, then the\n/// given set will be used as the rhs of the operation on the top of the\n/// stack. In that case, the binary operation is returned as a set.\n954 fn pop_class_op(&self, rhs: ast::ClassSet) -> ast::ClassSet {\n955     let mut stack = self.parser().stack_class.borrow_mut();\n956     let (kind, lhs) = match stack.pop() {\n957         Some(ClassState::Op { kind, lhs }) => (kind, lhs),\n958         Some(state @ ClassState::Open { .. }) => {\n959             stack.push(state);\n960             return rhs;\n961         }\n962         None => unreachable!(),\n963     };\n964     let span = Span::new(lhs.span().start, rhs.span().end);\n965     ast::ClassSet::BinaryOp(ast::ClassSetBinaryOp {\n966         span,\n967         kind,\n968         lhs: Box::new(lhs),\n969         rhs: Box::new(rhs),\n970     })\n971 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}