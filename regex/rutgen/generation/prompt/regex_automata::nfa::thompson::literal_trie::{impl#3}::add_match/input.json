{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/literal_trie.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, compiler::ThompsonRef, BuildError, Builder},\n    util::primitives::{IteratorIndexExt, StateID},\n};\n#[derive(Clone, Default)]\nstruct State {\n    transitions: Vec<Transition>,\n    chunks: Vec<(usize, usize)>,\n}\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\nimpl State {\n    fn add_match(&mut self) {\n        if self.transitions.is_empty() && !self.chunks.is_empty() {\n            return;\n        }\n        let chunk_start = self.active_chunk_start();\n        let chunk_end = self.transitions.len();\n        self.chunks.push((chunk_start, chunk_end));\n    }\n    fn is_leaf(&self) -> bool {}\n    fn chunks(&self) -> StateChunksIter<'_> {}\n    fn active_chunk(&self) -> &[Transition] {}\n    fn active_chunk_start(&self) -> usize {\n        self.chunks.last().map_or(0, |&(_, end)| end)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Mark this state as a match state and freeze the active chunk such that\n/// it can not be further mutated.\n371 fn add_match(&mut self) {\n372     // This is not strictly necessary, but there's no point in recording\n373     // another match by adding another chunk if the state has no\n374     // transitions. Note though that we only skip this if we already know\n375     // this is a match state, which is only true if 'chunks' is not empty.\n376     // Basically, if we didn't do this, nothing semantically would change,\n377     // but we'd end up pushing another chunk and potentially triggering an\n378     // alloc.\n379     if self.transitions.is_empty() && !self.chunks.is_empty() {\n380         return;\n381     }\n382     let chunk_start = self.active_chunk_start();\n383     let chunk_end = self.transitions.len();\n384     self.chunks.push((chunk_start, chunk_end));\n385 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}