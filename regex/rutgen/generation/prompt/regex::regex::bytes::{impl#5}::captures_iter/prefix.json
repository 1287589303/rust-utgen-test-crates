{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Debug)]\npub struct CaptureMatches<'r, 'h> {\n    haystack: &'h [u8],\n    it: meta::CapturesMatches<'r, 'h>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &[u8]) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h [u8]) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h [u8]) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(\n        &'r self,\n        haystack: &'h [u8],\n    ) -> CaptureMatches<'r, 'h> {\n        CaptureMatches {\n            haystack,\n            it: self.meta.captures_iter(haystack),\n        }\n    }\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h [u8], limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h [u8], rep: R) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        rep: R,\n    ) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, [u8]> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator that yields successive non-overlapping matches in\n/// the given haystack. The iterator yields values of type [`Captures`].\n///\n/// This is the same as [`Regex::find_iter`], but instead of only providing\n/// access to the overall match, each value yield includes access to the\n/// matches of all capture groups in the regex. Reporting this extra match\n/// data is potentially costly, so callers should only use `captures_iter`\n/// over `find_iter` when they actually need access to the capture group\n/// matches.\n///\n/// # Time complexity\n///\n/// Note that since `captures_iter` runs potentially many searches on the\n/// haystack and since each search has worst case `O(m * n)` time\n/// complexity, the overall worst case time complexity for iteration is\n/// `O(m * n^2)`.\n///\n/// # Example\n///\n/// We can use this to find all movie titles and their release years in\n/// some haystack, where the movie is formatted like \"'Title' (xxxx)\":\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();\n/// let hay = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n/// let mut movies = vec![];\n/// for (_, [title, year]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     // OK because [0-9]{4} can only match valid UTF-8.\n///     let year = std::str::from_utf8(year).unwrap();\n///     movies.push((title, year.parse::<i64>()?));\n/// }\n/// assert_eq!(movies, vec![\n///     (&b\"Citizen Kane\"[..], 1941),\n///     (&b\"The Wizard of Oz\"[..], 1939),\n///     (&b\"M\"[..], 1931),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Or with named groups:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();\n/// let hay = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n/// let mut it = re.captures_iter(hay);\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], b\"Citizen Kane\");\n/// assert_eq!(&caps[\"year\"], b\"1941\");\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], b\"The Wizard of Oz\");\n/// assert_eq!(&caps[\"year\"], b\"1939\");\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], b\"M\");\n/// assert_eq!(&caps[\"year\"], b\"1931\");\n/// ```\n420 pub fn captures_iter<'r, 'h>(\n421     &'r self,\n422     haystack: &'h [u8],\n423 ) -> CaptureMatches<'r, 'h> {\n424     CaptureMatches { haystack, it: self.meta.captures_iter(haystack) }\n425 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}