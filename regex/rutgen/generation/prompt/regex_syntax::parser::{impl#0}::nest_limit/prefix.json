{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/parser.rs\n// crate name is regex_syntax\nuse crate::{ast, hir, Error};\n#[derive(Clone, Debug, Default)]\npub struct ParserBuilder {\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct ParserBuilder {\n    ignore_whitespace: bool,\n    nest_limit: u32,\n    octal: bool,\n    empty_min_range: bool,\n}\n#[derive(Clone, Debug)]\npub struct TranslatorBuilder {\n    utf8: bool,\n    line_terminator: u8,\n    flags: Flags,\n}\nimpl ParserBuilder {\n    pub fn new() -> ParserBuilder {}\n    pub fn build(&self) -> Parser {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut ParserBuilder {\n        self.nest_limit = limit;\n        self\n    }\n    pub fn octal(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn utf8(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut ParserBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut ParserBuilder {}\n    pub fn unicode(&mut self, yes: bool) -> &mut ParserBuilder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the nesting limit for this parser.\n///\n/// The nesting limit controls how deep the abstract syntax tree is allowed\n/// to be. If the AST exceeds the given limit (e.g., with too many nested\n/// groups), then an error is returned by the parser.\n///\n/// The purpose of this limit is to act as a heuristic to prevent stack\n/// overflow for consumers that do structural induction on an `Ast` using\n/// explicit recursion. While this crate never does this (instead using\n/// constant stack space and moving the call stack to the heap), other\n/// crates may.\n///\n/// This limit is not checked until the entire Ast is parsed. Therefore,\n/// if callers want to put a limit on the amount of heap space used, then\n/// they should impose a limit on the length, in bytes, of the concrete\n/// pattern string. In particular, this is viable since this parser\n/// implementation will limit itself to heap space proportional to the\n/// length of the pattern string.\n///\n/// Note that a nest limit of `0` will return a nest limit error for most\n/// patterns but not all. For example, a nest limit of `0` permits `a` but\n/// not `ab`, since `ab` requires a concatenation, which results in a nest\n/// depth of `1`. In general, a nest limit is not something that manifests\n/// in an obvious way in the concrete syntax, therefore, it should not be\n/// used in a granular way.\n66 pub fn nest_limit(&mut self, limit: u32) -> &mut ParserBuilder {\n67     self.ast.nest_limit(limit);\n68     self\n69 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}