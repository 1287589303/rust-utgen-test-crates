{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/start.rs\n// crate name is regex_automata\nuse crate::util::{\n    look::LookMatcher, search::{Anchored, Input},\n    wire::{self, DeserializeError, SerializeError},\n};\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl Config {\n    pub fn new() -> Config {\n        Config {\n            anchored: Anchored::No,\n            look_behind: None,\n        }\n    }\n    pub fn from_input_forward(input: &Input<'_>) -> Config {}\n    pub fn from_input_reverse(input: &Input<'_>) -> Config {}\n    pub fn look_behind(mut self, byte: Option<u8>) -> Config {}\n    pub fn anchored(mut self, mode: Anchored) -> Config {}\n    pub fn get_look_behind(&self) -> Option<u8> {}\n    pub fn get_anchored(&self) -> Anchored {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new default start configuration.\n///\n/// The default is an unanchored search that starts at the beginning of the\n/// haystack.\n131 pub fn new() -> Config {\n132     Config { anchored: Anchored::No, look_behind: None }\n133 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}