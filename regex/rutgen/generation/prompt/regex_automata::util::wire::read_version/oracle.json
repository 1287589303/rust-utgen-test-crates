{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {}\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::VersionMismatch {\n            expected,\n            found,\n        })\n    }\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\npub(crate) fn read_version(\n    slice: &[u8],\n    expected_version: u32,\n) -> Result<usize, DeserializeError> {\n    let (n, nr) = try_read_u32(slice, \"version\")?;\n    assert_eq!(nr, write_version_len());\n    if n != expected_version {\n        return Err(DeserializeError::version_mismatch(expected_version, n));\n    }\n    Ok(nr)\n}\npub(crate) fn try_read_u32(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(u32, usize), DeserializeError> {\n    check_slice_len(slice, size_of::<u32>(), what)?;\n    Ok((read_u32(slice), size_of::<u32>()))\n}\npub(crate) fn write_version_len() -> usize {\n    size_of::<u32>()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reads a version number from the beginning of the given slice and confirms\n/// that is matches the expected version number given. If the slice is too\n/// small or if the version numbers aren't equivalent, this returns an error.\n///\n/// Upon success, the total number of bytes read is returned.\n///\n/// N.B. Currently, we require that the version number is exactly equivalent.\n/// In the future, if we bump the version number without a semver bump, then\n/// we'll need to relax this a bit and support older versions.\n540 pub(crate) fn read_version(\n541     slice: &[u8],\n542     expected_version: u32,\n543 ) -> Result<usize, DeserializeError> {\n544     let (n, nr) = try_read_u32(slice, \"version\")?;\n545     assert_eq!(nr, write_version_len());\n546     if n != expected_version {\n547         return Err(DeserializeError::version_mismatch(expected_version, n));\n548     }\n549     Ok(nr)\n550 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}