{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {}\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::BufferTooSmall {\n            what,\n        })\n    }\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\npub(crate) fn try_read_state_id(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(StateID, usize), DeserializeError> {\n    if slice.len() < StateID::SIZE {\n        return Err(DeserializeError::buffer_too_small(what));\n    }\n    read_state_id(slice, what)\n}\npub(crate) fn read_state_id(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(StateID, usize), DeserializeError> {\n    let bytes: [u8; StateID::SIZE] = slice[..StateID::SIZE].try_into().unwrap();\n    let sid = StateID::from_ne_bytes(bytes)\n        .map_err(|err| DeserializeError::state_id_error(err, what))?;\n    Ok((sid, StateID::SIZE))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Attempts to read a state ID from the given slice. If the slice has an\n/// insufficient number of bytes or if the state ID exceeds the limit for\n/// the current target, then this returns an error.\n///\n/// Upon success, this also returns the number of bytes read.\n621 pub(crate) fn try_read_state_id(\n622     slice: &[u8],\n623     what: &'static str,\n624 ) -> Result<(StateID, usize), DeserializeError> {\n625     if slice.len() < StateID::SIZE {\n626         return Err(DeserializeError::buffer_too_small(what));\n627     }\n628     read_state_id(slice, what)\n629 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}