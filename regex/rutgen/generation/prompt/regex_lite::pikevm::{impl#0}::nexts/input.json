{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/pikevm.rs\n// crate name is regex_lite\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    int::{NonMaxUsize, U32},\n    nfa::{State, StateID, NFA},\n    pool::CachePoolGuard, utf8,\n};\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone)]\nstruct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\n#[derive(Clone, Debug)]\nstruct SlotTable {\n    /// The actual table of offsets.\n    table: Vec<Option<NonMaxUsize>>,\n    /// The number of slots per state, i.e., the table's stride or the length\n    /// of each row.\n    slots_per_state: usize,\n    /// The number of slots in the caller-provided `Captures` value for the\n    /// current search. Setting this to `slots_per_state` is always correct,\n    /// but may be wasteful.\n    slots_for_captures: usize,\n}\n#[derive(Clone)]\npub(crate) struct NFA {\n    /// The pattern string this NFA was generated from.\n    ///\n    /// We put it here for lack of a better place to put it. ¯\\_(ツ)_/¯\n    pattern: String,\n    /// The states that make up this NFA.\n    states: Vec<State>,\n    /// The ID of the start state.\n    start: StateID,\n    /// Whether this NFA can only match at the beginning of a haystack.\n    is_start_anchored: bool,\n    /// Whether this NFA can match the empty string.\n    is_match_empty: bool,\n    /// If every match has the same number of matching capture groups, then\n    /// this corresponds to the number of groups.\n    static_explicit_captures_len: Option<usize>,\n    /// A map from capture group name to its corresponding index.\n    cap_name_to_index: CaptureNameMap,\n    /// A map from capture group index to the corresponding name, if one\n    /// exists.\n    cap_index_to_name: Vec<Option<Arc<str>>>,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub(crate) struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Debug)]\nstruct ActiveStates {\n    /// The set of active NFA states. This set preserves insertion order, which\n    /// is critical for simulating the match semantics of backtracking regex\n    /// engines.\n    set: SparseSet,\n    /// The slots for every NFA state, where each slot stores a (possibly\n    /// absent) offset. Every capturing group has two slots. One for a start\n    /// offset and one for an end offset.\n    slot_table: SlotTable,\n}\n#[derive(Debug)]\nstruct SparseSetIter<'a>(core::slice::Iter<'a, StateID>);\n#[derive(Clone, Debug)]\nenum FollowEpsilon {\n    /// Explore the epsilon transitions from a state ID.\n    Explore(StateID),\n    /// Reset the given `slot` to the given `offset` (which might be `None`).\n    RestoreCapture { slot: u32, offset: Option<NonMaxUsize> },\n}\nimpl PikeVM {\n    pub(crate) fn new(nfa: NFA) -> PikeVM {}\n    pub(crate) fn nfa(&self) -> &NFA {}\n    pub(crate) fn find_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> FindMatches<'r, 'h> {}\n    pub(crate) fn captures_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> CapturesMatches<'r, 'h> {}\n    pub(crate) fn search(\n        &self,\n        cache: &mut Cache,\n        haystack: &[u8],\n        start: usize,\n        end: usize,\n        earliest: bool,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {}\n    fn nexts(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr: &mut ActiveStates,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {\n        let ActiveStates { ref set, ref mut slot_table } = *curr;\n        for sid in set.iter() {\n            if self.next(stack, slot_table, next, haystack, at, at_ch, at_len, sid) {\n                slots.copy_from_slice(slot_table.for_state(sid));\n                return true;\n            }\n        }\n        false\n    }\n    fn next(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slot_table: &mut SlotTable,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        sid: StateID,\n    ) -> bool {\n        match *self.nfa.state(sid) {\n            State::Fail\n            | State::Goto { .. }\n            | State::Splits { .. }\n            | State::Capture { .. } => false,\n            State::Char { target, ch } => {\n                if at_ch == ch && at_len > 0 {\n                    let slots = curr_slot_table.for_state(sid);\n                    let at = at.wrapping_add(at_len);\n                    self.epsilon_closure(stack, slots, next, haystack, at, target);\n                }\n                false\n            }\n            State::Ranges { target, ref ranges } => {\n                for (start, end) in ranges.iter().copied() {\n                    if start > at_ch {\n                        break;\n                    } else if start <= at_ch && at_ch <= end {\n                        if at_len == 0 {\n                            return false;\n                        }\n                        let slots = curr_slot_table.for_state(sid);\n                        let at = at.wrapping_add(at_len);\n                        self.epsilon_closure(stack, slots, next, haystack, at, target);\n                    }\n                }\n                false\n            }\n            State::Match => true,\n        }\n    }\n    fn epsilon_closure(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        sid: StateID,\n    ) {}\n    fn epsilon_closure_explore(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        mut sid: StateID,\n    ) {}\n}\nimpl SparseSet {\n    fn new(capacity: usize) -> SparseSet {}\n    fn resize(&mut self, new_capacity: usize) {}\n    fn capacity(&self) -> usize {}\n    fn len(&self) -> usize {}\n    fn is_empty(&self) -> bool {}\n    fn insert(&mut self, id: StateID) -> bool {}\n    fn contains(&self, id: StateID) -> bool {}\n    fn clear(&mut self) {}\n    fn iter(&self) -> SparseSetIter<'_> {\n        SparseSetIter(self.dense[..self.len()].iter())\n    }\n}\nimpl SlotTable {\n    fn new() -> SlotTable {}\n    fn reset(&mut self, re: &PikeVM) {}\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n    fn for_state(&mut self, sid: StateID) -> &mut [Option<NonMaxUsize>] {\n        let i = sid.as_usize() * self.slots_per_state;\n        &mut self.table[i..i + self.slots_for_captures]\n    }\n    fn all_absent(&mut self) -> &mut [Option<NonMaxUsize>] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Process the active states in 'curr' to find the states (written to\n/// 'next') we should process for the next byte in the haystack.\n///\n/// 'stack' is used to perform a depth first traversal of the NFA when\n/// computing an epsilon closure.\n///\n/// When a match is found, the slots for that match state (in 'curr') are\n/// copied to 'caps'. Moreover, once a match is seen, processing for 'curr'\n/// stops (unless the PikeVM was configured with MatchKind::All semantics).\n///\n/// `at_ch` is the Unicode scalar value whose UTF-8 encoding begins at `at`\n/// in `haystack`.\n///\n/// `at_len` is the number of bytes consumed by `at_ch`. This is usually\n/// equal to `at_ch.len_utf8()`, but not always. For example, in the case\n/// where `at_ch` is the replacement codepoint that results from decoding\n/// invalid UTF-8. In that case, `at_len` can be 1, 2 or 3.\n198 fn nexts(\n199     &self,\n200     stack: &mut Vec<FollowEpsilon>,\n201     curr: &mut ActiveStates,\n202     next: &mut ActiveStates,\n203     haystack: &[u8],\n204     at: usize,\n205     at_ch: char,\n206     at_len: usize,\n207     slots: &mut [Option<NonMaxUsize>],\n208 ) -> bool {\n209     let ActiveStates { ref set, ref mut slot_table } = *curr;\n210     for sid in set.iter() {\n211         if self.next(\n212             stack, slot_table, next, haystack, at, at_ch, at_len, sid,\n213         ) {\n214             slots.copy_from_slice(slot_table.for_state(sid));\n215             return true;\n216         }\n217     }\n218     false\n219 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}