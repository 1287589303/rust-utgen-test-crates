{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub trait Replacer {\n    fn replace_append(&mut self, caps: &Captures<'_>, dst: &mut String);\n    fn no_expansion<'r>(&'r mut self) -> Option<Cow<'r, str>>;\n    fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {\n        ReplacerRef(self)\n    }\n}\n#[derive(Debug)]\npub struct ReplacerRef<'a, R: ?Sized>(&'a mut R);\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a type that implements `Replacer`, but that borrows and wraps\n/// this `Replacer`.\n///\n/// This is useful when you want to take a generic `Replacer` (which might\n/// not be cloneable) and use it without consuming it, so it can be used\n/// more than once.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::{Regex, Replacer};\n///\n/// fn replace_all_twice<R: Replacer>(\n///     re: Regex,\n///     src: &str,\n///     mut rep: R,\n/// ) -> String {\n///     let dst = re.replace_all(src, rep.by_ref());\n///     let dst = re.replace_all(&dst, rep.by_ref());\n///     dst.into_owned()\n/// }\n/// ```\n2490 fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {\n2491     ReplacerRef(self)\n2492 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}