{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Clone, Debug)]\nstruct Utf8Node {\n    trans: Vec<Transition>,\n    last: Option<Utf8LastTransition>,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug)]\nstruct Utf8LastTransition {\n    start: u8,\n    end: u8,\n}\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\nimpl Utf8Node {\n    fn set_last_transition(&mut self, next: StateID) {\n        if let Some(last) = self.last.take() {\n            self.trans\n                .push(Transition {\n                    start: last.start,\n                    end: last.end,\n                    next,\n                });\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1868 fn set_last_transition(&mut self, next: StateID) {\n1869     if let Some(last) = self.last.take() {\n1870         self.trans.push(Transition {\n1871             start: last.start,\n1872             end: last.end,\n1873             next,\n1874         });\n1875     }\n1876 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}