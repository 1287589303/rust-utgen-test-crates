{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/search.rs\n// crate name is regex_automata\nuse crate::{\n    dfa::{accel, automaton::{Automaton, OverlappingState}},\n    util::{\n        prefilter::Prefilter, primitives::StateID,\n        search::{Anchored, HalfMatch, Input, Span},\n    },\n    MatchError,\n};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn init_fwd<A: Automaton + ?Sized>(\n    dfa: &A,\n    input: &Input<'_>,\n) -> Result<StateID, MatchError> {\n    let sid = dfa.start_state_forward(input)?;\n    debug_assert!(! dfa.is_match_state(sid));\n    Ok(sid)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n552 fn init_fwd<A: Automaton + ?Sized>(\n553     dfa: &A,\n554     input: &Input<'_>,\n555 ) -> Result<StateID, MatchError> {\n556     let sid = dfa.start_state_forward(input)?;\n557     // Start states can never be match states, since all matches are delayed\n558     // by 1 byte.\n559     debug_assert!(!dfa.is_match_state(sid));\n560     Ok(sid)\n561 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}