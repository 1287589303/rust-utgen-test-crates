{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\npub(super) trait Remappable: core::fmt::Debug {\n    fn state_len(&self) -> usize;\n    fn stride2(&self) -> usize;\n    fn swap_states(&mut self, id1: StateID, id2: StateID);\n    fn remap(&mut self, map: impl Fn(StateID) -> StateID);\n}\n#[derive(Clone)]\npub struct DFA {\n    /// The configuration provided by the caller.\n    config: Config,\n    /// The NFA used to build this DFA.\n    ///\n    /// NOTE: We probably don't need to store the NFA here, but we use enough\n    /// bits from it that it's convenient to do so. And there really isn't much\n    /// cost to doing so either, since an NFA is reference counted internally.\n    nfa: NFA,\n    /// The transition table. Given a state ID 's' and a byte of haystack 'b',\n    /// the next state is `table[sid + classes[byte]]`.\n    ///\n    /// The stride of this table (i.e., the number of columns) is always\n    /// a power of 2, even if the alphabet length is smaller. This makes\n    /// converting between state IDs and state indices very cheap.\n    ///\n    /// Note that the stride always includes room for one extra \"transition\"\n    /// that isn't actually a transition. It is a 'PatternEpsilons' that is\n    /// used for match states only. Because of this, the maximum number of\n    /// active columns in the transition table is 257, which means the maximum\n    /// stride is 512 (the next power of 2 greater than or equal to 257).\n    table: Vec<Transition>,\n    /// The DFA state IDs of the starting states.\n    ///\n    /// `starts[0]` is always present and corresponds to the starting state\n    /// when searching for matches of any pattern in the DFA.\n    ///\n    /// `starts[i]` where i>0 corresponds to the starting state for the pattern\n    /// ID 'i-1'. These starting states are optional.\n    starts: Vec<StateID>,\n    /// Every state ID >= this value corresponds to a match state.\n    ///\n    /// This is what a search uses to detect whether a state is a match state\n    /// or not. It requires only a simple comparison instead of bit-unpacking\n    /// the PatternEpsilons from every state.\n    min_match_id: StateID,\n    /// The alphabet of this DFA, split into equivalence classes. Bytes in the\n    /// same equivalence class can never discriminate between a match and a\n    /// non-match.\n    classes: ByteClasses,\n    /// The number of elements in each state in the transition table. This may\n    /// be less than the stride, since the stride is always a power of 2 and\n    /// the alphabet length can be anything up to and including 256.\n    alphabet_len: usize,\n    /// The number of columns in the transition table, expressed as a power of\n    /// 2.\n    stride2: usize,\n    /// The offset at which the PatternEpsilons for a match state is stored in\n    /// the transition table.\n    ///\n    /// PERF: One wonders whether it would be better to put this in a separate\n    /// allocation, since only match states have a non-empty PatternEpsilons\n    /// and the number of match states tends be dwarfed by the number of\n    /// non-match states. So this would save '8*len(non_match_states)' for each\n    /// DFA. The question is whether moving this to a different allocation will\n    /// lead to a perf hit during searches. You might think dealing with match\n    /// states is rare, but some regexes spend a lot of time in match states\n    /// gobbling up input. But... match state handling is already somewhat\n    /// expensive, so maybe this wouldn't do much? Either way, it's worth\n    /// experimenting.\n    pateps_offset: usize,\n    /// The first explicit slot index. This refers to the first slot appearing\n    /// immediately after the last implicit slot. It is always 'patterns.len()\n    /// * 2'.\n    ///\n    /// We record this because we only store the explicit slots in our DFA\n    /// transition table that need to be saved. Implicit slots are handled\n    /// automatically as part of the search.\n    explicit_slot_start: usize,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// Scratch space used to store slots during a search. Basically, we use\n    /// the caller provided slots to store slots known when a match occurs.\n    /// But after a match occurs, we might continue a search but ultimately\n    /// fail to extend the match. When continuing the search, we need some\n    /// place to store candidate capture offsets without overwriting the slot\n    /// offsets recorded for the most recently seen match.\n    explicit_slots: Vec<Option<NonMaxUsize>>,\n    /// The number of slots in the caller-provided 'Captures' value for the\n    /// current search. This is always at most 'explicit_slots.len()', but\n    /// might be less than it, if the caller provided fewer slots to fill.\n    explicit_slot_len: usize,\n}\n#[derive(Clone, Copy)]\nstruct PatternEpsilons(u64);\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where\n    /// `i = Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Clone, Copy)]\nstruct Slots(u32);\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\nimpl DFA {\n    fn search_imp(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Result<Option<PatternID>, MatchError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn find_match(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        at: usize,\n        sid: StateID,\n        slots: &mut [Option<NonMaxUsize>],\n        matched_pid: &mut Option<PatternID>,\n    ) -> bool {\n        debug_assert!(sid >= self.min_match_id);\n        let pateps = self.pattern_epsilons(sid);\n        let epsilons = pateps.epsilons();\n        if !epsilons.looks().is_empty()\n            && !self\n                .nfa\n                .look_matcher()\n                .matches_set_inline(epsilons.looks(), input.haystack(), at)\n        {\n            return false;\n        }\n        let pid = pateps.pattern_id_unchecked();\n        let slot_end = pid.as_usize().wrapping_mul(2).wrapping_add(1);\n        if slot_end < slots.len() {\n            slots[slot_end] = NonMaxUsize::new(at);\n        }\n        if self.explicit_slot_start < slots.len() {\n            slots[self.explicit_slot_start..].copy_from_slice(cache.explicit_slots());\n            epsilons.slots().apply(at, &mut slots[self.explicit_slot_start..]);\n        }\n        *matched_pid = Some(pid);\n        true\n    }\n}\nimpl NFA {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<NFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<NFA, BuildError> {}\n    pub fn always_match() -> NFA {}\n    pub fn never_match() -> NFA {}\n    #[cfg(feature = \"syntax\")]\n    pub fn config() -> Config {}\n    #[cfg(feature = \"syntax\")]\n    pub fn compiler() -> Compiler {}\n    pub fn patterns(&self) -> PatternIter<'_> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn start_anchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_unanchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_pattern(&self, pid: PatternID) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn byte_class_set(&self) -> &ByteClassSet {}\n    #[inline]\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    #[inline]\n    pub fn state(&self, id: StateID) -> &State {}\n    #[inline]\n    pub fn states(&self) -> &[State] {}\n    #[inline]\n    pub fn group_info(&self) -> &GroupInfo {}\n    #[inline]\n    pub fn has_capture(&self) -> bool {}\n    #[inline]\n    pub fn has_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {}\n    #[inline]\n    pub fn is_reverse(&self) -> bool {}\n    #[inline]\n    pub fn is_always_start_anchored(&self) -> bool {}\n    #[inline]\n    pub fn look_matcher(&self) -> &LookMatcher {\n        &self.0.look_matcher\n    }\n    #[inline]\n    pub fn look_set_any(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl Cache {\n    pub fn new(re: &DFA) -> Cache {}\n    pub fn reset(&mut self, re: &DFA) {}\n    pub fn memory_usage(&self) -> usize {}\n    fn explicit_slots(&mut self) -> &mut [Option<NonMaxUsize>] {\n        &mut self.explicit_slots[..self.explicit_slot_len]\n    }\n    fn setup_search(&mut self, explicit_slot_len: usize) {}\n}\nimpl PatternEpsilons {\n    const PATTERN_ID_BITS: u64 = 22;\n    const PATTERN_ID_SHIFT: u64 = 64 - PatternEpsilons::PATTERN_ID_BITS;\n    const PATTERN_ID_NONE: u64 = 0x00000000_003FFFFF;\n    const PATTERN_ID_LIMIT: u64 = PatternEpsilons::PATTERN_ID_NONE;\n    const PATTERN_ID_MASK: u64 = 0xFFFFFC00_00000000;\n    const EPSILONS_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn empty() -> PatternEpsilons {}\n    fn is_empty(self) -> bool {}\n    fn pattern_id(self) -> Option<PatternID> {}\n    fn pattern_id_unchecked(self) -> PatternID {\n        let pid = self.0 >> PatternEpsilons::PATTERN_ID_SHIFT;\n        PatternID::new_unchecked(pid.as_usize())\n    }\n    fn set_pattern_id(self, pid: PatternID) -> PatternEpsilons {}\n    fn epsilons(self) -> Epsilons {\n        Epsilons(self.0 & PatternEpsilons::EPSILONS_MASK)\n    }\n    fn set_epsilons(self, epsilons: Epsilons) -> PatternEpsilons {}\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {\n        self.haystack\n    }\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\nimpl Epsilons {\n    const SLOT_MASK: u64 = 0x000003FF_FFFFFC00;\n    const SLOT_SHIFT: u64 = 10;\n    const LOOK_MASK: u64 = 0x00000000_000003FF;\n    fn empty() -> Epsilons {}\n    fn is_empty(self) -> bool {}\n    fn slots(self) -> Slots {\n        Slots((self.0 >> Epsilons::SLOT_SHIFT).low_u32())\n    }\n    fn set_slots(self, slots: Slots) -> Epsilons {}\n    fn looks(self) -> LookSet {\n        LookSet {\n            bits: (self.0 & Epsilons::LOOK_MASK).low_u32(),\n        }\n    }\n    fn set_looks(self, look_set: LookSet) -> Epsilons {}\n}\nimpl NonMaxUsize {\n    #[inline]\n    pub fn new(value: usize) -> Option<NonMaxUsize> {\n        NonZeroUsize::new(value.wrapping_add(1)).map(NonMaxUsize)\n    }\n    #[inline]\n    pub fn get(self) -> usize {}\n}\nimpl LookSet {\n    #[inline]\n    pub fn empty() -> LookSet {}\n    #[inline]\n    pub fn full() -> LookSet {}\n    #[inline]\n    pub fn singleton(look: Look) -> LookSet {}\n    #[inline]\n    pub fn len(self) -> usize {}\n    #[inline]\n    pub fn is_empty(self) -> bool {\n        self.len() == 0\n    }\n    #[inline]\n    pub fn contains(self, look: Look) -> bool {}\n    #[inline]\n    pub fn contains_anchor(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_haystack(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_line(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_lf(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_crlf(&self) -> bool {}\n    #[inline]\n    pub fn contains_word(self) -> bool {}\n    #[inline]\n    pub fn contains_word_unicode(self) -> bool {}\n    #[inline]\n    pub fn contains_word_ascii(self) -> bool {}\n    #[inline]\n    pub fn iter(self) -> LookSetIter {}\n    #[inline]\n    pub fn insert(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_insert(&mut self, look: Look) {}\n    #[inline]\n    pub fn remove(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_remove(&mut self, look: Look) {}\n    #[inline]\n    pub fn subtract(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_subtract(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn union(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_union(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn intersect(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_intersect(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn read_repr(slice: &[u8]) -> LookSet {}\n    #[inline]\n    pub fn write_repr(self, slice: &mut [u8]) {}\n    pub fn available(self) -> Result<(), UnicodeWordBoundaryError> {}\n}\nimpl Slots {\n    const LIMIT: usize = 32;\n    fn insert(self, slot: usize) -> Slots {}\n    fn remove(self, slot: usize) -> Slots {}\n    fn is_empty(self) -> bool {}\n    fn iter(self) -> SlotsIter {}\n    fn apply(self, at: usize, caller_explicit_slots: &mut [Option<NonMaxUsize>]) {\n        if self.is_empty() {\n            return;\n        }\n        let at = NonMaxUsize::new(at);\n        for slot in self.iter() {\n            if slot >= caller_explicit_slots.len() {\n                break;\n            }\n            caller_explicit_slots[slot] = at;\n        }\n    }\n}\nimpl LookMatcher {\n    pub fn new() -> LookMatcher {}\n    pub fn set_line_terminator(&mut self, byte: u8) -> &mut LookMatcher {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    #[inline]\n    pub fn matches(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_inline(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn matches_set(&self, set: LookSet, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_set_inline(\n        &self,\n        set: LookSet,\n        haystack: &[u8],\n        at: usize,\n    ) -> bool {\n        if set.contains(Look::Start) {\n            if !self.is_start(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::End) {\n            if !self.is_end(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::StartLF) {\n            if !self.is_start_lf(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::EndLF) {\n            if !self.is_end_lf(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::StartCRLF) {\n            if !self.is_start_crlf(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::EndCRLF) {\n            if !self.is_end_crlf(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordAscii) {\n            if !self.is_word_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordAsciiNegate) {\n            if !self.is_word_ascii_negate(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordUnicode) {\n            if !self.is_word_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordUnicodeNegate) {\n            if !self.is_word_unicode_negate(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordStartAscii) {\n            if !self.is_word_start_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordEndAscii) {\n            if !self.is_word_end_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordStartUnicode) {\n            if !self.is_word_start_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordEndUnicode) {\n            if !self.is_word_end_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordStartHalfAscii) {\n            if !self.is_word_start_half_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordEndHalfAscii) {\n            if !self.is_word_end_half_ascii(haystack, at) {\n                return false;\n            }\n        }\n        if set.contains(Look::WordStartHalfUnicode) {\n            if !self.is_word_start_half_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        if set.contains(Look::WordEndHalfUnicode) {\n            if !self.is_word_end_half_unicode(haystack, at).unwrap() {\n                return false;\n            }\n        }\n        true\n    }\n    #[cfg(feature = \"alloc\")]\n    pub(crate) fn add_to_byteset(\n        &self,\n        look: Look,\n        set: &mut crate::util::alphabet::ByteClassSet,\n    ) {}\n    #[inline]\n    pub fn is_start(&self, _haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii_negate(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_unicode_negate(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Assumes 'sid' is a match state and looks for whether a match can\n/// be reported. If so, appropriate offsets are written to 'slots' and\n/// 'matched_pid' is set to the matching pattern ID.\n///\n/// Even when 'sid' is a match state, it's possible that a match won't\n/// be reported. For example, when the conditional epsilon transitions\n/// leading to the match state aren't satisfied at the given position in\n/// the haystack.\n2181 fn find_match(\n2182     &self,\n2183     cache: &mut Cache,\n2184     input: &Input<'_>,\n2185     at: usize,\n2186     sid: StateID,\n2187     slots: &mut [Option<NonMaxUsize>],\n2188     matched_pid: &mut Option<PatternID>,\n2189 ) -> bool {\n2190     debug_assert!(sid >= self.min_match_id);\n2191     let pateps = self.pattern_epsilons(sid);\n2192     let epsilons = pateps.epsilons();\n2193     if !epsilons.looks().is_empty()\n2194         && !self.nfa.look_matcher().matches_set_inline(\n2195             epsilons.looks(),\n2196             input.haystack(),\n2197             at,\n2198         )\n2199     {\n2200         return false;\n2201     }\n2202     let pid = pateps.pattern_id_unchecked();\n2203     // This calculation is always correct because we know our 'pid' is\n2204     // valid and thus we know that the slot indices for it are valid.\n2205     let slot_end = pid.as_usize().wrapping_mul(2).wrapping_add(1);\n2206     // Set the implicit 'end' slot for the matching pattern. (The 'start'\n2207     // slot was set at the beginning of the search.)\n2208     if slot_end < slots.len() {\n2209         slots[slot_end] = NonMaxUsize::new(at);\n2210     }\n2211     // If the caller provided enough room, copy the previously recorded\n2212     // explicit slots from our scratch space to the caller provided slots.\n2213     // We *also* need to set any explicit slots that are active as part of\n2214     // the path to the match state.\n2215     if self.explicit_slot_start < slots.len() {\n2216         // NOTE: The 'cache.explicit_slots()' slice is setup at the\n2217         // beginning of every search such that it is guaranteed to return a\n2218         // slice of length equivalent to 'slots[explicit_slot_start..]'.\n2219         slots[self.explicit_slot_start..]\n2220             .copy_from_slice(cache.explicit_slots());\n2221         epsilons.slots().apply(at, &mut slots[self.explicit_slot_start..]);\n2222     }\n2223     *matched_pid = Some(pid);\n2224     true\n2225 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}