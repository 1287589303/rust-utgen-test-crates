{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{\n    bytes::{Regex, RegexSet},\n    error::Error,\n};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {\n        self.builder.octal(yes);\n        self\n    }\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {\n        self.syntaxc = self.syntaxc.octal(yes);\n        self\n    }\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures octal mode for the entire pattern.\n///\n/// Octal syntax is a little-known way of uttering Unicode codepoints\n/// in a pattern. For example, `a`, `\\x61`, `\\u0061` and `\\141` are all\n/// equivalent patterns, where the last example shows octal syntax.\n///\n/// While supporting octal syntax isn't in and of itself a problem,\n/// it does make good error messages harder. That is, in PCRE based\n/// regex engines, syntax like `\\1` invokes a backreference, which is\n/// explicitly unsupported this library. However, many users expect\n/// backreferences to be supported. Therefore, when octal support\n/// is disabled, the error message will explicitly mention that\n/// backreferences aren't supported.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::RegexBuilder;\n///\n/// // Normally this pattern would not compile, with an error message\n/// // about backreferences not being supported. But with octal mode\n/// // enabled, octal escape sequences work.\n/// let re = RegexBuilder::new(r\"\\141\")\n///     .octal(true)\n///     .build()\n///     .unwrap();\n/// assert!(re.is_match(b\"a\"));\n/// ```\n1830 pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {\n1831     self.builder.octal(yes);\n1832     self\n1833 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}