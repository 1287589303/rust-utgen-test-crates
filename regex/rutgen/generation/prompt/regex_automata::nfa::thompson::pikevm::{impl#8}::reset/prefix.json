{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/pikevm.rs\n// crate name is regex_automata\n#[cfg(feature = \"internal-instrument-pikevm\")]\nuse core::cell::RefCell;\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// Stack used while computing epsilon closure. This effectively lets us\n    /// move what is more naturally expressed through recursion to a stack\n    /// on the heap.\n    stack: Vec<FollowEpsilon>,\n    /// The current active states being explored for the current byte in the\n    /// haystack.\n    curr: ActiveStates,\n    /// The next set of states we're building that will be explored for the\n    /// next byte in the haystack.\n    next: ActiveStates,\n}\n#[derive(Clone, Debug)]\nstruct ActiveStates {\n    /// The set of active NFA states. This set preserves insertion order, which\n    /// is critical for simulating the match semantics of backtracking regex\n    /// engines.\n    set: SparseSet,\n    /// The slots for every NFA state, where each slot stores a (possibly\n    /// absent) offset. Every capturing group has two slots. One for a start\n    /// offset and one for an end offset.\n    slot_table: SlotTable,\n}\n#[derive(Clone, Debug)]\npub struct PikeVM {\n    config: Config,\n    nfa: NFA,\n}\n#[derive(Clone, Debug)]\nenum FollowEpsilon {\n    /// Explore the epsilon transitions from a state ID.\n    Explore(StateID),\n    /// Reset the given `slot` to the given `offset` (which might be `None`).\n    RestoreCapture { slot: SmallIndex, offset: Option<NonMaxUsize> },\n}\nimpl Cache {\n    pub fn new(re: &PikeVM) -> Cache {}\n    pub fn reset(&mut self, re: &PikeVM) {\n        self.curr.reset(re);\n        self.next.reset(re);\n    }\n    pub fn memory_usage(&self) -> usize {}\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n}\nimpl ActiveStates {\n    fn new(re: &PikeVM) -> ActiveStates {}\n    fn reset(&mut self, re: &PikeVM) {\n        self.set.resize(re.get_nfa().states().len());\n        self.slot_table.reset(re);\n    }\n    fn memory_usage(&self) -> usize {}\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reset this cache such that it can be used for searching with a\n/// different [`PikeVM`].\n///\n/// A cache reset permits reusing memory already allocated in this cache\n/// with a different `PikeVM`.\n///\n/// # Example\n///\n/// This shows how to re-purpose a cache for use with a different `PikeVM`.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Match};\n///\n/// let re1 = PikeVM::new(r\"\\w\")?;\n/// let re2 = PikeVM::new(r\"\\W\")?;\n///\n/// let mut cache = re1.create_cache();\n/// assert_eq!(\n///     Some(Match::must(0, 0..2)),\n///     re1.find_iter(&mut cache, \"Δ\").next(),\n/// );\n///\n/// // Using 'cache' with re2 is not allowed. It may result in panics or\n/// // incorrect results. In order to re-purpose the cache, we must reset\n/// // it with the PikeVM we'd like to use it with.\n/// //\n/// // Similarly, after this reset, using the cache with 're1' is also not\n/// // allowed.\n/// cache.reset(&re2);\n/// assert_eq!(\n///     Some(Match::must(0, 0..3)),\n///     re2.find_iter(&mut cache, \"☃\").next(),\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1945 pub fn reset(&mut self, re: &PikeVM) {\n1946     self.curr.reset(re);\n1947     self.next.reset(re);\n1948 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}