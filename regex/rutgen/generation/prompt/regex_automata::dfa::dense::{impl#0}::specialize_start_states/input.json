{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn accelerate(mut self, yes: bool) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn minimize(mut self, yes: bool) -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn start_kind(mut self, kind: StartKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {}\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {\n        self.specialize_start_states = Some(yes);\n        self\n    }\n    pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn determinize_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn get_accelerate(&self) -> bool {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_minimize(&self) -> bool {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts(&self) -> StartKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {}\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_dfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_determinize_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Enable specializing start states in the DFA.\n///\n/// When start states are specialized, an implementor of a search routine\n/// using a lazy DFA can tell when the search has entered a starting state.\n/// When start states aren't specialized, then it is impossible to know\n/// whether the search has entered a start state.\n///\n/// Ideally, this option wouldn't need to exist and we could always\n/// specialize start states. The problem is that start states can be quite\n/// active. This in turn means that an efficient search routine is likely\n/// to ping-pong between a heavily optimized hot loop that handles most\n/// states and to a less optimized specialized handling of start states.\n/// This causes branches to get heavily mispredicted and overall can\n/// materially decrease throughput. Therefore, specializing start states\n/// should only be enabled when it is needed.\n///\n/// Knowing whether a search is in a start state is typically useful when a\n/// prefilter is active for the search. A prefilter is typically only run\n/// when in a start state and a prefilter can greatly accelerate a search.\n/// Therefore, the possible cost of specializing start states is worth it\n/// in this case. Otherwise, if you have no prefilter, there is likely no\n/// reason to specialize start states.\n///\n/// This is disabled by default, but note that it is automatically\n/// enabled (or disabled) if [`Config::prefilter`] is set. Namely, unless\n/// `specialize_start_states` has already been set, [`Config::prefilter`]\n/// will automatically enable or disable it based on whether a prefilter\n/// is present or not, respectively. This is done because a prefilter's\n/// effectiveness is rooted in being executed whenever the DFA is in a\n/// start state, and that's only possible to do when they are specialized.\n///\n/// Note that it is plausibly reasonable to _disable_ this option\n/// explicitly while _enabling_ a prefilter. In that case, a prefilter\n/// will still be run at the beginning of a search, but never again. This\n/// in theory could strike a good balance if you're in a situation where a\n/// prefilter is likely to produce many false positive candidates.\n///\n/// # Example\n///\n/// This example shows how to enable start state specialization and then\n/// shows how to check whether a state is a start state or not.\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense::DFA}, Input};\n///\n/// let dfa = DFA::builder()\n///     .configure(DFA::config().specialize_start_states(true))\n///     .build(r\"[a-z]+\")?;\n///\n/// let haystack = \"123 foobar 4567\".as_bytes();\n/// let sid = dfa.start_state_forward(&Input::new(haystack))?;\n/// // The ID returned by 'start_state_forward' will always be tagged as\n/// // a start state when start state specialization is enabled.\n/// assert!(dfa.is_special_state(sid));\n/// assert!(dfa.is_start_state(sid));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Compare the above with the default DFA configuration where start states\n/// are _not_ specialized. In this case, the start state is not tagged at\n/// all:\n///\n/// ```\n/// use regex_automata::{dfa::{Automaton, dense::DFA}, Input};\n///\n/// let dfa = DFA::new(r\"[a-z]+\")?;\n///\n/// let haystack = \"123 foobar 4567\";\n/// let sid = dfa.start_state_forward(&Input::new(haystack))?;\n/// // Start states are not special in the default configuration!\n/// assert!(!dfa.is_special_state(sid));\n/// assert!(!dfa.is_start_state(sid));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n761 pub fn specialize_start_states(mut self, yes: bool) -> Config {\n762     self.specialize_start_states = Some(yes);\n763     self\n764 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}