{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Class {\n    pub(crate) ranges: Vec<ClassRange>,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]\npub(crate) struct ClassRange {\n    pub(crate) start: char,\n    pub(crate) end: char,\n}\nimpl Class {\n    fn new<I: IntoIterator<Item = ClassRange>>(ranges: I) -> Class {}\n    fn ascii_case_fold(&mut self) {}\n    fn negate(&mut self) {}\n    fn canonicalize(&mut self) {\n        if self.is_canonical() {\n            return;\n        }\n        self.ranges.sort();\n        assert!(! self.ranges.is_empty());\n        let drain_end = self.ranges.len();\n        for oldi in 0..drain_end {\n            if self.ranges.len() > drain_end {\n                let (last, rest) = self.ranges.split_last_mut().unwrap();\n                if let Some(union) = last.union(&rest[oldi]) {\n                    *last = union;\n                    continue;\n                }\n            }\n            self.ranges.push(self.ranges[oldi]);\n        }\n        self.ranges.drain(..drain_end);\n    }\n    fn is_canonical(&self) -> bool {\n        for pair in self.ranges.windows(2) {\n            if pair[0] >= pair[1] {\n                return false;\n            }\n            if pair[0].is_contiguous(&pair[1]) {\n                return false;\n            }\n        }\n        true\n    }\n}\nimpl ClassRange {\n    fn ascii_case_fold(&self) -> Option<ClassRange> {}\n    fn union(&self, other: &ClassRange) -> Option<ClassRange> {\n        if !self.is_contiguous(other) {\n            return None;\n        }\n        let start = core::cmp::min(self.start, other.start);\n        let end = core::cmp::max(self.end, other.end);\n        Some(ClassRange { start, end })\n    }\n    fn is_contiguous(&self, other: &ClassRange) -> bool {}\n    fn is_intersection_empty(&self, other: &ClassRange) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Converts this set into a canonical ordering.\n476 fn canonicalize(&mut self) {\n477     if self.is_canonical() {\n478         return;\n479     }\n480     self.ranges.sort();\n481     assert!(!self.ranges.is_empty());\n482 \n483     // Is there a way to do this in-place with constant memory? I couldn't\n484     // figure out a way to do it. So just append the canonicalization to\n485     // the end of this range, and then drain it before we're done.\n486     let drain_end = self.ranges.len();\n487     for oldi in 0..drain_end {\n488         // If we've added at least one new range, then check if we can\n489         // merge this range in the previously added range.\n490         if self.ranges.len() > drain_end {\n491             let (last, rest) = self.ranges.split_last_mut().unwrap();\n492             if let Some(union) = last.union(&rest[oldi]) {\n493                 *last = union;\n494                 continue;\n495             }\n496         }\n497         self.ranges.push(self.ranges[oldi]);\n498     }\n499     self.ranges.drain(..drain_end);\n500 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}