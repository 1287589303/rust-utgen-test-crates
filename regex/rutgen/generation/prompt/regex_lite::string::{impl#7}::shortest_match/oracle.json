{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\nimpl Regex {\n    #[inline]\n    pub fn shortest_match(&self, haystack: &str) -> Option<usize> {\n        self.shortest_match_at(haystack, 0)\n    }\n    #[inline]\n    pub fn shortest_match_at(&self, haystack: &str, start: usize) -> Option<usize> {\n        let mut cache = self.pool.get();\n        let mut slots = [None, None];\n        let matched = self\n            .pikevm\n            .search(\n                &mut cache,\n                haystack.as_bytes(),\n                start,\n                haystack.len(),\n                true,\n                &mut slots,\n            );\n        if !matched {\n            return None;\n        }\n        Some(slots[1].unwrap().get())\n    }\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {}\n    #[inline]\n    pub fn find_at<'h>(&self, haystack: &'h str, start: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_at<'h>(\n        &self,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_read<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_read_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the end byte offset of the first match in the haystack given.\n///\n/// This method may have the same performance characteristics as\n/// `is_match`. Behaviorlly, it doesn't just report whether it match\n/// occurs, but also the end offset for a match. In particular, the offset\n/// returned *may be shorter* than the proper end of the leftmost-first\n/// match that you would find via [`Regex::find`].\n///\n/// Note that it is not guaranteed that this routine finds the shortest or\n/// \"earliest\" possible match. Instead, the main idea of this API is that\n/// it returns the offset at the point at which the internal regex engine\n/// has determined that a match has occurred. This may vary depending on\n/// which internal regex engine is used, and thus, the offset itself may\n/// change based on internal heuristics.\n///\n/// # Example\n///\n/// Typically, `a+` would match the entire first sequence of `a` in some\n/// haystack, but `shortest_match` *may* give up as soon as it sees the\n/// first `a`.\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"a+\").unwrap();\n/// let offset = re.shortest_match(\"aaaaa\").unwrap();\n/// assert_eq!(offset, 1);\n/// ```\n977 pub fn shortest_match(&self, haystack: &str) -> Option<usize> {\n978     self.shortest_match_at(haystack, 0)\n979 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}