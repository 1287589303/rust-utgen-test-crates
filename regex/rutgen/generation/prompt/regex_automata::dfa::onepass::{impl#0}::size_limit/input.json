{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn size_limit(mut self, limit: Option<usize>) -> Config {\n        self.size_limit = Some(limit);\n        self\n    }\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set a size limit on the total heap used by a one-pass DFA.\n///\n/// This size limit is expressed in bytes and is applied during\n/// construction of a one-pass DFA. If the DFA's heap usage exceeds\n/// this configured limit, then construction is stopped and an error is\n/// returned.\n///\n/// The default is no limit.\n///\n/// # Example\n///\n/// This example shows a one-pass DFA that fails to build because of\n/// a configured size limit. This particular example also serves as a\n/// cautionary tale demonstrating just how big DFAs with large Unicode\n/// character classes can get.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{dfa::onepass::DFA, Match};\n///\n/// // 6MB isn't enough!\n/// DFA::builder()\n///     .configure(DFA::config().size_limit(Some(6_000_000)))\n///     .build(r\"\\w{20}\")\n///     .unwrap_err();\n///\n/// // ... but 7MB probably is!\n/// // (Note that DFA sizes aren't necessarily stable between releases.)\n/// let re = DFA::builder()\n///     .configure(DFA::config().size_limit(Some(7_000_000)))\n///     .build(r\"\\w{20}\")?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n/// let haystack = \"A\".repeat(20);\n/// re.captures(&mut cache, &haystack, &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..20)), caps.get_match());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// While one needs a little more than 3MB to represent `\\w{20}`, it\n/// turns out that you only need a little more than 4KB to represent\n/// `(?-u:\\w{20})`. So only use Unicode if you need it!\n235 pub fn size_limit(mut self, limit: Option<usize>) -> Config {\n236     self.size_limit = Some(limit);\n237     self\n238 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}