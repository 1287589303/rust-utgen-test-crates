{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Debug)]\npub struct Regex {\n    /// The actual regex implementation.\n    imp: Arc<RegexI>,\n    /// A thread safe pool of caches.\n    ///\n    /// For the higher level search APIs, a `Cache` is automatically plucked\n    /// from this pool before running a search. The lower level `with` methods\n    /// permit the caller to provide their own cache, thereby bypassing\n    /// accesses to this pool.\n    ///\n    /// Note that we put this outside the `Arc` so that cloning a `Regex`\n    /// results in creating a fresh `CachePool`. This in turn permits callers\n    /// to clone regexes into separate threads where each such regex gets\n    /// the pool's \"thread owner\" optimization. Otherwise, if one shares the\n    /// `Regex` directly, then the pool will go through a slower mutex path for\n    /// all threads except for the \"owner.\"\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Debug)]\nstruct RegexI {\n    /// The core matching engine.\n    ///\n    /// Why is this reference counted when RegexI is already wrapped in an Arc?\n    /// Well, we need to capture this in a closure to our `Pool` below in order\n    /// to create new `Cache` values when needed. So since it needs to be in\n    /// two places, we make it reference counted.\n    ///\n    /// We make `RegexI` itself reference counted too so that `Regex` itself\n    /// stays extremely small and very cheap to clone.\n    strat: Arc<dyn Strategy>,\n    /// Metadata about the regexes driving the strategy. The metadata is also\n    /// usually stored inside the strategy too, but we put it here as well\n    /// so that we can get quick access to it (without virtual calls) before\n    /// executing the regex engine. For example, we use this metadata to\n    /// detect a subset of cases where we know a match is impossible, and can\n    /// thus avoid calling into the strategy at all.\n    ///\n    /// Since `RegexInfo` is stored in multiple places, it is also reference\n    /// counted.\n    info: RegexInfo,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, BuildError> {}\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<Regex, BuildError> {\n        Regex::builder().build_many(patterns)\n    }\n    pub fn config() -> Config {}\n    pub fn builder() -> Builder {\n        Builder::new()\n    }\n}\nimpl Builder {\n    pub fn new() -> Builder {}\n    pub fn build(&self, pattern: &str) -> Result<Regex, BuildError> {}\n    pub fn build_many<P: AsRef<str>>(\n        &self,\n        patterns: &[P],\n    ) -> Result<Regex, BuildError> {\n        use crate::util::primitives::IteratorIndexExt;\n        log! {\n            debug!(\"building meta regex with {} patterns:\", patterns.len()); for (pid, p)\n            in patterns.iter().with_pattern_ids() { let p = p.as_ref(); let maxoff = p\n            .char_indices().map(| (i, ch) | i + ch.len_utf8()).take(1000).last()\n            .unwrap_or(0); if maxoff < p.len() { debug!(\"{:?}: {}[... snip ...]\", pid, &\n            p[..maxoff]); } else { debug!(\"{:?}: {}\", pid, p); } }\n        }\n        let (mut asts, mut hirs) = (vec![], vec![]);\n        for (pid, p) in patterns.iter().with_pattern_ids() {\n            let ast = self\n                .ast\n                .build()\n                .parse(p.as_ref())\n                .map_err(|err| BuildError::ast(pid, err))?;\n            asts.push(ast);\n        }\n        for ((pid, p), ast) in patterns.iter().with_pattern_ids().zip(asts.iter()) {\n            let hir = self\n                .hir\n                .build()\n                .translate(p.as_ref(), ast)\n                .map_err(|err| BuildError::hir(pid, err))?;\n            hirs.push(hir);\n        }\n        self.build_many_from_hir(&hirs)\n    }\n    pub fn build_from_hir(&self, hir: &Hir) -> Result<Regex, BuildError> {}\n    pub fn build_many_from_hir<H: Borrow<Hir>>(\n        &self,\n        hirs: &[H],\n    ) -> Result<Regex, BuildError> {}\n    pub fn configure(&mut self, config: Config) -> &mut Builder {}\n    pub fn syntax(&mut self, config: crate::util::syntax::Config) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Builds a `Regex` from many pattern strings using the default\n/// configuration.\n///\n/// If there was a problem parsing any of the patterns or a problem turning\n/// them into a regex matcher, then an error is returned.\n///\n/// If you want to change the configuration of a `Regex`, use a [`Builder`]\n/// with a [`Config`].\n///\n/// # Example: simple lexer\n///\n/// This simplistic example leverages the multi-pattern support to build a\n/// simple little lexer. The pattern ID in the match tells you which regex\n/// matched, which in turn might be used to map back to the \"type\" of the\n/// token returned by the lexer.\n///\n/// ```\n/// use regex_automata::{meta::Regex, Match};\n///\n/// let re = Regex::new_many(&[\n///     r\"[[:space:]]\",\n///     r\"[A-Za-z0-9][A-Za-z0-9_]+\",\n///     r\"->\",\n///     r\".\",\n/// ])?;\n/// let haystack = \"fn is_boss(bruce: i32, springsteen: String) -> bool;\";\n/// let matches: Vec<Match> = re.find_iter(haystack).collect();\n/// assert_eq!(matches, vec![\n///     Match::must(1, 0..2),   // 'fn'\n///     Match::must(0, 2..3),   // ' '\n///     Match::must(1, 3..10),  // 'is_boss'\n///     Match::must(3, 10..11), // '('\n///     Match::must(1, 11..16), // 'bruce'\n///     Match::must(3, 16..17), // ':'\n///     Match::must(0, 17..18), // ' '\n///     Match::must(1, 18..21), // 'i32'\n///     Match::must(3, 21..22), // ','\n///     Match::must(0, 22..23), // ' '\n///     Match::must(1, 23..34), // 'springsteen'\n///     Match::must(3, 34..35), // ':'\n///     Match::must(0, 35..36), // ' '\n///     Match::must(1, 36..42), // 'String'\n///     Match::must(3, 42..43), // ')'\n///     Match::must(0, 43..44), // ' '\n///     Match::must(2, 44..46), // '->'\n///     Match::must(0, 46..47), // ' '\n///     Match::must(1, 47..51), // 'bool'\n///     Match::must(3, 51..52), // ';'\n/// ]);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// One can write a lexer like the above using a regex like\n/// `(?P<space>[[:space:]])|(?P<ident>[A-Za-z0-9][A-Za-z0-9_]+)|...`,\n/// but then you need to ask whether capture group matched to determine\n/// which branch in the regex matched, and thus, which token the match\n/// corresponds to. In contrast, the above example includes the pattern ID\n/// in the match. There's no need to use capture groups at all.\n///\n/// # Example: finding the pattern that caused an error\n///\n/// When a syntax error occurs, it is possible to ask which pattern\n/// caused the syntax error.\n///\n/// ```\n/// use regex_automata::{meta::Regex, PatternID};\n///\n/// let err = Regex::new_many(&[\"a\", \"b\", r\"\\p{Foo}\", \"c\"]).unwrap_err();\n/// assert_eq!(Some(PatternID::must(2)), err.pattern());\n/// ```\n///\n/// # Example: zero patterns is valid\n///\n/// Building a regex with zero patterns results in a regex that never\n/// matches anything. Because this routine is generic, passing an empty\n/// slice usually requires a turbo-fish (or something else to help type\n/// inference).\n///\n/// ```\n/// use regex_automata::{meta::Regex, util::syntax, Match};\n///\n/// let re = Regex::new_many::<&str>(&[])?;\n/// assert_eq!(None, re.find(\"\"));\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n393 pub fn new_many<P: AsRef<str>>(\n394     patterns: &[P],\n395 ) -> Result<Regex, BuildError> {\n396     Regex::builder().build_many(patterns)\n397 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}