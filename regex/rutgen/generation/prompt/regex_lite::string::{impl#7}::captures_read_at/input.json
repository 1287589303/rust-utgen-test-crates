{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\n#[derive(Clone, Debug)]\npub struct CaptureLocations(Vec<Option<NonMaxUsize>>);\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub(crate) struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Debug)]\npub(crate) struct Cache {\n    /// Stack used while computing epsilon closure. This effectively lets us\n    /// move what is more naturally expressed through recursion to a stack\n    /// on the heap.\n    stack: Vec<FollowEpsilon>,\n    /// The current active states being explored for the current byte in the\n    /// haystack.\n    curr: ActiveStates,\n    /// The next set of states we're building that will be explored for the\n    /// next byte in the haystack.\n    next: ActiveStates,\n}\nimpl Regex {\n    #[inline]\n    pub fn shortest_match(&self, haystack: &str) -> Option<usize> {}\n    #[inline]\n    pub fn shortest_match_at(&self, haystack: &str, start: usize) -> Option<usize> {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {}\n    #[inline]\n    pub fn find_at<'h>(&self, haystack: &'h str, start: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_at<'h>(\n        &self,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_read<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_read_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {\n        let mut cache = self.pool.get();\n        let matched = self\n            .pikevm\n            .search(\n                &mut cache,\n                haystack.as_bytes(),\n                start,\n                haystack.len(),\n                false,\n                &mut locs.0,\n            );\n        if !matched {\n            return None;\n        }\n        let (start, end) = locs.get(0).unwrap();\n        Some(Match::new(haystack, start, end))\n    }\n}\nimpl PikeVM {\n    pub(crate) fn new(nfa: NFA) -> PikeVM {}\n    pub(crate) fn nfa(&self) -> &NFA {}\n    pub(crate) fn find_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> FindMatches<'r, 'h> {}\n    pub(crate) fn captures_iter<'r, 'h>(\n        &'r self,\n        cache: CachePoolGuard<'r>,\n        haystack: &'h [u8],\n    ) -> CapturesMatches<'r, 'h> {}\n    pub(crate) fn search(\n        &self,\n        cache: &mut Cache,\n        haystack: &[u8],\n        start: usize,\n        end: usize,\n        earliest: bool,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {\n        cache.setup_search(slots.len());\n        if start > end {\n            return false;\n        }\n        assert!(\n            haystack.len() < core::usize::MAX,\n            \"byte slice lengths must be less than usize MAX\",\n        );\n        let Cache { ref mut stack, ref mut curr, ref mut next } = cache;\n        let start_id = self.nfa().start();\n        let anchored = self.nfa().is_start_anchored();\n        let mut matched = false;\n        let mut at = start;\n        while at <= end {\n            if curr.set.is_empty() {\n                if matched {\n                    break;\n                }\n                if anchored && at > start {\n                    break;\n                }\n            }\n            if !matched {\n                let slots = next.slot_table.all_absent();\n                self.epsilon_closure(stack, slots, curr, haystack, at, start_id);\n            }\n            let (ch, len) = utf8::decode_lossy(&haystack[at..]);\n            if self.nexts(stack, curr, next, haystack, at, ch, len, slots) {\n                matched = true;\n            }\n            if (earliest && matched) || len == 0 {\n                break;\n            }\n            core::mem::swap(curr, next);\n            next.set.clear();\n            at += len;\n        }\n        matched\n    }\n    fn nexts(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr: &mut ActiveStates,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> bool {}\n    fn next(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slot_table: &mut SlotTable,\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        at_ch: char,\n        at_len: usize,\n        sid: StateID,\n    ) -> bool {}\n    fn epsilon_closure(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        sid: StateID,\n    ) {}\n    fn epsilon_closure_explore(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        haystack: &[u8],\n        at: usize,\n        mut sid: StateID,\n    ) {}\n}\nimpl<'h> Match<'h> {\n    #[inline]\n    fn new(haystack: &'h str, start: usize, end: usize) -> Match<'h> {\n        Match { haystack, start, end }\n    }\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn range(&self) -> core::ops::Range<usize> {}\n    #[inline]\n    pub fn as_str(&self) -> &'h str {}\n}\nimpl CaptureLocations {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<(usize, usize)> {\n        let slot = i.checked_mul(2)?;\n        let start = self.0.get(slot).copied()??.get();\n        let slot = slot.checked_add(1)?;\n        let end = self.0.get(slot).copied()??.get();\n        Some((start, end))\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the same as [`Regex::captures_read`], but starts the search at\n/// the given offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// This routine may also panic if the given `CaptureLocations` was not\n/// created by this regex.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = \"eschew\";\n/// let mut locs = re.capture_locations();\n/// // We get a match here, but it's probably not intended.\n/// assert!(re.captures_read(&mut locs, &hay[2..]).is_some());\n/// // No match because the  assertions take the context into account.\n/// assert!(re.captures_read_at(&mut locs, hay, 2).is_none());\n/// ```\n1250 pub fn captures_read_at<'h>(\n1251     &self,\n1252     locs: &mut CaptureLocations,\n1253     haystack: &'h str,\n1254     start: usize,\n1255 ) -> Option<Match<'h>> {\n1256     let mut cache = self.pool.get();\n1257     let matched = self.pikevm.search(\n1258         &mut cache,\n1259         haystack.as_bytes(),\n1260         start,\n1261         haystack.len(),\n1262         false,\n1263         &mut locs.0,\n1264     );\n1265     if !matched {\n1266         return None;\n1267     }\n1268     let (start, end) = locs.get(0).unwrap();\n1269     Some(Match::new(haystack, start, end))\n1270 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}