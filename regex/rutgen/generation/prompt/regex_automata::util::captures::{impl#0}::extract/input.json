{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone)]\npub struct Captures {\n    /// The group info that these capture groups are coupled to. This is what\n    /// gives the \"convenience\" of the `Captures` API. Namely, it provides the\n    /// slot mapping and the name|-->index mapping for capture lookups by name.\n    group_info: GroupInfo,\n    /// The ID of the pattern that matched. Regex engines must set this to\n    /// None when no match occurs.\n    pid: Option<PatternID>,\n    /// The slot values, i.e., submatch offsets.\n    ///\n    /// In theory, the smallest sequence of slots would be something like\n    /// `max(groups(pattern) for pattern in regex) * 2`, but instead, we use\n    /// `sum(groups(pattern) for pattern in regex) * 2`. Why?\n    ///\n    /// Well, the former could be used in theory, because we don't generally\n    /// have any overlapping APIs that involve capturing groups. Therefore,\n    /// there's technically never any need to have slots set for multiple\n    /// patterns. However, this might change some day, in which case, we would\n    /// need to have slots available.\n    ///\n    /// The other reason is that during the execution of some regex engines,\n    /// there exists a point in time where multiple slots for different\n    /// patterns may be written to before knowing which pattern has matched.\n    /// Therefore, the regex engines themselves, in order to support multiple\n    /// patterns correctly, must have all slots available. If `Captures`\n    /// doesn't have all slots available, then regex engines can't write\n    /// directly into the caller provided `Captures` and must instead write\n    /// into some other storage and then copy the slots involved in the match\n    /// at the end of the search.\n    ///\n    /// So overall, at least as of the time of writing, it seems like the path\n    /// of least resistance is to just require allocating all possible slots\n    /// instead of the conceptual minimum. Another way to justify this is that\n    /// the most common case is a single pattern, in which case, there is no\n    /// inefficiency here since the 'max' and 'sum' calculations above are\n    /// equivalent in that case.\n    ///\n    /// N.B. The mapping from group index to slot is maintained by `GroupInfo`\n    /// and is considered an API guarantee. See `GroupInfo` for more details on\n    /// that mapping.\n    ///\n    /// N.B. `Option<NonMaxUsize>` has the same size as a `usize`.\n    slots: Vec<Option<NonMaxUsize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Debug)]\npub struct CapturesPatternIter<'a> {\n    caps: &'a Captures,\n    names: core::iter::Enumerate<GroupInfoPatternNames<'a>>,\n}\nimpl Captures {\n    pub fn all(group_info: GroupInfo) -> Captures {}\n    pub fn matches(group_info: GroupInfo) -> Captures {}\n    pub fn empty(group_info: GroupInfo) -> Captures {}\n    #[inline]\n    pub fn is_match(&self) -> bool {}\n    #[inline]\n    pub fn pattern(&self) -> Option<PatternID> {}\n    #[inline]\n    pub fn get_match(&self) -> Option<Match> {}\n    #[inline]\n    pub fn get_group(&self, index: usize) -> Option<Span> {}\n    pub fn get_group_by_name(&self, name: &str) -> Option<Span> {}\n    pub fn iter(&self) -> CapturesPatternIter<'_> {\n        let names = self\n            .pattern()\n            .map_or(\n                GroupInfoPatternNames::empty().enumerate(),\n                |pid| { self.group_info().pattern_names(pid).enumerate() },\n            );\n        CapturesPatternIter {\n            caps: self,\n            names,\n        }\n    }\n    pub fn group_len(&self) -> usize {}\n    pub fn group_info(&self) -> &GroupInfo {}\n    pub fn interpolate_string(&self, haystack: &str, replacement: &str) -> String {}\n    pub fn interpolate_string_into(\n        &self,\n        haystack: &str,\n        replacement: &str,\n        dst: &mut String,\n    ) {}\n    pub fn interpolate_bytes(&self, haystack: &[u8], replacement: &[u8]) -> Vec<u8> {}\n    pub fn interpolate_bytes_into(\n        &self,\n        haystack: &[u8],\n        replacement: &[u8],\n        dst: &mut Vec<u8>,\n    ) {}\n    pub fn extract<'h, const N: usize>(\n        &self,\n        haystack: &'h str,\n    ) -> (&'h str, [&'h str; N]) {\n        let mut matched = self.iter().flatten();\n        let whole_match = &haystack[matched.next().expect(\"a match\")];\n        let group_matches = [0; N]\n            .map(|_| {\n                let sp = matched.next().expect(\"too few matching groups\");\n                &haystack[sp]\n            });\n        (whole_match, group_matches)\n    }\n    pub fn extract_bytes<'h, const N: usize>(\n        &self,\n        haystack: &'h [u8],\n    ) -> (&'h [u8], [&'h [u8]; N]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This is a convenience routine for extracting the substrings\n/// corresponding to matching capture groups in the given `haystack`. The\n/// `haystack` should be the same substring used to find the match spans in\n/// this `Captures` value.\n///\n/// This is identical to [`Captures::extract_bytes`], except it works with\n/// `&str` instead of `&[u8]`.\n///\n/// # Panics\n///\n/// This panics if the number of explicit matching groups in this\n/// `Captures` value is less than `N`. This also panics if this `Captures`\n/// value does not correspond to a match.\n///\n/// Note that this does *not* panic if the number of explicit matching\n/// groups is bigger than `N`. In that case, only the first `N` matching\n/// groups are extracted.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::nfa::thompson::pikevm::PikeVM;\n///\n/// let re = PikeVM::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\")?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n///\n/// let hay = \"On 2010-03-14, I became a Tenneessee lamb.\";\n/// re.captures(&mut cache, hay, &mut caps);\n/// assert!(caps.is_match());\n/// let (full, [year, month, day]) = caps.extract(hay);\n/// assert_eq!(\"2010-03-14\", full);\n/// assert_eq!(\"2010\", year);\n/// assert_eq!(\"03\", month);\n/// assert_eq!(\"14\", day);\n///\n/// // We can also ask for fewer than all capture groups.\n/// let (full, [year]) = caps.extract(hay);\n/// assert_eq!(\"2010-03-14\", full);\n/// assert_eq!(\"2010\", year);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n937 pub fn extract<'h, const N: usize>(\n938     &self,\n939     haystack: &'h str,\n940 ) -> (&'h str, [&'h str; N]) {\n941     let mut matched = self.iter().flatten();\n942     let whole_match = &haystack[matched.next().expect(\"a match\")];\n943     let group_matches = [0; N].map(|_| {\n944         let sp = matched.next().expect(\"too few matching groups\");\n945         &haystack[sp]\n946     });\n947     (whole_match, group_matches)\n948 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}