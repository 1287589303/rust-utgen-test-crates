{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/debug.rs\n// crate name is regex_syntax\npub(crate) fn utf8_decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n    fn len(byte: u8) -> Option<usize> {\n        if byte <= 0x7F {\n            return Some(1);\n        } else if byte & 0b1100_0000 == 0b1000_0000 {\n            return None;\n        } else if byte <= 0b1101_1111 {\n            Some(2)\n        } else if byte <= 0b1110_1111 {\n            Some(3)\n        } else if byte <= 0b1111_0111 {\n            Some(4)\n        } else {\n            None\n        }\n    }\n    if bytes.is_empty() {\n        return None;\n    }\n    let len = match len(bytes[0]) {\n        None => return Some(Err(bytes[0])),\n        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n        Some(1) => return Some(Ok(char::from(bytes[0]))),\n        Some(len) => len,\n    };\n    match core::str::from_utf8(&bytes[..len]) {\n        Ok(s) => Some(Ok(s.chars().next().unwrap())),\n        Err(_) => Some(Err(bytes[0])),\n    }\n}\nfn len(byte: u8) -> Option<usize> {\n    if byte <= 0x7F {\n        return Some(1);\n    } else if byte & 0b1100_0000 == 0b1000_0000 {\n        return None;\n    } else if byte <= 0b1101_1111 {\n        Some(2)\n    } else if byte <= 0b1110_1111 {\n        Some(3)\n    } else if byte <= 0b1111_0111 {\n        Some(4)\n    } else {\n        None\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decodes the next UTF-8 encoded codepoint from the given byte slice.\n///\n/// If no valid encoding of a codepoint exists at the beginning of the given\n/// byte slice, then the first byte is returned instead.\n///\n/// This returns `None` if and only if `bytes` is empty.\n 77 pub(crate) fn utf8_decode(bytes: &[u8]) -> Option<Result<char, u8>> {\n 78     fn len(byte: u8) -> Option<usize> {\n 79         if byte <= 0x7F {\n 80             return Some(1);\n 81         } else if byte & 0b1100_0000 == 0b1000_0000 {\n 82             return None;\n 83         } else if byte <= 0b1101_1111 {\n 84             Some(2)\n 85         } else if byte <= 0b1110_1111 {\n 86             Some(3)\n 87         } else if byte <= 0b1111_0111 {\n 88             Some(4)\n 89         } else {\n 90             None\n 91         }\n 92     }\n 93 \n 94     if bytes.is_empty() {\n 95         return None;\n 96     }\n 97     let len = match len(bytes[0]) {\n 98         None => return Some(Err(bytes[0])),\n 99         Some(len) if len > bytes.len() => return Some(Err(bytes[0])),\n100         Some(1) => return Some(Ok(char::from(bytes[0]))),\n101         Some(len) => len,\n102     };\n103     match core::str::from_utf8(&bytes[..len]) {\n104         Ok(s) => Some(Ok(s.chars().next().unwrap())),\n105         Err(_) => Some(Err(bytes[0])),\n106     }\n107 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}