{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn high_u16(self) -> u16;\n}\n#[derive(Debug)]\nstruct SlotsIter {\n    slots: Slots,\n}\n#[derive(Clone, Copy)]\nstruct Slots(u32);\nimpl Iterator for SlotsIter {\n    type Item = usize;\n    fn next(&mut self) -> Option<usize> {\n        let slot = self.slots.0.trailing_zeros().as_usize();\n        if slot >= Slots::LIMIT {\n            return None;\n        }\n        self.slots = self.slots.remove(slot);\n        Some(slot)\n    }\n}\nimpl Slots {\n    const LIMIT: usize = 32;\n    fn insert(self, slot: usize) -> Slots {}\n    fn remove(self, slot: usize) -> Slots {\n        debug_assert!(slot < Slots::LIMIT);\n        Slots(self.0 & !(1 << slot.as_u32()))\n    }\n    fn is_empty(self) -> bool {}\n    fn iter(self) -> SlotsIter {}\n    fn apply(self, at: usize, caller_explicit_slots: &mut [Option<NonMaxUsize>]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2960 fn next(&mut self) -> Option<usize> {\n2961     // Number of zeroes here is always <= u8::MAX, and so fits in a usize.\n2962     let slot = self.slots.0.trailing_zeros().as_usize();\n2963     if slot >= Slots::LIMIT {\n2964         return None;\n2965     }\n2966     self.slots = self.slots.remove(slot);\n2967     Some(slot)\n2968 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}