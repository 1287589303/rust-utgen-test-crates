{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accel {\n    /// The first byte is the length. Subsequent bytes are the accelerated\n    /// bytes.\n    ///\n    /// Note that we make every accelerator 8 bytes as a slightly wasteful\n    /// way of making sure alignment is always correct for state ID sizes of\n    /// 1, 2, 4 and 8. This should be okay since accelerated states aren't\n    /// particularly common, especially when Unicode is enabled.\n    bytes: [u8; ACCEL_CAP],\n}\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\nimpl Accel {\n    #[cfg(feature = \"dfa-build\")]\n    pub fn new() -> Accel {}\n    pub fn from_slice(mut slice: &[u8]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes(bytes: [u8; 4]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes_unchecked(bytes: [u8; 4]) -> Accel {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn add(&mut self, byte: u8) -> bool {\n        if self.len() >= 3 {\n            return false;\n        }\n        if byte == b' ' {\n            return false;\n        }\n        assert!(\n            ! self.contains(byte), \"accelerator already contains {:?}\", crate\n            ::util::escape::DebugByte(byte)\n        );\n        self.bytes[self.len() + 1] = byte;\n        self.bytes[0] += 1;\n        true\n    }\n    pub fn len(&self) -> usize {\n        usize::from(self.bytes[0])\n    }\n    #[cfg(feature = \"dfa-build\")]\n    pub fn is_empty(&self) -> bool {}\n    fn needles(&self) -> &[u8] {}\n    #[cfg(feature = \"dfa-build\")]\n    fn contains(&self, byte: u8) -> bool {\n        self.needles().iter().position(|&b| b == byte).is_some()\n    }\n    #[cfg(feature = \"dfa-build\")]\n    fn as_accel_tys(&self) -> [AccelTy; 2] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Attempts to add the given byte to this accelerator. If the accelerator\n/// is already full or thinks the byte is a poor accelerator, then this\n/// returns false. Otherwise, returns true.\n///\n/// If the given byte is already in this accelerator, then it panics.\n449 pub fn add(&mut self, byte: u8) -> bool {\n450     if self.len() >= 3 {\n451         return false;\n452     }\n453     // As a special case, we totally reject trying to accelerate a state\n454     // with an ASCII space. In most cases, it occurs very frequently, and\n455     // tends to result in worse overall performance.\n456     if byte == b' ' {\n457         return false;\n458     }\n459     assert!(\n460         !self.contains(byte),\n461         \"accelerator already contains {:?}\",\n462         crate::util::escape::DebugByte(byte)\n463     );\n464     self.bytes[self.len() + 1] = byte;\n465     self.bytes[0] += 1;\n466     true\n467 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}