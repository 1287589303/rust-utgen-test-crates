{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/wrappers.rs\n// crate name is regex_automata\nuse alloc::vec::Vec;\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError},\n        regex::RegexInfo,\n    },\n    nfa::thompson::{pikevm, NFA},\n    util::{prefilter::Prefilter, primitives::NonMaxUsize},\n    HalfMatch, Input, Match, MatchKind, PatternID, PatternSet,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa;\n#[cfg(feature = \"dfa-onepass\")]\nuse crate::dfa::onepass;\n#[cfg(feature = \"hybrid\")]\nuse crate::hybrid;\n#[cfg(feature = \"nfa-backtrack\")]\nuse crate::nfa::thompson::backtrack;\n#[derive(Debug)]\npub(crate) struct PikeVM(PikeVMEngine);\n#[derive(Debug)]\npub(crate) struct PikeVMEngine(pikevm::PikeVM);\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Debug)]\npub(crate) struct RegexInfo(Arc<RegexInfoI>);\nimpl PikeVM {\n    pub(crate) fn new(\n        info: &RegexInfo,\n        pre: Option<Prefilter>,\n        nfa: &NFA,\n    ) -> Result<PikeVM, BuildError> {\n        PikeVMEngine::new(info, pre, nfa).map(PikeVM)\n    }\n    pub(crate) fn create_cache(&self) -> PikeVMCache {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn get(&self) -> &PikeVMEngine {}\n}\nimpl PikeVMEngine {\n    pub(crate) fn new(\n        info: &RegexInfo,\n        pre: Option<Prefilter>,\n        nfa: &NFA,\n    ) -> Result<PikeVMEngine, BuildError> {\n        let pikevm_config = pikevm::Config::new()\n            .match_kind(info.config().get_match_kind())\n            .prefilter(pre);\n        let engine = pikevm::Builder::new()\n            .configure(pikevm_config)\n            .build_from_nfa(nfa.clone())\n            .map_err(BuildError::nfa)?;\n        debug!(\"PikeVM built\");\n        Ok(PikeVMEngine(engine))\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_match(&self, cache: &mut PikeVMCache, input: &Input<'_>) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn search_slots(\n        &self,\n        cache: &mut PikeVMCache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<PatternID> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn which_overlapping_matches(\n        &self,\n        cache: &mut PikeVMCache,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n52 pub(crate) fn new(\n53     info: &RegexInfo,\n54     pre: Option<Prefilter>,\n55     nfa: &NFA,\n56 ) -> Result<PikeVM, BuildError> {\n57     PikeVMEngine::new(info, pre, nfa).map(PikeVM)\n58 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}