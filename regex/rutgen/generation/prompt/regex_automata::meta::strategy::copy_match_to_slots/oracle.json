{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/strategy.rs\n// crate name is regex_automata\nuse core::{fmt::Debug, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::sync::Arc;\nuse regex_syntax::hir::{literal, Hir};\nuse crate::{\n    meta::{\n        error::{BuildError, RetryError, RetryFailError, RetryQuadraticError},\n        regex::{Cache, RegexInfo},\n        reverse_inner, wrappers,\n    },\n    nfa::thompson::{self, WhichCaptures, NFA},\n    util::{\n        captures::{Captures, GroupInfo},\n        look::LookMatcher, prefilter::{self, Prefilter, PrefilterI},\n        primitives::{NonMaxUsize, PatternID},\n        search::{Anchored, HalfMatch, Input, Match, MatchKind, PatternSet},\n    },\n};\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl Match {\n    #[inline]\n    pub fn new<S: Into<Span>>(pattern: PatternID, span: S) -> Match {}\n    #[inline]\n    pub fn must<S: Into<Span>>(pattern: usize, span: S) -> Match {}\n    #[inline]\n    pub fn pattern(&self) -> PatternID {\n        self.pattern\n    }\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.span().start\n    }\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.span().end\n    }\n    #[inline]\n    pub fn range(&self) -> core::ops::Range<usize> {}\n    #[inline]\n    pub fn span(&self) -> Span {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\nimpl NonMaxUsize {\n    #[inline]\n    pub fn new(value: usize) -> Option<NonMaxUsize> {\n        NonZeroUsize::new(value.wrapping_add(1)).map(NonMaxUsize)\n    }\n    #[inline]\n    pub fn get(self) -> usize {}\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn copy_match_to_slots(m: Match, slots: &mut [Option<NonMaxUsize>]) {\n    let slot_start = m.pattern().as_usize() * 2;\n    let slot_end = slot_start + 1;\n    if let Some(slot) = slots.get_mut(slot_start) {\n        *slot = NonMaxUsize::new(m.start());\n    }\n    if let Some(slot) = slots.get_mut(slot_end) {\n        *slot = NonMaxUsize::new(m.end());\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Copies the offsets in the given match to the corresponding positions in\n/// `slots`.\n///\n/// In effect, this sets the slots corresponding to the implicit group for the\n/// pattern in the given match. If the indices for the corresponding slots do\n/// not exist, then no slots are set.\n///\n/// This is useful when the caller provides slots (or captures), but you use a\n/// regex engine that doesn't operate on slots (like a lazy DFA). This function\n/// lets you map the match you get back to the slots provided by the caller.\n1905 fn copy_match_to_slots(m: Match, slots: &mut [Option<NonMaxUsize>]) {\n1906     let slot_start = m.pattern().as_usize() * 2;\n1907     let slot_end = slot_start + 1;\n1908     if let Some(slot) = slots.get_mut(slot_start) {\n1909         *slot = NonMaxUsize::new(m.start());\n1910     }\n1911     if let Some(slot) = slots.get_mut(slot_end) {\n1912         *slot = NonMaxUsize::new(m.end());\n1913     }\n1914 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}