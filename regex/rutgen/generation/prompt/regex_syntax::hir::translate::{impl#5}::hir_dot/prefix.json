{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\npub trait Visitor {\n    type Output;\n    type Err;\n    fn finish(self) -> Result<Self::Output, Self::Err>;\n    fn start(&mut self);\n    fn visit_pre(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_post(&mut self, _ast: &Ast) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_alternation_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_concat_in(&mut self) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_pre(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_item_post(\n        &mut self,\n        _ast: &ast::ClassSetItem,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_pre(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_post(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n    fn visit_class_set_binary_op_in(\n        &mut self,\n        _ast: &ast::ClassSetBinaryOp,\n    ) -> Result<(), Self::Err> {\n        Ok(())\n    }\n}\n#[derive(Clone, Debug)]\nstruct TranslatorI<'t, 'p> {\n    trans: &'t Translator,\n    pattern: &'p str,\n}\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    crlf: Option<bool>,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the translator's Ast was parsed from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error, derived from the Ast given to the translator.\n    span: Span,\n}\n#[derive(Clone, Debug)]\npub struct Translator {\n    /// Our call stack, but on the heap.\n    stack: RefCell<Vec<HirFrame>>,\n    /// The current flag settings.\n    flags: Cell<Flags>,\n    /// Whether we're allowed to produce HIR that can match arbitrary bytes.\n    utf8: bool,\n    /// The line terminator to use for `.`.\n    line_terminator: u8,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Dot {\n    /// Matches the UTF-8 encoding of any Unicode scalar value.\n    ///\n    /// This is equivalent to `(?su:.)` and also `\\p{any}`.\n    AnyChar,\n    /// Matches any byte value.\n    ///\n    /// This is equivalent to `(?s-u:.)` and also `(?-u:[\\x00-\\xFF])`.\n    AnyByte,\n    /// Matches the UTF-8 encoding of any Unicode scalar value except for the\n    /// `char` given.\n    ///\n    /// This is equivalent to using `(?u-s:.)` with the line terminator set\n    /// to a particular ASCII byte. (Because of peculiarities in the regex\n    /// engines, a line terminator must be a single byte. It follows that when\n    /// UTF-8 mode is enabled, this single byte must also be a Unicode scalar\n    /// value. That is, ti must be ASCII.)\n    ///\n    /// (This and `AnyCharExceptLF` both exist because of legacy reasons.\n    /// `AnyCharExceptLF` will be dropped in the next breaking change release.)\n    AnyCharExcept(char),\n    /// Matches the UTF-8 encoding of any Unicode scalar value except for `\\n`.\n    ///\n    /// This is equivalent to `(?u-s:.)` and also `[\\p{any}--\\n]`.\n    AnyCharExceptLF,\n    /// Matches the UTF-8 encoding of any Unicode scalar value except for `\\r`\n    /// and `\\n`.\n    ///\n    /// This is equivalent to `(?uR-s:.)` and also `[\\p{any}--\\r\\n]`.\n    AnyCharExceptCRLF,\n    /// Matches any byte value except for the `u8` given.\n    ///\n    /// This is equivalent to using `(?-us:.)` with the line terminator set\n    /// to a particular ASCII byte. (Because of peculiarities in the regex\n    /// engines, a line terminator must be a single byte. It follows that when\n    /// UTF-8 mode is enabled, this single byte must also be a Unicode scalar\n    /// value. That is, ti must be ASCII.)\n    ///\n    /// (This and `AnyByteExceptLF` both exist because of legacy reasons.\n    /// `AnyByteExceptLF` will be dropped in the next breaking change release.)\n    AnyByteExcept(u8),\n    /// Matches any byte value except for `\\n`.\n    ///\n    /// This is equivalent to `(?-su:.)` and also `(?-u:[[\\x00-\\xFF]--\\n])`.\n    AnyByteExceptLF,\n    /// Matches any byte value except for `\\r` and `\\n`.\n    ///\n    /// This is equivalent to `(?R-su:.)` and also `(?-u:[[\\x00-\\xFF]--\\r\\n])`.\n    AnyByteExceptCRLF,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum ErrorKind {\n    /// This error occurs when a Unicode feature is used when Unicode\n    /// support is disabled. For example `(?-u:\\pL)` would trigger this error.\n    UnicodeNotAllowed,\n    /// This error occurs when translating a pattern that could match a byte\n    /// sequence that isn't UTF-8 and `utf8` was enabled.\n    InvalidUtf8,\n    /// This error occurs when one uses a non-ASCII byte for a line terminator,\n    /// but where Unicode mode is enabled and UTF-8 mode is disabled.\n    InvalidLineTerminator,\n    /// This occurs when an unrecognized Unicode property name could not\n    /// be found.\n    UnicodePropertyNotFound,\n    /// This occurs when an unrecognized Unicode property value could not\n    /// be found.\n    UnicodePropertyValueNotFound,\n    /// This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or\n    /// `\\d`) could not be found. This can occur when the `unicode-perl`\n    /// crate feature is not enabled.\n    UnicodePerlClassNotFound,\n    /// This occurs when the Unicode simple case mapping tables are not\n    /// available, and the regular expression required Unicode aware case\n    /// insensitivity.\n    UnicodeCaseUnavailable,\n}\nimpl<'t, 'p> TranslatorI<'t, 'p> {\n    fn new(trans: &'t Translator, pattern: &'p str) -> TranslatorI<'t, 'p> {}\n    fn trans(&self) -> &Translator {\n        &self.trans\n    }\n    fn push(&self, frame: HirFrame) {}\n    fn push_char(&self, ch: char) {}\n    fn push_byte(&self, byte: u8) {}\n    fn pop(&self) -> Option<HirFrame> {}\n    fn pop_concat_expr(&self) -> Option<Hir> {}\n    fn pop_alt_expr(&self) -> Option<Hir> {}\n    fn error(&self, span: Span, kind: ErrorKind) -> Error {\n        Error {\n            kind,\n            pattern: self.pattern.to_string(),\n            span,\n        }\n    }\n    fn flags(&self) -> Flags {\n        self.trans().flags.get()\n    }\n    fn set_flags(&self, ast_flags: &ast::Flags) -> Flags {}\n    fn ast_literal_to_scalar(&self, lit: &ast::Literal) -> Result<Either<char, u8>> {}\n    fn case_fold_char(&self, span: Span, c: char) -> Result<Option<Hir>> {}\n    fn hir_dot(&self, span: Span) -> Result<Hir> {\n        let (utf8, lineterm, flags) = (\n            self.trans().utf8,\n            self.trans().line_terminator,\n            self.flags(),\n        );\n        if utf8 && (!flags.unicode() || !lineterm.is_ascii()) {\n            return Err(self.error(span, ErrorKind::InvalidUtf8));\n        }\n        let dot = if flags.dot_matches_new_line() {\n            if flags.unicode() { hir::Dot::AnyChar } else { hir::Dot::AnyByte }\n        } else {\n            if flags.unicode() {\n                if flags.crlf() {\n                    hir::Dot::AnyCharExceptCRLF\n                } else {\n                    if !lineterm.is_ascii() {\n                        return Err(self.error(span, ErrorKind::InvalidLineTerminator));\n                    }\n                    hir::Dot::AnyCharExcept(char::from(lineterm))\n                }\n            } else {\n                if flags.crlf() {\n                    hir::Dot::AnyByteExceptCRLF\n                } else {\n                    hir::Dot::AnyByteExcept(lineterm)\n                }\n            }\n        };\n        Ok(Hir::dot(dot))\n    }\n    fn hir_assertion(&self, asst: &ast::Assertion) -> Result<Hir> {}\n    fn hir_capture(&self, group: &ast::Group, expr: Hir) -> Hir {}\n    fn hir_repetition(&self, rep: &ast::Repetition, expr: Hir) -> Hir {}\n    fn hir_unicode_class(\n        &self,\n        ast_class: &ast::ClassUnicode,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_ascii_unicode_class(\n        &self,\n        ast: &ast::ClassAscii,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_ascii_byte_class(&self, ast: &ast::ClassAscii) -> Result<hir::ClassBytes> {}\n    fn hir_perl_unicode_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassUnicode> {}\n    fn hir_perl_byte_class(\n        &self,\n        ast_class: &ast::ClassPerl,\n    ) -> Result<hir::ClassBytes> {}\n    fn convert_unicode_class_error(\n        &self,\n        span: &Span,\n        result: core::result::Result<hir::ClassUnicode, unicode::Error>,\n    ) -> Result<hir::ClassUnicode> {}\n    fn unicode_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassUnicode,\n    ) -> Result<()> {}\n    fn bytes_fold_and_negate(\n        &self,\n        span: &Span,\n        negated: bool,\n        class: &mut hir::ClassBytes,\n    ) -> Result<()> {}\n    fn class_literal_byte(&self, ast: &ast::Literal) -> Result<u8> {}\n}\nimpl Flags {\n    fn from_ast(ast: &ast::Flags) -> Flags {}\n    fn merge(&mut self, previous: &Flags) {}\n    fn case_insensitive(&self) -> bool {}\n    fn multi_line(&self) -> bool {}\n    fn dot_matches_new_line(&self) -> bool {\n        self.dot_matches_new_line.unwrap_or(false)\n    }\n    fn swap_greed(&self) -> bool {}\n    fn unicode(&self) -> bool {\n        self.unicode.unwrap_or(true)\n    }\n    fn crlf(&self) -> bool {\n        self.crlf.unwrap_or(false)\n    }\n}\nimpl Hir {\n    #[inline]\n    pub fn empty() -> Hir {}\n    #[inline]\n    pub fn fail() -> Hir {}\n    #[inline]\n    pub fn literal<B: Into<Box<[u8]>>>(lit: B) -> Hir {}\n    #[inline]\n    pub fn class(class: Class) -> Hir {}\n    #[inline]\n    pub fn look(look: Look) -> Hir {}\n    #[inline]\n    pub fn repetition(mut rep: Repetition) -> Hir {}\n    #[inline]\n    pub fn capture(capture: Capture) -> Hir {}\n    pub fn concat(subs: Vec<Hir>) -> Hir {}\n    pub fn alternation(subs: Vec<Hir>) -> Hir {}\n    #[inline]\n    pub fn dot(dot: Dot) -> Hir {\n        match dot {\n            Dot::AnyChar => {\n                Hir::class(\n                    Class::Unicode(\n                        ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]),\n                    ),\n                )\n            }\n            Dot::AnyByte => {\n                Hir::class(\n                    Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')])),\n                )\n            }\n            Dot::AnyCharExcept(ch) => {\n                let mut cls = ClassUnicode::new([ClassUnicodeRange::new(ch, ch)]);\n                cls.negate();\n                Hir::class(Class::Unicode(cls))\n            }\n            Dot::AnyCharExceptLF => {\n                Hir::class(\n                    Class::Unicode(\n                        ClassUnicode::new([\n                            ClassUnicodeRange::new('\\0', '\\x09'),\n                            ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),\n                        ]),\n                    ),\n                )\n            }\n            Dot::AnyCharExceptCRLF => {\n                Hir::class(\n                    Class::Unicode(\n                        ClassUnicode::new([\n                            ClassUnicodeRange::new('\\0', '\\x09'),\n                            ClassUnicodeRange::new('\\x0B', '\\x0C'),\n                            ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),\n                        ]),\n                    ),\n                )\n            }\n            Dot::AnyByteExcept(byte) => {\n                let mut cls = ClassBytes::new([ClassBytesRange::new(byte, byte)]);\n                cls.negate();\n                Hir::class(Class::Bytes(cls))\n            }\n            Dot::AnyByteExceptLF => {\n                Hir::class(\n                    Class::Bytes(\n                        ClassBytes::new([\n                            ClassBytesRange::new(b'\\0', b'\\x09'),\n                            ClassBytesRange::new(b'\\x0B', b'\\xFF'),\n                        ]),\n                    ),\n                )\n            }\n            Dot::AnyByteExceptCRLF => {\n                Hir::class(\n                    Class::Bytes(\n                        ClassBytes::new([\n                            ClassBytesRange::new(b'\\0', b'\\x09'),\n                            ClassBytesRange::new(b'\\x0B', b'\\x0C'),\n                            ClassBytesRange::new(b'\\x0E', b'\\xFF'),\n                        ]),\n                    ),\n                )\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n888 fn hir_dot(&self, span: Span) -> Result<Hir> {\n889     let (utf8, lineterm, flags) =\n890         (self.trans().utf8, self.trans().line_terminator, self.flags());\n891     if utf8 && (!flags.unicode() || !lineterm.is_ascii()) {\n892         return Err(self.error(span, ErrorKind::InvalidUtf8));\n893     }\n894     let dot = if flags.dot_matches_new_line() {\n895         if flags.unicode() {\n896             hir::Dot::AnyChar\n897         } else {\n898             hir::Dot::AnyByte\n899         }\n900     } else {\n901         if flags.unicode() {\n902             if flags.crlf() {\n903                 hir::Dot::AnyCharExceptCRLF\n904             } else {\n905                 if !lineterm.is_ascii() {\n906                     return Err(\n907                         self.error(span, ErrorKind::InvalidLineTerminator)\n908                     );\n909                 }\n910                 hir::Dot::AnyCharExcept(char::from(lineterm))\n911             }\n912         } else {\n913             if flags.crlf() {\n914                 hir::Dot::AnyByteExceptCRLF\n915             } else {\n916                 hir::Dot::AnyByteExcept(lineterm)\n917             }\n918         }\n919     };\n920     Ok(Hir::dot(dot))\n921 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}