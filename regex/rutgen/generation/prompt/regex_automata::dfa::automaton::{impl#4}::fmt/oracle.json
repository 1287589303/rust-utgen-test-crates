{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/automaton.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::search::PatternSet;\nuse crate::{\n    dfa::search,\n    util::{\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::{Anchored, HalfMatch, Input, MatchError},\n        start,\n    },\n};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Copy)]\npub struct DebugByte(pub u8);\n#[non_exhaustive]\n#[derive(Clone, Debug)]\npub enum StartError {\n    /// An error that occurs when a starting configuration's look-behind byte\n    /// is in this DFA's quit set.\n    Quit {\n        /// The quit byte that was found.\n        byte: u8,\n    },\n    /// An error that occurs when the caller requests an anchored mode that\n    /// isn't supported by the DFA.\n    UnsupportedAnchored {\n        /// The anchored mode given that is unsupported.\n        mode: Anchored,\n    },\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl core::fmt::Display for StartError {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        match *self {\n            StartError::Quit { byte } => {\n                write!(\n                    f,\n                    \"error computing start state because the look-behind byte \\\n                 {:?} triggered a quit state\",\n                    crate ::util::escape::DebugByte(byte),\n                )\n            }\n            StartError::UnsupportedAnchored { mode: Anchored::Yes } => {\n                write!(\n                    f,\n                    \"error computing start state because \\\n                     anchored searches are not supported or enabled\"\n                )\n            }\n            StartError::UnsupportedAnchored { mode: Anchored::No } => {\n                write!(\n                    f,\n                    \"error computing start state because \\\n                     unanchored searches are not supported or enabled\"\n                )\n            }\n            StartError::UnsupportedAnchored { mode: Anchored::Pattern(pid) } => {\n                write!(\n                    f,\n                    \"error computing start state because \\\n                     anchored searches for a specific pattern ({}) \\\n                     are not supported or enabled\",\n                    pid.as_usize(),\n                )\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2121 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n2122     match *self {\n2123         StartError::Quit { byte } => write!(\n2124             f,\n2125             \"error computing start state because the look-behind byte \\\n2126              {:?} triggered a quit state\",\n2127             crate::util::escape::DebugByte(byte),\n2128         ),\n2129         StartError::UnsupportedAnchored { mode: Anchored::Yes } => {\n2130             write!(\n2131                 f,\n2132                 \"error computing start state because \\\n2133                  anchored searches are not supported or enabled\"\n2134             )\n2135         }\n2136         StartError::UnsupportedAnchored { mode: Anchored::No } => {\n2137             write!(\n2138                 f,\n2139                 \"error computing start state because \\\n2140                  unanchored searches are not supported or enabled\"\n2141             )\n2142         }\n2143         StartError::UnsupportedAnchored {\n2144             mode: Anchored::Pattern(pid),\n2145         } => {\n2146             write!(\n2147                 f,\n2148                 \"error computing start state because \\\n2149                  anchored searches for a specific pattern ({}) \\\n2150                  are not supported or enabled\",\n2151                 pid.as_usize(),\n2152             )\n2153         }\n2154     }\n2155 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}