{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn canonical_script(normalized_value: &str) -> Result<Option<&'static str>, Error> {\n    let scripts = property_values(\"Script\")?.unwrap();\n    Ok(canonical_value(scripts, normalized_value))\n}\nfn property_values(\n    canonical_property_name: &'static str,\n) -> Result<Option<PropertyValues>, Error> {\n    #[cfg(\n        not(\n            any(\n                feature = \"unicode-age\",\n                feature = \"unicode-bool\",\n                feature = \"unicode-gencat\",\n                feature = \"unicode-perl\",\n                feature = \"unicode-script\",\n                feature = \"unicode-segment\",\n            )\n        )\n    )]\n    fn imp(_: &'static str) -> Result<Option<PropertyValues>, Error> {\n        Err(Error::PropertyValueNotFound)\n    }\n    #[cfg(\n        any(\n            feature = \"unicode-age\",\n            feature = \"unicode-bool\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-perl\",\n            feature = \"unicode-script\",\n            feature = \"unicode-segment\",\n        )\n    )]\n    fn imp(name: &'static str) -> Result<Option<PropertyValues>, Error> {\n        use crate::unicode_tables::property_values::PROPERTY_VALUES;\n        Ok(\n            PROPERTY_VALUES\n                .binary_search_by_key(&name, |&(n, _)| n)\n                .ok()\n                .map(|i| PROPERTY_VALUES[i].1),\n        )\n    }\n    imp(canonical_property_name)\n}\nfn canonical_value(\n    vals: PropertyValues,\n    normalized_value: &str,\n) -> Option<&'static str> {\n    vals.binary_search_by_key(&normalized_value, |&(n, _)| n).ok().map(|i| vals[i].1)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n515 fn canonical_script(\n516     normalized_value: &str,\n517 ) -> Result<Option<&'static str>, Error> {\n518     let scripts = property_values(\"Script\")?.unwrap();\n519     Ok(canonical_value(scripts, normalized_value))\n520 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}