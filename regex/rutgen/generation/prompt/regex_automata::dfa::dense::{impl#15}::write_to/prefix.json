{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[derive(Clone)]\npub(crate) struct TransitionTable<T> {\n    /// A contiguous region of memory representing the transition table in\n    /// row-major order. The representation is dense. That is, every state\n    /// has precisely the same number of transitions. The maximum number of\n    /// transitions per state is 257 (256 for each possible byte value, plus 1\n    /// for the special EOI transition). If a DFA has been instructed to use\n    /// byte classes (the default), then the number of transitions is usually\n    /// substantially fewer.\n    ///\n    /// In practice, T is either `Vec<u32>` or `&[u32]`.\n    table: T,\n    /// A set of equivalence classes, where a single equivalence class\n    /// represents a set of bytes that never discriminate between a match\n    /// and a non-match in the DFA. Each equivalence class corresponds to a\n    /// single character in this DFA's alphabet, where the maximum number of\n    /// characters is 257 (each possible value of a byte plus the special\n    /// EOI transition). Consequently, the number of equivalence classes\n    /// corresponds to the number of transitions for each DFA state. Note\n    /// though that the *space* used by each DFA state in the transition table\n    /// may be larger. The total space used by each DFA state is known as the\n    /// stride.\n    ///\n    /// The only time the number of equivalence classes is fewer than 257 is if\n    /// the DFA's kind uses byte classes (which is the default). Equivalence\n    /// classes should generally only be disabled when debugging, so that\n    /// the transitions themselves aren't obscured. Disabling them has no\n    /// other benefit, since the equivalence class map is always used while\n    /// searching. In the vast majority of cases, the number of equivalence\n    /// classes is substantially smaller than 257, particularly when large\n    /// Unicode classes aren't used.\n    classes: ByteClasses,\n    /// The stride of each DFA state, expressed as a power-of-two exponent.\n    ///\n    /// The stride of a DFA corresponds to the total amount of space used by\n    /// each DFA state in the transition table. This may be bigger than the\n    /// size of a DFA's alphabet, since the stride is always the smallest\n    /// power of two greater than or equal to the alphabet size.\n    ///\n    /// While this wastes space, this avoids the need for integer division\n    /// to convert between premultiplied state IDs and their corresponding\n    /// indices. Instead, we can use simple bit-shifts.\n    ///\n    /// See the docs for the `stride2` method for more details.\n    ///\n    /// The minimum `stride2` value is `1` (corresponding to a stride of `2`)\n    /// while the maximum `stride2` value is `9` (corresponding to a stride of\n    /// `512`). The maximum is not `8` since the maximum alphabet size is `257`\n    /// when accounting for the special EOI transition. However, an alphabet\n    /// length of that size is exceptionally rare since the alphabet is shrunk\n    /// into equivalence classes.\n    stride2: usize,\n}\n#[derive(Debug)]\npub struct SerializeError {\n    /// The name of the thing that a buffer is too small for.\n    ///\n    /// Currently, the only kind of serialization error is one that is\n    /// committed by a caller: providing a destination buffer that is too\n    /// small to fit the serialized object. This makes sense conceptually,\n    /// since every valid inhabitant of a type should be serializable.\n    ///\n    /// This is somewhat exposed in the public API of this crate. For example,\n    /// the `to_bytes_{big,little}_endian` APIs return a `Vec<u8>` and are\n    /// guaranteed to never panic or error. This is only possible because the\n    /// implementation guarantees that it will allocate a `Vec<u8>` that is\n    /// big enough.\n    ///\n    /// In summary, if a new serialization error kind needs to be added, then\n    /// it will need careful consideration.\n    what: &'static str,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<T: AsRef<[u32]>> TransitionTable<T> {\n    fn write_to<E: Endian>(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {\n        let nwrite = self.write_to_len();\n        if dst.len() < nwrite {\n            return Err(SerializeError::buffer_too_small(\"transition table\"));\n        }\n        dst = &mut dst[..nwrite];\n        E::write_u32(u32::try_from(self.len()).unwrap(), dst);\n        dst = &mut dst[size_of::<u32>()..];\n        E::write_u32(u32::try_from(self.stride2).unwrap(), dst);\n        dst = &mut dst[size_of::<u32>()..];\n        let n = self.classes.write_to(dst)?;\n        dst = &mut dst[n..];\n        for &sid in self.table() {\n            let n = wire::write_state_id::<E>(sid, &mut dst);\n            dst = &mut dst[n..];\n        }\n        Ok(nwrite)\n    }\n    fn write_to_len(&self) -> usize {\n        size_of::<u32>() + size_of::<u32>() + self.classes.write_to_len()\n            + (self.table().len() * StateID::SIZE)\n    }\n    fn validate(&self, dfa: &DFA<T>) -> Result<(), DeserializeError> {}\n    fn as_ref(&self) -> TransitionTable<&'_ [u32]> {}\n    #[cfg(feature = \"alloc\")]\n    fn to_owned(&self) -> TransitionTable<alloc::vec::Vec<u32>> {}\n    fn state(&self, id: StateID) -> State<'_> {}\n    fn states(&self) -> StateIter<'_, T> {}\n    fn to_index(&self, id: StateID) -> usize {}\n    fn to_state_id(&self, index: usize) -> StateID {}\n    #[cfg(feature = \"dfa-build\")]\n    fn next_state_id(&self, id: StateID) -> StateID {}\n    #[cfg(feature = \"dfa-build\")]\n    fn prev_state_id(&self, id: StateID) -> StateID {}\n    fn table(&self) -> &[StateID] {\n        wire::u32s_to_state_ids(self.table.as_ref())\n    }\n    fn len(&self) -> usize {\n        self.table().len() >> self.stride2\n    }\n    fn stride(&self) -> usize {}\n    fn alphabet_len(&self) -> usize {}\n    fn is_valid(&self, id: StateID) -> bool {}\n    fn memory_usage(&self) -> usize {}\n}\nimpl SerializeError {\n    pub(crate) fn buffer_too_small(what: &'static str) -> SerializeError {\n        SerializeError { what }\n    }\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {\n        let nwrite = self.write_to_len();\n        if dst.len() < nwrite {\n            return Err(SerializeError::buffer_too_small(\"byte class map\"));\n        }\n        for b in 0..=255 {\n            dst[0] = self.get(b);\n            dst = &mut dst[1..];\n        }\n        Ok(nwrite)\n    }\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {}\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {}\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\npub(crate) fn write_state_id<E: Endian>(sid: StateID, dst: &mut [u8]) -> usize {\n    E::write_u32(sid.as_u32(), dst);\n    StateID::SIZE\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Writes a serialized form of this transition table to the buffer given.\n/// If the buffer is too small, then an error is returned. To determine\n/// how big the buffer must be, use `write_to_len`.\n3551 fn write_to<E: Endian>(\n3552     &self,\n3553     mut dst: &mut [u8],\n3554 ) -> Result<usize, SerializeError> {\n3555     let nwrite = self.write_to_len();\n3556     if dst.len() < nwrite {\n3557         return Err(SerializeError::buffer_too_small(\"transition table\"));\n3558     }\n3559     dst = &mut dst[..nwrite];\n3560 \n3561     // write state length\n3562     // Unwrap is OK since number of states is guaranteed to fit in a u32.\n3563     E::write_u32(u32::try_from(self.len()).unwrap(), dst);\n3564     dst = &mut dst[size_of::<u32>()..];\n3565 \n3566     // write state stride (as power of 2)\n3567     // Unwrap is OK since stride2 is guaranteed to be <= 9.\n3568     E::write_u32(u32::try_from(self.stride2).unwrap(), dst);\n3569     dst = &mut dst[size_of::<u32>()..];\n3570 \n3571     // write byte class map\n3572     let n = self.classes.write_to(dst)?;\n3573     dst = &mut dst[n..];\n3574 \n3575     // write actual transitions\n3576     for &sid in self.table() {\n3577         let n = wire::write_state_id::<E>(sid, &mut dst);\n3578         dst = &mut dst[n..];\n3579     }\n3580     Ok(nwrite)\n3581 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}