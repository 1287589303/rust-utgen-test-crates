{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{error::Error, Regex, RegexSet};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexSetBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexSetBuilder {\n    pub fn new<I, S>(patterns: I) -> RegexSetBuilder\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {}\n    pub fn build(&self) -> Result<RegexSet, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexSetBuilder {\n        self.builder.crlf(yes);\n        self\n    }\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexSetBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexSetBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {\n        self.syntaxc = self.syntaxc.crlf(yes);\n        self\n    }\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures CRLF mode for all of the patterns.\n///\n/// When CRLF mode is enabled, both `\\r` (\"carriage return\" or CR for\n/// short) and `\\n` (\"line feed\" or LF for short) are treated as line\n/// terminators. This results in the following:\n///\n/// * Unless dot-matches-new-line mode is enabled, `.` will now match\n/// any character except for `\\n` and `\\r`.\n/// * When multi-line mode is enabled, `^` will match immediately\n/// following a `\\n` or a `\\r`. Similarly, `$` will match immediately\n/// preceding a `\\n` or a `\\r`. Neither `^` nor `$` will ever match\n/// between `\\r` and `\\n`.\n///\n/// This setting can also be configured using the inline flag `R` in\n/// the pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexSetBuilder;\n///\n/// let re = RegexSetBuilder::new([r\"^foo$\"])\n///     .multi_line(true)\n///     .crlf(true)\n///     .build()\n///     .unwrap();\n/// let hay = \"\\r\\nfoo\\r\\n\";\n/// // If CRLF mode weren't enabled here, then '$' wouldn't match\n/// // immediately after 'foo', and thus no match would be found.\n/// assert!(re.is_match(hay));\n/// ```\n///\n/// This example demonstrates that `^` will never match at a position\n/// between `\\r` and `\\n`. (`$` will similarly not match between a `\\r`\n/// and a `\\n`.)\n///\n/// ```\n/// use regex::RegexSetBuilder;\n///\n/// let re = RegexSetBuilder::new([r\"^\\n\"])\n///     .multi_line(true)\n///     .crlf(true)\n///     .build()\n///     .unwrap();\n/// assert!(!re.is_match(\"\\r\\n\"));\n/// ```\n1027 pub fn crlf(&mut self, yes: bool) -> &mut RegexSetBuilder {\n1028     self.builder.crlf(yes);\n1029     self\n1030 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}