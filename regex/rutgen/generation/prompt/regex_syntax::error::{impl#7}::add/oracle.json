{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/error.rs\n// crate name is regex_syntax\nuse alloc::{\n    format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{ast, hir};\nstruct Spans<'p> {\n    /// The original regex pattern string.\n    pattern: &'p str,\n    /// The total width that should be used for line numbers. The width is\n    /// used for left padding the line numbers for alignment.\n    ///\n    /// A value of `0` means line numbers should not be displayed. That is,\n    /// the pattern is itself only one line.\n    line_number_width: usize,\n    /// All error spans that occur on a single line. This sequence always has\n    /// length equivalent to the number of lines in `pattern`, where the index\n    /// of the sequence represents a line number, starting at `0`. The spans\n    /// in each line are sorted in ascending order.\n    by_line: Vec<Vec<ast::Span>>,\n    /// All error spans that occur over one or more lines. That is, the start\n    /// and end position of the span have different line numbers. The spans are\n    /// sorted in ascending order.\n    multi_line: Vec<ast::Span>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\nimpl<'p> Spans<'p> {\n    fn from_formatter<'e, E: core::fmt::Display>(\n        fmter: &'p Formatter<'e, E>,\n    ) -> Spans<'p> {}\n    fn add(&mut self, span: ast::Span) {\n        if span.is_one_line() {\n            let i = span.start.line - 1;\n            self.by_line[i].push(span);\n            self.by_line[i].sort();\n        } else {\n            self.multi_line.push(span);\n            self.multi_line.sort();\n        }\n    }\n    fn notate(&self) -> String {}\n    fn notate_line(&self, i: usize) -> Option<String> {}\n    fn left_pad_line_number(&self, n: usize) -> String {}\n    fn line_number_padding(&self) -> usize {}\n}\nimpl Span {\n    pub fn new(start: Position, end: Position) -> Span {}\n    pub fn splat(pos: Position) -> Span {}\n    pub fn with_start(self, pos: Position) -> Span {}\n    pub fn with_end(self, pos: Position) -> Span {}\n    pub fn is_one_line(&self) -> bool {\n        self.start.line == self.end.line\n    }\n    pub fn is_empty(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Add the given span to this sequence, putting it in the right place.\n182 fn add(&mut self, span: ast::Span) {\n183     // This is grossly inefficient since we sort after each add, but right\n184     // now, we only ever add two spans at most.\n185     if span.is_one_line() {\n186         let i = span.start.line - 1; // because lines are 1-indexed\n187         self.by_line[i].push(span);\n188         self.by_line[i].sort();\n189     } else {\n190         self.multi_line.push(span);\n191         self.multi_line.sort();\n192     }\n193 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}