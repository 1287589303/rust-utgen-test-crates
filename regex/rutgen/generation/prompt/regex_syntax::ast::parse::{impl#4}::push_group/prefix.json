{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/parse.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, ast::Error>;\nuse core::{\n    borrow::Borrow, cell::{Cell, RefCell},\n    mem,\n};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::{self, Ast, Position, Span},\n    either::Either, is_escapeable_character, is_meta_character,\n};\n#[derive(Clone, Debug)]\nstruct ParserI<'s, P> {\n    /// The parser state/configuration.\n    parser: P,\n    /// The full regular expression provided by the user.\n    pattern: &'s str,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Group {\n    /// The span of this group.\n    pub span: Span,\n    /// The kind of this group.\n    pub kind: GroupKind,\n    /// The regular expression in this group.\n    pub ast: Box<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Flags {\n    /// The span of this group of flags.\n    pub span: Span,\n    /// A sequence of flag items. Each item is either a flag or a negation\n    /// operator.\n    pub items: Vec<FlagsItem>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Error {\n    /// The kind of error.\n    kind: ErrorKind,\n    /// The original pattern that the parser generated the error from. Every\n    /// span in an error is a valid range into this string.\n    pattern: String,\n    /// The span of this error.\n    span: Span,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    /// The current position of the parser.\n    pos: Cell<Position>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The maximum number of open parens/brackets allowed. If the parser\n    /// exceeds this number, then an error is returned.\n    nest_limit: u32,\n    /// Whether to support octal syntax or not. When `false`, the parser will\n    /// return an error helpfully pointing out that backreferences are not\n    /// supported.\n    octal: bool,\n    /// The initial setting for `ignore_whitespace` as provided by\n    /// `ParserBuilder`. It is used when resetting the parser's state.\n    initial_ignore_whitespace: bool,\n    /// Whether the parser supports `{,n}` repetitions as an equivalent to\n    /// `{0,n}.`\n    empty_min_range: bool,\n    /// Whether whitespace should be ignored. When enabled, comments are\n    /// also permitted.\n    ignore_whitespace: Cell<bool>,\n    /// A list of comments, in order of appearance.\n    comments: RefCell<Vec<ast::Comment>>,\n    /// A stack of grouped sub-expressions, including alternations.\n    stack_group: RefCell<Vec<GroupState>>,\n    /// A stack of nested character classes. This is only non-empty when\n    /// parsing a class.\n    stack_class: RefCell<Vec<ClassState>>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<ast::CaptureName>>,\n    /// A scratch buffer used in various places. Mostly this is used to\n    /// accumulate relevant characters from parts of a pattern.\n    scratch: RefCell<String>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct SetFlags {\n    /// The span of these flags, including the grouping parentheses.\n    pub span: Span,\n    /// The actual sequence of flags.\n    pub flags: Flags,\n}\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Span {\n    /// The start byte offset.\n    pub start: Position,\n    /// The end byte offset.\n    pub end: Position,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Concat {\n    /// The span of this concatenation.\n    pub span: Span,\n    /// The concatenation regular expressions.\n    pub asts: Vec<Ast>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Box<Span>),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(Box<SetFlags>),\n    /// A single character literal, which includes escape sequences.\n    Literal(Box<Literal>),\n    /// The \"any character\" class.\n    Dot(Box<Span>),\n    /// A single zero-width assertion.\n    Assertion(Box<Assertion>),\n    /// A single Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    ClassUnicode(Box<ClassUnicode>),\n    /// A single perl character class, e.g., `\\d` or `\\W`.\n    ClassPerl(Box<ClassPerl>),\n    /// A single bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    ClassBracketed(Box<ClassBracketed>),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Box<Repetition>),\n    /// A grouped regular expression.\n    Group(Box<Group>),\n    /// An alternation of regular expressions.\n    Alternation(Box<Alternation>),\n    /// A concatenation of regular expressions.\n    Concat(Box<Concat>),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Either<Left, Right> {\n    Left(Left),\n    Right(Right),\n}\n#[derive(Clone, Debug)]\nenum GroupState {\n    /// This state is pushed whenever an opening group is found.\n    Group {\n        /// The concatenation immediately preceding the opening group.\n        concat: ast::Concat,\n        /// The group that has been opened. Its sub-AST is always empty.\n        group: ast::Group,\n        /// Whether this group has the `x` flag enabled or not.\n        ignore_whitespace: bool,\n    },\n    /// This state is pushed whenever a new alternation branch is found. If\n    /// an alternation branch is found and this state is at the top of the\n    /// stack, then this state should be modified to include the new\n    /// alternation.\n    Alternation(ast::Alternation),\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Flag {\n    /// `i`\n    CaseInsensitive,\n    /// `m`\n    MultiLine,\n    /// `s`\n    DotMatchesNewLine,\n    /// `U`\n    SwapGreed,\n    /// `u`\n    Unicode,\n    /// `R`\n    CRLF,\n    /// `x`\n    IgnoreWhitespace,\n}\nimpl<'s, P: Borrow<Parser>> ParserI<'s, P> {\n    fn new(parser: P, pattern: &'s str) -> ParserI<'s, P> {}\n    fn parser(&self) -> &Parser {\n        self.parser.borrow()\n    }\n    fn pattern(&self) -> &str {}\n    fn error(&self, span: Span, kind: ast::ErrorKind) -> ast::Error {}\n    fn offset(&self) -> usize {}\n    fn line(&self) -> usize {}\n    fn column(&self) -> usize {}\n    fn next_capture_index(&self, span: Span) -> Result<u32> {}\n    fn add_capture_name(&self, cap: &ast::CaptureName) -> Result<()> {}\n    fn ignore_whitespace(&self) -> bool {\n        self.parser().ignore_whitespace.get()\n    }\n    fn char(&self) -> char {\n        self.char_at(self.offset())\n    }\n    fn char_at(&self, i: usize) -> char {}\n    fn bump(&self) -> bool {}\n    fn bump_if(&self, prefix: &str) -> bool {}\n    fn is_lookaround_prefix(&self) -> bool {}\n    fn bump_and_bump_space(&self) -> bool {}\n    fn bump_space(&self) {}\n    fn peek(&self) -> Option<char> {}\n    fn peek_space(&self) -> Option<char> {}\n    fn is_eof(&self) -> bool {}\n    fn pos(&self) -> Position {}\n    fn span(&self) -> Span {\n        Span::splat(self.pos())\n    }\n    fn span_char(&self) -> Span {}\n    #[inline(never)]\n    fn push_alternate(&self, mut concat: ast::Concat) -> Result<ast::Concat> {}\n    fn push_or_add_alternation(&self, concat: ast::Concat) {}\n    #[inline(never)]\n    fn push_group(&self, mut concat: ast::Concat) -> Result<ast::Concat> {\n        assert_eq!(self.char(), '(');\n        match self.parse_group()? {\n            Either::Left(set) => {\n                let ignore = set.flags.flag_state(ast::Flag::IgnoreWhitespace);\n                if let Some(v) = ignore {\n                    self.parser().ignore_whitespace.set(v);\n                }\n                concat.asts.push(Ast::flags(set));\n                Ok(concat)\n            }\n            Either::Right(group) => {\n                let old_ignore_whitespace = self.ignore_whitespace();\n                let new_ignore_whitespace = group\n                    .flags()\n                    .and_then(|f| f.flag_state(ast::Flag::IgnoreWhitespace))\n                    .unwrap_or(old_ignore_whitespace);\n                self.parser()\n                    .stack_group\n                    .borrow_mut()\n                    .push(GroupState::Group {\n                        concat,\n                        group,\n                        ignore_whitespace: old_ignore_whitespace,\n                    });\n                self.parser().ignore_whitespace.set(new_ignore_whitespace);\n                Ok(ast::Concat {\n                    span: self.span(),\n                    asts: vec![],\n                })\n            }\n        }\n    }\n    #[inline(never)]\n    fn pop_group(&self, mut group_concat: ast::Concat) -> Result<ast::Concat> {}\n    #[inline(never)]\n    fn pop_group_end(&self, mut concat: ast::Concat) -> Result<Ast> {}\n    #[inline(never)]\n    fn push_class_open(\n        &self,\n        parent_union: ast::ClassSetUnion,\n    ) -> Result<ast::ClassSetUnion> {}\n    #[inline(never)]\n    fn pop_class(\n        &self,\n        nested_union: ast::ClassSetUnion,\n    ) -> Result<Either<ast::ClassSetUnion, ast::ClassBracketed>> {}\n    #[inline(never)]\n    fn unclosed_class_error(&self) -> ast::Error {}\n    #[inline(never)]\n    fn push_class_op(\n        &self,\n        next_kind: ast::ClassSetBinaryOpKind,\n        next_union: ast::ClassSetUnion,\n    ) -> ast::ClassSetUnion {}\n    #[inline(never)]\n    fn pop_class_op(&self, rhs: ast::ClassSet) -> ast::ClassSet {}\n}\nimpl Group {\n    pub fn flags(&self) -> Option<&Flags> {\n        match self.kind {\n            GroupKind::NonCapturing(ref flags) => Some(flags),\n            _ => None,\n        }\n    }\n    pub fn is_capturing(&self) -> bool {}\n    pub fn capture_index(&self) -> Option<u32> {}\n}\nimpl Ast {\n    pub fn empty(span: Span) -> Ast {}\n    pub fn flags(e: SetFlags) -> Ast {\n        Ast::Flags(Box::new(e))\n    }\n    pub fn literal(e: Literal) -> Ast {}\n    pub fn dot(span: Span) -> Ast {}\n    pub fn assertion(e: Assertion) -> Ast {}\n    pub fn class_unicode(e: ClassUnicode) -> Ast {}\n    pub fn class_perl(e: ClassPerl) -> Ast {}\n    pub fn class_bracketed(e: ClassBracketed) -> Ast {}\n    pub fn repetition(e: Repetition) -> Ast {}\n    pub fn group(e: Group) -> Ast {}\n    pub fn alternation(e: Alternation) -> Ast {}\n    pub fn concat(e: Concat) -> Ast {}\n    pub fn span(&self) -> &Span {}\n    pub fn is_empty(&self) -> bool {}\n    fn has_subexprs(&self) -> bool {}\n}\nimpl Flags {\n    pub fn add_item(&mut self, item: FlagsItem) -> Option<usize> {}\n    pub fn flag_state(&self, flag: Flag) -> Option<bool> {\n        let mut negated = false;\n        for x in &self.items {\n            match x.kind {\n                FlagsItemKind::Negation => {\n                    negated = true;\n                }\n                FlagsItemKind::Flag(ref xflag) if xflag == &flag => {\n                    return Some(!negated);\n                }\n                _ => {}\n            }\n        }\n        None\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parse and push a group AST (and its parent concatenation) on to the\n/// parser's internal stack. Return a fresh concatenation corresponding\n/// to the group's sub-AST.\n///\n/// If a set of flags was found (with no group), then the concatenation\n/// is returned with that set of flags added.\n///\n/// This assumes that the parser is currently positioned on the opening\n/// parenthesis. It advances the parser to the character at the start\n/// of the sub-expression (or adjoining expression).\n///\n/// If there was a problem parsing the start of the group, then an error\n/// is returned.\n703 fn push_group(&self, mut concat: ast::Concat) -> Result<ast::Concat> {\n704     assert_eq!(self.char(), '(');\n705     match self.parse_group()? {\n706         Either::Left(set) => {\n707             let ignore = set.flags.flag_state(ast::Flag::IgnoreWhitespace);\n708             if let Some(v) = ignore {\n709                 self.parser().ignore_whitespace.set(v);\n710             }\n711 \n712             concat.asts.push(Ast::flags(set));\n713             Ok(concat)\n714         }\n715         Either::Right(group) => {\n716             let old_ignore_whitespace = self.ignore_whitespace();\n717             let new_ignore_whitespace = group\n718                 .flags()\n719                 .and_then(|f| f.flag_state(ast::Flag::IgnoreWhitespace))\n720                 .unwrap_or(old_ignore_whitespace);\n721             self.parser().stack_group.borrow_mut().push(\n722                 GroupState::Group {\n723                     concat,\n724                     group,\n725                     ignore_whitespace: old_ignore_whitespace,\n726                 },\n727             );\n728             self.parser().ignore_whitespace.set(new_ignore_whitespace);\n729             Ok(ast::Concat { span: self.span(), asts: vec![] })\n730         }\n731     }\n732 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}