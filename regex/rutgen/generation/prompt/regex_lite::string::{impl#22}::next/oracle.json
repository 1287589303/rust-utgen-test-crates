{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\n#[derive(Debug)]\npub struct Split<'r, 'h> {\n    haystack: &'h str,\n    finder: Matches<'r, 'h>,\n    last: usize,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\n#[derive(Debug)]\npub struct Matches<'r, 'h> {\n    haystack: &'h str,\n    it: pikevm::FindMatches<'r, 'h>,\n}\nimpl<'r, 'h> Iterator for Split<'r, 'h> {\n    type Item = &'h str;\n    #[inline]\n    fn next(&mut self) -> Option<&'h str> {\n        match self.finder.next() {\n            None => {\n                let len = self.haystack.len();\n                if self.last > len {\n                    None\n                } else {\n                    let range = self.last..len;\n                    self.last = len + 1;\n                    Some(&self.haystack[range])\n                }\n            }\n            Some(m) => {\n                let range = self.last..m.start();\n                self.last = m.end();\n                Some(&self.haystack[range])\n            }\n        }\n    }\n}\nimpl<'h> Match<'h> {\n    #[inline]\n    fn new(haystack: &'h str, start: usize, end: usize) -> Match<'h> {}\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.start\n    }\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.end\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn range(&self) -> core::ops::Range<usize> {}\n    #[inline]\n    pub fn as_str(&self) -> &'h str {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2254 fn next(&mut self) -> Option<&'h str> {\n2255     match self.finder.next() {\n2256         None => {\n2257             let len = self.haystack.len();\n2258             if self.last > len {\n2259                 None\n2260             } else {\n2261                 let range = self.last..len;\n2262                 self.last = len + 1; // Next call will return None\n2263                 Some(&self.haystack[range])\n2264             }\n2265         }\n2266         Some(m) => {\n2267             let range = self.last..m.start();\n2268             self.last = m.end();\n2269             Some(&self.haystack[range])\n2270         }\n2271     }\n2272 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}