{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn accelerate(mut self, yes: bool) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn minimize(mut self, yes: bool) -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn start_kind(mut self, kind: StartKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {\n        self.starts_for_each_pattern = Some(yes);\n        self\n    }\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {}\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {}\n    pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn determinize_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn get_accelerate(&self) -> bool {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_minimize(&self) -> bool {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts(&self) -> StartKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {}\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_dfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_determinize_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether to compile a separate start state for each pattern in the\n/// automaton.\n///\n/// When enabled, a separate **anchored** start state is added for each\n/// pattern in the DFA. When this start state is used, then the DFA will\n/// only search for matches for the pattern specified, even if there are\n/// other patterns in the DFA.\n///\n/// The main downside of this option is that it can potentially increase\n/// the size of the DFA and/or increase the time it takes to build the DFA.\n///\n/// There are a few reasons one might want to enable this (it's disabled\n/// by default):\n///\n/// 1. When looking for the start of an overlapping match (using a\n/// reverse DFA), doing it correctly requires starting the reverse search\n/// using the starting state of the pattern that matched in the forward\n/// direction. Indeed, when building a [`Regex`](crate::dfa::regex::Regex),\n/// it will automatically enable this option when building the reverse DFA\n/// internally.\n/// 2. When you want to use a DFA with multiple patterns to both search\n/// for matches of any pattern or to search for anchored matches of one\n/// particular pattern while using the same DFA. (Otherwise, you would need\n/// to compile a new DFA for each pattern.)\n/// 3. Since the start states added for each pattern are anchored, if you\n/// compile an unanchored DFA with one pattern while also enabling this\n/// option, then you can use the same DFA to perform anchored or unanchored\n/// searches. The latter you get with the standard search APIs. The former\n/// you get from the various `_at` search methods that allow you specify a\n/// pattern ID to search for.\n///\n/// By default this is disabled.\n///\n/// # Example\n///\n/// This example shows how to use this option to permit the same DFA to\n/// run both anchored and unanchored searches for a single pattern.\n///\n/// ```\n/// use regex_automata::{\n///     dfa::{dense, Automaton},\n///     Anchored, HalfMatch, PatternID, Input,\n/// };\n///\n/// let dfa = dense::Builder::new()\n///     .configure(dense::Config::new().starts_for_each_pattern(true))\n///     .build(r\"foo[0-9]+\")?;\n/// let haystack = \"quux foo123\";\n///\n/// // Here's a normal unanchored search. Notice that we use 'None' for the\n/// // pattern ID. Since the DFA was built as an unanchored machine, it\n/// // use its default unanchored starting state.\n/// let expected = HalfMatch::must(0, 11);\n/// let input = Input::new(haystack);\n/// assert_eq!(Some(expected), dfa.try_search_fwd(&input)?);\n/// // But now if we explicitly specify the pattern to search ('0' being\n/// // the only pattern in the DFA), then it will use the starting state\n/// // for that specific pattern which is always anchored. Since the\n/// // pattern doesn't have a match at the beginning of the haystack, we\n/// // find nothing.\n/// let input = Input::new(haystack)\n///     .anchored(Anchored::Pattern(PatternID::must(0)));\n/// assert_eq!(None, dfa.try_search_fwd(&input)?);\n/// // And finally, an anchored search is not the same as putting a '^' at\n/// // beginning of the pattern. An anchored search can only match at the\n/// // beginning of the *search*, which we can change:\n/// let input = Input::new(haystack)\n///     .anchored(Anchored::Pattern(PatternID::must(0)))\n///     .range(5..);\n/// assert_eq!(Some(expected), dfa.try_search_fwd(&input)?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n475 pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {\n476     self.starts_for_each_pattern = Some(yes);\n477     self\n478 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}