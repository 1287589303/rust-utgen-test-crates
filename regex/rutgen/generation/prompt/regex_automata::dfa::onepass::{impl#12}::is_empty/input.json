{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy)]\nstruct PatternEpsilons(u64);\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl PatternEpsilons {\n    const PATTERN_ID_BITS: u64 = 22;\n    const PATTERN_ID_SHIFT: u64 = 64 - PatternEpsilons::PATTERN_ID_BITS;\n    const PATTERN_ID_NONE: u64 = 0x00000000_003FFFFF;\n    const PATTERN_ID_LIMIT: u64 = PatternEpsilons::PATTERN_ID_NONE;\n    const PATTERN_ID_MASK: u64 = 0xFFFFFC00_00000000;\n    const EPSILONS_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn empty() -> PatternEpsilons {}\n    fn is_empty(self) -> bool {\n        self.pattern_id().is_none() && self.epsilons().is_empty()\n    }\n    fn pattern_id(self) -> Option<PatternID> {\n        let pid = self.0 >> PatternEpsilons::PATTERN_ID_SHIFT;\n        if pid == PatternEpsilons::PATTERN_ID_LIMIT {\n            None\n        } else {\n            Some(PatternID::new_unchecked(pid.as_usize()))\n        }\n    }\n    fn pattern_id_unchecked(self) -> PatternID {}\n    fn set_pattern_id(self, pid: PatternID) -> PatternEpsilons {}\n    fn epsilons(self) -> Epsilons {\n        Epsilons(self.0 & PatternEpsilons::EPSILONS_MASK)\n    }\n    fn set_epsilons(self, epsilons: Epsilons) -> PatternEpsilons {}\n}\nimpl Epsilons {\n    const SLOT_MASK: u64 = 0x000003FF_FFFFFC00;\n    const SLOT_SHIFT: u64 = 10;\n    const LOOK_MASK: u64 = 0x00000000_000003FF;\n    fn empty() -> Epsilons {}\n    fn is_empty(self) -> bool {\n        self.0 == 0\n    }\n    fn slots(self) -> Slots {}\n    fn set_slots(self, slots: Slots) -> Epsilons {}\n    fn looks(self) -> LookSet {}\n    fn set_looks(self, look_set: LookSet) -> Epsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether this pattern epsilons is empty or not. It's empty when it has\n/// no pattern ID and an empty epsilons.\n2700 fn is_empty(self) -> bool {\n2701     self.pattern_id().is_none() && self.epsilons().is_empty()\n2702 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}