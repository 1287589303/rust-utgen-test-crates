{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {\n        ByteClasses([0; 256])\n    }\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {\n        wire::check_slice_len(slice, 256, \"byte class map\")?;\n        let mut classes = ByteClasses::empty();\n        for (b, &class) in slice[..256].iter().enumerate() {\n            classes.set(u8::try_from(b).unwrap(), class);\n        }\n        for &b in classes.0.iter() {\n            if usize::from(b) >= classes.alphabet_len() {\n                return Err(\n                    DeserializeError::generic(\n                        \"found equivalence class greater than alphabet len\",\n                    ),\n                );\n            }\n        }\n        Ok((classes, 256))\n    }\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {\n        self.0[usize::from(byte)] = class;\n    }\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {}\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {\n        usize::from(self.0[255]) + 1 + 1\n    }\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::Generic {\n            msg,\n        })\n    }\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\npub(crate) fn check_slice_len<T>(\n    slice: &[T],\n    at_least_len: usize,\n    what: &'static str,\n) -> Result<(), DeserializeError> {\n    if slice.len() < at_least_len {\n        return Err(DeserializeError::buffer_too_small(what));\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Deserializes a byte class map from the given slice. If the slice is of\n/// insufficient length or otherwise contains an impossible mapping, then\n/// an error is returned. Upon success, the number of bytes read along with\n/// the map are returned. The number of bytes read is always a multiple of\n/// 8.\n241 pub(crate) fn from_bytes(\n242     slice: &[u8],\n243 ) -> Result<(ByteClasses, usize), DeserializeError> {\n244     wire::check_slice_len(slice, 256, \"byte class map\")?;\n245     let mut classes = ByteClasses::empty();\n246     for (b, &class) in slice[..256].iter().enumerate() {\n247         classes.set(u8::try_from(b).unwrap(), class);\n248     }\n249     // We specifically don't use 'classes.iter()' here because that\n250     // iterator depends on 'classes.alphabet_len()' being correct. But that\n251     // is precisely the thing we're trying to verify below!\n252     for &b in classes.0.iter() {\n253         if usize::from(b) >= classes.alphabet_len() {\n254             return Err(DeserializeError::generic(\n255                 \"found equivalence class greater than alphabet len\",\n256             ));\n257         }\n258     }\n259     Ok((classes, 256))\n260 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}