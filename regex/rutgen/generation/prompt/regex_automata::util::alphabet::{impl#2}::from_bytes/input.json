{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {\n        ByteClasses([0; 256])\n    }\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {\n        wire::check_slice_len(slice, 256, \"byte class map\")?;\n        let mut classes = ByteClasses::empty();\n        for (b, &class) in slice[..256].iter().enumerate() {\n            classes.set(u8::try_from(b).unwrap(), class);\n        }\n        for &b in classes.0.iter() {\n            if usize::from(b) >= classes.alphabet_len() {\n                return Err(\n                    DeserializeError::generic(\n                        \"found equivalence class greater than alphabet len\",\n                    ),\n                );\n            }\n        }\n        Ok((classes, 256))\n    }\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {\n        self.0[usize::from(byte)] = class;\n    }\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {}\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {\n        usize::from(self.0[255]) + 1 + 1\n    }\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\nimpl DeserializeError {\n    pub(crate) fn generic(msg: &'static str) -> DeserializeError {\n        DeserializeError(DeserializeErrorKind::Generic {\n            msg,\n        })\n    }\n    pub(crate) fn buffer_too_small(what: &'static str) -> DeserializeError {}\n    fn invalid_usize(what: &'static str) -> DeserializeError {}\n    fn version_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn endian_mismatch(expected: u32, found: u32) -> DeserializeError {}\n    fn alignment_mismatch(alignment: usize, address: usize) -> DeserializeError {}\n    fn label_mismatch(expected: &'static str) -> DeserializeError {}\n    fn arithmetic_overflow(what: &'static str) -> DeserializeError {}\n    fn pattern_id_error(err: PatternIDError, what: &'static str) -> DeserializeError {}\n    pub(crate) fn state_id_error(\n        err: StateIDError,\n        what: &'static str,\n    ) -> DeserializeError {}\n}\npub(crate) fn check_slice_len<T>(\n    slice: &[T],\n    at_least_len: usize,\n    what: &'static str,\n) -> Result<(), DeserializeError> {\n    if slice.len() < at_least_len {\n        return Err(DeserializeError::buffer_too_small(what));\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Deserializes a byte class map from the given slice. If the slice is of\n/// insufficient length or otherwise contains an impossible mapping, then\n/// an error is returned. Upon success, the number of bytes read along with\n/// the map are returned. The number of bytes read is always a multiple of\n/// 8.\n241 pub(crate) fn from_bytes(\n242     slice: &[u8],\n243 ) -> Result<(ByteClasses, usize), DeserializeError> {\n244     wire::check_slice_len(slice, 256, \"byte class map\")?;\n245     let mut classes = ByteClasses::empty();\n246     for (b, &class) in slice[..256].iter().enumerate() {\n247         classes.set(u8::try_from(b).unwrap(), class);\n248     }\n249     // We specifically don't use 'classes.iter()' here because that\n250     // iterator depends on 'classes.alphabet_len()' being correct. But that\n251     // is precisely the thing we're trying to verify below!\n252     for &b in classes.0.iter() {\n253         if usize::from(b) >= classes.alphabet_len() {\n254             return Err(DeserializeError::generic(\n255                 \"found equivalence class greater than alphabet len\",\n256             ));\n257         }\n258     }\n259     Ok((classes, 256))\n260 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}