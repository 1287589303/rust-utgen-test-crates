{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/sparse_set.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::util::primitives::StateID;\n#[derive(Clone)]\npub(crate) struct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl SparseSet {\n    #[inline]\n    pub(crate) fn new(capacity: usize) -> SparseSet {}\n    #[inline]\n    pub(crate) fn resize(&mut self, new_capacity: usize) {}\n    #[inline]\n    pub(crate) fn capacity(&self) -> usize {\n        self.dense.len()\n    }\n    #[inline]\n    pub(crate) fn len(&self) -> usize {\n        self.len\n    }\n    #[inline]\n    pub(crate) fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn insert(&mut self, id: StateID) -> bool {\n        if self.contains(id) {\n            return false;\n        }\n        let i = self.len();\n        assert!(\n            i < self.capacity(), \"{:?} exceeds capacity of {:?} when inserting {:?}\", i,\n            self.capacity(), id,\n        );\n        let index = StateID::new_unchecked(i);\n        self.dense[index] = id;\n        self.sparse[id] = index;\n        self.len += 1;\n        true\n    }\n    #[inline]\n    pub(crate) fn contains(&self, id: StateID) -> bool {\n        let index = self.sparse[id];\n        index.as_usize() < self.len() && self.dense[index] == id\n    }\n    #[inline]\n    pub(crate) fn clear(&mut self) {}\n    #[inline]\n    pub(crate) fn iter(&self) -> SparseSetIter<'_> {}\n    #[inline]\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Insert the state ID value into this set and return true if the given\n/// state ID was not previously in this set.\n///\n/// This operation is idempotent. If the given value is already in this\n/// set, then this is a no-op.\n///\n/// If more than `capacity` ids are inserted, then this panics.\n///\n/// This is marked as inline(always) since the compiler won't inline it\n/// otherwise, and it's a fairly hot piece of code in DFA determinization.\n172 pub(crate) fn insert(&mut self, id: StateID) -> bool {\n173     if self.contains(id) {\n174         return false;\n175     }\n176 \n177     let i = self.len();\n178     assert!(\n179         i < self.capacity(),\n180         \"{:?} exceeds capacity of {:?} when inserting {:?}\",\n181         i,\n182         self.capacity(),\n183         id,\n184     );\n185     // OK since i < self.capacity() and self.capacity() is guaranteed to\n186     // be <= StateID::LIMIT.\n187     let index = StateID::new_unchecked(i);\n188     self.dense[index] = id;\n189     self.sparse[id] = index;\n190     self.len += 1;\n191     true\n192 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}