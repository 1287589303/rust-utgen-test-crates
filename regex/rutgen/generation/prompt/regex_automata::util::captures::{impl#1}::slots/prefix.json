{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone)]\npub struct Captures {\n    /// The group info that these capture groups are coupled to. This is what\n    /// gives the \"convenience\" of the `Captures` API. Namely, it provides the\n    /// slot mapping and the name|-->index mapping for capture lookups by name.\n    group_info: GroupInfo,\n    /// The ID of the pattern that matched. Regex engines must set this to\n    /// None when no match occurs.\n    pid: Option<PatternID>,\n    /// The slot values, i.e., submatch offsets.\n    ///\n    /// In theory, the smallest sequence of slots would be something like\n    /// `max(groups(pattern) for pattern in regex) * 2`, but instead, we use\n    /// `sum(groups(pattern) for pattern in regex) * 2`. Why?\n    ///\n    /// Well, the former could be used in theory, because we don't generally\n    /// have any overlapping APIs that involve capturing groups. Therefore,\n    /// there's technically never any need to have slots set for multiple\n    /// patterns. However, this might change some day, in which case, we would\n    /// need to have slots available.\n    ///\n    /// The other reason is that during the execution of some regex engines,\n    /// there exists a point in time where multiple slots for different\n    /// patterns may be written to before knowing which pattern has matched.\n    /// Therefore, the regex engines themselves, in order to support multiple\n    /// patterns correctly, must have all slots available. If `Captures`\n    /// doesn't have all slots available, then regex engines can't write\n    /// directly into the caller provided `Captures` and must instead write\n    /// into some other storage and then copy the slots involved in the match\n    /// at the end of the search.\n    ///\n    /// So overall, at least as of the time of writing, it seems like the path\n    /// of least resistance is to just require allocating all possible slots\n    /// instead of the conceptual minimum. Another way to justify this is that\n    /// the most common case is a single pattern, in which case, there is no\n    /// inefficiency here since the 'max' and 'sum' calculations above are\n    /// equivalent in that case.\n    ///\n    /// N.B. The mapping from group index to slot is maintained by `GroupInfo`\n    /// and is considered an API guarantee. See `GroupInfo` for more details on\n    /// that mapping.\n    ///\n    /// N.B. `Option<NonMaxUsize>` has the same size as a `usize`.\n    slots: Vec<Option<NonMaxUsize>>,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\nimpl Captures {\n    #[inline]\n    pub fn clear(&mut self) {}\n    #[inline]\n    pub fn set_pattern(&mut self, pid: Option<PatternID>) {}\n    #[inline]\n    pub fn slots(&self) -> &[Option<NonMaxUsize>] {\n        &self.slots\n    }\n    #[inline]\n    pub fn slots_mut(&mut self) -> &mut [Option<NonMaxUsize>] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the underlying slots, where each slot stores a single offset.\n///\n/// Every matching capturing group generally corresponds to two slots: one\n/// slot for the starting position and another for the ending position.\n/// Typically, either both are present or neither are. (The weasel word\n/// \"typically\" is used here because it really depends on the regex engine\n/// implementation. Every sensible regex engine likely adheres to this\n/// invariant, and every regex engine in this crate is sensible.)\n///\n/// Generally speaking, callers should prefer to use higher level routines\n/// like [`Captures::get_match`] or [`Captures::get_group`].\n///\n/// An important note here is that a regex engine may not reset all of the\n/// slots to `None` values when no match occurs, or even when a match of\n/// a different pattern occurs. But this depends on how the regex engine\n/// implementation deals with slots.\n///\n/// # Example\n///\n/// This example shows how to get the underlying slots from a regex match.\n///\n/// ```\n/// use regex_automata::{\n///     nfa::thompson::pikevm::PikeVM,\n///     util::primitives::{PatternID, NonMaxUsize},\n/// };\n///\n/// let re = PikeVM::new_many(&[\n///     r\"[a-z]+\",\n///     r\"[0-9]+\",\n/// ])?;\n/// let (mut cache, mut caps) = (re.create_cache(), re.create_captures());\n///\n/// re.captures(&mut cache, \"123\", &mut caps);\n/// assert_eq!(Some(PatternID::must(1)), caps.pattern());\n/// // Note that the only guarantee we have here is that slots 2 and 3\n/// // are set to correct values. The contents of the first two slots are\n/// // unspecified since the 0th pattern did not match.\n/// let expected = &[\n///     None,\n///     None,\n///     NonMaxUsize::new(0),\n///     NonMaxUsize::new(3),\n/// ];\n/// assert_eq!(expected, caps.slots());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1187 pub fn slots(&self) -> &[Option<NonMaxUsize>] {\n1188     &self.slots\n1189 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}