{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &str, dst: &mut String) {\n        self.caps.interpolate_string_into(self.haystack, replacement, dst);\n    }\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Expands all instances of `$ref` in `replacement` to the corresponding\n/// capture group, and writes them to the `dst` buffer given. A `ref` can\n/// be a capture group index or a name. If `ref` doesn't refer to a capture\n/// group that participated in the match, then it is replaced with the\n/// empty string.\n///\n/// # Format\n///\n/// The format of the replacement string supports two different kinds of\n/// capture references: unbraced and braced.\n///\n/// For the unbraced format, the format supported is `$ref` where `name`\n/// can be any character in the class `[0-9A-Za-z_]`. `ref` is always\n/// the longest possible parse. So for example, `$1a` corresponds to the\n/// capture group named `1a` and not the capture group at index `1`. If\n/// `ref` matches `^[0-9]+$`, then it is treated as a capture group index\n/// itself and not a name.\n///\n/// For the braced format, the format supported is `${ref}` where `ref` can\n/// be any sequence of bytes except for `}`. If no closing brace occurs,\n/// then it is not considered a capture reference. As with the unbraced\n/// format, if `ref` matches `^[0-9]+$`, then it is treated as a capture\n/// group index and not a name.\n///\n/// The braced format is useful for exerting precise control over the name\n/// of the capture reference. For example, `${1}a` corresponds to the\n/// capture group reference `1` followed by the letter `a`, where as `$1a`\n/// (as mentioned above) corresponds to the capture group reference `1a`.\n/// The braced format is also useful for expressing capture group names\n/// that use characters not supported by the unbraced format. For example,\n/// `${foo[bar].baz}` refers to the capture group named `foo[bar].baz`.\n///\n/// If a capture group reference is found and it does not refer to a valid\n/// capture group, then it will be replaced with the empty string.\n///\n/// To write a literal `$`, use `$$`.\n///\n/// # Example\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(\n///     r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",\n/// ).unwrap();\n/// let hay = \"On 14-03-2010, I became a Tenneessee lamb.\";\n/// let caps = re.captures(hay).unwrap();\n///\n/// let mut dst = String::new();\n/// caps.expand(\"year=$year, month=$month, day=$day\", &mut dst);\n/// assert_eq!(dst, \"year=2010, month=03, day=14\");\n/// ```\n1863 pub fn expand(&self, replacement: &str, dst: &mut String) {\n1864     self.caps.interpolate_string_into(self.haystack, replacement, dst);\n1865 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}