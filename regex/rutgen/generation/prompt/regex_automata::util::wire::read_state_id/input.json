{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\npub(crate) fn read_state_id(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(StateID, usize), DeserializeError> {\n    let bytes: [u8; StateID::SIZE] = slice[..StateID::SIZE].try_into().unwrap();\n    let sid = StateID::from_ne_bytes(bytes)\n        .map_err(|err| DeserializeError::state_id_error(err, what))?;\n    Ok((sid, StateID::SIZE))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reads a state ID from the given slice. If the slice has insufficient\n/// length, then this panics. If the deserialized integer exceeds the state ID\n/// limit for the current target, then this returns an error.\n///\n/// Upon success, this also returns the number of bytes read.\n636 pub(crate) fn read_state_id(\n637     slice: &[u8],\n638     what: &'static str,\n639 ) -> Result<(StateID, usize), DeserializeError> {\n640     let bytes: [u8; StateID::SIZE] =\n641         slice[..StateID::SIZE].try_into().unwrap();\n642     let sid = StateID::from_ne_bytes(bytes)\n643         .map_err(|err| DeserializeError::state_id_error(err, what))?;\n644     Ok((sid, StateID::SIZE))\n645 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}