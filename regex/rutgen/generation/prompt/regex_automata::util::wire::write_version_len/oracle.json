{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\npub(crate) fn write_version_len() -> usize {\n    size_of::<u32>()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the number of bytes written by writing the version number.\n572 pub(crate) fn write_version_len() -> usize {\n573     size_of::<u32>()\n574 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}