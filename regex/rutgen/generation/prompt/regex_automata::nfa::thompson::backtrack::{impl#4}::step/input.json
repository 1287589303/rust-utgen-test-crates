{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/backtrack.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchError, Span},\n    },\n};\n#[derive(Clone, Debug)]\npub struct BoundedBacktracker {\n    config: Config,\n    nfa: NFA,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug)]\nstruct Visited {\n    /// The actual underlying bitset. Each element in the bitset corresponds\n    /// to a particular (StateID, offset) pair. States correspond to the rows\n    /// and the offsets correspond to the columns.\n    ///\n    /// If our underlying NFA has N states and the haystack we're searching\n    /// has M bytes, then we have N*(M+1) entries in our bitset table. The\n    /// M+1 occurs because our matches are delayed by one byte (to support\n    /// look-around), and so we need to handle the end position itself rather\n    /// than stopping just before the end. (If there is no end position, then\n    /// it's treated as \"end-of-input,\" which is matched by things like '$'.)\n    ///\n    /// Given BITS=N*(M+1), we wind up with div_ceil(BITS, sizeof(usize))\n    /// blocks.\n    ///\n    /// We use 'usize' to represent our blocks because it makes some of the\n    /// arithmetic in 'insert' a bit nicer. For example, if we used 'u32' for\n    /// our block, we'd either need to cast u32s to usizes or usizes to u32s.\n    bitset: Vec<usize>,\n    /// The stride represents one plus length of the haystack we're searching\n    /// (as described above). The stride must be initialized for each search.\n    stride: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct DenseTransitions {\n    /// A dense representation of this state's transitions on the heap. This\n    /// always has length 256.\n    pub transitions: Box<[StateID]>,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct SmallIndex(u32);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct SparseTransitions {\n    /// The sorted sequence of non-overlapping transitions.\n    pub transitions: Box<[Transition]>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// Stack used on the heap for doing backtracking instead of the\n    /// traditional recursive approach. We don't want recursion because then\n    /// we're likely to hit a stack overflow for bigger regexes.\n    stack: Vec<Frame>,\n    /// The set of (StateID, HaystackOffset) pairs that have been visited\n    /// by the backtracker within a single search. If such a pair has been\n    /// visited, then we avoid doing the work for that pair again. This is\n    /// what \"bounds\" the backtracking and prevents it from having worst case\n    /// exponential time.\n    visited: Visited,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Eq, PartialEq)]\npub enum State {\n    /// A state with a single transition that can only be taken if the current\n    /// input symbol is in a particular range of bytes.\n    ByteRange {\n        /// The transition from this state to the next.\n        trans: Transition,\n    },\n    /// A state with possibly many transitions represented in a sparse fashion.\n    /// Transitions are non-overlapping and ordered lexicographically by input\n    /// range.\n    ///\n    /// In practice, this is used for encoding UTF-8 automata. Its presence is\n    /// primarily an optimization that avoids many additional unconditional\n    /// epsilon transitions (via [`Union`](State::Union) states), and thus\n    /// decreases the overhead of traversing the NFA. This can improve both\n    /// matching time and DFA construction time.\n    Sparse(SparseTransitions),\n    /// A dense representation of a state with multiple transitions.\n    Dense(DenseTransitions),\n    /// A conditional epsilon transition satisfied via some sort of\n    /// look-around. Look-around is limited to anchor and word boundary\n    /// assertions.\n    ///\n    /// Look-around states are meant to be evaluated while performing epsilon\n    /// closure (computing the set of states reachable from a particular state\n    /// via only epsilon transitions). If the current position in the haystack\n    /// satisfies the look-around assertion, then you're permitted to follow\n    /// that epsilon transition.\n    Look {\n        /// The look-around assertion that must be satisfied before moving\n        /// to `next`.\n        look: Look,\n        /// The state to transition to if the look-around assertion is\n        /// satisfied.\n        next: StateID,\n    },\n    /// An alternation such that there exists an epsilon transition to all\n    /// states in `alternates`, where matches found via earlier transitions\n    /// are preferred over later transitions.\n    Union {\n        /// An ordered sequence of unconditional epsilon transitions to other\n        /// states. Transitions earlier in the sequence are preferred over\n        /// transitions later in the sequence.\n        alternates: Box<[StateID]>,\n    },\n    /// An alternation such that there exists precisely two unconditional\n    /// epsilon transitions, where matches found via `alt1` are preferred over\n    /// matches found via `alt2`.\n    ///\n    /// This state exists as a common special case of Union where there are\n    /// only two alternates. In this case, we don't need any allocations to\n    /// represent the state. This saves a bit of memory and also saves an\n    /// additional memory access when traversing the NFA.\n    BinaryUnion {\n        /// An unconditional epsilon transition to another NFA state. This\n        /// is preferred over `alt2`.\n        alt1: StateID,\n        /// An unconditional epsilon transition to another NFA state. Matches\n        /// reported via this transition should only be reported if no matches\n        /// were found by following `alt1`.\n        alt2: StateID,\n    },\n    /// An empty state that records a capture location.\n    ///\n    /// From the perspective of finite automata, this is precisely equivalent\n    /// to an unconditional epsilon transition, but serves the purpose of\n    /// instructing NFA simulations to record additional state when the finite\n    /// state machine passes through this epsilon transition.\n    ///\n    /// `slot` in this context refers to the specific capture group slot\n    /// offset that is being recorded. Each capturing group has two slots\n    /// corresponding to the start and end of the matching portion of that\n    /// group.\n    ///\n    /// The pattern ID and capture group index are also included in this state\n    /// in case they are useful. But mostly, all you'll need is `next` and\n    /// `slot`.\n    Capture {\n        /// The state to transition to, unconditionally.\n        next: StateID,\n        /// The pattern ID that this capture belongs to.\n        pattern_id: PatternID,\n        /// The capture group index that this capture belongs to. Capture group\n        /// indices are local to each pattern. For example, when capturing\n        /// groups are enabled, every pattern has a capture group at index\n        /// `0`.\n        group_index: SmallIndex,\n        /// The slot index for this capture. Every capturing group has two\n        /// slots: one for the start haystack offset and one for the end\n        /// haystack offset. Unlike capture group indices, slot indices are\n        /// global across all patterns in this NFA. That is, each slot belongs\n        /// to a single pattern, but there is only one slot at index `i`.\n        slot: SmallIndex,\n    },\n    /// A state that cannot be transitioned out of. This is useful for cases\n    /// where you want to prevent matching from occurring. For example, if your\n    /// regex parser permits empty character classes, then one could choose\n    /// a `Fail` state to represent them. (An empty character class can be\n    /// thought of as an empty set. Since nothing is in an empty set, they can\n    /// never match anything.)\n    Fail,\n    /// A match state. There is at least one such occurrence of this state for\n    /// each regex that can match that is in this NFA.\n    Match {\n        /// The matching pattern ID.\n        pattern_id: PatternID,\n    },\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\n#[derive(Clone, Debug)]\nenum Frame {\n    /// Look for a match starting at `sid` and the given position in the\n    /// haystack.\n    Step { sid: StateID, at: usize },\n    /// Reset the given `slot` to the given `offset` (which might be `None`).\n    /// This effectively gives a \"scope\" to capturing groups, such that an\n    /// offset for a particular group only gets returned if the match goes\n    /// through that capturing group. If backtracking ends up going down a\n    /// different branch that results in a different offset (or perhaps none at\n    /// all), then this \"restore capture\" frame will cause the offset to get\n    /// reset.\n    RestoreCapture { slot: SmallIndex, offset: Option<NonMaxUsize> },\n}\nimpl BoundedBacktracker {\n    #[inline]\n    pub fn try_search(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        caps: &mut Captures,\n    ) -> Result<(), MatchError> {}\n    #[inline]\n    pub fn try_search_slots(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Result<Option<PatternID>, MatchError> {}\n    #[inline(never)]\n    fn try_search_slots_imp(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Result<Option<HalfMatch>, MatchError> {}\n    fn search_imp(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Result<Option<HalfMatch>, MatchError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn backtrack(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        at: usize,\n        start_id: StateID,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<HalfMatch> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn step(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        mut sid: StateID,\n        mut at: usize,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<HalfMatch> {\n        loop {\n            if !cache.visited.insert(sid, at - input.start()) {\n                return None;\n            }\n            match *self.nfa.state(sid) {\n                State::ByteRange { ref trans } => {\n                    if at >= input.end() {\n                        return None;\n                    }\n                    if !trans.matches(input.haystack(), at) {\n                        return None;\n                    }\n                    sid = trans.next;\n                    at += 1;\n                }\n                State::Sparse(ref sparse) => {\n                    if at >= input.end() {\n                        return None;\n                    }\n                    sid = sparse.matches(input.haystack(), at)?;\n                    at += 1;\n                }\n                State::Dense(ref dense) => {\n                    if at >= input.end() {\n                        return None;\n                    }\n                    sid = dense.matches(input.haystack(), at)?;\n                    at += 1;\n                }\n                State::Look { look, next } => {\n                    if !self\n                        .nfa\n                        .look_matcher()\n                        .matches_inline(look, input.haystack(), at)\n                    {\n                        return None;\n                    }\n                    sid = next;\n                }\n                State::Union { ref alternates } => {\n                    sid = match alternates.get(0) {\n                        None => return None,\n                        Some(&sid) => sid,\n                    };\n                    cache\n                        .stack\n                        .extend(\n                            alternates[1..]\n                                .iter()\n                                .copied()\n                                .rev()\n                                .map(|sid| Frame::Step { sid, at }),\n                        );\n                }\n                State::BinaryUnion { alt1, alt2 } => {\n                    sid = alt1;\n                    cache.stack.push(Frame::Step { sid: alt2, at });\n                }\n                State::Capture { next, slot, .. } => {\n                    if slot.as_usize() < slots.len() {\n                        cache\n                            .stack\n                            .push(Frame::RestoreCapture {\n                                slot,\n                                offset: slots[slot],\n                            });\n                        slots[slot] = NonMaxUsize::new(at);\n                    }\n                    sid = next;\n                }\n                State::Fail => return None,\n                State::Match { pattern_id } => {\n                    return Some(HalfMatch::new(pattern_id, at));\n                }\n            }\n        }\n    }\n}\nimpl NFA {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<NFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<NFA, BuildError> {}\n    pub fn always_match() -> NFA {}\n    pub fn never_match() -> NFA {}\n    #[cfg(feature = \"syntax\")]\n    pub fn config() -> Config {}\n    #[cfg(feature = \"syntax\")]\n    pub fn compiler() -> Compiler {}\n    pub fn patterns(&self) -> PatternIter<'_> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn start_anchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_unanchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_pattern(&self, pid: PatternID) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn byte_class_set(&self) -> &ByteClassSet {}\n    #[inline]\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    #[inline]\n    pub fn state(&self, id: StateID) -> &State {\n        &self.states()[id]\n    }\n    #[inline]\n    pub fn states(&self) -> &[State] {}\n    #[inline]\n    pub fn group_info(&self) -> &GroupInfo {}\n    #[inline]\n    pub fn has_capture(&self) -> bool {}\n    #[inline]\n    pub fn has_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {}\n    #[inline]\n    pub fn is_reverse(&self) -> bool {}\n    #[inline]\n    pub fn is_always_start_anchored(&self) -> bool {}\n    #[inline]\n    pub fn look_matcher(&self) -> &LookMatcher {\n        &self.0.look_matcher\n    }\n    #[inline]\n    pub fn look_set_any(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl Visited {\n    const BLOCK_SIZE: usize = 8 * core::mem::size_of::<usize>();\n    fn new(re: &BoundedBacktracker) -> Visited {}\n    fn insert(&mut self, sid: StateID, at: usize) -> bool {\n        let table_index = sid.as_usize() * self.stride + at;\n        let block_index = table_index / Visited::BLOCK_SIZE;\n        let bit = table_index % Visited::BLOCK_SIZE;\n        let block_with_bit = 1 << bit;\n        if self.bitset[block_index] & block_with_bit != 0 {\n            return false;\n        }\n        self.bitset[block_index] |= block_with_bit;\n        true\n    }\n    fn reset(&mut self, _: &BoundedBacktracker) {}\n    fn setup_search(\n        &mut self,\n        re: &BoundedBacktracker,\n        input: &Input<'_>,\n    ) -> Result<(), MatchError> {}\n    fn memory_usage(&self) -> usize {}\n}\nimpl DenseTransitions {\n    #[inline]\n    pub fn matches(&self, haystack: &[u8], at: usize) -> Option<StateID> {\n        haystack.get(at).and_then(|&b| self.matches_byte(b))\n    }\n    #[inline]\n    pub(crate) fn matches_unit(&self, unit: alphabet::Unit) -> Option<StateID> {}\n    #[inline]\n    pub fn matches_byte(&self, byte: u8) -> Option<StateID> {}\n    pub(crate) fn iter(&self) -> impl Iterator<Item = Transition> + '_ {}\n}\nimpl HalfMatch {\n    #[inline]\n    pub fn new(pattern: PatternID, offset: usize) -> HalfMatch {\n        HalfMatch { pattern, offset }\n    }\n    #[inline]\n    pub fn must(pattern: usize, offset: usize) -> HalfMatch {}\n    #[inline]\n    pub fn pattern(&self) -> PatternID {}\n    #[inline]\n    pub fn offset(&self) -> usize {}\n}\nimpl LookMatcher {\n    pub fn new() -> LookMatcher {}\n    pub fn set_line_terminator(&mut self, byte: u8) -> &mut LookMatcher {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    #[inline]\n    pub fn matches(&self, look: Look, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_inline(&self, look: Look, haystack: &[u8], at: usize) -> bool {\n        match look {\n            Look::Start => self.is_start(haystack, at),\n            Look::End => self.is_end(haystack, at),\n            Look::StartLF => self.is_start_lf(haystack, at),\n            Look::EndLF => self.is_end_lf(haystack, at),\n            Look::StartCRLF => self.is_start_crlf(haystack, at),\n            Look::EndCRLF => self.is_end_crlf(haystack, at),\n            Look::WordAscii => self.is_word_ascii(haystack, at),\n            Look::WordAsciiNegate => self.is_word_ascii_negate(haystack, at),\n            Look::WordUnicode => self.is_word_unicode(haystack, at).unwrap(),\n            Look::WordUnicodeNegate => self.is_word_unicode_negate(haystack, at).unwrap(),\n            Look::WordStartAscii => self.is_word_start_ascii(haystack, at),\n            Look::WordEndAscii => self.is_word_end_ascii(haystack, at),\n            Look::WordStartUnicode => self.is_word_start_unicode(haystack, at).unwrap(),\n            Look::WordEndUnicode => self.is_word_end_unicode(haystack, at).unwrap(),\n            Look::WordStartHalfAscii => self.is_word_start_half_ascii(haystack, at),\n            Look::WordEndHalfAscii => self.is_word_end_half_ascii(haystack, at),\n            Look::WordStartHalfUnicode => {\n                self.is_word_start_half_unicode(haystack, at).unwrap()\n            }\n            Look::WordEndHalfUnicode => {\n                self.is_word_end_half_unicode(haystack, at).unwrap()\n            }\n        }\n    }\n    #[inline]\n    pub fn matches_set(&self, set: LookSet, haystack: &[u8], at: usize) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn matches_set_inline(\n        &self,\n        set: LookSet,\n        haystack: &[u8],\n        at: usize,\n    ) -> bool {}\n    #[cfg(feature = \"alloc\")]\n    pub(crate) fn add_to_byteset(\n        &self,\n        look: Look,\n        set: &mut crate::util::alphabet::ByteClassSet,\n    ) {}\n    #[inline]\n    pub fn is_start(&self, _haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_lf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_start_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_end_crlf(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_ascii_negate(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_unicode_negate(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_start_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_end_half_ascii(&self, haystack: &[u8], at: usize) -> bool {}\n    #[inline]\n    pub fn is_word_start_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n    #[inline]\n    pub fn is_word_end_half_unicode(\n        &self,\n        haystack: &[u8],\n        at: usize,\n    ) -> Result<bool, UnicodeWordBoundaryError> {}\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {\n        self.haystack\n    }\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.get_span().start\n    }\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.get_span().end\n    }\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\nimpl Transition {\n    pub fn matches(&self, haystack: &[u8], at: usize) -> bool {\n        haystack.get(at).map_or(false, |&b| self.matches_byte(b))\n    }\n    pub fn matches_unit(&self, unit: alphabet::Unit) -> bool {}\n    pub fn matches_byte(&self, byte: u8) -> bool {}\n}\nimpl NonMaxUsize {\n    #[inline]\n    pub fn new(value: usize) -> Option<NonMaxUsize> {\n        NonZeroUsize::new(value.wrapping_add(1)).map(NonMaxUsize)\n    }\n    #[inline]\n    pub fn get(self) -> usize {}\n}\nimpl SmallIndex {\n    #[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n    pub const MAX: SmallIndex = SmallIndex::new_unchecked(core::i32::MAX as usize - 1);\n    #[cfg(target_pointer_width = \"16\")]\n    pub const MAX: SmallIndex = SmallIndex::new_unchecked(core::isize::MAX - 1);\n    pub const LIMIT: usize = SmallIndex::MAX.as_usize() + 1;\n    pub const ZERO: SmallIndex = SmallIndex::new_unchecked(0);\n    pub const SIZE: usize = core::mem::size_of::<SmallIndex>();\n    #[inline]\n    pub fn new(index: usize) -> Result<SmallIndex, SmallIndexError> {}\n    #[inline]\n    pub const fn new_unchecked(index: usize) -> SmallIndex {}\n    #[inline]\n    pub fn must(index: usize) -> SmallIndex {}\n    #[inline]\n    pub const fn as_usize(&self) -> usize {\n        self.0 as usize\n    }\n    #[inline]\n    pub const fn as_u64(&self) -> u64 {}\n    #[inline]\n    pub const fn as_u32(&self) -> u32 {}\n    #[inline]\n    pub const fn as_i32(&self) -> i32 {}\n    #[inline]\n    pub fn one_more(&self) -> usize {}\n    #[inline]\n    pub fn from_ne_bytes(bytes: [u8; 4]) -> Result<SmallIndex, SmallIndexError> {}\n    #[inline]\n    pub fn from_ne_bytes_unchecked(bytes: [u8; 4]) -> SmallIndex {}\n    #[inline]\n    pub fn to_ne_bytes(&self) -> [u8; 4] {}\n}\nimpl SparseTransitions {\n    #[inline]\n    pub fn matches(&self, haystack: &[u8], at: usize) -> Option<StateID> {\n        haystack.get(at).and_then(|&b| self.matches_byte(b))\n    }\n    #[inline]\n    pub(crate) fn matches_unit(&self, unit: alphabet::Unit) -> Option<StateID> {}\n    #[inline]\n    pub fn matches_byte(&self, byte: u8) -> Option<StateID> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Execute a \"step\" in the backtracing algorithm.\n///\n/// A \"step\" is somewhat of a misnomer, because this routine keeps going\n/// until it either runs out of things to try or fins a match. In the\n/// former case, it may have pushed some things on to the backtracking\n/// stack, in which case, those will be tried next as part of the\n/// 'backtrack' routine above.\n1461 fn step(\n1462     &self,\n1463     cache: &mut Cache,\n1464     input: &Input<'_>,\n1465     mut sid: StateID,\n1466     mut at: usize,\n1467     slots: &mut [Option<NonMaxUsize>],\n1468 ) -> Option<HalfMatch> {\n1469     loop {\n1470         if !cache.visited.insert(sid, at - input.start()) {\n1471             return None;\n1472         }\n1473         match *self.nfa.state(sid) {\n1474             State::ByteRange { ref trans } => {\n1475                 // Why do we need this? Unlike other regex engines in this\n1476                 // crate, the backtracker can steam roll ahead in the\n1477                 // haystack outside of the main loop over the bytes in the\n1478                 // haystack. While 'trans.matches()' below handles the case\n1479                 // of 'at' being out of bounds of 'input.haystack()', we\n1480                 // also need to handle the case of 'at' going out of bounds\n1481                 // of the span the caller asked to search.\n1482                 //\n1483                 // We should perhaps make the 'trans.matches()' API accept\n1484                 // an '&Input' instead of a '&[u8]'. Or at least, add a new\n1485                 // API that does it.\n1486                 if at >= input.end() {\n1487                     return None;\n1488                 }\n1489                 if !trans.matches(input.haystack(), at) {\n1490                     return None;\n1491                 }\n1492                 sid = trans.next;\n1493                 at += 1;\n1494             }\n1495             State::Sparse(ref sparse) => {\n1496                 if at >= input.end() {\n1497                     return None;\n1498                 }\n1499                 sid = sparse.matches(input.haystack(), at)?;\n1500                 at += 1;\n1501             }\n1502             State::Dense(ref dense) => {\n1503                 if at >= input.end() {\n1504                     return None;\n1505                 }\n1506                 sid = dense.matches(input.haystack(), at)?;\n1507                 at += 1;\n1508             }\n1509             State::Look { look, next } => {\n1510                 // OK because we don't permit building a searcher with a\n1511                 // Unicode word boundary if the requisite Unicode data is\n1512                 // unavailable.\n1513                 if !self.nfa.look_matcher().matches_inline(\n1514                     look,\n1515                     input.haystack(),\n1516                     at,\n1517                 ) {\n1518                     return None;\n1519                 }\n1520                 sid = next;\n1521             }\n1522             State::Union { ref alternates } => {\n1523                 sid = match alternates.get(0) {\n1524                     None => return None,\n1525                     Some(&sid) => sid,\n1526                 };\n1527                 cache.stack.extend(\n1528                     alternates[1..]\n1529                         .iter()\n1530                         .copied()\n1531                         .rev()\n1532                         .map(|sid| Frame::Step { sid, at }),\n1533                 );\n1534             }\n1535             State::BinaryUnion { alt1, alt2 } => {\n1536                 sid = alt1;\n1537                 cache.stack.push(Frame::Step { sid: alt2, at });\n1538             }\n1539             State::Capture { next, slot, .. } => {\n1540                 if slot.as_usize() < slots.len() {\n1541                     cache.stack.push(Frame::RestoreCapture {\n1542                         slot,\n1543                         offset: slots[slot],\n1544                     });\n1545                     slots[slot] = NonMaxUsize::new(at);\n1546                 }\n1547                 sid = next;\n1548             }\n1549             State::Fail => return None,\n1550             State::Match { pattern_id } => {\n1551                 return Some(HalfMatch::new(pattern_id, at));\n1552             }\n1553         }\n1554     }\n1555 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}