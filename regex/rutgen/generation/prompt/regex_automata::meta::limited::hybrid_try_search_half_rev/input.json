{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/limited.rs\n// crate name is regex_automata\nuse crate::{\n    meta::error::{RetryError, RetryQuadraticError},\n    HalfMatch, Input, MatchError,\n};\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\npub struct LazyStateID(u32);\n#[derive(Clone, Debug)]\npub struct DFA {\n    config: Config,\n    nfa: thompson::NFA,\n    stride2: usize,\n    start_map: StartByteMap,\n    classes: ByteClasses,\n    quitset: ByteSet,\n    cache_capacity: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Debug)]\npub(crate) struct RetryQuadraticError(());\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug)]\npub struct CacheError(());\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// The transition table.\n    ///\n    /// Given a `current` LazyStateID and an `input` byte, the next state can\n    /// be computed via `trans[untagged(current) + equiv_class(input)]`. Notice\n    /// that no multiplication is used. That's because state identifiers are\n    /// \"premultiplied.\"\n    ///\n    /// Note that the next state may be the \"unknown\" state. In this case, the\n    /// next state is not known and determinization for `current` on `input`\n    /// must be performed.\n    trans: Vec<LazyStateID>,\n    /// The starting states for this DFA.\n    ///\n    /// These are computed lazily. Initially, these are all set to \"unknown\"\n    /// lazy state IDs.\n    ///\n    /// When 'starts_for_each_pattern' is disabled (the default), then the size\n    /// of this is constrained to the possible starting configurations based\n    /// on the search parameters. (At time of writing, that's 4.) However,\n    /// when starting states for each pattern is enabled, then there are N\n    /// additional groups of starting states, where each group reflects the\n    /// different possible configurations and N is the number of patterns.\n    starts: Vec<LazyStateID>,\n    /// A sequence of NFA/DFA powerset states that have been computed for this\n    /// lazy DFA. This sequence is indexable by untagged LazyStateIDs. (Every\n    /// tagged LazyStateID can be used to index this sequence by converting it\n    /// to its untagged form.)\n    states: Vec<State>,\n    /// A map from states to their corresponding IDs. This map may be accessed\n    /// via the raw byte representation of a state, which means that a `State`\n    /// does not need to be allocated to determine whether it already exists\n    /// in this map. Indeed, the existence of such a state is what determines\n    /// whether we allocate a new `State` or not.\n    ///\n    /// The higher level idea here is that we do just enough determinization\n    /// for a state to check whether we've already computed it. If we have,\n    /// then we can save a little (albeit not much) work. The real savings is\n    /// in memory usage. If we never checked for trivially duplicate states,\n    /// then our memory usage would explode to unreasonable levels.\n    states_to_id: StateMap,\n    /// Sparse sets used to track which NFA states have been visited during\n    /// various traversals.\n    sparses: SparseSets,\n    /// Scratch space for traversing the NFA graph. (We use space on the heap\n    /// instead of the call stack.)\n    stack: Vec<NFAStateID>,\n    /// Scratch space for building a NFA/DFA powerset state. This is used to\n    /// help amortize allocation since not every powerset state generated is\n    /// added to the cache. In particular, if it already exists in the cache,\n    /// then there is no need to allocate a new `State` for it.\n    scratch_state_builder: StateBuilderEmpty,\n    /// A simple abstraction for handling the saving of at most a single state\n    /// across a cache clearing. This is required for correctness. Namely, if\n    /// adding a new state after clearing the cache fails, then the caller\n    /// must retain the ability to continue using the state ID given. The\n    /// state corresponding to the state ID is what we preserve across cache\n    /// clearings.\n    state_saver: StateSaver,\n    /// The memory usage, in bytes, used by 'states' and 'states_to_id'. We\n    /// track this as new states are added since states use a variable amount\n    /// of heap. Tracking this as we add states makes it possible to compute\n    /// the total amount of memory used by the determinizer in constant time.\n    memory_usage_state: usize,\n    /// The number of times the cache has been cleared. When a minimum cache\n    /// clear count is set, then the cache will return an error instead of\n    /// clearing the cache if the count has been exceeded.\n    clear_count: usize,\n    /// The total number of bytes searched since the last time this cache was\n    /// cleared, not including the current search.\n    ///\n    /// This can be added to the length of the current search to get the true\n    /// total number of bytes searched.\n    ///\n    /// This is generally only non-zero when the\n    /// `Cache::search_{start,update,finish}` APIs are used to track search\n    /// progress.\n    bytes_searched: usize,\n    /// The progress of the current search.\n    ///\n    /// This is only non-`None` when callers utlize the `Cache::search_start`,\n    /// `Cache::search_update` and `Cache::search_finish` APIs.\n    ///\n    /// The purpose of recording search progress is to be able to make a\n    /// determination about the efficiency of the cache. Namely, by keeping\n    /// track of the\n    progress: Option<SearchProgress>,\n}\n#[derive(Debug)]\npub(crate) enum RetryError {\n    Quadratic(RetryQuadraticError),\n    Fail(RetryFailError),\n}\nimpl LazyStateID {\n    #[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n    const MAX_BIT: usize = 31;\n    #[cfg(target_pointer_width = \"16\")]\n    const MAX_BIT: usize = 15;\n    const MASK_UNKNOWN: usize = 1 << (LazyStateID::MAX_BIT);\n    const MASK_DEAD: usize = 1 << (LazyStateID::MAX_BIT - 1);\n    const MASK_QUIT: usize = 1 << (LazyStateID::MAX_BIT - 2);\n    const MASK_START: usize = 1 << (LazyStateID::MAX_BIT - 3);\n    const MASK_MATCH: usize = 1 << (LazyStateID::MAX_BIT - 4);\n    const MAX: usize = LazyStateID::MASK_MATCH - 1;\n    #[inline]\n    pub(crate) fn new(id: usize) -> Result<LazyStateID, LazyStateIDError> {}\n    #[inline]\n    const fn new_unchecked(id: usize) -> LazyStateID {}\n    #[inline]\n    pub(crate) fn as_usize_untagged(&self) -> usize {}\n    #[inline]\n    pub(crate) const fn as_usize_unchecked(&self) -> usize {}\n    #[inline]\n    pub(crate) const fn to_unknown(&self) -> LazyStateID {}\n    #[inline]\n    pub(crate) const fn to_dead(&self) -> LazyStateID {}\n    #[inline]\n    pub(crate) const fn to_quit(&self) -> LazyStateID {}\n    #[inline]\n    pub(crate) const fn to_start(&self) -> LazyStateID {}\n    #[inline]\n    pub(crate) const fn to_match(&self) -> LazyStateID {}\n    #[inline]\n    pub const fn is_tagged(&self) -> bool {\n        self.as_usize_unchecked() > LazyStateID::MAX\n    }\n    #[inline]\n    pub const fn is_unknown(&self) -> bool {}\n    #[inline]\n    pub const fn is_dead(&self) -> bool {\n        self.as_usize_unchecked() & LazyStateID::MASK_DEAD > 0\n    }\n    #[inline]\n    pub const fn is_quit(&self) -> bool {\n        self.as_usize_unchecked() & LazyStateID::MASK_QUIT > 0\n    }\n    #[inline]\n    pub const fn is_start(&self) -> bool {}\n    #[inline]\n    pub const fn is_match(&self) -> bool {\n        self.as_usize_unchecked() & LazyStateID::MASK_MATCH > 0\n    }\n}\nimpl DFA {\n    #[inline]\n    pub fn next_state(\n        &self,\n        cache: &mut Cache,\n        current: LazyStateID,\n        input: u8,\n    ) -> Result<LazyStateID, CacheError> {\n        let class = usize::from(self.classes.get(input));\n        let offset = current.as_usize_untagged() + class;\n        let sid = cache.trans[offset];\n        if !sid.is_unknown() {\n            return Ok(sid);\n        }\n        let unit = alphabet::Unit::u8(input);\n        Lazy::new(self, cache).cache_next_state(current, unit)\n    }\n    #[inline]\n    pub fn next_state_untagged(\n        &self,\n        cache: &Cache,\n        current: LazyStateID,\n        input: u8,\n    ) -> LazyStateID {}\n    #[inline]\n    pub unsafe fn next_state_untagged_unchecked(\n        &self,\n        cache: &Cache,\n        current: LazyStateID,\n        input: u8,\n    ) -> LazyStateID {}\n    #[inline]\n    pub fn next_eoi_state(\n        &self,\n        cache: &mut Cache,\n        current: LazyStateID,\n    ) -> Result<LazyStateID, CacheError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn start_state(\n        &self,\n        cache: &mut Cache,\n        config: &start::Config,\n    ) -> Result<LazyStateID, StartError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn start_state_forward(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Result<LazyStateID, MatchError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn start_state_reverse(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Result<LazyStateID, MatchError> {\n        let config = start::Config::from_input_reverse(input);\n        self.start_state(cache, &config)\n            .map_err(|err| match err {\n                StartError::Cache { .. } => MatchError::gave_up(input.end()),\n                StartError::Quit { byte } => {\n                    let offset = input.end();\n                    MatchError::quit(byte, offset)\n                }\n                StartError::UnsupportedAnchored { mode } => {\n                    MatchError::unsupported_anchored(mode)\n                }\n            })\n    }\n    #[inline]\n    pub fn match_len(&self, cache: &Cache, id: LazyStateID) -> usize {}\n    #[inline]\n    pub fn match_pattern(\n        &self,\n        cache: &Cache,\n        id: LazyStateID,\n        match_index: usize,\n    ) -> PatternID {\n        if self.pattern_len() == 1 {\n            return PatternID::ZERO;\n        }\n        LazyRef::new(self, cache).get_cached_state(id).match_pattern(match_index)\n    }\n}\nimpl HalfMatch {\n    #[inline]\n    pub fn new(pattern: PatternID, offset: usize) -> HalfMatch {\n        HalfMatch { pattern, offset }\n    }\n    #[inline]\n    pub fn must(pattern: usize, offset: usize) -> HalfMatch {}\n    #[inline]\n    pub fn pattern(&self) -> PatternID {}\n    #[inline]\n    pub fn offset(&self) -> usize {}\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {\n        self.haystack\n    }\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.get_span().start\n    }\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.get_span().end\n    }\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\nimpl RetryQuadraticError {\n    pub(crate) fn new() -> RetryQuadraticError {\n        RetryQuadraticError(())\n    }\n}\nimpl MatchError {\n    pub fn new(kind: MatchErrorKind) -> MatchError {}\n    pub fn kind(&self) -> &MatchErrorKind {}\n    pub fn quit(byte: u8, offset: usize) -> MatchError {\n        MatchError::new(MatchErrorKind::Quit {\n            byte,\n            offset,\n        })\n    }\n    pub fn gave_up(offset: usize) -> MatchError {}\n    pub fn haystack_too_long(len: usize) -> MatchError {}\n    pub fn unsupported_anchored(mode: Anchored) -> MatchError {}\n}\n#[cfg(feature = \"hybrid\")]\npub(crate) fn hybrid_try_search_half_rev(\n    dfa: &crate::hybrid::dfa::DFA,\n    cache: &mut crate::hybrid::dfa::Cache,\n    input: &Input<'_>,\n    min_start: usize,\n) -> Result<Option<HalfMatch>, RetryError> {\n    let mut mat = None;\n    let mut sid = dfa.start_state_reverse(cache, input)?;\n    if input.start() == input.end() {\n        hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n        return Ok(mat);\n    }\n    let mut at = input.end() - 1;\n    loop {\n        sid = dfa\n            .next_state(cache, sid, input.haystack()[at])\n            .map_err(|_| MatchError::gave_up(at))?;\n        if sid.is_tagged() {\n            if sid.is_match() {\n                let pattern = dfa.match_pattern(cache, sid, 0);\n                mat = Some(HalfMatch::new(pattern, at + 1));\n            } else if sid.is_dead() {\n                return Ok(mat);\n            } else if sid.is_quit() {\n                return Err(MatchError::quit(input.haystack()[at], at).into());\n            }\n        }\n        if at == input.start() {\n            break;\n        }\n        at -= 1;\n        if at < min_start {\n            trace!(\n                \"reached position {} which is before the previous literal \\\n\t\t\t\t match, quitting to avoid quadratic behavior\",\n                at,\n            );\n            return Err(RetryError::Quadratic(RetryQuadraticError::new()));\n        }\n    }\n    let was_dead = sid.is_dead();\n    hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n    if at == input.start() && mat.map_or(false, |m| m.offset() > input.start())\n        && !was_dead\n    {\n        trace!(\n            \"reached beginning of search at offset {} without hitting \\\n             a dead state, quitting to avoid potential false positive match\",\n            at,\n        );\n        return Err(RetryError::Quadratic(RetryQuadraticError::new()));\n    }\n    Ok(mat)\n}\n#[cfg(feature = \"hybrid\")]\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn hybrid_eoi_rev(\n    dfa: &crate::hybrid::dfa::DFA,\n    cache: &mut crate::hybrid::dfa::Cache,\n    input: &Input<'_>,\n    sid: &mut crate::hybrid::LazyStateID,\n    mat: &mut Option<HalfMatch>,\n) -> Result<(), MatchError> {\n    let sp = input.get_span();\n    if sp.start > 0 {\n        let byte = input.haystack()[sp.start - 1];\n        *sid = dfa\n            .next_state(cache, *sid, byte)\n            .map_err(|_| MatchError::gave_up(sp.start))?;\n        if sid.is_match() {\n            let pattern = dfa.match_pattern(cache, *sid, 0);\n            *mat = Some(HalfMatch::new(pattern, sp.start));\n        } else if sid.is_quit() {\n            return Err(MatchError::quit(byte, sp.start - 1));\n        }\n    } else {\n        *sid = dfa\n            .next_eoi_state(cache, *sid)\n            .map_err(|_| MatchError::gave_up(sp.start))?;\n        if sid.is_match() {\n            let pattern = dfa.match_pattern(cache, *sid, 0);\n            *mat = Some(HalfMatch::new(pattern, 0));\n        }\n        debug_assert!(! sid.is_quit());\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n127 pub(crate) fn hybrid_try_search_half_rev(\n128     dfa: &crate::hybrid::dfa::DFA,\n129     cache: &mut crate::hybrid::dfa::Cache,\n130     input: &Input<'_>,\n131     min_start: usize,\n132 ) -> Result<Option<HalfMatch>, RetryError> {\n133     let mut mat = None;\n134     let mut sid = dfa.start_state_reverse(cache, input)?;\n135     if input.start() == input.end() {\n136         hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n137         return Ok(mat);\n138     }\n139     let mut at = input.end() - 1;\n140     loop {\n141         sid = dfa\n142             .next_state(cache, sid, input.haystack()[at])\n143             .map_err(|_| MatchError::gave_up(at))?;\n144         if sid.is_tagged() {\n145             if sid.is_match() {\n146                 let pattern = dfa.match_pattern(cache, sid, 0);\n147                 // Since reverse searches report the beginning of a\n148                 // match and the beginning is inclusive (not exclusive\n149                 // like the end of a match), we add 1 to make it\n150                 // inclusive.\n151                 mat = Some(HalfMatch::new(pattern, at + 1));\n152             } else if sid.is_dead() {\n153                 return Ok(mat);\n154             } else if sid.is_quit() {\n155                 return Err(MatchError::quit(input.haystack()[at], at).into());\n156             }\n157         }\n158         if at == input.start() {\n159             break;\n160         }\n161         at -= 1;\n162         if at < min_start {\n163             trace!(\n164                 \"reached position {} which is before the previous literal \\\n165 \t\t\t\t match, quitting to avoid quadratic behavior\",\n166                 at,\n167             );\n168             return Err(RetryError::Quadratic(RetryQuadraticError::new()));\n169         }\n170     }\n171     let was_dead = sid.is_dead();\n172     hybrid_eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n173     // See the comments in the full DFA routine above for why we need this.\n174     if at == input.start()\n175         && mat.map_or(false, |m| m.offset() > input.start())\n176         && !was_dead\n177     {\n178         trace!(\n179             \"reached beginning of search at offset {} without hitting \\\n180              a dead state, quitting to avoid potential false positive match\",\n181             at,\n182         );\n183         return Err(RetryError::Quadratic(RetryQuadraticError::new()));\n184     }\n185     Ok(mat)\n186 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}