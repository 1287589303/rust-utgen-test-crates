{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn is_word_byte(b: u8) -> bool {\n    const fn mkwordset() -> [bool; 256] {\n        let mut set = [false; 256];\n        set[b'_' as usize] = true;\n        let mut byte = b'0';\n        while byte <= b'9' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'A';\n        while byte <= b'Z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'a';\n        while byte <= b'z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        set\n    }\n    const WORD: [bool; 256] = mkwordset();\n    WORD[b as usize]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given byte is considered a word character.\n/// This only applies to ASCII.\n///\n/// This was copied from regex-syntax so that we can use it to determine the\n/// starting DFA state while searching without depending on regex-syntax. The\n/// definition is never going to change, so there's no maintenance/bit-rot\n/// hazard here.\n16 pub(crate) fn is_word_byte(b: u8) -> bool {\n17     const fn mkwordset() -> [bool; 256] {\n18         // FIXME: Use as_usize() once const functions in traits are stable.\n19         let mut set = [false; 256];\n20         set[b'_' as usize] = true;\n21 \n22         let mut byte = b'0';\n23         while byte <= b'9' {\n24             set[byte as usize] = true;\n25             byte += 1;\n26         }\n27         byte = b'A';\n28         while byte <= b'Z' {\n29             set[byte as usize] = true;\n30             byte += 1;\n31         }\n32         byte = b'a';\n33         while byte <= b'z' {\n34             set[byte as usize] = true;\n35             byte += 1;\n36         }\n37         set\n38     }\n39     const WORD: [bool; 256] = mkwordset();\n40     WORD[b as usize]\n41 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}