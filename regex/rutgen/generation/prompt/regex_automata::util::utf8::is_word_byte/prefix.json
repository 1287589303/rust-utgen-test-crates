{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn is_word_byte(b: u8) -> bool {\n    const fn mkwordset() -> [bool; 256] {\n        let mut set = [false; 256];\n        set[b'_' as usize] = true;\n        let mut byte = b'0';\n        while byte <= b'9' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'A';\n        while byte <= b'Z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'a';\n        while byte <= b'z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        set\n    }\n    const WORD: [bool; 256] = mkwordset();\n    WORD[b as usize]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given byte is considered a word character.\n/// This only applies to ASCII.\n///\n/// This was copied from regex-syntax so that we can use it to determine the\n/// starting DFA state while searching without depending on regex-syntax. The\n/// definition is never going to change, so there's no maintenance/bit-rot\n/// hazard here.\n16 pub(crate) fn is_word_byte(b: u8) -> bool {\n17     const fn mkwordset() -> [bool; 256] {\n18         // FIXME: Use as_usize() once const functions in traits are stable.\n19         let mut set = [false; 256];\n20         set[b'_' as usize] = true;\n21 \n22         let mut byte = b'0';\n23         while byte <= b'9' {\n24             set[byte as usize] = true;\n25             byte += 1;\n26         }\n27         byte = b'A';\n28         while byte <= b'Z' {\n29             set[byte as usize] = true;\n30             byte += 1;\n31         }\n32         byte = b'a';\n33         while byte <= b'z' {\n34             set[byte as usize] = true;\n35             byte += 1;\n36         }\n37         set\n38     }\n39     const WORD: [bool; 256] = mkwordset();\n40     WORD[b as usize]\n41 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}