{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/utf8.rs\n// crate name is regex_automata\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn is_word_byte(b: u8) -> bool {\n    const fn mkwordset() -> [bool; 256] {\n        let mut set = [false; 256];\n        set[b'_' as usize] = true;\n        let mut byte = b'0';\n        while byte <= b'9' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'A';\n        while byte <= b'Z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        byte = b'a';\n        while byte <= b'z' {\n            set[byte as usize] = true;\n            byte += 1;\n        }\n        set\n    }\n    const WORD: [bool; 256] = mkwordset();\n    WORD[b as usize]\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given byte is considered a word character.\n/// This only applies to ASCII.\n///\n/// This was copied from regex-syntax so that we can use it to determine the\n/// starting DFA state while searching without depending on regex-syntax. The\n/// definition is never going to change, so there's no maintenance/bit-rot\n/// hazard here.\n16 pub(crate) fn is_word_byte(b: u8) -> bool {\n17     const fn mkwordset() -> [bool; 256] {\n18         // FIXME: Use as_usize() once const functions in traits are stable.\n19         let mut set = [false; 256];\n20         set[b'_' as usize] = true;\n21 \n22         let mut byte = b'0';\n23         while byte <= b'9' {\n24             set[byte as usize] = true;\n25             byte += 1;\n26         }\n27         byte = b'A';\n28         while byte <= b'Z' {\n29             set[byte as usize] = true;\n30             byte += 1;\n31         }\n32         byte = b'a';\n33         while byte <= b'z' {\n34             set[byte as usize] = true;\n35             byte += 1;\n36         }\n37         set\n38     }\n39     const WORD: [bool; 256] = mkwordset();\n40     WORD[b as usize]\n41 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}