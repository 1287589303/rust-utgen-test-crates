{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/pikevm.rs\n// crate name is regex_lite\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    int::{NonMaxUsize, U32},\n    nfa::{State, StateID, NFA},\n    pool::CachePoolGuard, utf8,\n};\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n}\n#[derive(Clone)]\nstruct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\nimpl SparseSet {\n    fn new(capacity: usize) -> SparseSet {}\n    fn resize(&mut self, new_capacity: usize) {\n        assert!(\n            new_capacity <= u32::MAX.as_usize(),\n            \"sparse set capacity cannot excced {:?}\", u32::MAX,\n        );\n        self.clear();\n        self.dense.resize(new_capacity, 0);\n        self.sparse.resize(new_capacity, 0);\n    }\n    fn capacity(&self) -> usize {}\n    fn len(&self) -> usize {}\n    fn is_empty(&self) -> bool {}\n    fn insert(&mut self, id: StateID) -> bool {}\n    fn contains(&self, id: StateID) -> bool {}\n    fn clear(&mut self) {\n        self.len = 0;\n    }\n    fn iter(&self) -> SparseSetIter<'_> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Resizes this sparse set to have the new capacity given.\n///\n/// This set is automatically cleared.\n///\n/// This panics if the capacity given is bigger than `StateID::LIMIT`.\n822 fn resize(&mut self, new_capacity: usize) {\n823     assert!(\n824         new_capacity <= u32::MAX.as_usize(),\n825         \"sparse set capacity cannot excced {:?}\",\n826         u32::MAX,\n827     );\n828     self.clear();\n829     self.dense.resize(new_capacity, 0);\n830     self.sparse.resize(new_capacity, 0);\n831 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}