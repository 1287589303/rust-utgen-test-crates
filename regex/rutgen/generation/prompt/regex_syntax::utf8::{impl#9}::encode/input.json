{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\nstruct ScalarRange {\n    start: u32,\n    end: u32,\n}\nimpl ScalarRange {\n    fn split(&self) -> Option<(ScalarRange, ScalarRange)> {}\n    fn is_valid(&self) -> bool {}\n    fn as_ascii(&self) -> Option<Utf8Range> {}\n    fn is_ascii(&self) -> bool {}\n    fn encode(&self, start: &mut [u8], end: &mut [u8]) -> usize {\n        let cs = char::from_u32(self.start).unwrap();\n        let ce = char::from_u32(self.end).unwrap();\n        let ss = cs.encode_utf8(start);\n        let se = ce.encode_utf8(end);\n        assert_eq!(ss.len(), se.len());\n        ss.len()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// encode writes the UTF-8 encoding of the start and end of this range\n/// to the corresponding destination slices, and returns the number of\n/// bytes written.\n///\n/// The slices should have room for at least `MAX_UTF8_BYTES`.\n435 fn encode(&self, start: &mut [u8], end: &mut [u8]) -> usize {\n436     let cs = char::from_u32(self.start).unwrap();\n437     let ce = char::from_u32(self.end).unwrap();\n438     let ss = cs.encode_utf8(start);\n439     let se = ce.encode_utf8(end);\n440     assert_eq!(ss.len(), se.len());\n441     ss.len()\n442 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}