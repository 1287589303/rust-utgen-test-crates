{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Copy, Default, Eq, PartialEq)]\npub struct LookSet {\n    /// The underlying representation this set is exposed to make it possible\n    /// to store it somewhere efficiently. The representation is that\n    /// of a bitset, where each assertion occupies bit `i` where `i =\n    /// Look::as_repr()`.\n    ///\n    /// Note that users of this internal representation must permit the full\n    /// range of `u16` values to be represented. For example, even if the\n    /// current implementation only makes use of the 10 least significant bits,\n    /// it may use more bits in a future semver compatible release.\n    pub bits: u32,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Repetition {\n    /// The minimum range of the repetition.\n    ///\n    /// Note that special cases like `?`, `+` and `*` all get translated into\n    /// the ranges `{0,1}`, `{1,}` and `{0,}`, respectively.\n    ///\n    /// When `min` is zero, this expression can match the empty string\n    /// regardless of what its sub-expression is.\n    pub min: u32,\n    /// The maximum range of the repetition.\n    ///\n    /// Note that when `max` is `None`, `min` acts as a lower bound but where\n    /// there is no upper bound. For something like `x{5}` where the min and\n    /// max are equivalent, `min` will be set to `5` and `max` will be set to\n    /// `Some(5)`.\n    pub max: Option<u32>,\n    /// Whether this repetition operator is greedy or not. A greedy operator\n    /// will match as much as it can. A non-greedy operator will match as\n    /// little as it can.\n    ///\n    /// Typically, operators are greedy by default and are only non-greedy when\n    /// a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is\n    /// not. However, this can be inverted via the `U` \"ungreedy\" flag.\n    pub greedy: bool,\n    /// The expression being repeated.\n    pub sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\nstruct PropertiesI {\n    minimum_len: Option<usize>,\n    maximum_len: Option<usize>,\n    look_set: LookSet,\n    look_set_prefix: LookSet,\n    look_set_suffix: LookSet,\n    look_set_prefix_any: LookSet,\n    look_set_suffix_any: LookSet,\n    utf8: bool,\n    explicit_captures_len: usize,\n    static_explicit_captures_len: Option<usize>,\n    literal: bool,\n    alternation_literal: bool,\n}\nimpl Properties {\n    fn empty() -> Properties {}\n    fn literal(lit: &Literal) -> Properties {}\n    fn class(class: &Class) -> Properties {}\n    fn look(look: Look) -> Properties {}\n    fn repetition(rep: &Repetition) -> Properties {\n        let p = rep.sub.properties();\n        let minimum_len = p\n            .minimum_len()\n            .map(|child_min| {\n                let rep_min = usize::try_from(rep.min).unwrap_or(usize::MAX);\n                child_min.saturating_mul(rep_min)\n            });\n        let maximum_len = rep\n            .max\n            .and_then(|rep_max| {\n                let rep_max = usize::try_from(rep_max).ok()?;\n                let child_max = p.maximum_len()?;\n                child_max.checked_mul(rep_max)\n            });\n        let mut inner = PropertiesI {\n            minimum_len,\n            maximum_len,\n            look_set: p.look_set(),\n            look_set_prefix: LookSet::empty(),\n            look_set_suffix: LookSet::empty(),\n            look_set_prefix_any: p.look_set_prefix_any(),\n            look_set_suffix_any: p.look_set_suffix_any(),\n            utf8: p.is_utf8(),\n            explicit_captures_len: p.explicit_captures_len(),\n            static_explicit_captures_len: p.static_explicit_captures_len(),\n            literal: false,\n            alternation_literal: false,\n        };\n        if rep.min > 0 {\n            inner.look_set_prefix = p.look_set_prefix();\n            inner.look_set_suffix = p.look_set_suffix();\n        }\n        if rep.min == 0\n            && inner.static_explicit_captures_len.map_or(false, |len| len > 0)\n        {\n            if rep.max == Some(0) {\n                inner.static_explicit_captures_len = Some(0);\n            } else {\n                inner.static_explicit_captures_len = None;\n            }\n        }\n        Properties(Box::new(inner))\n    }\n    fn capture(capture: &Capture) -> Properties {}\n    fn concat(concat: &[Hir]) -> Properties {}\n    fn alternation(alts: &[Hir]) -> Properties {}\n}\nimpl LookSet {\n    #[inline]\n    pub fn empty() -> LookSet {\n        LookSet { bits: 0 }\n    }\n    #[inline]\n    pub fn full() -> LookSet {}\n    #[inline]\n    pub fn singleton(look: Look) -> LookSet {}\n    #[inline]\n    pub fn len(self) -> usize {}\n    #[inline]\n    pub fn is_empty(self) -> bool {}\n    #[inline]\n    pub fn contains(self, look: Look) -> bool {}\n    #[inline]\n    pub fn contains_anchor(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_haystack(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_line(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_lf(&self) -> bool {}\n    #[inline]\n    pub fn contains_anchor_crlf(&self) -> bool {}\n    #[inline]\n    pub fn contains_word(self) -> bool {}\n    #[inline]\n    pub fn contains_word_unicode(self) -> bool {}\n    #[inline]\n    pub fn contains_word_ascii(self) -> bool {}\n    #[inline]\n    pub fn iter(self) -> LookSetIter {}\n    #[inline]\n    pub fn insert(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_insert(&mut self, look: Look) {}\n    #[inline]\n    pub fn remove(self, look: Look) -> LookSet {}\n    #[inline]\n    pub fn set_remove(&mut self, look: Look) {}\n    #[inline]\n    pub fn subtract(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_subtract(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn union(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_union(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn intersect(self, other: LookSet) -> LookSet {}\n    #[inline]\n    pub fn set_intersect(&mut self, other: LookSet) {}\n    #[inline]\n    pub fn read_repr(slice: &[u8]) -> LookSet {}\n    #[inline]\n    pub fn write_repr(self, slice: &mut [u8]) {}\n}\nimpl Hir {\n    pub fn kind(&self) -> &HirKind {}\n    pub fn into_kind(mut self) -> HirKind {}\n    pub fn properties(&self) -> &Properties {\n        &self.props\n    }\n    fn into_parts(mut self) -> (HirKind, Properties) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new set of HIR properties for a repetition.\n2503 fn repetition(rep: &Repetition) -> Properties {\n2504     let p = rep.sub.properties();\n2505     let minimum_len = p.minimum_len().map(|child_min| {\n2506         let rep_min = usize::try_from(rep.min).unwrap_or(usize::MAX);\n2507         child_min.saturating_mul(rep_min)\n2508     });\n2509     let maximum_len = rep.max.and_then(|rep_max| {\n2510         let rep_max = usize::try_from(rep_max).ok()?;\n2511         let child_max = p.maximum_len()?;\n2512         child_max.checked_mul(rep_max)\n2513     });\n2514 \n2515     let mut inner = PropertiesI {\n2516         minimum_len,\n2517         maximum_len,\n2518         look_set: p.look_set(),\n2519         look_set_prefix: LookSet::empty(),\n2520         look_set_suffix: LookSet::empty(),\n2521         look_set_prefix_any: p.look_set_prefix_any(),\n2522         look_set_suffix_any: p.look_set_suffix_any(),\n2523         utf8: p.is_utf8(),\n2524         explicit_captures_len: p.explicit_captures_len(),\n2525         static_explicit_captures_len: p.static_explicit_captures_len(),\n2526         literal: false,\n2527         alternation_literal: false,\n2528     };\n2529     // If the repetition operator can match the empty string, then its\n2530     // lookset prefix and suffixes themselves remain empty since they are\n2531     // no longer required to match.\n2532     if rep.min > 0 {\n2533         inner.look_set_prefix = p.look_set_prefix();\n2534         inner.look_set_suffix = p.look_set_suffix();\n2535     }\n2536     // If the static captures len of the sub-expression is not known or\n2537     // is greater than zero, then it automatically propagates to the\n2538     // repetition, regardless of the repetition. Otherwise, it might\n2539     // change, but only when the repetition can match 0 times.\n2540     if rep.min == 0\n2541         && inner.static_explicit_captures_len.map_or(false, |len| len > 0)\n2542     {\n2543         // If we require a match 0 times, then our captures len is\n2544         // guaranteed to be zero. Otherwise, if we *can* match the empty\n2545         // string, then it's impossible to know how many captures will be\n2546         // in the resulting match.\n2547         if rep.max == Some(0) {\n2548             inner.static_explicit_captures_len = Some(0);\n2549         } else {\n2550             inner.static_explicit_captures_len = None;\n2551         }\n2552     }\n2553     Properties(Box::new(inner))\n2554 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}