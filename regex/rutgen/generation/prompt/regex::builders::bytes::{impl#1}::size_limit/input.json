{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{\n    bytes::{Regex, RegexSet},\n    error::Error,\n};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexSetBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexSetBuilder {\n    pub fn new<I, S>(patterns: I) -> RegexSetBuilder\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {}\n    pub fn build(&self) -> Result<RegexSet, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexSetBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {\n        self.builder.size_limit(bytes);\n        self\n    }\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexSetBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {\n        self.metac = self.metac.clone().nfa_size_limit(Some(limit));\n        self\n    }\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the approximate size limit, in bytes, of the compiled regex.\n///\n/// This roughly corresponds to the number of heap memory, in\n/// bytes, occupied by a single regex. If the regex would otherwise\n/// approximately exceed this limit, then compiling that regex will\n/// fail.\n///\n/// The main utility of a method like this is to avoid compiling\n/// regexes that use an unexpected amount of resources, such as\n/// time and memory. Even if the memory usage of a large regex is\n/// acceptable, its search time may not be. Namely, worst case time\n/// complexity for search is `O(m * n)`, where `m ~ len(pattern)` and\n/// `n ~ len(haystack)`. That is, search time depends, in part, on the\n/// size of the compiled regex. This means that putting a limit on the\n/// size of the regex limits how much a regex can impact search time.\n///\n/// For more information about regex size limits, see the section on\n/// [untrusted inputs](crate#untrusted-input) in the top-level crate\n/// documentation.\n///\n/// The default for this is some reasonable number that permits most\n/// patterns to compile successfully.\n///\n/// # Example\n///\n/// ```\n/// # if !cfg!(target_pointer_width = \"64\") { return; } // see #1041\n/// use regex::bytes::RegexSetBuilder;\n///\n/// // It may surprise you how big some seemingly small patterns can\n/// // be! Since \\w is Unicode aware, this generates a regex that can\n/// // match approximately 140,000 distinct codepoints.\n/// assert!(\n///     RegexSetBuilder::new([r\"\\w\"])\n///         .size_limit(45_000)\n///         .build()\n///         .is_err()\n/// );\n/// ```\n2447 pub fn size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {\n2448     self.builder.size_limit(bytes);\n2449     self\n2450 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}