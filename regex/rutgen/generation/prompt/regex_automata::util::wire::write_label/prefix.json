{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct SerializeError {\n    /// The name of the thing that a buffer is too small for.\n    ///\n    /// Currently, the only kind of serialization error is one that is\n    /// committed by a caller: providing a destination buffer that is too\n    /// small to fit the serialized object. This makes sense conceptually,\n    /// since every valid inhabitant of a type should be serializable.\n    ///\n    /// This is somewhat exposed in the public API of this crate. For example,\n    /// the `to_bytes_{big,little}_endian` APIs return a `Vec<u8>` and are\n    /// guaranteed to never panic or error. This is only possible because the\n    /// implementation guarantees that it will allocate a `Vec<u8>` that is\n    /// big enough.\n    ///\n    /// In summary, if a new serialization error kind needs to be added, then\n    /// it will need careful consideration.\n    what: &'static str,\n}\nimpl SerializeError {\n    pub(crate) fn buffer_too_small(what: &'static str) -> SerializeError {\n        SerializeError { what }\n    }\n}\npub(crate) fn write_label(label: &str, dst: &mut [u8]) -> Result<usize, SerializeError> {\n    let nwrite = write_label_len(label);\n    if dst.len() < nwrite {\n        return Err(SerializeError::buffer_too_small(\"label\"));\n    }\n    dst[..label.len()].copy_from_slice(label.as_bytes());\n    for i in 0..(nwrite - label.len()) {\n        dst[label.len() + i] = 0;\n    }\n    assert_eq!(nwrite % 4, 0);\n    Ok(nwrite)\n}\npub(crate) fn write_label_len(label: &str) -> usize {\n    if label.len() > 255 {\n        panic!(\"label must not be longer than 255 bytes\");\n    }\n    if label.as_bytes().iter().position(|&b| b == 0).is_some() {\n        panic!(\"label must not contain NUL bytes\");\n    }\n    let label_len = label.len() + 1;\n    label_len + padding_len(label_len)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Writes the given label to the buffer as a NUL terminated string. The label\n/// given must not contain NUL, otherwise this will panic. Similarly, the label\n/// must not be longer than 255 bytes, otherwise this will panic.\n///\n/// Additional NUL bytes are written as necessary to ensure that the number of\n/// bytes written is always a multiple of 4.\n///\n/// Upon success, the total number of bytes written (including padding) is\n/// returned.\n460 pub(crate) fn write_label(\n461     label: &str,\n462     dst: &mut [u8],\n463 ) -> Result<usize, SerializeError> {\n464     let nwrite = write_label_len(label);\n465     if dst.len() < nwrite {\n466         return Err(SerializeError::buffer_too_small(\"label\"));\n467     }\n468     dst[..label.len()].copy_from_slice(label.as_bytes());\n469     for i in 0..(nwrite - label.len()) {\n470         dst[label.len() + i] = 0;\n471     }\n472     assert_eq!(nwrite % 4, 0);\n473     Ok(nwrite)\n474 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}