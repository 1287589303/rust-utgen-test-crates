{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Debug, Default)]\nstruct GroupInfoInner {\n    slot_ranges: Vec<(SmallIndex, SmallIndex)>,\n    name_to_index: Vec<CaptureNameMap>,\n    index_to_name: Vec<Vec<Option<Arc<str>>>>,\n    memory_extra: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug)]\npub struct GroupInfoPatternNames<'a> {\n    it: core::slice::Iter<'a, Option<Arc<str>>>,\n}\nimpl GroupInfo {\n    pub fn new<P, G, N>(pattern_groups: P) -> Result<GroupInfo, GroupInfoError>\n    where\n        P: IntoIterator<Item = G>,\n        G: IntoIterator<Item = Option<N>>,\n        N: AsRef<str>,\n    {}\n    pub fn empty() -> GroupInfo {}\n    #[inline]\n    pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {}\n    #[inline]\n    pub fn to_name(&self, pid: PatternID, group_index: usize) -> Option<&str> {}\n    #[inline]\n    pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {\n        GroupInfoPatternNames {\n            it: self\n                .0\n                .index_to_name\n                .get(pid.as_usize())\n                .map(|indices| indices.iter())\n                .unwrap_or([].iter()),\n        }\n    }\n    #[inline]\n    pub fn all_names(&self) -> GroupInfoAllNames<'_> {}\n    #[inline]\n    pub fn slots(&self, pid: PatternID, group_index: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn slot(&self, pid: PatternID, group_index: usize) -> Option<usize> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn group_len(&self, pid: PatternID) -> usize {}\n    #[inline]\n    pub fn all_group_len(&self) -> usize {}\n    #[inline]\n    pub fn slot_len(&self) -> usize {}\n    #[inline]\n    pub fn implicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn explicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return an iterator of all capture groups and their names (if present)\n/// for a particular pattern.\n///\n/// If the given pattern ID is invalid or if this `GroupInfo` is empty,\n/// then the iterator yields no elements.\n///\n/// The number of elements yielded by this iterator is always equal to\n/// the result of calling [`GroupInfo::group_len`] with the same\n/// `PatternID`.\n///\n/// # Example\n///\n/// This example shows how to get a list of all capture group names for\n/// a particular pattern.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let nfa = NFA::new(r\"(a)(?P<foo>b)(c)(d)(?P<bar>e)\")?;\n/// // The first is the implicit group that is always unnammed. The next\n/// // 5 groups are the explicit groups found in the concrete syntax above.\n/// let expected = vec![None, None, Some(\"foo\"), None, None, Some(\"bar\")];\n/// let got: Vec<Option<&str>> =\n///     nfa.group_info().pattern_names(PatternID::ZERO).collect();\n/// assert_eq!(expected, got);\n///\n/// // Using an invalid pattern ID will result in nothing yielded.\n/// let got = nfa.group_info().pattern_names(PatternID::must(999)).count();\n/// assert_eq!(0, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1768 pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {\n1769     GroupInfoPatternNames {\n1770         it: self\n1771             .0\n1772             .index_to_name\n1773             .get(pid.as_usize())\n1774             .map(|indices| indices.iter())\n1775             .unwrap_or([].iter()),\n1776     }\n1777 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}