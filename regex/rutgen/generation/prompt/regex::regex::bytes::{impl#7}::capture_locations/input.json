{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone, Debug)]\npub struct CaptureLocations(captures::Captures);\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    #[inline]\n    pub fn as_str(&self) -> &str {}\n    #[inline]\n    pub fn capture_names(&self) -> CaptureNames<'_> {}\n    #[inline]\n    pub fn captures_len(&self) -> usize {}\n    #[inline]\n    pub fn static_captures_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn capture_locations(&self) -> CaptureLocations {\n        CaptureLocations(self.meta.create_captures())\n    }\n    #[inline]\n    pub fn locations(&self) -> CaptureLocations {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a fresh allocated set of capture locations that can\n/// be reused in multiple calls to [`Regex::captures_read`] or\n/// [`Regex::captures_read_at`].\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// assert!(re.captures_read(&mut locs, b\"Padron\").is_some());\n/// assert_eq!(locs.get(0), Some((0, 6)));\n/// assert_eq!(locs.get(1), Some((0, 1)));\n/// assert_eq!(locs.get(2), Some((1, 2)));\n/// assert_eq!(locs.get(3), Some((2, 6)));\n/// ```\n1419 pub fn capture_locations(&self) -> CaptureLocations {\n1420     CaptureLocations(self.meta.create_captures())\n1421 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}