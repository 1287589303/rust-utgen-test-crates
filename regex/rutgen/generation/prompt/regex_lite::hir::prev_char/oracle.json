{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\nfn prev_char(ch: char) -> Option<char> {\n    if ch == '\\u{E000}' {\n        return Some('\\u{D7FF}');\n    }\n    Some(char::from_u32(u32::from(ch).checked_sub(1)?).unwrap())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n759 fn prev_char(ch: char) -> Option<char> {\n760     // Skip over the surrogate range.\n761     if ch == '\\u{E000}' {\n762         return Some('\\u{D7FF}');\n763     }\n764     // OK because subtracting 1 from any valid scalar value other than 0\n765     // and U+E000 yields a valid scalar value.\n766     Some(char::from_u32(u32::from(ch).checked_sub(1)?).unwrap())\n767 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}