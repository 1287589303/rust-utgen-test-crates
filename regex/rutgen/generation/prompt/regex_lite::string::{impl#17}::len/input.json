{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\n#[derive(Clone, Debug)]\npub struct CaptureLocations(Vec<Option<NonMaxUsize>>);\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub(crate) struct NonMaxUsize(NonZeroUsize);\nimpl CaptureLocations {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.0.len().checked_shr(1).unwrap()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the total number of capture groups (even if they didn't match).\n/// That is, the length returned is unaffected by the result of a search.\n///\n/// This is always at least `1` since every regex has at least `1`\n/// capturing group that corresponds to the entire match.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// assert_eq!(3, locs.len());\n/// re.captures_read(&mut locs, \"Bruce Springsteen\").unwrap();\n/// assert_eq!(3, locs.len());\n/// ```\n///\n/// Notice that the length is always at least `1`, regardless of the regex:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let locs = re.capture_locations();\n/// assert_eq!(1, locs.len());\n///\n/// // [a&&b] is a regex that never matches anything.\n/// let re = Regex::new(r\"[^\\s\\S]\").unwrap();\n/// let locs = re.capture_locations();\n/// assert_eq!(1, locs.len());\n/// ```\n2146 pub fn len(&self) -> usize {\n2147     // We always have twice as many slots as groups.\n2148     self.0.len().checked_shr(1).unwrap()\n2149 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}