{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Clone, Eq, PartialEq, PartialOrd, Ord)]\npub struct Literal {\n    bytes: Vec<u8>,\n    exact: bool,\n}\nimpl Literal {\n    #[inline]\n    pub fn exact<B: Into<Vec<u8>>>(bytes: B) -> Literal {}\n    #[inline]\n    pub fn inexact<B: Into<Vec<u8>>>(bytes: B) -> Literal {}\n    #[inline]\n    pub fn as_bytes(&self) -> &[u8] {}\n    #[inline]\n    pub fn into_bytes(self) -> Vec<u8> {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.as_bytes().len()\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn make_inexact(&mut self) {\n        self.exact = false;\n    }\n    #[inline]\n    pub fn reverse(&mut self) {}\n    #[inline]\n    pub fn extend(&mut self, lit: &Literal) {}\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {\n        if len >= self.len() {\n            return;\n        }\n        self.make_inexact();\n        self.bytes.truncate(len);\n    }\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    fn is_poisonous(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Trims this literal such that only the first `len` bytes remain. If\n/// this literal has fewer than `len` bytes, then it remains unchanged.\n/// Otherwise, the literal is marked as inexact.\n2129 pub fn keep_first_bytes(&mut self, len: usize) {\n2130     if len >= self.len() {\n2131         return;\n2132     }\n2133     self.make_inexact();\n2134     self.bytes.truncate(len);\n2135 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}