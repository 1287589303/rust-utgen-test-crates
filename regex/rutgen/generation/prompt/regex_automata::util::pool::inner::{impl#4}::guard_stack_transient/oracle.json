{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\nuse core::{\n    cell::UnsafeCell, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicUsize, Ordering},\n};\nuse alloc::{boxed::Box, vec, vec::Vec};\nuse std::{sync::Mutex, thread_local};\nstatic COUNTER: AtomicUsize = AtomicUsize::new(3);\nstatic THREAD_ID_UNOWNED: usize = 0;\nstatic THREAD_ID_INUSE: usize = 1;\nstatic THREAD_ID_DROPPED: usize = 2;\nconst MAX_POOL_STACKS: usize = 8;\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\npub(super) struct PoolGuard<'a, T: Send, F: Fn() -> T> {\n    /// The pool that this guard is attached to.\n    pool: &'a Pool<T, F>,\n    /// This is None after the guard has been put back into the pool.\n    value: Option<Box<T>>,\n}\n#[derive(Debug)]\nstruct Mutex<T> {\n    locked: AtomicBool,\n    data: UnsafeCell<T>,\n}\nimpl<T: Send, F: Fn() -> T> Pool<T, F> {\n    #[inline]\n    pub(super) fn get(&self) -> PoolGuard<'_, T, F> {}\n    #[cold]\n    fn get_slow(&self, caller: usize, owner: usize) -> PoolGuard<'_, T, F> {}\n    #[inline]\n    fn put_value(&self, value: Box<T>) {}\n    #[inline]\n    fn guard_owned(&self, caller: usize) -> PoolGuard<'_, T, F> {}\n    #[inline]\n    fn guard_stack(&self, value: Box<T>) -> PoolGuard<'_, T, F> {}\n    #[inline]\n    fn guard_stack_transient(&self, value: Box<T>) -> PoolGuard<'_, T, F> {\n        PoolGuard {\n            pool: self,\n            value: Ok(value),\n            discard: true,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a guard that contains a value from the pool's stack with an\n/// instruction to throw away the value instead of putting it back\n/// into the pool.\n644 fn guard_stack_transient(&self, value: Box<T>) -> PoolGuard<'_, T, F> {\n645     PoolGuard { pool: self, value: Ok(value), discard: true }\n646 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}