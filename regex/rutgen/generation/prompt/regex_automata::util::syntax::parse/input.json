{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/syntax.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse regex_syntax::{\n    ast, hir::{self, Hir},\n    Error, ParserBuilder,\n};\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\nimpl Default for Config {\n    fn default() -> Config {\n        Config::new()\n    }\n}\npub fn parse(pattern: &str) -> Result<Hir, Error> {\n    parse_with(pattern, &Config::default())\n}\npub fn parse_with(pattern: &str, config: &Config) -> Result<Hir, Error> {\n    let mut builder = ParserBuilder::new();\n    config.apply(&mut builder);\n    builder.build().parse(pattern)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// A convenience routine for parsing a pattern into an HIR value with the\n/// default configuration.\n///\n/// # Example\n///\n/// This shows how to parse a pattern into an HIR value:\n///\n/// ```\n/// use regex_automata::util::syntax;\n///\n/// let hir = syntax::parse(r\"([a-z]+)|([0-9]+)\")?;\n/// assert_eq!(Some(1), hir.properties().static_explicit_captures_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n37 pub fn parse(pattern: &str) -> Result<Hir, Error> {\n38     parse_with(pattern, &Config::default())\n39 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}