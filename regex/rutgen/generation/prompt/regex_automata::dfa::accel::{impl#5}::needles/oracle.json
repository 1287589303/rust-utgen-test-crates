{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accel {\n    /// The first byte is the length. Subsequent bytes are the accelerated\n    /// bytes.\n    ///\n    /// Note that we make every accelerator 8 bytes as a slightly wasteful\n    /// way of making sure alignment is always correct for state ID sizes of\n    /// 1, 2, 4 and 8. This should be okay since accelerated states aren't\n    /// particularly common, especially when Unicode is enabled.\n    bytes: [u8; ACCEL_CAP],\n}\nimpl Accel {\n    #[cfg(feature = \"dfa-build\")]\n    pub fn new() -> Accel {}\n    pub fn from_slice(mut slice: &[u8]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes(bytes: [u8; 4]) -> Result<Accel, DeserializeError> {}\n    fn from_bytes_unchecked(bytes: [u8; 4]) -> Accel {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn add(&mut self, byte: u8) -> bool {}\n    pub fn len(&self) -> usize {\n        usize::from(self.bytes[0])\n    }\n    #[cfg(feature = \"dfa-build\")]\n    pub fn is_empty(&self) -> bool {}\n    fn needles(&self) -> &[u8] {\n        &self.bytes[1..1 + self.len()]\n    }\n    #[cfg(feature = \"dfa-build\")]\n    fn contains(&self, byte: u8) -> bool {}\n    #[cfg(feature = \"dfa-build\")]\n    fn as_accel_tys(&self) -> [AccelTy; 2] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the slice of bytes to accelerate.\n///\n/// If this accelerator is empty, then this returns an empty slice.\n483 fn needles(&self) -> &[u8] {\n484     &self.bytes[1..1 + self.len()]\n485 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}