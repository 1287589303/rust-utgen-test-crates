{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/parse.rs\n// crate name is regex_lite\nuse core::cell::{Cell, RefCell};\nuse alloc::{\n    boxed::Box, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{error::Error, hir::{self, Config, Flags, Hir, HirKind}};\nconst ERR_TOO_MUCH_NESTING: &str = \"pattern has too much nesting\";\nconst ERR_TOO_MANY_CAPTURES: &str = \"too many capture groups\";\nconst ERR_DUPLICATE_CAPTURE_NAME: &str = \"duplicate capture group name\";\nconst ERR_UNCLOSED_GROUP: &str = \"found open group without closing ')'\";\nconst ERR_UNCLOSED_GROUP_QUESTION: &str = \"expected closing ')', but got end of pattern\";\nconst ERR_UNOPENED_GROUP: &str = \"found closing ')' without matching '('\";\nconst ERR_LOOK_UNSUPPORTED: &str = \"look-around is not supported\";\nconst ERR_EMPTY_FLAGS: &str = \"empty flag directive '(?)' is not allowed\";\nconst ERR_MISSING_GROUP_NAME: &str = \"expected capture group name, but got end of pattern\";\nconst ERR_INVALID_GROUP_NAME: &str = \"invalid group name\";\nconst ERR_UNCLOSED_GROUP_NAME: &str = \"expected end of capture group name, but got end of pattern\";\nconst ERR_EMPTY_GROUP_NAME: &str = \"empty capture group names are not allowed\";\nconst ERR_FLAG_UNRECOGNIZED: &str = \"unrecognized inline flag\";\nconst ERR_FLAG_REPEATED_NEGATION: &str = \"inline flag negation cannot be repeated\";\nconst ERR_FLAG_DUPLICATE: &str = \"duplicate inline flag is not allowed\";\nconst ERR_FLAG_UNEXPECTED_EOF: &str = \"expected ':' or ')' to end inline flags, but got end of pattern\";\nconst ERR_FLAG_DANGLING_NEGATION: &str = \"inline flags cannot end with negation directive\";\nconst ERR_DECIMAL_NO_DIGITS: &str = \"expected decimal number, but found no digits\";\nconst ERR_DECIMAL_INVALID: &str = \"got invalid decimal number\";\nconst ERR_HEX_BRACE_INVALID_DIGIT: &str = \"expected hexadecimal number in braces, but got non-hex digit\";\nconst ERR_HEX_BRACE_UNEXPECTED_EOF: &str = \"expected hexadecimal number, but saw end of pattern before closing brace\";\nconst ERR_HEX_BRACE_EMPTY: &str = \"expected hexadecimal number in braces, but got no digits\";\nconst ERR_HEX_BRACE_INVALID: &str = \"got invalid hexadecimal number in braces\";\nconst ERR_HEX_FIXED_UNEXPECTED_EOF: &str = \"expected fixed length hexadecimal number, but saw end of pattern first\";\nconst ERR_HEX_FIXED_INVALID_DIGIT: &str = \"expected fixed length hexadecimal number, but got non-hex digit\";\nconst ERR_HEX_FIXED_INVALID: &str = \"got invalid fixed length hexadecimal number\";\nconst ERR_HEX_UNEXPECTED_EOF: &str = \"expected hexadecimal number, but saw end of pattern first\";\nconst ERR_ESCAPE_UNEXPECTED_EOF: &str = \"saw start of escape sequence, but saw end of pattern before it finished\";\nconst ERR_BACKREF_UNSUPPORTED: &str = \"backreferences are not supported\";\nconst ERR_UNICODE_CLASS_UNSUPPORTED: &str = \"Unicode character classes are not supported\";\nconst ERR_ESCAPE_UNRECOGNIZED: &str = \"unrecognized escape sequence\";\nconst ERR_POSIX_CLASS_UNRECOGNIZED: &str = \"unrecognized POSIX character class\";\nconst ERR_UNCOUNTED_REP_SUB_MISSING: &str = \"uncounted repetition operator must be applied to a sub-expression\";\nconst ERR_COUNTED_REP_SUB_MISSING: &str = \"counted repetition operator must be applied to a sub-expression\";\nconst ERR_COUNTED_REP_UNCLOSED: &str = \"found unclosed counted repetition operator\";\nconst ERR_COUNTED_REP_MIN_UNCLOSED: &str = \"found incomplete and unclosed counted repetition operator\";\nconst ERR_COUNTED_REP_COMMA_UNCLOSED: &str = \"found counted repetition operator with a comma that is unclosed\";\nconst ERR_COUNTED_REP_MIN_MAX_UNCLOSED: &str = \"found counted repetition with min and max that is unclosed\";\nconst ERR_COUNTED_REP_INVALID: &str = \"expected closing brace for counted repetition, but got something else\";\nconst ERR_COUNTED_REP_INVALID_RANGE: &str = \"found counted repetition with a min bigger than its max\";\nconst ERR_CLASS_UNCLOSED_AFTER_ITEM: &str = \"non-empty character class has no closing bracket\";\nconst ERR_CLASS_INVALID_RANGE_ITEM: &str = \"character class ranges must start and end with a single character\";\nconst ERR_CLASS_INVALID_ITEM: &str = \"invalid escape sequence in character class\";\nconst ERR_CLASS_UNCLOSED_AFTER_DASH: &str = \"non-empty character class has no closing bracket after dash\";\nconst ERR_CLASS_UNCLOSED_AFTER_NEGATION: &str = \"negated character class has no closing bracket\";\nconst ERR_CLASS_UNCLOSED_AFTER_CLOSING: &str = \"character class begins with literal ']' but has no closing bracket\";\nconst ERR_CLASS_INVALID_RANGE: &str = \"invalid range in character class\";\nconst ERR_CLASS_UNCLOSED: &str = \"found unclosed character class\";\nconst ERR_CLASS_NEST_UNSUPPORTED: &str = \"nested character classes are not supported\";\nconst ERR_CLASS_INTERSECTION_UNSUPPORTED: &str = \"character class intersection is not supported\";\nconst ERR_CLASS_DIFFERENCE_UNSUPPORTED: &str = \"character class difference is not supported\";\nconst ERR_CLASS_SYMDIFFERENCE_UNSUPPORTED: &str = \"character class symmetric difference is not supported\";\nconst ERR_SPECIAL_WORD_BOUNDARY_UNCLOSED: &str = \"special word boundary assertion is unclosed or has an invalid character\";\nconst ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED: &str = \"special word boundary assertion is unrecognized\";\nconst ERR_SPECIAL_WORD_OR_REP_UNEXPECTED_EOF: &str = \"found start of special word boundary or repetition without an end\";\n#[derive(Clone, Debug)]\npub(super) struct Parser<'a> {\n    /// The configuration of the parser as given by the caller.\n    config: Config,\n    /// The pattern we're parsing as given by the caller.\n    pattern: &'a str,\n    /// The call depth of the parser. This is incremented for each\n    /// sub-expression parsed. Its peak value is the maximum nesting of the\n    /// pattern.\n    depth: Cell<u32>,\n    /// The current position of the parser.\n    pos: Cell<usize>,\n    /// The current codepoint of the parser. The codepoint corresponds to the\n    /// codepoint encoded in `pattern` beginning at `pos`.\n    ///\n    /// This is `None` if and only if `pos == pattern.len()`.\n    char: Cell<Option<char>>,\n    /// The current capture index.\n    capture_index: Cell<u32>,\n    /// The flags that are currently set.\n    flags: RefCell<Flags>,\n    /// A sorted sequence of capture names. This is used to detect duplicate\n    /// capture names and report an error if one is detected.\n    capture_names: RefCell<Vec<String>>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Copy, Debug, Default)]\npub(crate) struct Flags {\n    /// Whether to match case insensitively.\n    ///\n    /// This is the `i` flag.\n    pub(crate) case_insensitive: bool,\n    /// Whether `^` and `$` should be treated as line anchors or not.\n    ///\n    /// This is the `m` flag.\n    pub(crate) multi_line: bool,\n    /// Whether `.` should match line terminators or not.\n    ///\n    /// This is the `s` flag.\n    pub(crate) dot_matches_new_line: bool,\n    /// Whether to swap the meaning of greedy and non-greedy operators.\n    ///\n    /// This is the `U` flag.\n    pub(crate) swap_greed: bool,\n    /// Whether to enable CRLF mode.\n    ///\n    /// This is the `R` flag.\n    pub(crate) crlf: bool,\n    /// Whether to ignore whitespace. i.e., verbose mode.\n    ///\n    /// This is the `x` flag.\n    pub(crate) ignore_whitespace: bool,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\nimpl<'a> Parser<'a> {\n    pub(super) fn parse(&self) -> Result<Hir, Error> {}\n    fn parse_inner(&self) -> Result<Hir, Error> {\n        let depth = self.increment_depth()?;\n        let mut alternates = vec![];\n        let mut concat = vec![];\n        loop {\n            self.bump_space();\n            if self.is_done() {\n                break;\n            }\n            match self.char() {\n                '(' => {\n                    let oldflags = *self.flags.borrow();\n                    if let Some(sub) = self.parse_group()? {\n                        concat.push(sub);\n                        *self.flags.borrow_mut() = oldflags;\n                    }\n                    if self.char.get() != Some(')') {\n                        return Err(Error::new(ERR_UNCLOSED_GROUP));\n                    }\n                    self.bump();\n                }\n                ')' => {\n                    if depth == 0 {\n                        return Err(Error::new(ERR_UNOPENED_GROUP));\n                    }\n                    break;\n                }\n                '|' => {\n                    alternates.push(Hir::concat(core::mem::take(&mut concat)));\n                    self.bump();\n                }\n                '[' => concat.push(self.parse_class()?),\n                '?' | '*' | '+' => {\n                    concat = self.parse_uncounted_repetition(concat)?;\n                }\n                '{' => {\n                    concat = self.parse_counted_repetition(concat)?;\n                }\n                _ => concat.push(self.parse_primitive()?),\n            }\n        }\n        self.decrement_depth();\n        alternates.push(Hir::concat(concat));\n        Ok(Hir::alternation(alternates))\n    }\n    fn parse_primitive(&self) -> Result<Hir, Error> {\n        let ch = self.char();\n        self.bump();\n        match ch {\n            '\\\\' => self.parse_escape(),\n            '.' => Ok(self.hir_dot()),\n            '^' => Ok(self.hir_anchor_start()),\n            '$' => Ok(self.hir_anchor_end()),\n            ch => Ok(self.hir_char(ch)),\n        }\n    }\n    fn parse_escape(&self) -> Result<Hir, Error> {}\n    fn maybe_parse_special_word_boundary(&self) -> Result<Option<Hir>, Error> {}\n    fn parse_hex(&self) -> Result<Hir, Error> {}\n    fn parse_hex_digits(&self, digit_len: usize) -> Result<Hir, Error> {}\n    fn parse_hex_brace(&self) -> Result<Hir, Error> {}\n    fn parse_decimal(&self) -> Result<u32, Error> {}\n    fn parse_uncounted_repetition(\n        &self,\n        mut concat: Vec<Hir>,\n    ) -> Result<Vec<Hir>, Error> {\n        let sub = match concat.pop() {\n            Some(hir) => Box::new(hir),\n            None => {\n                return Err(Error::new(ERR_UNCOUNTED_REP_SUB_MISSING));\n            }\n        };\n        let (min, max) = match self.char() {\n            '?' => (0, Some(1)),\n            '*' => (0, None),\n            '+' => (1, None),\n            unk => unreachable!(\"unrecognized repetition operator '{}'\", unk),\n        };\n        let mut greedy = true;\n        if self.bump() && self.char() == '?' {\n            greedy = false;\n            self.bump();\n        }\n        if self.flags().swap_greed {\n            greedy = !greedy;\n        }\n        concat\n            .push(\n                Hir::repetition(hir::Repetition {\n                    min,\n                    max,\n                    greedy,\n                    sub,\n                }),\n            );\n        Ok(concat)\n    }\n    fn parse_counted_repetition(&self, mut concat: Vec<Hir>) -> Result<Vec<Hir>, Error> {\n        assert_eq!(self.char(), '{', \"expected opening brace\");\n        let sub = match concat.pop() {\n            Some(hir) => Box::new(hir),\n            None => {\n                return Err(Error::new(ERR_COUNTED_REP_SUB_MISSING));\n            }\n        };\n        if !self.bump_and_bump_space() {\n            return Err(Error::new(ERR_COUNTED_REP_UNCLOSED));\n        }\n        let min = self.parse_decimal()?;\n        let mut max = Some(min);\n        if self.is_done() {\n            return Err(Error::new(ERR_COUNTED_REP_MIN_UNCLOSED));\n        }\n        if self.char() == ',' {\n            if !self.bump_and_bump_space() {\n                return Err(Error::new(ERR_COUNTED_REP_COMMA_UNCLOSED));\n            }\n            if self.char() != '}' {\n                max = Some(self.parse_decimal()?);\n            } else {\n                max = None;\n            }\n            if self.is_done() {\n                return Err(Error::new(ERR_COUNTED_REP_MIN_MAX_UNCLOSED));\n            }\n        }\n        if self.char() != '}' {\n            return Err(Error::new(ERR_COUNTED_REP_INVALID));\n        }\n        let mut greedy = true;\n        if self.bump_and_bump_space() && self.char() == '?' {\n            greedy = false;\n            self.bump();\n        }\n        if self.flags().swap_greed {\n            greedy = !greedy;\n        }\n        if max.map_or(false, |max| min > max) {\n            return Err(Error::new(ERR_COUNTED_REP_INVALID_RANGE));\n        }\n        concat\n            .push(\n                Hir::repetition(hir::Repetition {\n                    min,\n                    max,\n                    greedy,\n                    sub,\n                }),\n            );\n        Ok(concat)\n    }\n    fn parse_group(&self) -> Result<Option<Hir>, Error> {\n        assert_eq!(self.char(), '(');\n        self.bump_and_bump_space();\n        if self.is_lookaround_prefix() {\n            return Err(Error::new(ERR_LOOK_UNSUPPORTED));\n        }\n        if self.bump_if(\"?P<\") || self.bump_if(\"?<\") {\n            let index = self.next_capture_index()?;\n            let name = Some(Box::from(self.parse_capture_name()?));\n            let sub = Box::new(self.parse_inner()?);\n            let cap = hir::Capture { index, name, sub };\n            Ok(Some(Hir::capture(cap)))\n        } else if self.bump_if(\"?\") {\n            if self.is_done() {\n                return Err(Error::new(ERR_UNCLOSED_GROUP_QUESTION));\n            }\n            let start = self.pos();\n            *self.flags.borrow_mut() = self.parse_flags()?;\n            let consumed = self.pos() - start;\n            if self.char() == ')' {\n                if consumed == 0 {\n                    return Err(Error::new(ERR_EMPTY_FLAGS));\n                }\n                Ok(None)\n            } else {\n                assert_eq!(':', self.char());\n                self.bump();\n                self.parse_inner().map(Some)\n            }\n        } else {\n            let index = self.next_capture_index()?;\n            let sub = Box::new(self.parse_inner()?);\n            let cap = hir::Capture {\n                index,\n                name: None,\n                sub,\n            };\n            Ok(Some(Hir::capture(cap)))\n        }\n    }\n    fn parse_capture_name(&self) -> Result<&str, Error> {}\n    fn parse_flags(&self) -> Result<Flags, Error> {}\n    fn parse_flag(&self, flags: &mut Flags, negate: bool) -> Result<(), Error> {}\n    fn parse_class(&self) -> Result<Hir, Error> {\n        assert_eq!(self.char(), '[');\n        let mut union = vec![];\n        if !self.bump_and_bump_space() {\n            return Err(Error::new(ERR_CLASS_UNCLOSED));\n        }\n        let negate = if self.char() != '^' {\n            false\n        } else {\n            if !self.bump_and_bump_space() {\n                return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_NEGATION));\n            }\n            true\n        };\n        while self.char() == '-' {\n            union\n                .push(hir::ClassRange {\n                    start: '-',\n                    end: '-',\n                });\n            if !self.bump_and_bump_space() {\n                return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_DASH));\n            }\n        }\n        if union.is_empty() && self.char() == ']' {\n            union\n                .push(hir::ClassRange {\n                    start: ']',\n                    end: ']',\n                });\n            if !self.bump_and_bump_space() {\n                return Err(Error::new(ERR_CLASS_UNCLOSED_AFTER_CLOSING));\n            }\n        }\n        loop {\n            self.bump_space();\n            if self.is_done() {\n                return Err(Error::new(ERR_CLASS_UNCLOSED));\n            }\n            match self.char() {\n                '[' => {\n                    if let Some(class) = self.maybe_parse_posix_class() {\n                        union.extend_from_slice(&class.ranges);\n                        continue;\n                    }\n                    return Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED));\n                }\n                ']' => {\n                    self.bump();\n                    let mut class = hir::Class::new(union);\n                    if self.flags().case_insensitive {\n                        class.ascii_case_fold();\n                    }\n                    if negate {\n                        class.negate();\n                    }\n                    return Ok(Hir::class(class));\n                }\n                '&' if self.peek() == Some('&') => {\n                    return Err(Error::new(ERR_CLASS_INTERSECTION_UNSUPPORTED));\n                }\n                '-' if self.peek() == Some('-') => {\n                    return Err(Error::new(ERR_CLASS_DIFFERENCE_UNSUPPORTED));\n                }\n                '~' if self.peek() == Some('~') => {\n                    return Err(Error::new(ERR_CLASS_SYMDIFFERENCE_UNSUPPORTED));\n                }\n                _ => self.parse_class_range(&mut union)?,\n            }\n        }\n    }\n    fn parse_class_range(&self, union: &mut Vec<hir::ClassRange>) -> Result<(), Error> {}\n    fn parse_class_item(&self) -> Result<Hir, Error> {}\n    fn maybe_parse_posix_class(&self) -> Option<hir::Class> {}\n    fn parse_perl_class(&self) -> Hir {}\n    fn hir_dot(&self) -> Hir {}\n    fn hir_anchor_start(&self) -> Hir {}\n    fn hir_anchor_end(&self) -> Hir {}\n    fn hir_char(&self, ch: char) -> Hir {}\n}\nimpl Error {\n    pub(crate) fn new(msg: &'static str) -> Error {\n        Error { msg }\n    }\n}\nimpl Hir {\n    pub(crate) fn parse(config: Config, pattern: &str) -> Result<Hir, Error> {}\n    pub(crate) fn kind(&self) -> &HirKind {}\n    pub(crate) fn is_start_anchored(&self) -> bool {}\n    pub(crate) fn is_match_empty(&self) -> bool {}\n    pub(crate) fn static_explicit_captures_len(&self) -> Option<usize> {}\n    fn fail() -> Hir {}\n    fn empty() -> Hir {}\n    fn char(ch: char) -> Hir {}\n    fn class(class: Class) -> Hir {}\n    fn look(look: Look) -> Hir {}\n    fn repetition(rep: Repetition) -> Hir {}\n    fn capture(cap: Capture) -> Hir {}\n    fn concat(mut subs: Vec<Hir>) -> Hir {\n        if subs.is_empty() {\n            Hir::empty()\n        } else if subs.len() == 1 {\n            subs.pop().unwrap()\n        } else {\n            let is_start_anchored = subs[0].is_start_anchored;\n            let mut is_match_empty = true;\n            let mut static_explicit_captures_len = Some(0usize);\n            for sub in subs.iter() {\n                is_match_empty = is_match_empty && sub.is_match_empty;\n                static_explicit_captures_len = static_explicit_captures_len\n                    .and_then(|len1| { Some((len1, sub.static_explicit_captures_len?)) })\n                    .and_then(|(len1, len2)| Some(len1.saturating_add(len2)));\n            }\n            Hir {\n                kind: HirKind::Concat(subs),\n                is_start_anchored,\n                is_match_empty,\n                static_explicit_captures_len,\n            }\n        }\n    }\n    fn alternation(mut subs: Vec<Hir>) -> Hir {\n        if subs.is_empty() {\n            Hir::fail()\n        } else if subs.len() == 1 {\n            subs.pop().unwrap()\n        } else {\n            let mut it = subs.iter().peekable();\n            let mut is_start_anchored = it\n                .peek()\n                .map_or(false, |sub| sub.is_start_anchored);\n            let mut is_match_empty = it.peek().map_or(false, |sub| sub.is_match_empty);\n            let mut static_explicit_captures_len = it\n                .peek()\n                .and_then(|sub| sub.static_explicit_captures_len);\n            for sub in it {\n                is_start_anchored = is_start_anchored && sub.is_start_anchored;\n                is_match_empty = is_match_empty || sub.is_match_empty;\n                if static_explicit_captures_len != sub.static_explicit_captures_len {\n                    static_explicit_captures_len = None;\n                }\n            }\n            Hir {\n                kind: HirKind::Alternation(subs),\n                is_start_anchored,\n                is_match_empty,\n                static_explicit_captures_len,\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n397 fn parse_inner(&self) -> Result<Hir, Error> {\n398     let depth = self.increment_depth()?;\n399     let mut alternates = vec![];\n400     let mut concat = vec![];\n401     loop {\n402         self.bump_space();\n403         if self.is_done() {\n404             break;\n405         }\n406         match self.char() {\n407             '(' => {\n408                 // Save the old flags and reset them only when we close\n409                 // the group.\n410                 let oldflags = *self.flags.borrow();\n411                 if let Some(sub) = self.parse_group()? {\n412                     concat.push(sub);\n413                     // We only reset them here because if 'parse_group'\n414                     // returns None, then that means it handled a flag\n415                     // directive, e.g., '(?ism)'. And the whole point is\n416                     // that those flags remain active until either disabled\n417                     // or the end of the pattern or current group.\n418                     *self.flags.borrow_mut() = oldflags;\n419                 }\n420                 if self.char.get() != Some(')') {\n421                     return Err(Error::new(ERR_UNCLOSED_GROUP));\n422                 }\n423                 self.bump();\n424             }\n425             ')' => {\n426                 if depth == 0 {\n427                     return Err(Error::new(ERR_UNOPENED_GROUP));\n428                 }\n429                 break;\n430             }\n431             '|' => {\n432                 alternates.push(Hir::concat(core::mem::take(&mut concat)));\n433                 self.bump();\n434             }\n435             '[' => concat.push(self.parse_class()?),\n436             '?' | '*' | '+' => {\n437                 concat = self.parse_uncounted_repetition(concat)?;\n438             }\n439             '{' => {\n440                 concat = self.parse_counted_repetition(concat)?;\n441             }\n442             _ => concat.push(self.parse_primitive()?),\n443         }\n444     }\n445     self.decrement_depth();\n446     alternates.push(Hir::concat(concat));\n447     // N.B. This strips off the \"alternation\" if there's only one branch.\n448     Ok(Hir::alternation(alternates))\n449 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}