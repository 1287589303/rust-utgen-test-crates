{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn gcb(canonical_name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(feature = \"unicode-segment\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PropertyNotFound)\n    }\n    #[cfg(feature = \"unicode-segment\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::grapheme_cluster_break::BY_NAME;\n        property_set(BY_NAME, name).map(hir_class).ok_or(Error::PropertyValueNotFound)\n    }\n    imp(canonical_name)\n}\n#[cfg(feature = \"unicode-segment\")]\nfn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    use crate::unicode_tables::grapheme_cluster_break::BY_NAME;\n    property_set(BY_NAME, name).map(hir_class).ok_or(Error::PropertyValueNotFound)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the Unicode HIR class corresponding to the given grapheme cluster\n/// break property.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given property could not be found, or if the corresponding data is\n/// not available, then an error is returned.\n813 fn gcb(canonical_name: &'static str) -> Result<hir::ClassUnicode, Error> {\n814     #[cfg(not(feature = \"unicode-segment\"))]\n815     fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n816         Err(Error::PropertyNotFound)\n817     }\n818 \n819     #[cfg(feature = \"unicode-segment\")]\n820     fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n821         use crate::unicode_tables::grapheme_cluster_break::BY_NAME;\n822         property_set(BY_NAME, name)\n823             .map(hir_class)\n824             .ok_or(Error::PropertyValueNotFound)\n825     }\n826 \n827     imp(canonical_name)\n828 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}