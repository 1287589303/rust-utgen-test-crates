{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn gcb(canonical_name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(feature = \"unicode-segment\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PropertyNotFound)\n    }\n    #[cfg(feature = \"unicode-segment\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::grapheme_cluster_break::BY_NAME;\n        property_set(BY_NAME, name).map(hir_class).ok_or(Error::PropertyValueNotFound)\n    }\n    imp(canonical_name)\n}\n#[cfg(feature = \"unicode-segment\")]\nfn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    use crate::unicode_tables::grapheme_cluster_break::BY_NAME;\n    property_set(BY_NAME, name).map(hir_class).ok_or(Error::PropertyValueNotFound)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the Unicode HIR class corresponding to the given grapheme cluster\n/// break property.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given property could not be found, or if the corresponding data is\n/// not available, then an error is returned.\n813 fn gcb(canonical_name: &'static str) -> Result<hir::ClassUnicode, Error> {\n814     #[cfg(not(feature = \"unicode-segment\"))]\n815     fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n816         Err(Error::PropertyNotFound)\n817     }\n818 \n819     #[cfg(feature = \"unicode-segment\")]\n820     fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n821         use crate::unicode_tables::grapheme_cluster_break::BY_NAME;\n822         property_set(BY_NAME, name)\n823             .map(hir_class)\n824             .ok_or(Error::PropertyValueNotFound)\n825     }\n826 \n827     imp(canonical_name)\n828 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}