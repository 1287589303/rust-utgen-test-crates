{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/visitor.rs\n// crate name is regex_syntax\nuse alloc::{vec, vec::Vec};\nuse crate::ast::{self, Ast};\nstruct HeapVisitor<'a> {\n    /// A stack of `Ast` nodes. This is roughly analogous to the call stack\n    /// used in a typical recursive visitor.\n    stack: Vec<(&'a Ast, Frame<'a>)>,\n    /// Similar to the `Ast` stack above, but is used only for character\n    /// classes. In particular, character classes embed their own mini\n    /// recursive syntax.\n    stack_class: Vec<(ClassInduct<'a>, ClassFrame<'a>)>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassSetBinaryOp {\n    /// The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.\n    pub span: Span,\n    /// The type of this set operation.\n    pub kind: ClassSetBinaryOpKind,\n    /// The left hand side of the operation.\n    pub lhs: Box<ClassSet>,\n    /// The right hand side of the operation.\n    pub rhs: Box<ClassSet>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassBracketed {\n    /// The span of this class.\n    pub span: Span,\n    /// Whether this class is negated or not. e.g., `[a]` is not negated but\n    /// `[^a]` is.\n    pub negated: bool,\n    /// The type of this set. A set is either a normal union of things, e.g.,\n    /// `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n    pub kind: ClassSet,\n}\nenum ClassInduct<'a> {\n    Item(&'a ast::ClassSetItem),\n    BinaryOp(&'a ast::ClassSetBinaryOp),\n}\nenum ClassFrame<'a> {\n    /// The stack frame used while visiting every child node of a union of\n    /// character class items.\n    Union {\n        /// The child node we are currently visiting.\n        head: &'a ast::ClassSetItem,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [ast::ClassSetItem],\n    },\n    /// The stack frame used while a binary class operation.\n    Binary { op: &'a ast::ClassSetBinaryOp },\n    /// A stack frame allocated just before descending into a binary operator's\n    /// left hand child node.\n    BinaryLHS {\n        op: &'a ast::ClassSetBinaryOp,\n        lhs: &'a ast::ClassSet,\n        rhs: &'a ast::ClassSet,\n    },\n    /// A stack frame allocated just before descending into a binary operator's\n    /// right hand child node.\n    BinaryRHS { op: &'a ast::ClassSetBinaryOp, rhs: &'a ast::ClassSet },\n}\nenum Frame<'a> {\n    /// A stack frame allocated just before descending into a repetition\n    /// operator's child node.\n    Repetition(&'a hir::Repetition),\n    /// A stack frame allocated just before descending into a capture's child\n    /// node.\n    Capture(&'a hir::Capture),\n    /// The stack frame used while visiting every child node of a concatenation\n    /// of expressions.\n    Concat {\n        /// The child node we are currently visiting.\n        head: &'a Hir,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Hir],\n    },\n    /// The stack frame used while visiting every child node of an alternation\n    /// of expressions.\n    Alternation {\n        /// The child node we are currently visiting.\n        head: &'a Hir,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Hir],\n    },\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum Ast {\n    /// An empty regex that matches everything.\n    Empty(Box<Span>),\n    /// A set of flags, e.g., `(?is)`.\n    Flags(Box<SetFlags>),\n    /// A single character literal, which includes escape sequences.\n    Literal(Box<Literal>),\n    /// The \"any character\" class.\n    Dot(Box<Span>),\n    /// A single zero-width assertion.\n    Assertion(Box<Assertion>),\n    /// A single Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    ClassUnicode(Box<ClassUnicode>),\n    /// A single perl character class, e.g., `\\d` or `\\W`.\n    ClassPerl(Box<ClassPerl>),\n    /// A single bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    ClassBracketed(Box<ClassBracketed>),\n    /// A repetition operator applied to an arbitrary regular expression.\n    Repetition(Box<Repetition>),\n    /// A grouped regular expression.\n    Group(Box<Group>),\n    /// An alternation of regular expressions.\n    Alternation(Box<Alternation>),\n    /// A concatenation of regular expressions.\n    Concat(Box<Concat>),\n}\nenum Frame<'a> {\n    /// A stack frame allocated just before descending into a repetition\n    /// operator's child node.\n    Repetition(&'a ast::Repetition),\n    /// A stack frame allocated just before descending into a group's child\n    /// node.\n    Group(&'a ast::Group),\n    /// The stack frame used while visiting every child node of a concatenation\n    /// of expressions.\n    Concat {\n        /// The child node we are currently visiting.\n        head: &'a Ast,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Ast],\n    },\n    /// The stack frame used while visiting every child node of an alternation\n    /// of expressions.\n    Alternation {\n        /// The child node we are currently visiting.\n        head: &'a Ast,\n        /// The remaining child nodes to visit (which may be empty).\n        tail: &'a [Ast],\n    },\n}\nimpl<'a> HeapVisitor<'a> {\n    fn new() -> HeapVisitor<'a> {}\n    fn visit<V: Visitor>(\n        &mut self,\n        mut ast: &'a Ast,\n        mut visitor: V,\n    ) -> Result<V::Output, V::Err> {}\n    fn induct<V: Visitor>(\n        &mut self,\n        ast: &'a Ast,\n        visitor: &mut V,\n    ) -> Result<Option<Frame<'a>>, V::Err> {}\n    fn pop(&self, induct: Frame<'a>) -> Option<Frame<'a>> {}\n    fn visit_class<V: Visitor>(\n        &mut self,\n        ast: &'a ast::ClassBracketed,\n        visitor: &mut V,\n    ) -> Result<(), V::Err> {\n        let mut ast = ClassInduct::from_bracketed(ast);\n        loop {\n            self.visit_class_pre(&ast, visitor)?;\n            if let Some(x) = self.induct_class(&ast) {\n                let child = x.child();\n                self.stack_class.push((ast, x));\n                ast = child;\n                continue;\n            }\n            self.visit_class_post(&ast, visitor)?;\n            loop {\n                let (post_ast, frame) = match self.stack_class.pop() {\n                    None => return Ok(()),\n                    Some((post_ast, frame)) => (post_ast, frame),\n                };\n                if let Some(x) = self.pop_class(frame) {\n                    if let ClassFrame::BinaryRHS { ref op, .. } = x {\n                        visitor.visit_class_set_binary_op_in(op)?;\n                    }\n                    ast = x.child();\n                    self.stack_class.push((post_ast, x));\n                    break;\n                }\n                self.visit_class_post(&post_ast, visitor)?;\n            }\n        }\n    }\n    fn visit_class_pre<V: Visitor>(\n        &self,\n        ast: &ClassInduct<'a>,\n        visitor: &mut V,\n    ) -> Result<(), V::Err> {}\n    fn visit_class_post<V: Visitor>(\n        &self,\n        ast: &ClassInduct<'a>,\n        visitor: &mut V,\n    ) -> Result<(), V::Err> {}\n    fn induct_class(&self, ast: &ClassInduct<'a>) -> Option<ClassFrame<'a>> {\n        match *ast {\n            ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x)) => {\n                match x.kind {\n                    ast::ClassSet::Item(ref item) => {\n                        Some(ClassFrame::Union {\n                            head: item,\n                            tail: &[],\n                        })\n                    }\n                    ast::ClassSet::BinaryOp(ref op) => Some(ClassFrame::Binary { op }),\n                }\n            }\n            ClassInduct::Item(&ast::ClassSetItem::Union(ref x)) => {\n                if x.items.is_empty() {\n                    None\n                } else {\n                    Some(ClassFrame::Union {\n                        head: &x.items[0],\n                        tail: &x.items[1..],\n                    })\n                }\n            }\n            ClassInduct::BinaryOp(op) => {\n                Some(ClassFrame::BinaryLHS {\n                    op,\n                    lhs: &op.lhs,\n                    rhs: &op.rhs,\n                })\n            }\n            _ => None,\n        }\n    }\n    fn pop_class(&self, induct: ClassFrame<'a>) -> Option<ClassFrame<'a>> {\n        match induct {\n            ClassFrame::Union { tail, .. } => {\n                if tail.is_empty() {\n                    None\n                } else {\n                    Some(ClassFrame::Union {\n                        head: &tail[0],\n                        tail: &tail[1..],\n                    })\n                }\n            }\n            ClassFrame::Binary { .. } => None,\n            ClassFrame::BinaryLHS { op, rhs, .. } => {\n                Some(ClassFrame::BinaryRHS { op, rhs })\n            }\n            ClassFrame::BinaryRHS { .. } => None,\n        }\n    }\n}\nimpl<'a> ClassInduct<'a> {\n    fn from_bracketed(ast: &'a ast::ClassBracketed) -> ClassInduct<'a> {\n        ClassInduct::from_set(&ast.kind)\n    }\n    fn from_set(ast: &'a ast::ClassSet) -> ClassInduct<'a> {}\n}\nimpl<'a> ClassFrame<'a> {\n    fn child(&self) -> ClassInduct<'a> {\n        match *self {\n            ClassFrame::Union { head, .. } => ClassInduct::Item(head),\n            ClassFrame::Binary { op, .. } => ClassInduct::BinaryOp(op),\n            ClassFrame::BinaryLHS { ref lhs, .. } => ClassInduct::from_set(lhs),\n            ClassFrame::BinaryRHS { ref rhs, .. } => ClassInduct::from_set(rhs),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n312 fn visit_class<V: Visitor>(\n313     &mut self,\n314     ast: &'a ast::ClassBracketed,\n315     visitor: &mut V,\n316 ) -> Result<(), V::Err> {\n317     let mut ast = ClassInduct::from_bracketed(ast);\n318     loop {\n319         self.visit_class_pre(&ast, visitor)?;\n320         if let Some(x) = self.induct_class(&ast) {\n321             let child = x.child();\n322             self.stack_class.push((ast, x));\n323             ast = child;\n324             continue;\n325         }\n326         self.visit_class_post(&ast, visitor)?;\n327 \n328         // At this point, we now try to pop our call stack until it is\n329         // either empty or we hit another inductive case.\n330         loop {\n331             let (post_ast, frame) = match self.stack_class.pop() {\n332                 None => return Ok(()),\n333                 Some((post_ast, frame)) => (post_ast, frame),\n334             };\n335             // If this is a union or a binary op, then we might have\n336             // additional inductive steps to process.\n337             if let Some(x) = self.pop_class(frame) {\n338                 if let ClassFrame::BinaryRHS { ref op, .. } = x {\n339                     visitor.visit_class_set_binary_op_in(op)?;\n340                 }\n341                 ast = x.child();\n342                 self.stack_class.push((post_ast, x));\n343                 break;\n344             }\n345             // Otherwise, we've finished visiting all the child nodes for\n346             // this class node, so we can post visit it now.\n347             self.visit_class_post(&post_ast, visitor)?;\n348         }\n349     }\n350 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}