{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\n#[derive(Debug)]\npub struct RegexBuilder {\n    pattern: String,\n    hir_config: hir::Config,\n    nfa_config: nfa::Config,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, limit: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {\n        self.hir_config.nest_limit = limit;\n        self\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the nesting limit for this parser.\n///\n/// The nesting limit controls how deep the abstract syntax tree is allowed\n/// to be. If the AST exceeds the given limit (e.g., with too many nested\n/// groups), then an error is returned by the parser.\n///\n/// The purpose of this limit is to act as a heuristic to prevent stack\n/// overflow for consumers that do structural induction on an AST using\n/// explicit recursion. While this crate never does this (instead using\n/// constant stack space and moving the call stack to the heap), other\n/// crates may.\n///\n/// This limit is not checked until the entire AST is parsed. Therefore, if\n/// callers want to put a limit on the amount of heap space used, then they\n/// should impose a limit on the length, in bytes, of the concrete pattern\n/// string. In particular, this is viable since this parser implementation\n/// will limit itself to heap space proportional to the length of the\n/// pattern string. See also the [untrusted inputs](crate#untrusted-input)\n/// section in the top-level crate documentation for more information about\n/// this.\n///\n/// Note that a nest limit of `0` will return a nest limit error for most\n/// patterns but not all. For example, a nest limit of `0` permits `a` but\n/// not `ab`, since `ab` requires an explicit concatenation, which results\n/// in a nest depth of `1`. In general, a nest limit is not something that\n/// manifests in an obvious way in the concrete syntax, therefore, it\n/// should not be used in a granular way.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::RegexBuilder;\n///\n/// assert!(RegexBuilder::new(r\"\").nest_limit(0).build().is_ok());\n/// assert!(RegexBuilder::new(r\"a\").nest_limit(0).build().is_ok());\n/// assert!(RegexBuilder::new(r\"(a)\").nest_limit(0).build().is_err());\n/// ```\n2972 pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {\n2973     self.hir_config.nest_limit = limit;\n2974     self\n2975 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}