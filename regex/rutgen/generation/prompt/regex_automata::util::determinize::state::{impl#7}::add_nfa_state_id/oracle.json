{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\n#[derive(Clone)]\npub(crate) struct StateBuilderNFA {\n    repr: Vec<u8>,\n    prev_nfa_state_id: StateID,\n}\nstruct ReprVec<'a>(&'a mut Vec<u8>);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl StateBuilderNFA {\n    pub(crate) fn to_state(&self) -> State {}\n    pub(crate) fn clear(self) -> StateBuilderEmpty {}\n    pub(crate) fn look_need(&self) -> LookSet {}\n    pub(crate) fn set_look_have(&mut self, set: impl FnMut(LookSet) -> LookSet) {}\n    pub(crate) fn set_look_need(&mut self, set: impl FnMut(LookSet) -> LookSet) {}\n    pub(crate) fn add_nfa_state_id(&mut self, sid: StateID) {\n        ReprVec(&mut self.repr).add_nfa_state_id(&mut self.prev_nfa_state_id, sid)\n    }\n    pub(crate) fn as_bytes(&self) -> &[u8] {}\n    fn repr(&self) -> Repr<'_> {}\n    fn repr_vec(&mut self) -> ReprVec<'_> {}\n}\nimpl<'a> ReprVec<'a> {\n    fn set_is_match(&mut self) {}\n    fn set_has_pattern_ids(&mut self) {}\n    fn set_is_from_word(&mut self) {}\n    fn set_is_half_crlf(&mut self) {}\n    fn look_have(&self) -> LookSet {}\n    fn look_need(&self) -> LookSet {}\n    fn set_look_have(&mut self, mut set: impl FnMut(LookSet) -> LookSet) {}\n    fn set_look_need(&mut self, mut set: impl FnMut(LookSet) -> LookSet) {}\n    fn add_match_pattern_id(&mut self, pid: PatternID) {}\n    fn close_match_pattern_ids(&mut self) {}\n    fn add_nfa_state_id(&mut self, prev: &mut StateID, sid: StateID) {\n        let delta = sid.as_i32() - prev.as_i32();\n        write_vari32(self.0, delta);\n        *prev = sid;\n    }\n    fn repr(&self) -> Repr<'_> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n315 pub(crate) fn add_nfa_state_id(&mut self, sid: StateID) {\n316     ReprVec(&mut self.repr)\n317         .add_nfa_state_id(&mut self.prev_nfa_state_id, sid)\n318 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}