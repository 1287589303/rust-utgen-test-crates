{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Debug)]\npub struct CaptureMatches<'r, 'h> {\n    haystack: &'h str,\n    it: meta::CapturesMatches<'r, 'h>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {\n        CaptureMatches {\n            haystack,\n            it: self.meta.captures_iter(haystack),\n        }\n    }\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator that yields successive non-overlapping matches in\n/// the given haystack. The iterator yields values of type [`Captures`].\n///\n/// This is the same as [`Regex::find_iter`], but instead of only providing\n/// access to the overall match, each value yield includes access to the\n/// matches of all capture groups in the regex. Reporting this extra match\n/// data is potentially costly, so callers should only use `captures_iter`\n/// over `find_iter` when they actually need access to the capture group\n/// matches.\n///\n/// # Time complexity\n///\n/// Note that since `captures_iter` runs potentially many searches on the\n/// haystack and since each search has worst case `O(m * n)` time\n/// complexity, the overall worst case time complexity for iteration is\n/// `O(m * n^2)`.\n///\n/// # Example\n///\n/// We can use this to find all movie titles and their release years in\n/// some haystack, where the movie is formatted like \"'Title' (xxxx)\":\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();\n/// let hay = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n/// let mut movies = vec![];\n/// for (_, [title, year]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     movies.push((title, year.parse::<i64>()?));\n/// }\n/// assert_eq!(movies, vec![\n///     (\"Citizen Kane\", 1941),\n///     (\"The Wizard of Oz\", 1939),\n///     (\"M\", 1931),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Or with named groups:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();\n/// let hay = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n/// let mut it = re.captures_iter(hay);\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], \"Citizen Kane\");\n/// assert_eq!(&caps[\"year\"], \"1941\");\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], \"The Wizard of Oz\");\n/// assert_eq!(&caps[\"year\"], \"1939\");\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], \"M\");\n/// assert_eq!(&caps[\"year\"], \"1931\");\n/// ```\n420 pub fn captures_iter<'r, 'h>(\n421     &'r self,\n422     haystack: &'h str,\n423 ) -> CaptureMatches<'r, 'h> {\n424     CaptureMatches { haystack, it: self.meta.captures_iter(haystack) }\n425 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}