{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/error.rs\n// crate name is regex\nuse alloc::string::{String, ToString};\nuse regex_automata::meta;\n#[non_exhaustive]\n#[derive(Clone, PartialEq)]\npub enum Error {\n    /// A syntax error.\n    Syntax(String),\n    /// The compiled program exceeded the set size\n    /// limit. The argument is the size limit imposed by\n    /// [`RegexBuilder::size_limit`](crate::RegexBuilder::size_limit). Even\n    /// when not configured explicitly, it defaults to a reasonable limit.\n    ///\n    /// If you're getting this error, it occurred because your regex has been\n    /// compiled to an intermediate state that is too big. It is important to\n    /// note that exceeding this limit does _not_ mean the regex is too big to\n    /// _work_, but rather, the regex is big enough that it may wind up being\n    /// surprisingly slow when used in a search. In other words, this error is\n    /// meant to be a practical heuristic for avoiding a performance footgun,\n    /// and especially so for the case where the regex pattern is coming from\n    /// an untrusted source.\n    ///\n    /// There are generally two ways to move forward if you hit this error.\n    /// The first is to find some way to use a smaller regex. The second is to\n    /// increase the size limit via `RegexBuilder::size_limit`. However, if\n    /// your regex pattern is not from a trusted source, then neither of these\n    /// approaches may be appropriate. Instead, you'll have to determine just\n    /// how big of a regex you want to allow.\n    CompiledTooBig(usize),\n}\nimpl Error {\n    pub(crate) fn from_meta_build_error(err: meta::BuildError) -> Error {\n        if let Some(size_limit) = err.size_limit() {\n            Error::CompiledTooBig(size_limit)\n        } else if let Some(ref err) = err.syntax_error() {\n            Error::Syntax(err.to_string())\n        } else {\n            Error::Syntax(err.to_string())\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n35 pub(crate) fn from_meta_build_error(err: meta::BuildError) -> Error {\n36     if let Some(size_limit) = err.size_limit() {\n37         Error::CompiledTooBig(size_limit)\n38     } else if let Some(ref err) = err.syntax_error() {\n39         Error::Syntax(err.to_string())\n40     } else {\n41         // This is a little suspect. Technically there are more ways for\n42         // a meta regex to fail to build other than \"exceeded size limit\"\n43         // and \"syntax error.\" For example, if there are too many states\n44         // or even too many patterns. But in practice this is probably\n45         // good enough. The worst thing that happens is that Error::Syntax\n46         // represents an error that isn't technically a syntax error, but\n47         // the actual message will still be shown. So... it's not too bad.\n48         //\n49         // We really should have made the Error type in the regex crate\n50         // completely opaque. Rookie mistake.\n51         Error::Syntax(err.to_string())\n52     }\n53 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}