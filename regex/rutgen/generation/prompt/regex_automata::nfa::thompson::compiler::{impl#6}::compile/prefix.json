{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Debug)]\nstruct Utf8Compiler<'a> {\n    builder: &'a mut Builder,\n    state: &'a mut Utf8State,\n    target: StateID,\n}\n#[derive(Clone, Debug)]\npub struct Utf8BoundedMap {\n    /// The current version of this map. Only entries with matching versions\n    /// are considered during lookups. If an entry is found with a mismatched\n    /// version, then the map behaves as if the entry does not exist.\n    ///\n    /// This makes it possible to clear the map by simply incrementing the\n    /// version number instead of actually deallocating any storage.\n    version: u16,\n    /// The total number of entries this map can store.\n    capacity: usize,\n    /// The actual entries, keyed by hash. Collisions between different states\n    /// result in the old state being dropped.\n    map: Vec<Utf8BoundedEntry>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Builder {\n    /// The ID of the pattern that we're currently building.\n    ///\n    /// Callers are required to set (and unset) this by calling\n    /// {start,finish}_pattern. Otherwise, most methods will panic.\n    pattern_id: Option<PatternID>,\n    /// A sequence of intermediate NFA states. Once a state is added to this\n    /// sequence, it is assigned a state ID equivalent to its index. Once a\n    /// state is added, it is still expected to be mutated, e.g., to set its\n    /// transition to a state that didn't exist at the time it was added.\n    states: Vec<State>,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// A map from pattern ID to capture group index to name. (If no name\n    /// exists, then a None entry is present. Thus, all capturing groups are\n    /// present in this mapping.)\n    ///\n    /// The outer vec is indexed by pattern ID, while the inner vec is indexed\n    /// by capture index offset for the corresponding pattern.\n    ///\n    /// The first capture group for each pattern is always unnamed and is thus\n    /// always None.\n    captures: Vec<Vec<Option<Arc<str>>>>,\n    /// The combined memory used by each of the 'State's in 'states'. This\n    /// only includes heap usage by each state, and not the size of the state\n    /// itself. In other words, this tracks heap memory used that isn't\n    /// captured via `size_of::<State>() * states.len()`.\n    memory_states: usize,\n    /// Whether this NFA only matches UTF-8 and whether regex engines using\n    /// this NFA for searching should report empty matches that split a\n    /// codepoint.\n    utf8: bool,\n    /// Whether this NFA should be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to use for look-around assertions.\n    look_matcher: LookMatcher,\n    /// A size limit to respect when building an NFA. If the total heap memory\n    /// of the intermediate NFA states exceeds (or would exceed) this amount,\n    /// then an error is returned.\n    size_limit: Option<usize>,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    #[cfg(feature = \"dfa-build\")]\n    dfa: dense::Builder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    ast: ast::parse::ParserBuilder,\n    hir: hir::translate::TranslatorBuilder,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\nstruct Utf8State {\n    compiled: Utf8BoundedMap,\n    uncompiled: Vec<Utf8Node>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    config: Config,\n    #[cfg(feature = \"syntax\")]\n    thompson: thompson::Compiler,\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    dfa: dfa::Builder,\n}\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\nimpl<'a> Utf8Compiler<'a> {\n    fn new(\n        builder: &'a mut Builder,\n        state: &'a mut Utf8State,\n    ) -> Result<Utf8Compiler<'a>, BuildError> {}\n    fn finish(&mut self) -> Result<ThompsonRef, BuildError> {}\n    fn add(&mut self, ranges: &[Utf8Range]) -> Result<(), BuildError> {}\n    fn compile_from(&mut self, from: usize) -> Result<(), BuildError> {}\n    fn compile(&mut self, node: Vec<Transition>) -> Result<StateID, BuildError> {\n        let hash = self.state.compiled.hash(&node);\n        if let Some(id) = self.state.compiled.get(&node, hash) {\n            return Ok(id);\n        }\n        let id = self.builder.add_sparse(node.clone())?;\n        self.state.compiled.set(node, hash, id);\n        Ok(id)\n    }\n    fn add_suffix(&mut self, ranges: &[Utf8Range]) {}\n    fn add_empty(&mut self) {}\n    fn pop_freeze(&mut self, next: StateID) -> Vec<Transition> {}\n    fn pop_root(&mut self) -> Vec<Transition> {}\n    fn top_last_freeze(&mut self, next: StateID) {}\n}\nimpl Utf8BoundedMap {\n    pub fn new(capacity: usize) -> Utf8BoundedMap {}\n    pub fn clear(&mut self) {}\n    pub fn hash(&self, key: &[Transition]) -> usize {\n        let mut h = INIT;\n        for t in key {\n            h = (h ^ u64::from(t.start)).wrapping_mul(PRIME);\n            h = (h ^ u64::from(t.end)).wrapping_mul(PRIME);\n            h = (h ^ t.next.as_u64()).wrapping_mul(PRIME);\n        }\n        (h % self.map.len().as_u64()).as_usize()\n    }\n    pub fn get(&mut self, key: &[Transition], hash: usize) -> Option<StateID> {\n        let entry = &self.map[hash];\n        if entry.version != self.version {\n            return None;\n        }\n        if entry.key != key {\n            return None;\n        }\n        Some(entry.val)\n    }\n    pub fn set(&mut self, key: Vec<Transition>, hash: usize, state_id: StateID) {\n        self.map[hash] = Utf8BoundedEntry {\n            version: self.version,\n            key,\n            val: state_id,\n        };\n    }\n}\nimpl Builder {\n    pub fn new() -> Builder {}\n    pub fn clear(&mut self) {}\n    pub fn build(\n        &self,\n        start_anchored: StateID,\n        start_unanchored: StateID,\n    ) -> Result<NFA, BuildError> {}\n    pub fn start_pattern(&mut self) -> Result<PatternID, BuildError> {}\n    pub fn finish_pattern(\n        &mut self,\n        start_id: StateID,\n    ) -> Result<PatternID, BuildError> {}\n    pub fn current_pattern_id(&self) -> PatternID {}\n    pub fn pattern_len(&self) -> usize {}\n    pub fn add_empty(&mut self) -> Result<StateID, BuildError> {}\n    pub fn add_union(\n        &mut self,\n        alternates: Vec<StateID>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_union_reverse(\n        &mut self,\n        alternates: Vec<StateID>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_range(&mut self, trans: Transition) -> Result<StateID, BuildError> {}\n    pub fn add_sparse(\n        &mut self,\n        transitions: Vec<Transition>,\n    ) -> Result<StateID, BuildError> {\n        self.add(State::Sparse { transitions })\n    }\n    pub fn add_look(\n        &mut self,\n        next: StateID,\n        look: Look,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_capture_start(\n        &mut self,\n        next: StateID,\n        group_index: u32,\n        name: Option<Arc<str>>,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_capture_end(\n        &mut self,\n        next: StateID,\n        group_index: u32,\n    ) -> Result<StateID, BuildError> {}\n    pub fn add_fail(&mut self) -> Result<StateID, BuildError> {}\n    pub fn add_match(&mut self) -> Result<StateID, BuildError> {}\n    fn add(&mut self, state: State) -> Result<StateID, BuildError> {}\n    pub fn patch(&mut self, from: StateID, to: StateID) -> Result<(), BuildError> {}\n    pub fn set_utf8(&mut self, yes: bool) {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn set_reverse(&mut self, yes: bool) {}\n    pub fn get_reverse(&self) -> bool {}\n    pub fn set_look_matcher(&mut self, m: LookMatcher) {}\n    pub fn get_look_matcher(&self) -> &LookMatcher {}\n    pub fn set_size_limit(&mut self, limit: Option<usize>) -> Result<(), BuildError> {}\n    pub fn get_size_limit(&self) -> Option<usize> {}\n    pub fn memory_usage(&self) -> usize {}\n    fn check_size_limit(&self) -> Result<(), BuildError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1806 fn compile(\n1807     &mut self,\n1808     node: Vec<Transition>,\n1809 ) -> Result<StateID, BuildError> {\n1810     let hash = self.state.compiled.hash(&node);\n1811     if let Some(id) = self.state.compiled.get(&node, hash) {\n1812         return Ok(id);\n1813     }\n1814     let id = self.builder.add_sparse(node.clone())?;\n1815     self.state.compiled.set(node, hash, id);\n1816     Ok(id)\n1817 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}