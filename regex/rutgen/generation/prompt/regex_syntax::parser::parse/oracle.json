{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/parser.rs\n// crate name is regex_syntax\nuse crate::{ast, hir, Error};\n#[derive(Clone, Debug)]\npub struct Parser {\n    ast: ast::parse::Parser,\n    hir: hir::translate::Translator,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[non_exhaustive]\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum Error {\n    /// An error that occurred while translating concrete syntax into abstract\n    /// syntax (AST).\n    Parse(ast::Error),\n    /// An error that occurred while translating abstract syntax into a high\n    /// level intermediate representation (HIR).\n    Translate(hir::Error),\n}\nimpl Parser {\n    pub fn new() -> Parser {\n        ParserBuilder::new().build()\n    }\n    pub fn parse(&mut self, pattern: &str) -> Result<hir::Hir, Error> {\n        let ast = self.ast.parse(pattern)?;\n        let hir = self.hir.translate(pattern, &ast)?;\n        Ok(hir)\n    }\n}\npub fn parse(pattern: &str) -> Result<hir::Hir, Error> {\n    Parser::new().parse(pattern)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// A convenience routine for parsing a regex using default options.\n///\n/// This is equivalent to `Parser::new().parse(pattern)`.\n///\n/// If you need to set non-default options, then use a [`ParserBuilder`].\n///\n/// This routine returns an [`Hir`](hir::Hir) value. Namely, it automatically\n/// parses the pattern as an [`Ast`](ast::Ast) and then invokes the translator\n/// to convert the `Ast` into an `Hir`. If you need access to the `Ast`, then\n/// you should use a [`ast::parse::Parser`].\n13 pub fn parse(pattern: &str) -> Result<hir::Hir, Error> {\n14     Parser::new().parse(pattern)\n15 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}