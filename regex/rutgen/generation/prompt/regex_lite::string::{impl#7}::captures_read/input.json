{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone, Debug)]\npub struct CaptureLocations(Vec<Option<NonMaxUsize>>);\nimpl Regex {\n    #[inline]\n    pub fn shortest_match(&self, haystack: &str) -> Option<usize> {}\n    #[inline]\n    pub fn shortest_match_at(&self, haystack: &str, start: usize) -> Option<usize> {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {}\n    #[inline]\n    pub fn find_at<'h>(&self, haystack: &'h str, start: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_at<'h>(\n        &self,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_read<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n    ) -> Option<Match<'h>> {\n        self.captures_read_at(locs, haystack, 0)\n    }\n    #[inline]\n    pub fn captures_read_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {\n        let mut cache = self.pool.get();\n        let matched = self\n            .pikevm\n            .search(\n                &mut cache,\n                haystack.as_bytes(),\n                start,\n                haystack.len(),\n                false,\n                &mut locs.0,\n            );\n        if !matched {\n            return None;\n        }\n        let (start, end) = locs.get(0).unwrap();\n        Some(Match::new(haystack, start, end))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This is like [`Regex::captures`], but writes the byte offsets of each\n/// capture group match into the locations given.\n///\n/// A [`CaptureLocations`] stores the same byte offsets as a [`Captures`],\n/// but does *not* store a reference to the haystack. This makes its API\n/// a bit lower level and less convenience. But in exchange, callers\n/// may allocate their own `CaptureLocations` and reuse it for multiple\n/// searches. This may be helpful if allocating a `Captures` shows up in a\n/// profile as too costly.\n///\n/// To create a `CaptureLocations` value, use the\n/// [`Regex::capture_locations`] method.\n///\n/// This also returns the overall match if one was found. When a match is\n/// found, its offsets are also always stored in `locs` at index `0`.\n///\n/// # Panics\n///\n/// This routine may panic if the given `CaptureLocations` was not created\n/// by this regex.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"^([a-z]+)=(\\S*)$\").unwrap();\n/// let mut locs = re.capture_locations();\n/// assert!(re.captures_read(&mut locs, \"id=foo123\").is_some());\n/// assert_eq!(Some((0, 9)), locs.get(0));\n/// assert_eq!(Some((0, 2)), locs.get(1));\n/// assert_eq!(Some((3, 9)), locs.get(2));\n/// ```\n1210 pub fn captures_read<'h>(\n1211     &self,\n1212     locs: &mut CaptureLocations,\n1213     haystack: &'h str,\n1214 ) -> Option<Match<'h>> {\n1215     self.captures_read_at(locs, haystack, 0)\n1216 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}