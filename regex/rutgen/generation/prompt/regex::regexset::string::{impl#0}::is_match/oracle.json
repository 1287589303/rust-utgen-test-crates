{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regexset/string.rs\n// crate name is regex\nuse alloc::string::String;\nuse regex_automata::{meta, Input, PatternID, PatternSet, PatternSetIter};\nuse crate::{Error, RegexSetBuilder};\n#[derive(Clone)]\npub struct RegexSet {\n    pub(crate) meta: meta::Regex,\n    pub(crate) patterns: alloc::sync::Arc<[String]>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl RegexSet {\n    pub fn new<I, S>(exprs: I) -> Result<RegexSet, Error>\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    pub fn empty() -> RegexSet {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {\n        self.is_match_at(haystack, 0)\n    }\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {\n        self.meta.is_match(Input::new(haystack).span(start..haystack.len()))\n    }\n    #[inline]\n    pub fn matches(&self, haystack: &str) -> SetMatches {}\n    #[inline]\n    pub fn matches_at(&self, haystack: &str, start: usize) -> SetMatches {}\n    #[inline]\n    pub fn matches_read_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &str,\n        start: usize,\n    ) -> bool {}\n    #[inline]\n    pub fn read_matches_at(\n        &self,\n        matches: &mut [bool],\n        haystack: &str,\n        start: usize,\n    ) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn patterns(&self) -> &[String] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if one of the regexes in this set matches\n/// the haystack given.\n///\n/// This method should be preferred if you only need to test whether any\n/// of the regexes in the set should match, but don't care about *which*\n/// regexes matched. This is because the underlying matching engine will\n/// quit immediately after seeing the first match instead of continuing to\n/// find all matches.\n///\n/// Note that as with searches using [`Regex`](crate::Regex), the\n/// expression is unanchored by default. That is, if the regex does not\n/// start with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\n/// to match anywhere in the haystack.\n///\n/// # Example\n///\n/// Tests whether a set matches somewhere in a haystack:\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();\n/// assert!(set.is_match(\"foo\"));\n/// assert!(!set.is_match(\"â˜ƒ\"));\n/// ```\n210 pub fn is_match(&self, haystack: &str) -> bool {\n211     self.is_match_at(haystack, 0)\n212 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}