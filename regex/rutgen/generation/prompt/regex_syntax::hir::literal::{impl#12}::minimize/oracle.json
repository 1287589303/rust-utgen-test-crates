{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/literal.rs\n// crate name is regex_syntax\nuse core::{cmp, mem, num::NonZeroUsize};\nuse alloc::{vec, vec::Vec};\nuse crate::hir::{self, Hir};\n#[derive(Debug)]\nstruct PreferenceTrie {\n    /// The states in this trie. The index of a state in this vector is its ID.\n    states: Vec<State>,\n    /// This vec indicates which states are match states. It always has\n    /// the same length as `states` and is indexed by the same state ID.\n    /// A state with identifier `sid` is a match state if and only if\n    /// `matches[sid].is_some()`. The option contains the index of the literal\n    /// corresponding to the match. The index is offset by 1 so that it fits in\n    /// a NonZeroUsize.\n    matches: Vec<Option<NonZeroUsize>>,\n    /// The index to allocate to the next literal added to this trie. Starts at\n    /// 1 and increments by 1 for every literal successfully added to the trie.\n    next_literal_index: usize,\n}\n#[derive(Clone, Eq, PartialEq, PartialOrd, Ord)]\npub struct Literal {\n    bytes: Vec<u8>,\n    exact: bool,\n}\n#[derive(Debug, Default)]\nstruct State {\n    /// Sparse representation of the transitions out of this state. Transitions\n    /// are sorted by byte. There is at most one such transition for any\n    /// particular byte.\n    trans: Vec<(u8, usize)>,\n}\nimpl PreferenceTrie {\n    fn minimize(literals: &mut Vec<Literal>, keep_exact: bool) {\n        let mut trie = PreferenceTrie {\n            states: vec![],\n            matches: vec![],\n            next_literal_index: 1,\n        };\n        let mut make_inexact = vec![];\n        literals\n            .retain_mut(|lit| match trie.insert(lit.as_bytes()) {\n                Ok(_) => true,\n                Err(i) => {\n                    if !keep_exact {\n                        make_inexact.push(i.checked_sub(1).unwrap());\n                    }\n                    false\n                }\n            });\n        for i in make_inexact {\n            literals[i].make_inexact();\n        }\n    }\n    fn insert(&mut self, bytes: &[u8]) -> Result<usize, usize> {}\n    fn root(&mut self) -> usize {}\n    fn create_state(&mut self) -> usize {}\n}\nimpl Literal {\n    #[inline]\n    pub fn exact<B: Into<Vec<u8>>>(bytes: B) -> Literal {}\n    #[inline]\n    pub fn inexact<B: Into<Vec<u8>>>(bytes: B) -> Literal {}\n    #[inline]\n    pub fn as_bytes(&self) -> &[u8] {}\n    #[inline]\n    pub fn into_bytes(self) -> Vec<u8> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_exact(&self) -> bool {}\n    #[inline]\n    pub fn make_inexact(&mut self) {\n        self.exact = false;\n    }\n    #[inline]\n    pub fn reverse(&mut self) {}\n    #[inline]\n    pub fn extend(&mut self, lit: &Literal) {}\n    #[inline]\n    pub fn keep_first_bytes(&mut self, len: usize) {}\n    #[inline]\n    pub fn keep_last_bytes(&mut self, len: usize) {}\n    fn is_poisonous(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Minimizes the given sequence of literals while preserving preference\n/// order semantics.\n///\n/// When `keep_exact` is true, the exactness of every literal retained is\n/// kept. This is useful when dealing with a fully extracted `Seq` that\n/// only contains exact literals. In that case, we can keep all retained\n/// literals as exact because we know we'll never need to match anything\n/// after them and because any removed literals are guaranteed to never\n/// match.\n2237 fn minimize(literals: &mut Vec<Literal>, keep_exact: bool) {\n2238     let mut trie = PreferenceTrie {\n2239         states: vec![],\n2240         matches: vec![],\n2241         next_literal_index: 1,\n2242     };\n2243     let mut make_inexact = vec![];\n2244     literals.retain_mut(|lit| match trie.insert(lit.as_bytes()) {\n2245         Ok(_) => true,\n2246         Err(i) => {\n2247             if !keep_exact {\n2248                 make_inexact.push(i.checked_sub(1).unwrap());\n2249             }\n2250             false\n2251         }\n2252     });\n2253     for i in make_inexact {\n2254         literals[i].make_inexact();\n2255     }\n2256 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}