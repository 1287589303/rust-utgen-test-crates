{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\n#[derive(Debug)]\npub struct RegexBuilder {\n    pattern: String,\n    hir_config: hir::Config,\n    nfa_config: nfa::Config,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {\n        RegexBuilder {\n            pattern: pattern.to_string(),\n            hir_config: hir::Config::default(),\n            nfa_config: nfa::Config::default(),\n        }\n    }\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, limit: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\nimpl Default for Config {\n    fn default() -> Config {\n        Config {\n            size_limit: Some(10 * (1 << 20)),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new builder with a default configuration for the given\n/// pattern.\n///\n/// If the pattern is invalid or exceeds the configured size limits, then\n/// an error will be returned when [`RegexBuilder::build`] is called.\n2640 pub fn new(pattern: &str) -> RegexBuilder {\n2641     RegexBuilder {\n2642         pattern: pattern.to_string(),\n2643         hir_config: hir::Config::default(),\n2644         nfa_config: nfa::Config::default(),\n2645     }\n2646 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}