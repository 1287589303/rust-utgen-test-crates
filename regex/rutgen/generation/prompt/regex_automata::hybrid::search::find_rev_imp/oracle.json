{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/hybrid/search.rs\n// crate name is regex_automata\nuse crate::{\n    hybrid::{\n        dfa::{Cache, OverlappingState, DFA},\n        id::LazyStateID,\n    },\n    util::{prefilter::Prefilter, search::{HalfMatch, Input, MatchError, Span}},\n};\n#[derive(Clone, Debug)]\npub struct DFA {\n    config: Config,\n    nfa: thompson::NFA,\n    stride2: usize,\n    start_map: StartByteMap,\n    classes: ByteClasses,\n    quitset: ByteSet,\n    cache_capacity: usize,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\npub struct LazyStateID(u32);\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// The transition table.\n    ///\n    /// Given a `current` LazyStateID and an `input` byte, the next state can\n    /// be computed via `trans[untagged(current) + equiv_class(input)]`. Notice\n    /// that no multiplication is used. That's because state identifiers are\n    /// \"premultiplied.\"\n    ///\n    /// Note that the next state may be the \"unknown\" state. In this case, the\n    /// next state is not known and determinization for `current` on `input`\n    /// must be performed.\n    trans: Vec<LazyStateID>,\n    /// The starting states for this DFA.\n    ///\n    /// These are computed lazily. Initially, these are all set to \"unknown\"\n    /// lazy state IDs.\n    ///\n    /// When 'starts_for_each_pattern' is disabled (the default), then the size\n    /// of this is constrained to the possible starting configurations based\n    /// on the search parameters. (At time of writing, that's 4.) However,\n    /// when starting states for each pattern is enabled, then there are N\n    /// additional groups of starting states, where each group reflects the\n    /// different possible configurations and N is the number of patterns.\n    starts: Vec<LazyStateID>,\n    /// A sequence of NFA/DFA powerset states that have been computed for this\n    /// lazy DFA. This sequence is indexable by untagged LazyStateIDs. (Every\n    /// tagged LazyStateID can be used to index this sequence by converting it\n    /// to its untagged form.)\n    states: Vec<State>,\n    /// A map from states to their corresponding IDs. This map may be accessed\n    /// via the raw byte representation of a state, which means that a `State`\n    /// does not need to be allocated to determine whether it already exists\n    /// in this map. Indeed, the existence of such a state is what determines\n    /// whether we allocate a new `State` or not.\n    ///\n    /// The higher level idea here is that we do just enough determinization\n    /// for a state to check whether we've already computed it. If we have,\n    /// then we can save a little (albeit not much) work. The real savings is\n    /// in memory usage. If we never checked for trivially duplicate states,\n    /// then our memory usage would explode to unreasonable levels.\n    states_to_id: StateMap,\n    /// Sparse sets used to track which NFA states have been visited during\n    /// various traversals.\n    sparses: SparseSets,\n    /// Scratch space for traversing the NFA graph. (We use space on the heap\n    /// instead of the call stack.)\n    stack: Vec<NFAStateID>,\n    /// Scratch space for building a NFA/DFA powerset state. This is used to\n    /// help amortize allocation since not every powerset state generated is\n    /// added to the cache. In particular, if it already exists in the cache,\n    /// then there is no need to allocate a new `State` for it.\n    scratch_state_builder: StateBuilderEmpty,\n    /// A simple abstraction for handling the saving of at most a single state\n    /// across a cache clearing. This is required for correctness. Namely, if\n    /// adding a new state after clearing the cache fails, then the caller\n    /// must retain the ability to continue using the state ID given. The\n    /// state corresponding to the state ID is what we preserve across cache\n    /// clearings.\n    state_saver: StateSaver,\n    /// The memory usage, in bytes, used by 'states' and 'states_to_id'. We\n    /// track this as new states are added since states use a variable amount\n    /// of heap. Tracking this as we add states makes it possible to compute\n    /// the total amount of memory used by the determinizer in constant time.\n    memory_usage_state: usize,\n    /// The number of times the cache has been cleared. When a minimum cache\n    /// clear count is set, then the cache will return an error instead of\n    /// clearing the cache if the count has been exceeded.\n    clear_count: usize,\n    /// The total number of bytes searched since the last time this cache was\n    /// cleared, not including the current search.\n    ///\n    /// This can be added to the length of the current search to get the true\n    /// total number of bytes searched.\n    ///\n    /// This is generally only non-zero when the\n    /// `Cache::search_{start,update,finish}` APIs are used to track search\n    /// progress.\n    bytes_searched: usize,\n    /// The progress of the current search.\n    ///\n    /// This is only non-`None` when callers utlize the `Cache::search_start`,\n    /// `Cache::search_update` and `Cache::search_finish` APIs.\n    ///\n    /// The purpose of recording search progress is to be able to make a\n    /// determination about the efficiency of the cache. Namely, by keeping\n    /// track of the\n    progress: Option<SearchProgress>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug)]\npub struct CacheError(());\nimpl DFA {\n    #[inline]\n    pub fn next_state(\n        &self,\n        cache: &mut Cache,\n        current: LazyStateID,\n        input: u8,\n    ) -> Result<LazyStateID, CacheError> {\n        let class = usize::from(self.classes.get(input));\n        let offset = current.as_usize_untagged() + class;\n        let sid = cache.trans[offset];\n        if !sid.is_unknown() {\n            return Ok(sid);\n        }\n        let unit = alphabet::Unit::u8(input);\n        Lazy::new(self, cache).cache_next_state(current, unit)\n    }\n    #[inline]\n    pub fn next_state_untagged(\n        &self,\n        cache: &Cache,\n        current: LazyStateID,\n        input: u8,\n    ) -> LazyStateID {}\n    #[inline]\n    pub unsafe fn next_state_untagged_unchecked(\n        &self,\n        cache: &Cache,\n        current: LazyStateID,\n        input: u8,\n    ) -> LazyStateID {\n        debug_assert!(! current.is_tagged());\n        let class = usize::from(self.classes.get(input));\n        let offset = current.as_usize_unchecked() + class;\n        *cache.trans.get_unchecked(offset)\n    }\n    #[inline]\n    pub fn next_eoi_state(\n        &self,\n        cache: &mut Cache,\n        current: LazyStateID,\n    ) -> Result<LazyStateID, CacheError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn start_state(\n        &self,\n        cache: &mut Cache,\n        config: &start::Config,\n    ) -> Result<LazyStateID, StartError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn start_state_forward(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Result<LazyStateID, MatchError> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub fn start_state_reverse(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n    ) -> Result<LazyStateID, MatchError> {}\n    #[inline]\n    pub fn match_len(&self, cache: &Cache, id: LazyStateID) -> usize {}\n    #[inline]\n    pub fn match_pattern(\n        &self,\n        cache: &Cache,\n        id: LazyStateID,\n        match_index: usize,\n    ) -> PatternID {\n        if self.pattern_len() == 1 {\n            return PatternID::ZERO;\n        }\n        LazyRef::new(self, cache).get_cached_state(id).match_pattern(match_index)\n    }\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {}\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {}\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {\n        self.haystack\n    }\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.get_span().start\n    }\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.get_span().end\n    }\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\nimpl LazyStateID {\n    #[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n    const MAX_BIT: usize = 31;\n    #[cfg(target_pointer_width = \"16\")]\n    const MAX_BIT: usize = 15;\n    const MASK_UNKNOWN: usize = 1 << (LazyStateID::MAX_BIT);\n    const MASK_DEAD: usize = 1 << (LazyStateID::MAX_BIT - 1);\n    const MASK_QUIT: usize = 1 << (LazyStateID::MAX_BIT - 2);\n    const MASK_START: usize = 1 << (LazyStateID::MAX_BIT - 3);\n    const MASK_MATCH: usize = 1 << (LazyStateID::MAX_BIT - 4);\n    const MAX: usize = LazyStateID::MASK_MATCH - 1;\n    #[inline]\n    pub(crate) fn new(id: usize) -> Result<LazyStateID, LazyStateIDError> {}\n    #[inline]\n    const fn new_unchecked(id: usize) -> LazyStateID {}\n    #[inline]\n    pub(crate) fn as_usize_untagged(&self) -> usize {}\n    #[inline]\n    pub(crate) const fn as_usize_unchecked(&self) -> usize {}\n    #[inline]\n    pub(crate) const fn to_unknown(&self) -> LazyStateID {}\n    #[inline]\n    pub(crate) const fn to_dead(&self) -> LazyStateID {}\n    #[inline]\n    pub(crate) const fn to_quit(&self) -> LazyStateID {}\n    #[inline]\n    pub(crate) const fn to_start(&self) -> LazyStateID {}\n    #[inline]\n    pub(crate) const fn to_match(&self) -> LazyStateID {}\n    #[inline]\n    pub const fn is_tagged(&self) -> bool {\n        self.as_usize_unchecked() > LazyStateID::MAX\n    }\n    #[inline]\n    pub const fn is_unknown(&self) -> bool {\n        self.as_usize_unchecked() & LazyStateID::MASK_UNKNOWN > 0\n    }\n    #[inline]\n    pub const fn is_dead(&self) -> bool {\n        self.as_usize_unchecked() & LazyStateID::MASK_DEAD > 0\n    }\n    #[inline]\n    pub const fn is_quit(&self) -> bool {\n        self.as_usize_unchecked() & LazyStateID::MASK_QUIT > 0\n    }\n    #[inline]\n    pub const fn is_start(&self) -> bool {\n        self.as_usize_unchecked() & LazyStateID::MASK_START > 0\n    }\n    #[inline]\n    pub const fn is_match(&self) -> bool {\n        self.as_usize_unchecked() & LazyStateID::MASK_MATCH > 0\n    }\n}\nimpl HalfMatch {\n    #[inline]\n    pub fn new(pattern: PatternID, offset: usize) -> HalfMatch {\n        HalfMatch { pattern, offset }\n    }\n    #[inline]\n    pub fn must(pattern: usize, offset: usize) -> HalfMatch {}\n    #[inline]\n    pub fn pattern(&self) -> PatternID {}\n    #[inline]\n    pub fn offset(&self) -> usize {}\n}\nimpl Cache {\n    pub fn new(dfa: &DFA) -> Cache {}\n    pub fn reset(&mut self, dfa: &DFA) {}\n    #[inline]\n    pub fn search_start(&mut self, at: usize) {\n        if let Some(p) = self.progress.take() {\n            self.bytes_searched += p.len();\n        }\n        self.progress = Some(SearchProgress { start: at, at });\n    }\n    #[inline]\n    pub fn search_update(&mut self, at: usize) {\n        let p = self.progress.as_mut().expect(\"no in-progress search to update\");\n        p.at = at;\n    }\n    #[inline]\n    pub fn search_finish(&mut self, at: usize) {\n        let mut p = self.progress.take().expect(\"no in-progress search to finish\");\n        p.at = at;\n        self.bytes_searched += p.len();\n    }\n    pub fn search_total_len(&self) -> usize {}\n    pub fn clear_count(&self) -> usize {}\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl MatchError {\n    pub fn new(kind: MatchErrorKind) -> MatchError {}\n    pub fn kind(&self) -> &MatchErrorKind {}\n    pub fn quit(byte: u8, offset: usize) -> MatchError {\n        MatchError::new(MatchErrorKind::Quit {\n            byte,\n            offset,\n        })\n    }\n    pub fn gave_up(offset: usize) -> MatchError {}\n    pub fn haystack_too_long(len: usize) -> MatchError {}\n    pub fn unsupported_anchored(mode: Anchored) -> MatchError {}\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn find_rev_imp(\n    dfa: &DFA,\n    cache: &mut Cache,\n    input: &Input<'_>,\n    earliest: bool,\n) -> Result<Option<HalfMatch>, MatchError> {\n    let mut mat = None;\n    let mut sid = init_rev(dfa, cache, input)?;\n    if input.start() == input.end() {\n        eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n        return Ok(mat);\n    }\n    let mut at = input.end() - 1;\n    macro_rules! next_unchecked {\n        ($sid:expr, $at:expr) => {\n            { let byte = * input.haystack().get_unchecked($at); dfa\n            .next_state_untagged_unchecked(cache, $sid, byte) }\n        };\n    }\n    cache.search_start(at);\n    loop {\n        if sid.is_tagged() {\n            cache.search_update(at);\n            sid = dfa\n                .next_state(cache, sid, input.haystack()[at])\n                .map_err(|_| gave_up(at))?;\n        } else {\n            let mut prev_sid = sid;\n            while at >= input.start() {\n                prev_sid = unsafe { next_unchecked!(sid, at) };\n                if prev_sid.is_tagged() || at <= input.start().saturating_add(3) {\n                    core::mem::swap(&mut prev_sid, &mut sid);\n                    break;\n                }\n                at -= 1;\n                sid = unsafe { next_unchecked!(prev_sid, at) };\n                if sid.is_tagged() {\n                    break;\n                }\n                at -= 1;\n                prev_sid = unsafe { next_unchecked!(sid, at) };\n                if prev_sid.is_tagged() {\n                    core::mem::swap(&mut prev_sid, &mut sid);\n                    break;\n                }\n                at -= 1;\n                sid = unsafe { next_unchecked!(prev_sid, at) };\n                if sid.is_tagged() {\n                    break;\n                }\n                at -= 1;\n            }\n            if sid.is_unknown() {\n                cache.search_update(at);\n                sid = dfa\n                    .next_state(cache, prev_sid, input.haystack()[at])\n                    .map_err(|_| gave_up(at))?;\n            }\n        }\n        if sid.is_tagged() {\n            if sid.is_start() {} else if sid.is_match() {\n                let pattern = dfa.match_pattern(cache, sid, 0);\n                mat = Some(HalfMatch::new(pattern, at + 1));\n                if earliest {\n                    cache.search_finish(at);\n                    return Ok(mat);\n                }\n            } else if sid.is_dead() {\n                cache.search_finish(at);\n                return Ok(mat);\n            } else if sid.is_quit() {\n                cache.search_finish(at);\n                return Err(MatchError::quit(input.haystack()[at], at));\n            } else {\n                debug_assert!(sid.is_unknown());\n                unreachable!(\"sid being unknown is a bug\");\n            }\n        }\n        if at == input.start() {\n            break;\n        }\n        at -= 1;\n    }\n    cache.search_finish(input.start());\n    eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n    Ok(mat)\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn init_rev(\n    dfa: &DFA,\n    cache: &mut Cache,\n    input: &Input<'_>,\n) -> Result<LazyStateID, MatchError> {\n    let sid = dfa.start_state_reverse(cache, input)?;\n    debug_assert!(! sid.is_match());\n    Ok(sid)\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\nfn eoi_rev(\n    dfa: &DFA,\n    cache: &mut Cache,\n    input: &Input<'_>,\n    sid: &mut LazyStateID,\n    mat: &mut Option<HalfMatch>,\n) -> Result<(), MatchError> {\n    let sp = input.get_span();\n    if sp.start > 0 {\n        let byte = input.haystack()[sp.start - 1];\n        *sid = dfa.next_state(cache, *sid, byte).map_err(|_| gave_up(sp.start))?;\n        if sid.is_match() {\n            let pattern = dfa.match_pattern(cache, *sid, 0);\n            *mat = Some(HalfMatch::new(pattern, sp.start));\n        } else if sid.is_quit() {\n            return Err(MatchError::quit(byte, sp.start - 1));\n        }\n    } else {\n        *sid = dfa.next_eoi_state(cache, *sid).map_err(|_| gave_up(sp.start))?;\n        if sid.is_match() {\n            let pattern = dfa.match_pattern(cache, *sid, 0);\n            *mat = Some(HalfMatch::new(pattern, 0));\n        }\n        debug_assert!(! sid.is_quit());\n    }\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n312 fn find_rev_imp(\n313     dfa: &DFA,\n314     cache: &mut Cache,\n315     input: &Input<'_>,\n316     earliest: bool,\n317 ) -> Result<Option<HalfMatch>, MatchError> {\n318     let mut mat = None;\n319     let mut sid = init_rev(dfa, cache, input)?;\n320     // In reverse search, the loop below can't handle the case of searching an\n321     // empty slice. Ideally we could write something congruent to the forward\n322     // search, i.e., 'while at >= start', but 'start' might be 0. Since we use\n323     // an unsigned offset, 'at >= 0' is trivially always true. We could avoid\n324     // this extra case handling by using a signed offset, but Rust makes it\n325     // annoying to do. So... We just handle the empty case separately.\n326     if input.start() == input.end() {\n327         eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n328         return Ok(mat);\n329     }\n330 \n331     let mut at = input.end() - 1;\n332     macro_rules! next_unchecked {\n333         ($sid:expr, $at:expr) => {{\n334             let byte = *input.haystack().get_unchecked($at);\n335             dfa.next_state_untagged_unchecked(cache, $sid, byte)\n336         }};\n337     }\n338     cache.search_start(at);\n339     loop {\n340         if sid.is_tagged() {\n341             cache.search_update(at);\n342             sid = dfa\n343                 .next_state(cache, sid, input.haystack()[at])\n344                 .map_err(|_| gave_up(at))?;\n345         } else {\n346             // SAFETY: See comments in 'find_fwd' for a safety argument.\n347             //\n348             // PERF: The comments in 'find_fwd' also provide a justification\n349             // from a performance perspective as to 1) why we elide bounds\n350             // checks and 2) why we do a specialized version of unrolling\n351             // below. The reverse search does have a slightly different\n352             // consideration in that most reverse searches tend to be\n353             // anchored and on shorter haystacks. However, this still makes a\n354             // difference. Take this command for example:\n355             //\n356             //     regex-cli find match hybrid -p '(?m)^.+$' -UBb bigfile\n357             //\n358             // (Notice that we use 'find hybrid regex', not 'find hybrid dfa'\n359             // like in the justification for the forward direction. The 'regex'\n360             // sub-command will find start-of-match and thus run the reverse\n361             // direction.)\n362             //\n363             // Without unrolling below, the above command takes around 3.76s.\n364             // But with the unrolling below, we get down to 2.55s. If we keep\n365             // the unrolling but add in bounds checks, then we get 2.86s.\n366             //\n367             // NOTE: I used 'OpenSubtitles2018.raw.sample.en' for 'bigfile'.\n368             let mut prev_sid = sid;\n369             while at >= input.start() {\n370                 prev_sid = unsafe { next_unchecked!(sid, at) };\n371                 if prev_sid.is_tagged()\n372                     || at <= input.start().saturating_add(3)\n373                 {\n374                     core::mem::swap(&mut prev_sid, &mut sid);\n375                     break;\n376                 }\n377                 at -= 1;\n378 \n379                 sid = unsafe { next_unchecked!(prev_sid, at) };\n380                 if sid.is_tagged() {\n381                     break;\n382                 }\n383                 at -= 1;\n384 \n385                 prev_sid = unsafe { next_unchecked!(sid, at) };\n386                 if prev_sid.is_tagged() {\n387                     core::mem::swap(&mut prev_sid, &mut sid);\n388                     break;\n389                 }\n390                 at -= 1;\n391 \n392                 sid = unsafe { next_unchecked!(prev_sid, at) };\n393                 if sid.is_tagged() {\n394                     break;\n395                 }\n396                 at -= 1;\n397             }\n398             // If we quit out of the code above with an unknown state ID at\n399             // any point, then we need to re-compute that transition using\n400             // 'next_state', which will do NFA powerset construction for us.\n401             if sid.is_unknown() {\n402                 cache.search_update(at);\n403                 sid = dfa\n404                     .next_state(cache, prev_sid, input.haystack()[at])\n405                     .map_err(|_| gave_up(at))?;\n406             }\n407         }\n408         if sid.is_tagged() {\n409             if sid.is_start() {\n410                 // do nothing\n411             } else if sid.is_match() {\n412                 let pattern = dfa.match_pattern(cache, sid, 0);\n413                 // Since reverse searches report the beginning of a match\n414                 // and the beginning is inclusive (not exclusive like the\n415                 // end of a match), we add 1 to make it inclusive.\n416                 mat = Some(HalfMatch::new(pattern, at + 1));\n417                 if earliest {\n418                     cache.search_finish(at);\n419                     return Ok(mat);\n420                 }\n421             } else if sid.is_dead() {\n422                 cache.search_finish(at);\n423                 return Ok(mat);\n424             } else if sid.is_quit() {\n425                 cache.search_finish(at);\n426                 return Err(MatchError::quit(input.haystack()[at], at));\n427             } else {\n428                 debug_assert!(sid.is_unknown());\n429                 unreachable!(\"sid being unknown is a bug\");\n430             }\n431         }\n432         if at == input.start() {\n433             break;\n434         }\n435         at -= 1;\n436     }\n437     cache.search_finish(input.start());\n438     eoi_rev(dfa, cache, input, &mut sid, &mut mat)?;\n439     Ok(mat)\n440 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}