{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{error::Error, Regex, RegexSet};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexBuilder {\n    pub fn new(pattern: &str) -> RegexBuilder {}\n    pub fn build(&self) -> Result<Regex, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {\n        self.builder.crlf(yes);\n        self\n    }\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {\n        self.syntaxc = self.syntaxc.crlf(yes);\n        self\n    }\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures CRLF mode for the entire pattern.\n///\n/// When CRLF mode is enabled, both `\\r` (\"carriage return\" or CR for\n/// short) and `\\n` (\"line feed\" or LF for short) are treated as line\n/// terminators. This results in the following:\n///\n/// * Unless dot-matches-new-line mode is enabled, `.` will now match\n/// any character except for `\\n` and `\\r`.\n/// * When multi-line mode is enabled, `^` will match immediately\n/// following a `\\n` or a `\\r`. Similarly, `$` will match immediately\n/// preceding a `\\n` or a `\\r`. Neither `^` nor `$` will ever match\n/// between `\\r` and `\\n`.\n///\n/// This setting can also be configured using the inline flag `R` in\n/// the pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"^foo$\")\n///     .multi_line(true)\n///     .crlf(true)\n///     .build()\n///     .unwrap();\n/// let hay = \"\\r\\nfoo\\r\\n\";\n/// // If CRLF mode weren't enabled here, then '$' wouldn't match\n/// // immediately after 'foo', and thus no match would be found.\n/// assert_eq!(Some(\"foo\"), re.find(hay).map(|m| m.as_str()));\n/// ```\n///\n/// This example demonstrates that `^` will never match at a position\n/// between `\\r` and `\\n`. (`$` will similarly not match between a `\\r`\n/// and a `\\n`.)\n///\n/// ```\n/// use regex::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"^\")\n///     .multi_line(true)\n///     .crlf(true)\n///     .build()\n///     .unwrap();\n/// let hay = \"\\r\\n\\r\\n\";\n/// let ranges: Vec<_> = re.find_iter(hay).map(|m| m.range()).collect();\n/// assert_eq!(ranges, vec![0..0, 2..2, 4..4]);\n/// ```\n450 pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {\n451     self.builder.crlf(yes);\n452     self\n453 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}