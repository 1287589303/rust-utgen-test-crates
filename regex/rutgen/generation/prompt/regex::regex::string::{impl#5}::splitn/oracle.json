{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Debug)]\npub struct SplitN<'r, 'h> {\n    haystack: &'h str,\n    it: meta::SplitN<'r, 'h>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {\n        SplitN {\n            haystack,\n            it: self.meta.splitn(haystack, limit),\n        }\n    }\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator of at most `limit` substrings of the haystack\n/// given, delimited by a match of the regex. (A `limit` of `0` will return\n/// no substrings.) Namely, each element of the iterator corresponds to a\n/// part of the haystack that *isn't* matched by the regular expression.\n/// The remainder of the haystack that is not split will be the last\n/// element in the iterator.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// Although note that the worst case time here has an upper bound given\n/// by the `limit` parameter.\n///\n/// # Example\n///\n/// Get the first two words in some haystack:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\\W+\").unwrap();\n/// let hay = \"Hey! How are you?\";\n/// let fields: Vec<&str> = re.splitn(hay, 3).collect();\n/// assert_eq!(fields, vec![\"Hey\", \"How\", \"are you?\"]);\n/// ```\n///\n/// # Examples: more cases\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = \"Mary had a little lamb\";\n/// let got: Vec<&str> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![\"Mary\", \"had\", \"a little lamb\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"\";\n/// let got: Vec<&str> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![\"\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"lionXXtigerXleopard\";\n/// let got: Vec<&str> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![\"lion\", \"\", \"tigerXleopard\"]);\n///\n/// let re = Regex::new(r\"::\").unwrap();\n/// let hay = \"lion::tiger::leopard\";\n/// let got: Vec<&str> = re.splitn(hay, 2).collect();\n/// assert_eq!(got, vec![\"lion\", \"tiger::leopard\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"abcXdef\";\n/// let got: Vec<&str> = re.splitn(hay, 1).collect();\n/// assert_eq!(got, vec![\"abcXdef\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"abcdef\";\n/// let got: Vec<&str> = re.splitn(hay, 2).collect();\n/// assert_eq!(got, vec![\"abcdef\"]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = \"abcXdef\";\n/// let got: Vec<&str> = re.splitn(hay, 0).collect();\n/// assert!(got.is_empty());\n/// ```\n628 pub fn splitn<'r, 'h>(\n629     &'r self,\n630     haystack: &'h str,\n631     limit: usize,\n632 ) -> SplitN<'r, 'h> {\n633     SplitN { haystack, it: self.meta.splitn(haystack, limit) }\n634 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}