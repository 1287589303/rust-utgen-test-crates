{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/range_trie.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem, ops::RangeInclusive};\nuse alloc::{format, string::String, vec, vec::Vec};\nuse regex_syntax::utf8::Utf8Range;\nuse crate::util::primitives::StateID;\nconst FINAL: StateID = StateID::ZERO;\nconst ROOT: StateID = StateID::new_unchecked(1);\n#[derive(Clone, Debug, Eq, PartialEq)]\nstruct Split {\n    partitions: [SplitRange; 3],\n    len: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nenum SplitRange {\n    Old(Utf8Range),\n    New(Utf8Range),\n    Both(Utf8Range),\n}\nimpl Split {\n    fn new(o: Utf8Range, n: Utf8Range) -> Option<Split> {\n        let range = |r: RangeInclusive<u8>| Utf8Range {\n            start: *r.start(),\n            end: *r.end(),\n        };\n        let old = |r| SplitRange::Old(range(r));\n        let new = |r| SplitRange::New(range(r));\n        let both = |r| SplitRange::Both(range(r));\n        let (a, b, x, y) = (o.start, o.end, n.start, n.end);\n        if b < x || y < a {\n            None\n        } else if a == x && b == y {\n            Some(Split::parts1(both(a..=b)))\n        } else if a == x && b < y {\n            Some(Split::parts2(both(a..=b), new(b + 1..=y)))\n        } else if b == y && a > x {\n            Some(Split::parts2(new(x..=a - 1), both(a..=b)))\n        } else if x == a && y < b {\n            Some(Split::parts2(both(x..=y), old(y + 1..=b)))\n        } else if y == b && x > a {\n            Some(Split::parts2(old(a..=x - 1), both(x..=y)))\n        } else if a > x && b < y {\n            Some(Split::parts3(new(x..=a - 1), both(a..=b), new(b + 1..=y)))\n        } else if x > a && y < b {\n            Some(Split::parts3(old(a..=x - 1), both(x..=y), old(y + 1..=b)))\n        } else if b == x && a < y {\n            Some(Split::parts3(old(a..=b - 1), both(b..=b), new(b + 1..=y)))\n        } else if y == a && x < b {\n            Some(Split::parts3(new(x..=y - 1), both(y..=y), old(y + 1..=b)))\n        } else if b > x && b < y {\n            Some(Split::parts3(old(a..=x - 1), both(x..=b), new(b + 1..=y)))\n        } else if y > a && y < b {\n            Some(Split::parts3(new(x..=a - 1), both(a..=y), old(y + 1..=b)))\n        } else {\n            unreachable!()\n        }\n    }\n    fn parts1(r1: SplitRange) -> Split {\n        let nada = SplitRange::Old(Utf8Range { start: 0, end: 0 });\n        Split {\n            partitions: [r1, nada, nada],\n            len: 1,\n        }\n    }\n    fn parts2(r1: SplitRange, r2: SplitRange) -> Split {\n        let nada = SplitRange::Old(Utf8Range { start: 0, end: 0 });\n        Split {\n            partitions: [r1, r2, nada],\n            len: 2,\n        }\n    }\n    fn parts3(r1: SplitRange, r2: SplitRange, r3: SplitRange) -> Split {\n        Split {\n            partitions: [r1, r2, r3],\n            len: 3,\n        }\n    }\n    fn as_slice(&self) -> &[SplitRange] {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a partitioning of the given ranges.\n///\n/// If the given ranges have an empty intersection, then None is returned.\n788 fn new(o: Utf8Range, n: Utf8Range) -> Option<Split> {\n789     let range = |r: RangeInclusive<u8>| Utf8Range {\n790         start: *r.start(),\n791         end: *r.end(),\n792     };\n793     let old = |r| SplitRange::Old(range(r));\n794     let new = |r| SplitRange::New(range(r));\n795     let both = |r| SplitRange::Both(range(r));\n796 \n797     // Use same names as the comment above to make it easier to compare.\n798     let (a, b, x, y) = (o.start, o.end, n.start, n.end);\n799 \n800     if b < x || y < a {\n801         // case 1, case 2\n802         None\n803     } else if a == x && b == y {\n804         // case 3\n805         Some(Split::parts1(both(a..=b)))\n806     } else if a == x && b < y {\n807         // case 4\n808         Some(Split::parts2(both(a..=b), new(b + 1..=y)))\n809     } else if b == y && a > x {\n810         // case 5\n811         Some(Split::parts2(new(x..=a - 1), both(a..=b)))\n812     } else if x == a && y < b {\n813         // case 6\n814         Some(Split::parts2(both(x..=y), old(y + 1..=b)))\n815     } else if y == b && x > a {\n816         // case 7\n817         Some(Split::parts2(old(a..=x - 1), both(x..=y)))\n818     } else if a > x && b < y {\n819         // case 8\n820         Some(Split::parts3(new(x..=a - 1), both(a..=b), new(b + 1..=y)))\n821     } else if x > a && y < b {\n822         // case 9\n823         Some(Split::parts3(old(a..=x - 1), both(x..=y), old(y + 1..=b)))\n824     } else if b == x && a < y {\n825         // case 10\n826         Some(Split::parts3(old(a..=b - 1), both(b..=b), new(b + 1..=y)))\n827     } else if y == a && x < b {\n828         // case 11\n829         Some(Split::parts3(new(x..=y - 1), both(y..=y), old(y + 1..=b)))\n830     } else if b > x && b < y {\n831         // case 12\n832         Some(Split::parts3(old(a..=x - 1), both(x..=b), new(b + 1..=y)))\n833     } else if y > a && y < b {\n834         // case 13\n835         Some(Split::parts3(new(x..=a - 1), both(a..=y), old(y + 1..=b)))\n836     } else {\n837         unreachable!()\n838     }\n839 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}