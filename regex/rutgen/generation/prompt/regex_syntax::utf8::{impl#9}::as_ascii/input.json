{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\nstruct ScalarRange {\n    start: u32,\n    end: u32,\n}\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Utf8Range {\n    /// Start of byte range (inclusive).\n    pub start: u8,\n    /// End of byte range (inclusive).\n    pub end: u8,\n}\nimpl ScalarRange {\n    fn split(&self) -> Option<(ScalarRange, ScalarRange)> {}\n    fn is_valid(&self) -> bool {}\n    fn as_ascii(&self) -> Option<Utf8Range> {\n        if self.is_ascii() {\n            let start = u8::try_from(self.start).unwrap();\n            let end = u8::try_from(self.end).unwrap();\n            Some(Utf8Range::new(start, end))\n        } else {\n            None\n        }\n    }\n    fn is_ascii(&self) -> bool {\n        self.is_valid() && self.end <= 0x7f\n    }\n    fn encode(&self, start: &mut [u8], end: &mut [u8]) -> usize {}\n}\nimpl Utf8Range {\n    fn new(start: u8, end: u8) -> Self {\n        Utf8Range { start, end }\n    }\n    pub fn matches(&self, b: u8) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// as_ascii returns this range as a Utf8Range if and only if all scalar\n/// values in this range can be encoded as a single byte.\n414 fn as_ascii(&self) -> Option<Utf8Range> {\n415     if self.is_ascii() {\n416         let start = u8::try_from(self.start).unwrap();\n417         let end = u8::try_from(self.end).unwrap();\n418         Some(Utf8Range::new(start, end))\n419     } else {\n420         None\n421     }\n422 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}