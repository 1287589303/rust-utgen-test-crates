{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/utf8.rs\n// crate name is regex_syntax\nuse core::{char, fmt, iter::FusedIterator, slice};\nuse alloc::{vec, vec::Vec};\nconst MAX_UTF8_BYTES: usize = 4;\nstruct ScalarRange {\n    start: u32,\n    end: u32,\n}\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Utf8Range {\n    /// Start of byte range (inclusive).\n    pub start: u8,\n    /// End of byte range (inclusive).\n    pub end: u8,\n}\nimpl ScalarRange {\n    fn split(&self) -> Option<(ScalarRange, ScalarRange)> {}\n    fn is_valid(&self) -> bool {}\n    fn as_ascii(&self) -> Option<Utf8Range> {\n        if self.is_ascii() {\n            let start = u8::try_from(self.start).unwrap();\n            let end = u8::try_from(self.end).unwrap();\n            Some(Utf8Range::new(start, end))\n        } else {\n            None\n        }\n    }\n    fn is_ascii(&self) -> bool {\n        self.is_valid() && self.end <= 0x7f\n    }\n    fn encode(&self, start: &mut [u8], end: &mut [u8]) -> usize {}\n}\nimpl Utf8Range {\n    fn new(start: u8, end: u8) -> Self {\n        Utf8Range { start, end }\n    }\n    pub fn matches(&self, b: u8) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// as_ascii returns this range as a Utf8Range if and only if all scalar\n/// values in this range can be encoded as a single byte.\n414 fn as_ascii(&self) -> Option<Utf8Range> {\n415     if self.is_ascii() {\n416         let start = u8::try_from(self.start).unwrap();\n417         let end = u8::try_from(self.end).unwrap();\n418         Some(Utf8Range::new(start, end))\n419     } else {\n420         None\n421     }\n422 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}