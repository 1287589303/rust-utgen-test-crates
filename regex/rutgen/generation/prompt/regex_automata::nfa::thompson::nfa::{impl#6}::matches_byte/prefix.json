{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/nfa.rs\n// crate name is regex_automata\nuse core::{fmt, mem};\nuse alloc::{boxed::Box, format, string::String, sync::Arc, vec, vec::Vec};\n#[cfg(feature = \"syntax\")]\nuse crate::nfa::thompson::{\n    compiler::{Compiler, Config},\n    error::BuildError,\n};\nuse crate::{\n    nfa::thompson::builder::Builder,\n    util::{\n        alphabet::{self, ByteClassSet, ByteClasses},\n        captures::{GroupInfo, GroupInfoError},\n        look::{Look, LookMatcher, LookSet},\n        primitives::{IteratorIndexExt, PatternID, PatternIDIter, SmallIndex, StateID},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct SparseTransitions {\n    /// The sorted sequence of non-overlapping transitions.\n    pub transitions: Box<[Transition]>,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\nimpl SparseTransitions {\n    #[inline]\n    pub fn matches(&self, haystack: &[u8], at: usize) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn matches_unit(&self, unit: alphabet::Unit) -> Option<StateID> {}\n    #[inline]\n    pub fn matches_byte(&self, byte: u8) -> Option<StateID> {\n        for t in self.transitions.iter() {\n            if t.start > byte {\n                break;\n            } else if t.matches_byte(byte) {\n                return Some(t.next);\n            }\n        }\n        None\n    }\n}\nimpl Transition {\n    pub fn matches(&self, haystack: &[u8], at: usize) -> bool {}\n    pub fn matches_unit(&self, unit: alphabet::Unit) -> bool {}\n    pub fn matches_byte(&self, byte: u8) -> bool {\n        self.start <= byte && byte <= self.end\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This follows the matching transition for a particular byte.\n///\n/// The matching transition is found by looking for a matching byte range\n/// (there is at most one) corresponding to the byte given.\n1830 pub fn matches_byte(&self, byte: u8) -> Option<StateID> {\n1831     for t in self.transitions.iter() {\n1832         if t.start > byte {\n1833             break;\n1834         } else if t.matches_byte(byte) {\n1835             return Some(t.next);\n1836         }\n1837     }\n1838     None\n1839 \n1840     /*\n1841     // This is an alternative implementation that uses binary search. In\n1842     // some ad hoc experiments, like\n1843     //\n1844     //   regex-cli find match pikevm -b -p '\\b\\w+\\b' non-ascii-file\n1845     //\n1846     // I could not observe any improvement, and in fact, things seemed to\n1847     // be a bit slower. I can see an improvement in at least one benchmark:\n1848     //\n1849     //   regex-cli find match pikevm -b -p '\\pL{100}' all-codepoints-utf8\n1850     //\n1851     // Where total search time goes from 3.2s to 2.4s when using binary\n1852     // search.\n1853     self.transitions\n1854         .binary_search_by(|t| {\n1855             if t.end < byte {\n1856                 core::cmp::Ordering::Less\n1857             } else if t.start > byte {\n1858                 core::cmp::Ordering::Greater\n1859             } else {\n1860                 core::cmp::Ordering::Equal\n1861             }\n1862         })\n1863         .ok()\n1864         .map(|i| self.transitions[i].next)\n1865     */\n1866 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}