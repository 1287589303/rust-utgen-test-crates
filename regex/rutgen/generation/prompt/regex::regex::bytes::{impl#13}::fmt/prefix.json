{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'h> core::fmt::Debug for Captures<'h> {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        /// A little helper type to provide a nice map-like debug\n        /// representation for our capturing group spans.\n        ///\n        /// regex-automata has something similar, but it includes the pattern\n        /// ID in its debug output, which is confusing. It also doesn't include\n        /// that strings that match because a regex-automata `Captures` doesn't\n        /// borrow the haystack.\n        struct CapturesDebugMap<'a> {\n            caps: &'a Captures<'a>,\n        }\n        impl<'a> core::fmt::Debug for CapturesDebugMap<'a> {\n            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                let mut map = f.debug_map();\n                let names = self.caps.caps.group_info().pattern_names(PatternID::ZERO);\n                for (group_index, maybe_name) in names.enumerate() {\n                    let key = Key(group_index, maybe_name);\n                    match self.caps.get(group_index) {\n                        None => map.entry(&key, &None::<()>),\n                        Some(mat) => map.entry(&key, &Value(mat)),\n                    };\n                }\n                map.finish()\n            }\n        }\n        struct Key<'a>(usize, Option<&'a str>);\n        impl<'a> core::fmt::Debug for Key<'a> {\n            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                write!(f, \"{}\", self.0)?;\n                if let Some(name) = self.1 {\n                    write!(f, \"/{:?}\", name)?;\n                }\n                Ok(())\n            }\n        }\n        struct Value<'a>(Match<'a>);\n        impl<'a> core::fmt::Debug for Value<'a> {\n            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                use regex_automata::util::escape::DebugHaystack;\n                write!(\n                    f, \"{}..{}/{:?}\", self.0.start(), self.0.end(), DebugHaystack(self.0\n                    .as_bytes())\n                )\n            }\n        }\n        f.debug_tuple(\"Captures\").field(&CapturesDebugMap { caps: self }).finish()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1911 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n1912     /// A little helper type to provide a nice map-like debug\n1913     /// representation for our capturing group spans.\n1914     ///\n1915     /// regex-automata has something similar, but it includes the pattern\n1916     /// ID in its debug output, which is confusing. It also doesn't include\n1917     /// that strings that match because a regex-automata `Captures` doesn't\n1918     /// borrow the haystack.\n1919     struct CapturesDebugMap<'a> {\n1920         caps: &'a Captures<'a>,\n1921     }\n1922 \n1923     impl<'a> core::fmt::Debug for CapturesDebugMap<'a> {\n1924         fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1925             let mut map = f.debug_map();\n1926             let names =\n1927                 self.caps.caps.group_info().pattern_names(PatternID::ZERO);\n1928             for (group_index, maybe_name) in names.enumerate() {\n1929                 let key = Key(group_index, maybe_name);\n1930                 match self.caps.get(group_index) {\n1931                     None => map.entry(&key, &None::<()>),\n1932                     Some(mat) => map.entry(&key, &Value(mat)),\n1933                 };\n1934             }\n1935             map.finish()\n1936         }\n1937     }\n1938 \n1939     struct Key<'a>(usize, Option<&'a str>);\n1940 \n1941     impl<'a> core::fmt::Debug for Key<'a> {\n1942         fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1943             write!(f, \"{}\", self.0)?;\n1944             if let Some(name) = self.1 {\n1945                 write!(f, \"/{:?}\", name)?;\n1946             }\n1947             Ok(())\n1948         }\n1949     }\n1950 \n1951     struct Value<'a>(Match<'a>);\n1952 \n1953     impl<'a> core::fmt::Debug for Value<'a> {\n1954         fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1955             use regex_automata::util::escape::DebugHaystack;\n1956 \n1957             write!(\n1958                 f,\n1959                 \"{}..{}/{:?}\",\n1960                 self.0.start(),\n1961                 self.0.end(),\n1962                 DebugHaystack(self.0.as_bytes())\n1963             )\n1964         }\n1965     }\n1966 \n1967     f.debug_tuple(\"Captures\")\n1968         .field(&CapturesDebugMap { caps: self })\n1969         .finish()\n1970 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}