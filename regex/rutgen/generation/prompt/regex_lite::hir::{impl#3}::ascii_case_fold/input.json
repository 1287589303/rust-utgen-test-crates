{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/hir/mod.rs\n// crate name is regex_lite\nuse alloc::{boxed::Box, string::String, vec, vec::Vec};\nuse crate::{error::Error, utf8};\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Class {\n    pub(crate) ranges: Vec<ClassRange>,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]\npub(crate) struct ClassRange {\n    pub(crate) start: char,\n    pub(crate) end: char,\n}\nimpl Class {\n    fn new<I: IntoIterator<Item = ClassRange>>(ranges: I) -> Class {}\n    fn ascii_case_fold(&mut self) {\n        let len = self.ranges.len();\n        for i in 0..len {\n            if let Some(folded) = self.ranges[i].ascii_case_fold() {\n                self.ranges.push(folded);\n            }\n        }\n        self.canonicalize();\n    }\n    fn negate(&mut self) {}\n    fn canonicalize(&mut self) {\n        if self.is_canonical() {\n            return;\n        }\n        self.ranges.sort();\n        assert!(! self.ranges.is_empty());\n        let drain_end = self.ranges.len();\n        for oldi in 0..drain_end {\n            if self.ranges.len() > drain_end {\n                let (last, rest) = self.ranges.split_last_mut().unwrap();\n                if let Some(union) = last.union(&rest[oldi]) {\n                    *last = union;\n                    continue;\n                }\n            }\n            self.ranges.push(self.ranges[oldi]);\n        }\n        self.ranges.drain(..drain_end);\n    }\n    fn is_canonical(&self) -> bool {}\n}\nimpl ClassRange {\n    fn ascii_case_fold(&self) -> Option<ClassRange> {\n        if !(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) {\n            let start = core::cmp::max(self.start, 'a');\n            let end = core::cmp::min(self.end, 'z');\n            return Some(ClassRange {\n                start: char::try_from(u32::from(start) - 32).unwrap(),\n                end: char::try_from(u32::from(end) - 32).unwrap(),\n            });\n        }\n        if !(ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self) {\n            let start = core::cmp::max(self.start, 'A');\n            let end = core::cmp::min(self.end, 'Z');\n            return Some(ClassRange {\n                start: char::try_from(u32::from(start) + 32).unwrap(),\n                end: char::try_from(u32::from(end) + 32).unwrap(),\n            });\n        }\n        None\n    }\n    fn union(&self, other: &ClassRange) -> Option<ClassRange> {}\n    fn is_contiguous(&self, other: &ClassRange) -> bool {}\n    fn is_intersection_empty(&self, other: &ClassRange) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Expand this class such that it matches the ASCII codepoints in this set\n/// case insensitively.\n404 fn ascii_case_fold(&mut self) {\n405     let len = self.ranges.len();\n406     for i in 0..len {\n407         if let Some(folded) = self.ranges[i].ascii_case_fold() {\n408             self.ranges.push(folded);\n409         }\n410     }\n411     self.canonicalize();\n412 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}