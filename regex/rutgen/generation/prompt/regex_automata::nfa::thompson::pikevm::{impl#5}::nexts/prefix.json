{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/pikevm.rs\n// crate name is regex_automata\n#[cfg(feature = \"internal-instrument-pikevm\")]\nuse core::cell::RefCell;\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug)]\npub struct PikeVM {\n    config: Config,\n    nfa: NFA,\n}\n#[derive(Clone)]\npub(crate) struct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\n#[derive(Clone, Debug)]\nstruct SlotTable {\n    /// The actual table of offsets.\n    table: Vec<Option<NonMaxUsize>>,\n    /// The number of slots per state, i.e., the table's stride or the length\n    /// of each row.\n    slots_per_state: usize,\n    /// The number of slots in the caller-provided 'Captures' value for the\n    /// current search. Setting this to 'slots_per_state' is always correct,\n    /// but may be wasteful.\n    slots_for_captures: usize,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Debug)]\nstruct ActiveStates {\n    /// The set of active NFA states. This set preserves insertion order, which\n    /// is critical for simulating the match semantics of backtracking regex\n    /// engines.\n    set: SparseSet,\n    /// The slots for every NFA state, where each slot stores a (possibly\n    /// absent) offset. Every capturing group has two slots. One for a start\n    /// offset and one for an end offset.\n    slot_table: SlotTable,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Debug)]\npub(crate) struct SparseSetIter<'a>(core::slice::Iter<'a, StateID>);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[derive(Clone, Debug)]\nenum FollowEpsilon {\n    /// Explore the epsilon transitions from a state ID.\n    Explore(StateID),\n    /// Reset the given `slot` to the given `offset` (which might be `None`).\n    RestoreCapture { slot: SmallIndex, offset: Option<NonMaxUsize> },\n}\nimpl PikeVM {\n    fn search_imp(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<HalfMatch> {}\n    fn which_overlapping_imp(\n        &self,\n        cache: &mut Cache,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn nexts(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr: &mut ActiveStates,\n        next: &mut ActiveStates,\n        input: &Input<'_>,\n        at: usize,\n        slots: &mut [Option<NonMaxUsize>],\n    ) -> Option<PatternID> {\n        instrument!(| c | c.record_state_set(& curr.set));\n        let mut pid = None;\n        let ActiveStates { ref set, ref mut slot_table } = *curr;\n        for sid in set.iter() {\n            pid = match self.next(stack, slot_table, next, input, at, sid) {\n                None => continue,\n                Some(pid) => Some(pid),\n            };\n            slots.copy_from_slice(slot_table.for_state(sid));\n            if !self.config.get_match_kind().continue_past_first_match() {\n                break;\n            }\n        }\n        pid\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn nexts_overlapping(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr: &mut ActiveStates,\n        next: &mut ActiveStates,\n        input: &Input<'_>,\n        at: usize,\n        patset: &mut PatternSet,\n    ) {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn next(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slot_table: &mut SlotTable,\n        next: &mut ActiveStates,\n        input: &Input<'_>,\n        at: usize,\n        sid: StateID,\n    ) -> Option<PatternID> {\n        instrument!(| c | c.record_step(sid));\n        match *self.nfa.state(sid) {\n            State::Fail\n            | State::Look { .. }\n            | State::Union { .. }\n            | State::BinaryUnion { .. }\n            | State::Capture { .. } => None,\n            State::ByteRange { ref trans } => {\n                if trans.matches(input.haystack(), at) {\n                    let slots = curr_slot_table.for_state(sid);\n                    let at = at.wrapping_add(1);\n                    self.epsilon_closure(stack, slots, next, input, at, trans.next);\n                }\n                None\n            }\n            State::Sparse(ref sparse) => {\n                if let Some(next_sid) = sparse.matches(input.haystack(), at) {\n                    let slots = curr_slot_table.for_state(sid);\n                    let at = at.wrapping_add(1);\n                    self.epsilon_closure(stack, slots, next, input, at, next_sid);\n                }\n                None\n            }\n            State::Dense(ref dense) => {\n                if let Some(next_sid) = dense.matches(input.haystack(), at) {\n                    let slots = curr_slot_table.for_state(sid);\n                    let at = at.wrapping_add(1);\n                    self.epsilon_closure(stack, slots, next, input, at, next_sid);\n                }\n                None\n            }\n            State::Match { pattern_id } => Some(pattern_id),\n        }\n    }\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn epsilon_closure(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        input: &Input<'_>,\n        at: usize,\n        sid: StateID,\n    ) {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn epsilon_closure_explore(\n        &self,\n        stack: &mut Vec<FollowEpsilon>,\n        curr_slots: &mut [Option<NonMaxUsize>],\n        next: &mut ActiveStates,\n        input: &Input<'_>,\n        at: usize,\n        mut sid: StateID,\n    ) {}\n    fn start_config(&self, input: &Input<'_>) -> Option<(bool, StateID)> {}\n}\nimpl SparseSet {\n    #[inline]\n    pub(crate) fn new(capacity: usize) -> SparseSet {}\n    #[inline]\n    pub(crate) fn resize(&mut self, new_capacity: usize) {}\n    #[inline]\n    pub(crate) fn capacity(&self) -> usize {}\n    #[inline]\n    pub(crate) fn len(&self) -> usize {}\n    #[inline]\n    pub(crate) fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn insert(&mut self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn contains(&self, id: StateID) -> bool {}\n    #[inline]\n    pub(crate) fn clear(&mut self) {}\n    #[inline]\n    pub(crate) fn iter(&self) -> SparseSetIter<'_> {\n        SparseSetIter(self.dense[..self.len()].iter())\n    }\n    #[inline]\n    pub(crate) fn memory_usage(&self) -> usize {}\n}\nimpl SlotTable {\n    fn new() -> SlotTable {}\n    fn reset(&mut self, re: &PikeVM) {}\n    fn memory_usage(&self) -> usize {}\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n    fn for_state(&mut self, sid: StateID) -> &mut [Option<NonMaxUsize>] {\n        let i = sid.as_usize() * self.slots_per_state;\n        &mut self.table[i..i + self.slots_for_captures]\n    }\n    fn all_absent(&mut self) -> &mut [Option<NonMaxUsize>] {}\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {\n        self.match_kind.unwrap_or(MatchKind::LeftmostFirst)\n    }\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\nimpl MatchKind {\n    #[cfg(feature = \"alloc\")]\n    pub(crate) fn continue_past_first_match(&self) -> bool {\n        *self == MatchKind::All\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Process the active states in 'curr' to find the states (written to\n/// 'next') we should process for the next byte in the haystack.\n///\n/// 'stack' is used to perform a depth first traversal of the NFA when\n/// computing an epsilon closure.\n///\n/// When a match is found, the slots for that match state (in 'curr') are\n/// copied to 'caps'. Moreover, once a match is seen, processing for 'curr'\n/// stops (unless the PikeVM was configured with MatchKind::All semantics).\n1467 fn nexts(\n1468     &self,\n1469     stack: &mut Vec<FollowEpsilon>,\n1470     curr: &mut ActiveStates,\n1471     next: &mut ActiveStates,\n1472     input: &Input<'_>,\n1473     at: usize,\n1474     slots: &mut [Option<NonMaxUsize>],\n1475 ) -> Option<PatternID> {\n1476     instrument!(|c| c.record_state_set(&curr.set));\n1477     let mut pid = None;\n1478     let ActiveStates { ref set, ref mut slot_table } = *curr;\n1479     for sid in set.iter() {\n1480         pid = match self.next(stack, slot_table, next, input, at, sid) {\n1481             None => continue,\n1482             Some(pid) => Some(pid),\n1483         };\n1484         slots.copy_from_slice(slot_table.for_state(sid));\n1485         if !self.config.get_match_kind().continue_past_first_match() {\n1486             break;\n1487         }\n1488     }\n1489     pid\n1490 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}