{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/ast/visitor.rs\n// crate name is regex_syntax\nuse alloc::{vec, vec::Vec};\nuse crate::ast::{self, Ast};\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct ClassSetBinaryOp {\n    /// The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.\n    pub span: Span,\n    /// The type of this set operation.\n    pub kind: ClassSetBinaryOpKind,\n    /// The left hand side of the operation.\n    pub lhs: Box<ClassSet>,\n    /// The right hand side of the operation.\n    pub rhs: Box<ClassSet>,\n}\nenum ClassInduct<'a> {\n    Item(&'a ast::ClassSetItem),\n    BinaryOp(&'a ast::ClassSetBinaryOp),\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub enum ClassSetItem {\n    /// An empty item.\n    ///\n    /// Note that a bracketed character class cannot contain a single empty\n    /// item. Empty items can appear when using one of the binary operators.\n    /// For example, `[&&]` is the intersection of two empty classes.\n    Empty(Span),\n    /// A single literal.\n    Literal(Literal),\n    /// A range between two literals.\n    Range(ClassSetRange),\n    /// An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.\n    Ascii(ClassAscii),\n    /// A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n    Unicode(ClassUnicode),\n    /// A perl character class, e.g., `\\d` or `\\W`.\n    Perl(ClassPerl),\n    /// A bracketed character class set, which may contain zero or more\n    /// character ranges and/or zero or more nested classes. e.g.,\n    /// `[a-zA-Z\\pL]`.\n    Bracketed(Box<ClassBracketed>),\n    /// A union of items.\n    Union(ClassSetUnion),\n}\nimpl<'a> core::fmt::Debug for ClassInduct<'a> {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        let x = match *self {\n            ClassInduct::Item(it) => {\n                match *it {\n                    ast::ClassSetItem::Empty(_) => \"Item(Empty)\",\n                    ast::ClassSetItem::Literal(_) => \"Item(Literal)\",\n                    ast::ClassSetItem::Range(_) => \"Item(Range)\",\n                    ast::ClassSetItem::Ascii(_) => \"Item(Ascii)\",\n                    ast::ClassSetItem::Perl(_) => \"Item(Perl)\",\n                    ast::ClassSetItem::Unicode(_) => \"Item(Unicode)\",\n                    ast::ClassSetItem::Bracketed(_) => \"Item(Bracketed)\",\n                    ast::ClassSetItem::Union(_) => \"Item(Union)\",\n                }\n            }\n            ClassInduct::BinaryOp(it) => {\n                match it.kind {\n                    ast::ClassSetBinaryOpKind::Intersection => \"BinaryOp(Intersection)\",\n                    ast::ClassSetBinaryOpKind::Difference => \"BinaryOp(Difference)\",\n                    ast::ClassSetBinaryOpKind::SymmetricDifference => {\n                        \"BinaryOp(SymmetricDifference)\"\n                    }\n                }\n            }\n        };\n        write!(f, \"{}\", x)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n496 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n497     let x = match *self {\n498         ClassInduct::Item(it) => match *it {\n499             ast::ClassSetItem::Empty(_) => \"Item(Empty)\",\n500             ast::ClassSetItem::Literal(_) => \"Item(Literal)\",\n501             ast::ClassSetItem::Range(_) => \"Item(Range)\",\n502             ast::ClassSetItem::Ascii(_) => \"Item(Ascii)\",\n503             ast::ClassSetItem::Perl(_) => \"Item(Perl)\",\n504             ast::ClassSetItem::Unicode(_) => \"Item(Unicode)\",\n505             ast::ClassSetItem::Bracketed(_) => \"Item(Bracketed)\",\n506             ast::ClassSetItem::Union(_) => \"Item(Union)\",\n507         },\n508         ClassInduct::BinaryOp(it) => match it.kind {\n509             ast::ClassSetBinaryOpKind::Intersection => {\n510                 \"BinaryOp(Intersection)\"\n511             }\n512             ast::ClassSetBinaryOpKind::Difference => {\n513                 \"BinaryOp(Difference)\"\n514             }\n515             ast::ClassSetBinaryOpKind::SymmetricDifference => {\n516                 \"BinaryOp(SymmetricDifference)\"\n517             }\n518         },\n519     };\n520     write!(f, \"{}\", x)\n521 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}