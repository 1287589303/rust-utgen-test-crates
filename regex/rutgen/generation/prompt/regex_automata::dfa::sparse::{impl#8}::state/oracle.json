{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/sparse.rs\n// crate name is regex_automata\n#[cfg(feature = \"dfa-build\")]\nuse core::iter;\nuse core::{fmt, mem::size_of};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa::dense::{self, BuildError};\nuse crate::{\n    dfa::{\n        automaton::{fmt_state_indicator, Automaton, StartError},\n        dense::Flags, special::Special, StartKind, DEAD,\n    },\n    util::{\n        alphabet::{ByteClasses, ByteSet},\n        escape::DebugByte, int::{Pointer, Usize, U16, U32},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-sparse\";\nconst VERSION: u32 = 2;\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn high_u16(self) -> u16;\n}\npub(crate) trait U16 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn high_u8(self) -> u8;\n}\n#[derive(Clone)]\nstruct Transitions<T> {\n    /// The raw encoding of each state in this DFA.\n    ///\n    /// Each state has the following information:\n    ///\n    /// * A set of transitions to subsequent states. Transitions to the dead\n    ///   state are omitted.\n    /// * If the state can be accelerated, then any additional accelerator\n    ///   information.\n    /// * If the state is a match state, then the state contains all pattern\n    ///   IDs that match when in that state.\n    ///\n    /// To decode a state, use Transitions::state.\n    ///\n    /// In practice, T is either Vec<u8> or &[u8].\n    sparse: T,\n    /// A set of equivalence classes, where a single equivalence class\n    /// represents a set of bytes that never discriminate between a match\n    /// and a non-match in the DFA. Each equivalence class corresponds to a\n    /// single character in this DFA's alphabet, where the maximum number of\n    /// characters is 257 (each possible value of a byte plus the special\n    /// EOI transition). Consequently, the number of equivalence classes\n    /// corresponds to the number of transitions for each DFA state. Note\n    /// though that the *space* used by each DFA state in the transition table\n    /// may be larger. The total space used by each DFA state is known as the\n    /// stride and is documented above.\n    ///\n    /// The only time the number of equivalence classes is fewer than 257 is\n    /// if the DFA's kind uses byte classes which is the default. Equivalence\n    /// classes should generally only be disabled when debugging, so that\n    /// the transitions themselves aren't obscured. Disabling them has no\n    /// other benefit, since the equivalence class map is always used while\n    /// searching. In the vast majority of cases, the number of equivalence\n    /// classes is substantially smaller than 257, particularly when large\n    /// Unicode classes aren't used.\n    ///\n    /// N.B. Equivalence classes aren't particularly useful in a sparse DFA\n    /// in the current implementation, since equivalence classes generally tend\n    /// to correspond to continuous ranges of bytes that map to the same\n    /// transition. So in a sparse DFA, equivalence classes don't really lead\n    /// to a space savings. In the future, it would be good to try and remove\n    /// them from sparse DFAs entirely, but requires a bit of work since sparse\n    /// DFAs are built from dense DFAs, which are in turn built on top of\n    /// equivalence classes.\n    classes: ByteClasses,\n    /// The total number of states in this DFA. Note that a DFA always has at\n    /// least one state---the dead state---even the empty DFA. In particular,\n    /// the dead state always has ID 0 and is correspondingly always the first\n    /// state. The dead state is never a match state.\n    state_len: usize,\n    /// The total number of unique patterns represented by these match states.\n    pattern_len: usize,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone)]\nstruct State<'a> {\n    /// The identifier of this state.\n    id: StateID,\n    /// Whether this is a match state or not.\n    is_match: bool,\n    /// The number of transitions in this state.\n    ntrans: usize,\n    /// Pairs of input ranges, where there is one pair for each transition.\n    /// Each pair specifies an inclusive start and end byte range for the\n    /// corresponding transition.\n    input_ranges: &'a [u8],\n    /// Transitions to the next state. This slice contains native endian\n    /// encoded state identifiers, with `S` as the representation. Thus, there\n    /// are `ntrans * size_of::<S>()` bytes in this slice.\n    next: &'a [u8],\n    /// If this is a match state, then this contains the pattern IDs that match\n    /// when the DFA is in this state.\n    ///\n    /// This is a contiguous sequence of 32-bit native endian encoded integers.\n    pattern_ids: &'a [u8],\n    /// An accelerator for this state, if present. If this state has no\n    /// accelerator, then this is an empty slice. When non-empty, this slice\n    /// has length at most 3 and corresponds to the exhaustive set of bytes\n    /// that must be seen in order to transition out of this state.\n    accel: &'a [u8],\n}\nimpl<T: AsRef<[u8]>> Transitions<T> {\n    fn write_to<E: Endian>(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    fn write_to_len(&self) -> usize {}\n    fn validate(&self, sp: &Special) -> Result<Seen, DeserializeError> {}\n    fn as_ref(&self) -> Transitions<&'_ [u8]> {}\n    #[cfg(feature = \"alloc\")]\n    fn to_owned(&self) -> Transitions<alloc::vec::Vec<u8>> {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn state(&self, id: StateID) -> State<'_> {\n        let mut state = &self.sparse()[id.as_usize()..];\n        let mut ntrans = wire::read_u16(&state).as_usize();\n        let is_match = (1 << 15) & ntrans != 0;\n        ntrans &= !(1 << 15);\n        state = &state[2..];\n        let (input_ranges, state) = state.split_at(ntrans * 2);\n        let (next, state) = state.split_at(ntrans * StateID::SIZE);\n        let (pattern_ids, state) = if is_match {\n            let npats = wire::read_u32(&state).as_usize();\n            state[4..].split_at(npats * 4)\n        } else {\n            (&[][..], state)\n        };\n        let accel_len = usize::from(state[0]);\n        let accel = &state[1..accel_len + 1];\n        State {\n            id,\n            is_match,\n            ntrans,\n            input_ranges,\n            next,\n            pattern_ids,\n            accel,\n        }\n    }\n    fn try_state(\n        &self,\n        sp: &Special,\n        id: StateID,\n    ) -> Result<State<'_>, DeserializeError> {}\n    fn states(&self) -> StateIter<'_, T> {}\n    fn sparse(&self) -> &[u8] {\n        self.sparse.as_ref()\n    }\n    fn id_len(&self) -> usize {}\n    fn memory_usage(&self) -> usize {}\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn read_u32(slice: &[u8]) -> u32 {\n    let bytes: [u8; 4] = slice[..size_of::<u32>()].try_into().unwrap();\n    u32::from_ne_bytes(bytes)\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn read_u16(slice: &[u8]) -> u16 {\n    let bytes: [u8; 2] = slice[..size_of::<u16>()].try_into().unwrap();\n    u16::from_ne_bytes(bytes)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a convenient representation of the given state.\n///\n/// This panics if the state is invalid.\n///\n/// This is marked as inline to help dramatically boost sparse searching,\n/// which decodes each state it enters to follow the next transition. Other\n/// functions involved are also inlined, which should hopefully eliminate\n/// a lot of the extraneous decoding that is never needed just to follow\n/// the next transition.\n1499 fn state(&self, id: StateID) -> State<'_> {\n1500     let mut state = &self.sparse()[id.as_usize()..];\n1501     let mut ntrans = wire::read_u16(&state).as_usize();\n1502     let is_match = (1 << 15) & ntrans != 0;\n1503     ntrans &= !(1 << 15);\n1504     state = &state[2..];\n1505 \n1506     let (input_ranges, state) = state.split_at(ntrans * 2);\n1507     let (next, state) = state.split_at(ntrans * StateID::SIZE);\n1508     let (pattern_ids, state) = if is_match {\n1509         let npats = wire::read_u32(&state).as_usize();\n1510         state[4..].split_at(npats * 4)\n1511     } else {\n1512         (&[][..], state)\n1513     };\n1514 \n1515     let accel_len = usize::from(state[0]);\n1516     let accel = &state[1..accel_len + 1];\n1517     State { id, is_match, ntrans, input_ranges, next, pattern_ids, accel }\n1518 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}