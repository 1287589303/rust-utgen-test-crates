{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {\n        self.caps\n            .get_group_by_name(name)\n            .map(|sp| Match::new(self.haystack, sp.start, sp.end))\n    }\n    pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &str, dst: &mut String) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the `Match` associated with the capture group named `name`. If\n/// `name` isn't a valid capture group or it refers to a group that didn't\n/// match, then `None` is returned.\n///\n/// Note that unlike `caps[\"name\"]`, this returns a `Match` whose lifetime\n/// matches the lifetime of the haystack in this `Captures` value.\n/// Conversely, the substring returned by `caps[\"name\"]` has a lifetime\n/// of the `Captures` value, which is likely shorter than the lifetime of\n/// the haystack. In some cases, it may be necessary to use this method to\n/// access the matching substring instead of the `caps[\"name\"]` notation.\n///\n/// # Examples\n///\n/// Get the substring that matched with a default of an empty string if the\n/// group didn't participate in the match:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(\n///     r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\",\n/// ).unwrap();\n/// let caps = re.captures(\"abc123\").unwrap();\n///\n/// let numbers = caps.name(\"numbers\").map_or(\"\", |m| m.as_str());\n/// let letters = caps.name(\"letters\").map_or(\"\", |m| m.as_str());\n/// assert_eq!(numbers, \"123\");\n/// assert_eq!(letters, \"\");\n/// ```\n1708 pub fn name(&self, name: &str) -> Option<Match<'h>> {\n1709     self.caps\n1710         .get_group_by_name(name)\n1711         .map(|sp| Match::new(self.haystack, sp.start, sp.end))\n1712 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}