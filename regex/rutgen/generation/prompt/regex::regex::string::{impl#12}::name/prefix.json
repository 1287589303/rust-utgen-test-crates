{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {\n        self.caps\n            .get_group_by_name(name)\n            .map(|sp| Match::new(self.haystack, sp.start, sp.end))\n    }\n    pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &str, dst: &mut String) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the `Match` associated with the capture group named `name`. If\n/// `name` isn't a valid capture group or it refers to a group that didn't\n/// match, then `None` is returned.\n///\n/// Note that unlike `caps[\"name\"]`, this returns a `Match` whose lifetime\n/// matches the lifetime of the haystack in this `Captures` value.\n/// Conversely, the substring returned by `caps[\"name\"]` has a lifetime\n/// of the `Captures` value, which is likely shorter than the lifetime of\n/// the haystack. In some cases, it may be necessary to use this method to\n/// access the matching substring instead of the `caps[\"name\"]` notation.\n///\n/// # Examples\n///\n/// Get the substring that matched with a default of an empty string if the\n/// group didn't participate in the match:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(\n///     r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\",\n/// ).unwrap();\n/// let caps = re.captures(\"abc123\").unwrap();\n///\n/// let numbers = caps.name(\"numbers\").map_or(\"\", |m| m.as_str());\n/// let letters = caps.name(\"letters\").map_or(\"\", |m| m.as_str());\n/// assert_eq!(numbers, \"123\");\n/// assert_eq!(letters, \"\");\n/// ```\n1708 pub fn name(&self, name: &str) -> Option<Match<'h>> {\n1709     self.caps\n1710         .get_group_by_name(name)\n1711         .map(|sp| Match::new(self.haystack, sp.start, sp.end))\n1712 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}