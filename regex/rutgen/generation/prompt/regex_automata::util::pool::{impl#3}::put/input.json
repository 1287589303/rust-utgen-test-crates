{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\npub struct PoolGuard<'a, T: Send, F: Fn() -> T>(inner::PoolGuard<'a, T, F>);\npub(super) struct PoolGuard<'a, T: Send, F: Fn() -> T> {\n    /// The pool that this guard is attached to.\n    pool: &'a Pool<T, F>,\n    /// This is None after the guard has been put back into the pool.\n    value: Option<Box<T>>,\n}\nimpl<'a, T: Send, F: Fn() -> T> PoolGuard<'a, T, F> {\n    #[inline]\n    pub(super) fn put(this: PoolGuard<'_, T, F>) {\n        let mut this = core::mem::ManuallyDrop::new(this);\n        this.put_imp();\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Consumes this guard and puts it back into the pool.\n///\n/// This circumvents the guard's `Drop` implementation. This can be useful\n/// in circumstances where the automatic `Drop` results in poorer codegen,\n/// such as calling non-inlined functions.\n205 pub fn put(this: PoolGuard<'_, T, F>) {\n206     inner::PoolGuard::put(this.0);\n207 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}