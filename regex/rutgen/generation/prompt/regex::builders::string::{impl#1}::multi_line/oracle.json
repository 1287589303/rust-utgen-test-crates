{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{error::Error, Regex, RegexSet};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexSetBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexSetBuilder {\n    pub fn new<I, S>(patterns: I) -> RegexSetBuilder\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {}\n    pub fn build(&self) -> Result<RegexSet, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexSetBuilder {\n        self.builder.multi_line(yes);\n        self\n    }\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexSetBuilder {}\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexSetBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {\n        self.syntaxc = self.syntaxc.multi_line(yes);\n        self\n    }\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {}\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This configures multi-line mode for all of the patterns.\n///\n/// Enabling multi-line mode changes the behavior of the `^` and `$`\n/// anchor assertions. Instead of only matching at the beginning and\n/// end of a haystack, respectively, multi-line mode causes them to\n/// match at the beginning and end of a line *in addition* to the\n/// beginning and end of a haystack. More precisely, `^` will match at\n/// the position immediately following a `\\n` and `$` will match at the\n/// position immediately preceding a `\\n`.\n///\n/// The behavior of this option can be impacted by other settings too:\n///\n/// * The [`RegexSetBuilder::line_terminator`] option changes `\\n`\n/// above to any ASCII byte.\n/// * The [`RegexSetBuilder::crlf`] option changes the line terminator\n/// to be either `\\r` or `\\n`, but never at the position between a `\\r`\n/// and `\\n`.\n///\n/// This setting can also be configured using the inline flag `m` in\n/// the pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexSetBuilder;\n///\n/// let re = RegexSetBuilder::new([r\"^foo$\"])\n///     .multi_line(true)\n///     .build()\n///     .unwrap();\n/// assert!(re.is_match(\"\\nfoo\\n\"));\n/// ```\n940 pub fn multi_line(&mut self, yes: bool) -> &mut RegexSetBuilder {\n941     self.builder.multi_line(yes);\n942     self\n943 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}