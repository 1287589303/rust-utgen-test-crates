{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/look.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, utf8};\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Look {\n    /// Match the beginning of text. Specifically, this matches at the starting\n    /// position of the input.\n    Start = 1 << 0,\n    /// Match the end of text. Specifically, this matches at the ending\n    /// position of the input.\n    End = 1 << 1,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following a `\\n` character.\n    StartLF = 1 << 2,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\n` character.\n    EndLF = 1 << 3,\n    /// Match the beginning of a line or the beginning of text. Specifically,\n    /// this matches at the starting position of the input, or at the position\n    /// immediately following either a `\\r` or `\\n` character, but never after\n    /// a `\\r` when a `\\n` follows.\n    StartCRLF = 1 << 4,\n    /// Match the end of a line or the end of text. Specifically, this matches\n    /// at the end position of the input, or at the position immediately\n    /// preceding a `\\r` or `\\n` character, but never before a `\\n` when a `\\r`\n    /// precedes it.\n    EndCRLF = 1 << 5,\n    /// Match an ASCII-only word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordAscii = 1 << 6,\n    /// Match an ASCII-only negation of a word boundary.\n    WordAsciiNegate = 1 << 7,\n    /// Match a Unicode-aware word boundary. That is, this matches a position\n    /// where the left adjacent character and right adjacent character\n    /// correspond to a word and non-word or a non-word and word character.\n    WordUnicode = 1 << 8,\n    /// Match a Unicode-aware negation of a word boundary.\n    WordUnicodeNegate = 1 << 9,\n    /// Match the start of an ASCII-only word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartAscii = 1 << 10,\n    /// Match the end of an ASCII-only word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndAscii = 1 << 11,\n    /// Match the start of a Unicode word boundary. That is, this matches a\n    /// position at either the beginning of the haystack or where the previous\n    /// character is not a word character and the following character is a word\n    /// character.\n    WordStartUnicode = 1 << 12,\n    /// Match the end of a Unicode word boundary. That is, this matches a\n    /// position at either the end of the haystack or where the previous\n    /// character is a word character and the following character is not a word\n    /// character.\n    WordEndUnicode = 1 << 13,\n    /// Match the start half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfAscii = 1 << 14,\n    /// Match the end half of an ASCII-only word boundary. That is, this\n    /// matches a position at either the end of the haystack or where the\n    /// following character is not a word character.\n    WordEndHalfAscii = 1 << 15,\n    /// Match the start half of a Unicode word boundary. That is, this matches\n    /// a position at either the beginning of the haystack or where the\n    /// previous character is not a word character.\n    WordStartHalfUnicode = 1 << 16,\n    /// Match the end half of a Unicode word boundary. That is, this matches\n    /// a position at either the end of the haystack or where the following\n    /// character is not a word character.\n    WordEndHalfUnicode = 1 << 17,\n}\nimpl Look {\n    #[inline]\n    pub const fn reversed(self) -> Look {\n        match self {\n            Look::Start => Look::End,\n            Look::End => Look::Start,\n            Look::StartLF => Look::EndLF,\n            Look::EndLF => Look::StartLF,\n            Look::StartCRLF => Look::EndCRLF,\n            Look::EndCRLF => Look::StartCRLF,\n            Look::WordAscii => Look::WordAscii,\n            Look::WordAsciiNegate => Look::WordAsciiNegate,\n            Look::WordUnicode => Look::WordUnicode,\n            Look::WordUnicodeNegate => Look::WordUnicodeNegate,\n            Look::WordStartAscii => Look::WordEndAscii,\n            Look::WordEndAscii => Look::WordStartAscii,\n            Look::WordStartUnicode => Look::WordEndUnicode,\n            Look::WordEndUnicode => Look::WordStartUnicode,\n            Look::WordStartHalfAscii => Look::WordEndHalfAscii,\n            Look::WordEndHalfAscii => Look::WordStartHalfAscii,\n            Look::WordStartHalfUnicode => Look::WordEndHalfUnicode,\n            Look::WordEndHalfUnicode => Look::WordStartHalfUnicode,\n        }\n    }\n    #[inline]\n    pub const fn as_repr(self) -> u32 {}\n    #[inline]\n    pub const fn from_repr(repr: u32) -> Option<Look> {}\n    #[inline]\n    pub const fn as_char(self) -> char {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Flip the look-around assertion to its equivalent for reverse searches.\n/// For example, `StartLF` gets translated to `EndLF`.\n///\n/// Some assertions, such as `WordUnicode`, remain the same since they\n/// match the same positions regardless of the direction of the search.\n144 pub const fn reversed(self) -> Look {\n145     match self {\n146         Look::Start => Look::End,\n147         Look::End => Look::Start,\n148         Look::StartLF => Look::EndLF,\n149         Look::EndLF => Look::StartLF,\n150         Look::StartCRLF => Look::EndCRLF,\n151         Look::EndCRLF => Look::StartCRLF,\n152         Look::WordAscii => Look::WordAscii,\n153         Look::WordAsciiNegate => Look::WordAsciiNegate,\n154         Look::WordUnicode => Look::WordUnicode,\n155         Look::WordUnicodeNegate => Look::WordUnicodeNegate,\n156         Look::WordStartAscii => Look::WordEndAscii,\n157         Look::WordEndAscii => Look::WordStartAscii,\n158         Look::WordStartUnicode => Look::WordEndUnicode,\n159         Look::WordEndUnicode => Look::WordStartUnicode,\n160         Look::WordStartHalfAscii => Look::WordEndHalfAscii,\n161         Look::WordEndHalfAscii => Look::WordStartHalfAscii,\n162         Look::WordStartHalfUnicode => Look::WordEndHalfUnicode,\n163         Look::WordEndHalfUnicode => Look::WordStartHalfUnicode,\n164     }\n165 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}