{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn u32s_to_pattern_ids(slice: &[u32]) -> &[PatternID] {\n    unsafe {\n        core::slice::from_raw_parts(slice.as_ptr().cast::<PatternID>(), slice.len())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Safely converts a `&[u32]` to `&[PatternID]` with zero cost.\n301 pub(crate) fn u32s_to_pattern_ids(slice: &[u32]) -> &[PatternID] {\n302     // SAFETY: This is safe because PatternID is defined to have the same\n303     // memory representation as a u32 (it is repr(transparent)). While not\n304     // every u32 is a \"valid\" PatternID, callers are not permitted to rely\n305     // on the validity of PatternIDs for memory safety. It can only lead to\n306     // logical errors. (This is why PatternID::new_unchecked is safe.)\n307     unsafe {\n308         core::slice::from_raw_parts(\n309             slice.as_ptr().cast::<PatternID>(),\n310             slice.len(),\n311         )\n312     }\n313 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}