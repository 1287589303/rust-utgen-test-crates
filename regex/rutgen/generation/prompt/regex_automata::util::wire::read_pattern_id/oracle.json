{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\npub(crate) fn read_pattern_id(\n    slice: &[u8],\n    what: &'static str,\n) -> Result<(PatternID, usize), DeserializeError> {\n    let bytes: [u8; PatternID::SIZE] = slice[..PatternID::SIZE].try_into().unwrap();\n    let pid = PatternID::from_ne_bytes(bytes)\n        .map_err(|err| DeserializeError::pattern_id_error(err, what))?;\n    Ok((pid, PatternID::SIZE))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reads a pattern ID from the given slice. If the slice has insufficient\n/// length, then this panics. If the deserialized integer exceeds the pattern\n/// ID limit for the current target, then this returns an error.\n///\n/// Upon success, this also returns the number of bytes read.\n581 pub(crate) fn read_pattern_id(\n582     slice: &[u8],\n583     what: &'static str,\n584 ) -> Result<(PatternID, usize), DeserializeError> {\n585     let bytes: [u8; PatternID::SIZE] =\n586         slice[..PatternID::SIZE].try_into().unwrap();\n587     let pid = PatternID::from_ne_bytes(bytes)\n588         .map_err(|err| DeserializeError::pattern_id_error(err, what))?;\n589     Ok((pid, PatternID::SIZE))\n590 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}