{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ClassUnicode {\n    set: IntervalSet<ClassUnicodeRange>,\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn script_extension(canonical_name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    #[cfg(not(feature = \"unicode-script\"))]\n    fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n        Err(Error::PropertyNotFound)\n    }\n    #[cfg(feature = \"unicode-script\")]\n    fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n        use crate::unicode_tables::script_extension::BY_NAME;\n        property_set(BY_NAME, name).map(hir_class).ok_or(Error::PropertyValueNotFound)\n    }\n    imp(canonical_name)\n}\n#[cfg(feature = \"unicode-script\")]\nfn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n    use crate::unicode_tables::script_extension::BY_NAME;\n    property_set(BY_NAME, name).map(hir_class).ok_or(Error::PropertyValueNotFound)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the Unicode HIR class corresponding to the given script extension.\n///\n/// Name canonicalization is assumed to be performed by the caller.\n///\n/// If the given script extension could not be found, or if the script data is\n/// not available, then an error is returned.\n757 fn script_extension(\n758     canonical_name: &'static str,\n759 ) -> Result<hir::ClassUnicode, Error> {\n760     #[cfg(not(feature = \"unicode-script\"))]\n761     fn imp(_: &'static str) -> Result<hir::ClassUnicode, Error> {\n762         Err(Error::PropertyNotFound)\n763     }\n764 \n765     #[cfg(feature = \"unicode-script\")]\n766     fn imp(name: &'static str) -> Result<hir::ClassUnicode, Error> {\n767         use crate::unicode_tables::script_extension::BY_NAME;\n768         property_set(BY_NAME, name)\n769             .map(hir_class)\n770             .ok_or(Error::PropertyValueNotFound)\n771     }\n772 \n773     imp(canonical_name)\n774 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}