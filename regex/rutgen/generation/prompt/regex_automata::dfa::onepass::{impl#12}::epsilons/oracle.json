{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Copy)]\nstruct PatternEpsilons(u64);\n#[derive(Clone, Copy)]\nstruct Epsilons(u64);\nimpl PatternEpsilons {\n    const PATTERN_ID_BITS: u64 = 22;\n    const PATTERN_ID_SHIFT: u64 = 64 - PatternEpsilons::PATTERN_ID_BITS;\n    const PATTERN_ID_NONE: u64 = 0x00000000_003FFFFF;\n    const PATTERN_ID_LIMIT: u64 = PatternEpsilons::PATTERN_ID_NONE;\n    const PATTERN_ID_MASK: u64 = 0xFFFFFC00_00000000;\n    const EPSILONS_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn empty() -> PatternEpsilons {}\n    fn is_empty(self) -> bool {}\n    fn pattern_id(self) -> Option<PatternID> {}\n    fn pattern_id_unchecked(self) -> PatternID {}\n    fn set_pattern_id(self, pid: PatternID) -> PatternEpsilons {}\n    fn epsilons(self) -> Epsilons {\n        Epsilons(self.0 & PatternEpsilons::EPSILONS_MASK)\n    }\n    fn set_epsilons(self, epsilons: Epsilons) -> PatternEpsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the epsilons part of this pattern epsilons.\n2736 fn epsilons(self) -> Epsilons {\n2737     Epsilons(self.0 & PatternEpsilons::EPSILONS_MASK)\n2738 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}