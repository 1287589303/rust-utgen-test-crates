{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/literal_trie.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, compiler::ThompsonRef, BuildError, Builder},\n    util::primitives::{IteratorIndexExt, StateID},\n};\n#[derive(Clone, Default)]\nstruct State {\n    transitions: Vec<Transition>,\n    chunks: Vec<(usize, usize)>,\n}\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Debug)]\nstruct StateChunksIter<'a> {\n    transitions: &'a [Transition],\n    chunks: core::slice::Iter<'a, (usize, usize)>,\n    active: Option<&'a [Transition]>,\n}\nimpl State {\n    fn add_match(&mut self) {}\n    fn is_leaf(&self) -> bool {}\n    fn chunks(&self) -> StateChunksIter<'_> {\n        StateChunksIter {\n            transitions: &*self.transitions,\n            chunks: self.chunks.iter(),\n            active: Some(self.active_chunk()),\n        }\n    }\n    fn active_chunk(&self) -> &[Transition] {\n        let start = self.active_chunk_start();\n        &self.transitions[start..]\n    }\n    fn active_chunk_start(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over all of the chunks (including the currently\n/// active chunk) in this state. Since the active chunk is included, the\n/// iterator is guaranteed to always yield at least one chunk (although the\n/// chunk may be empty).\n397 fn chunks(&self) -> StateChunksIter<'_> {\n398     StateChunksIter {\n399         transitions: &*self.transitions,\n400         chunks: self.chunks.iter(),\n401         active: Some(self.active_chunk()),\n402     }\n403 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}