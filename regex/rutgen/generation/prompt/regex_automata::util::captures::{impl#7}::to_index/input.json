{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Debug, Default)]\nstruct GroupInfoInner {\n    slot_ranges: Vec<(SmallIndex, SmallIndex)>,\n    name_to_index: Vec<CaptureNameMap>,\n    index_to_name: Vec<Vec<Option<Arc<str>>>>,\n    memory_extra: usize,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct SmallIndex(u32);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl GroupInfo {\n    pub fn new<P, G, N>(pattern_groups: P) -> Result<GroupInfo, GroupInfoError>\n    where\n        P: IntoIterator<Item = G>,\n        G: IntoIterator<Item = Option<N>>,\n        N: AsRef<str>,\n    {}\n    pub fn empty() -> GroupInfo {}\n    #[inline]\n    pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {\n        let indices = self.0.name_to_index.get(pid.as_usize())?;\n        indices.get(name).cloned().map(|i| i.as_usize())\n    }\n    #[inline]\n    pub fn to_name(&self, pid: PatternID, group_index: usize) -> Option<&str> {}\n    #[inline]\n    pub fn pattern_names(&self, pid: PatternID) -> GroupInfoPatternNames<'_> {}\n    #[inline]\n    pub fn all_names(&self) -> GroupInfoAllNames<'_> {}\n    #[inline]\n    pub fn slots(&self, pid: PatternID, group_index: usize) -> Option<(usize, usize)> {}\n    #[inline]\n    pub fn slot(&self, pid: PatternID, group_index: usize) -> Option<usize> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn group_len(&self, pid: PatternID) -> usize {}\n    #[inline]\n    pub fn all_group_len(&self) -> usize {}\n    #[inline]\n    pub fn slot_len(&self) -> usize {}\n    #[inline]\n    pub fn implicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn explicit_slot_len(&self) -> usize {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the capture group index corresponding to the given name in the\n/// given pattern. If no such capture group name exists in the given\n/// pattern, then this returns `None`.\n///\n/// If the given pattern ID is invalid, then this returns `None`.\n///\n/// This also returns `None` for all inputs if these captures are empty\n/// (e.g., built from an empty [`GroupInfo`]). To check whether captures\n/// are present for a specific pattern, use [`GroupInfo::group_len`].\n///\n/// # Example\n///\n/// This example shows how to find the capture index for the given pattern\n/// and group name.\n///\n/// Remember that capture indices are relative to the pattern, such that\n/// the same capture index value may refer to different capturing groups\n/// for distinct patterns.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{nfa::thompson::NFA, PatternID};\n///\n/// let (pid0, pid1) = (PatternID::must(0), PatternID::must(1));\n///\n/// let nfa = NFA::new_many(&[\n///     r\"a(?P<quux>\\w+)z(?P<foo>\\s+)\",\n///     r\"a(?P<foo>\\d+)z\",\n/// ])?;\n/// let groups = nfa.group_info();\n/// assert_eq!(Some(2), groups.to_index(pid0, \"foo\"));\n/// // Recall that capture index 0 is always unnamed and refers to the\n/// // entire pattern. So the first capturing group present in the pattern\n/// // itself always starts at index 1.\n/// assert_eq!(Some(1), groups.to_index(pid1, \"foo\"));\n///\n/// // And if a name does not exist for a particular pattern, None is\n/// // returned.\n/// assert!(groups.to_index(pid0, \"quux\").is_some());\n/// assert!(groups.to_index(pid1, \"quux\").is_none());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1682 pub fn to_index(&self, pid: PatternID, name: &str) -> Option<usize> {\n1683     let indices = self.0.name_to_index.get(pid.as_usize())?;\n1684     indices.get(name).cloned().map(|i| i.as_usize())\n1685 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}