{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\npub(crate) trait Usize {\n    fn as_u8(self) -> u8;\n    fn as_u16(self) -> u16;\n    fn as_u32(self) -> u32;\n    fn as_u64(self) -> u64;\n}\n#[derive(Debug)]\nstruct SparseTransitionIter<'a> {\n    it: core::iter::Enumerate<core::slice::Iter<'a, Transition>>,\n    cur: Option<(u8, u8, Transition)>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'a> Iterator for SparseTransitionIter<'a> {\n    type Item = (u8, u8, Transition);\n    fn next(&mut self) -> Option<(u8, u8, Transition)> {\n        while let Some((b, &trans)) = self.it.next() {\n            let b = b.as_u8();\n            let (prev_start, prev_end, prev_trans) = match self.cur {\n                Some(t) => t,\n                None => {\n                    self.cur = Some((b, b, trans));\n                    continue;\n                }\n            };\n            if prev_trans == trans {\n                self.cur = Some((prev_start, b, prev_trans));\n            } else {\n                self.cur = Some((b, b, trans));\n                if prev_trans.state_id() != DEAD {\n                    return Some((prev_start, prev_end, prev_trans));\n                }\n            }\n        }\n        if let Some((start, end, trans)) = self.cur.take() {\n            if trans.state_id() != DEAD {\n                return Some((start, end, trans));\n            }\n        }\n        None\n    }\n}\nimpl Transition {\n    const STATE_ID_BITS: u64 = 21;\n    const STATE_ID_SHIFT: u64 = 64 - Transition::STATE_ID_BITS;\n    const STATE_ID_LIMIT: u64 = 1 << Transition::STATE_ID_BITS;\n    const MATCH_WINS_SHIFT: u64 = 64 - (Transition::STATE_ID_BITS + 1);\n    const INFO_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn new(match_wins: bool, sid: StateID, epsilons: Epsilons) -> Transition {}\n    fn is_dead(self) -> bool {}\n    fn match_wins(&self) -> bool {}\n    fn state_id(&self) -> StateID {\n        StateID::new_unchecked((self.0 >> Transition::STATE_ID_SHIFT).as_usize())\n    }\n    fn set_state_id(&mut self, sid: StateID) {}\n    fn epsilons(&self) -> Epsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2448 fn next(&mut self) -> Option<(u8, u8, Transition)> {\n2449     while let Some((b, &trans)) = self.it.next() {\n2450         // Fine because we'll never have more than u8::MAX transitions in\n2451         // one state.\n2452         let b = b.as_u8();\n2453         let (prev_start, prev_end, prev_trans) = match self.cur {\n2454             Some(t) => t,\n2455             None => {\n2456                 self.cur = Some((b, b, trans));\n2457                 continue;\n2458             }\n2459         };\n2460         if prev_trans == trans {\n2461             self.cur = Some((prev_start, b, prev_trans));\n2462         } else {\n2463             self.cur = Some((b, b, trans));\n2464             if prev_trans.state_id() != DEAD {\n2465                 return Some((prev_start, prev_end, prev_trans));\n2466             }\n2467         }\n2468     }\n2469     if let Some((start, end, trans)) = self.cur.take() {\n2470         if trans.state_id() != DEAD {\n2471             return Some((start, end, trans));\n2472         }\n2473     }\n2474     None\n2475 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}