{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\npub(crate) trait Usize {\n    fn as_u8(self) -> u8;\n    fn as_u16(self) -> u16;\n    fn as_u32(self) -> u32;\n    fn as_u64(self) -> u64;\n}\n#[derive(Debug)]\nstruct SparseTransitionIter<'a> {\n    it: core::iter::Enumerate<core::slice::Iter<'a, Transition>>,\n    cur: Option<(u8, u8, Transition)>,\n}\n#[derive(Clone, Copy, Eq, PartialEq)]\nstruct Transition(u64);\n#[derive(Clone)]\nstruct Transition {\n    /// The byte range.\n    range: Utf8Range,\n    /// The next state to transition to.\n    next_id: StateID,\n}\n#[derive(Clone, Copy)]\nstruct Transition {\n    byte: u8,\n    next: StateID,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Transition {\n    /// The inclusive start of the byte range.\n    pub start: u8,\n    /// The inclusive end of the byte range.\n    pub end: u8,\n    /// The identifier of the state to transition to.\n    pub next: StateID,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl<'a> Iterator for SparseTransitionIter<'a> {\n    type Item = (u8, u8, Transition);\n    fn next(&mut self) -> Option<(u8, u8, Transition)> {\n        while let Some((b, &trans)) = self.it.next() {\n            let b = b.as_u8();\n            let (prev_start, prev_end, prev_trans) = match self.cur {\n                Some(t) => t,\n                None => {\n                    self.cur = Some((b, b, trans));\n                    continue;\n                }\n            };\n            if prev_trans == trans {\n                self.cur = Some((prev_start, b, prev_trans));\n            } else {\n                self.cur = Some((b, b, trans));\n                if prev_trans.state_id() != DEAD {\n                    return Some((prev_start, prev_end, prev_trans));\n                }\n            }\n        }\n        if let Some((start, end, trans)) = self.cur.take() {\n            if trans.state_id() != DEAD {\n                return Some((start, end, trans));\n            }\n        }\n        None\n    }\n}\nimpl Transition {\n    const STATE_ID_BITS: u64 = 21;\n    const STATE_ID_SHIFT: u64 = 64 - Transition::STATE_ID_BITS;\n    const STATE_ID_LIMIT: u64 = 1 << Transition::STATE_ID_BITS;\n    const MATCH_WINS_SHIFT: u64 = 64 - (Transition::STATE_ID_BITS + 1);\n    const INFO_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn new(match_wins: bool, sid: StateID, epsilons: Epsilons) -> Transition {}\n    fn is_dead(self) -> bool {}\n    fn match_wins(&self) -> bool {}\n    fn state_id(&self) -> StateID {\n        StateID::new_unchecked((self.0 >> Transition::STATE_ID_SHIFT).as_usize())\n    }\n    fn set_state_id(&mut self, sid: StateID) {}\n    fn epsilons(&self) -> Epsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2448 fn next(&mut self) -> Option<(u8, u8, Transition)> {\n2449     while let Some((b, &trans)) = self.it.next() {\n2450         // Fine because we'll never have more than u8::MAX transitions in\n2451         // one state.\n2452         let b = b.as_u8();\n2453         let (prev_start, prev_end, prev_trans) = match self.cur {\n2454             Some(t) => t,\n2455             None => {\n2456                 self.cur = Some((b, b, trans));\n2457                 continue;\n2458             }\n2459         };\n2460         if prev_trans == trans {\n2461             self.cur = Some((prev_start, b, prev_trans));\n2462         } else {\n2463             self.cur = Some((b, b, trans));\n2464             if prev_trans.state_id() != DEAD {\n2465                 return Some((prev_start, prev_end, prev_trans));\n2466             }\n2467         }\n2468     }\n2469     if let Some((start, end, trans)) = self.cur.take() {\n2470         if trans.state_id() != DEAD {\n2471             return Some((start, end, trans));\n2472         }\n2473     }\n2474     None\n2475 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}