{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/hybrid/dfa.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype StateMap = std::collections::HashMap<State, LazyStateID>;\n#[cfg(not(feature = \"std\"))]\ntype StateMap = alloc::collections::BTreeMap<State, LazyStateID>;\nuse core::{iter, mem::size_of};\nuse alloc::vec::Vec;\nuse crate::{\n    hybrid::{\n        error::{BuildError, CacheError, StartError},\n        id::{LazyStateID, LazyStateIDError},\n        search,\n    },\n    nfa::thompson,\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        determinize::{self, State, StateBuilderEmpty, StateBuilderNFA},\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID as NFAStateID},\n        search::{Anchored, HalfMatch, Input, MatchError, MatchKind, PatternSet},\n        sparse_set::SparseSets, start::{self, Start, StartByteMap},\n    },\n};\nconst MIN_STATES: usize = SENTINEL_STATES + 2;\nconst SENTINEL_STATES: usize = 3;\n#[derive(Clone, Debug)]\npub struct DFA {\n    config: Config,\n    nfa: thompson::NFA,\n    stride2: usize,\n    start_map: StartByteMap,\n    classes: ByteClasses,\n    quitset: ByteSet,\n    cache_capacity: usize,\n}\n#[derive(Debug)]\nstruct Lazy<'i, 'c> {\n    dfa: &'i DFA,\n    cache: &'c mut Cache,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[derive(Clone)]\npub(crate) struct StartByteMap {\n    map: [Start; 256],\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// The transition table.\n    ///\n    /// Given a `current` LazyStateID and an `input` byte, the next state can\n    /// be computed via `trans[untagged(current) + equiv_class(input)]`. Notice\n    /// that no multiplication is used. That's because state identifiers are\n    /// \"premultiplied.\"\n    ///\n    /// Note that the next state may be the \"unknown\" state. In this case, the\n    /// next state is not known and determinization for `current` on `input`\n    /// must be performed.\n    trans: Vec<LazyStateID>,\n    /// The starting states for this DFA.\n    ///\n    /// These are computed lazily. Initially, these are all set to \"unknown\"\n    /// lazy state IDs.\n    ///\n    /// When 'starts_for_each_pattern' is disabled (the default), then the size\n    /// of this is constrained to the possible starting configurations based\n    /// on the search parameters. (At time of writing, that's 4.) However,\n    /// when starting states for each pattern is enabled, then there are N\n    /// additional groups of starting states, where each group reflects the\n    /// different possible configurations and N is the number of patterns.\n    starts: Vec<LazyStateID>,\n    /// A sequence of NFA/DFA powerset states that have been computed for this\n    /// lazy DFA. This sequence is indexable by untagged LazyStateIDs. (Every\n    /// tagged LazyStateID can be used to index this sequence by converting it\n    /// to its untagged form.)\n    states: Vec<State>,\n    /// A map from states to their corresponding IDs. This map may be accessed\n    /// via the raw byte representation of a state, which means that a `State`\n    /// does not need to be allocated to determine whether it already exists\n    /// in this map. Indeed, the existence of such a state is what determines\n    /// whether we allocate a new `State` or not.\n    ///\n    /// The higher level idea here is that we do just enough determinization\n    /// for a state to check whether we've already computed it. If we have,\n    /// then we can save a little (albeit not much) work. The real savings is\n    /// in memory usage. If we never checked for trivially duplicate states,\n    /// then our memory usage would explode to unreasonable levels.\n    states_to_id: StateMap,\n    /// Sparse sets used to track which NFA states have been visited during\n    /// various traversals.\n    sparses: SparseSets,\n    /// Scratch space for traversing the NFA graph. (We use space on the heap\n    /// instead of the call stack.)\n    stack: Vec<NFAStateID>,\n    /// Scratch space for building a NFA/DFA powerset state. This is used to\n    /// help amortize allocation since not every powerset state generated is\n    /// added to the cache. In particular, if it already exists in the cache,\n    /// then there is no need to allocate a new `State` for it.\n    scratch_state_builder: StateBuilderEmpty,\n    /// A simple abstraction for handling the saving of at most a single state\n    /// across a cache clearing. This is required for correctness. Namely, if\n    /// adding a new state after clearing the cache fails, then the caller\n    /// must retain the ability to continue using the state ID given. The\n    /// state corresponding to the state ID is what we preserve across cache\n    /// clearings.\n    state_saver: StateSaver,\n    /// The memory usage, in bytes, used by 'states' and 'states_to_id'. We\n    /// track this as new states are added since states use a variable amount\n    /// of heap. Tracking this as we add states makes it possible to compute\n    /// the total amount of memory used by the determinizer in constant time.\n    memory_usage_state: usize,\n    /// The number of times the cache has been cleared. When a minimum cache\n    /// clear count is set, then the cache will return an error instead of\n    /// clearing the cache if the count has been exceeded.\n    clear_count: usize,\n    /// The total number of bytes searched since the last time this cache was\n    /// cleared, not including the current search.\n    ///\n    /// This can be added to the length of the current search to get the true\n    /// total number of bytes searched.\n    ///\n    /// This is generally only non-zero when the\n    /// `Cache::search_{start,update,finish}` APIs are used to track search\n    /// progress.\n    bytes_searched: usize,\n    /// The progress of the current search.\n    ///\n    /// This is only non-`None` when callers utlize the `Cache::search_start`,\n    /// `Cache::search_update` and `Cache::search_finish` APIs.\n    ///\n    /// The purpose of recording search progress is to be able to make a\n    /// determination about the efficiency of the cache. Namely, by keeping\n    /// track of the\n    progress: Option<SearchProgress>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    pre: Option<Option<Prefilter>>,\n    visited_capacity: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct Config {\n    match_kind: MatchKind,\n    quit: ByteSet,\n    dfa_size_limit: Option<usize>,\n    determinize_size_limit: Option<usize>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Debug)]\npub struct Config {\n    look_behind: Option<u8>,\n    anchored: Anchored,\n}\nimpl DFA {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<DFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<DFA, BuildError> {}\n    pub fn always_match() -> Result<DFA, BuildError> {}\n    pub fn never_match() -> Result<DFA, BuildError> {}\n    pub fn config() -> Config {}\n    pub fn builder() -> Builder {}\n    pub fn create_cache(&self) -> Cache {}\n    pub fn reset_cache(&self, cache: &mut Cache) {\n        Lazy::new(self, cache).reset_cache()\n    }\n    pub fn pattern_len(&self) -> usize {}\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    pub fn get_config(&self) -> &Config {}\n    pub fn get_nfa(&self) -> &thompson::NFA {}\n    fn stride2(&self) -> usize {}\n    fn stride(&self) -> usize {}\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl<'i, 'c> Lazy<'i, 'c> {\n    fn new(dfa: &'i DFA, cache: &'c mut Cache) -> Lazy<'i, 'c> {\n        Lazy { dfa, cache }\n    }\n    fn as_ref<'a>(&'a self) -> LazyRef<'i, 'a> {}\n    #[cold]\n    #[inline(never)]\n    fn cache_next_state(\n        &mut self,\n        mut current: LazyStateID,\n        unit: alphabet::Unit,\n    ) -> Result<LazyStateID, CacheError> {}\n    #[cold]\n    #[inline(never)]\n    fn cache_start_group(\n        &mut self,\n        anchored: Anchored,\n        start: Start,\n    ) -> Result<LazyStateID, StartError> {}\n    fn cache_start_one(\n        &mut self,\n        nfa_start_id: NFAStateID,\n        start: Start,\n    ) -> Result<LazyStateID, CacheError> {}\n    fn add_builder_state(\n        &mut self,\n        builder: StateBuilderNFA,\n        idmap: impl Fn(LazyStateID) -> LazyStateID,\n    ) -> Result<LazyStateID, CacheError> {}\n    fn add_state(\n        &mut self,\n        state: State,\n        idmap: impl Fn(LazyStateID) -> LazyStateID,\n    ) -> Result<LazyStateID, CacheError> {}\n    fn next_state_id(&mut self) -> Result<LazyStateID, CacheError> {}\n    fn try_clear_cache(&mut self) -> Result<(), CacheError> {}\n    fn reset_cache(&mut self) {\n        self.cache.state_saver = StateSaver::none();\n        self.clear_cache();\n        self.cache.sparses.resize(self.dfa.get_nfa().states().len());\n        self.cache.clear_count = 0;\n        self.cache.progress = None;\n    }\n    fn clear_cache(&mut self) {}\n    fn init_cache(&mut self) {}\n    fn save_state(&mut self, id: LazyStateID) {}\n    fn saved_state_id(&mut self) -> LazyStateID {}\n    fn set_all_transitions(&mut self, from: LazyStateID, to: LazyStateID) {}\n    fn set_transition(\n        &mut self,\n        from: LazyStateID,\n        unit: alphabet::Unit,\n        to: LazyStateID,\n    ) {}\n    fn set_start_state(&mut self, anchored: Anchored, start: Start, id: LazyStateID) {}\n    fn get_state_builder(&mut self) -> StateBuilderEmpty {}\n    fn put_state_builder(&mut self, builder: StateBuilderNFA) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reset the given cache such that it can be used for searching with the\n/// this lazy DFA (and only this DFA).\n///\n/// A cache reset permits reusing memory already allocated in this cache\n/// with a different lazy DFA.\n///\n/// Resetting a cache sets its \"clear count\" to 0. This is relevant if the\n/// lazy DFA has been configured to \"give up\" after it has cleared the\n/// cache a certain number of times.\n///\n/// Any lazy state ID generated by the cache prior to resetting it is\n/// invalid after the reset.\n///\n/// # Example\n///\n/// This shows how to re-purpose a cache for use with a different DFA.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{hybrid::dfa::DFA, HalfMatch, Input};\n///\n/// let dfa1 = DFA::new(r\"\\w\")?;\n/// let dfa2 = DFA::new(r\"\\W\")?;\n///\n/// let mut cache = dfa1.create_cache();\n/// assert_eq!(\n///     Some(HalfMatch::must(0, 2)),\n///     dfa1.try_search_fwd(&mut cache, &Input::new(\"Δ\"))?,\n/// );\n///\n/// // Using 'cache' with dfa2 is not allowed. It may result in panics or\n/// // incorrect results. In order to re-purpose the cache, we must reset\n/// // it with the DFA we'd like to use it with.\n/// //\n/// // Similarly, after this reset, using the cache with 'dfa1' is also not\n/// // allowed.\n/// dfa2.reset_cache(&mut cache);\n/// assert_eq!(\n///     Some(HalfMatch::must(0, 3)),\n///     dfa2.try_search_fwd(&mut cache, &Input::new(\"☃\"))?,\n/// );\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n346 pub fn reset_cache(&self, cache: &mut Cache) {\n347     Lazy::new(self, cache).reset_cache()\n348 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}