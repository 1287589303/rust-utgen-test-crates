{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone, Debug)]\npub struct CaptureNames<'r>(captures::GroupInfoPatternNames<'r>);\nimpl Regex {\n    #[inline]\n    pub fn as_str(&self) -> &str {}\n    #[inline]\n    pub fn capture_names(&self) -> CaptureNames<'_> {\n        CaptureNames(self.meta.group_info().pattern_names(PatternID::ZERO))\n    }\n    #[inline]\n    pub fn captures_len(&self) -> usize {}\n    #[inline]\n    pub fn static_captures_len(&self) -> Option<usize> {}\n    #[inline]\n    pub fn capture_locations(&self) -> CaptureLocations {}\n    #[inline]\n    pub fn locations(&self) -> CaptureLocations {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over the capture names in this regex.\n///\n/// The iterator returned yields elements of type `Option<&str>`. That is,\n/// the iterator yields values for all capture groups, even ones that are\n/// unnamed. The order of the groups corresponds to the order of the group's\n/// corresponding opening parenthesis.\n///\n/// The first element of the iterator always yields the group corresponding\n/// to the overall match, and this group is always unnamed. Therefore, the\n/// iterator always yields at least one group.\n///\n/// # Example\n///\n/// This shows basic usage with a mix of named and unnamed capture groups:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), Some(Some(\"a\")));\n/// assert_eq!(names.next(), Some(Some(\"b\")));\n/// assert_eq!(names.next(), Some(None));\n/// // the '(?:.)' group is non-capturing and so doesn't appear here!\n/// assert_eq!(names.next(), Some(Some(\"c\")));\n/// assert_eq!(names.next(), None);\n/// ```\n///\n/// The iterator always yields at least one element, even for regexes with\n/// no capture groups and even for regexes that can never match:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), None);\n///\n/// let re = Regex::new(r\"[a&&b]\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), None);\n/// ```\n1325 pub fn capture_names(&self) -> CaptureNames<'_> {\n1326     CaptureNames(self.meta.group_info().pattern_names(PatternID::ZERO))\n1327 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}