{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Debug)]\npub struct Split<'r, 'h> {\n    haystack: &'h [u8],\n    it: meta::Split<'r, 'h>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &[u8]) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h [u8]) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {}\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h [u8]) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(\n        &'r self,\n        haystack: &'h [u8],\n    ) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {\n        Split {\n            haystack,\n            it: self.meta.split(haystack),\n        }\n    }\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h [u8], limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h [u8], rep: R) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        rep: R,\n    ) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, [u8]> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator of substrings of the haystack given, delimited by a\n/// match of the regex. Namely, each element of the iterator corresponds to\n/// a part of the haystack that *isn't* matched by the regular expression.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// # Example\n///\n/// To split a string delimited by arbitrary amounts of spaces or tabs:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"[ \\t]+\").unwrap();\n/// let hay = b\"a b \\t  c\\td    e\";\n/// let fields: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(fields, vec![\n///     &b\"a\"[..], &b\"b\"[..], &b\"c\"[..], &b\"d\"[..], &b\"e\"[..],\n/// ]);\n/// ```\n///\n/// # Example: more cases\n///\n/// Basic usage:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = b\"Mary had a little lamb\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &b\"Mary\"[..], &b\"had\"[..], &b\"a\"[..], &b\"little\"[..], &b\"lamb\"[..],\n/// ]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![&b\"\"[..]]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"lionXXtigerXleopard\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &b\"lion\"[..], &b\"\"[..], &b\"tiger\"[..], &b\"leopard\"[..],\n/// ]);\n///\n/// let re = Regex::new(r\"::\").unwrap();\n/// let hay = b\"lion::tiger::leopard\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![&b\"lion\"[..], &b\"tiger\"[..], &b\"leopard\"[..]]);\n/// ```\n///\n/// If a haystack contains multiple contiguous matches, you will end up\n/// with empty spans yielded by the iterator:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"XXXXaXXbXc\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &b\"\"[..], &b\"\"[..], &b\"\"[..], &b\"\"[..],\n///     &b\"a\"[..], &b\"\"[..], &b\"b\"[..], &b\"c\"[..],\n/// ]);\n///\n/// let re = Regex::new(r\"/\").unwrap();\n/// let hay = b\"(///)\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![&b\"(\"[..], &b\"\"[..], &b\"\"[..], &b\")\"[..]]);\n/// ```\n///\n/// Separators at the start or end of a haystack are neighbored by empty\n/// substring.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"0\").unwrap();\n/// let hay = b\"010\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![&b\"\"[..], &b\"1\"[..], &b\"\"[..]]);\n/// ```\n///\n/// When the regex can match the empty string, it splits at every byte\n/// position in the haystack. This includes between all UTF-8 code units.\n/// (The top-level [`Regex::split`](crate::Regex::split) will only split\n/// at valid UTF-8 boundaries.)\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let hay = \"â˜ƒ\".as_bytes();\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &[][..], &[b'\\xE2'][..], &[b'\\x98'][..], &[b'\\x83'][..], &[][..],\n/// ]);\n/// ```\n///\n/// Contiguous separators (commonly shows up with whitespace), can lead to\n/// possibly surprising behavior. For example, this code is correct:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = b\"    a  b c\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &b\"\"[..], &b\"\"[..], &b\"\"[..], &b\"\"[..],\n///     &b\"a\"[..], &b\"\"[..], &b\"b\"[..], &b\"c\"[..],\n/// ]);\n/// ```\n///\n/// It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, you'd want\n/// to match contiguous space characters:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\" +\").unwrap();\n/// let hay = b\"    a  b c\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// // N.B. This does still include a leading empty span because ' +'\n/// // matches at the beginning of the haystack.\n/// assert_eq!(got, vec![&b\"\"[..], &b\"a\"[..], &b\"b\"[..], &b\"c\"[..]]);\n/// ```\n562 pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {\n563     Split { haystack, it: self.meta.split(haystack) }\n564 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}