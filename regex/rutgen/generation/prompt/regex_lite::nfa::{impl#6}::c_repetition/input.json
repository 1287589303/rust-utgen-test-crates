{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/nfa.rs\n// crate name is regex_lite\npub(crate) type StateID = u32;\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, u32>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, u32>;\nuse core::{cell::RefCell, mem::size_of};\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::{\n    error::Error, hir::{self, Hir, HirKind},\n    int::U32,\n};\n#[derive(Debug)]\nstruct Compiler {\n    config: Config,\n    nfa: RefCell<NFA>,\n}\n#[derive(Clone)]\npub(crate) struct NFA {\n    /// The pattern string this NFA was generated from.\n    ///\n    /// We put it here for lack of a better place to put it. ¯\\_(ツ)_/¯\n    pattern: String,\n    /// The states that make up this NFA.\n    states: Vec<State>,\n    /// The ID of the start state.\n    start: StateID,\n    /// Whether this NFA can only match at the beginning of a haystack.\n    is_start_anchored: bool,\n    /// Whether this NFA can match the empty string.\n    is_match_empty: bool,\n    /// If every match has the same number of matching capture groups, then\n    /// this corresponds to the number of groups.\n    static_explicit_captures_len: Option<usize>,\n    /// A map from capture group name to its corresponding index.\n    cap_name_to_index: CaptureNameMap,\n    /// A map from capture group index to the corresponding name, if one\n    /// exists.\n    cap_index_to_name: Vec<Option<Arc<str>>>,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Hir {\n    kind: HirKind,\n    is_start_anchored: bool,\n    is_match_empty: bool,\n    static_explicit_captures_len: Option<usize>,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    /// The maximum number of times we're allowed to recurse.\n    ///\n    /// Note that unlike the regex-syntax parser, we actually use recursion in\n    /// this parser for simplicity. My hope is that by setting a conservative\n    /// default call limit and providing a way to configure it, that we can\n    /// keep this simplification. But if we must, we can re-work the parser to\n    /// put the call stack on the heap like regex-syntax does.\n    pub(crate) nest_limit: u32,\n    /// Various flags that control how a pattern is interpreted.\n    pub(crate) flags: Flags,\n}\n#[derive(Clone, Copy, Debug)]\nstruct ThompsonRef {\n    start: StateID,\n    end: StateID,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub(crate) struct Repetition {\n    /// The minimum range of the repetition.\n    ///\n    /// Note that special cases like `?`, `+` and `*` all get translated into\n    /// the ranges `{0,1}`, `{1,}` and `{0,}`, respectively.\n    ///\n    /// When `min` is zero, this expression can match the empty string\n    /// regardless of what its sub-expression is.\n    pub(crate) min: u32,\n    /// The maximum range of the repetition.\n    ///\n    /// Note that when `max` is `None`, `min` acts as a lower bound but where\n    /// there is no upper bound. For something like `x{5}` where the min and\n    /// max are equivalent, `min` will be set to `5` and `max` will be set to\n    /// `Some(5)`.\n    pub(crate) max: Option<u32>,\n    /// Whether this repetition operator is greedy or not. A greedy operator\n    /// will match as much as it can. A non-greedy operator will match as\n    /// little as it can.\n    ///\n    /// Typically, operators are greedy by default and are only non-greedy when\n    /// a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is\n    /// not. However, this can be inverted via the `U` \"ungreedy\" flag.\n    pub(crate) greedy: bool,\n    /// The expression being repeated.\n    pub(crate) sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Error {\n    msg: &'static str,\n}\n#[derive(Clone, Copy, Debug)]\npub(crate) struct Config {\n    pub(crate) size_limit: Option<usize>,\n}\nimpl Compiler {\n    fn new(config: Config, pattern: String) -> Compiler {}\n    fn compile(self, hir: &Hir) -> Result<NFA, Error> {}\n    fn c(&self, hir: &Hir) -> Result<ThompsonRef, Error> {}\n    fn c_fail(&self) -> Result<ThompsonRef, Error> {}\n    fn c_empty(&self) -> Result<ThompsonRef, Error> {}\n    fn c_char(&self, ch: char) -> Result<ThompsonRef, Error> {}\n    fn c_class(&self, class: &hir::Class) -> Result<ThompsonRef, Error> {}\n    fn c_look(&self, look: &hir::Look) -> Result<ThompsonRef, Error> {}\n    fn c_repetition(&self, rep: &hir::Repetition) -> Result<ThompsonRef, Error> {\n        match (rep.min, rep.max) {\n            (0, Some(1)) => self.c_zero_or_one(&rep.sub, rep.greedy),\n            (min, None) => self.c_at_least(&rep.sub, rep.greedy, min),\n            (min, Some(max)) if min == max => self.c_exactly(&rep.sub, min),\n            (min, Some(max)) => self.c_bounded(&rep.sub, rep.greedy, min, max),\n        }\n    }\n    fn c_bounded(\n        &self,\n        hir: &Hir,\n        greedy: bool,\n        min: u32,\n        max: u32,\n    ) -> Result<ThompsonRef, Error> {\n        let prefix = self.c_exactly(hir, min)?;\n        if min == max {\n            return Ok(prefix);\n        }\n        let empty = self.add_empty()?;\n        let mut prev_end = prefix.end;\n        for _ in min..max {\n            let splits = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            let compiled = self.c(hir)?;\n            self.patch(prev_end, splits)?;\n            self.patch(splits, compiled.start)?;\n            self.patch(splits, empty)?;\n            prev_end = compiled.end;\n        }\n        self.patch(prev_end, empty)?;\n        Ok(ThompsonRef {\n            start: prefix.start,\n            end: empty,\n        })\n    }\n    fn c_at_least(&self, hir: &Hir, greedy: bool, n: u32) -> Result<ThompsonRef, Error> {\n        if n == 0 {\n            if !hir.is_match_empty() {\n                let splits = self\n                    .add(State::Splits {\n                        targets: vec![],\n                        reverse: !greedy,\n                    })?;\n                let compiled = self.c(hir)?;\n                self.patch(splits, compiled.start)?;\n                self.patch(compiled.end, splits)?;\n                return Ok(ThompsonRef {\n                    start: splits,\n                    end: splits,\n                });\n            }\n            let compiled = self.c(hir)?;\n            let plus = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            self.patch(compiled.end, plus)?;\n            self.patch(plus, compiled.start)?;\n            let question = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            let empty = self.add_empty()?;\n            self.patch(question, compiled.start)?;\n            self.patch(question, empty)?;\n            self.patch(plus, empty)?;\n            Ok(ThompsonRef {\n                start: question,\n                end: empty,\n            })\n        } else if n == 1 {\n            let compiled = self.c(hir)?;\n            let splits = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            self.patch(compiled.end, splits)?;\n            self.patch(splits, compiled.start)?;\n            Ok(ThompsonRef {\n                start: compiled.start,\n                end: splits,\n            })\n        } else {\n            let prefix = self.c_exactly(hir, n - 1)?;\n            let last = self.c(hir)?;\n            let splits = self\n                .add(State::Splits {\n                    targets: vec![],\n                    reverse: !greedy,\n                })?;\n            self.patch(prefix.end, last.start)?;\n            self.patch(last.end, splits)?;\n            self.patch(splits, last.start)?;\n            Ok(ThompsonRef {\n                start: prefix.start,\n                end: splits,\n            })\n        }\n    }\n    fn c_zero_or_one(&self, hir: &Hir, greedy: bool) -> Result<ThompsonRef, Error> {\n        let splits = self\n            .add(State::Splits {\n                targets: vec![],\n                reverse: !greedy,\n            })?;\n        let compiled = self.c(hir)?;\n        let empty = self.add_empty()?;\n        self.patch(splits, compiled.start)?;\n        self.patch(splits, empty)?;\n        self.patch(compiled.end, empty)?;\n        Ok(ThompsonRef {\n            start: splits,\n            end: empty,\n        })\n    }\n    fn c_exactly(&self, hir: &Hir, n: u32) -> Result<ThompsonRef, Error> {\n        self.c_concat((0..n).map(|_| self.c(hir)))\n    }\n    fn c_capture(\n        &self,\n        index: u32,\n        name: Option<&str>,\n        hir: &Hir,\n    ) -> Result<ThompsonRef, Error> {}\n    fn c_concat<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn c_alternation<I>(&self, mut it: I) -> Result<ThompsonRef, Error>\n    where\n        I: Iterator<Item = Result<ThompsonRef, Error>>,\n    {}\n    fn add_empty(&self) -> Result<StateID, Error> {}\n    fn add(&self, state: State) -> Result<StateID, Error> {}\n    fn patch(&self, from: StateID, to: StateID) -> Result<(), Error> {}\n    fn check_size_limit(&self) -> Result<(), Error> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compile the given repetition expression. This handles all types of\n/// repetitions and greediness.\n362 fn c_repetition(\n363     &self,\n364     rep: &hir::Repetition,\n365 ) -> Result<ThompsonRef, Error> {\n366     match (rep.min, rep.max) {\n367         (0, Some(1)) => self.c_zero_or_one(&rep.sub, rep.greedy),\n368         (min, None) => self.c_at_least(&rep.sub, rep.greedy, min),\n369         (min, Some(max)) if min == max => self.c_exactly(&rep.sub, min),\n370         (min, Some(max)) => self.c_bounded(&rep.sub, rep.greedy, min, max),\n371     }\n372 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}