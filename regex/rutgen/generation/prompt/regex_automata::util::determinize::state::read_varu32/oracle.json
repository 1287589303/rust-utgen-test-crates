{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\nfn read_varu32(data: &[u8]) -> (u32, usize) {\n    let mut n: u32 = 0;\n    let mut shift: u32 = 0;\n    for (i, &b) in data.iter().enumerate() {\n        if b < 0b1000_0000 {\n            return (n | (u32::from(b) << shift), i + 1);\n        }\n        n |= (u32::from(b) & 0b0111_1111) << shift;\n        shift += 7;\n    }\n    (0, 0)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Read an unsigned 32-bit varint. Also, return the number of bytes read.\n///\n/// https://developers.google.com/protocol-buffers/docs/encoding#varints\n774 fn read_varu32(data: &[u8]) -> (u32, usize) {\n775     // N.B. We can assume correctness here since we know that all varuints are\n776     // written with write_varu32. Hence, the 'as' uses and unchecked arithmetic\n777     // is all okay.\n778     let mut n: u32 = 0;\n779     let mut shift: u32 = 0;\n780     for (i, &b) in data.iter().enumerate() {\n781         if b < 0b1000_0000 {\n782             return (n | (u32::from(b) << shift), i + 1);\n783         }\n784         n |= (u32::from(b) & 0b0111_1111) << shift;\n785         shift += 7;\n786     }\n787     (0, 0)\n788 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}