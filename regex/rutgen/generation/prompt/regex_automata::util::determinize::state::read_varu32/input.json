{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/determinize/state.rs\n// crate name is regex_automata\nuse core::mem;\nuse alloc::{sync::Arc, vec::Vec};\nuse crate::util::{\n    int::{I32, U32},\n    look::LookSet, primitives::{PatternID, StateID},\n    wire::{self, Endian},\n};\nfn read_varu32(data: &[u8]) -> (u32, usize) {\n    let mut n: u32 = 0;\n    let mut shift: u32 = 0;\n    for (i, &b) in data.iter().enumerate() {\n        if b < 0b1000_0000 {\n            return (n | (u32::from(b) << shift), i + 1);\n        }\n        n |= (u32::from(b) & 0b0111_1111) << shift;\n        shift += 7;\n    }\n    (0, 0)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Read an unsigned 32-bit varint. Also, return the number of bytes read.\n///\n/// https://developers.google.com/protocol-buffers/docs/encoding#varints\n774 fn read_varu32(data: &[u8]) -> (u32, usize) {\n775     // N.B. We can assume correctness here since we know that all varuints are\n776     // written with write_varu32. Hence, the 'as' uses and unchecked arithmetic\n777     // is all okay.\n778     let mut n: u32 = 0;\n779     let mut shift: u32 = 0;\n780     for (i, &b) in data.iter().enumerate() {\n781         if b < 0b1000_0000 {\n782             return (n | (u32::from(b) << shift), i + 1);\n783         }\n784         n |= (u32::from(b) & 0b0111_1111) << shift;\n785         shift += 7;\n786     }\n787     (0, 0)\n788 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}