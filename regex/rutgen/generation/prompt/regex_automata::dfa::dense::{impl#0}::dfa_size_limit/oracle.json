{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    accelerate: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    minimize: Option<bool>,\n    match_kind: Option<MatchKind>,\n    start_kind: Option<StartKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    determinize_size_limit: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum StartKind {\n    /// Support both anchored and unanchored searches.\n    Both,\n    /// Support only unanchored searches. Requesting an anchored search will\n    /// panic.\n    ///\n    /// Note that even if an unanchored search is requested, the pattern itself\n    /// may still be anchored. For example, `^abc` will only match `abc` at the\n    /// start of a haystack. This will remain true, even if the regex engine\n    /// only supported unanchored searches.\n    Unanchored,\n    /// Support only anchored searches. Requesting an unanchored search will\n    /// panic.\n    Anchored,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn accelerate(mut self, yes: bool) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn minimize(mut self, yes: bool) -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn start_kind(mut self, kind: StartKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {}\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {}\n    pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {\n        self.dfa_size_limit = Some(bytes);\n        self\n    }\n    pub fn determinize_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn get_accelerate(&self) -> bool {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_minimize(&self) -> bool {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts(&self) -> StartKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {}\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_dfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_determinize_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set a size limit on the total heap used by a DFA.\n///\n/// This size limit is expressed in bytes and is applied during\n/// determinization of an NFA into a DFA. If the DFA's heap usage, and only\n/// the DFA, exceeds this configured limit, then determinization is stopped\n/// and an error is returned.\n///\n/// This limit does not apply to auxiliary storage used during\n/// determinization that isn't part of the generated DFA.\n///\n/// This limit is only applied during determinization. Currently, there is\n/// no way to post-pone this check to after minimization if minimization\n/// was enabled.\n///\n/// The total limit on heap used during determinization is the sum of the\n/// DFA and determinization size limits.\n///\n/// The default is no limit.\n///\n/// # Example\n///\n/// This example shows a DFA that fails to build because of a configured\n/// size limit. This particular example also serves as a cautionary tale\n/// demonstrating just how big DFAs with large Unicode character classes\n/// can get.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{dfa::{dense, Automaton}, Input};\n///\n/// // 6MB isn't enough!\n/// dense::Builder::new()\n///     .configure(dense::Config::new().dfa_size_limit(Some(6_000_000)))\n///     .build(r\"\\w{20}\")\n///     .unwrap_err();\n///\n/// // ... but 7MB probably is!\n/// // (Note that DFA sizes aren't necessarily stable between releases.)\n/// let dfa = dense::Builder::new()\n///     .configure(dense::Config::new().dfa_size_limit(Some(7_000_000)))\n///     .build(r\"\\w{20}\")?;\n/// let haystack = \"A\".repeat(20).into_bytes();\n/// assert!(dfa.try_search_fwd(&Input::new(&haystack))?.is_some());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// While one needs a little more than 6MB to represent `\\w{20}`, it\n/// turns out that you only need a little more than 6KB to represent\n/// `(?-u:\\w{20})`. So only use Unicode if you need it!\n///\n/// As with [`Config::determinize_size_limit`], the size of a DFA is\n/// influenced by other factors, such as what start state configurations\n/// to support. For example, if you only need unanchored searches and not\n/// anchored searches, then configuring the DFA to only support unanchored\n/// searches can reduce its size. By default, DFAs support both unanchored\n/// and anchored searches.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::{dfa::{dense, Automaton, StartKind}, Input};\n///\n/// // 3MB isn't enough!\n/// dense::Builder::new()\n///     .configure(dense::Config::new()\n///         .dfa_size_limit(Some(3_000_000))\n///         .start_kind(StartKind::Unanchored)\n///     )\n///     .build(r\"\\w{20}\")\n///     .unwrap_err();\n///\n/// // ... but 4MB probably is!\n/// // (Note that DFA sizes aren't necessarily stable between releases.)\n/// let dfa = dense::Builder::new()\n///     .configure(dense::Config::new()\n///         .dfa_size_limit(Some(4_000_000))\n///         .start_kind(StartKind::Unanchored)\n///     )\n///     .build(r\"\\w{20}\")?;\n/// let haystack = \"A\".repeat(20).into_bytes();\n/// assert!(dfa.try_search_fwd(&Input::new(&haystack))?.is_some());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n850 pub fn dfa_size_limit(mut self, bytes: Option<usize>) -> Config {\n851     self.dfa_size_limit = Some(bytes);\n852     self\n853 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}