{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/string.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{error::Error, RegexBuilder};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\nimpl Regex {\n    #[inline]\n    pub fn shortest_match(&self, haystack: &str) -> Option<usize> {}\n    #[inline]\n    pub fn shortest_match_at(&self, haystack: &str, start: usize) -> Option<usize> {}\n    #[inline]\n    pub fn is_match_at(&self, haystack: &str, start: usize) -> bool {}\n    #[inline]\n    pub fn find_at<'h>(&self, haystack: &'h str, start: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_at<'h>(\n        &self,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Captures<'h>> {\n        let input = Input::new(haystack).span(start..haystack.len());\n        let mut caps = self.meta.create_captures();\n        self.meta.search_captures(&input, &mut caps);\n        if caps.is_match() {\n            let static_captures_len = self.static_captures_len();\n            Some(Captures {\n                haystack,\n                caps,\n                static_captures_len,\n            })\n        } else {\n            None\n        }\n    }\n    #[inline]\n    pub fn captures_read<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn captures_read_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn read_captures_at<'h>(\n        &self,\n        locs: &mut CaptureLocations,\n        haystack: &'h str,\n        start: usize,\n    ) -> Option<Match<'h>> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the same as [`Regex::captures`], but starts the search at the\n/// given offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = \"eschew\";\n/// // We get a match here, but it's probably not intended.\n/// assert_eq!(&re.captures(&hay[2..]).unwrap()[0], \"chew\");\n/// // No match because the  assertions take the context into account.\n/// assert!(re.captures_at(hay, 2).is_none());\n/// ```\n1144 pub fn captures_at<'h>(\n1145     &self,\n1146     haystack: &'h str,\n1147     start: usize,\n1148 ) -> Option<Captures<'h>> {\n1149     let input = Input::new(haystack).span(start..haystack.len());\n1150     let mut caps = self.meta.create_captures();\n1151     self.meta.search_captures(&input, &mut caps);\n1152     if caps.is_match() {\n1153         let static_captures_len = self.static_captures_len();\n1154         Some(Captures { haystack, caps, static_captures_len })\n1155     } else {\n1156         None\n1157     }\n1158 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}