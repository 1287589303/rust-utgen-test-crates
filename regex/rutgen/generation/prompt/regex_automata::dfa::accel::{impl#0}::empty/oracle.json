{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/accel.rs\n// crate name is regex_automata\ntype AccelTy = u32;\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, memchr, wire::{self, DeserializeError, Endian, SerializeError},\n};\nconst ACCEL_TY_SIZE: usize = core::mem::size_of::<AccelTy>();\nconst ACCEL_LEN: usize = 4;\nconst ACCEL_CAP: usize = 8;\n#[derive(Clone)]\npub(crate) struct Accels<A> {\n    /// A length prefixed slice of contiguous accelerators. See the top comment\n    /// in this module for more details on how we can jump from a DFA's state\n    /// ID to an accelerator in this list.\n    ///\n    /// The first 4 bytes always correspond to the number of accelerators\n    /// that follow.\n    accels: A,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl Accels<Vec<AccelTy>> {\n    pub fn empty() -> Accels<Vec<AccelTy>> {\n        Accels { accels: vec![0] }\n    }\n    pub fn add(&mut self, accel: Accel) {}\n    fn set_len(&mut self, new_len: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create an empty sequence of accelerators for a DFA.\n147 pub fn empty() -> Accels<Vec<AccelTy>> {\n148     Accels { accels: vec![0] }\n149 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}