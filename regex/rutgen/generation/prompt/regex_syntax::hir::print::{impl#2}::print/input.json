{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/print.rs\n// crate name is regex_syntax\nuse core::fmt;\nuse crate::{\n    hir::{\n        self, visitor::{self, Visitor},\n        Hir, HirKind,\n    },\n    is_meta_character,\n};\n#[derive(Debug)]\npub struct Printer {\n    _priv: (),\n}\n#[derive(Debug)]\nstruct Writer<W> {\n    wtr: W,\n}\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\nimpl Printer {\n    pub fn new() -> Printer {}\n    pub fn print<W: fmt::Write>(&mut self, hir: &Hir, wtr: W) -> fmt::Result {\n        visitor::visit(hir, Writer { wtr })\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Print the given `Ast` to the given writer. The writer must implement\n/// `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n/// here are a `fmt::Formatter` (which is available in `fmt::Display`\n/// implementations) or a `&mut String`.\n72 pub fn print<W: fmt::Write>(&mut self, hir: &Hir, wtr: W) -> fmt::Result {\n73     visitor::visit(hir, Writer { wtr })\n74 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}