{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[cfg(feature = \"alloc\")]\n#[derive(Clone, Debug)]\npub struct PatternSetIter<'a> {\n    it: core::iter::Enumerate<core::slice::Iter<'a, bool>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[cfg(feature = \"alloc\")]\nimpl<'a> Iterator for PatternSetIter<'a> {\n    type Item = PatternID;\n    fn next(&mut self) -> Option<PatternID> {\n        while let Some((index, &yes)) = self.it.next() {\n            if yes {\n                return Some(PatternID::new_unchecked(index));\n            }\n        }\n        None\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1372 fn next(&mut self) -> Option<PatternID> {\n1373     while let Some((index, &yes)) = self.it.next() {\n1374         if yes {\n1375             // Only valid 'PatternID' values can be inserted into the set\n1376             // and construction of the set panics if the capacity would\n1377             // permit storing invalid pattern IDs. Thus, 'yes' is only true\n1378             // precisely when 'index' corresponds to a valid 'PatternID'.\n1379             return Some(PatternID::new_unchecked(index));\n1380         }\n1381     }\n1382     None\n1383 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}