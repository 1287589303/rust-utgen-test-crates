{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[cfg(feature = \"alloc\")]\n#[derive(Clone, Debug)]\npub struct PatternSetIter<'a> {\n    it: core::iter::Enumerate<core::slice::Iter<'a, bool>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[cfg(feature = \"alloc\")]\nimpl<'a> Iterator for PatternSetIter<'a> {\n    type Item = PatternID;\n    fn next(&mut self) -> Option<PatternID> {\n        while let Some((index, &yes)) = self.it.next() {\n            if yes {\n                return Some(PatternID::new_unchecked(index));\n            }\n        }\n        None\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1372 fn next(&mut self) -> Option<PatternID> {\n1373     while let Some((index, &yes)) = self.it.next() {\n1374         if yes {\n1375             // Only valid 'PatternID' values can be inserted into the set\n1376             // and construction of the set panics if the capacity would\n1377             // permit storing invalid pattern IDs. Thus, 'yes' is only true\n1378             // precisely when 'index' corresponds to a valid 'PatternID'.\n1379             return Some(PatternID::new_unchecked(index));\n1380         }\n1381     }\n1382     None\n1383 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}