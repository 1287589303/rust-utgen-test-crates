{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/minimize.rs\n// crate name is regex_automata\nuse core::{cell::RefCell, fmt, mem};\nuse alloc::{collections::BTreeMap, rc::Rc, vec, vec::Vec};\nuse crate::{\n    dfa::{automaton::Automaton, dense, DEAD},\n    util::{alphabet, primitives::{PatternID, StateID}},\n};\n#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\nstruct StateSet {\n    ids: Rc<RefCell<Vec<StateID>>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\nimpl StateSet {\n    fn empty() -> StateSet {}\n    fn add(&mut self, id: StateID) {\n        self.ids.borrow_mut().push(id);\n    }\n    fn min(&self) -> StateID {}\n    fn canonicalize(&mut self) {}\n    fn clear(&mut self) {\n        self.ids.borrow_mut().clear();\n    }\n    fn len(&self) -> usize {}\n    fn is_empty(&self) -> bool {\n        self.len() == 0\n    }\n    fn deep_clone(&self) -> StateSet {}\n    fn iter<F: FnMut(StateID)>(&self, mut f: F) {}\n    fn intersection(&self, other: &StateSet, dest: &mut StateSet) {\n        dest.clear();\n        if self.is_empty() || other.is_empty() {\n            return;\n        }\n        let (seta, setb) = (self.ids.borrow(), other.ids.borrow());\n        let (mut ita, mut itb) = (seta.iter().cloned(), setb.iter().cloned());\n        let (mut a, mut b) = (ita.next().unwrap(), itb.next().unwrap());\n        loop {\n            if a == b {\n                dest.add(a);\n                a = match ita.next() {\n                    None => break,\n                    Some(a) => a,\n                };\n                b = match itb.next() {\n                    None => break,\n                    Some(b) => b,\n                };\n            } else if a < b {\n                a = match ita.next() {\n                    None => break,\n                    Some(a) => a,\n                };\n            } else {\n                b = match itb.next() {\n                    None => break,\n                    Some(b) => b,\n                };\n            }\n        }\n    }\n    fn subtract(&self, other: &StateSet, dest: &mut StateSet) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n386 fn intersection(&self, other: &StateSet, dest: &mut StateSet) {\n387     dest.clear();\n388     if self.is_empty() || other.is_empty() {\n389         return;\n390     }\n391 \n392     let (seta, setb) = (self.ids.borrow(), other.ids.borrow());\n393     let (mut ita, mut itb) = (seta.iter().cloned(), setb.iter().cloned());\n394     let (mut a, mut b) = (ita.next().unwrap(), itb.next().unwrap());\n395     loop {\n396         if a == b {\n397             dest.add(a);\n398             a = match ita.next() {\n399                 None => break,\n400                 Some(a) => a,\n401             };\n402             b = match itb.next() {\n403                 None => break,\n404                 Some(b) => b,\n405             };\n406         } else if a < b {\n407             a = match ita.next() {\n408                 None => break,\n409                 Some(a) => a,\n410             };\n411         } else {\n412             b = match itb.next() {\n413                 None => break,\n414                 Some(b) => b,\n415             };\n416         }\n417     }\n418 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}