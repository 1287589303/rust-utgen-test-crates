{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct Match {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The underlying match span.\n    span: Span,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl Match {\n    #[inline]\n    pub fn new<S: Into<Span>>(pattern: PatternID, span: S) -> Match {\n        let span: Span = span.into();\n        assert!(span.start <= span.end, \"invalid match span\");\n        Match { pattern, span }\n    }\n    #[inline]\n    pub fn must<S: Into<Span>>(pattern: usize, span: S) -> Match {\n        Match::new(PatternID::must(pattern), span)\n    }\n    #[inline]\n    pub fn pattern(&self) -> PatternID {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn range(&self) -> core::ops::Range<usize> {}\n    #[inline]\n    pub fn span(&self) -> Span {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new match from a pattern ID and a byte offset span.\n///\n/// This constructor is generic over how a span is provided. While\n/// a [`Span`] may be given directly, one may also provide a\n/// `std::ops::Range<usize>`.\n///\n/// This is like [`Match::new`], but accepts a `usize` instead of a\n/// [`PatternID`]. This panics if the given `usize` is not representable\n/// as a `PatternID`.\n///\n/// # Panics\n///\n/// This panics if `end < start` or if `pattern > PatternID::MAX`.\n///\n/// # Example\n///\n/// This shows how to create a match for the third pattern in a regex\n/// object using convenient range syntax.\n///\n/// ```\n/// use regex_automata::Match;\n///\n/// let m = Match::must(3, 5..10);\n/// assert_eq!(3, m.pattern().as_usize());\n/// assert_eq!(5, m.start());\n/// assert_eq!(10, m.end());\n/// ```\n1051 pub fn must<S: Into<Span>>(pattern: usize, span: S) -> Match {\n1052     Match::new(PatternID::must(pattern), span)\n1053 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}