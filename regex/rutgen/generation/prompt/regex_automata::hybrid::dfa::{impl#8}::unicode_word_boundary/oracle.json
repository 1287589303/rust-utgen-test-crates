{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/hybrid/dfa.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype StateMap = std::collections::HashMap<State, LazyStateID>;\n#[cfg(not(feature = \"std\"))]\ntype StateMap = alloc::collections::BTreeMap<State, LazyStateID>;\nuse core::{iter, mem::size_of};\nuse alloc::vec::Vec;\nuse crate::{\n    hybrid::{\n        error::{BuildError, CacheError, StartError},\n        id::{LazyStateID, LazyStateIDError},\n        search,\n    },\n    nfa::thompson,\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        determinize::{self, State, StateBuilderEmpty, StateBuilderNFA},\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID as NFAStateID},\n        search::{Anchored, HalfMatch, Input, MatchError, MatchKind, PatternSet},\n        sparse_set::SparseSets, start::{self, Start, StartByteMap},\n    },\n};\nconst MIN_STATES: usize = SENTINEL_STATES + 2;\nconst SENTINEL_STATES: usize = 3;\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {\n        self.unicode_word_boundary = Some(yes);\n        self\n    }\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {}\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {}\n    pub fn cache_capacity(mut self, bytes: usize) -> Config {}\n    pub fn skip_cache_capacity_check(mut self, yes: bool) -> Config {}\n    pub fn minimum_cache_clear_count(mut self, min: Option<usize>) -> Config {}\n    pub fn minimum_bytes_per_state(mut self, min: Option<usize>) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {}\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_cache_capacity(&self) -> usize {}\n    pub fn get_skip_cache_capacity_check(&self) -> bool {}\n    pub fn get_minimum_cache_clear_count(&self) -> Option<usize> {}\n    pub fn get_minimum_bytes_per_state(&self) -> Option<usize> {}\n    pub fn get_minimum_cache_capacity(\n        &self,\n        nfa: &thompson::NFA,\n    ) -> Result<usize, BuildError> {}\n    fn byte_classes_from_nfa(&self, nfa: &thompson::NFA, quit: &ByteSet) -> ByteClasses {}\n    fn quit_set_from_nfa(&self, nfa: &thompson::NFA) -> Result<ByteSet, BuildError> {}\n    fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Heuristically enable Unicode word boundaries.\n///\n/// When set, this will attempt to implement Unicode word boundaries as if\n/// they were ASCII word boundaries. This only works when the search input\n/// is ASCII only. If a non-ASCII byte is observed while searching, then a\n/// [`MatchError::quit`] error is returned.\n///\n/// A possible alternative to enabling this option is to simply use an\n/// ASCII word boundary, e.g., via `(?-u:\\b)`. The main reason to use this\n/// option is if you absolutely need Unicode support. This option lets one\n/// use a fast search implementation (a DFA) for some potentially very\n/// common cases, while providing the option to fall back to some other\n/// regex engine to handle the general case when an error is returned.\n///\n/// If the pattern provided has no Unicode word boundary in it, then this\n/// option has no effect. (That is, quitting on a non-ASCII byte only\n/// occurs when this option is enabled _and_ a Unicode word boundary is\n/// present in the pattern.)\n///\n/// This is almost equivalent to setting all non-ASCII bytes to be quit\n/// bytes. The only difference is that this will cause non-ASCII bytes to\n/// be quit bytes _only_ when a Unicode word boundary is present in the\n/// pattern.\n///\n/// When enabling this option, callers _must_ be prepared to\n/// handle a [`MatchError`] error during search. When using a\n/// [`Regex`](crate::hybrid::regex::Regex), this corresponds to using the\n/// `try_` suite of methods. Alternatively, if callers can guarantee that\n/// their input is ASCII only, then a [`MatchError::quit`] error will never\n/// be returned while searching.\n///\n/// This is disabled by default.\n///\n/// # Example\n///\n/// This example shows how to heuristically enable Unicode word boundaries\n/// in a pattern. It also shows what happens when a search comes across a\n/// non-ASCII byte.\n///\n/// ```\n/// use regex_automata::{\n///     hybrid::dfa::DFA,\n///     HalfMatch, Input, MatchError,\n/// };\n///\n/// let dfa = DFA::builder()\n///     .configure(DFA::config().unicode_word_boundary(true))\n///     .build(r\"\\b[0-9]+\\b\")?;\n/// let mut cache = dfa.create_cache();\n///\n/// // The match occurs before the search ever observes the snowman\n/// // character, so no error occurs.\n/// let haystack = \"foo 123  ☃\";\n/// let expected = Some(HalfMatch::must(0, 7));\n/// let got = dfa.try_search_fwd(&mut cache, &Input::new(haystack))?;\n/// assert_eq!(expected, got);\n///\n/// // Notice that this search fails, even though the snowman character\n/// // occurs after the ending match offset. This is because search\n/// // routines read one byte past the end of the search to account for\n/// // look-around, and indeed, this is required here to determine whether\n/// // the trailing \\b matches.\n/// let haystack = \"foo 123 ☃\";\n/// let expected = MatchError::quit(0xE2, 8);\n/// let got = dfa.try_search_fwd(&mut cache, &Input::new(haystack));\n/// assert_eq!(Err(expected), got);\n///\n/// // Another example is executing a search where the span of the haystack\n/// // we specify is all ASCII, but there is non-ASCII just before it. This\n/// // correctly also reports an error.\n/// let input = Input::new(\"β123\").range(2..);\n/// let expected = MatchError::quit(0xB2, 1);\n/// let got = dfa.try_search_fwd(&mut cache, &input);\n/// assert_eq!(Err(expected), got);\n///\n/// // And similarly for the trailing word boundary.\n/// let input = Input::new(\"123β\").range(..3);\n/// let expected = MatchError::quit(0xCE, 3);\n/// let got = dfa.try_search_fwd(&mut cache, &input);\n/// assert_eq!(Err(expected), got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n3277 pub fn unicode_word_boundary(mut self, yes: bool) -> Config {\n3278     // We have a separate option for this instead of just setting the\n3279     // appropriate quit bytes here because we don't want to set quit bytes\n3280     // for every regex. We only want to set them when the regex contains a\n3281     // Unicode word boundary.\n3282     self.unicode_word_boundary = Some(yes);\n3283     self\n3284 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}