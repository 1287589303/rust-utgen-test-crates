{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/pikevm.rs\n// crate name is regex_automata\n#[cfg(feature = \"internal-instrument-pikevm\")]\nuse core::cell::RefCell;\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    nfa::thompson::{self, BuildError, State, NFA},\n    util::{\n        captures::Captures, empty, iter, prefilter::Prefilter,\n        primitives::{NonMaxUsize, PatternID, SmallIndex, StateID},\n        search::{Anchored, HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug)]\npub struct Cache {\n    /// Stack used while computing epsilon closure. This effectively lets us\n    /// move what is more naturally expressed through recursion to a stack\n    /// on the heap.\n    stack: Vec<FollowEpsilon>,\n    /// The current active states being explored for the current byte in the\n    /// haystack.\n    curr: ActiveStates,\n    /// The next set of states we're building that will be explored for the\n    /// next byte in the haystack.\n    next: ActiveStates,\n}\n#[derive(Clone, Debug)]\nstruct ActiveStates {\n    /// The set of active NFA states. This set preserves insertion order, which\n    /// is critical for simulating the match semantics of backtracking regex\n    /// engines.\n    set: SparseSet,\n    /// The slots for every NFA state, where each slot stores a (possibly\n    /// absent) offset. Every capturing group has two slots. One for a start\n    /// offset and one for an end offset.\n    slot_table: SlotTable,\n}\n#[derive(Clone, Debug)]\npub struct PikeVM {\n    config: Config,\n    nfa: NFA,\n}\n#[derive(Clone, Debug)]\nenum FollowEpsilon {\n    /// Explore the epsilon transitions from a state ID.\n    Explore(StateID),\n    /// Reset the given `slot` to the given `offset` (which might be `None`).\n    RestoreCapture { slot: SmallIndex, offset: Option<NonMaxUsize> },\n}\nimpl Cache {\n    pub fn new(re: &PikeVM) -> Cache {\n        Cache {\n            stack: vec![],\n            curr: ActiveStates::new(re),\n            next: ActiveStates::new(re),\n        }\n    }\n    pub fn reset(&mut self, re: &PikeVM) {}\n    pub fn memory_usage(&self) -> usize {}\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n}\nimpl ActiveStates {\n    fn new(re: &PikeVM) -> ActiveStates {\n        let mut active = ActiveStates {\n            set: SparseSet::new(0),\n            slot_table: SlotTable::new(),\n        };\n        active.reset(re);\n        active\n    }\n    fn reset(&mut self, re: &PikeVM) {}\n    fn memory_usage(&self) -> usize {}\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new [`PikeVM`] cache.\n///\n/// A potentially more convenient routine to create a cache is\n/// [`PikeVM::create_cache`], as it does not require also importing the\n/// `Cache` type.\n///\n/// If you want to reuse the returned `Cache` with some other `PikeVM`,\n/// then you must call [`Cache::reset`] with the desired `PikeVM`.\n1900 pub fn new(re: &PikeVM) -> Cache {\n1901     Cache {\n1902         stack: vec![],\n1903         curr: ActiveStates::new(re),\n1904         next: ActiveStates::new(re),\n1905     }\n1906 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}