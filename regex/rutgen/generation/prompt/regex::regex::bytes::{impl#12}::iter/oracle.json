{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\npub struct Captures<'h> {\n    haystack: &'h [u8],\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    caps: captures::Captures,\n    static_captures_len: Option<usize>,\n}\n#[derive(Clone, Debug)]\npub struct SubCaptureMatches<'c, 'h> {\n    haystack: &'h [u8],\n    it: captures::CapturesPatternIter<'c>,\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h [u8], [&'h [u8]; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &[u8], dst: &mut Vec<u8>) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {\n        SubCaptureMatches {\n            haystack: self.haystack,\n            it: self.caps.iter(),\n        }\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over all capture groups. This includes both\n/// matching and non-matching groups.\n///\n/// The iterator always yields at least one matching group: the first group\n/// (at index `0`) with no name. Subsequent groups are returned in the order\n/// of their opening parenthesis in the regex.\n///\n/// The elements yielded have type `Option<Match<'h>>`, where a non-`None`\n/// value is present if the capture group matches.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(\\w)(\\d)?(\\w)\").unwrap();\n/// let caps = re.captures(b\"AZ\").unwrap();\n///\n/// let mut it = caps.iter();\n/// assert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b\"AZ\"[..]));\n/// assert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b\"A\"[..]));\n/// assert_eq!(it.next().unwrap().map(|m| m.as_bytes()), None);\n/// assert_eq!(it.next().unwrap().map(|m| m.as_bytes()), Some(&b\"Z\"[..]));\n/// assert_eq!(it.next(), None);\n/// ```\n1883 pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {\n1884     SubCaptureMatches { haystack: self.haystack, it: self.caps.iter() }\n1885 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}