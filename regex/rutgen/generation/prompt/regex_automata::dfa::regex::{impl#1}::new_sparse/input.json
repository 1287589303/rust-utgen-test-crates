{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/regex.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse alloc::vec::Vec;\n#[cfg(feature = \"dfa-build\")]\nuse crate::dfa::dense::BuildError;\nuse crate::{\n    dfa::{automaton::Automaton, dense},\n    util::{iter, search::Input},\n    Anchored, Match, MatchError,\n};\n#[cfg(feature = \"alloc\")]\nuse crate::{\n    dfa::{sparse, StartKind},\n    util::search::MatchKind,\n};\npub unsafe trait Automaton {\n    fn next_state(&self, current: StateID, input: u8) -> StateID;\n    unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID;\n    fn next_eoi_state(&self, current: StateID) -> StateID;\n    fn start_state(&self, config: &start::Config) -> Result<StateID, StartError>;\n    fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    #[inline]\n    fn universal_start_state(&self, _mode: Anchored) -> Option<StateID>;\n    fn is_special_state(&self, id: StateID) -> bool;\n    fn is_dead_state(&self, id: StateID) -> bool;\n    fn is_quit_state(&self, id: StateID) -> bool;\n    fn is_match_state(&self, id: StateID) -> bool;\n    fn is_start_state(&self, id: StateID) -> bool;\n    fn is_accel_state(&self, id: StateID) -> bool;\n    fn pattern_len(&self) -> usize;\n    fn match_len(&self, id: StateID) -> usize;\n    fn match_pattern(&self, id: StateID, index: usize) -> PatternID;\n    fn has_empty(&self) -> bool;\n    fn is_utf8(&self) -> bool;\n    fn is_always_start_anchored(&self) -> bool;\n    #[inline]\n    fn accelerator(&self, _id: StateID) -> &[u8];\n    #[inline]\n    fn get_prefilter(&self) -> Option<&Prefilter>;\n    #[inline]\n    fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_overlapping_fwd(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[inline]\n    fn try_search_overlapping_rev(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    fn try_which_overlapping_matches(\n        &self,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) -> Result<(), MatchError>;\n}\npub(crate) trait U16 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn high_u8(self) -> u8;\n}\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn high_u16(self) -> u16;\n}\npub(crate) trait Usize {\n    fn as_u8(self) -> u8;\n    fn as_u16(self) -> u16;\n    fn as_u32(self) -> u32;\n    fn as_u64(self) -> u64;\n}\npub(crate) trait U8 {\n    fn as_usize(self) -> usize;\n}\npub(crate) trait U64 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn low_u32(self) -> u32;\n    fn high_u32(self) -> u32;\n}\npub(crate) trait I32 {\n    fn as_usize(self) -> usize;\n    fn to_bits(self) -> u32;\n    fn from_bits(n: u32) -> i32;\n}\npub(crate) trait Pointer {\n    fn as_usize(self) -> usize;\n}\n#[derive(Clone, Debug)]\npub struct Builder {\n    #[cfg(feature = \"dfa-build\")]\n    dfa: dense::Builder,\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\nimpl Regex<sparse::DFA<Vec<u8>>> {\n    pub fn new_sparse(pattern: &str) -> Result<Regex<sparse::DFA<Vec<u8>>>, BuildError> {\n        Builder::new().build_sparse(pattern)\n    }\n    pub fn new_many_sparse<P: AsRef<str>>(\n        patterns: &[P],\n    ) -> Result<Regex<sparse::DFA<Vec<u8>>>, BuildError> {}\n}\nimpl Builder {\n    pub fn new() -> Builder {\n        Builder {\n            #[cfg(feature = \"dfa-build\")]\n            dfa: dense::Builder::new(),\n        }\n    }\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn build(&self, pattern: &str) -> Result<Regex, BuildError> {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn build_sparse(\n        &self,\n        pattern: &str,\n    ) -> Result<Regex<sparse::DFA<Vec<u8>>>, BuildError> {\n        self.build_many_sparse(&[pattern])\n    }\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn build_many<P: AsRef<str>>(\n        &self,\n        patterns: &[P],\n    ) -> Result<Regex, BuildError> {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn build_many_sparse<P: AsRef<str>>(\n        &self,\n        patterns: &[P],\n    ) -> Result<Regex<sparse::DFA<Vec<u8>>>, BuildError> {}\n    pub fn build_from_dfas<A: Automaton>(&self, forward: A, reverse: A) -> Regex<A> {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn syntax(&mut self, config: crate::util::syntax::Config) -> &mut Builder {}\n    #[cfg(all(feature = \"syntax\", feature = \"dfa-build\"))]\n    pub fn thompson(&mut self, config: crate::nfa::thompson::Config) -> &mut Builder {}\n    #[cfg(feature = \"dfa-build\")]\n    pub fn dense(&mut self, config: dense::Config) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parse the given regular expression using the default configuration,\n/// except using sparse DFAs, and return the corresponding regex.\n///\n/// If you want a non-default configuration, then use the [`Builder`] to\n/// set your own configuration.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{Match, dfa::regex::Regex};\n///\n/// let re = Regex::new_sparse(\"foo[0-9]+bar\")?;\n/// assert_eq!(\n///     Some(Match::must(0, 3..14)),\n///     re.find(b\"zzzfoo12345barzzz\"),\n/// );\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n253 pub fn new_sparse(\n254     pattern: &str,\n255 ) -> Result<Regex<sparse::DFA<Vec<u8>>>, BuildError> {\n256     Builder::new().build_sparse(pattern)\n257 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}