{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    crlf: Option<bool>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct FlagsItem {\n    /// The span of this item.\n    pub span: Span,\n    /// The kind of this item.\n    pub kind: FlagsItemKind,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\n#[cfg_attr(feature = \"arbitrary\", derive(arbitrary::Arbitrary))]\npub struct Flags {\n    /// The span of this group of flags.\n    pub span: Span,\n    /// A sequence of flag items. Each item is either a flag or a negation\n    /// operator.\n    pub items: Vec<FlagsItem>,\n}\nimpl Flags {\n    fn from_ast(ast: &ast::Flags) -> Flags {\n        let mut flags = Flags::default();\n        let mut enable = true;\n        for item in &ast.items {\n            match item.kind {\n                ast::FlagsItemKind::Negation => {\n                    enable = false;\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive) => {\n                    flags.case_insensitive = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::MultiLine) => {\n                    flags.multi_line = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine) => {\n                    flags.dot_matches_new_line = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::SwapGreed) => {\n                    flags.swap_greed = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::Unicode) => {\n                    flags.unicode = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::CRLF) => {\n                    flags.crlf = Some(enable);\n                }\n                ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace) => {}\n            }\n        }\n        flags\n    }\n    fn merge(&mut self, previous: &Flags) {}\n    fn case_insensitive(&self) -> bool {}\n    fn multi_line(&self) -> bool {}\n    fn dot_matches_new_line(&self) -> bool {}\n    fn swap_greed(&self) -> bool {}\n    fn unicode(&self) -> bool {}\n    fn crlf(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1238 fn from_ast(ast: &ast::Flags) -> Flags {\n1239     let mut flags = Flags::default();\n1240     let mut enable = true;\n1241     for item in &ast.items {\n1242         match item.kind {\n1243             ast::FlagsItemKind::Negation => {\n1244                 enable = false;\n1245             }\n1246             ast::FlagsItemKind::Flag(ast::Flag::CaseInsensitive) => {\n1247                 flags.case_insensitive = Some(enable);\n1248             }\n1249             ast::FlagsItemKind::Flag(ast::Flag::MultiLine) => {\n1250                 flags.multi_line = Some(enable);\n1251             }\n1252             ast::FlagsItemKind::Flag(ast::Flag::DotMatchesNewLine) => {\n1253                 flags.dot_matches_new_line = Some(enable);\n1254             }\n1255             ast::FlagsItemKind::Flag(ast::Flag::SwapGreed) => {\n1256                 flags.swap_greed = Some(enable);\n1257             }\n1258             ast::FlagsItemKind::Flag(ast::Flag::Unicode) => {\n1259                 flags.unicode = Some(enable);\n1260             }\n1261             ast::FlagsItemKind::Flag(ast::Flag::CRLF) => {\n1262                 flags.crlf = Some(enable);\n1263             }\n1264             ast::FlagsItemKind::Flag(ast::Flag::IgnoreWhitespace) => {}\n1265         }\n1266     }\n1267     flags\n1268 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}