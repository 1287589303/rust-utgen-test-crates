{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/wire.rs\n// crate name is regex_automata\n#[cfg(target_endian = \"little\")]\npub(crate) type NE = LE;\n#[cfg(target_endian = \"big\")]\npub(crate) type NE = BE;\nuse core::{cmp, mem::size_of};\n#[cfg(feature = \"alloc\")]\nuse alloc::{vec, vec::Vec};\nuse crate::util::{\n    int::Pointer, primitives::{PatternID, PatternIDError, StateID, StateIDError},\n};\n#[derive(Debug)]\npub struct DeserializeError(DeserializeErrorKind);\n#[derive(Debug)]\nenum DeserializeErrorKind {\n    Generic { msg: &'static str },\n    BufferTooSmall { what: &'static str },\n    InvalidUsize { what: &'static str },\n    VersionMismatch { expected: u32, found: u32 },\n    EndianMismatch { expected: u32, found: u32 },\n    AlignmentMismatch { alignment: usize, address: usize },\n    LabelMismatch { expected: &'static str },\n    ArithmeticOverflow { what: &'static str },\n    PatternID { err: PatternIDError, what: &'static str },\n    StateID { err: StateIDError, what: &'static str },\n}\nimpl core::fmt::Display for DeserializeError {\n    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n        use self::DeserializeErrorKind::*;\n        match self.0 {\n            Generic { msg } => write!(f, \"{}\", msg),\n            BufferTooSmall { what } => write!(f, \"buffer is too small to read {}\", what),\n            InvalidUsize { what } => write!(f, \"{} is too big to fit in a usize\", what),\n            VersionMismatch { expected, found } => {\n                write!(\n                    f,\n                    \"unsupported version: \\\n                 expected version {} but found version {}\",\n                    expected, found,\n                )\n            }\n            EndianMismatch { expected, found } => {\n                write!(\n                    f,\n                    \"endianness mismatch: expected 0x{:X} but got 0x{:X}. \\\n                 (Are you trying to load an object serialized with a \\\n                 different endianness?)\",\n                    expected, found,\n                )\n            }\n            AlignmentMismatch { alignment, address } => {\n                write!(\n                    f,\n                    \"alignment mismatch: slice starts at address \\\n                 0x{:X}, which is not aligned to a {} byte boundary\",\n                    address, alignment,\n                )\n            }\n            LabelMismatch { expected } => {\n                write!(\n                    f,\n                    \"label mismatch: start of serialized object should \\\n                 contain a NUL terminated {:?} label, but a different \\\n                 label was found\",\n                    expected,\n                )\n            }\n            ArithmeticOverflow { what } => write!(f, \"arithmetic overflow for {}\", what),\n            PatternID { ref err, what } => {\n                write!(f, \"failed to read pattern ID for {}: {}\", what, err)\n            }\n            StateID { ref err, what } => {\n                write!(f, \"failed to read state ID for {}: {}\", what, err)\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n218 fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n219     use self::DeserializeErrorKind::*;\n220 \n221     match self.0 {\n222         Generic { msg } => write!(f, \"{}\", msg),\n223         BufferTooSmall { what } => {\n224             write!(f, \"buffer is too small to read {}\", what)\n225         }\n226         InvalidUsize { what } => {\n227             write!(f, \"{} is too big to fit in a usize\", what)\n228         }\n229         VersionMismatch { expected, found } => write!(\n230             f,\n231             \"unsupported version: \\\n232              expected version {} but found version {}\",\n233             expected, found,\n234         ),\n235         EndianMismatch { expected, found } => write!(\n236             f,\n237             \"endianness mismatch: expected 0x{:X} but got 0x{:X}. \\\n238              (Are you trying to load an object serialized with a \\\n239              different endianness?)\",\n240             expected, found,\n241         ),\n242         AlignmentMismatch { alignment, address } => write!(\n243             f,\n244             \"alignment mismatch: slice starts at address \\\n245              0x{:X}, which is not aligned to a {} byte boundary\",\n246             address, alignment,\n247         ),\n248         LabelMismatch { expected } => write!(\n249             f,\n250             \"label mismatch: start of serialized object should \\\n251              contain a NUL terminated {:?} label, but a different \\\n252              label was found\",\n253             expected,\n254         ),\n255         ArithmeticOverflow { what } => {\n256             write!(f, \"arithmetic overflow for {}\", what)\n257         }\n258         PatternID { ref err, what } => {\n259             write!(f, \"failed to read pattern ID for {}: {}\", what, err)\n260         }\n261         StateID { ref err, what } => {\n262             write!(f, \"failed to read state ID for {}: {}\", what, err)\n263         }\n264     }\n265 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}