{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    size_limit: Option<Option<usize>>,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {\n        self.byte_classes = Some(yes);\n        self\n    }\n    pub fn size_limit(mut self, limit: Option<usize>) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_size_limit(&self) -> Option<usize> {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether to attempt to shrink the size of the DFA's alphabet or not.\n///\n/// This option is enabled by default and should never be disabled unless\n/// one is debugging a one-pass DFA.\n///\n/// When enabled, the DFA will use a map from all possible bytes to their\n/// corresponding equivalence class. Each equivalence class represents a\n/// set of bytes that does not discriminate between a match and a non-match\n/// in the DFA. For example, the pattern `[ab]+` has at least two\n/// equivalence classes: a set containing `a` and `b` and a set containing\n/// every byte except for `a` and `b`. `a` and `b` are in the same\n/// equivalence class because they never discriminate between a match and a\n/// non-match.\n///\n/// The advantage of this map is that the size of the transition table\n/// can be reduced drastically from (approximately) `#states * 256 *\n/// sizeof(StateID)` to `#states * k * sizeof(StateID)` where `k` is the\n/// number of equivalence classes (rounded up to the nearest power of 2).\n/// As a result, total space usage can decrease substantially. Moreover,\n/// since a smaller alphabet is used, DFA compilation becomes faster as\n/// well.\n///\n/// **WARNING:** This is only useful for debugging DFAs. Disabling this\n/// does not yield any speed advantages. Namely, even when this is\n/// disabled, a byte class map is still used while searching. The only\n/// difference is that every byte will be forced into its own distinct\n/// equivalence class. This is useful for debugging the actual generated\n/// transitions because it lets one see the transitions defined on actual\n/// bytes instead of the equivalence classes.\n188 pub fn byte_classes(mut self, yes: bool) -> Config {\n189     self.byte_classes = Some(yes);\n190     self\n191 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}