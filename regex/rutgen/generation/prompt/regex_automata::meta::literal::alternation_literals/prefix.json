{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/literal.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse regex_syntax::hir::Hir;\nuse crate::{meta::regex::RegexInfo, util::search::MatchKind};\n#[derive(Clone, Debug)]\npub(crate) struct RegexInfo(Arc<RegexInfoI>);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    utf8_empty: Option<bool>,\n    autopre: Option<bool>,\n    pre: Option<Option<Prefilter>>,\n    which_captures: Option<WhichCaptures>,\n    nfa_size_limit: Option<Option<usize>>,\n    onepass_size_limit: Option<Option<usize>>,\n    hybrid_cache_capacity: Option<usize>,\n    hybrid: Option<bool>,\n    dfa: Option<bool>,\n    dfa_size_limit: Option<Option<usize>>,\n    dfa_state_limit: Option<Option<usize>>,\n    onepass: Option<bool>,\n    backtrack: Option<bool>,\n    byte_classes: Option<bool>,\n    line_terminator: Option<u8>,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl RegexInfo {\n    fn new(config: Config, hirs: &[&Hir]) -> RegexInfo {}\n    pub(crate) fn config(&self) -> &Config {\n        &self.0.config\n    }\n    pub(crate) fn props(&self) -> &[hir::Properties] {\n        &self.0.props\n    }\n    pub(crate) fn props_union(&self) -> &hir::Properties {}\n    pub(crate) fn pattern_len(&self) -> usize {}\n    pub(crate) fn memory_usage(&self) -> usize {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_anchored_start(&self, input: &Input<'_>) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_always_anchored_start(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    pub(crate) fn is_always_anchored_end(&self) -> bool {}\n    #[cfg_attr(feature = \"perf-inline\", inline(always))]\n    fn is_impossible(&self, input: &Input<'_>) -> bool {}\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(self, kind: MatchKind) -> Config {}\n    pub fn utf8_empty(self, yes: bool) -> Config {}\n    pub fn auto_prefilter(self, yes: bool) -> Config {}\n    pub fn prefilter(self, pre: Option<Prefilter>) -> Config {}\n    pub fn which_captures(mut self, which_captures: WhichCaptures) -> Config {}\n    pub fn nfa_size_limit(self, limit: Option<usize>) -> Config {}\n    pub fn onepass_size_limit(self, limit: Option<usize>) -> Config {}\n    pub fn hybrid_cache_capacity(self, limit: usize) -> Config {}\n    pub fn dfa_size_limit(self, limit: Option<usize>) -> Config {}\n    pub fn dfa_state_limit(self, limit: Option<usize>) -> Config {}\n    pub fn byte_classes(self, yes: bool) -> Config {}\n    pub fn line_terminator(self, byte: u8) -> Config {}\n    pub fn hybrid(self, yes: bool) -> Config {}\n    pub fn dfa(self, yes: bool) -> Config {}\n    pub fn onepass(self, yes: bool) -> Config {}\n    pub fn backtrack(self, yes: bool) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {\n        self.match_kind.unwrap_or(MatchKind::LeftmostFirst)\n    }\n    pub fn get_utf8_empty(&self) -> bool {}\n    pub fn get_auto_prefilter(&self) -> bool {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_which_captures(&self) -> WhichCaptures {}\n    pub fn get_nfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_onepass_size_limit(&self) -> Option<usize> {}\n    pub fn get_hybrid_cache_capacity(&self) -> usize {}\n    pub fn get_dfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_dfa_state_limit(&self) -> Option<usize> {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    pub fn get_hybrid(&self) -> bool {}\n    pub fn get_dfa(&self) -> bool {}\n    pub fn get_onepass(&self) -> bool {}\n    pub fn get_backtrack(&self) -> bool {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\npub(crate) fn alternation_literals(\n    info: &RegexInfo,\n    hirs: &[&Hir],\n) -> Option<Vec<Vec<u8>>> {\n    use regex_syntax::hir::{HirKind, Literal};\n    if !cfg!(feature = \"perf-literal-multisubstring\") {\n        return None;\n    }\n    if hirs.len() != 1 || !info.props()[0].look_set().is_empty()\n        || info.props()[0].explicit_captures_len() > 0\n        || !info.props()[0].is_alternation_literal()\n        || info.config().get_match_kind() != MatchKind::LeftmostFirst\n    {\n        return None;\n    }\n    let hir = &hirs[0];\n    let alts = match *hir.kind() {\n        HirKind::Alternation(ref alts) => alts,\n        _ => return None,\n    };\n    let mut lits = vec![];\n    for alt in alts {\n        let mut lit = vec![];\n        match *alt.kind() {\n            HirKind::Literal(Literal(ref bytes)) => lit.extend_from_slice(bytes),\n            HirKind::Concat(ref exprs) => {\n                for e in exprs {\n                    match *e.kind() {\n                        HirKind::Literal(Literal(ref bytes)) => {\n                            lit.extend_from_slice(bytes);\n                        }\n                        _ => unreachable!(\"expected literal, got {:?}\", e),\n                    }\n                }\n            }\n            _ => unreachable!(\"expected literal or concat, got {:?}\", alt),\n        }\n        lits.push(lit);\n    }\n    if lits.len() < 3000 {\n        debug!(\"skipping Aho-Corasick because there are too few literals\");\n        return None;\n    }\n    Some(lits)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Pull out an alternation of literals from the given sequence of HIR\n/// expressions.\n///\n/// There are numerous ways for this to fail. Generally, this only applies\n/// to regexes of the form 'foo|bar|baz|...|quux'. It can also fail if there\n/// are \"too few\" alternates, in which case, the regex engine is likely faster.\n///\n/// And currently, this only returns something when 'hirs.len() == 1'.\n15 pub(crate) fn alternation_literals(\n16     info: &RegexInfo,\n17     hirs: &[&Hir],\n18 ) -> Option<Vec<Vec<u8>>> {\n19     use regex_syntax::hir::{HirKind, Literal};\n20 \n21     // Might as well skip the work below if we know we can't build an\n22     // Aho-Corasick searcher.\n23     if !cfg!(feature = \"perf-literal-multisubstring\") {\n24         return None;\n25     }\n26     // This is pretty hacky, but basically, if `is_alternation_literal` is\n27     // true, then we can make several assumptions about the structure of our\n28     // HIR. This is what justifies the `unreachable!` statements below.\n29     if hirs.len() != 1\n30         || !info.props()[0].look_set().is_empty()\n31         || info.props()[0].explicit_captures_len() > 0\n32         || !info.props()[0].is_alternation_literal()\n33         || info.config().get_match_kind() != MatchKind::LeftmostFirst\n34     {\n35         return None;\n36     }\n37     let hir = &hirs[0];\n38     let alts = match *hir.kind() {\n39         HirKind::Alternation(ref alts) => alts,\n40         _ => return None, // one literal isn't worth it\n41     };\n42 \n43     let mut lits = vec![];\n44     for alt in alts {\n45         let mut lit = vec![];\n46         match *alt.kind() {\n47             HirKind::Literal(Literal(ref bytes)) => {\n48                 lit.extend_from_slice(bytes)\n49             }\n50             HirKind::Concat(ref exprs) => {\n51                 for e in exprs {\n52                     match *e.kind() {\n53                         HirKind::Literal(Literal(ref bytes)) => {\n54                             lit.extend_from_slice(bytes);\n55                         }\n56                         _ => unreachable!(\"expected literal, got {:?}\", e),\n57                     }\n58                 }\n59             }\n60             _ => unreachable!(\"expected literal or concat, got {:?}\", alt),\n61         }\n62         lits.push(lit);\n63     }\n64     // Why do this? Well, when the number of literals is small, it's likely\n65     // that we'll use the lazy DFA which is in turn likely to be faster than\n66     // Aho-Corasick in such cases. Primarily because Aho-Corasick doesn't have\n67     // a \"lazy DFA\" but either a contiguous NFA or a full DFA. We rarely use\n68     // the latter because it is so hungry (in time and space), and the former\n69     // is decently fast, but not as fast as a well oiled lazy DFA.\n70     //\n71     // However, once the number starts getting large, the lazy DFA is likely\n72     // to start thrashing because of the modest default cache size. When\n73     // exactly does this happen? Dunno. But at whatever point that is (we make\n74     // a guess below based on ad hoc benchmarking), we'll want to cut over to\n75     // Aho-Corasick, where even the contiguous NFA is likely to do much better.\n76     if lits.len() < 3000 {\n77         debug!(\"skipping Aho-Corasick because there are too few literals\");\n78         return None;\n79     }\n80     Some(lits)\n81 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}