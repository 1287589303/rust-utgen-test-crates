{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/lazy.rs\n// crate name is regex_automata\nuse core::{\n    cell::Cell, fmt, mem::MaybeUninit, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicU8, Ordering},\n};\nconst LAZY_STATE_INIT: u8 = 0;\nconst LAZY_STATE_BUSY: u8 = 1;\nconst LAZY_STATE_DONE: u8 = 2;\npub(super) struct Lazy<T, F> {\n    state: AtomicU8,\n    create: Cell<Option<F>>,\n    data: Cell<MaybeUninit<T>>,\n}\nimpl<T, F> Lazy<T, F> {\n    pub(super) const fn new(create: F) -> Lazy<T, F> {\n        Lazy {\n            state: AtomicU8::new(LAZY_STATE_INIT),\n            create: Cell::new(Some(create)),\n            data: Cell::new(MaybeUninit::uninit()),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new alloc but non-std lazy value that is racily\n/// initialized. That is, the 'create' function may be called more than\n/// once.\n150 pub(super) const fn new(create: F) -> Lazy<T, F> {\n151     Lazy {\n152         data: AtomicPtr::new(core::ptr::null_mut()),\n153         create,\n154         owned: PhantomData,\n155     }\n156 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}