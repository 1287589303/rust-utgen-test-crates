{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub struct SimpleCaseFolder {\n    /// The simple case fold table. It's a sorted association list, where the\n    /// keys are Unicode scalar values and the values are the corresponding\n    /// equivalence class (not including the key) of the \"simple\" case folded\n    /// Unicode scalar values.\n    table: &'static [(char, &'static [char])],\n    /// The last codepoint that was used for a lookup.\n    last: Option<char>,\n    /// The index to the entry in `table` corresponding to the smallest key `k`\n    /// such that `k > k0`, where `k0` is the most recent key lookup. Note that\n    /// in particular, `k0` may not be in the table!\n    next: usize,\n}\nimpl SimpleCaseFolder {\n    pub fn new() -> Result<SimpleCaseFolder, CaseFoldError> {}\n    pub fn mapping(&mut self, c: char) -> &'static [char] {}\n    pub fn overlaps(&self, start: char, end: char) -> bool {}\n    fn get(&self, c: char) -> Result<usize, usize> {\n        self.table.binary_search_by_key(&c, |&(c1, _)| c1)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the index at which `c` occurs in the simple case fold table. If\n/// `c` does not occur, then this returns an `i` such that `table[i-1].0 <\n/// c` and `table[i].0 > c`.\n198 fn get(&self, c: char) -> Result<usize, usize> {\n199     self.table.binary_search_by_key(&c, |&(c1, _)| c1)\n200 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}