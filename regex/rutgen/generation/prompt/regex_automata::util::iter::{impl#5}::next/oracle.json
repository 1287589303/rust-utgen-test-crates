{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/iter.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::captures::Captures;\nuse crate::util::search::{HalfMatch, Input, Match, MatchError};\n#[derive(Debug)]\npub struct HalfMatchesIter<'h, F>(TryHalfMatchesIter<'h, F>);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct MatchError(\n    #[cfg(feature = \"alloc\")]\n    alloc::boxed::Box<MatchErrorKind>,\n    #[cfg(not(feature = \"alloc\"))]\n    MatchErrorKind,\n);\n#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\npub struct HalfMatch {\n    /// The pattern ID.\n    pattern: PatternID,\n    /// The offset of the match.\n    ///\n    /// For forward searches, the offset is exclusive. For reverse searches,\n    /// the offset is inclusive.\n    offset: usize,\n}\npub struct TryHalfMatchesIter<'h, F> {\n    it: Searcher<'h>,\n    finder: F,\n}\nimpl<'h, F> Iterator for HalfMatchesIter<'h, F>\nwhere\n    F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n{\n    type Item = HalfMatch;\n    #[inline]\n    fn next(&mut self) -> Option<HalfMatch> {\n        match self.0.next()? {\n            Ok(m) => Some(m),\n            Err(err) => {\n                panic!(\n                    \"unexpected regex half find error: {}\\n\\\n                 to handle find errors, use 'try' or 'search' methods\",\n                    err,\n                )\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n787 fn next(&mut self) -> Option<HalfMatch> {\n788     match self.0.next()? {\n789         Ok(m) => Some(m),\n790         Err(err) => panic!(\n791             \"unexpected regex half find error: {}\\n\\\n792              to handle find errors, use 'try' or 'search' methods\",\n793             err,\n794         ),\n795     }\n796 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}