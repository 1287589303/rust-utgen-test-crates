{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Captures<'h> {\n    haystack: &'h str,\n    slots: CaptureLocations,\n    pikevm: Arc<PikeVM>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\n#[derive(Clone, Debug)]\npub struct CaptureLocations(Vec<Option<NonMaxUsize>>);\nimpl<'h> core::fmt::Debug for Captures<'h> {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        /// A little helper type to provide a nice map-like debug\n        /// representation for our capturing group spans.\n        ///\n        /// regex-automata has something similar, but it includes the pattern\n        /// ID in its debug output, which is confusing. It also doesn't include\n        /// that strings that match because a regex-automata `Captures` doesn't\n        /// borrow the haystack.\n        struct CapturesDebugMap<'a> {\n            caps: &'a Captures<'a>,\n        }\n        impl<'a> core::fmt::Debug for CapturesDebugMap<'a> {\n            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                let mut map = f.debug_map();\n                let names = self.caps.pikevm.nfa().capture_names();\n                for (group_index, maybe_name) in names.enumerate() {\n                    let key = Key(group_index, maybe_name);\n                    match self.caps.get(group_index) {\n                        None => map.entry(&key, &None::<()>),\n                        Some(mat) => map.entry(&key, &Value(mat)),\n                    };\n                }\n                map.finish()\n            }\n        }\n        struct Key<'a>(usize, Option<&'a str>);\n        impl<'a> core::fmt::Debug for Key<'a> {\n            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                write!(f, \"{}\", self.0)?;\n                if let Some(name) = self.1 {\n                    write!(f, \"/{:?}\", name)?;\n                }\n                Ok(())\n            }\n        }\n        struct Value<'a>(Match<'a>);\n        impl<'a> core::fmt::Debug for Value<'a> {\n            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                write!(f, \"{}..{}/{:?}\", self.0.start(), self.0.end(), self.0.as_str())\n            }\n        }\n        f.debug_tuple(\"Captures\").field(&CapturesDebugMap { caps: self }).finish()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1935 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n1936     /// A little helper type to provide a nice map-like debug\n1937     /// representation for our capturing group spans.\n1938     ///\n1939     /// regex-automata has something similar, but it includes the pattern\n1940     /// ID in its debug output, which is confusing. It also doesn't include\n1941     /// that strings that match because a regex-automata `Captures` doesn't\n1942     /// borrow the haystack.\n1943     struct CapturesDebugMap<'a> {\n1944         caps: &'a Captures<'a>,\n1945     }\n1946 \n1947     impl<'a> core::fmt::Debug for CapturesDebugMap<'a> {\n1948         fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1949             let mut map = f.debug_map();\n1950             let names = self.caps.pikevm.nfa().capture_names();\n1951             for (group_index, maybe_name) in names.enumerate() {\n1952                 let key = Key(group_index, maybe_name);\n1953                 match self.caps.get(group_index) {\n1954                     None => map.entry(&key, &None::<()>),\n1955                     Some(mat) => map.entry(&key, &Value(mat)),\n1956                 };\n1957             }\n1958             map.finish()\n1959         }\n1960     }\n1961 \n1962     struct Key<'a>(usize, Option<&'a str>);\n1963 \n1964     impl<'a> core::fmt::Debug for Key<'a> {\n1965         fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1966             write!(f, \"{}\", self.0)?;\n1967             if let Some(name) = self.1 {\n1968                 write!(f, \"/{:?}\", name)?;\n1969             }\n1970             Ok(())\n1971         }\n1972     }\n1973 \n1974     struct Value<'a>(Match<'a>);\n1975 \n1976     impl<'a> core::fmt::Debug for Value<'a> {\n1977         fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n1978             write!(\n1979                 f,\n1980                 \"{}..{}/{:?}\",\n1981                 self.0.start(),\n1982                 self.0.end(),\n1983                 self.0.as_str()\n1984             )\n1985         }\n1986     }\n1987 \n1988     f.debug_tuple(\"Captures\")\n1989         .field(&CapturesDebugMap { caps: self })\n1990         .finish()\n1991 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}