{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/memmem.rs\n// crate name is regex_automata\nuse crate::util::{prefilter::PrefilterI, search::{MatchKind, Span}};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub(crate) struct Memmem {\n    #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]\n    _unused: (),\n    #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]\n    finder: memchr::memmem::Finder<'static>,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Memmem {\n    pub(crate) fn new<B: AsRef<[u8]>>(\n        _kind: MatchKind,\n        needles: &[B],\n    ) -> Option<Memmem> {\n        #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))] { None }\n        #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]\n        {\n            if needles.len() != 1 {\n                return None;\n            }\n            let needle = needles[0].as_ref();\n            let finder = memchr::memmem::Finder::new(needle).into_owned();\n            Some(Memmem { finder })\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n15 pub(crate) fn new<B: AsRef<[u8]>>(\n16     _kind: MatchKind,\n17     needles: &[B],\n18 ) -> Option<Memmem> {\n19     #[cfg(not(all(feature = \"std\", feature = \"perf-literal-substring\")))]\n20     {\n21         None\n22     }\n23     #[cfg(all(feature = \"std\", feature = \"perf-literal-substring\"))]\n24     {\n25         if needles.len() != 1 {\n26             return None;\n27         }\n28         let needle = needles[0].as_ref();\n29         let finder = memchr::memmem::Finder::new(needle).into_owned();\n30         Some(Memmem { finder })\n31     }\n32 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}