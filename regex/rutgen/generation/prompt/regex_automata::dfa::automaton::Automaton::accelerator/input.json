{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/automaton.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\nuse crate::util::search::PatternSet;\nuse crate::{\n    dfa::search,\n    util::{\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::{Anchored, HalfMatch, Input, MatchError},\n        start,\n    },\n};\npub unsafe trait Automaton {\n    fn next_state(&self, current: StateID, input: u8) -> StateID;\n    unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID;\n    fn next_eoi_state(&self, current: StateID) -> StateID;\n    fn start_state(&self, config: &start::Config) -> Result<StateID, StartError>;\n    fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    #[inline]\n    fn universal_start_state(&self, _mode: Anchored) -> Option<StateID>;\n    fn is_special_state(&self, id: StateID) -> bool;\n    fn is_dead_state(&self, id: StateID) -> bool;\n    fn is_quit_state(&self, id: StateID) -> bool;\n    fn is_match_state(&self, id: StateID) -> bool;\n    fn is_start_state(&self, id: StateID) -> bool;\n    fn is_accel_state(&self, id: StateID) -> bool;\n    fn pattern_len(&self) -> usize;\n    fn match_len(&self, id: StateID) -> usize;\n    fn match_pattern(&self, id: StateID, index: usize) -> PatternID;\n    fn has_empty(&self) -> bool;\n    fn is_utf8(&self) -> bool;\n    fn is_always_start_anchored(&self) -> bool;\n    #[inline]\n    fn accelerator(&self, _id: StateID) -> &[u8] {\n        &[]\n    }\n    #[inline]\n    fn get_prefilter(&self) -> Option<&Prefilter>;\n    #[inline]\n    fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_overlapping_fwd(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[inline]\n    fn try_search_overlapping_rev(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    fn try_which_overlapping_matches(\n        &self,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) -> Result<(), MatchError>;\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a slice of bytes to accelerate for the given state, if possible.\n///\n/// If the given state has no accelerator, then an empty slice must be\n/// returned. If `Automaton::is_accel_state` returns true for the given ID,\n/// then this routine _must_ return a non-empty slice. But note that it is\n/// not required for an implementation of this trait to ever return `true`\n/// for `is_accel_state`, even if the state _could_ be accelerated. That\n/// is, acceleration is an optional optimization. But the return values of\n/// `is_accel_state` and `accelerator` must be in sync.\n///\n/// If the given ID is not a valid state ID for this automaton, then\n/// implementations may panic or produce incorrect results.\n///\n/// See [`Automaton::is_accel_state`] for more details on state\n/// acceleration.\n///\n/// By default, this method will always return an empty slice.\n///\n/// # Example\n///\n/// This example shows a contrived case in which we build a regex that we\n/// know is accelerated and extract the accelerator from a state.\n///\n/// ```\n/// use regex_automata::{\n///     dfa::{Automaton, dense},\n///     util::{primitives::StateID, syntax},\n/// };\n///\n/// let dfa = dense::Builder::new()\n///     // We disable Unicode everywhere and permit the regex to match\n///     // invalid UTF-8. e.g., [^abc] matches \\xFF, which is not valid\n///     // UTF-8. If we left Unicode enabled, [^abc] would match any UTF-8\n///     // encoding of any Unicode scalar value except for 'a', 'b' or 'c'.\n///     // That translates to a much more complicated DFA, and also\n///     // inhibits the 'accelerator' optimization that we are trying to\n///     // demonstrate in this example.\n///     .syntax(syntax::Config::new().unicode(false).utf8(false))\n///     .build(\"[^abc]+a\")?;\n///\n/// // Here we just pluck out the state that we know is accelerated.\n/// // While the stride calculations are something that can be relied\n/// // on by callers, the specific position of the accelerated state is\n/// // implementation defined.\n/// //\n/// // N.B. We get '3' by inspecting the state machine using 'regex-cli'.\n/// // e.g., try `regex-cli debug dense dfa -p '[^abc]+a' -BbUC`.\n/// let id = StateID::new(3 * dfa.stride()).unwrap();\n/// let accelerator = dfa.accelerator(id);\n/// // The `[^abc]+` sub-expression permits [a, b, c] to be accelerated.\n/// assert_eq!(accelerator, &[b'a', b'b', b'c']);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n1143 fn accelerator(&self, _id: StateID) -> &[u8] {\n1144     &[]\n1145 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}