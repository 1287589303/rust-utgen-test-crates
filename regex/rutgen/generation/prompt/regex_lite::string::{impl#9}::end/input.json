{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\nimpl<'h> Match<'h> {\n    #[inline]\n    fn new(haystack: &'h str, start: usize, end: usize) -> Match<'h> {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.end\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn range(&self) -> core::ops::Range<usize> {}\n    #[inline]\n    pub fn as_str(&self) -> &'h str {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the byte offset of the end of the match in the haystack. The\n/// end of the match corresponds to the byte immediately following the last\n/// byte in the match. This means that `&slice[start..end]` works as one\n/// would expect.\n///\n/// It is guaranteed that `Match::start() <= Match::end()`.\n///\n/// This is guaranteed to fall on a valid UTF-8 codepoint boundary. That\n/// is, it will never be an offset that appears between the UTF-8 code\n/// units of a UTF-8 encoded Unicode scalar value. Consequently, it is\n/// always safe to slice the corresponding haystack using this offset.\n1536 pub fn end(&self) -> usize {\n1537     self.end\n1538 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}