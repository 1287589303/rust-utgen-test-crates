{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/captures.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype CaptureNameMap = std::collections::HashMap<Arc<str>, SmallIndex>;\n#[cfg(not(feature = \"std\"))]\ntype CaptureNameMap = alloc::collections::BTreeMap<Arc<str>, SmallIndex>;\nuse alloc::{string::String, sync::Arc, vec, vec::Vec};\nuse crate::util::{\n    interpolate,\n    primitives::{NonMaxUsize, PatternID, PatternIDError, PatternIDIter, SmallIndex},\n    search::{Match, Span},\n};\n#[derive(Clone)]\npub struct Captures {\n    /// The group info that these capture groups are coupled to. This is what\n    /// gives the \"convenience\" of the `Captures` API. Namely, it provides the\n    /// slot mapping and the name|-->index mapping for capture lookups by name.\n    group_info: GroupInfo,\n    /// The ID of the pattern that matched. Regex engines must set this to\n    /// None when no match occurs.\n    pid: Option<PatternID>,\n    /// The slot values, i.e., submatch offsets.\n    ///\n    /// In theory, the smallest sequence of slots would be something like\n    /// `max(groups(pattern) for pattern in regex) * 2`, but instead, we use\n    /// `sum(groups(pattern) for pattern in regex) * 2`. Why?\n    ///\n    /// Well, the former could be used in theory, because we don't generally\n    /// have any overlapping APIs that involve capturing groups. Therefore,\n    /// there's technically never any need to have slots set for multiple\n    /// patterns. However, this might change some day, in which case, we would\n    /// need to have slots available.\n    ///\n    /// The other reason is that during the execution of some regex engines,\n    /// there exists a point in time where multiple slots for different\n    /// patterns may be written to before knowing which pattern has matched.\n    /// Therefore, the regex engines themselves, in order to support multiple\n    /// patterns correctly, must have all slots available. If `Captures`\n    /// doesn't have all slots available, then regex engines can't write\n    /// directly into the caller provided `Captures` and must instead write\n    /// into some other storage and then copy the slots involved in the match\n    /// at the end of the search.\n    ///\n    /// So overall, at least as of the time of writing, it seems like the path\n    /// of least resistance is to just require allocating all possible slots\n    /// instead of the conceptual minimum. Another way to justify this is that\n    /// the most common case is a single pattern, in which case, there is no\n    /// inefficiency here since the 'max' and 'sum' calculations above are\n    /// equivalent in that case.\n    ///\n    /// N.B. The mapping from group index to slot is maintained by `GroupInfo`\n    /// and is considered an API guarantee. See `GroupInfo` for more details on\n    /// that mapping.\n    ///\n    /// N.B. `Option<NonMaxUsize>` has the same size as a `usize`.\n    slots: Vec<Option<NonMaxUsize>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\n#[derive(Clone, Debug, Default)]\npub struct GroupInfo(Arc<GroupInfoInner>);\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct NonMaxUsize(NonZeroUsize);\nimpl Captures {\n    pub fn all(group_info: GroupInfo) -> Captures {}\n    pub fn matches(group_info: GroupInfo) -> Captures {}\n    pub fn empty(group_info: GroupInfo) -> Captures {}\n    #[inline]\n    pub fn is_match(&self) -> bool {}\n    #[inline]\n    pub fn pattern(&self) -> Option<PatternID> {}\n    #[inline]\n    pub fn get_match(&self) -> Option<Match> {}\n    #[inline]\n    pub fn get_group(&self, index: usize) -> Option<Span> {}\n    pub fn get_group_by_name(&self, name: &str) -> Option<Span> {}\n    pub fn iter(&self) -> CapturesPatternIter<'_> {}\n    pub fn group_len(&self) -> usize {}\n    pub fn group_info(&self) -> &GroupInfo {}\n    pub fn interpolate_string(&self, haystack: &str, replacement: &str) -> String {}\n    pub fn interpolate_string_into(\n        &self,\n        haystack: &str,\n        replacement: &str,\n        dst: &mut String,\n    ) {\n        interpolate::string(\n            replacement,\n            |index, dst| {\n                let span = match self.get_group(index) {\n                    None => return,\n                    Some(span) => span,\n                };\n                dst.push_str(&haystack[span]);\n            },\n            |name| self.group_info().to_index(self.pattern()?, name),\n            dst,\n        );\n    }\n    pub fn interpolate_bytes(&self, haystack: &[u8], replacement: &[u8]) -> Vec<u8> {}\n    pub fn interpolate_bytes_into(\n        &self,\n        haystack: &[u8],\n        replacement: &[u8],\n        dst: &mut Vec<u8>,\n    ) {}\n    pub fn extract<'h, const N: usize>(\n        &self,\n        haystack: &'h str,\n    ) -> (&'h str, [&'h str; N]) {}\n    pub fn extract_bytes<'h, const N: usize>(\n        &self,\n        haystack: &'h [u8],\n    ) -> (&'h [u8], [&'h [u8]; N]) {}\n}\npub fn string(\n    mut replacement: &str,\n    mut append: impl FnMut(usize, &mut String),\n    mut name_to_index: impl FnMut(&str) -> Option<usize>,\n    dst: &mut String,\n) {\n    while !replacement.is_empty() {\n        match memchr(b'$', replacement.as_bytes()) {\n            None => break,\n            Some(i) => {\n                dst.push_str(&replacement[..i]);\n                replacement = &replacement[i..];\n            }\n        }\n        if replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') {\n            dst.push_str(\"$\");\n            replacement = &replacement[2..];\n            continue;\n        }\n        debug_assert!(! replacement.is_empty());\n        let cap_ref = match find_cap_ref(replacement.as_bytes()) {\n            Some(cap_ref) => cap_ref,\n            None => {\n                dst.push_str(\"$\");\n                replacement = &replacement[1..];\n                continue;\n            }\n        };\n        replacement = &replacement[cap_ref.end..];\n        match cap_ref.cap {\n            Ref::Number(i) => append(i, dst),\n            Ref::Named(name) => {\n                if let Some(i) = name_to_index(name) {\n                    append(i, dst);\n                }\n            }\n        }\n    }\n    dst.push_str(replacement);\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Interpolates the capture references in `replacement` with the\n/// corresponding substrings in `haystack` matched by each reference. The\n/// interpolated string is written to `dst`.\n///\n/// See the [`interpolate` module](interpolate) for documentation on the\n/// format of the replacement string.\n///\n/// # Example\n///\n/// This example shows how to use interpolation, and also shows how it\n/// can work with multi-pattern regexes.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, PatternID};\n///\n/// let re = PikeVM::new_many(&[\n///     r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",\n///     r\"(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})\",\n/// ])?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n///\n/// let replacement = \"year=$year, month=$month, day=$day\";\n///\n/// // This matches the first pattern.\n/// let hay = \"On 14-03-2010, I became a Tenneessee lamb.\";\n/// re.captures(&mut cache, hay, &mut caps);\n/// let mut dst = String::new();\n/// caps.interpolate_string_into(hay, replacement, &mut dst);\n/// assert_eq!(\"year=2010, month=03, day=14\", dst);\n///\n/// // And this matches the second pattern.\n/// let hay = \"On 2010-03-14, I became a Tenneessee lamb.\";\n/// re.captures(&mut cache, hay, &mut caps);\n/// let mut dst = String::new();\n/// caps.interpolate_string_into(hay, replacement, &mut dst);\n/// assert_eq!(\"year=2010, month=03, day=14\", dst);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n766 pub fn interpolate_string_into(\n767     &self,\n768     haystack: &str,\n769     replacement: &str,\n770     dst: &mut String,\n771 ) {\n772     interpolate::string(\n773         replacement,\n774         |index, dst| {\n775             let span = match self.get_group(index) {\n776                 None => return,\n777                 Some(span) => span,\n778             };\n779             dst.push_str(&haystack[span]);\n780         },\n781         |name| self.group_info().to_index(self.pattern()?, name),\n782         dst,\n783     );\n784 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}