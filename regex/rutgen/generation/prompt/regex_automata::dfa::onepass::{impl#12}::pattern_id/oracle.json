{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/onepass.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    dfa::{remapper::Remapper, DEAD},\n    nfa::thompson::{self, NFA},\n    util::{\n        alphabet::ByteClasses, captures::Captures, escape::DebugByte,\n        int::{Usize, U32, U64, U8},\n        look::{Look, LookSet, UnicodeWordBoundaryError},\n        primitives::{NonMaxUsize, PatternID, StateID},\n        search::{Anchored, Input, Match, MatchError, MatchKind, Span},\n        sparse_set::SparseSet,\n    },\n};\npub(crate) trait U64 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn low_u32(self) -> u32;\n    fn high_u32(self) -> u32;\n}\n#[derive(Clone, Copy)]\nstruct PatternEpsilons(u64);\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct PatternID(SmallIndex);\nimpl PatternEpsilons {\n    const PATTERN_ID_BITS: u64 = 22;\n    const PATTERN_ID_SHIFT: u64 = 64 - PatternEpsilons::PATTERN_ID_BITS;\n    const PATTERN_ID_NONE: u64 = 0x00000000_003FFFFF;\n    const PATTERN_ID_LIMIT: u64 = PatternEpsilons::PATTERN_ID_NONE;\n    const PATTERN_ID_MASK: u64 = 0xFFFFFC00_00000000;\n    const EPSILONS_MASK: u64 = 0x000003FF_FFFFFFFF;\n    fn empty() -> PatternEpsilons {}\n    fn is_empty(self) -> bool {}\n    fn pattern_id(self) -> Option<PatternID> {\n        let pid = self.0 >> PatternEpsilons::PATTERN_ID_SHIFT;\n        if pid == PatternEpsilons::PATTERN_ID_LIMIT {\n            None\n        } else {\n            Some(PatternID::new_unchecked(pid.as_usize()))\n        }\n    }\n    fn pattern_id_unchecked(self) -> PatternID {}\n    fn set_pattern_id(self, pid: PatternID) -> PatternEpsilons {}\n    fn epsilons(self) -> Epsilons {}\n    fn set_epsilons(self, epsilons: Epsilons) -> PatternEpsilons {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the pattern ID in this pattern epsilons if one exists.\n2705 fn pattern_id(self) -> Option<PatternID> {\n2706     let pid = self.0 >> PatternEpsilons::PATTERN_ID_SHIFT;\n2707     if pid == PatternEpsilons::PATTERN_ID_LIMIT {\n2708         None\n2709     } else {\n2710         Some(PatternID::new_unchecked(pid.as_usize()))\n2711     }\n2712 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}