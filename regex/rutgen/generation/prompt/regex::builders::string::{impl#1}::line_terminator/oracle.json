{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/builders.rs\n// crate name is regex\nuse crate::{error::Error, Regex, RegexSet};\nuse super::Builder;\n#[derive(Clone, Debug)]\npub struct RegexSetBuilder {\n    builder: Builder,\n}\n#[derive(Clone, Debug)]\nstruct Builder {\n    pats: Vec<String>,\n    metac: meta::Config,\n    syntaxc: syntax::Config,\n}\nimpl RegexSetBuilder {\n    pub fn new<I, S>(patterns: I) -> RegexSetBuilder\n    where\n        I: IntoIterator<Item = S>,\n        S: AsRef<str>,\n    {}\n    pub fn build(&self) -> Result<RegexSet, Error> {}\n    pub fn unicode(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn case_insensitive(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn multi_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn crlf(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn line_terminator(&mut self, byte: u8) -> &mut RegexSetBuilder {\n        self.builder.line_terminator(byte);\n        self\n    }\n    pub fn swap_greed(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn ignore_whitespace(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn octal(&mut self, yes: bool) -> &mut RegexSetBuilder {}\n    pub fn size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn dfa_size_limit(&mut self, bytes: usize) -> &mut RegexSetBuilder {}\n    pub fn nest_limit(&mut self, limit: u32) -> &mut RegexSetBuilder {}\n}\nimpl Builder {\n    fn new<I, S>(patterns: I) -> Builder\n    where\n        S: AsRef<str>,\n        I: IntoIterator<Item = S>,\n    {}\n    fn build_one_string(&self) -> Result<crate::Regex, Error> {}\n    fn build_one_bytes(&self) -> Result<crate::bytes::Regex, Error> {}\n    fn build_many_string(&self) -> Result<crate::RegexSet, Error> {}\n    fn build_many_bytes(&self) -> Result<crate::bytes::RegexSet, Error> {}\n    fn case_insensitive(&mut self, yes: bool) -> &mut Builder {}\n    fn multi_line(&mut self, yes: bool) -> &mut Builder {}\n    fn dot_matches_new_line(&mut self, yes: bool) -> &mut Builder {}\n    fn crlf(&mut self, yes: bool) -> &mut Builder {}\n    fn line_terminator(&mut self, byte: u8) -> &mut Builder {\n        self.metac = self.metac.clone().line_terminator(byte);\n        self.syntaxc = self.syntaxc.line_terminator(byte);\n        self\n    }\n    fn swap_greed(&mut self, yes: bool) -> &mut Builder {}\n    fn ignore_whitespace(&mut self, yes: bool) -> &mut Builder {}\n    fn unicode(&mut self, yes: bool) -> &mut Builder {}\n    fn octal(&mut self, yes: bool) -> &mut Builder {}\n    fn size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn dfa_size_limit(&mut self, limit: usize) -> &mut Builder {}\n    fn nest_limit(&mut self, limit: u32) -> &mut Builder {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Configures the line terminator to be used by the regex.\n///\n/// The line terminator is relevant in two ways for a particular regex:\n///\n/// * When dot-matches-new-line mode is *not* enabled (the default),\n/// then `.` will match any character except for the configured line\n/// terminator.\n/// * When multi-line mode is enabled (not the default), then `^` and\n/// `$` will match immediately after and before, respectively, a line\n/// terminator.\n///\n/// In both cases, if CRLF mode is enabled in a particular context,\n/// then it takes precedence over any configured line terminator.\n///\n/// This option cannot be configured from within the pattern.\n///\n/// The default line terminator is `\\n`.\n///\n/// # Example\n///\n/// This shows how to treat the NUL byte as a line terminator. This can\n/// be a useful heuristic when searching binary data.\n///\n/// ```\n/// use regex::RegexSetBuilder;\n///\n/// let re = RegexSetBuilder::new([r\"^foo$\"])\n///     .multi_line(true)\n///     .line_terminator(b'\\x00')\n///     .build()\n///     .unwrap();\n/// let hay = \"\\x00foo\\x00\";\n/// assert!(re.is_match(hay));\n/// ```\n///\n/// This example shows that the behavior of `.` is impacted by this\n/// setting as well:\n///\n/// ```\n/// use regex::RegexSetBuilder;\n///\n/// let re = RegexSetBuilder::new([r\".\"])\n///     .line_terminator(b'\\x00')\n///     .build()\n///     .unwrap();\n/// assert!(re.is_match(\"\\n\"));\n/// assert!(!re.is_match(\"\\x00\"));\n/// ```\n///\n/// This shows that building a regex will fail if the byte given\n/// is not ASCII and the pattern could result in matching invalid\n/// UTF-8. This is because any singular non-ASCII byte is not valid\n/// UTF-8, and it is not permitted for a [`RegexSet`] to match invalid\n/// UTF-8. (It is permissible to use a non-ASCII byte when building a\n/// [`bytes::RegexSet`](crate::bytes::RegexSet).)\n///\n/// ```\n/// use regex::RegexSetBuilder;\n///\n/// assert!(\n///     RegexSetBuilder::new([r\".\"])\n///         .line_terminator(0x80)\n///         .build()\n///         .is_err()\n/// );\n/// // Note that using a non-ASCII byte isn't enough on its own to\n/// // cause regex compilation to fail. You actually have to make use\n/// // of it in the regex in a way that leads to matching invalid\n/// // UTF-8. If you don't, then regex compilation will succeed!\n/// assert!(\n///     RegexSetBuilder::new([r\"a\"])\n///         .line_terminator(0x80)\n///         .build()\n///         .is_ok()\n/// );\n/// ```\n1108 pub fn line_terminator(&mut self, byte: u8) -> &mut RegexSetBuilder {\n1109     self.builder.line_terminator(byte);\n1110     self\n1111 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}