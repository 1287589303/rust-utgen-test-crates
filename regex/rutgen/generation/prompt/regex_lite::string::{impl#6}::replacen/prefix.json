{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\npub struct Regex {\n    pikevm: Arc<PikeVM>,\n    pool: CachePool,\n}\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Match<'h> {\n    haystack: &'h str,\n    start: usize,\n    end: usize,\n}\npub struct Captures<'h> {\n    haystack: &'h str,\n    slots: CaptureLocations,\n    pikevm: Arc<PikeVM>,\n}\n#[derive(Debug)]\npub struct CaptureMatches<'r, 'h> {\n    haystack: &'h str,\n    re: &'r Regex,\n    it: pikevm::CapturesMatches<'r, 'h>,\n}\n#[derive(Debug)]\npub struct Matches<'r, 'h> {\n    haystack: &'h str,\n    it: pikevm::FindMatches<'r, 'h>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\nimpl Regex {\n    pub fn new(pattern: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &str) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {\n        Matches {\n            haystack,\n            it: self.pikevm.find_iter(self.pool.get(), haystack.as_bytes()),\n        }\n    }\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h str) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(&'r self, haystack: &'h str) -> CaptureMatches<'r, 'h> {\n        CaptureMatches {\n            haystack,\n            re: self,\n            it: self.pikevm.captures_iter(self.pool.get(), haystack.as_bytes()),\n        }\n    }\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h str) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h str, limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h str, rep: R) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        rep: R,\n    ) -> Cow<'h, str> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h str,\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, str> {\n        if let Some(rep) = rep.no_expansion() {\n            let mut it = self.find_iter(haystack).enumerate().peekable();\n            if it.peek().is_none() {\n                return Cow::Borrowed(haystack);\n            }\n            let mut new = String::with_capacity(haystack.len());\n            let mut last_match = 0;\n            for (i, m) in it {\n                new.push_str(&haystack[last_match..m.start()]);\n                new.push_str(&rep);\n                last_match = m.end();\n                if limit > 0 && i >= limit - 1 {\n                    break;\n                }\n            }\n            new.push_str(&haystack[last_match..]);\n            return Cow::Owned(new);\n        }\n        let mut it = self.captures_iter(haystack).enumerate().peekable();\n        if it.peek().is_none() {\n            return Cow::Borrowed(haystack);\n        }\n        let mut new = String::with_capacity(haystack.len());\n        let mut last_match = 0;\n        for (i, cap) in it {\n            let m = cap.get(0).unwrap();\n            new.push_str(&haystack[last_match..m.start()]);\n            rep.replace_append(&cap, &mut new);\n            last_match = m.end();\n            if limit > 0 && i >= limit - 1 {\n                break;\n            }\n        }\n        new.push_str(&haystack[last_match..]);\n        Cow::Owned(new)\n    }\n}\nimpl<'h> Match<'h> {\n    #[inline]\n    fn new(haystack: &'h str, start: usize, end: usize) -> Match<'h> {}\n    #[inline]\n    pub fn start(&self) -> usize {\n        self.start\n    }\n    #[inline]\n    pub fn end(&self) -> usize {\n        self.end\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn range(&self) -> core::ops::Range<usize> {}\n    #[inline]\n    pub fn as_str(&self) -> &'h str {}\n}\nimpl<'h> Captures<'h> {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<Match<'h>> {\n        self.slots.get(i).map(|(s, e)| Match::new(self.haystack, s, e))\n    }\n    #[inline]\n    pub fn name(&self, name: &str) -> Option<Match<'h>> {}\n    pub fn extract<const N: usize>(&self) -> (&'h str, [&'h str; N]) {}\n    #[inline]\n    pub fn expand(&self, replacement: &str, dst: &mut String) {}\n    #[inline]\n    pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Replaces at most `limit` non-overlapping matches in the haystack with\n/// the replacement provided. If `limit` is `0`, then all non-overlapping\n/// matches are replaced. That is, `Regex::replace_all(hay, rep)` is\n/// equivalent to `Regex::replacen(hay, 0, rep)`.\n///\n/// The documentation for [`Regex::replace`] goes into more detail about\n/// what kinds of replacement strings are supported.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// Although note that the worst case time here has an upper bound given\n/// by the `limit` parameter.\n///\n/// # Fallibility\n///\n/// See the corresponding section in the docs for [`Regex::replace_all`]\n/// for tips on how to deal with a replacement routine that can fail.\n///\n/// # Example\n///\n/// This example shows how to flip the order of whitespace delimited\n/// fields, and normalizes the whitespace that delimits the fields. But we\n/// only do it for the first two matches.\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(?m)^(\\S+)\\s+(\\S+)$\").unwrap();\n/// let hay = \"\n/// Greetings  1973\n/// Wild\\t1973\n/// BornToRun\\t\\t\\t\\t1975\n/// Darkness                    1978\n/// TheRiver 1980\n/// \";\n/// let new = re.replacen(hay, 2, \"$2 $1\");\n/// assert_eq!(new, \"\n/// 1973 Greetings\n/// 1973 Wild\n/// BornToRun\\t\\t\\t\\t1975\n/// Darkness                    1978\n/// TheRiver 1980\n/// \");\n/// ```\n886 pub fn replacen<'h, R: Replacer>(\n887     &self,\n888     haystack: &'h str,\n889     limit: usize,\n890     mut rep: R,\n891 ) -> Cow<'h, str> {\n892     // If we know that the replacement doesn't have any capture expansions,\n893     // then we can use the fast path. The fast path can make a tremendous\n894     // difference:\n895     //\n896     //   1) We use `find_iter` instead of `captures_iter`. Not asking for\n897     //      captures generally makes the regex engines faster.\n898     //   2) We don't need to look up all of the capture groups and do\n899     //      replacements inside the replacement string. We just push it\n900     //      at each match and be done with it.\n901     if let Some(rep) = rep.no_expansion() {\n902         let mut it = self.find_iter(haystack).enumerate().peekable();\n903         if it.peek().is_none() {\n904             return Cow::Borrowed(haystack);\n905         }\n906         let mut new = String::with_capacity(haystack.len());\n907         let mut last_match = 0;\n908         for (i, m) in it {\n909             new.push_str(&haystack[last_match..m.start()]);\n910             new.push_str(&rep);\n911             last_match = m.end();\n912             if limit > 0 && i >= limit - 1 {\n913                 break;\n914             }\n915         }\n916         new.push_str(&haystack[last_match..]);\n917         return Cow::Owned(new);\n918     }\n919 \n920     // The slower path, which we use if the replacement needs access to\n921     // capture groups.\n922     let mut it = self.captures_iter(haystack).enumerate().peekable();\n923     if it.peek().is_none() {\n924         return Cow::Borrowed(haystack);\n925     }\n926     let mut new = String::with_capacity(haystack.len());\n927     let mut last_match = 0;\n928     for (i, cap) in it {\n929         // unwrap on 0 is OK because captures only reports matches\n930         let m = cap.get(0).unwrap();\n931         new.push_str(&haystack[last_match..m.start()]);\n932         rep.replace_append(&cap, &mut new);\n933         last_match = m.end();\n934         if limit > 0 && i >= limit - 1 {\n935             break;\n936         }\n937     }\n938     new.push_str(&haystack[last_match..]);\n939     Cow::Owned(new)\n940 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}