{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Debug)]\npub struct ByteClassRepresentatives<'a> {\n    classes: &'a ByteClasses,\n    cur_byte: usize,\n    end_byte: Option<usize>,\n    last_class: Option<u8>,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\nimpl<'a> Iterator for ByteClassRepresentatives<'a> {\n    type Item = Unit;\n    fn next(&mut self) -> Option<Unit> {\n        while self.cur_byte < self.end_byte.unwrap_or(256) {\n            let byte = u8::try_from(self.cur_byte).unwrap();\n            let class = self.classes.get(byte);\n            self.cur_byte += 1;\n            if self.last_class != Some(class) {\n                self.last_class = Some(class);\n                return Some(Unit::u8(byte));\n            }\n        }\n        if self.cur_byte != usize::MAX && self.end_byte.is_none() {\n            self.cur_byte = usize::MAX;\n            return Some(self.classes.eoi());\n        }\n        None\n    }\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {\n        self.0[usize::from(byte)]\n    }\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {\n        Unit::eoi(self.alphabet_len().checked_sub(1).unwrap())\n    }\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {}\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {\n        Unit(UnitKind::U8(byte))\n    }\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {}\n    pub fn as_u8(self) -> Option<u8> {}\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {}\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {}\n    pub fn is_word_byte(self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n564 fn next(&mut self) -> Option<Unit> {\n565     while self.cur_byte < self.end_byte.unwrap_or(256) {\n566         let byte = u8::try_from(self.cur_byte).unwrap();\n567         let class = self.classes.get(byte);\n568         self.cur_byte += 1;\n569 \n570         if self.last_class != Some(class) {\n571             self.last_class = Some(class);\n572             return Some(Unit::u8(byte));\n573         }\n574     }\n575     if self.cur_byte != usize::MAX && self.end_byte.is_none() {\n576         // Using usize::MAX as a sentinel is OK because we ban usize::MAX\n577         // from appearing as a start bound in iterator construction. But\n578         // why do it this way? Well, we want to return the EOI class\n579         // whenever the end of the given range is unbounded because EOI\n580         // isn't really a \"byte\" per se, so the only way it should be\n581         // excluded is if there is a bounded end to the range. Therefore,\n582         // when the end is unbounded, we just need to know whether we've\n583         // reported EOI or not. When we do, we set cur_byte to a value it\n584         // can never otherwise be.\n585         self.cur_byte = usize::MAX;\n586         return Some(self.classes.eoi());\n587     }\n588     None\n589 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}