{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Debug)]\npub struct ByteClassRepresentatives<'a> {\n    classes: &'a ByteClasses,\n    cur_byte: usize,\n    end_byte: Option<usize>,\n    last_class: Option<u8>,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\nimpl<'a> Iterator for ByteClassRepresentatives<'a> {\n    type Item = Unit;\n    fn next(&mut self) -> Option<Unit> {\n        while self.cur_byte < self.end_byte.unwrap_or(256) {\n            let byte = u8::try_from(self.cur_byte).unwrap();\n            let class = self.classes.get(byte);\n            self.cur_byte += 1;\n            if self.last_class != Some(class) {\n                self.last_class = Some(class);\n                return Some(Unit::u8(byte));\n            }\n        }\n        if self.cur_byte != usize::MAX && self.end_byte.is_none() {\n            self.cur_byte = usize::MAX;\n            return Some(self.classes.eoi());\n        }\n        None\n    }\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {\n        self.0[usize::from(byte)]\n    }\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {\n        Unit::eoi(self.alphabet_len().checked_sub(1).unwrap())\n    }\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {}\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {\n        Unit(UnitKind::U8(byte))\n    }\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {}\n    pub fn as_u8(self) -> Option<u8> {}\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {}\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {}\n    pub fn is_word_byte(self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n564 fn next(&mut self) -> Option<Unit> {\n565     while self.cur_byte < self.end_byte.unwrap_or(256) {\n566         let byte = u8::try_from(self.cur_byte).unwrap();\n567         let class = self.classes.get(byte);\n568         self.cur_byte += 1;\n569 \n570         if self.last_class != Some(class) {\n571             self.last_class = Some(class);\n572             return Some(Unit::u8(byte));\n573         }\n574     }\n575     if self.cur_byte != usize::MAX && self.end_byte.is_none() {\n576         // Using usize::MAX as a sentinel is OK because we ban usize::MAX\n577         // from appearing as a start bound in iterator construction. But\n578         // why do it this way? Well, we want to return the EOI class\n579         // whenever the end of the given range is unbounded because EOI\n580         // isn't really a \"byte\" per se, so the only way it should be\n581         // excluded is if there is a bounded end to the range. Therefore,\n582         // when the end is unbounded, we just need to know whether we've\n583         // reported EOI or not. When we do, we set cur_byte to a value it\n584         // can never otherwise be.\n585         self.cur_byte = usize::MAX;\n586         return Some(self.classes.eoi());\n587     }\n588     None\n589 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}