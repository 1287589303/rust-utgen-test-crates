{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/lib.rs\n// crate name is regex_syntax\npub use crate::{\n    error::Error, parser::{parse, Parser, ParserBuilder},\n    unicode::UnicodeWordError,\n};\nuse alloc::string::String;\n#[derive(Debug)]\npub struct UnicodeWordError(());\npub fn try_is_word_character(c: char) -> core::result::Result<bool, UnicodeWordError> {\n    unicode::is_word_character(c)\n}\npub fn is_word_character(c: char) -> Result<bool, UnicodeWordError> {\n    #[cfg(not(feature = \"unicode-perl\"))]\n    fn imp(_: char) -> Result<bool, UnicodeWordError> {\n        Err(UnicodeWordError(()))\n    }\n    #[cfg(feature = \"unicode-perl\")]\n    fn imp(c: char) -> Result<bool, UnicodeWordError> {\n        use crate::{is_word_byte, unicode_tables::perl_word::PERL_WORD};\n        if u8::try_from(c).map_or(false, is_word_byte) {\n            return Ok(true);\n        }\n        Ok(\n            PERL_WORD\n                .binary_search_by(|&(start, end)| {\n                    use core::cmp::Ordering;\n                    if start <= c && c <= end {\n                        Ordering::Equal\n                    } else if start > c {\n                        Ordering::Greater\n                    } else {\n                        Ordering::Less\n                    }\n                })\n                .is_ok(),\n        )\n    }\n    imp(c)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true if and only if the given character is a Unicode word\n/// character.\n///\n/// A Unicode word character is defined by\n/// [UTS#18 Annex C](https://unicode.org/reports/tr18/#Compatibility_Properties).\n/// In particular, a character\n/// is considered a word character if it is in either of the `Alphabetic` or\n/// `Join_Control` properties, or is in one of the `Decimal_Number`, `Mark`\n/// or `Connector_Punctuation` general categories.\n///\n/// # Errors\n///\n/// If the `unicode-perl` feature is not enabled, then this function always\n/// returns an error.\n366 pub fn try_is_word_character(\n367     c: char,\n368 ) -> core::result::Result<bool, UnicodeWordError> {\n369     unicode::is_word_character(c)\n370 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}