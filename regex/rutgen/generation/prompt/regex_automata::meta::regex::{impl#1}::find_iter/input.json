{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/regex.rs\n// crate name is regex_automata\ntype CachePool = Pool<Cache, CachePoolFn>;\ntype CachePoolGuard<'a> = PoolGuard<'a, Cache, CachePoolFn>;\ntype CachePoolFn = Box<dyn Fn() -> Cache + Send + Sync + UnwindSafe + RefUnwindSafe>;\nuse core::{borrow::Borrow, panic::{RefUnwindSafe, UnwindSafe}};\nuse alloc::{boxed::Box, sync::Arc, vec, vec::Vec};\nuse regex_syntax::{ast, hir::{self, Hir}};\nuse crate::{\n    meta::{\n        error::BuildError, strategy::{self, Strategy},\n        wrappers,\n    },\n    nfa::thompson::WhichCaptures,\n    util::{\n        captures::{Captures, GroupInfo},\n        iter, pool::{Pool, PoolGuard},\n        prefilter::Prefilter, primitives::{NonMaxUsize, PatternID},\n        search::{HalfMatch, Input, Match, MatchKind, PatternSet, Span},\n    },\n};\n#[derive(Debug)]\npub struct Regex {\n    /// The actual regex implementation.\n    imp: Arc<RegexI>,\n    /// A thread safe pool of caches.\n    ///\n    /// For the higher level search APIs, a `Cache` is automatically plucked\n    /// from this pool before running a search. The lower level `with` methods\n    /// permit the caller to provide their own cache, thereby bypassing\n    /// accesses to this pool.\n    ///\n    /// Note that we put this outside the `Arc` so that cloning a `Regex`\n    /// results in creating a fresh `CachePool`. This in turn permits callers\n    /// to clone regexes into separate threads where each such regex gets\n    /// the pool's \"thread owner\" optimization. Otherwise, if one shares the\n    /// `Regex` directly, then the pool will go through a slower mutex path for\n    /// all threads except for the \"owner.\"\n    pool: CachePool,\n}\n#[derive(Clone, Debug)]\npub struct Searcher<'h> {\n    /// The input parameters to give to each regex engine call.\n    ///\n    /// The start position of the search is mutated during iteration.\n    input: Input<'h>,\n    /// Records the end offset of the most recent match. This is necessary to\n    /// handle a corner case for preventing empty matches from overlapping with\n    /// the ending bounds of a prior match.\n    last_match_end: Option<usize>,\n}\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Debug)]\npub struct FindMatches<'r, 'h> {\n    re: &'r Regex,\n    cache: CachePoolGuard<'r>,\n    it: iter::Searcher<'h>,\n}\n#[derive(Debug, Clone)]\npub struct Cache {\n    pub(crate) capmatches: Captures,\n    pub(crate) pikevm: wrappers::PikeVMCache,\n    pub(crate) backtrack: wrappers::BoundedBacktrackerCache,\n    pub(crate) onepass: wrappers::OnePassCache,\n    pub(crate) hybrid: wrappers::HybridCache,\n    pub(crate) revhybrid: wrappers::ReverseHybridCache,\n}\n#[derive(Debug)]\nstruct RegexI {\n    /// The core matching engine.\n    ///\n    /// Why is this reference counted when RegexI is already wrapped in an Arc?\n    /// Well, we need to capture this in a closure to our `Pool` below in order\n    /// to create new `Cache` values when needed. So since it needs to be in\n    /// two places, we make it reference counted.\n    ///\n    /// We make `RegexI` itself reference counted too so that `Regex` itself\n    /// stays extremely small and very cheap to clone.\n    strat: Arc<dyn Strategy>,\n    /// Metadata about the regexes driving the strategy. The metadata is also\n    /// usually stored inside the strategy too, but we put it here as well\n    /// so that we can get quick access to it (without virtual calls) before\n    /// executing the regex engine. For example, we use this metadata to\n    /// detect a subset of cases where we know a match is impossible, and can\n    /// thus avoid calling into the strategy at all.\n    ///\n    /// Since `RegexInfo` is stored in multiple places, it is also reference\n    /// counted.\n    info: RegexInfo,\n}\nimpl Regex {\n    #[inline]\n    pub fn is_match<'h, I: Into<Input<'h>>>(&self, input: I) -> bool {}\n    #[inline]\n    pub fn find<'h, I: Into<Input<'h>>>(&self, input: I) -> Option<Match> {}\n    #[inline]\n    pub fn captures<'h, I: Into<Input<'h>>>(&self, input: I, caps: &mut Captures) {}\n    #[inline]\n    pub fn find_iter<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n    ) -> FindMatches<'r, 'h> {\n        let cache = self.pool.get();\n        let it = iter::Searcher::new(input.into());\n        FindMatches { re: self, cache, it }\n    }\n    #[inline]\n    pub fn captures_iter<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n    ) -> CapturesMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h, I: Into<Input<'h>>>(&'r self, input: I) -> Split<'r, 'h> {}\n    pub fn splitn<'r, 'h, I: Into<Input<'h>>>(\n        &'r self,\n        input: I,\n        limit: usize,\n    ) -> SplitN<'r, 'h> {}\n}\nimpl<'h> Searcher<'h> {\n    pub fn new(input: Input<'h>) -> Searcher<'h> {\n        Searcher {\n            input,\n            last_match_end: None,\n        }\n    }\n    pub fn input<'s>(&'s self) -> &'s Input<'h> {}\n    #[inline]\n    pub fn advance_half<F>(&mut self, finder: F) -> Option<HalfMatch>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn advance<F>(&mut self, finder: F) -> Option<Match>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance_half<F>(\n        &mut self,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn try_advance<F>(&mut self, mut finder: F) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_half_matches_iter<F>(self, finder: F) -> TryHalfMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[inline]\n    pub fn into_matches_iter<F>(self, finder: F) -> TryMatchesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub fn into_captures_iter<F>(\n        self,\n        caps: Captures,\n        finder: F,\n    ) -> TryCapturesIter<'h, F>\n    where\n        F: FnMut(&Input<'_>, &mut Captures) -> Result<(), MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_half_match<F>(\n        &mut self,\n        _: HalfMatch,\n        mut finder: F,\n    ) -> Result<Option<HalfMatch>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<HalfMatch>, MatchError>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn handle_overlapping_empty_match<F>(\n        &mut self,\n        m: Match,\n        mut finder: F,\n    ) -> Result<Option<Match>, MatchError>\n    where\n        F: FnMut(&Input<'_>) -> Result<Option<Match>, MatchError>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over all non-overlapping leftmost matches in\n/// the given haystack. If no match exists, then the iterator yields no\n/// elements.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::{meta::Regex, Match};\n///\n/// let re = Regex::new(\"foo[0-9]+\")?;\n/// let haystack = \"foo1 foo12 foo123\";\n/// let matches: Vec<Match> = re.find_iter(haystack).collect();\n/// assert_eq!(matches, vec![\n///     Match::must(0, 0..4),\n///     Match::must(0, 5..10),\n///     Match::must(0, 11..17),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n610 pub fn find_iter<'r, 'h, I: Into<Input<'h>>>(\n611     &'r self,\n612     input: I,\n613 ) -> FindMatches<'r, 'h> {\n614     let cache = self.pool.get();\n615     let it = iter::Searcher::new(input.into());\n616     FindMatches { re: self, cache, it }\n617 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}