{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/nfa.rs\n// crate name is regex_automata\nuse core::{fmt, mem};\nuse alloc::{boxed::Box, format, string::String, sync::Arc, vec, vec::Vec};\n#[cfg(feature = \"syntax\")]\nuse crate::nfa::thompson::{\n    compiler::{Compiler, Config},\n    error::BuildError,\n};\nuse crate::{\n    nfa::thompson::builder::Builder,\n    util::{\n        alphabet::{self, ByteClassSet, ByteClasses},\n        captures::{GroupInfo, GroupInfoError},\n        look::{Look, LookMatcher, LookSet},\n        primitives::{IteratorIndexExt, PatternID, PatternIDIter, SmallIndex, StateID},\n        sparse_set::SparseSet,\n    },\n};\n#[derive(Clone)]\npub struct NFA(Arc<Inner>);\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Default)]\npub(super) struct Inner {\n    /// The state sequence. This sequence is guaranteed to be indexable by all\n    /// starting state IDs, and it is also guaranteed to contain at most one\n    /// `Match` state for each pattern compiled into this NFA. (A pattern may\n    /// not have a corresponding `Match` state if a `Match` state is impossible\n    /// to reach.)\n    states: Vec<State>,\n    /// The anchored starting state of this NFA.\n    start_anchored: StateID,\n    /// The unanchored starting state of this NFA.\n    start_unanchored: StateID,\n    /// The starting states for each individual pattern. Starting at any\n    /// of these states will result in only an anchored search for the\n    /// corresponding pattern. The vec is indexed by pattern ID. When the NFA\n    /// contains a single regex, then `start_pattern[0]` and `start_anchored`\n    /// are always equivalent.\n    start_pattern: Vec<StateID>,\n    /// Info about the capturing groups in this NFA. This is responsible for\n    /// mapping groups to slots, mapping groups to names and names to groups.\n    group_info: GroupInfo,\n    /// A representation of equivalence classes over the transitions in this\n    /// NFA. Two bytes in the same equivalence class must not discriminate\n    /// between a match or a non-match. This map can be used to shrink the\n    /// total size of a DFA's transition table with a small match-time cost.\n    ///\n    /// Note that the NFA's transitions are *not* defined in terms of these\n    /// equivalence classes. The NFA's transitions are defined on the original\n    /// byte values. For the most part, this is because they wouldn't really\n    /// help the NFA much since the NFA already uses a sparse representation\n    /// to represent transitions. Byte classes are most effective in a dense\n    /// representation.\n    byte_class_set: ByteClassSet,\n    /// This is generated from `byte_class_set`, and essentially represents the\n    /// same thing but supports different access patterns. Namely, this permits\n    /// looking up the equivalence class of a byte very cheaply.\n    ///\n    /// Ideally we would just store this, but because of annoying code\n    /// structure reasons, we keep both this and `byte_class_set` around for\n    /// now. I think I would prefer that `byte_class_set` were computed in the\n    /// `Builder`, but right now, we compute it as states are added to the\n    /// `NFA`.\n    byte_classes: ByteClasses,\n    /// Whether this NFA has a `Capture` state anywhere.\n    has_capture: bool,\n    /// When the empty string is in the language matched by this NFA.\n    has_empty: bool,\n    /// Whether UTF-8 mode is enabled for this NFA. Briefly, this means that\n    /// all non-empty matches produced by this NFA correspond to spans of valid\n    /// UTF-8, and any empty matches produced by this NFA that split a UTF-8\n    /// encoded codepoint should be filtered out by the corresponding regex\n    /// engine.\n    utf8: bool,\n    /// Whether this NFA is meant to be matched in reverse or not.\n    reverse: bool,\n    /// The matcher to be used for look-around assertions.\n    look_matcher: LookMatcher,\n    /// The union of all look-around assertions that occur anywhere within\n    /// this NFA. If this set is empty, then it means there are precisely zero\n    /// conditional epsilon transitions in the NFA.\n    look_set_any: LookSet,\n    /// The union of all look-around assertions that occur as a zero-length\n    /// prefix for any of the patterns in this NFA.\n    look_set_prefix_any: LookSet,\n    /// Heap memory used indirectly by NFA states and other things (like the\n    /// various capturing group representations above). Since each state\n    /// might use a different amount of heap, we need to keep track of this\n    /// incrementally.\n    memory_extra: usize,\n}\nimpl NFA {\n    #[cfg(feature = \"syntax\")]\n    pub fn new(pattern: &str) -> Result<NFA, BuildError> {}\n    #[cfg(feature = \"syntax\")]\n    pub fn new_many<P: AsRef<str>>(patterns: &[P]) -> Result<NFA, BuildError> {}\n    pub fn always_match() -> NFA {}\n    pub fn never_match() -> NFA {}\n    #[cfg(feature = \"syntax\")]\n    pub fn config() -> Config {\n        Config::new()\n    }\n    #[cfg(feature = \"syntax\")]\n    pub fn compiler() -> Compiler {}\n    pub fn patterns(&self) -> PatternIter<'_> {}\n    #[inline]\n    pub fn pattern_len(&self) -> usize {}\n    #[inline]\n    pub fn start_anchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_unanchored(&self) -> StateID {}\n    #[inline]\n    pub fn start_pattern(&self, pid: PatternID) -> Option<StateID> {}\n    #[inline]\n    pub(crate) fn byte_class_set(&self) -> &ByteClassSet {}\n    #[inline]\n    pub fn byte_classes(&self) -> &ByteClasses {}\n    #[inline]\n    pub fn state(&self, id: StateID) -> &State {}\n    #[inline]\n    pub fn states(&self) -> &[State] {}\n    #[inline]\n    pub fn group_info(&self) -> &GroupInfo {}\n    #[inline]\n    pub fn has_capture(&self) -> bool {}\n    #[inline]\n    pub fn has_empty(&self) -> bool {}\n    #[inline]\n    pub fn is_utf8(&self) -> bool {}\n    #[inline]\n    pub fn is_reverse(&self) -> bool {}\n    #[inline]\n    pub fn is_always_start_anchored(&self) -> bool {}\n    #[inline]\n    pub fn look_matcher(&self) -> &LookMatcher {}\n    #[inline]\n    pub fn look_set_any(&self) -> LookSet {}\n    #[inline]\n    pub fn look_set_prefix_any(&self) -> LookSet {}\n    #[inline]\n    pub fn memory_usage(&self) -> usize {}\n}\nimpl Config {\n    pub fn new() -> Config {\n        Config::default()\n    }\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn reverse(mut self, yes: bool) -> Config {}\n    pub fn nfa_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn shrink(mut self, yes: bool) -> Config {}\n    #[deprecated(since = \"0.3.5\", note = \"use which_captures instead\")]\n    pub fn captures(self, yes: bool) -> Config {}\n    pub fn which_captures(mut self, which_captures: WhichCaptures) -> Config {}\n    pub fn look_matcher(mut self, m: LookMatcher) -> Config {}\n    #[cfg(test)]\n    fn unanchored_prefix(mut self, yes: bool) -> Config {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn get_reverse(&self) -> bool {}\n    pub fn get_nfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_shrink(&self) -> bool {}\n    #[deprecated(since = \"0.3.5\", note = \"use get_which_captures instead\")]\n    pub fn get_captures(&self) -> bool {}\n    pub fn get_which_captures(&self) -> WhichCaptures {}\n    pub fn get_look_matcher(&self) -> LookMatcher {}\n    fn get_unanchored_prefix(&self) -> bool {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a default configuration for an `NFA`.\n///\n/// This is a convenience routine to avoid needing to import the `Config`\n/// type when customizing the construction of an NFA.\n///\n/// # Example\n///\n/// This example shows how to build an NFA with a small size limit that\n/// results in a compilation error for any regex that tries to use more\n/// heap memory than the configured limit.\n///\n/// ```\n/// use regex_automata::nfa::thompson::{NFA, pikevm::PikeVM};\n///\n/// let result = PikeVM::builder()\n///     .thompson(NFA::config().nfa_size_limit(Some(1_000)))\n///     // Remember, \\w is Unicode-aware by default and thus huge.\n///     .build(r\"\\w+\");\n/// assert!(result.is_err());\n/// ```\n347 pub fn config() -> Config {\n348     Config::new()\n349 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}