{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\npub struct BuildError {\n    kind: BuildErrorKind,\n}\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    NFA(crate::nfa::thompson::BuildError),\n    Word(UnicodeWordBoundaryError),\n    TooManyStates { limit: u64 },\n    TooManyPatterns { limit: u64 },\n    UnsupportedLook { look: Look },\n    ExceededSizeLimit { limit: usize },\n    NotOnePass { msg: &'static str },\n}\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    NFA(nfa::thompson::BuildError),\n    InsufficientCacheCapacity { minimum: usize, given: usize },\n    InsufficientStateIDCapacity { err: LazyStateIDError },\n    Unsupported(&'static str),\n}\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    /// An error that occurred while parsing a regular expression. Note that\n    /// this error may be printed over multiple lines, and is generally\n    /// intended to be end user readable on its own.\n    #[cfg(feature = \"syntax\")]\n    Syntax(regex_syntax::Error),\n    /// An error that occurs if the capturing groups provided to an NFA builder\n    /// do not satisfy the documented invariants. For example, things like\n    /// too many groups, missing groups, having the first (zeroth) group be\n    /// named or duplicate group names within the same pattern.\n    Captures(captures::GroupInfoError),\n    /// An error that occurs when an NFA contains a Unicode word boundary, but\n    /// where the crate was compiled without the necessary data for dealing\n    /// with Unicode word boundaries.\n    Word(look::UnicodeWordBoundaryError),\n    /// An error that occurs if too many patterns were given to the NFA\n    /// compiler.\n    TooManyPatterns {\n        /// The number of patterns given, which exceeds the limit.\n        given: usize,\n        /// The limit on the number of patterns.\n        limit: usize,\n    },\n    /// An error that occurs if too states are produced while building an NFA.\n    TooManyStates {\n        /// The minimum number of states that are desired, which exceeds the\n        /// limit.\n        given: usize,\n        /// The limit on the number of states.\n        limit: usize,\n    },\n    /// An error that occurs when NFA compilation exceeds a configured heap\n    /// limit.\n    ExceededSizeLimit {\n        /// The configured limit, in bytes.\n        limit: usize,\n    },\n    /// An error that occurs when an invalid capture group index is added to\n    /// the NFA. An \"invalid\" index can be one that would otherwise overflow\n    /// a `usize` on the current target.\n    InvalidCaptureIndex {\n        /// The invalid index that was given.\n        index: u32,\n    },\n    /// An error that occurs when one tries to build a reverse NFA with\n    /// captures enabled. Currently, this isn't supported, but we probably\n    /// should support it at some point.\n    #[cfg(feature = \"syntax\")]\n    UnsupportedCaptures,\n}\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    Syntax { pid: PatternID, err: regex_syntax::Error },\n    NFA(nfa::thompson::BuildError),\n}\n#[cfg(feature = \"dfa-build\")]\n#[derive(Clone, Debug)]\nenum BuildErrorKind {\n    /// An error that occurred while constructing an NFA as a precursor step\n    /// before a DFA is compiled.\n    NFA(thompson::BuildError),\n    /// An error that occurred because an unsupported regex feature was used.\n    /// The message string describes which unsupported feature was used.\n    ///\n    /// The primary regex feature that is unsupported by DFAs is the Unicode\n    /// word boundary look-around assertion (`\\b`). This can be worked around\n    /// by either using an ASCII word boundary (`(?-u:\\b)`) or by enabling\n    /// Unicode word boundaries when building a DFA.\n    Unsupported(&'static str),\n    /// An error that occurs if too many states are produced while building a\n    /// DFA.\n    TooManyStates,\n    /// An error that occurs if too many start states are needed while building\n    /// a DFA.\n    ///\n    /// This is a kind of oddball error that occurs when building a DFA with\n    /// start states enabled for each pattern and enough patterns to cause\n    /// the table of start states to overflow `usize`.\n    TooManyStartStates,\n    /// This is another oddball error that can occur if there are too many\n    /// patterns spread out across too many match states.\n    TooManyMatchPatternIDs,\n    /// An error that occurs if the DFA got too big during determinization.\n    DFAExceededSizeLimit { limit: usize },\n    /// An error that occurs if auxiliary storage (not the DFA) used during\n    /// determinization got too big.\n    DeterminizeExceededSizeLimit { limit: usize },\n}\n#[cfg(feature = \"dfa-build\")]\nimpl BuildError {\n    fn kind(&self) -> &BuildErrorKind {}\n    pub(crate) fn nfa(err: thompson::BuildError) -> BuildError {}\n    pub(crate) fn unsupported_dfa_word_boundary_unicode() -> BuildError {}\n    pub(crate) fn too_many_states() -> BuildError {}\n    pub(crate) fn too_many_start_states() -> BuildError {}\n    pub(crate) fn too_many_match_pattern_ids() -> BuildError {}\n    pub(crate) fn dfa_exceeded_size_limit(limit: usize) -> BuildError {}\n    pub(crate) fn determinize_exceeded_size_limit(limit: usize) -> BuildError {\n        BuildError {\n            kind: BuildErrorKind::DeterminizeExceededSizeLimit {\n                limit,\n            },\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n5102 pub(crate) fn determinize_exceeded_size_limit(limit: usize) -> BuildError {\n5103     BuildError {\n5104         kind: BuildErrorKind::DeterminizeExceededSizeLimit { limit },\n5105     }\n5106 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}