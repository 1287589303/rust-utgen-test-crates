{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone, Copy, Debug)]\npub enum WhichCaptures {\n    /// All capture states, including those corresponding to both implicit and\n    /// explicit capture groups, are included in the Thompson NFA.\n    All,\n    /// Only capture states corresponding to implicit capture groups are\n    /// included. Implicit capture groups appear in every pattern implicitly\n    /// and correspond to the overall match of a pattern.\n    ///\n    /// This is useful when one only cares about the overall match of a\n    /// pattern. By excluding capture states from explicit capture groups,\n    /// one might be able to reduce the memory usage of a multi-pattern regex\n    /// substantially if it was otherwise written to have many explicit capture\n    /// groups.\n    Implicit,\n    /// No capture states are compiled into the Thompson NFA.\n    ///\n    /// This is useful when capture states are either not needed (for example,\n    /// if one is only trying to build a DFA) or if they aren't supported (for\n    /// example, a reverse NFA).\n    None,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn reverse(mut self, yes: bool) -> Config {}\n    pub fn nfa_size_limit(mut self, bytes: Option<usize>) -> Config {}\n    pub fn shrink(mut self, yes: bool) -> Config {\n        self.shrink = Some(yes);\n        self\n    }\n    #[deprecated(since = \"0.3.5\", note = \"use which_captures instead\")]\n    pub fn captures(self, yes: bool) -> Config {}\n    pub fn which_captures(mut self, which_captures: WhichCaptures) -> Config {}\n    pub fn look_matcher(mut self, m: LookMatcher) -> Config {}\n    #[cfg(test)]\n    fn unanchored_prefix(mut self, yes: bool) -> Config {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn get_reverse(&self) -> bool {}\n    pub fn get_nfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_shrink(&self) -> bool {}\n    #[deprecated(since = \"0.3.5\", note = \"use get_which_captures instead\")]\n    pub fn get_captures(&self) -> bool {}\n    pub fn get_which_captures(&self) -> WhichCaptures {}\n    pub fn get_look_matcher(&self) -> LookMatcher {}\n    fn get_unanchored_prefix(&self) -> bool {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Apply best effort heuristics to shrink the NFA at the expense of more\n/// time/memory.\n///\n/// Generally speaking, if one is using an NFA to compile a DFA, then the\n/// extra time used to shrink the NFA will be more than made up for during\n/// DFA construction (potentially by a lot). In other words, enabling this\n/// can substantially decrease the overall amount of time it takes to build\n/// a DFA.\n///\n/// A reason to keep this disabled is if you want to compile an NFA and\n/// start using it as quickly as possible without needing to build a DFA,\n/// and you don't mind using a bit of extra memory for the NFA. e.g., for\n/// an NFA simulation or for a lazy DFA.\n///\n/// NFA shrinking is currently most useful when compiling a reverse\n/// NFA with large Unicode character classes. In particular, it trades\n/// additional CPU time during NFA compilation in favor of generating fewer\n/// NFA states.\n///\n/// This is disabled by default because it can increase compile times\n/// quite a bit if you aren't building a full DFA.\n///\n/// # Example\n///\n/// This example shows that NFA shrinking can lead to substantial space\n/// savings in some cases. Notice that, as noted above, we build a reverse\n/// DFA and use a pattern with a large Unicode character class.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::{NFA, WhichCaptures};\n///\n/// // Currently we have to disable captures when enabling reverse NFA.\n/// let config = NFA::config()\n///     .which_captures(WhichCaptures::None)\n///     .reverse(true);\n/// let not_shrunk = NFA::compiler()\n///     .configure(config.clone().shrink(false))\n///     .build(r\"\\w\")?;\n/// let shrunk = NFA::compiler()\n///     .configure(config.clone().shrink(true))\n///     .build(r\"\\w\")?;\n///\n/// // While a specific shrink factor is not guaranteed, the savings can be\n/// // considerable in some cases.\n/// assert!(shrunk.states().len() * 2 < not_shrunk.states().len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n302 pub fn shrink(mut self, yes: bool) -> Config {\n303     self.shrink = Some(yes);\n304     self\n305 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}