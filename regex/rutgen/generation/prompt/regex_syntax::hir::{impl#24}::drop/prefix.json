{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/mod.rs\n// crate name is regex_syntax\nuse core::{char, cmp};\nuse alloc::{\n    boxed::Box, format, string::{String, ToString},\n    vec, vec::Vec,\n};\nuse crate::{\n    ast::Span, hir::interval::{Interval, IntervalSet, IntervalSetIter},\n    unicode,\n};\npub use crate::{\n    hir::visitor::{visit, Visitor},\n    unicode::CaseFoldError,\n};\n#[derive(Clone, Eq, PartialEq)]\npub struct Hir {\n    /// The underlying HIR kind.\n    kind: HirKind,\n    /// Analysis info about this HIR, computed during construction.\n    props: Properties,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Capture {\n    /// The capture index of the capture.\n    pub index: u32,\n    /// The name of the capture, if it exists.\n    pub name: Option<Box<str>>,\n    /// The expression inside the capturing group, which may be empty.\n    pub sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Repetition {\n    /// The minimum range of the repetition.\n    ///\n    /// Note that special cases like `?`, `+` and `*` all get translated into\n    /// the ranges `{0,1}`, `{1,}` and `{0,}`, respectively.\n    ///\n    /// When `min` is zero, this expression can match the empty string\n    /// regardless of what its sub-expression is.\n    pub min: u32,\n    /// The maximum range of the repetition.\n    ///\n    /// Note that when `max` is `None`, `min` acts as a lower bound but where\n    /// there is no upper bound. For something like `x{5}` where the min and\n    /// max are equivalent, `min` will be set to `5` and `max` will be set to\n    /// `Some(5)`.\n    pub max: Option<u32>,\n    /// Whether this repetition operator is greedy or not. A greedy operator\n    /// will match as much as it can. A non-greedy operator will match as\n    /// little as it can.\n    ///\n    /// Typically, operators are greedy by default and are only non-greedy when\n    /// a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is\n    /// not. However, this can be inverted via the `U` \"ungreedy\" flag.\n    pub greedy: bool,\n    /// The expression being repeated.\n    pub sub: Box<Hir>,\n}\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Properties(Box<PropertiesI>);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub enum HirKind {\n    /// The empty regular expression, which matches everything, including the\n    /// empty string.\n    Empty,\n    /// A literalstring that matches exactly these bytes.\n    Literal(Literal),\n    /// A single character class that matches any of the characters in the\n    /// class. A class can either consist of Unicode scalar values as\n    /// characters, or it can use bytes.\n    ///\n    /// A class may be empty. In which case, it matches nothing.\n    Class(Class),\n    /// A look-around assertion. A look-around match always has zero length.\n    Look(Look),\n    /// A repetition operation applied to a sub-expression.\n    Repetition(Repetition),\n    /// A capturing group, which contains a sub-expression.\n    Capture(Capture),\n    /// A concatenation of expressions.\n    ///\n    /// A concatenation matches only if each of its sub-expressions match one\n    /// after the other.\n    ///\n    /// Concatenations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Concat(Vec<Hir>),\n    /// An alternation of expressions.\n    ///\n    /// An alternation matches only if at least one of its sub-expressions\n    /// match. If multiple sub-expressions match, then the leftmost is\n    /// preferred.\n    ///\n    /// Alternations are guaranteed by `Hir`'s smart constructors to always\n    /// have at least two sub-expressions.\n    Alternation(Vec<Hir>),\n}\nimpl Drop for Hir {\n    fn drop(&mut self) {\n        use core::mem;\n        match *self.kind() {\n            HirKind::Empty\n            | HirKind::Literal(_)\n            | HirKind::Class(_)\n            | HirKind::Look(_) => return,\n            HirKind::Capture(ref x) if x.sub.kind.subs().is_empty() => return,\n            HirKind::Repetition(ref x) if x.sub.kind.subs().is_empty() => return,\n            HirKind::Concat(ref x) if x.is_empty() => return,\n            HirKind::Alternation(ref x) if x.is_empty() => return,\n            _ => {}\n        }\n        let mut stack = vec![mem::replace(self, Hir::empty())];\n        while let Some(mut expr) = stack.pop() {\n            match expr.kind {\n                HirKind::Empty\n                | HirKind::Literal(_)\n                | HirKind::Class(_)\n                | HirKind::Look(_) => {}\n                HirKind::Capture(ref mut x) => {\n                    stack.push(mem::replace(&mut x.sub, Hir::empty()));\n                }\n                HirKind::Repetition(ref mut x) => {\n                    stack.push(mem::replace(&mut x.sub, Hir::empty()));\n                }\n                HirKind::Concat(ref mut x) => {\n                    stack.extend(x.drain(..));\n                }\n                HirKind::Alternation(ref mut x) => {\n                    stack.extend(x.drain(..));\n                }\n            }\n        }\n    }\n}\nimpl HirKind {\n    pub fn subs(&self) -> &[Hir] {\n        use core::slice::from_ref;\n        match *self {\n            HirKind::Empty\n            | HirKind::Literal(_)\n            | HirKind::Class(_)\n            | HirKind::Look(_) => &[],\n            HirKind::Repetition(Repetition { ref sub, .. }) => from_ref(sub),\n            HirKind::Capture(Capture { ref sub, .. }) => from_ref(sub),\n            HirKind::Concat(ref subs) => subs,\n            HirKind::Alternation(ref subs) => subs,\n        }\n    }\n}\nimpl Hir {\n    pub fn kind(&self) -> &HirKind {\n        &self.kind\n    }\n    pub fn into_kind(mut self) -> HirKind {}\n    pub fn properties(&self) -> &Properties {}\n    fn into_parts(mut self) -> (HirKind, Properties) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1914 fn drop(&mut self) {\n1915     use core::mem;\n1916 \n1917     match *self.kind() {\n1918         HirKind::Empty\n1919         | HirKind::Literal(_)\n1920         | HirKind::Class(_)\n1921         | HirKind::Look(_) => return,\n1922         HirKind::Capture(ref x) if x.sub.kind.subs().is_empty() => return,\n1923         HirKind::Repetition(ref x) if x.sub.kind.subs().is_empty() => {\n1924             return\n1925         }\n1926         HirKind::Concat(ref x) if x.is_empty() => return,\n1927         HirKind::Alternation(ref x) if x.is_empty() => return,\n1928         _ => {}\n1929     }\n1930 \n1931     let mut stack = vec![mem::replace(self, Hir::empty())];\n1932     while let Some(mut expr) = stack.pop() {\n1933         match expr.kind {\n1934             HirKind::Empty\n1935             | HirKind::Literal(_)\n1936             | HirKind::Class(_)\n1937             | HirKind::Look(_) => {}\n1938             HirKind::Capture(ref mut x) => {\n1939                 stack.push(mem::replace(&mut x.sub, Hir::empty()));\n1940             }\n1941             HirKind::Repetition(ref mut x) => {\n1942                 stack.push(mem::replace(&mut x.sub, Hir::empty()));\n1943             }\n1944             HirKind::Concat(ref mut x) => {\n1945                 stack.extend(x.drain(..));\n1946             }\n1947             HirKind::Alternation(ref mut x) => {\n1948                 stack.extend(x.drain(..));\n1949             }\n1950         }\n1951     }\n1952 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}