{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\nuse core::{\n    cell::UnsafeCell, panic::{RefUnwindSafe, UnwindSafe},\n    sync::atomic::{AtomicBool, Ordering},\n};\nuse alloc::{boxed::Box, vec, vec::Vec};\npub(super) struct PoolGuard<'a, T: Send, F: Fn() -> T> {\n    /// The pool that this guard is attached to.\n    pool: &'a Pool<T, F>,\n    /// This is None after the guard has been put back into the pool.\n    value: Option<Box<T>>,\n}\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\npub struct Pool<T, F = fn() -> T>(alloc::boxed::Box<inner::Pool<T, F>>);\nimpl<'a, T: Send, F: Fn() -> T> PoolGuard<'a, T, F> {\n    #[inline]\n    pub(super) fn value(&self) -> &T {}\n    #[inline]\n    pub(super) fn value_mut(&mut self) -> &mut T {\n        self.value.as_deref_mut().unwrap()\n    }\n    #[inline]\n    pub(super) fn put(this: PoolGuard<'_, T, F>) {}\n    #[inline(always)]\n    fn put_imp(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the underlying value as a mutable borrow.\n704 pub(super) fn value_mut(&mut self) -> &mut T {\n705     match self.value {\n706         Ok(ref mut v) => &mut **v,\n707         // SAFETY: This is safe because the only way a PoolGuard gets\n708         // created for self.value=None is when the current thread\n709         // corresponds to the owning thread, of which there can only\n710         // be one. Thus, we are guaranteed to be providing exclusive\n711         // access here which makes this safe.\n712         //\n713         // Also, since 'owner_val' is guaranteed to be initialized\n714         // before an owned PoolGuard is created, the unwrap_unchecked\n715         // is safe.\n716         Err(id) => unsafe {\n717             // This assert is *not* necessary for safety, since we\n718             // should never be here if the guard had been put back into\n719             // the pool. This is a sanity check to make sure we didn't\n720             // break an internal invariant.\n721             debug_assert_ne!(THREAD_ID_DROPPED, id);\n722             (*self.pool.owner_val.get()).as_mut().unwrap_unchecked()\n723         },\n724     }\n725 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}