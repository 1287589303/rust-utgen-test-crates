{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nfn ages(canonical_age: &str) -> Result<impl Iterator<Item = Range>, Error> {\n    #[cfg(not(feature = \"unicode-age\"))]\n    fn imp(_: &str) -> Result<impl Iterator<Item = Range>, Error> {\n        use core::option::IntoIter;\n        Err::<IntoIter<Range>, _>(Error::PropertyNotFound)\n    }\n    #[cfg(feature = \"unicode-age\")]\n    fn imp(canonical_age: &str) -> Result<impl Iterator<Item = Range>, Error> {\n        use crate::unicode_tables::age;\n        const AGES: &[(&str, Range)] = &[\n            (\"V1_1\", age::V1_1),\n            (\"V2_0\", age::V2_0),\n            (\"V2_1\", age::V2_1),\n            (\"V3_0\", age::V3_0),\n            (\"V3_1\", age::V3_1),\n            (\"V3_2\", age::V3_2),\n            (\"V4_0\", age::V4_0),\n            (\"V4_1\", age::V4_1),\n            (\"V5_0\", age::V5_0),\n            (\"V5_1\", age::V5_1),\n            (\"V5_2\", age::V5_2),\n            (\"V6_0\", age::V6_0),\n            (\"V6_1\", age::V6_1),\n            (\"V6_2\", age::V6_2),\n            (\"V6_3\", age::V6_3),\n            (\"V7_0\", age::V7_0),\n            (\"V8_0\", age::V8_0),\n            (\"V9_0\", age::V9_0),\n            (\"V10_0\", age::V10_0),\n            (\"V11_0\", age::V11_0),\n            (\"V12_0\", age::V12_0),\n            (\"V12_1\", age::V12_1),\n            (\"V13_0\", age::V13_0),\n            (\"V14_0\", age::V14_0),\n            (\"V15_0\", age::V15_0),\n            (\"V15_1\", age::V15_1),\n            (\"V16_0\", age::V16_0),\n        ];\n        assert_eq!(AGES.len(), age::BY_NAME.len(), \"ages are out of sync\");\n        let pos = AGES.iter().position(|&(age, _)| canonical_age == age);\n        match pos {\n            None => Err(Error::PropertyValueNotFound),\n            Some(i) => Ok(AGES[..=i].iter().map(|&(_, classes)| classes)),\n        }\n    }\n    imp(canonical_age)\n}\n#[cfg(feature = \"unicode-age\")]\nfn imp(canonical_age: &str) -> Result<impl Iterator<Item = Range>, Error> {\n    use crate::unicode_tables::age;\n    const AGES: &[(&str, Range)] = &[\n        (\"V1_1\", age::V1_1),\n        (\"V2_0\", age::V2_0),\n        (\"V2_1\", age::V2_1),\n        (\"V3_0\", age::V3_0),\n        (\"V3_1\", age::V3_1),\n        (\"V3_2\", age::V3_2),\n        (\"V4_0\", age::V4_0),\n        (\"V4_1\", age::V4_1),\n        (\"V5_0\", age::V5_0),\n        (\"V5_1\", age::V5_1),\n        (\"V5_2\", age::V5_2),\n        (\"V6_0\", age::V6_0),\n        (\"V6_1\", age::V6_1),\n        (\"V6_2\", age::V6_2),\n        (\"V6_3\", age::V6_3),\n        (\"V7_0\", age::V7_0),\n        (\"V8_0\", age::V8_0),\n        (\"V9_0\", age::V9_0),\n        (\"V10_0\", age::V10_0),\n        (\"V11_0\", age::V11_0),\n        (\"V12_0\", age::V12_0),\n        (\"V12_1\", age::V12_1),\n        (\"V13_0\", age::V13_0),\n        (\"V14_0\", age::V14_0),\n        (\"V15_0\", age::V15_0),\n        (\"V15_1\", age::V15_1),\n        (\"V16_0\", age::V16_0),\n    ];\n    assert_eq!(AGES.len(), age::BY_NAME.len(), \"ages are out of sync\");\n    let pos = AGES.iter().position(|&(age, _)| canonical_age == age);\n    match pos {\n        None => Err(Error::PropertyValueNotFound),\n        Some(i) => Ok(AGES[..=i].iter().map(|&(_, classes)| classes)),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator over Unicode Age sets. Each item corresponds to a set\n/// of codepoints that were added in a particular revision of Unicode. The\n/// iterator yields items in chronological order.\n///\n/// If the given age value isn't valid or if the data isn't available, then an\n/// error is returned instead.\n641 fn ages(canonical_age: &str) -> Result<impl Iterator<Item = Range>, Error> {\n642     #[cfg(not(feature = \"unicode-age\"))]\n643     fn imp(_: &str) -> Result<impl Iterator<Item = Range>, Error> {\n644         use core::option::IntoIter;\n645         Err::<IntoIter<Range>, _>(Error::PropertyNotFound)\n646     }\n647 \n648     #[cfg(feature = \"unicode-age\")]\n649     fn imp(canonical_age: &str) -> Result<impl Iterator<Item = Range>, Error> {\n650         use crate::unicode_tables::age;\n651 \n652         const AGES: &[(&str, Range)] = &[\n653             (\"V1_1\", age::V1_1),\n654             (\"V2_0\", age::V2_0),\n655             (\"V2_1\", age::V2_1),\n656             (\"V3_0\", age::V3_0),\n657             (\"V3_1\", age::V3_1),\n658             (\"V3_2\", age::V3_2),\n659             (\"V4_0\", age::V4_0),\n660             (\"V4_1\", age::V4_1),\n661             (\"V5_0\", age::V5_0),\n662             (\"V5_1\", age::V5_1),\n663             (\"V5_2\", age::V5_2),\n664             (\"V6_0\", age::V6_0),\n665             (\"V6_1\", age::V6_1),\n666             (\"V6_2\", age::V6_2),\n667             (\"V6_3\", age::V6_3),\n668             (\"V7_0\", age::V7_0),\n669             (\"V8_0\", age::V8_0),\n670             (\"V9_0\", age::V9_0),\n671             (\"V10_0\", age::V10_0),\n672             (\"V11_0\", age::V11_0),\n673             (\"V12_0\", age::V12_0),\n674             (\"V12_1\", age::V12_1),\n675             (\"V13_0\", age::V13_0),\n676             (\"V14_0\", age::V14_0),\n677             (\"V15_0\", age::V15_0),\n678             (\"V15_1\", age::V15_1),\n679             (\"V16_0\", age::V16_0),\n680         ];\n681         assert_eq!(AGES.len(), age::BY_NAME.len(), \"ages are out of sync\");\n682 \n683         let pos = AGES.iter().position(|&(age, _)| canonical_age == age);\n684         match pos {\n685             None => Err(Error::PropertyValueNotFound),\n686             Some(i) => Ok(AGES[..=i].iter().map(|&(_, classes)| classes)),\n687         }\n688     }\n689 \n690     imp(canonical_age)\n691 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}