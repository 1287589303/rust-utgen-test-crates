{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/unicode.rs\n// crate name is regex_syntax\ntype Range = &'static [(char, char)];\ntype PropertyValues = &'static [(&'static str, &'static str)];\nuse alloc::{\n    string::{String, ToString},\n    vec::Vec,\n};\nuse crate::hir;\n#[derive(Debug)]\npub enum ClassQuery<'a> {\n    /// Return a class corresponding to a Unicode binary property, named by\n    /// a single letter.\n    OneLetter(char),\n    /// Return a class corresponding to a Unicode binary property.\n    ///\n    /// Note that, by special exception (see UTS#18, Section 1.2), both\n    /// general category values and script values are permitted here as if\n    /// they were a binary property.\n    Binary(&'a str),\n    /// Return a class corresponding to all codepoints whose property\n    /// (identified by `property_name`) corresponds to the given value\n    /// (identified by `property_value`).\n    ByValue {\n        /// A property name.\n        property_name: &'a str,\n        /// A property value.\n        property_value: &'a str,\n    },\n}\n#[derive(Debug, Eq, PartialEq)]\nenum CanonicalClassQuery {\n    /// The canonical binary property name.\n    Binary(&'static str),\n    /// The canonical general category name.\n    GeneralCategory(&'static str),\n    /// The canonical script name.\n    Script(&'static str),\n    /// An arbitrary association between property and value, both of which\n    /// have been canonicalized.\n    ///\n    /// Note that by construction, the property name of ByValue will never\n    /// be General_Category or Script. Those two cases are subsumed by the\n    /// eponymous variants.\n    ByValue {\n        /// The canonical property name.\n        property_name: &'static str,\n        /// The canonical property value.\n        property_value: &'static str,\n    },\n}\n#[derive(Debug)]\npub enum Error {\n    PropertyNotFound,\n    PropertyValueNotFound,\n    #[allow(dead_code)]\n    PerlClassNotFound,\n}\nimpl<'a> ClassQuery<'a> {\n    fn canonicalize(&self) -> Result<CanonicalClassQuery, Error> {}\n    fn canonical_binary(&self, name: &str) -> Result<CanonicalClassQuery, Error> {\n        let norm = symbolic_name_normalize(name);\n        if norm != \"cf\" && norm != \"sc\" && norm != \"lc\" {\n            if let Some(canon) = canonical_prop(&norm)? {\n                return Ok(CanonicalClassQuery::Binary(canon));\n            }\n        }\n        if let Some(canon) = canonical_gencat(&norm)? {\n            return Ok(CanonicalClassQuery::GeneralCategory(canon));\n        }\n        if let Some(canon) = canonical_script(&norm)? {\n            return Ok(CanonicalClassQuery::Script(canon));\n        }\n        Err(Error::PropertyNotFound)\n    }\n}\nfn symbolic_name_normalize(x: &str) -> String {\n    let mut tmp = x.as_bytes().to_vec();\n    let len = symbolic_name_normalize_bytes(&mut tmp).len();\n    tmp.truncate(len);\n    String::from_utf8(tmp).unwrap()\n}\nfn canonical_prop(normalized_name: &str) -> Result<Option<&'static str>, Error> {\n    #[cfg(\n        not(\n            any(\n                feature = \"unicode-age\",\n                feature = \"unicode-bool\",\n                feature = \"unicode-gencat\",\n                feature = \"unicode-perl\",\n                feature = \"unicode-script\",\n                feature = \"unicode-segment\",\n            )\n        )\n    )]\n    fn imp(_: &str) -> Result<Option<&'static str>, Error> {\n        Err(Error::PropertyNotFound)\n    }\n    #[cfg(\n        any(\n            feature = \"unicode-age\",\n            feature = \"unicode-bool\",\n            feature = \"unicode-gencat\",\n            feature = \"unicode-perl\",\n            feature = \"unicode-script\",\n            feature = \"unicode-segment\",\n        )\n    )]\n    fn imp(name: &str) -> Result<Option<&'static str>, Error> {\n        use crate::unicode_tables::property_names::PROPERTY_NAMES;\n        Ok(\n            PROPERTY_NAMES\n                .binary_search_by_key(&name, |&(n, _)| n)\n                .ok()\n                .map(|i| PROPERTY_NAMES[i].1),\n        )\n    }\n    imp(normalized_name)\n}\nfn canonical_script(normalized_value: &str) -> Result<Option<&'static str>, Error> {\n    let scripts = property_values(\"Script\")?.unwrap();\n    Ok(canonical_value(scripts, normalized_value))\n}\nfn canonical_gencat(normalized_value: &str) -> Result<Option<&'static str>, Error> {\n    Ok(\n        match normalized_value {\n            \"any\" => Some(\"Any\"),\n            \"assigned\" => Some(\"Assigned\"),\n            \"ascii\" => Some(\"ASCII\"),\n            _ => {\n                let gencats = property_values(\"General_Category\")?.unwrap();\n                canonical_value(gencats, normalized_value)\n            }\n        },\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n287 fn canonical_binary(\n288     &self,\n289     name: &str,\n290 ) -> Result<CanonicalClassQuery, Error> {\n291     let norm = symbolic_name_normalize(name);\n292 \n293     // This is a special case where 'cf' refers to the 'Format' general\n294     // category, but where the 'cf' abbreviation is also an abbreviation\n295     // for the 'Case_Folding' property. But we want to treat it as\n296     // a general category. (Currently, we don't even support the\n297     // 'Case_Folding' property. But if we do in the future, users will be\n298     // required to spell it out.)\n299     //\n300     // Also 'sc' refers to the 'Currency_Symbol' general category, but is\n301     // also the abbreviation for the 'Script' property. So we avoid calling\n302     // 'canonical_prop' for it too, which would erroneously normalize it\n303     // to 'Script'.\n304     //\n305     // Another case: 'lc' is an abbreviation for the 'Cased_Letter'\n306     // general category, but is also an abbreviation for the 'Lowercase_Mapping'\n307     // property. We don't currently support the latter, so as with 'cf'\n308     // above, we treat 'lc' as 'Cased_Letter'.\n309     if norm != \"cf\" && norm != \"sc\" && norm != \"lc\" {\n310         if let Some(canon) = canonical_prop(&norm)? {\n311             return Ok(CanonicalClassQuery::Binary(canon));\n312         }\n313     }\n314     if let Some(canon) = canonical_gencat(&norm)? {\n315         return Ok(CanonicalClassQuery::GeneralCategory(canon));\n316     }\n317     if let Some(canon) = canonical_script(&norm)? {\n318         return Ok(CanonicalClassQuery::Script(canon));\n319     }\n320     Err(Error::PropertyNotFound)\n321 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}