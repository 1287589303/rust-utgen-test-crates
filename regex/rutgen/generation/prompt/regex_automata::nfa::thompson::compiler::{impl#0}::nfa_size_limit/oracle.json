{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/nfa/thompson/compiler.rs\n// crate name is regex_automata\nuse core::{borrow::Borrow, cell::RefCell};\nuse alloc::{sync::Arc, vec, vec::Vec};\nuse regex_syntax::{\n    hir::{self, Hir},\n    utf8::{Utf8Range, Utf8Sequences},\n    ParserBuilder,\n};\nuse crate::{\n    nfa::thompson::{\n        builder::Builder, error::BuildError, literal_trie::LiteralTrie,\n        map::{Utf8BoundedMap, Utf8SuffixKey, Utf8SuffixMap},\n        nfa::{Transition, NFA},\n        range_trie::RangeTrie,\n    },\n    util::{\n        look::{Look, LookMatcher},\n        primitives::{PatternID, StateID},\n    },\n};\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    utf8: Option<bool>,\n    reverse: Option<bool>,\n    nfa_size_limit: Option<Option<usize>>,\n    shrink: Option<bool>,\n    which_captures: Option<WhichCaptures>,\n    look_matcher: Option<LookMatcher>,\n    #[cfg(test)]\n    unanchored_prefix: Option<bool>,\n}\n#[derive(Clone, Debug)]\npub struct LookMatcher {\n    lineterm: DebugByte,\n}\n#[derive(Clone, Copy, Debug)]\npub enum WhichCaptures {\n    /// All capture states, including those corresponding to both implicit and\n    /// explicit capture groups, are included in the Thompson NFA.\n    All,\n    /// Only capture states corresponding to implicit capture groups are\n    /// included. Implicit capture groups appear in every pattern implicitly\n    /// and correspond to the overall match of a pattern.\n    ///\n    /// This is useful when one only cares about the overall match of a\n    /// pattern. By excluding capture states from explicit capture groups,\n    /// one might be able to reduce the memory usage of a multi-pattern regex\n    /// substantially if it was otherwise written to have many explicit capture\n    /// groups.\n    Implicit,\n    /// No capture states are compiled into the Thompson NFA.\n    ///\n    /// This is useful when capture states are either not needed (for example,\n    /// if one is only trying to build a DFA) or if they aren't supported (for\n    /// example, a reverse NFA).\n    None,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn reverse(mut self, yes: bool) -> Config {}\n    pub fn nfa_size_limit(mut self, bytes: Option<usize>) -> Config {\n        self.nfa_size_limit = Some(bytes);\n        self\n    }\n    pub fn shrink(mut self, yes: bool) -> Config {}\n    #[deprecated(since = \"0.3.5\", note = \"use which_captures instead\")]\n    pub fn captures(self, yes: bool) -> Config {}\n    pub fn which_captures(mut self, which_captures: WhichCaptures) -> Config {}\n    pub fn look_matcher(mut self, m: LookMatcher) -> Config {}\n    #[cfg(test)]\n    fn unanchored_prefix(mut self, yes: bool) -> Config {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn get_reverse(&self) -> bool {}\n    pub fn get_nfa_size_limit(&self) -> Option<usize> {}\n    pub fn get_shrink(&self) -> bool {}\n    #[deprecated(since = \"0.3.5\", note = \"use get_which_captures instead\")]\n    pub fn get_captures(&self) -> bool {}\n    pub fn get_which_captures(&self) -> WhichCaptures {}\n    pub fn get_look_matcher(&self) -> LookMatcher {}\n    fn get_unanchored_prefix(&self) -> bool {}\n    pub(crate) fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets an approximate size limit on the total heap used by the NFA being\n/// compiled.\n///\n/// This permits imposing constraints on the size of a compiled NFA. This\n/// may be useful in contexts where the regex pattern is untrusted and one\n/// wants to avoid using too much memory.\n///\n/// This size limit does not apply to auxiliary heap used during\n/// compilation that is not part of the built NFA.\n///\n/// Note that this size limit is applied during compilation in order for\n/// the limit to prevent too much heap from being used. However, the\n/// implementation may use an intermediate NFA representation that is\n/// otherwise slightly bigger than the final public form. Since the size\n/// limit may be applied to an intermediate representation, there is not\n/// necessarily a precise correspondence between the configured size limit\n/// and the heap usage of the final NFA.\n///\n/// There is no size limit by default.\n///\n/// # Example\n///\n/// This example demonstrates how Unicode mode can greatly increase the\n/// size of the NFA.\n///\n/// ```\n/// # if cfg!(miri) { return Ok(()); } // miri takes too long\n/// use regex_automata::nfa::thompson::NFA;\n///\n/// // 400KB isn't enough!\n/// NFA::compiler()\n///     .configure(NFA::config().nfa_size_limit(Some(400_000)))\n///     .build(r\"\\w{20}\")\n///     .unwrap_err();\n///\n/// // ... but 500KB probably is.\n/// let nfa = NFA::compiler()\n///     .configure(NFA::config().nfa_size_limit(Some(500_000)))\n///     .build(r\"\\w{20}\")?;\n///\n/// assert_eq!(nfa.pattern_len(), 1);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n248 pub fn nfa_size_limit(mut self, bytes: Option<usize>) -> Config {\n249     self.nfa_size_limit = Some(bytes);\n250     self\n251 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}