{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/string.rs\n// crate name is regex_lite\nuse alloc::{\n    borrow::Cow, boxed::Box, string::String, string::ToString, sync::Arc, vec, vec::Vec,\n};\nuse crate::{\n    error::Error, hir::{self, Hir},\n    int::NonMaxUsize, interpolate, nfa::{self, NFA},\n    pikevm::{self, Cache, PikeVM},\n    pool::CachePool,\n};\n#[derive(Clone, Debug)]\npub struct CaptureLocations(Vec<Option<NonMaxUsize>>);\n#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub(crate) struct NonMaxUsize(NonZeroUsize);\nimpl CaptureLocations {\n    #[inline]\n    pub fn get(&self, i: usize) -> Option<(usize, usize)> {\n        let slot = i.checked_mul(2)?;\n        let start = self.0.get(slot).copied()??.get();\n        let slot = slot.checked_add(1)?;\n        let end = self.0.get(slot).copied()??.get();\n        Some((start, end))\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\nimpl NonMaxUsize {\n    pub(crate) fn new(value: usize) -> Option<NonMaxUsize> {}\n    pub(crate) fn get(self) -> usize {\n        self.0.get().wrapping_sub(1)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the start and end byte offsets of the capture group at index\n/// `i`. This returns `None` if `i` is not a valid capture group or if the\n/// capture group did not match.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// re.captures_read(&mut locs, \"Bruce Springsteen\").unwrap();\n/// assert_eq!(Some((0, 17)), locs.get(0));\n/// assert_eq!(Some((0, 5)), locs.get(1));\n/// assert_eq!(Some((6, 17)), locs.get(2));\n/// ```\n2105 pub fn get(&self, i: usize) -> Option<(usize, usize)> {\n2106     let slot = i.checked_mul(2)?;\n2107     let start = self.0.get(slot).copied()??.get();\n2108     let slot = slot.checked_add(1)?;\n2109     let end = self.0.get(slot).copied()??.get();\n2110     Some((start, end))\n2111 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}