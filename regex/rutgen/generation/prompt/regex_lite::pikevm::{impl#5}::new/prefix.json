{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-lite/src/pikevm.rs\n// crate name is regex_lite\nuse alloc::{vec, vec::Vec};\nuse crate::{\n    int::{NonMaxUsize, U32},\n    nfa::{State, StateID, NFA},\n    pool::CachePoolGuard, utf8,\n};\n#[derive(Clone, Debug)]\nstruct ActiveStates {\n    /// The set of active NFA states. This set preserves insertion order, which\n    /// is critical for simulating the match semantics of backtracking regex\n    /// engines.\n    set: SparseSet,\n    /// The slots for every NFA state, where each slot stores a (possibly\n    /// absent) offset. Every capturing group has two slots. One for a start\n    /// offset and one for an end offset.\n    slot_table: SlotTable,\n}\n#[derive(Clone, Debug)]\nstruct SlotTable {\n    /// The actual table of offsets.\n    table: Vec<Option<NonMaxUsize>>,\n    /// The number of slots per state, i.e., the table's stride or the length\n    /// of each row.\n    slots_per_state: usize,\n    /// The number of slots in the caller-provided `Captures` value for the\n    /// current search. Setting this to `slots_per_state` is always correct,\n    /// but may be wasteful.\n    slots_for_captures: usize,\n}\n#[derive(Clone)]\nstruct SparseSet {\n    /// The number of elements currently in this set.\n    len: usize,\n    /// Dense contains the ids in the order in which they were inserted.\n    dense: Vec<StateID>,\n    /// Sparse maps ids to their location in dense.\n    ///\n    /// A state ID is in the set if and only if\n    /// sparse[id] < len && id == dense[sparse[id]].\n    ///\n    /// Note that these are indices into 'dense'. It's a little weird to use\n    /// StateID here, but we know our length can never exceed the bounds of\n    /// StateID (enforced by 'resize') and StateID will be at most 4 bytes\n    /// where as a usize is likely double that in most cases.\n    sparse: Vec<StateID>,\n}\n#[derive(Clone, Debug)]\npub(crate) struct PikeVM {\n    nfa: NFA,\n}\nimpl ActiveStates {\n    fn new(re: &PikeVM) -> ActiveStates {\n        let mut active = ActiveStates {\n            set: SparseSet::new(0),\n            slot_table: SlotTable::new(),\n        };\n        active.reset(re);\n        active\n    }\n    fn reset(&mut self, re: &PikeVM) {\n        self.set.resize(re.nfa().len());\n        self.slot_table.reset(re);\n    }\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n}\nimpl SlotTable {\n    fn new() -> SlotTable {\n        SlotTable {\n            table: vec![],\n            slots_for_captures: 0,\n            slots_per_state: 0,\n        }\n    }\n    fn reset(&mut self, re: &PikeVM) {}\n    fn setup_search(&mut self, captures_slot_len: usize) {}\n    fn for_state(&mut self, sid: StateID) -> &mut [Option<NonMaxUsize>] {}\n    fn all_absent(&mut self) -> &mut [Option<NonMaxUsize>] {}\n}\nimpl SparseSet {\n    fn new(capacity: usize) -> SparseSet {\n        let mut set = SparseSet {\n            len: 0,\n            dense: vec![],\n            sparse: vec![],\n        };\n        set.resize(capacity);\n        set\n    }\n    fn resize(&mut self, new_capacity: usize) {}\n    fn capacity(&self) -> usize {}\n    fn len(&self) -> usize {}\n    fn is_empty(&self) -> bool {}\n    fn insert(&mut self, id: StateID) -> bool {}\n    fn contains(&self, id: StateID) -> bool {}\n    fn clear(&mut self) {}\n    fn iter(&self) -> SparseSetIter<'_> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new set of active states for the given PikeVM. The active\n/// states returned may only be used with the given PikeVM. (Use 'reset'\n/// to re-purpose the allocation for a different PikeVM.)\n621 fn new(re: &PikeVM) -> ActiveStates {\n622     let mut active = ActiveStates {\n623         set: SparseSet::new(0),\n624         slot_table: SlotTable::new(),\n625     };\n626     active.reset(re);\n627     active\n628 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}