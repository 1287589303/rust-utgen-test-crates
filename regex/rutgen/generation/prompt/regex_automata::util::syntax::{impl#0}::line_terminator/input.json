{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/syntax.rs\n// crate name is regex_automata\nuse alloc::{vec, vec::Vec};\nuse regex_syntax::{\n    ast, hir::{self, Hir},\n    Error, ParserBuilder,\n};\n#[derive(Clone, Copy, Debug)]\npub struct Config {\n    case_insensitive: bool,\n    multi_line: bool,\n    dot_matches_new_line: bool,\n    crlf: bool,\n    line_terminator: u8,\n    swap_greed: bool,\n    ignore_whitespace: bool,\n    unicode: bool,\n    utf8: bool,\n    nest_limit: u32,\n    octal: bool,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn case_insensitive(mut self, yes: bool) -> Config {}\n    pub fn multi_line(mut self, yes: bool) -> Config {}\n    pub fn dot_matches_new_line(mut self, yes: bool) -> Config {}\n    pub fn crlf(mut self, yes: bool) -> Config {}\n    pub fn line_terminator(mut self, byte: u8) -> Config {\n        self.line_terminator = byte;\n        self\n    }\n    pub fn swap_greed(mut self, yes: bool) -> Config {}\n    pub fn ignore_whitespace(mut self, yes: bool) -> Config {}\n    pub fn unicode(mut self, yes: bool) -> Config {}\n    pub fn utf8(mut self, yes: bool) -> Config {}\n    pub fn nest_limit(mut self, limit: u32) -> Config {}\n    pub fn octal(mut self, yes: bool) -> Config {}\n    pub fn get_unicode(&self) -> bool {}\n    pub fn get_case_insensitive(&self) -> bool {}\n    pub fn get_multi_line(&self) -> bool {}\n    pub fn get_dot_matches_new_line(&self) -> bool {}\n    pub fn get_crlf(&self) -> bool {}\n    pub fn get_line_terminator(&self) -> u8 {}\n    pub fn get_swap_greed(&self) -> bool {}\n    pub fn get_ignore_whitespace(&self) -> bool {}\n    pub fn get_utf8(&self) -> bool {}\n    pub fn get_nest_limit(&self) -> u32 {}\n    pub fn get_octal(&self) -> bool {}\n    pub(crate) fn apply(&self, builder: &mut ParserBuilder) {}\n    pub(crate) fn apply_ast(&self, builder: &mut ast::parse::ParserBuilder) {}\n    pub(crate) fn apply_hir(&self, builder: &mut hir::translate::TranslatorBuilder) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the line terminator for use with `(?u-s:.)` and `(?-us:.)`.\n///\n/// Namely, instead of `.` (by default) matching everything except for `\\n`,\n/// this will cause `.` to match everything except for the byte given.\n///\n/// If `.` is used in a context where Unicode mode is enabled and this byte\n/// isn't ASCII, then an error will be returned. When Unicode mode is\n/// disabled, then any byte is permitted, but will return an error if UTF-8\n/// mode is enabled and it is a non-ASCII byte.\n///\n/// In short, any ASCII value for a line terminator is always okay. But a\n/// non-ASCII byte might result in an error depending on whether Unicode\n/// mode or UTF-8 mode are enabled.\n///\n/// Note that if `R` mode is enabled then it always takes precedence and\n/// the line terminator will be treated as `\\r` and `\\n` simultaneously.\n///\n/// Note also that this *doesn't* impact the look-around assertions\n/// `(?m:^)` and `(?m:$)`. That's usually controlled by additional\n/// configuration in the regex engine itself.\n264 pub fn line_terminator(mut self, byte: u8) -> Config {\n265     self.line_terminator = byte;\n266     self\n267 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}