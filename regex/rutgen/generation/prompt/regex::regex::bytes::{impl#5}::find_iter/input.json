{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/regex/bytes.rs\n// crate name is regex\npub type Locations = CaptureLocations;\nuse alloc::{borrow::Cow, string::String, sync::Arc, vec::Vec};\nuse regex_automata::{meta, util::captures, Input, PatternID};\nuse crate::{bytes::RegexBuilder, error::Error};\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Clone)]\npub struct Regex {\n    pub(crate) meta: meta::Regex,\n    pub(crate) pattern: Arc<str>,\n}\n#[derive(Debug)]\npub struct Matches<'r, 'h> {\n    haystack: &'h [u8],\n    it: meta::FindMatches<'r, 'h>,\n}\nimpl Regex {\n    pub fn new(re: &str) -> Result<Regex, Error> {}\n    #[inline]\n    pub fn is_match(&self, haystack: &[u8]) -> bool {}\n    #[inline]\n    pub fn find<'h>(&self, haystack: &'h [u8]) -> Option<Match<'h>> {}\n    #[inline]\n    pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {\n        Matches {\n            haystack,\n            it: self.meta.find_iter(haystack),\n        }\n    }\n    #[inline]\n    pub fn captures<'h>(&self, haystack: &'h [u8]) -> Option<Captures<'h>> {}\n    #[inline]\n    pub fn captures_iter<'r, 'h>(\n        &'r self,\n        haystack: &'h [u8],\n    ) -> CaptureMatches<'r, 'h> {}\n    #[inline]\n    pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {}\n    #[inline]\n    pub fn splitn<'r, 'h>(&'r self, haystack: &'h [u8], limit: usize) -> SplitN<'r, 'h> {}\n    #[inline]\n    pub fn replace<'h, R: Replacer>(&self, haystack: &'h [u8], rep: R) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replace_all<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        rep: R,\n    ) -> Cow<'h, [u8]> {}\n    #[inline]\n    pub fn replacen<'h, R: Replacer>(\n        &self,\n        haystack: &'h [u8],\n        limit: usize,\n        mut rep: R,\n    ) -> Cow<'h, [u8]> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns an iterator that yields successive non-overlapping matches in\n/// the given haystack. The iterator yields values of type [`Match`].\n///\n/// # Time complexity\n///\n/// Note that since `find_iter` runs potentially many searches on the\n/// haystack and since each search has worst case `O(m * n)` time\n/// complexity, the overall worst case time complexity for iteration is\n/// `O(m * n^2)`.\n///\n/// # Example\n///\n/// Find every word with exactly 13 Unicode word characters:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\n/// let hay = b\"Retroactively relinquishing remunerations is reprehensible.\";\n/// let matches: Vec<_> = re.find_iter(hay).map(|m| m.as_bytes()).collect();\n/// assert_eq!(matches, vec![\n///     &b\"Retroactively\"[..],\n///     &b\"relinquishing\"[..],\n///     &b\"remunerations\"[..],\n///     &b\"reprehensible\"[..],\n/// ]);\n/// ```\n262 pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {\n263     Matches { haystack, it: self.meta.find_iter(haystack) }\n264 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}