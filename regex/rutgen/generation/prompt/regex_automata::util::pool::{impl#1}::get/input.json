{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/pool.rs\n// crate name is regex_automata\npub struct Pool<T, F = fn() -> T>(alloc::boxed::Box<inner::Pool<T, F>>);\npub(super) struct Pool<T, F> {\n    /// A stack of T values to hand out. These are used when a Pool is\n    /// accessed by a thread that didn't create it.\n    stack: Mutex<Vec<Box<T>>>,\n    /// A function to create more T values when stack is empty and a caller\n    /// has requested a T.\n    create: F,\n}\npub struct PoolGuard<'a, T: Send, F: Fn() -> T>(inner::PoolGuard<'a, T, F>);\npub(super) struct PoolGuard<'a, T: Send, F: Fn() -> T> {\n    /// The pool that this guard is attached to.\n    pool: &'a Pool<T, F>,\n    /// This is None after the guard has been put back into the pool.\n    value: Option<Box<T>>,\n}\nimpl<T: Send, F: Fn() -> T> Pool<T, F> {\n    #[inline]\n    pub(super) fn get(&self) -> PoolGuard<'_, T, F> {\n        let mut stack = self.stack.lock();\n        let value = match stack.pop() {\n            None => Box::new((self.create)()),\n            Some(value) => value,\n        };\n        PoolGuard {\n            pool: self,\n            value: Some(value),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Get a value from the pool. The caller is guaranteed to have\n/// exclusive access to the given value. Namely, it is guaranteed that\n/// this will never return a value that was returned by another call to\n/// `get` but was not put back into the pool.\n///\n/// When the guard goes out of scope and its destructor is called, then\n/// it will automatically be put back into the pool. Alternatively,\n/// [`PoolGuard::put`] may be used to explicitly put it back in the pool\n/// without relying on its destructor.\n///\n/// Note that there is no guarantee provided about which value in the\n/// pool is returned. That is, calling get, dropping the guard (causing\n/// the value to go back into the pool) and then calling get again is\n/// *not* guaranteed to return the same value received in the first `get`\n/// call.\n181 pub fn get(&self) -> PoolGuard<'_, T, F> {\n182     PoolGuard(self.0.get())\n183 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}