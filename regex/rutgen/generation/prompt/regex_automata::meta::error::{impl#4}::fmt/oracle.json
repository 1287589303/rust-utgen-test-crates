{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/meta/error.rs\n// crate name is regex_automata\nuse regex_syntax::{ast, hir};\nuse crate::{nfa, util::search::MatchError, PatternID};\n#[derive(Debug)]\npub(crate) struct RetryFailError {\n    offset: usize,\n}\n#[derive(Debug)]\npub(crate) struct RetryQuadraticError(());\n#[derive(Debug)]\npub(crate) enum RetryError {\n    Quadratic(RetryQuadraticError),\n    Fail(RetryFailError),\n}\nimpl core::fmt::Display for RetryError {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        match *self {\n            RetryError::Quadratic(ref err) => err.fmt(f),\n            RetryError::Fail(ref err) => err.fmt(f),\n        }\n    }\n}\nimpl core::fmt::Display for RetryFailError {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        write!(f, \"regex engine failed at offset {:?}\", self.offset)\n    }\n}\nimpl core::fmt::Display for RetryQuadraticError {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n        write!(f, \"regex engine gave up to avoid quadratic behavior\")\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n144 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n145     match *self {\n146         RetryError::Quadratic(ref err) => err.fmt(f),\n147         RetryError::Fail(ref err) => err.fmt(f),\n148     }\n149 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}