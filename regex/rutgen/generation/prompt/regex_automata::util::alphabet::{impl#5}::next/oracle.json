{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/alphabet.rs\n// crate name is regex_automata\nuse crate::util::{escape::DebugByte, wire::{self, DeserializeError, SerializeError}};\n#[derive(Debug)]\npub struct ByteClassIter<'a> {\n    classes: &'a ByteClasses,\n    i: usize,\n}\n#[derive(Clone, Copy)]\npub struct ByteClasses([u8; 256]);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\nimpl<'a> Iterator for ByteClassIter<'a> {\n    type Item = Unit;\n    fn next(&mut self) -> Option<Unit> {\n        if self.i + 1 == self.classes.alphabet_len() {\n            self.i += 1;\n            Some(self.classes.eoi())\n        } else if self.i < self.classes.alphabet_len() {\n            let class = u8::try_from(self.i).unwrap();\n            self.i += 1;\n            Some(Unit::u8(class))\n        } else {\n            None\n        }\n    }\n}\nimpl ByteClasses {\n    #[inline]\n    pub fn empty() -> ByteClasses {}\n    #[inline]\n    pub fn singletons() -> ByteClasses {}\n    pub(crate) fn from_bytes(\n        slice: &[u8],\n    ) -> Result<(ByteClasses, usize), DeserializeError> {}\n    pub(crate) fn write_to(&self, mut dst: &mut [u8]) -> Result<usize, SerializeError> {}\n    pub(crate) fn write_to_len(&self) -> usize {}\n    #[inline]\n    pub fn set(&mut self, byte: u8, class: u8) {}\n    #[inline]\n    pub fn get(&self, byte: u8) -> u8 {}\n    #[inline]\n    pub fn get_by_unit(&self, unit: Unit) -> usize {}\n    #[inline]\n    pub fn eoi(&self) -> Unit {\n        Unit::eoi(self.alphabet_len().checked_sub(1).unwrap())\n    }\n    #[inline]\n    pub fn alphabet_len(&self) -> usize {\n        usize::from(self.0[255]) + 1 + 1\n    }\n    #[inline]\n    pub fn stride2(&self) -> usize {}\n    #[inline]\n    pub fn is_singleton(&self) -> bool {}\n    #[inline]\n    pub fn iter(&self) -> ByteClassIter<'_> {}\n    pub fn representatives<R: core::ops::RangeBounds<u8>>(\n        &self,\n        range: R,\n    ) -> ByteClassRepresentatives<'_> {}\n    #[inline]\n    pub fn elements(&self, class: Unit) -> ByteClassElements {}\n    fn element_ranges(&self, class: Unit) -> ByteClassElementRanges {}\n}\nimpl Unit {\n    pub fn u8(byte: u8) -> Unit {\n        Unit(UnitKind::U8(byte))\n    }\n    pub fn eoi(num_byte_equiv_classes: usize) -> Unit {}\n    pub fn as_u8(self) -> Option<u8> {}\n    pub fn as_eoi(self) -> Option<u16> {}\n    pub fn as_usize(self) -> usize {}\n    pub fn is_byte(self, byte: u8) -> bool {}\n    pub fn is_eoi(self) -> bool {}\n    pub fn is_word_byte(self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n533 fn next(&mut self) -> Option<Unit> {\n534     if self.i + 1 == self.classes.alphabet_len() {\n535         self.i += 1;\n536         Some(self.classes.eoi())\n537     } else if self.i < self.classes.alphabet_len() {\n538         let class = u8::try_from(self.i).unwrap();\n539         self.i += 1;\n540         Some(Unit::u8(class))\n541     } else {\n542         None\n543     }\n544 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}