{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/hybrid/dfa.rs\n// crate name is regex_automata\n#[cfg(feature = \"std\")]\ntype StateMap = std::collections::HashMap<State, LazyStateID>;\n#[cfg(not(feature = \"std\"))]\ntype StateMap = alloc::collections::BTreeMap<State, LazyStateID>;\nuse core::{iter, mem::size_of};\nuse alloc::vec::Vec;\nuse crate::{\n    hybrid::{\n        error::{BuildError, CacheError, StartError},\n        id::{LazyStateID, LazyStateIDError},\n        search,\n    },\n    nfa::thompson,\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        determinize::{self, State, StateBuilderEmpty, StateBuilderNFA},\n        empty, prefilter::Prefilter, primitives::{PatternID, StateID as NFAStateID},\n        search::{Anchored, HalfMatch, Input, MatchError, MatchKind, PatternSet},\n        sparse_set::SparseSets, start::{self, Start, StartByteMap},\n    },\n};\nconst MIN_STATES: usize = SENTINEL_STATES + 2;\nconst SENTINEL_STATES: usize = 3;\n#[derive(Clone, Debug, Default)]\npub struct Config {\n    match_kind: Option<MatchKind>,\n    pre: Option<Option<Prefilter>>,\n    starts_for_each_pattern: Option<bool>,\n    byte_classes: Option<bool>,\n    unicode_word_boundary: Option<bool>,\n    quitset: Option<ByteSet>,\n    specialize_start_states: Option<bool>,\n    cache_capacity: Option<usize>,\n    skip_cache_capacity_check: Option<bool>,\n    minimum_cache_clear_count: Option<Option<usize>>,\n    minimum_bytes_per_state: Option<Option<usize>>,\n}\n#[derive(Clone, Debug)]\npub struct Prefilter {\n    #[cfg(not(feature = \"alloc\"))]\n    _unused: (),\n    #[cfg(feature = \"alloc\")]\n    pre: Arc<dyn PrefilterI>,\n    #[cfg(feature = \"alloc\")]\n    is_fast: bool,\n    #[cfg(feature = \"alloc\")]\n    max_needle_len: usize,\n}\n#[derive(Clone, Debug)]\npub(crate) struct ByteSet([bool; 256]);\n#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]\npub(crate) struct ByteSet {\n    bits: BitSet,\n}\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Config {\n    pub fn new() -> Config {}\n    pub fn match_kind(mut self, kind: MatchKind) -> Config {}\n    pub fn prefilter(mut self, pre: Option<Prefilter>) -> Config {}\n    pub fn starts_for_each_pattern(mut self, yes: bool) -> Config {}\n    pub fn byte_classes(mut self, yes: bool) -> Config {}\n    pub fn unicode_word_boundary(mut self, yes: bool) -> Config {}\n    pub fn quit(mut self, byte: u8, yes: bool) -> Config {}\n    pub fn specialize_start_states(mut self, yes: bool) -> Config {\n        self.specialize_start_states = Some(yes);\n        self\n    }\n    pub fn cache_capacity(mut self, bytes: usize) -> Config {}\n    pub fn skip_cache_capacity_check(mut self, yes: bool) -> Config {}\n    pub fn minimum_cache_clear_count(mut self, min: Option<usize>) -> Config {}\n    pub fn minimum_bytes_per_state(mut self, min: Option<usize>) -> Config {}\n    pub fn get_match_kind(&self) -> MatchKind {}\n    pub fn get_prefilter(&self) -> Option<&Prefilter> {}\n    pub fn get_starts_for_each_pattern(&self) -> bool {}\n    pub fn get_byte_classes(&self) -> bool {}\n    pub fn get_unicode_word_boundary(&self) -> bool {}\n    pub fn get_quit(&self, byte: u8) -> bool {}\n    pub fn get_specialize_start_states(&self) -> bool {}\n    pub fn get_cache_capacity(&self) -> usize {}\n    pub fn get_skip_cache_capacity_check(&self) -> bool {}\n    pub fn get_minimum_cache_clear_count(&self) -> Option<usize> {}\n    pub fn get_minimum_bytes_per_state(&self) -> Option<usize> {}\n    pub fn get_minimum_cache_capacity(\n        &self,\n        nfa: &thompson::NFA,\n    ) -> Result<usize, BuildError> {}\n    fn byte_classes_from_nfa(&self, nfa: &thompson::NFA, quit: &ByteSet) -> ByteClasses {}\n    fn quit_set_from_nfa(&self, nfa: &thompson::NFA) -> Result<ByteSet, BuildError> {}\n    fn overwrite(&self, o: Config) -> Config {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Enable specializing start states in the lazy DFA.\n///\n/// When start states are specialized, an implementor of a search routine\n/// using a lazy DFA can tell when the search has entered a starting state.\n/// When start states aren't specialized, then it is impossible to know\n/// whether the search has entered a start state.\n///\n/// Ideally, this option wouldn't need to exist and we could always\n/// specialize start states. The problem is that start states can be quite\n/// active. This in turn means that an efficient search routine is likely\n/// to ping-pong between a heavily optimized hot loop that handles most\n/// states and to a less optimized specialized handling of start states.\n/// This causes branches to get heavily mispredicted and overall can\n/// materially decrease throughput. Therefore, specializing start states\n/// should only be enabled when it is needed.\n///\n/// Knowing whether a search is in a start state is typically useful when a\n/// prefilter is active for the search. A prefilter is typically only run\n/// when in a start state and a prefilter can greatly accelerate a search.\n/// Therefore, the possible cost of specializing start states is worth it\n/// in this case. Otherwise, if you have no prefilter, there is likely no\n/// reason to specialize start states.\n///\n/// This is disabled by default, but note that it is automatically\n/// enabled (or disabled) if [`Config::prefilter`] is set. Namely, unless\n/// `specialize_start_states` has already been set, [`Config::prefilter`]\n/// will automatically enable or disable it based on whether a prefilter\n/// is present or not, respectively. This is done because a prefilter's\n/// effectiveness is rooted in being executed whenever the DFA is in a\n/// start state, and that's only possible to do when they are specialized.\n///\n/// Note that it is plausibly reasonable to _disable_ this option\n/// explicitly while _enabling_ a prefilter. In that case, a prefilter\n/// will still be run at the beginning of a search, but never again. This\n/// in theory could strike a good balance if you're in a situation where a\n/// prefilter is likely to produce many false positive candidates.\n///\n/// # Example\n///\n/// This example shows how to enable start state specialization and then\n/// shows how to check whether a state is a start state or not.\n///\n/// ```\n/// use regex_automata::{hybrid::dfa::DFA, MatchError, Input};\n///\n/// let dfa = DFA::builder()\n///     .configure(DFA::config().specialize_start_states(true))\n///     .build(r\"[a-z]+\")?;\n/// let mut cache = dfa.create_cache();\n///\n/// let haystack = \"123 foobar 4567\".as_bytes();\n/// let sid = dfa.start_state_forward(&mut cache, &Input::new(haystack))?;\n/// // The ID returned by 'start_state_forward' will always be tagged as\n/// // a start state when start state specialization is enabled.\n/// assert!(sid.is_tagged());\n/// assert!(sid.is_start());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Compare the above with the default lazy DFA configuration where\n/// start states are _not_ specialized. In this case, the start state\n/// is not tagged and `sid.is_start()` returns false.\n///\n/// ```\n/// use regex_automata::{hybrid::dfa::DFA, MatchError, Input};\n///\n/// let dfa = DFA::new(r\"[a-z]+\")?;\n/// let mut cache = dfa.create_cache();\n///\n/// let haystack = \"123 foobar 4567\".as_bytes();\n/// let sid = dfa.start_state_forward(&mut cache, &Input::new(haystack))?;\n/// // Start states are not tagged in the default configuration!\n/// assert!(!sid.is_tagged());\n/// assert!(!sid.is_start());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n3448 pub fn specialize_start_states(mut self, yes: bool) -> Config {\n3449     self.specialize_start_states = Some(yes);\n3450     self\n3451 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}