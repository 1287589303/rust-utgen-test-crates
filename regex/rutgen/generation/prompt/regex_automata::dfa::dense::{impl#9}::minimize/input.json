{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\npub unsafe trait Automaton {\n    fn next_state(&self, current: StateID, input: u8) -> StateID;\n    unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID;\n    fn next_eoi_state(&self, current: StateID) -> StateID;\n    fn start_state(&self, config: &start::Config) -> Result<StateID, StartError>;\n    fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError>;\n    #[inline]\n    fn universal_start_state(&self, _mode: Anchored) -> Option<StateID>;\n    fn is_special_state(&self, id: StateID) -> bool;\n    fn is_dead_state(&self, id: StateID) -> bool;\n    fn is_quit_state(&self, id: StateID) -> bool;\n    fn is_match_state(&self, id: StateID) -> bool;\n    fn is_start_state(&self, id: StateID) -> bool;\n    fn is_accel_state(&self, id: StateID) -> bool;\n    fn pattern_len(&self) -> usize;\n    fn match_len(&self, id: StateID) -> usize;\n    fn match_pattern(&self, id: StateID, index: usize) -> PatternID;\n    fn has_empty(&self) -> bool;\n    fn is_utf8(&self) -> bool;\n    fn is_always_start_anchored(&self) -> bool;\n    #[inline]\n    fn accelerator(&self, _id: StateID) -> &[u8];\n    #[inline]\n    fn get_prefilter(&self) -> Option<&Prefilter>;\n    #[inline]\n    fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError>;\n    #[inline]\n    fn try_search_overlapping_fwd(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[inline]\n    fn try_search_overlapping_rev(\n        &self,\n        input: &Input<'_>,\n        state: &mut OverlappingState,\n    ) -> Result<(), MatchError>;\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    fn try_which_overlapping_matches(\n        &self,\n        input: &Input<'_>,\n        patset: &mut PatternSet,\n    ) -> Result<(), MatchError>;\n}\npub(crate) trait U16 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn high_u8(self) -> u8;\n}\npub(crate) trait U32 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn high_u16(self) -> u16;\n}\npub(crate) trait Usize {\n    fn as_u8(self) -> u8;\n    fn as_u16(self) -> u16;\n    fn as_u32(self) -> u32;\n    fn as_u64(self) -> u64;\n}\npub(crate) trait U8 {\n    fn as_usize(self) -> usize;\n}\npub(crate) trait U64 {\n    fn as_usize(self) -> usize;\n    fn low_u8(self) -> u8;\n    fn low_u16(self) -> u16;\n    fn low_u32(self) -> u32;\n    fn high_u32(self) -> u32;\n}\npub(crate) trait I32 {\n    fn as_usize(self) -> usize;\n    fn to_bits(self) -> u32;\n    fn from_bits(n: u32) -> i32;\n}\npub(crate) trait Pointer {\n    fn as_usize(self) -> usize;\n}\npub(crate) struct Minimizer<'a> {\n    dfa: &'a mut dense::OwnedDFA,\n    in_transitions: Vec<Vec<Vec<StateID>>>,\n    partitions: Vec<StateSet>,\n    waiting: Vec<StateSet>,\n}\n#[cfg(feature = \"dfa-build\")]\nimpl OwnedDFA {\n    pub(crate) fn set_start_state(\n        &mut self,\n        anchored: Anchored,\n        start: Start,\n        id: StateID,\n    ) {}\n    pub(crate) fn set_transition(\n        &mut self,\n        from: StateID,\n        byte: alphabet::Unit,\n        to: StateID,\n    ) {}\n    pub(crate) fn add_empty_state(&mut self) -> Result<StateID, BuildError> {}\n    pub(crate) fn swap_states(&mut self, id1: StateID, id2: StateID) {}\n    pub(crate) fn remap(&mut self, map: impl Fn(StateID) -> StateID) {}\n    pub(crate) fn remap_state(&mut self, id: StateID, map: impl Fn(StateID) -> StateID) {}\n    pub(crate) fn truncate_states(&mut self, len: usize) {}\n    pub(crate) fn minimize(&mut self) {\n        Minimizer::new(self).run();\n    }\n    pub(crate) fn set_pattern_map(\n        &mut self,\n        map: &BTreeMap<StateID, Vec<PatternID>>,\n    ) -> Result<(), BuildError> {}\n    pub(crate) fn accelerate(&mut self) {}\n    pub(crate) fn shuffle(\n        &mut self,\n        mut matches: BTreeMap<StateID, Vec<PatternID>>,\n    ) -> Result<(), BuildError> {}\n    fn set_universal_starts(&mut self) {}\n}\nimpl<'a> Minimizer<'a> {\n    pub fn new(dfa: &'a mut dense::OwnedDFA) -> Minimizer<'a> {\n        let in_transitions = Minimizer::incoming_transitions(dfa);\n        let partitions = Minimizer::initial_partitions(dfa);\n        let waiting = partitions.clone();\n        Minimizer {\n            dfa,\n            in_transitions,\n            partitions,\n            waiting,\n        }\n    }\n    pub fn run(mut self) {\n        let stride2 = self.dfa.stride2();\n        let as_state_id = |index: usize| -> StateID {\n            StateID::new(index << stride2).unwrap()\n        };\n        let as_index = |id: StateID| -> usize { id.as_usize() >> stride2 };\n        let mut incoming = StateSet::empty();\n        let mut scratch1 = StateSet::empty();\n        let mut scratch2 = StateSet::empty();\n        let mut newparts = vec![];\n        while let Some(set) = self.waiting.pop() {\n            for b in self.dfa.byte_classes().iter() {\n                self.find_incoming_to(b, &set, &mut incoming);\n                if incoming.is_empty() {\n                    continue;\n                }\n                for p in 0..self.partitions.len() {\n                    self.partitions[p].intersection(&incoming, &mut scratch1);\n                    if scratch1.is_empty() {\n                        newparts.push(self.partitions[p].clone());\n                        continue;\n                    }\n                    self.partitions[p].subtract(&incoming, &mut scratch2);\n                    if scratch2.is_empty() {\n                        newparts.push(self.partitions[p].clone());\n                        continue;\n                    }\n                    let (x, y) = (scratch1.deep_clone(), scratch2.deep_clone());\n                    newparts.push(x.clone());\n                    newparts.push(y.clone());\n                    match self.find_waiting(&self.partitions[p]) {\n                        Some(i) => {\n                            self.waiting[i] = x;\n                            self.waiting.push(y);\n                        }\n                        None => {\n                            if x.len() <= y.len() {\n                                self.waiting.push(x);\n                            } else {\n                                self.waiting.push(y);\n                            }\n                        }\n                    }\n                }\n                newparts = mem::replace(&mut self.partitions, newparts);\n                newparts.clear();\n            }\n        }\n        let mut state_to_part = vec![DEAD; self.dfa.state_len()];\n        for p in &self.partitions {\n            p.iter(|id| state_to_part[as_index(id)] = p.min());\n        }\n        let mut minimal_ids = vec![DEAD; self.dfa.state_len()];\n        let mut new_index = 0;\n        for state in self.dfa.states() {\n            if state_to_part[as_index(state.id())] == state.id() {\n                minimal_ids[as_index(state.id())] = as_state_id(new_index);\n                new_index += 1;\n            }\n        }\n        let minimal_count = new_index;\n        let remap = |old| minimal_ids[as_index(state_to_part[as_index(old)])];\n        for id in (0..self.dfa.state_len()).map(as_state_id) {\n            if state_to_part[as_index(id)] != id {\n                continue;\n            }\n            self.dfa.remap_state(id, remap);\n            self.dfa.swap_states(id, minimal_ids[as_index(id)]);\n        }\n        self.dfa.truncate_states(minimal_count);\n        let starts: Vec<_> = self.dfa.starts().collect();\n        for (old_start_id, anchored, start_type) in starts {\n            self.dfa.set_start_state(anchored, start_type, remap(old_start_id));\n        }\n        let mut pmap = BTreeMap::new();\n        for (match_id, pattern_ids) in self.dfa.pattern_map() {\n            let new_id = remap(match_id);\n            pmap.insert(new_id, pattern_ids);\n        }\n        self.dfa.set_pattern_map(&pmap).unwrap();\n        let old = self.dfa.special().clone();\n        let new = self.dfa.special_mut();\n        if old.matches() {\n            new.min_match = StateID::MAX;\n            new.max_match = StateID::ZERO;\n            for i in as_index(old.min_match)..=as_index(old.max_match) {\n                let new_id = remap(as_state_id(i));\n                if new_id < new.min_match {\n                    new.min_match = new_id;\n                }\n                if new_id > new.max_match {\n                    new.max_match = new_id;\n                }\n            }\n        }\n        if old.starts() {\n            new.min_start = StateID::MAX;\n            new.max_start = StateID::ZERO;\n            for i in as_index(old.min_start)..=as_index(old.max_start) {\n                let new_id = remap(as_state_id(i));\n                if new_id == DEAD {\n                    continue;\n                }\n                if new_id < new.min_start {\n                    new.min_start = new_id;\n                }\n                if new_id > new.max_start {\n                    new.max_start = new_id;\n                }\n            }\n            if new.max_start == DEAD {\n                new.min_start = DEAD;\n            }\n        }\n        new.quit_id = remap(new.quit_id);\n        new.set_max();\n    }\n    fn find_waiting(&self, set: &StateSet) -> Option<usize> {}\n    fn find_incoming_to(\n        &self,\n        b: alphabet::Unit,\n        set: &StateSet,\n        incoming: &mut StateSet,\n    ) {}\n    fn initial_partitions(dfa: &dense::OwnedDFA) -> Vec<StateSet> {}\n    fn incoming_transitions(dfa: &dense::OwnedDFA) -> Vec<Vec<Vec<StateID>>> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Minimize this DFA in place using Hopcroft's algorithm.\n2559 pub(crate) fn minimize(&mut self) {\n2560     Minimizer::new(self).run();\n2561 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}