{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/prefilter/memchr.rs\n// crate name is regex_automata\nuse crate::util::{prefilter::PrefilterI, search::{MatchKind, Span}};\npub(crate) trait PrefilterI: Debug + Send + Sync + RefUnwindSafe + UnwindSafe + 'static {\n    fn find(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn prefix(&self, haystack: &[u8], span: Span) -> Option<Span>;\n    fn memory_usage(&self) -> usize;\n    fn is_fast(&self) -> bool;\n}\n#[derive(Clone, Debug)]\npub(crate) struct Memchr2(u8, u8);\n#[non_exhaustive]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum MatchKind {\n    /// Report all possible matches.\n    All,\n    /// Report only the leftmost matches. When multiple leftmost matches exist,\n    /// report the match corresponding to the part of the regex that appears\n    /// first in the syntax.\n    LeftmostFirst,\n}\nimpl Memchr2 {\n    pub(crate) fn new<B: AsRef<[u8]>>(\n        _kind: MatchKind,\n        needles: &[B],\n    ) -> Option<Memchr2> {\n        #[cfg(not(feature = \"perf-literal-substring\"))] { None }\n        #[cfg(feature = \"perf-literal-substring\")]\n        {\n            if needles.len() != 2 {\n                return None;\n            }\n            if !needles.iter().all(|n| n.as_ref().len() == 1) {\n                return None;\n            }\n            let b1 = needles[0].as_ref()[0];\n            let b2 = needles[1].as_ref()[0];\n            Some(Memchr2(b1, b2))\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n69 pub(crate) fn new<B: AsRef<[u8]>>(\n70     _kind: MatchKind,\n71     needles: &[B],\n72 ) -> Option<Memchr2> {\n73     #[cfg(not(feature = \"perf-literal-substring\"))]\n74     {\n75         None\n76     }\n77     #[cfg(feature = \"perf-literal-substring\")]\n78     {\n79         if needles.len() != 2 {\n80             return None;\n81         }\n82         if !needles.iter().all(|n| n.as_ref().len() == 1) {\n83             return None;\n84         }\n85         let b1 = needles[0].as_ref()[0];\n86         let b2 = needles[1].as_ref()[0];\n87         Some(Memchr2(b1, b2))\n88     }\n89 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}