{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/search.rs\n// crate name is regex_automata\nuse core::ops::{Range, RangeBounds};\nuse crate::util::{escape::DebugByte, primitives::PatternID, utf8};\n#[derive(Clone)]\npub struct Input<'h> {\n    haystack: &'h [u8],\n    span: Span,\n    anchored: Anchored,\n    earliest: bool,\n}\n#[derive(Clone, Copy, Eq, Hash, PartialEq)]\npub struct Span {\n    /// The start offset of the span, inclusive.\n    pub start: usize,\n    /// The end offset of the span, exclusive.\n    pub end: usize,\n}\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum Anchored {\n    /// Run an unanchored search. This means a match may occur anywhere at or\n    /// after the start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    No,\n    /// Run an anchored search. This means that a match must begin at the\n    /// start position of the search.\n    ///\n    /// This search can return a match for any pattern in the regex.\n    Yes,\n    /// Run an anchored search for a specific pattern. This means that a match\n    /// must be for the given pattern and must begin at the start position of\n    /// the search.\n    Pattern(PatternID),\n}\nimpl<'h> Input<'h> {\n    #[inline]\n    pub fn new<H: ?Sized + AsRef<[u8]>>(haystack: &'h H) -> Input<'h> {}\n    #[inline]\n    pub fn span<S: Into<Span>>(mut self, span: S) -> Input<'h> {}\n    #[inline]\n    pub fn range<R: RangeBounds<usize>>(mut self, range: R) -> Input<'h> {}\n    #[inline]\n    pub fn anchored(mut self, mode: Anchored) -> Input<'h> {}\n    #[inline]\n    pub fn earliest(mut self, yes: bool) -> Input<'h> {\n        self.set_earliest(yes);\n        self\n    }\n    #[inline]\n    pub fn set_span<S: Into<Span>>(&mut self, span: S) {}\n    #[inline]\n    pub fn set_range<R: RangeBounds<usize>>(&mut self, range: R) {}\n    #[inline]\n    pub fn set_start(&mut self, start: usize) {}\n    #[inline]\n    pub fn set_end(&mut self, end: usize) {}\n    #[inline]\n    pub fn set_anchored(&mut self, mode: Anchored) {}\n    #[inline]\n    pub fn set_earliest(&mut self, yes: bool) {\n        self.earliest = yes;\n    }\n    #[inline]\n    pub fn haystack(&self) -> &[u8] {}\n    #[inline]\n    pub fn start(&self) -> usize {}\n    #[inline]\n    pub fn end(&self) -> usize {}\n    #[inline]\n    pub fn get_span(&self) -> Span {}\n    #[inline]\n    pub fn get_range(&self) -> Range<usize> {}\n    #[inline]\n    pub fn get_anchored(&self) -> Anchored {}\n    #[inline]\n    pub fn get_earliest(&self) -> bool {}\n    #[inline]\n    pub fn is_done(&self) -> bool {}\n    #[inline]\n    pub fn is_char_boundary(&self, offset: usize) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether to execute an \"earliest\" search or not.\n///\n/// When running a non-overlapping search, an \"earliest\" search will return\n/// the match location as early as possible. For example, given a pattern\n/// of `foo[0-9]+` and a haystack of `foo12345`, a normal leftmost search\n/// will return `foo12345` as a match. But an \"earliest\" search for regex\n/// engines that support \"earliest\" semantics will return `foo1` as a\n/// match, since as soon as the first digit following `foo` is seen, it is\n/// known to have found a match.\n///\n/// Note that \"earliest\" semantics generally depend on the regex engine.\n/// Different regex engines may determine there is a match at different\n/// points. So there is no guarantee that \"earliest\" matches will always\n/// return the same offsets for all regex engines. The \"earliest\" notion\n/// is really about when the particular regex engine determines there is\n/// a match rather than a consistent semantic unto itself. This is often\n/// useful for implementing \"did a match occur or not\" predicates, but\n/// sometimes the offset is useful as well.\n///\n/// This is disabled by default.\n///\n/// # Example\n///\n/// This example shows the difference between \"earliest\" searching and\n/// normal searching.\n///\n/// ```\n/// use regex_automata::{nfa::thompson::pikevm::PikeVM, Match, Input};\n///\n/// let re = PikeVM::new(r\"foo[0-9]+\")?;\n/// let mut cache = re.create_cache();\n/// let mut caps = re.create_captures();\n///\n/// // A normal search implements greediness like you expect.\n/// let input = Input::new(\"foo12345\");\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..8)), caps.get_match());\n///\n/// // When 'earliest' is enabled and the regex engine supports\n/// // it, the search will bail once it knows a match has been\n/// // found.\n/// let input = Input::new(\"foo12345\").earliest(true);\n/// re.search(&mut cache, &input, &mut caps);\n/// assert_eq!(Some(Match::must(0, 0..4)), caps.get_match());\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n394 pub fn earliest(mut self, yes: bool) -> Input<'h> {\n395     self.set_earliest(yes);\n396     self\n397 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}