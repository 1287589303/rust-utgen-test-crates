{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/util/interpolate.rs\n// crate name is regex_automata\nuse alloc::{string::String, vec::Vec};\nuse crate::util::memchr::memchr;\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\nstruct CaptureRef<'a> {\n    cap: Ref<'a>,\n    end: usize,\n}\npub fn string(\n    mut replacement: &str,\n    mut append: impl FnMut(usize, &mut String),\n    mut name_to_index: impl FnMut(&str) -> Option<usize>,\n    dst: &mut String,\n) {\n    while !replacement.is_empty() {\n        match memchr(b'$', replacement.as_bytes()) {\n            None => break,\n            Some(i) => {\n                dst.push_str(&replacement[..i]);\n                replacement = &replacement[i..];\n            }\n        }\n        if replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') {\n            dst.push_str(\"$\");\n            replacement = &replacement[2..];\n            continue;\n        }\n        debug_assert!(! replacement.is_empty());\n        let cap_ref = match find_cap_ref(replacement.as_bytes()) {\n            Some(cap_ref) => cap_ref,\n            None => {\n                dst.push_str(\"$\");\n                replacement = &replacement[1..];\n                continue;\n            }\n        };\n        replacement = &replacement[cap_ref.end..];\n        match cap_ref.cap {\n            Ref::Number(i) => append(i, dst),\n            Ref::Named(name) => {\n                if let Some(i) = name_to_index(name) {\n                    append(i, dst);\n                }\n            }\n        }\n    }\n    dst.push_str(replacement);\n}\n#[cfg_attr(feature = \"perf-inline\", inline(always))]\npub(crate) fn memchr(n1: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == n1)\n}\nfn find_cap_ref(replacement: &[u8]) -> Option<CaptureRef<'_>> {\n    let mut i = 0;\n    let rep: &[u8] = replacement;\n    if rep.len() <= 1 || rep[0] != b'$' {\n        return None;\n    }\n    i += 1;\n    if rep[i] == b'{' {\n        return find_cap_ref_braced(rep, i + 1);\n    }\n    let mut cap_end = i;\n    while rep.get(cap_end).copied().map_or(false, is_valid_cap_letter) {\n        cap_end += 1;\n    }\n    if cap_end == i {\n        return None;\n    }\n    let cap = core::str::from_utf8(&rep[i..cap_end]).expect(\"valid UTF-8 capture name\");\n    Some(CaptureRef {\n        cap: match cap.parse::<usize>() {\n            Ok(i) => Ref::Number(i),\n            Err(_) => Ref::Named(cap),\n        },\n        end: cap_end,\n    })\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Accepts a replacement string and interpolates capture references with their\n/// corresponding values.\n///\n/// `append` should be a function that appends the string value of a capture\n/// group at a particular index to the string given. If the capture group\n/// index is invalid, then nothing should be appended.\n///\n/// `name_to_index` should be a function that maps a capture group name to a\n/// capture group index. If the given name doesn't exist, then `None` should\n/// be returned.\n///\n/// Finally, `dst` is where the final interpolated contents should be written.\n/// If `replacement` contains no capture group references, then `dst` will be\n/// equivalent to `replacement`.\n///\n/// See the [module documentation](self) for details about the format\n/// supported.\n///\n/// # Example\n///\n/// ```\n/// use regex_automata::util::interpolate;\n///\n/// let mut dst = String::new();\n/// interpolate::string(\n///     \"foo $bar baz\",\n///     |index, dst| {\n///         if index == 0 {\n///             dst.push_str(\"BAR\");\n///         }\n///     },\n///     |name| {\n///         if name == \"bar\" {\n///             Some(0)\n///         } else {\n///             None\n///         }\n///     },\n///     &mut dst,\n/// );\n/// assert_eq!(\"foo BAR baz\", dst);\n/// ```\n 94 pub fn string(\n 95     mut replacement: &str,\n 96     mut append: impl FnMut(usize, &mut String),\n 97     mut name_to_index: impl FnMut(&str) -> Option<usize>,\n 98     dst: &mut String,\n 99 ) {\n100     while !replacement.is_empty() {\n101         match memchr(b'$', replacement.as_bytes()) {\n102             None => break,\n103             Some(i) => {\n104                 dst.push_str(&replacement[..i]);\n105                 replacement = &replacement[i..];\n106             }\n107         }\n108         // Handle escaping of '$'.\n109         if replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') {\n110             dst.push_str(\"$\");\n111             replacement = &replacement[2..];\n112             continue;\n113         }\n114         debug_assert!(!replacement.is_empty());\n115         let cap_ref = match find_cap_ref(replacement.as_bytes()) {\n116             Some(cap_ref) => cap_ref,\n117             None => {\n118                 dst.push_str(\"$\");\n119                 replacement = &replacement[1..];\n120                 continue;\n121             }\n122         };\n123         replacement = &replacement[cap_ref.end..];\n124         match cap_ref.cap {\n125             Ref::Number(i) => append(i, dst),\n126             Ref::Named(name) => {\n127                 if let Some(i) = name_to_index(name) {\n128                     append(i, dst);\n129                 }\n130             }\n131         }\n132     }\n133     dst.push_str(replacement);\n134 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}