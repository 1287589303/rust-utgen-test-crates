{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-automata/src/dfa/dense.rs\n// crate name is regex_automata\n#[cfg(feature = \"alloc\")]\npub(crate) type OwnedDFA = DFA<alloc::vec::Vec<u32>>;\n#[cfg(feature = \"dfa-build\")]\nuse core::cmp;\nuse core::{fmt, iter, mem::size_of, slice};\n#[cfg(feature = \"dfa-build\")]\nuse alloc::{\n    collections::{BTreeMap, BTreeSet},\n    vec, vec::Vec,\n};\n#[cfg(feature = \"dfa-build\")]\nuse crate::{\n    dfa::{accel::Accel, determinize, minimize::Minimizer, remapper::Remapper, sparse},\n    nfa::thompson, util::{look::LookMatcher, search::MatchKind},\n};\nuse crate::{\n    dfa::{\n        accel::Accels, automaton::{fmt_state_indicator, Automaton, StartError},\n        special::Special, start::StartKind, DEAD,\n    },\n    util::{\n        alphabet::{self, ByteClasses, ByteSet},\n        int::{Pointer, Usize},\n        prefilter::Prefilter, primitives::{PatternID, StateID},\n        search::Anchored, start::{self, Start, StartByteMap},\n        wire::{self, DeserializeError, Endian, SerializeError},\n    },\n};\nconst LABEL: &str = \"rust-regex-automata-dfa-dense\";\nconst VERSION: u32 = 2;\n#[derive(Debug)]\npub(crate) struct StateTransitionIter<'a> {\n    len: usize,\n    it: iter::Enumerate<slice::Iter<'a, StateID>>,\n}\n#[derive(Clone, Copy, Default, Eq, Hash, PartialEq, PartialOrd, Ord)]\n#[repr(transparent)]\npub struct StateID(SmallIndex);\n#[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord)]\npub struct Unit(UnitKind);\nimpl<'a> Iterator for StateTransitionIter<'a> {\n    type Item = (alphabet::Unit, StateID);\n    fn next(&mut self) -> Option<(alphabet::Unit, StateID)> {\n        self.it\n            .next()\n            .map(|(i, &id)| {\n                let unit = if i + 1 == self.len {\n                    alphabet::Unit::eoi(i)\n                } else {\n                    let b = u8::try_from(i)\n                        .expect(\"raw byte alphabet is never exceeded\");\n                    alphabet::Unit::u8(b)\n                };\n                (unit, id)\n            })\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n4882 fn next(&mut self) -> Option<(alphabet::Unit, StateID)> {\n4883     self.it.next().map(|(i, &id)| {\n4884         let unit = if i + 1 == self.len {\n4885             alphabet::Unit::eoi(i)\n4886         } else {\n4887             let b = u8::try_from(i)\n4888                 .expect(\"raw byte alphabet is never exceeded\");\n4889             alphabet::Unit::u8(b)\n4890         };\n4891         (unit, id)\n4892     })\n4893 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}