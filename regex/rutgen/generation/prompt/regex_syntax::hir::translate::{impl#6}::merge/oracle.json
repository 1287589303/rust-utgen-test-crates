{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// regex-syntax/src/hir/translate.rs\n// crate name is regex_syntax\ntype Result<T> = core::result::Result<T, Error>;\nuse core::cell::{Cell, RefCell};\nuse alloc::{boxed::Box, string::ToString, vec, vec::Vec};\nuse crate::{\n    ast::{self, Ast, Span, Visitor},\n    either::Either, hir::{self, Error, ErrorKind, Hir, HirKind},\n    unicode::{self, ClassQuery},\n};\n#[derive(Clone, Copy, Debug, Default)]\nstruct Flags {\n    case_insensitive: Option<bool>,\n    multi_line: Option<bool>,\n    dot_matches_new_line: Option<bool>,\n    swap_greed: Option<bool>,\n    unicode: Option<bool>,\n    crlf: Option<bool>,\n}\nimpl Flags {\n    fn from_ast(ast: &ast::Flags) -> Flags {}\n    fn merge(&mut self, previous: &Flags) {\n        if self.case_insensitive.is_none() {\n            self.case_insensitive = previous.case_insensitive;\n        }\n        if self.multi_line.is_none() {\n            self.multi_line = previous.multi_line;\n        }\n        if self.dot_matches_new_line.is_none() {\n            self.dot_matches_new_line = previous.dot_matches_new_line;\n        }\n        if self.swap_greed.is_none() {\n            self.swap_greed = previous.swap_greed;\n        }\n        if self.unicode.is_none() {\n            self.unicode = previous.unicode;\n        }\n        if self.crlf.is_none() {\n            self.crlf = previous.crlf;\n        }\n    }\n    fn case_insensitive(&self) -> bool {}\n    fn multi_line(&self) -> bool {}\n    fn dot_matches_new_line(&self) -> bool {}\n    fn swap_greed(&self) -> bool {}\n    fn unicode(&self) -> bool {}\n    fn crlf(&self) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1270 fn merge(&mut self, previous: &Flags) {\n1271     if self.case_insensitive.is_none() {\n1272         self.case_insensitive = previous.case_insensitive;\n1273     }\n1274     if self.multi_line.is_none() {\n1275         self.multi_line = previous.multi_line;\n1276     }\n1277     if self.dot_matches_new_line.is_none() {\n1278         self.dot_matches_new_line = previous.dot_matches_new_line;\n1279     }\n1280     if self.swap_greed.is_none() {\n1281         self.swap_greed = previous.swap_greed;\n1282     }\n1283     if self.unicode.is_none() {\n1284         self.unicode = previous.unicode;\n1285     }\n1286     if self.crlf.is_none() {\n1287         self.crlf = previous.crlf;\n1288     }\n1289 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}