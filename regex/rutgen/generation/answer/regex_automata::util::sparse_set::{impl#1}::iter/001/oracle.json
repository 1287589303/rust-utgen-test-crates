[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_set = SparseSet::new(10);",
          "    let iter = sparse_set.iter();",
          "}"
        ],
        "oracle": [
          "    let sparse_set = SparseSet::new(10);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    let iter = sparse_set.iter();",
          "    assert_eq!(iter.0.len(), 0);"
        ],
        "code": [
          "{",
          "    let sparse_set = SparseSet::new(10);",
          "    let iter = sparse_set.iter();",
          "    let sparse_set = SparseSet::new(10);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    let iter = sparse_set.iter();",
          "    assert_eq!(iter.0.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.insert(StateID(0));",
          "    let iter = sparse_set.iter();",
          "}"
        ],
        "oracle": [
          "    iter.len() == 1",
          "    iter.clone().count() == 1",
          "    iter.nth(0) == StateID(0)",
          "    sparse_set.is_empty() == false",
          "    sparse_set.len() == 1",
          "    sparse_set.contains(StateID(0)) == true",
          "    sparse_set.contains(StateID(1)) == false"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.insert(StateID(0));",
          "    let iter = sparse_set.iter();",
          "    iter.len() == 1",
          "    iter.clone().count() == 1",
          "    iter.nth(0) == StateID(0)",
          "    sparse_set.is_empty() == false",
          "    sparse_set.len() == 1",
          "    sparse_set.contains(StateID(0)) == true",
          "    sparse_set.contains(StateID(1)) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.insert(StateID(0));",
          "    sparse_set.insert(StateID(1));",
          "    let iter = sparse_set.iter();",
          "}"
        ],
        "oracle": [
          "    let mut sparse_set = SparseSet::new(10);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    sparse_set.insert(StateID(0));",
          "    sparse_set.insert(StateID(1));",
          "    let iter = sparse_set.iter();",
          "    assert_eq!(iter.0.len(), 2);",
          "    assert_eq!(iter.0.next(), Some(&StateID(0)));",
          "    assert_eq!(iter.0.next(), Some(&StateID(1)));",
          "    assert_eq!(iter.0.next(), None);"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.insert(StateID(0));",
          "    sparse_set.insert(StateID(1));",
          "    let iter = sparse_set.iter();",
          "    let mut sparse_set = SparseSet::new(10);",
          "    assert_eq!(sparse_set.len(), 0);",
          "    assert!(sparse_set.is_empty());",
          "    sparse_set.insert(StateID(0));",
          "    sparse_set.insert(StateID(1));",
          "    let iter = sparse_set.iter();",
          "    assert_eq!(iter.0.len(), 2);",
          "    assert_eq!(iter.0.next(), Some(&StateID(0)));",
          "    assert_eq!(iter.0.next(), Some(&StateID(1)));",
          "    assert_eq!(iter.0.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    for i in 0..5 {",
          "        sparse_set.insert(StateID(i));",
          "    }",
          "    let iter = sparse_set.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.0.len(), 5);",
          "    assert_eq!(iter.0.as_slice(), &[StateID(0), StateID(1), StateID(2), StateID(3), StateID(4)]);",
          "    assert!(iter.0.clone().next().is_some());",
          "    assert_eq!(iter.0.clone().next(), Some(&StateID(0)));",
          "    assert_eq!(sparse_set.len(), 5);",
          "    assert!(!sparse_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(5);",
          "    for i in 0..5 {",
          "        sparse_set.insert(StateID(i));",
          "    }",
          "    let iter = sparse_set.iter();",
          "    assert_eq!(iter.0.len(), 5);",
          "    assert_eq!(iter.0.as_slice(), &[StateID(0), StateID(1), StateID(2), StateID(3), StateID(4)]);",
          "    assert!(iter.0.clone().next().is_some());",
          "    assert_eq!(iter.0.clone().next(), Some(&StateID(0)));",
          "    assert_eq!(sparse_set.len(), 5);",
          "    assert!(!sparse_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]