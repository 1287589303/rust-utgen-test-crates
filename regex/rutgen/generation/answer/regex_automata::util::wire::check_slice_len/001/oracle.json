[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Vec<u8> = vec![];",
          "    let at_least_len = 1;",
          "    let what = \"empty slice\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(check_slice_len(&slice, at_least_len, what).is_err(), true);",
          "    assert!(matches!(check_slice_len(&slice, at_least_len, what), Err(DeserializeError::buffer_too_small(\"empty slice\"))));"
        ],
        "code": [
          "{",
          "    let slice: Vec<u8> = vec![];",
          "    let at_least_len = 1;",
          "    let what = \"empty slice\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "    assert_eq!(check_slice_len(&slice, at_least_len, what).is_err(), true);",
          "    assert!(matches!(check_slice_len(&slice, at_least_len, what), Err(DeserializeError::buffer_too_small(\"empty slice\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Vec<u8> = vec![1];",
          "    let at_least_len = 2;",
          "    let what = \"single element slice\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(check_slice_len(&slice, at_least_len, what), Err(DeserializeError::buffer_too_small(what)));"
        ],
        "code": [
          "{",
          "    let slice: Vec<u8> = vec![1];",
          "    let at_least_len = 2;",
          "    let what = \"single element slice\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "    assert_eq!(check_slice_len(&slice, at_least_len, what), Err(DeserializeError::buffer_too_small(what)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Vec<u8> = vec![1, 2];",
          "    let at_least_len = 3;",
          "    let what = \"small slice\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "}"
        ],
        "oracle": [
          "    assert!(check_slice_len(&slice, at_least_len, what).is_err());",
          "    match check_slice_len(&slice, at_least_len, what) {",
          "    Err(DeserializeError::buffer_too_small(message)) => assert_eq!(message, what),",
          "    _ => panic!(\"Expected Err with buffer_too_small\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let slice: Vec<u8> = vec![1, 2];",
          "    let at_least_len = 3;",
          "    let what = \"small slice\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "    assert!(check_slice_len(&slice, at_least_len, what).is_err());",
          "    match check_slice_len(&slice, at_least_len, what) {",
          "    Err(DeserializeError::buffer_too_small(message)) => assert_eq!(message, what),",
          "    _ => panic!(\"Expected Err with buffer_too_small\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Vec<u8> = vec![1, 2, 3, 4, 5];",
          "    let at_least_len = 6;",
          "    let what = \"large slice under bound\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(check_slice_len(&slice, at_least_len, what).is_err(), true);",
          "    assert_eq!(check_slice_len(&slice, at_least_len, what).unwrap_err(), DeserializeError::buffer_too_small(\"large slice under bound\"));"
        ],
        "code": [
          "{",
          "    let slice: Vec<u8> = vec![1, 2, 3, 4, 5];",
          "    let at_least_len = 6;",
          "    let what = \"large slice under bound\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "    assert_eq!(check_slice_len(&slice, at_least_len, what).is_err(), true);",
          "    assert_eq!(check_slice_len(&slice, at_least_len, what).unwrap_err(), DeserializeError::buffer_too_small(\"large slice under bound\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Vec<u8> = vec![1, 2, 3];",
          "    let at_least_len = 4;",
          "    let what = \"boundary case slice\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "}"
        ],
        "oracle": [
          "    Err(DeserializeError::buffer_too_small(\"boundary case slice\"))"
        ],
        "code": [
          "{",
          "    let slice: Vec<u8> = vec![1, 2, 3];",
          "    let at_least_len = 4;",
          "    let what = \"boundary case slice\";",
          "    check_slice_len(&slice, at_least_len, what);",
          "    Err(DeserializeError::buffer_too_small(\"boundary case slice\"))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]