[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";",
          "    let captures = re.captures_iter(haystack);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";",
          "    let captures = re.captures_iter(haystack);",
          "    assert_eq!(captures.haystack, haystack);",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap().get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(captures.it.next().unwrap().get(2).unwrap().as_str(), \"1941\");",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap().get(1).unwrap().as_str(), \"The Wizard of Oz\");",
          "    assert_eq!(captures.it.next().unwrap().get(2).unwrap().as_str(), \"1939\");",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap().get(1).unwrap().as_str(), \"M\");",
          "    assert_eq!(captures.it.next().unwrap().get(2).unwrap().as_str(), \"1931\");",
          "    assert!(captures.it.next().is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";",
          "    let captures = re.captures_iter(haystack);",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";",
          "    let captures = re.captures_iter(haystack);",
          "    assert_eq!(captures.haystack, haystack);",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap().get(1).unwrap().as_str(), \"Citizen Kane\");",
          "    assert_eq!(captures.it.next().unwrap().get(2).unwrap().as_str(), \"1941\");",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap().get(1).unwrap().as_str(), \"The Wizard of Oz\");",
          "    assert_eq!(captures.it.next().unwrap().get(2).unwrap().as_str(), \"1939\");",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap().get(1).unwrap().as_str(), \"M\");",
          "    assert_eq!(captures.it.next().unwrap().get(2).unwrap().as_str(), \"1931\");",
          "    assert!(captures.it.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"\";",
          "    let captures = re.captures_iter(haystack);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"\";",
          "    let captures = re.captures_iter(haystack);",
          "    assert_eq!(captures.haystack, haystack);",
          "    assert!(captures.it.next().is_none());",
          "    let re_with_named_groups = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();",
          "    let captured = re_with_named_groups.captures_iter(haystack);",
          "    assert_eq!(captured.haystack, haystack);",
          "    assert!(captured.it.next().is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"\";",
          "    let captures = re.captures_iter(haystack);",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"\";",
          "    let captures = re.captures_iter(haystack);",
          "    assert_eq!(captures.haystack, haystack);",
          "    assert!(captures.it.next().is_none());",
          "    let re_with_named_groups = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();",
          "    let captured = re_with_named_groups.captures_iter(haystack);",
          "    assert_eq!(captured.haystack, haystack);",
          "    assert!(captured.it.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"'Not a match' (abcd)\";",
          "    let captures = re.captures_iter(haystack);",
          "}"
        ],
        "oracle": [
          "    assert!(captures.haystack == \"'Not a match' (abcd)\");",
          "    assert!(captures.it.next().is_none());",
          "    assert!(captures.it.next().is_none());",
          "    assert!(captures.it.count() == 0);",
          "    ",
          "    let re2 = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();",
          "    let haystack2 = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";",
          "    let mut captures_iter = re2.captures_iter(haystack2);",
          "    let caps1 = captures_iter.next().unwrap();",
          "    assert_eq!(&caps1[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(&caps1[\"year\"], \"1941\");",
          "    let caps2 = captures_iter.next().unwrap();",
          "    assert_eq!(&caps2[\"title\"], \"The Wizard of Oz\");",
          "    assert_eq!(&caps2[\"year\"], \"1939\");",
          "    let caps3 = captures_iter.next().unwrap();",
          "    assert_eq!(&caps3[\"title\"], \"M\");",
          "    assert_eq!(&caps3[\"year\"], \"1931\");",
          "    assert!(captures_iter.next().is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();",
          "    let haystack = \"'Not a match' (abcd)\";",
          "    let captures = re.captures_iter(haystack);",
          "    assert!(captures.haystack == \"'Not a match' (abcd)\");",
          "    assert!(captures.it.next().is_none());",
          "    assert!(captures.it.next().is_none());",
          "    assert!(captures.it.count() == 0);",
          "    ",
          "    let re2 = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();",
          "    let haystack2 = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";",
          "    let mut captures_iter = re2.captures_iter(haystack2);",
          "    let caps1 = captures_iter.next().unwrap();",
          "    assert_eq!(&caps1[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(&caps1[\"year\"], \"1941\");",
          "    let caps2 = captures_iter.next().unwrap();",
          "    assert_eq!(&caps2[\"title\"], \"The Wizard of Oz\");",
          "    assert_eq!(&caps2[\"year\"], \"1939\");",
          "    let caps3 = captures_iter.next().unwrap();",
          "    assert_eq!(&caps3[\"title\"], \"M\");",
          "    assert_eq!(&caps3[\"year\"], \"1931\");",
          "    assert!(captures_iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();",
          "    let haystack = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939)\";",
          "    let captures = re.captures_iter(haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.haystack, haystack);",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap().extract().len(), 2);",
          "    assert_eq!(captures.it.next().unwrap()[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(captures.it.next().unwrap()[\"year\"], \"1941\");",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap()[\"title\"], \"The Wizard of Oz\");",
          "    assert_eq!(captures.it.next().unwrap()[\"year\"], \"1939\");",
          "    assert!(captures.it.next().is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();",
          "    let haystack = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939)\";",
          "    let captures = re.captures_iter(haystack);",
          "    assert_eq!(captures.haystack, haystack);",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap().extract().len(), 2);",
          "    assert_eq!(captures.it.next().unwrap()[\"title\"], \"Citizen Kane\");",
          "    assert_eq!(captures.it.next().unwrap()[\"year\"], \"1941\");",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap()[\"title\"], \"The Wizard of Oz\");",
          "    assert_eq!(captures.it.next().unwrap()[\"year\"], \"1939\");",
          "    assert!(captures.it.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\d+\").unwrap();",
          "    let haystack = \"There are 123 and 456.\";",
          "    let captures = re.captures_iter(haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.haystack, \"There are 123 and 456.\");",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap(), Some(&\"123\"));",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap(), Some(&\"456\"));",
          "    assert!(captures.it.next().is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\d+\").unwrap();",
          "    let haystack = \"There are 123 and 456.\";",
          "    let captures = re.captures_iter(haystack);",
          "    assert_eq!(captures.haystack, \"There are 123 and 456.\");",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap(), Some(&\"123\"));",
          "    assert!(captures.it.next().is_some());",
          "    assert_eq!(captures.it.next().unwrap(), Some(&\"456\"));",
          "    assert!(captures.it.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]