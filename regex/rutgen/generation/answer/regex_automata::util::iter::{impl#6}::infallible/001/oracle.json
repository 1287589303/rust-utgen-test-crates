[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"test input string\");",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let try_matches_iter = TryMatchesIter {",
          "        it: searcher,",
          "        finder: (),",
          "    };",
          "    let matches_iter = try_matches_iter.infallible();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matches_iter.0.it.input.data, \"test input string\");",
          "    assert!(matches_iter.0.it.last_match_end.is_none());",
          "    assert!(std::mem::size_of_val(&matches_iter) == std::mem::size_of::<MatchesIter<'_, ()>>());",
          "    assert!(matches_iter.0.it.finder == ());"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"test input string\");",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let try_matches_iter = TryMatchesIter {",
          "        it: searcher,",
          "        finder: (),",
          "    };",
          "    let matches_iter = try_matches_iter.infallible();",
          "    assert_eq!(matches_iter.0.it.input.data, \"test input string\");",
          "    assert!(matches_iter.0.it.last_match_end.is_none());",
          "    assert!(std::mem::size_of_val(&matches_iter) == std::mem::size_of::<MatchesIter<'_, ()>>());",
          "    assert!(matches_iter.0.it.finder == ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"another test\");",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let try_matches_iter = TryMatchesIter {",
          "        it: searcher,",
          "        finder: (),",
          "    };",
          "    let matches_iter = try_matches_iter.infallible();",
          "}"
        ],
        "oracle": [
          "    assert!(matches_iter.is_a::<MatchesIter>());",
          "    assert_eq!(matches_iter.0.it.input.text(), \"another test\");",
          "    assert_eq!(matches_iter.0.it.last_match_end, None);",
          "    assert!(matches_iter.0.it.finder == ());",
          "    assert!(matches_iter.0.it.input.is_initialized());"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"another test\");",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let try_matches_iter = TryMatchesIter {",
          "        it: searcher,",
          "        finder: (),",
          "    };",
          "    let matches_iter = try_matches_iter.infallible();",
          "    assert!(matches_iter.is_a::<MatchesIter>());",
          "    assert_eq!(matches_iter.0.it.input.text(), \"another test\");",
          "    assert_eq!(matches_iter.0.it.last_match_end, None);",
          "    assert!(matches_iter.0.it.finder == ());",
          "    assert!(matches_iter.0.it.input.is_initialized());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"large test input string to check performance and validity\");",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let try_matches_iter = TryMatchesIter {",
          "        it: searcher,",
          "        finder: (),",
          "    };",
          "    let matches_iter = try_matches_iter.infallible();",
          "}"
        ],
        "oracle": [
          "    assert!(matches_iter.is_a::<MatchesIter>());",
          "    assert_eq!(matches_iter.0.it.input.data(), \"large test input string to check performance and validity\");",
          "    assert!(matches_iter.0.it.last_match_end.is_none());",
          "    assert_eq!(std::mem::size_of_val(&matches_iter), std::mem::size_of::<MatchesIter>());",
          "    assert!(std::ptr::eq(&matches_iter.0.it, &try_matches_iter));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"large test input string to check performance and validity\");",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let try_matches_iter = TryMatchesIter {",
          "        it: searcher,",
          "        finder: (),",
          "    };",
          "    let matches_iter = try_matches_iter.infallible();",
          "    assert!(matches_iter.is_a::<MatchesIter>());",
          "    assert_eq!(matches_iter.0.it.input.data(), \"large test input string to check performance and validity\");",
          "    assert!(matches_iter.0.it.last_match_end.is_none());",
          "    assert_eq!(std::mem::size_of_val(&matches_iter), std::mem::size_of::<MatchesIter>());",
          "    assert!(std::ptr::eq(&matches_iter.0.it, &try_matches_iter));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"\");",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let try_matches_iter = TryMatchesIter {",
          "        it: searcher,",
          "        finder: (),",
          "    };",
          "    let matches_iter = try_matches_iter.infallible();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matches_iter.0.it.input, try_matches_iter.it.input);",
          "    assert!(matches_iter.0.it.last_match_end.is_none());",
          "    assert!(std::mem::size_of_val(&matches_iter) == std::mem::size_of_val(&try_matches_iter));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"\");",
          "    let searcher = Searcher {",
          "        input,",
          "        last_match_end: None,",
          "    };",
          "    let try_matches_iter = TryMatchesIter {",
          "        it: searcher,",
          "        finder: (),",
          "    };",
          "    let matches_iter = try_matches_iter.infallible();",
          "    assert_eq!(matches_iter.0.it.input, try_matches_iter.it.input);",
          "    assert!(matches_iter.0.it.last_match_end.is_none());",
          "    assert!(std::mem::size_of_val(&matches_iter) == std::mem::size_of_val(&try_matches_iter));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]