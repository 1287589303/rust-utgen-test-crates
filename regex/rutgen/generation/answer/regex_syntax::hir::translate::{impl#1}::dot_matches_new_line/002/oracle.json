[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &builder);",
          "    assert!(builder.flags.dot_matches_new_line.is_none());"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert_eq!(result, &builder);",
          "    assert!(builder.flags.dot_matches_new_line.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new().utf8(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    let builder = TranslatorBuilder::new().utf8(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert!(result.flags.dot_matches_new_line.is_none());",
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert_eq!(result.flags.dot_matches_new_line, Some(false));"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new().utf8(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "    let builder = TranslatorBuilder::new().utf8(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert!(result.flags.dot_matches_new_line.is_none());",
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert_eq!(result.flags.dot_matches_new_line, Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new().line_terminator(b'\\n');",
          "    let result = builder.dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert_eq!(result, &builder);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new().line_terminator(b'\\n');",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert_eq!(result, &builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new().case_insensitive(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert!(result as *const _ == &builder as *const _);",
          "    assert_eq!(builder.flags.dot_matches_new_line, None);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new().case_insensitive(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert!(result as *const _ == &builder as *const _);",
          "    assert_eq!(builder.flags.dot_matches_new_line, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new().multi_line(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert!(std::ptr::eq(result, &builder));"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new().multi_line(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert!(std::ptr::eq(result, &builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new().crlf(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert_eq!(result, &builder);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new().crlf(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert_eq!(result, &builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new().swap_greed(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &builder);",
          "    assert!(builder.flags.dot_matches_new_line.is_none());",
          "    assert!(builder.flags.swap_greed == Some(true));"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new().swap_greed(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert_eq!(result, &builder);",
          "    assert!(builder.flags.dot_matches_new_line.is_none());",
          "    assert!(builder.flags.swap_greed == Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new().unicode(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert!(result.is::<&mut TranslatorBuilder>());"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new().unicode(true);",
          "    let result = builder.dot_matches_new_line(false);",
          "    assert_eq!(result.flags.dot_matches_new_line, None);",
          "    assert!(result.is::<&mut TranslatorBuilder>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]