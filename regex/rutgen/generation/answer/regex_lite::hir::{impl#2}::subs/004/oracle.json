[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    ",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let repetition = Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(sub_hir) };",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0], sub_hir);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    ",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    let sub_hir = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let repetition = Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(sub_hir) };",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0], sub_hir);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    ",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: None };",
          "    let repetition = Repetition { min: 0, max: Some(5), greedy: false, sub: Box::new(sub_hir) };",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0].kind, HirKind::Empty);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    ",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    let sub_hir = Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: true, static_explicit_captures_len: None };",
          "    let repetition = Repetition { min: 0, max: Some(5), greedy: false, sub: Box::new(sub_hir) };",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0].kind, HirKind::Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Class(Class { ranges: vec![] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    ",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "}"
        ],
        "oracle": [
          "    let sub_hir = Hir { kind: HirKind::Class(Class { ranges: vec![] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let repetition = Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(sub_hir) };",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0], *sub_hir);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Class(Class { ranges: vec![] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    ",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    let sub_hir = Hir { kind: HirKind::Class(Class { ranges: vec![] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let repetition = Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(sub_hir) };",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0], *sub_hir);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Box::new(Hir {",
          "                kind: HirKind::Char('b'),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            }),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    ",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0], *sub_hir);",
          "    assert_eq!(subs[0].kind, HirKind::Capture(Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) }));",
          "    assert!(matches!(subs[0].kind, HirKind::Capture(_)));"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Capture(Capture {",
          "            index: 0,",
          "            name: None,",
          "            sub: Box::new(Hir {",
          "                kind: HirKind::Char('b'),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            }),",
          "        }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "    ",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0], *sub_hir);",
          "    assert_eq!(subs[0].kind, HirKind::Capture(Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) }));",
          "    assert!(matches!(subs[0].kind, HirKind::Capture(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Char('c'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0].kind, HirKind::Char('c'));",
          "    assert!(!subs.is_empty());",
          "    assert_eq!(subs[0].is_start_anchored, false);",
          "    assert_eq!(subs[0].is_match_empty, false);",
          "    assert_eq!(subs[0].static_explicit_captures_len, None);"
        ],
        "code": [
          "{",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Char('c'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let hir_kind = HirKind::Repetition(repetition);",
          "    ",
          "    let subs: &[Hir] = hir_kind.subs();",
          "    assert_eq!(subs.len(), 1);",
          "    assert_eq!(subs[0].kind, HirKind::Char('c'));",
          "    assert!(!subs.is_empty());",
          "    assert_eq!(subs[0].is_start_anchored, false);",
          "    assert_eq!(subs[0].is_match_empty, false);",
          "    assert_eq!(subs[0].static_explicit_captures_len, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]