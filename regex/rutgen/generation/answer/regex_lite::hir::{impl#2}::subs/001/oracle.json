[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let alternation = HirKind::Alternation(vec![Hir {",
          "        kind: HirKind::Capture(capture),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    }]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir.kind.subs();",
          "}"
        ],
        "oracle": [
          "    let capture = Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let alternation = HirKind::Alternation(vec![Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    let hir = Hir { kind: alternation, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = hir.kind.subs();",
          "    assert_eq!(result.len(), 1);",
          "    assert!(matches!(result[0], Hir { kind: HirKind::Capture(_), .. }));",
          "    assert_eq!(result[0].kind.subs().len(), 0);"
        ],
        "code": [
          "{",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: None,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let alternation = HirKind::Alternation(vec![Hir {",
          "        kind: HirKind::Capture(capture),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    }]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir.kind.subs();",
          "    let capture = Capture { index: 0, name: None, sub: Box::new(Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let alternation = HirKind::Alternation(vec![Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    let hir = Hir { kind: alternation, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = hir.kind.subs();",
          "    assert_eq!(result.len(), 1);",
          "    assert!(matches!(result[0], Hir { kind: HirKind::Capture(_), .. }));",
          "    assert_eq!(result[0].kind.subs().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition1 = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('a'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "    ",
          "    let repetition2 = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('b'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let alternation = HirKind::Alternation(vec![",
          "        Hir { kind: HirKind::Repetition(repetition1), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "        Hir { kind: HirKind::Repetition(repetition2), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "    ]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir.kind.subs();",
          "}"
        ],
        "oracle": [
          "    let repetition1 = Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let repetition2 = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let alternation = HirKind::Alternation(vec![Hir { kind: HirKind::Repetition(repetition1), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }, Hir { kind: HirKind::Repetition(repetition2), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    let hir = Hir { kind: alternation, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = hir.kind.subs();",
          "    assert_eq!(result.len(), 2);",
          "    assert_eq!(result[0].kind, HirKind::Repetition(repetition1));",
          "    assert_eq!(result[1].kind, HirKind::Repetition(repetition2));"
        ],
        "code": [
          "{",
          "    let repetition1 = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('a'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "    ",
          "    let repetition2 = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('b'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let alternation = HirKind::Alternation(vec![",
          "        Hir { kind: HirKind::Repetition(repetition1), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "        Hir { kind: HirKind::Repetition(repetition2), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "    ]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir.kind.subs();",
          "    let repetition1 = Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let repetition2 = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let alternation = HirKind::Alternation(vec![Hir { kind: HirKind::Repetition(repetition1), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }, Hir { kind: HirKind::Repetition(repetition2), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    let hir = Hir { kind: alternation, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = hir.kind.subs();",
          "    assert_eq!(result.len(), 2);",
          "    assert_eq!(result[0].kind, HirKind::Repetition(repetition1));",
          "    assert_eq!(result[1].kind, HirKind::Repetition(repetition2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let concat = HirKind::Concat(vec![",
          "        Hir {",
          "            kind: HirKind::Char('a'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('b'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        },",
          "    ]);",
          "",
          "    let alternation = HirKind::Alternation(vec![",
          "        Hir { kind: concat, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "    ]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir.kind.subs();",
          "}"
        ],
        "oracle": [
          "    let concat = HirKind::Concat(vec![Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }, Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    ",
          "    let alternation = HirKind::Alternation(vec![Hir { kind: concat, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    ",
          "    let hir = Hir { kind: alternation, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    ",
          "    let result = hir.kind.subs();",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(result[0].kind, concat);"
        ],
        "code": [
          "{",
          "    let concat = HirKind::Concat(vec![",
          "        Hir {",
          "            kind: HirKind::Char('a'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('b'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        },",
          "    ]);",
          "",
          "    let alternation = HirKind::Alternation(vec![",
          "        Hir { kind: concat, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "    ]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir.kind.subs();",
          "    let concat = HirKind::Concat(vec![Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }, Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    ",
          "    let alternation = HirKind::Alternation(vec![Hir { kind: concat, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    ",
          "    let hir = Hir { kind: alternation, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    ",
          "    let result = hir.kind.subs();",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(result[0].kind, concat);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capture = Capture {",
          "        index: 1,",
          "        name: Some(Box::from(\"captured\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let repetition = Repetition {",
          "        min: 2,",
          "        max: Some(5),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('c'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let alternation = HirKind::Alternation(vec![",
          "        Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "        Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "    ]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir.kind.subs();",
          "}"
        ],
        "oracle": [
          "    let capture = Capture { index: 1, name: Some(Box::from(\"captured\")), sub: Box::new(Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let repetition = Repetition { min: 2, max: Some(5), greedy: true, sub: Box::new(Hir { kind: HirKind::Char('c'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let alternation = HirKind::Alternation(vec![Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }, Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    let hir = Hir { kind: alternation, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let subs_result = hir.kind.subs();",
          "    assert_eq!(subs_result.len(), 2);",
          "    assert!(matches!(subs_result[0].kind, HirKind::Capture(_)));",
          "    assert!(matches!(subs_result[1].kind, HirKind::Repetition(_)));"
        ],
        "code": [
          "{",
          "    let capture = Capture {",
          "        index: 1,",
          "        name: Some(Box::from(\"captured\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let repetition = Repetition {",
          "        min: 2,",
          "        max: Some(5),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('c'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let alternation = HirKind::Alternation(vec![",
          "        Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "        Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None },",
          "    ]);",
          "    ",
          "    let hir = Hir {",
          "        kind: alternation,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir.kind.subs();",
          "    let capture = Capture { index: 1, name: Some(Box::from(\"captured\")), sub: Box::new(Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let repetition = Repetition { min: 2, max: Some(5), greedy: true, sub: Box::new(Hir { kind: HirKind::Char('c'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let alternation = HirKind::Alternation(vec![Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }, Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "    let hir = Hir { kind: alternation, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let subs_result = hir.kind.subs();",
          "    assert_eq!(subs_result.len(), 2);",
          "    assert!(matches!(subs_result[0].kind, HirKind::Capture(_)));",
          "    assert!(matches!(subs_result[1].kind, HirKind::Repetition(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]