[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('a'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let hir_concat = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Repetition(repetition),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            },",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir_concat.kind.subs();",
          "}"
        ],
        "oracle": [
          "    let repetition = Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let hir_concat = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    assert_eq!(hir_concat.kind.subs(), &[Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);"
        ],
        "code": [
          "{",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('a'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let hir_concat = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Repetition(repetition),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            },",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir_concat.kind.subs();",
          "    let repetition = Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let hir_concat = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    assert_eq!(hir_concat.kind.subs(), &[Hir { kind: HirKind::Repetition(repetition), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: Some(Box::from(\"group\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('b'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let hir_concat = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Capture(capture),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            },",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir_concat.kind.subs();",
          "}"
        ],
        "oracle": [
          "    let capture = Capture { index: 0, name: Some(Box::from(\"group\")), sub: Box::new(Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let hir_concat = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = hir_concat.kind.subs();",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(result[0].kind, HirKind::Capture(capture));"
        ],
        "code": [
          "{",
          "    let capture = Capture {",
          "        index: 0,",
          "        name: Some(Box::from(\"group\")),",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Char('b'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: None,",
          "        }),",
          "    };",
          "",
          "    let hir_concat = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Capture(capture),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            },",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir_concat.kind.subs();",
          "    let capture = Capture { index: 0, name: Some(Box::from(\"group\")), sub: Box::new(Hir { kind: HirKind::Char('b'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }) };",
          "    let hir_concat = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Capture(capture), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = hir_concat.kind.subs();",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(result[0].kind, HirKind::Capture(capture));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nested_concat = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Char('c'),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            },",
          "            Hir {",
          "                kind: HirKind::Char('d'),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            },",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let hir_concat = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            nested_concat,",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir_concat.kind.subs();",
          "}"
        ],
        "oracle": [
          "    let nested_concat = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Char('c'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, }, Hir { kind: HirKind::Char('d'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, }, ]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, };",
          "    ",
          "    let hir_concat = Hir { kind: HirKind::Concat(vec![nested_concat]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, };",
          "    ",
          "    let result = hir_concat.kind.subs();",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(result[0].kind, HirKind::Concat(vec![Hir { kind: HirKind::Char('c'), .. }, Hir { kind: HirKind::Char('d'), .. }]));"
        ],
        "code": [
          "{",
          "    let nested_concat = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Char('c'),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            },",
          "            Hir {",
          "                kind: HirKind::Char('d'),",
          "                is_start_anchored: false,",
          "                is_match_empty: false,",
          "                static_explicit_captures_len: None,",
          "            },",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let hir_concat = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            nested_concat,",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let _ = hir_concat.kind.subs();",
          "    let nested_concat = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Char('c'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, }, Hir { kind: HirKind::Char('d'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, }, ]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, };",
          "    ",
          "    let hir_concat = Hir { kind: HirKind::Concat(vec![nested_concat]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None, };",
          "    ",
          "    let result = hir_concat.kind.subs();",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(result[0].kind, HirKind::Concat(vec![Hir { kind: HirKind::Char('c'), .. }, Hir { kind: HirKind::Char('d'), .. }]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]