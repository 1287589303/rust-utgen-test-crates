[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![0; 10], classes: ByteClasses::default(), stride2: 2},",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![0; 4], pattern_ids: vec![0; 4], pattern_len: 1 },",
          "        special: Special { max: 10, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 },",
          "        accels: Accels { accels: vec![0; 4] },",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "",
          "    let mut dst = vec![0; dfa.write_to_len()];",
          "    let result = dfa.write_to::<LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(dst.len(), dfa.write_to_len());",
          "    assert!(wire::write_label(LABEL, &mut dst[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<LittleEndian>(&mut dst[..]).is_ok());",
          "    assert!(wire::write_version::<LittleEndian>(VERSION, &mut dst[..]).is_ok());",
          "    assert!(self.flags.write_to::<LittleEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.tt.write_to::<LittleEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.st.write_to::<LittleEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.ms.write_to::<LittleEndian>(&mut dst[..]).is_err());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![0; 10], classes: ByteClasses::default(), stride2: 2},",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![0; 4], pattern_ids: vec![0; 4], pattern_len: 1 },",
          "        special: Special { max: 10, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 },",
          "        accels: Accels { accels: vec![0; 4] },",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "",
          "    let mut dst = vec![0; dfa.write_to_len()];",
          "    let result = dfa.write_to::<LittleEndian>(&mut dst);",
          "    assert!(result.is_ok());",
          "    assert_eq!(dst.len(), dfa.write_to_len());",
          "    assert!(wire::write_label(LABEL, &mut dst[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<LittleEndian>(&mut dst[..]).is_ok());",
          "    assert!(wire::write_version::<LittleEndian>(VERSION, &mut dst[..]).is_ok());",
          "    assert!(self.flags.write_to::<LittleEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.tt.write_to::<LittleEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.st.write_to::<LittleEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.ms.write_to::<LittleEndian>(&mut dst[..]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![0; 10], classes: ByteClasses::default(), stride2: 2 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![0; 4], pattern_ids: vec![0; 4], pattern_len: 1 },",
          "        special: Special { max: 10, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 },",
          "        accels: Accels { accels: vec![0; 4] },",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "",
          "    let mut dst = vec![0; dfa.write_to_len()];",
          "    let result = dfa.write_to::<BigEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), dfa.write_to_len());",
          "    assert!(result.is_ok());",
          "    assert!(wire::write_label(LABEL, &mut dst[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<BigEndian>(&mut dst[..]).is_ok());",
          "    assert!(wire::write_version::<BigEndian>(VERSION, &mut dst[..]).is_ok());",
          "    assert!(self.flags.write_to::<BigEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.tt.write_to::<BigEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.st.write_to::<BigEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.ms.write_to::<BigEndian>(&mut dst[..]).is_err());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![0; 10], classes: ByteClasses::default(), stride2: 2 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![0; 4], pattern_ids: vec![0; 4], pattern_len: 1 },",
          "        special: Special { max: 10, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 },",
          "        accels: Accels { accels: vec![0; 4] },",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "",
          "    let mut dst = vec![0; dfa.write_to_len()];",
          "    let result = dfa.write_to::<BigEndian>(&mut dst);",
          "    assert_eq!(dst.len(), dfa.write_to_len());",
          "    assert!(result.is_ok());",
          "    assert!(wire::write_label(LABEL, &mut dst[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<BigEndian>(&mut dst[..]).is_ok());",
          "    assert!(wire::write_version::<BigEndian>(VERSION, &mut dst[..]).is_ok());",
          "    assert!(self.flags.write_to::<BigEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.tt.write_to::<BigEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.st.write_to::<BigEndian>(&mut dst[..]).is_ok());",
          "    assert!(self.ms.write_to::<BigEndian>(&mut dst[..]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![0; 10], classes: ByteClasses::default(), stride2: 2 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![0; 4], pattern_ids: vec![0; 4], pattern_len: 1 },",
          "        special: Special { max: 10, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 },",
          "        accels: Accels { accels: vec![0; 4] },",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "",
          "    let mut dst = vec![0; dfa.write_to_len()];",
          "    let result = dfa.write_to::<NativeEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), dfa.write_to_len());",
          "    assert!(wire::write_label(LABEL, &mut dst[0..]).is_ok());",
          "    assert!(wire::write_endianness_check::<NativeEndian>(&mut dst[0..]).is_ok());",
          "    assert!(wire::write_version::<NativeEndian>(VERSION, &mut dst[0..]).is_ok());",
          "    assert!(dfa.flags.write_to::<NativeEndian>(&mut dst[0..]).is_ok());",
          "    assert!(dfa.tt.write_to::<NativeEndian>(&mut dst[0..]).is_ok());",
          "    assert!(dfa.st.write_to::<NativeEndian>(&mut dst[0..]).is_ok());",
          "    assert!(dfa.ms.write_to::<NativeEndian>(&mut dst[0..]).is_err());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![0; 10], classes: ByteClasses::default(), stride2: 2 },",
          "        st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: MatchStates { slices: vec![0; 4], pattern_ids: vec![0; 4], pattern_len: 1 },",
          "        special: Special { max: 10, quit_id: 0, min_match: 0, max_match: 1, min_accel: 0, max_accel: 1, min_start: 0, max_start: 1 },",
          "        accels: Accels { accels: vec![0; 4] },",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "",
          "    let mut dst = vec![0; dfa.write_to_len()];",
          "    let result = dfa.write_to::<NativeEndian>(&mut dst);",
          "    assert_eq!(dst.len(), dfa.write_to_len());",
          "    assert!(wire::write_label(LABEL, &mut dst[0..]).is_ok());",
          "    assert!(wire::write_endianness_check::<NativeEndian>(&mut dst[0..]).is_ok());",
          "    assert!(wire::write_version::<NativeEndian>(VERSION, &mut dst[0..]).is_ok());",
          "    assert!(dfa.flags.write_to::<NativeEndian>(&mut dst[0..]).is_ok());",
          "    assert!(dfa.tt.write_to::<NativeEndian>(&mut dst[0..]).is_ok());",
          "    assert!(dfa.st.write_to::<NativeEndian>(&mut dst[0..]).is_ok());",
          "    assert!(dfa.ms.write_to::<NativeEndian>(&mut dst[0..]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]