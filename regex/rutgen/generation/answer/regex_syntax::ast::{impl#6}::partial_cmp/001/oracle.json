[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span1 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 0, line: 1, column: 1 },",
          "    };",
          "    let span2 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 0, line: 1, column: 1 },",
          "    };",
          "    span1.partial_cmp(&span2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span1.partial_cmp(&span2), Some(Ordering::Equal));",
          "    assert!(span1.partial_cmp(&span1).is_some());",
          "    assert!(span1.partial_cmp(&span2).is_some());",
          "    assert!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 1 }}).is_some());",
          "    assert!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 2, column: 1 }, end: Position { offset: 0, line: 2, column: 1 }}).is_some());",
          "    assert_ne!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 2 }}), Some(Ordering::Equal));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 1 }}), Some(Ordering::Less));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 }}), Some(Ordering::Less));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 1 }}), Some(Ordering::Greater));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 0, column: 1 }, end: Position { offset: 0, line: 1, column: 1 }}), Some(Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let span1 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 0, line: 1, column: 1 },",
          "    };",
          "    let span2 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 0, line: 1, column: 1 },",
          "    };",
          "    span1.partial_cmp(&span2);",
          "    assert_eq!(span1.partial_cmp(&span2), Some(Ordering::Equal));",
          "    assert!(span1.partial_cmp(&span1).is_some());",
          "    assert!(span1.partial_cmp(&span2).is_some());",
          "    assert!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 1 }}).is_some());",
          "    assert!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 2, column: 1 }, end: Position { offset: 0, line: 2, column: 1 }}).is_some());",
          "    assert_ne!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 2 }}), Some(Ordering::Equal));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 1 }}), Some(Ordering::Less));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 }}), Some(Ordering::Less));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 1 }}), Some(Ordering::Greater));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 0, column: 1 }, end: Position { offset: 0, line: 1, column: 1 }}), Some(Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span1 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 1, line: 1, column: 2 },",
          "    };",
          "    let span2 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 0, line: 1, column: 1 },",
          "    };",
          "    span1.partial_cmp(&span2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span1.partial_cmp(&span2), Some(Ordering::Greater));",
          "    span1.partial_cmp(&span1);",
          "    assert_eq!(span1.partial_cmp(&span1), Some(Ordering::Equal));",
          "    span2.partial_cmp(&span1);",
          "    assert_eq!(span2.partial_cmp(&span1), Some(Ordering::Less));",
          "    span1.partial_cmp(&Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } });",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } }), Some(Ordering::Less));"
        ],
        "code": [
          "{",
          "    let span1 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 1, line: 1, column: 2 },",
          "    };",
          "    let span2 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 0, line: 1, column: 1 },",
          "    };",
          "    span1.partial_cmp(&span2);",
          "    assert_eq!(span1.partial_cmp(&span2), Some(Ordering::Greater));",
          "    span1.partial_cmp(&span1);",
          "    assert_eq!(span1.partial_cmp(&span1), Some(Ordering::Equal));",
          "    span2.partial_cmp(&span1);",
          "    assert_eq!(span2.partial_cmp(&span1), Some(Ordering::Less));",
          "    span1.partial_cmp(&Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } });",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } }), Some(Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span1 = Span {",
          "        start: Position { offset: 1, line: 1, column: 2 },",
          "        end: Position { offset: 0, line: 1, column: 1 },",
          "    };",
          "    let span2 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 1, line: 1, column: 2 },",
          "    };",
          "    span1.partial_cmp(&span2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span1.partial_cmp(&span2), Some(Ordering::Greater));",
          "    assert_eq!(span2.partial_cmp(&span1), Some(Ordering::Less));",
          "    assert_eq!(span1.partial_cmp(&span1), Some(Ordering::Equal));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 } }), Some(Ordering::Equal));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } }), Some(Ordering::Less));",
          "    assert_eq!(span2.partial_cmp(&Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } }), Some(Ordering::Greater));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 2, column: 2 }, end: Position { offset: 0, line: 1, column: 1 } }), Some(Ordering::Greater));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 1, line: 2, column: 2 } }), Some(Ordering::Less));"
        ],
        "code": [
          "{",
          "    let span1 = Span {",
          "        start: Position { offset: 1, line: 1, column: 2 },",
          "        end: Position { offset: 0, line: 1, column: 1 },",
          "    };",
          "    let span2 = Span {",
          "        start: Position { offset: 0, line: 1, column: 1 },",
          "        end: Position { offset: 1, line: 1, column: 2 },",
          "    };",
          "    span1.partial_cmp(&span2);",
          "    assert_eq!(span1.partial_cmp(&span2), Some(Ordering::Greater));",
          "    assert_eq!(span2.partial_cmp(&span1), Some(Ordering::Less));",
          "    assert_eq!(span1.partial_cmp(&span1), Some(Ordering::Equal));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 } }), Some(Ordering::Equal));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } }), Some(Ordering::Less));",
          "    assert_eq!(span2.partial_cmp(&Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } }), Some(Ordering::Greater));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 1, line: 2, column: 2 }, end: Position { offset: 0, line: 1, column: 1 } }), Some(Ordering::Greater));",
          "    assert_eq!(span1.partial_cmp(&Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 1, line: 2, column: 2 } }), Some(Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span1 = Span {",
          "        start: Position { offset: 1, line: 1, column: 2 },",
          "        end: Position { offset: 1, line: 1, column: 2 },",
          "    };",
          "    let span2 = Span {",
          "        start: Position { offset: 1, line: 1, column: 2 },",
          "        end: Position { offset: 1, line: 1, column: 2 },",
          "    };",
          "    span1.partial_cmp(&span2);",
          "}"
        ],
        "oracle": [
          "    let span1 = Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 } };",
          "    let span2 = Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 } };",
          "    assert_eq!(span1.partial_cmp(&span2), Some(Ordering::Equal));",
          "    ",
          "    let span3 = Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } };",
          "    let span4 = Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 } };",
          "    assert_eq!(span3.partial_cmp(&span4), Some(Ordering::Greater));",
          "    ",
          "    let span5 = Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 2, line: 1, column: 3 } };",
          "    let span6 = Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 2, line: 1, column: 3 } };",
          "    assert_eq!(span5.partial_cmp(&span6), Some(Ordering::Less));"
        ],
        "code": [
          "{",
          "    let span1 = Span {",
          "        start: Position { offset: 1, line: 1, column: 2 },",
          "        end: Position { offset: 1, line: 1, column: 2 },",
          "    };",
          "    let span2 = Span {",
          "        start: Position { offset: 1, line: 1, column: 2 },",
          "        end: Position { offset: 1, line: 1, column: 2 },",
          "    };",
          "    span1.partial_cmp(&span2);",
          "    let span1 = Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 } };",
          "    let span2 = Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 } };",
          "    assert_eq!(span1.partial_cmp(&span2), Some(Ordering::Equal));",
          "    ",
          "    let span3 = Span { start: Position { offset: 2, line: 1, column: 3 }, end: Position { offset: 3, line: 1, column: 4 } };",
          "    let span4 = Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 1, line: 1, column: 2 } };",
          "    assert_eq!(span3.partial_cmp(&span4), Some(Ordering::Greater));",
          "    ",
          "    let span5 = Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 2, line: 1, column: 3 } };",
          "    let span6 = Span { start: Position { offset: 1, line: 1, column: 2 }, end: Position { offset: 2, line: 1, column: 3 } };",
          "    assert_eq!(span5.partial_cmp(&span6), Some(Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]