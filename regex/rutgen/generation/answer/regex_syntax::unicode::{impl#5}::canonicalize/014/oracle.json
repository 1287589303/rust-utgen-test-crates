[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::OneLetter('A');",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::OneLetter('A');",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canonical_query = result.unwrap();",
          "    match canonical_query {",
          "    CanonicalClassQuery::Binary(name) => assert_eq!(name, \"A\"),",
          "    _ => panic!(\"Expected CanonicalClassQuery::Binary for OneLetter 'A'\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::OneLetter('A');",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::OneLetter('A');",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canonical_query = result.unwrap();",
          "    match canonical_query {",
          "    CanonicalClassQuery::Binary(name) => assert_eq!(name, \"A\"),",
          "    _ => panic!(\"Expected CanonicalClassQuery::Binary for OneLetter 'A'\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"sc\");",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Script\")));",
          "    let query = ClassQuery::OneLetter('A');",
          "    assert_eq!(query.canonicalize().is_ok(), true);",
          "    let query = ClassQuery::OneLetter('0');",
          "    assert!(query.canonicalize().is_err());",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
          "    assert_eq!(query.canonicalize().unwrap(), CanonicalClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" });",
          "    let query = ClassQuery::Binary(\"xyz\");",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"sc\");",
          "    let _ = query.canonicalize();",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Script\")));",
          "    let query = ClassQuery::OneLetter('A');",
          "    assert_eq!(query.canonicalize().is_ok(), true);",
          "    let query = ClassQuery::OneLetter('0');",
          "    assert!(query.canonicalize().is_err());",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
          "    assert_eq!(query.canonicalize().unwrap(), CanonicalClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" });",
          "    let query = ClassQuery::Binary(\"xyz\");",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"Lu\",",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Lu\")));",
          "    let query = ClassQuery::OneLetter('a');",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Letter\")));",
          "    let query = ClassQuery::Binary(\"Letter\");",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Letter\")));",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Latin\")));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Ll\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Ll\")));",
          "    let query = ClassQuery::ByValue { property_name: \"Nonexistent_Property\", property_value: \"Value\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Nonexistent_Value\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"Lu\",",
          "    };",
          "    let _ = query.canonicalize();",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Lu\")));",
          "    let query = ClassQuery::OneLetter('a');",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Letter\")));",
          "    let query = ClassQuery::Binary(\"Letter\");",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"Letter\")));",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Latin\")));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Ll\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Ll\")));",
          "    let query = ClassQuery::ByValue { property_name: \"Nonexistent_Property\", property_value: \"Value\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Nonexistent_Value\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script\",",
          "        property_value: \"Latin\",",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script\",",
          "        property_value: \"Latin\",",
          "    };",
          "    let _ = query.canonicalize();",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]