[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"NonCanonicalProperty\",",
          "        property_value: \"SomeValue\",",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"NonCanonicalProperty\", property_value: \"SomeValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"NonCanonicalProperty\",",
          "        property_value: \"SomeValue\",",
          "    };",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"NonCanonicalProperty\", property_value: \"SomeValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"AnotherNonCanonicalProperty\",",
          "        property_value: \"\",",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"AnotherNonCanonicalProperty\",",
          "        property_value: \"\",",
          "    };",
          "    let _ = query.canonicalize();",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Invalid@PropertyName!\",",
          "        property_value: \"SomeUniqueValue\",",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Invalid@PropertyName!\",",
          "        property_value: \"SomeUniqueValue\",",
          "    };",
          "    let _ = query.canonicalize();",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]