[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"assigned\"",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canonical_query = result.unwrap();",
          "    assert_eq!(canonical_query, CanonicalClassQuery::GeneralCategory(\"Assigned\"));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"assigned\"",
          "    };",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canonical_query = result.unwrap();",
          "    assert_eq!(canonical_query, CanonicalClassQuery::GeneralCategory(\"Assigned\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"invalid_category\"",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"valid_category\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"valid_category\")));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"invalid_category\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"other_property\", property_value: \"some_value\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"canonical_name\", property_value: \"canonical_value\" }));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"invalid_script\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"invalid_category\"",
          "    };",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"valid_category\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"valid_category\")));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"invalid_category\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"other_property\", property_value: \"some_value\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"canonical_name\", property_value: \"canonical_value\" }));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"invalid_script\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"any\"",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canon_query = result.unwrap();",
          "    assert_eq!(canon_query, CanonicalClassQuery::GeneralCategory(\"Any\"));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"non_existent\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Error::PropertyValueNotFound);",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canon_query = result.unwrap();",
          "    assert_eq!(canon_query, CanonicalClassQuery::GeneralCategory(\"Assigned\"));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"unknown_value\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Error::PropertyValueNotFound);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"any\"",
          "    };",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canon_query = result.unwrap();",
          "    assert_eq!(canon_query, CanonicalClassQuery::GeneralCategory(\"Any\"));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"non_existent\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Error::PropertyValueNotFound);",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canon_query = result.unwrap();",
          "    assert_eq!(canon_query, CanonicalClassQuery::GeneralCategory(\"Assigned\"));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"unknown_value\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), Error::PropertyValueNotFound);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Invalid_Property\",",
          "        property_value: \"assigned\"",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"Valid_Property\", property_value: \"assigned\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
          "    let query = ClassQuery::ByValue { property_name: \"Valid_Property\", property_value: \"invalid_value\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Latin\")));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"nonexistent\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Invalid_Property\",",
          "        property_value: \"assigned\"",
          "    };",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"Valid_Property\", property_value: \"assigned\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
          "    let query = ClassQuery::ByValue { property_name: \"Valid_Property\", property_value: \"invalid_value\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Script(\"Latin\")));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"nonexistent\" };",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"\"",
          "    };",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"unknown\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err() && matches!(result, Err(Error::PropertyValueNotFound)));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"ascii\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ASCII\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Non_Existent_Property\", property_value: \"any\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err() && matches!(result, Err(Error::PropertyNotFound)));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"other\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err() && matches!(result, Err(Error::PropertyValueNotFound)));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"General_Category\",",
          "        property_value: \"\"",
          "    };",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"any\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Any\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"assigned\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"unknown\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err() && matches!(result, Err(Error::PropertyValueNotFound)));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"ascii\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ASCII\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Non_Existent_Property\", property_value: \"any\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err() && matches!(result, Err(Error::PropertyNotFound)));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"other\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err() && matches!(result, Err(Error::PropertyValueNotFound)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]