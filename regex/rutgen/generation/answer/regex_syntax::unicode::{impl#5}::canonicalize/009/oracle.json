[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"ValidProperty\",",
          "        property_value: \"ValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"SomeValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"SomeValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"ValidValue\" }; assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"SomeCanonicalValue\" }));",
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"InvalidValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"ValidProperty\",",
          "        property_value: \"ValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"SomeValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"SomeValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"ValidValue\" }; assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"SomeCanonicalValue\" }));",
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"InvalidValue\" }; assert_eq!(query.canonicalize(), Err(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"InvalidProperty\",",
          "        property_value: \"ValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"General_Category\",",
          "    property_value: \"InvalidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"General_Category\",",
          "    property_value: \"Assigned\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    match result.unwrap() {",
          "    CanonicalClassQuery::GeneralCategory(ref canon) => {",
          "    assert_eq!(canon, \"Assigned\");",
          "    }",
          "    _ => panic!(\"Expected GeneralCategory variant\"),",
          "    }",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script\",",
          "    property_value: \"InvalidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script\",",
          "    property_value: \"Latin\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    match result.unwrap() {",
          "    CanonicalClassQuery::Script(ref canon) => {",
          "    assert_eq!(canon, \"Latin\");",
          "    }",
          "    _ => panic!(\"Expected Script variant\"),",
          "    }",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"CustomProperty\",",
          "    property_value: \"ValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    match result.unwrap() {",
          "    CanonicalClassQuery::ByValue { property_name, property_value } => {",
          "    assert_eq!(property_name, \"CustomProperty\");",
          "    assert_eq!(property_value, \"ValidValue\");",
          "    }",
          "    _ => panic!(\"Expected ByValue variant\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"InvalidProperty\",",
          "        property_value: \"ValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"General_Category\",",
          "    property_value: \"InvalidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"General_Category\",",
          "    property_value: \"Assigned\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    match result.unwrap() {",
          "    CanonicalClassQuery::GeneralCategory(ref canon) => {",
          "    assert_eq!(canon, \"Assigned\");",
          "    }",
          "    _ => panic!(\"Expected GeneralCategory variant\"),",
          "    }",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script\",",
          "    property_value: \"InvalidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"Script\",",
          "    property_value: \"Latin\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    match result.unwrap() {",
          "    CanonicalClassQuery::Script(ref canon) => {",
          "    assert_eq!(canon, \"Latin\");",
          "    }",
          "    _ => panic!(\"Expected Script variant\"),",
          "    }",
          "    ",
          "    let query = ClassQuery::ByValue {",
          "    property_name: \"CustomProperty\",",
          "    property_value: \"ValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    match result.unwrap() {",
          "    CanonicalClassQuery::ByValue { property_name, property_value } => {",
          "    assert_eq!(property_name, \"CustomProperty\");",
          "    assert_eq!(property_value, \"ValidValue\");",
          "    }",
          "    _ => panic!(\"Expected ByValue variant\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"SomeProperty\",",
          "        property_value: \"InvalidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"InvalidValue\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result.unwrap(), CanonicalClassQuery::ByValue { property_name, property_value } if property_name == \"SomeProperty\" && property_value == \"ExpectedValue\"));",
          "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
          "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err() == Error::PropertyValueNotFound);",
          "    assert!(result.unwrap().is_some());",
          "    assert!(matches!(result.unwrap(), CanonicalClassQuery::GeneralCategory(_)));",
          "    assert!(matches!(result.unwrap(), CanonicalClassQuery::Script(_)));",
          "    assert!(result.unwrap_err() == Error::PropertyNotFound);"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"SomeProperty\",",
          "        property_value: \"InvalidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"InvalidValue\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result.unwrap(), CanonicalClassQuery::ByValue { property_name, property_value } if property_name == \"SomeProperty\" && property_value == \"ExpectedValue\"));",
          "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
          "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err() == Error::PropertyValueNotFound);",
          "    assert!(result.unwrap().is_some());",
          "    assert!(matches!(result.unwrap(), CanonicalClassQuery::GeneralCategory(_)));",
          "    assert!(matches!(result.unwrap(), CanonicalClassQuery::Script(_)));",
          "    assert!(result.unwrap_err() == Error::PropertyNotFound);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script\",",
          "        property_value: \"InvalidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"InvalidValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Assigned\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Latin\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"NonExistentProperty\", property_value: \"SomeValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"InvalidValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"NonExistentValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"ASCII\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ASCII\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Greek\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Greek\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"SomeValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"Script\",",
          "        property_value: \"InvalidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"InvalidValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"Assigned\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"Assigned\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Latin\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Latin\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"NonExistentProperty\", property_value: \"SomeValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"InvalidValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"NonExistentValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"General_Category\", property_value: \"ASCII\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"ASCII\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"Script\", property_value: \"Greek\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Greek\")));",
          "    ",
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"SomeValue\" };",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"SomeProperty\",",
          "        property_value: \"AnotherValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    query.canonicalize().is_ok();",
          "    query.canonicalize().unwrap() is_a(CanonicalClassQuery::ByValue { property_name: \"SomeProperty\", property_value: any() });",
          "    canonical_prop(\"SomeProperty\") is_ok();",
          "    canonical_prop(\"SomeProperty\") is_none();",
          "    property_values(canonical_prop(\"SomeProperty\")?) is_none();",
          "    property_values(canonical_prop(\"SomeProperty\")?) is_some();",
          "    canonical_value(property_values(canonical_prop(\"SomeProperty\")?)?, \"AnotherValidValue\") is_some();",
          "    result.unwrap() matches Ok(CanonicalClassQuery::ByValue { property_name: any(), property_value: any() });"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"SomeProperty\",",
          "        property_value: \"AnotherValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    query.canonicalize().is_ok();",
          "    query.canonicalize().unwrap() is_a(CanonicalClassQuery::ByValue { property_name: \"SomeProperty\", property_value: any() });",
          "    canonical_prop(\"SomeProperty\") is_ok();",
          "    canonical_prop(\"SomeProperty\") is_none();",
          "    property_values(canonical_prop(\"SomeProperty\")?) is_none();",
          "    property_values(canonical_prop(\"SomeProperty\")?) is_some();",
          "    canonical_value(property_values(canonical_prop(\"SomeProperty\")?)?, \"AnotherValidValue\") is_some();",
          "    result.unwrap() matches Ok(CanonicalClassQuery::ByValue { property_name: any(), property_value: any() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"SomeProperty\",",
          "        property_value: \"AnotherValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"AnotherValidValue\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canonical_class_query = result.unwrap();",
          "    assert!(matches!(canonical_class_query, CanonicalClassQuery::ByValue { property_name, property_value }));",
          "    let canon_name = // obtain canon_name from the context;",
          "    assert_ne!(canon_name, \"General_Category\");",
          "    assert_ne!(canon_name, \"Script\");",
          "    let vals = property_values(canon_name).unwrap().unwrap();",
          "    assert!(canonical_value(vals, \"AnotherValidValue\").is_some());"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::ByValue {",
          "        property_name: \"SomeProperty\",",
          "        property_value: \"AnotherValidValue\",",
          "    };",
          "    let result = query.canonicalize();",
          "    let query = ClassQuery::ByValue { property_name: \"SomeProperty\", property_value: \"AnotherValidValue\" };",
          "    let result = query.canonicalize();",
          "    assert!(result.is_ok());",
          "    let canonical_class_query = result.unwrap();",
          "    assert!(matches!(canonical_class_query, CanonicalClassQuery::ByValue { property_name, property_value }));",
          "    let canon_name = // obtain canon_name from the context;",
          "    assert_ne!(canon_name, \"General_Category\");",
          "    assert_ne!(canon_name, \"Script\");",
          "    let vals = property_values(canon_name).unwrap().unwrap();",
          "    assert!(canonical_value(vals, \"AnotherValidValue\").is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]