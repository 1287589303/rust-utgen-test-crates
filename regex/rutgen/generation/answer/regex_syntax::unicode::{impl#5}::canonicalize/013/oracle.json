[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"cf\");",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"cf\")));",
          "    let query = ClassQuery::Binary(\"unknown_property\");",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::Binary(\"sc\");",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"sc\")));",
          "    let query = ClassQuery::Binary(\"lc\");",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"lc\")));",
          "    let query = ClassQuery::Binary(\"invalid_property\");",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"cf\");",
          "    let _ = query.canonicalize();",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"cf\")));",
          "    let query = ClassQuery::Binary(\"unknown_property\");",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
          "    let query = ClassQuery::Binary(\"sc\");",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"sc\")));",
          "    let query = ClassQuery::Binary(\"lc\");",
          "    assert_eq!(query.canonicalize(), Ok(CanonicalClassQuery::Binary(\"lc\")));",
          "    let query = ClassQuery::Binary(\"invalid_property\");",
          "    assert_eq!(query.canonicalize(), Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"General_Category\");",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"General_Category\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"General_Category\")));",
          "    ",
          "    let query = ClassQuery::Binary(\"Script\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Script\")));",
          "    ",
          "    let query = ClassQuery::Binary(\"NonExistent\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    ",
          "    let query = ClassQuery::Binary(\"cf\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    ",
          "    let query = ClassQuery::Binary(\"lc\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"General_Category\");",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::Binary(\"General_Category\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::GeneralCategory(\"General_Category\")));",
          "    ",
          "    let query = ClassQuery::Binary(\"Script\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Ok(CanonicalClassQuery::Script(\"Script\")));",
          "    ",
          "    let query = ClassQuery::Binary(\"NonExistent\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    ",
          "    let query = ClassQuery::Binary(\"cf\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    ",
          "    let query = ClassQuery::Binary(\"lc\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"Script\");",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"Script\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), CanonicalClassQuery::Script(\"Script\"));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"Script\");",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::Binary(\"Script\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), CanonicalClassQuery::Script(\"Script\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
          "    let _ = query.canonicalize();",
          "    let query = ClassQuery::Binary(\"Invalid_Property_Name\");",
          "    let result = query.canonicalize();",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"lc\");",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    Result::Ok(CanonicalClassQuery::Binary(\"lc\"))"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"lc\");",
          "    let _ = query.canonicalize();",
          "    Result::Ok(CanonicalClassQuery::Binary(\"lc\"))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let query = ClassQuery::Binary(\"Non_Existent\");",
          "    let _ = query.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Err(Error::PropertyNotFound));"
        ],
        "code": [
          "{",
          "    let query = ClassQuery::Binary(\"Non_Existent\");",
          "    let _ = query.canonicalize();",
          "    assert_eq!(_ , Err(Error::PropertyNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]