[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'!'; // Outside the valid ranges",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'!'), false);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), false);",
          "    assert_eq!(is_valid_cap_letter(b'a'), false);",
          "    assert_eq!(is_valid_cap_letter(b'A'), false);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'!'; // Outside the valid ranges",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'!'), false);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), false);",
          "    assert_eq!(is_valid_cap_letter(b'a'), false);",
          "    assert_eq!(is_valid_cap_letter(b'A'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'`'; // Lower than 'a'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'`'), false);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'`'; // Lower than 'a'",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'`'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'['; // Higher than 'Z'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'['), false);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'['; // Higher than 'Z'",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'['), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'@'; // Non-alphanumeric character not valid",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'@'), false);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'@'; // Non-alphanumeric character not valid",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'@'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'_'; // Valid character",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert!(!is_valid_cap_letter(b'0'));",
          "    assert!(!is_valid_cap_letter(b'9'));",
          "    assert!(!is_valid_cap_letter(b'a'));",
          "    assert!(!is_valid_cap_letter(b'z'));",
          "    assert!(!is_valid_cap_letter(b'A'));",
          "    assert!(!is_valid_cap_letter(b'Z'));",
          "    assert!(is_valid_cap_letter(b'_'));"
        ],
        "code": [
          "{",
          "    let b: u8 = b'_'; // Valid character",
          "    is_valid_cap_letter(b);",
          "    assert!(!is_valid_cap_letter(b'0'));",
          "    assert!(!is_valid_cap_letter(b'9'));",
          "    assert!(!is_valid_cap_letter(b'a'));",
          "    assert!(!is_valid_cap_letter(b'z'));",
          "    assert!(!is_valid_cap_letter(b'A'));",
          "    assert!(!is_valid_cap_letter(b'Z'));",
          "    assert!(is_valid_cap_letter(b'_'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]