[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = 48; // ASCII for '0'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(48), true); // Test with ASCII for '0'",
          "    assert_eq!(is_valid_cap_letter(57), true); // Test with ASCII for '9'",
          "    assert_eq!(is_valid_cap_letter(97), true); // Test with ASCII for 'a'",
          "    assert_eq!(is_valid_cap_letter(122), true); // Test with ASCII for 'z'",
          "    assert_eq!(is_valid_cap_letter(65), true); // Test with ASCII for 'A'",
          "    assert_eq!(is_valid_cap_letter(90), true); // Test with ASCII for 'Z'",
          "    assert_eq!(is_valid_cap_letter(95), true); // Test with ASCII for '_'"
        ],
        "code": [
          "{",
          "    let b = 48; // ASCII for '0'",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(48), true); // Test with ASCII for '0'",
          "    assert_eq!(is_valid_cap_letter(57), true); // Test with ASCII for '9'",
          "    assert_eq!(is_valid_cap_letter(97), true); // Test with ASCII for 'a'",
          "    assert_eq!(is_valid_cap_letter(122), true); // Test with ASCII for 'z'",
          "    assert_eq!(is_valid_cap_letter(65), true); // Test with ASCII for 'A'",
          "    assert_eq!(is_valid_cap_letter(90), true); // Test with ASCII for 'Z'",
          "    assert_eq!(is_valid_cap_letter(95), true); // Test with ASCII for '_'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = 57; // ASCII for '9'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(57), true);  // Test with byte value for '9'",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);  // Test with byte value for '0'",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);  // Test with byte value for '5'",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);   // Test with byte value for 'a'",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);   // Test with byte value for 'z'",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);   // Test with byte value for 'A'",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);   // Test with byte value for 'Z'",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);   // Test with byte value for '_'"
        ],
        "code": [
          "{",
          "    let b = 57; // ASCII for '9'",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(57), true);  // Test with byte value for '9'",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);  // Test with byte value for '0'",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);  // Test with byte value for '5'",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);   // Test with byte value for 'a'",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);   // Test with byte value for 'z'",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);   // Test with byte value for 'A'",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);   // Test with byte value for 'Z'",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);   // Test with byte value for '_'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = 65; // ASCII for 'A'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(48), true); // ASCII for '0'",
          "    assert_eq!(is_valid_cap_letter(57), true); // ASCII for '9'",
          "    assert_eq!(is_valid_cap_letter(65), true); // ASCII for 'A'",
          "    assert_eq!(is_valid_cap_letter(90), true); // ASCII for 'Z'",
          "    assert_eq!(is_valid_cap_letter(97), true); // ASCII for 'a'",
          "    assert_eq!(is_valid_cap_letter(122), true); // ASCII for 'z'",
          "    assert_eq!(is_valid_cap_letter(95), true); // ASCII for '_'",
          "    assert_eq!(is_valid_cap_letter(49), true); // ASCII for '1'"
        ],
        "code": [
          "{",
          "    let b = 65; // ASCII for 'A'",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(48), true); // ASCII for '0'",
          "    assert_eq!(is_valid_cap_letter(57), true); // ASCII for '9'",
          "    assert_eq!(is_valid_cap_letter(65), true); // ASCII for 'A'",
          "    assert_eq!(is_valid_cap_letter(90), true); // ASCII for 'Z'",
          "    assert_eq!(is_valid_cap_letter(97), true); // ASCII for 'a'",
          "    assert_eq!(is_valid_cap_letter(122), true); // ASCII for 'z'",
          "    assert_eq!(is_valid_cap_letter(95), true); // ASCII for '_'",
          "    assert_eq!(is_valid_cap_letter(49), true); // ASCII for '1'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = 90; // ASCII for 'Z'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b = 90; // ASCII for 'Z'",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = 97; // ASCII for 'a'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(48), true);  // ASCII for '0'",
          "    assert_eq!(is_valid_cap_letter(49), true);  // ASCII for '1'",
          "    assert_eq!(is_valid_cap_letter(57), true);  // ASCII for '9'",
          "    assert_eq!(is_valid_cap_letter(65), true);  // ASCII for 'A'",
          "    assert_eq!(is_valid_cap_letter(90), true);  // ASCII for 'Z'",
          "    assert_eq!(is_valid_cap_letter(97), true);  // ASCII for 'a'",
          "    assert_eq!(is_valid_cap_letter(122), true); // ASCII for 'z'",
          "    assert_eq!(is_valid_cap_letter(95), true);  // ASCII for '_'"
        ],
        "code": [
          "{",
          "    let b = 97; // ASCII for 'a'",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(48), true);  // ASCII for '0'",
          "    assert_eq!(is_valid_cap_letter(49), true);  // ASCII for '1'",
          "    assert_eq!(is_valid_cap_letter(57), true);  // ASCII for '9'",
          "    assert_eq!(is_valid_cap_letter(65), true);  // ASCII for 'A'",
          "    assert_eq!(is_valid_cap_letter(90), true);  // ASCII for 'Z'",
          "    assert_eq!(is_valid_cap_letter(97), true);  // ASCII for 'a'",
          "    assert_eq!(is_valid_cap_letter(122), true); // ASCII for 'z'",
          "    assert_eq!(is_valid_cap_letter(95), true);  // ASCII for '_'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = 122; // ASCII for 'z'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    is_valid_cap_letter(48); // ASCII for '0', expects true",
          "    is_valid_cap_letter(57); // ASCII for '9', expects true",
          "    is_valid_cap_letter(95); // ASCII for '_', expects true",
          "    is_valid_cap_letter(97); // ASCII for 'a', expects true",
          "    is_valid_cap_letter(122); // ASCII for 'z', expects true",
          "    is_valid_cap_letter(65); // ASCII for 'A', expects true",
          "    is_valid_cap_letter(90); // ASCII for 'Z', expects true"
        ],
        "code": [
          "{",
          "    let b = 122; // ASCII for 'z'",
          "    is_valid_cap_letter(b);",
          "    is_valid_cap_letter(48); // ASCII for '0', expects true",
          "    is_valid_cap_letter(57); // ASCII for '9', expects true",
          "    is_valid_cap_letter(95); // ASCII for '_', expects true",
          "    is_valid_cap_letter(97); // ASCII for 'a', expects true",
          "    is_valid_cap_letter(122); // ASCII for 'z', expects true",
          "    is_valid_cap_letter(65); // ASCII for 'A', expects true",
          "    is_valid_cap_letter(90); // ASCII for 'Z', expects true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = 95; // ASCII for '_'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert!(is_valid_cap_letter(48)); // ASCII for '0'",
          "    assert!(is_valid_cap_letter(57)); // ASCII for '9'",
          "    assert!(is_valid_cap_letter(65)); // ASCII for 'A'",
          "    assert!(is_valid_cap_letter(90)); // ASCII for 'Z'",
          "    assert!(is_valid_cap_letter(97)); // ASCII for 'a'",
          "    assert!(is_valid_cap_letter(122)); // ASCII for 'z'",
          "    assert!(is_valid_cap_letter(95)); // ASCII for '_'"
        ],
        "code": [
          "{",
          "    let b = 95; // ASCII for '_'",
          "    is_valid_cap_letter(b);",
          "    assert!(is_valid_cap_letter(48)); // ASCII for '0'",
          "    assert!(is_valid_cap_letter(57)); // ASCII for '9'",
          "    assert!(is_valid_cap_letter(65)); // ASCII for 'A'",
          "    assert!(is_valid_cap_letter(90)); // ASCII for 'Z'",
          "    assert!(is_valid_cap_letter(97)); // ASCII for 'a'",
          "    assert!(is_valid_cap_letter(122)); // ASCII for 'z'",
          "    assert!(is_valid_cap_letter(95)); // ASCII for '_'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]