[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder; // Invoke to use builder and avoid unused variable warning",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Builder::default().pattern_id, None);",
          "    assert!(Builder::default().states.is_empty());",
          "    assert!(Builder::default().start_pattern.is_empty());",
          "    assert!(Builder::default().captures.is_empty());",
          "    assert_eq!(Builder::default().memory_states, 0);",
          "    assert!(!Builder::default().utf8);",
          "    assert!(!Builder::default().reverse);",
          "    assert!(Builder::default().size_limit.is_none());",
          "    assert!(Builder::default().dfa.is_empty());"
        ],
        "code": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder; // Invoke to use builder and avoid unused variable warning",
          "    assert_eq!(Builder::default().pattern_id, None);",
          "    assert!(Builder::default().states.is_empty());",
          "    assert!(Builder::default().start_pattern.is_empty());",
          "    assert!(Builder::default().captures.is_empty());",
          "    assert_eq!(Builder::default().memory_states, 0);",
          "    assert!(!Builder::default().utf8);",
          "    assert!(!Builder::default().reverse);",
          "    assert!(Builder::default().size_limit.is_none());",
          "    assert!(Builder::default().dfa.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let _ = builder; // Invoke to use builder and avoid unused variable warning",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Builder::default().pattern_id, None);",
          "    assert!(Builder::default().states.is_empty());",
          "    assert!(Builder::default().start_pattern.is_empty());",
          "    assert!(Builder::default().captures.is_empty());",
          "    assert_eq!(Builder::default().memory_states, 0);",
          "    assert!(!Builder::default().utf8);",
          "    assert!(!Builder::default().reverse);",
          "    assert!(Builder::default().size_limit.is_none());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let _ = builder; // Invoke to use builder and avoid unused variable warning",
          "    assert_eq!(Builder::default().pattern_id, None);",
          "    assert!(Builder::default().states.is_empty());",
          "    assert!(Builder::default().start_pattern.is_empty());",
          "    assert!(Builder::default().captures.is_empty());",
          "    assert_eq!(Builder::default().memory_states, 0);",
          "    assert!(!Builder::default().utf8);",
          "    assert!(!Builder::default().reverse);",
          "    assert!(Builder::default().size_limit.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]