[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockThompsonBuildError;",
          "    let err = MockThompsonBuildError;",
          "    let result = BuildError::nfa(err);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, BuildErrorKind::NFA(err));"
        ],
        "code": [
          "{",
          "    struct MockThompsonBuildError;",
          "    let err = MockThompsonBuildError;",
          "    let result = BuildError::nfa(err);",
          "    assert_eq!(result.kind, BuildErrorKind::NFA(err));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockThompsonBuildErrorMin;",
          "    let err = MockThompsonBuildErrorMin;",
          "    let result = BuildError::nfa(err);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, BuildErrorKind::NFA(err));"
        ],
        "code": [
          "{",
          "    struct MockThompsonBuildErrorMin;",
          "    let err = MockThompsonBuildErrorMin;",
          "    let result = BuildError::nfa(err);",
          "    assert_eq!(result.kind, BuildErrorKind::NFA(err));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockThompsonBuildErrorMax;",
          "    let err = MockThompsonBuildErrorMax;",
          "    let result = BuildError::nfa(err);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, BuildErrorKind::NFA(err));"
        ],
        "code": [
          "{",
          "    struct MockThompsonBuildErrorMax;",
          "    let err = MockThompsonBuildErrorMax;",
          "    let result = BuildError::nfa(err);",
          "    assert_eq!(result.kind, BuildErrorKind::NFA(err));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockThompsonBuildErrorEdge;",
          "    let err = MockThompsonBuildErrorEdge;",
          "    let result = BuildError::nfa(err);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, BuildErrorKind::NFA(err));"
        ],
        "code": [
          "{",
          "    struct MockThompsonBuildErrorEdge;",
          "    let err = MockThompsonBuildErrorEdge;",
          "    let result = BuildError::nfa(err);",
          "    assert_eq!(result.kind, BuildErrorKind::NFA(err));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]