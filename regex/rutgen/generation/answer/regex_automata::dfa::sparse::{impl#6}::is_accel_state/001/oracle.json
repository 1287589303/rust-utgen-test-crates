[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(0));",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(2));",
          "}"
        ],
        "oracle": [
          "    let special = Special { max: 10, quit_id: 9, min_match: 1, max_match: 5, min_accel: 3, max_accel: 7, min_start: 1, max_start: 10 };",
          "    let dfa = DFA { tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 }, st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None }, special, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false } };",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(1)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(2));",
          "    let special = Special { max: 10, quit_id: 9, min_match: 1, max_match: 5, min_accel: 3, max_accel: 7, min_start: 1, max_start: 10 };",
          "    let dfa = DFA { tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 }, st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None }, special, pre: None, quitset: ByteSet::default(), flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false } };",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(1)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(3));",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.is_accel_state(StateID(3)) == true);",
          "    assert!(dfa.is_accel_state(StateID(4)) == true);",
          "    assert!(dfa.is_accel_state(StateID(5)) == true);",
          "    assert!(dfa.is_accel_state(StateID(6)) == true);",
          "    assert!(dfa.is_accel_state(StateID(7)) == true);",
          "    assert!(dfa.is_accel_state(StateID(2)) == false);",
          "    assert!(dfa.is_accel_state(StateID(8)) == false);",
          "    assert!(dfa.is_accel_state(StateID(1)) == false);",
          "    assert!(dfa.is_accel_state(StateID(9)) == false);",
          "    assert!(dfa.is_accel_state(StateID(10)) == false);",
          "    assert!(dfa.is_accel_state(StateID(0)) == false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(3));",
          "    assert!(dfa.is_accel_state(StateID(3)) == true);",
          "    assert!(dfa.is_accel_state(StateID(4)) == true);",
          "    assert!(dfa.is_accel_state(StateID(5)) == true);",
          "    assert!(dfa.is_accel_state(StateID(6)) == true);",
          "    assert!(dfa.is_accel_state(StateID(7)) == true);",
          "    assert!(dfa.is_accel_state(StateID(2)) == false);",
          "    assert!(dfa.is_accel_state(StateID(8)) == false);",
          "    assert!(dfa.is_accel_state(StateID(1)) == false);",
          "    assert!(dfa.is_accel_state(StateID(9)) == false);",
          "    assert!(dfa.is_accel_state(StateID(10)) == false);",
          "    assert!(dfa.is_accel_state(StateID(0)) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(7));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(7));",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(11));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: 10,",
          "        quit_id: 9,",
          "        min_match: 1,",
          "        max_match: 5,",
          "        min_accel: 3,",
          "        max_accel: 7,",
          "        min_start: 1,",
          "        max_start: 10,",
          "    };",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 11, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special,",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let _ = dfa.is_accel_state(StateID(11));",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]