[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::literal(b'a'),",
          "        Hir::alternation(vec![",
          "            Hir::literal(b'b'),",
          "            Hir::literal(b'c'),",
          "        ]),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "}"
        ],
        "oracle": [
          "    assert_eq!(HirKind::Class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'c')])), hir.kind());",
          "    assert!(!new.is_empty());",
          "    assert_eq!(new.len(), 1);",
          "    assert!(singleton_chars(&new).is_some());"
        ],
        "code": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::literal(b'a'),",
          "        Hir::alternation(vec![",
          "            Hir::literal(b'b'),",
          "            Hir::literal(b'c'),",
          "        ]),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "    assert_eq!(HirKind::Class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'c')])), hir.kind());",
          "    assert!(!new.is_empty());",
          "    assert_eq!(new.len(), 1);",
          "    assert!(singleton_chars(&new).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::alternation(vec![",
          "            Hir::literal(\"x\".as_bytes()),",
          "            Hir::literal(\"y\".as_bytes()),",
          "        ]),",
          "        Hir::literal(\"z\".as_bytes()),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "}"
        ],
        "oracle": [
          "    let expected = Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('x', 'y'), ClassUnicodeRange::new('z', 'z')])));",
          "    assert_eq!(expected, hir);"
        ],
        "code": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::alternation(vec![",
          "            Hir::literal(\"x\".as_bytes()),",
          "            Hir::literal(\"y\".as_bytes()),",
          "        ]),",
          "        Hir::literal(\"z\".as_bytes()),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "    let expected = Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('x', 'y'), ClassUnicodeRange::new('z', 'z')])));",
          "    assert_eq!(expected, hir);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::literal(b'd'),",
          "        Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "            ClassUnicodeRange { start: 'a', end: 'z' },",
          "        ]))),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "}"
        ],
        "oracle": [
          "    let expected = Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'a', end: 'z' },",
          "    ])));",
          "    assert_eq!(expected, hir);",
          "    let hir_singleton = Hir::alternation(vec![Hir::literal(b'a'), Hir::literal(b'b')]);",
          "    let expected_singleton = Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'a', end: 'b' },",
          "    ])));",
          "    assert_eq!(expected_singleton, hir_singleton);",
          "    let hir_empty = Hir::alternation(vec![]);",
          "    let expected_empty = Hir::fail();",
          "    assert_eq!(expected_empty, hir_empty);",
          "    let hir_single_sub = Hir::alternation(vec![Hir::literal(b'c')]);",
          "    assert_eq!(hir_single_sub, Hir::literal(b'c'));",
          "    let hir_with_prefix = Hir::alternation(vec![",
          "    Hir::concat(vec![Hir::literal(b'abc'), Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'A', end: 'Z' },",
          "    ])))]),",
          "    Hir::concat(vec![Hir::literal(b'abc'), Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'a', end: 'z' },",
          "    ])))],",
          "    ]);",
          "    let expected_prefix = Hir::concat(vec![",
          "    Hir::literal(b\"abc\"),",
          "    Hir::alternation(vec![",
          "    Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'A', end: 'Z' }])),",
          "    Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }])),",
          "    ]),",
          "    ]);",
          "    assert_eq!(expected_prefix, hir_with_prefix);"
        ],
        "code": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::literal(b'd'),",
          "        Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "            ClassUnicodeRange { start: 'a', end: 'z' },",
          "        ]))),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "    let expected = Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'a', end: 'z' },",
          "    ])));",
          "    assert_eq!(expected, hir);",
          "    let hir_singleton = Hir::alternation(vec![Hir::literal(b'a'), Hir::literal(b'b')]);",
          "    let expected_singleton = Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'a', end: 'b' },",
          "    ])));",
          "    assert_eq!(expected_singleton, hir_singleton);",
          "    let hir_empty = Hir::alternation(vec![]);",
          "    let expected_empty = Hir::fail();",
          "    assert_eq!(expected_empty, hir_empty);",
          "    let hir_single_sub = Hir::alternation(vec![Hir::literal(b'c')]);",
          "    assert_eq!(hir_single_sub, Hir::literal(b'c'));",
          "    let hir_with_prefix = Hir::alternation(vec![",
          "    Hir::concat(vec![Hir::literal(b'abc'), Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'A', end: 'Z' },",
          "    ])))]),",
          "    Hir::concat(vec![Hir::literal(b'abc'), Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'a', end: 'z' },",
          "    ])))],",
          "    ]);",
          "    let expected_prefix = Hir::concat(vec![",
          "    Hir::literal(b\"abc\"),",
          "    Hir::alternation(vec![",
          "    Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'A', end: 'Z' }])),",
          "    Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }])),",
          "    ]),",
          "    ]);",
          "    assert_eq!(expected_prefix, hir_with_prefix);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::literal(b'x'),",
          "        Hir::literal(b'y'),",
          "        Hir::alternation(vec![",
          "            Hir::literal(b'z'),",
          "            Hir::literal(b'w'),",
          "        ]),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "}"
        ],
        "oracle": [
          "    assert_eq!(HirKind::Alternation(vec![Hir::literal(b'z'), Hir::literal(b'w')]), hir.kind());",
          "    assert_eq!(Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('x', 'y')])),), hir);",
          "    assert!(hir.props == Properties::alternation(&vec![Hir::literal(b'z'), Hir::literal(b'w')]));",
          "    assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::literal(b'x'), Hir::literal(b'y'), Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('z', 'w')])))]));",
          "    assert!(Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('x', 'y')]))) == hir);"
        ],
        "code": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::literal(b'x'),",
          "        Hir::literal(b'y'),",
          "        Hir::alternation(vec![",
          "            Hir::literal(b'z'),",
          "            Hir::literal(b'w'),",
          "        ]),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "    assert_eq!(HirKind::Alternation(vec![Hir::literal(b'z'), Hir::literal(b'w')]), hir.kind());",
          "    assert_eq!(Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('x', 'y')])),), hir);",
          "    assert!(hir.props == Properties::alternation(&vec![Hir::literal(b'z'), Hir::literal(b'w')]));",
          "    assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::literal(b'x'), Hir::literal(b'y'), Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('z', 'w')])))]));",
          "    assert!(Hir::class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('x', 'y')]))) == hir);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "            ClassUnicodeRange { start: 'A', end: 'C' },",
          "        ]))),",
          "        Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "            ClassUnicodeRange { start: 'D', end: 'F' },",
          "        ]))),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "}"
        ],
        "oracle": [
          "    let hir = Hir::alternation(vec![",
          "    Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'A', end: 'C' },",
          "    ]))),",
          "    Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'D', end: 'F' },",
          "    ]))),",
          "    ]);",
          "    let expected = Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'A', end: 'F' },",
          "    ])));",
          "    assert_eq!(expected, hir);"
        ],
        "code": [
          "{",
          "    let hir = Hir::alternation(vec![",
          "        Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "            ClassUnicodeRange { start: 'A', end: 'C' },",
          "        ]))),",
          "        Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "            ClassUnicodeRange { start: 'D', end: 'F' },",
          "        ]))),",
          "    ]);",
          "    let _ = hir; // Just to call the function",
          "    let hir = Hir::alternation(vec![",
          "    Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'A', end: 'C' },",
          "    ]))),",
          "    Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'D', end: 'F' },",
          "    ]))),",
          "    ]);",
          "    let expected = Hir::class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange { start: 'A', end: 'F' },",
          "    ])));",
          "    assert_eq!(expected, hir);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]