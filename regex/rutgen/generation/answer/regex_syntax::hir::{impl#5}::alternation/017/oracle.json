[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir_empty = Hir::empty();",
          "    let result = Hir::alternation(vec![hir_empty.clone()]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Hir::fail(), result);"
        ],
        "code": [
          "{",
          "    let hir_empty = Hir::empty();",
          "    let result = Hir::alternation(vec![hir_empty.clone()]);",
          "    assert_eq!(Hir::fail(), result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir_nested = Hir::alternation(vec![",
          "        Hir::literal([b'a']),",
          "        Hir::literal([b'b']),",
          "    ]);",
          "    let result = Hir::alternation(vec![hir_nested]);",
          "}"
        ],
        "oracle": [
          "    let result = Hir::alternation(vec![Hir::literal([b'a']), Hir::literal([b'b'])]);",
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::empty())));"
        ],
        "code": [
          "{",
          "    let hir_nested = Hir::alternation(vec![",
          "        Hir::literal([b'a']),",
          "        Hir::literal([b'b']),",
          "    ]);",
          "    let result = Hir::alternation(vec![hir_nested]);",
          "    let result = Hir::alternation(vec![Hir::literal([b'a']), Hir::literal([b'b'])]);",
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::empty())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]