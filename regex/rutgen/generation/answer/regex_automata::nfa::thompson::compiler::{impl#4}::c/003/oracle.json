[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            match_kind: MatchKind::default(),",
          "            quit: ByteSet::default(),",
          "            dfa_size_limit: None,",
          "            determinize_size_limit: None,",
          "        },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let expr = hir::Capture {",
          "        index: 0,",
          "        name: Some(Arc::from(\"capture_name\")),",
          "        sub: Box::new(hir::Hir::new_empty()),",
          "    };",
          "",
          "    let result = compiler.c(&expr);",
          "}"
        ],
        "oracle": [
          "    let expr = hir::Capture { index: 0, name: Some(Arc::from(\"capture_name\")), sub: Box::new(hir::Hir::new_empty()) };",
          "    let result = compiler.c(&expr);",
          "    assert!(result.is_ok());",
          "    if let Ok(thompson_ref) = result {",
          "    assert!(thompson_ref.start < thompson_ref.end);",
          "    }",
          "    assert_eq!(compiler.builder.borrow().states.len(), expected_state_count);",
          "    assert!(compiler.builder.borrow().captures[0][0].is_some());",
          "    assert_eq!(compiler.builder.borrow().captures[0][0], Some(Arc::from(\"capture_name\")));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            match_kind: MatchKind::default(),",
          "            quit: ByteSet::default(),",
          "            dfa_size_limit: None,",
          "            determinize_size_limit: None,",
          "        },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let expr = hir::Capture {",
          "        index: 0,",
          "        name: Some(Arc::from(\"capture_name\")),",
          "        sub: Box::new(hir::Hir::new_empty()),",
          "    };",
          "",
          "    let result = compiler.c(&expr);",
          "    let expr = hir::Capture { index: 0, name: Some(Arc::from(\"capture_name\")), sub: Box::new(hir::Hir::new_empty()) };",
          "    let result = compiler.c(&expr);",
          "    assert!(result.is_ok());",
          "    if let Ok(thompson_ref) = result {",
          "    assert!(thompson_ref.start < thompson_ref.end);",
          "    }",
          "    assert_eq!(compiler.builder.borrow().states.len(), expected_state_count);",
          "    assert!(compiler.builder.borrow().captures[0][0].is_some());",
          "    assert_eq!(compiler.builder.borrow().captures[0][0], Some(Arc::from(\"capture_name\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            match_kind: MatchKind::default(),",
          "            quit: ByteSet::default(),",
          "            dfa_size_limit: None,",
          "            determinize_size_limit: None,",
          "        },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let expr = hir::Capture {",
          "        index: 1,",
          "        name: None,",
          "        sub: Box::new(hir::Hir::new_empty()),",
          "    };",
          "",
          "    let result = compiler.c(&expr);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_state_id);",
          "    assert_eq!(thompson_ref.end, expected_end_state_id);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            match_kind: MatchKind::default(),",
          "            quit: ByteSet::default(),",
          "            dfa_size_limit: None,",
          "            determinize_size_limit: None,",
          "        },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let expr = hir::Capture {",
          "        index: 1,",
          "        name: None,",
          "        sub: Box::new(hir::Hir::new_empty()),",
          "    };",
          "",
          "    let result = compiler.c(&expr);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_state_id);",
          "    assert_eq!(thompson_ref.end, expected_end_state_id);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            match_kind: MatchKind::default(),",
          "            quit: ByteSet::default(),",
          "            dfa_size_limit: None,",
          "            determinize_size_limit: None,",
          "        },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let expr = hir::Capture {",
          "        index: 100,",
          "        name: Some(Arc::from(\"capture_large_index\")),",
          "        sub: Box::new(hir::Hir::new_empty()),",
          "    };",
          "",
          "    let result = compiler.c(&expr);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_state_id);",
          "    assert_eq!(thompson_ref.end, expected_end_state_id);",
          "    assert!(compiler.builder.borrow().captures[100].len() > 0);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            match_kind: MatchKind::default(),",
          "            quit: ByteSet::default(),",
          "            dfa_size_limit: None,",
          "            determinize_size_limit: None,",
          "        },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let expr = hir::Capture {",
          "        index: 100,",
          "        name: Some(Arc::from(\"capture_large_index\")),",
          "        sub: Box::new(hir::Hir::new_empty()),",
          "    };",
          "",
          "    let result = compiler.c(&expr);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_state_id);",
          "    assert_eq!(thompson_ref.end, expected_end_state_id);",
          "    assert!(compiler.builder.borrow().captures[100].len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]