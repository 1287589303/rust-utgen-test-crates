[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTransitions {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    impl TestTransitions {",
          "        fn sparse(&self) -> &[u8] {",
          "            &self.sparse",
          "        }",
          "",
          "        fn id_len(&self) -> usize {",
          "            std::mem::size_of::<StateID>()",
          "        }",
          "    }",
          "",
          "    let id = StateID(0.into());",
          "    let sp = Special::new();",
          "",
          "    let transitions = TestTransitions {",
          "        sparse: vec![",
          "            0, 1, // ntrans (0)",
          "            0, // (not a match)",
          "            0, // input range placeholder",
          "            0, // next state ID placeholder",
          "            0, // accelerator length",
          "        ],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let result = transitions.try_state(&sp, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(DeserializeError::generic(\"state marked special as a match, but has no pattern IDs\")));"
        ],
        "code": [
          "{",
          "    struct TestTransitions {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    impl TestTransitions {",
          "        fn sparse(&self) -> &[u8] {",
          "            &self.sparse",
          "        }",
          "",
          "        fn id_len(&self) -> usize {",
          "            std::mem::size_of::<StateID>()",
          "        }",
          "    }",
          "",
          "    let id = StateID(0.into());",
          "    let sp = Special::new();",
          "",
          "    let transitions = TestTransitions {",
          "        sparse: vec![",
          "            0, 1, // ntrans (0)",
          "            0, // (not a match)",
          "            0, // input range placeholder",
          "            0, // next state ID placeholder",
          "            0, // accelerator length",
          "        ],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let result = transitions.try_state(&sp, id);",
          "    assert_eq!(result, Err(DeserializeError::generic(\"state marked special as a match, but has no pattern IDs\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTransitions {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    impl TestTransitions {",
          "        fn sparse(&self) -> &[u8] {",
          "            &self.sparse",
          "        }",
          "",
          "        fn id_len(&self) -> usize {",
          "            std::mem::size_of::<StateID>()",
          "        }",
          "    }",
          "",
          "    let id = StateID(1.into());",
          "    let sp = Special::new();",
          "",
          "    let transitions = TestTransitions {",
          "        sparse: vec![",
          "            0, 1, // ntrans (257)",
          "            0, // (not a match)",
          "            0, 0, // valid input range",
          "            1, 0, 0, 0, // valid next state ID",
          "            1, // accelerator length",
          "        ],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let result = transitions.try_state(&sp, id);",
          "}"
        ],
        "oracle": [
          "    let id = StateID(1.into());",
          "    let sp = Special::new();",
          "    assert_eq!(transitions.try_state(&sp, id), Err(DeserializeError::generic(\"state marked special as a match, but has no pattern IDs\")));"
        ],
        "code": [
          "{",
          "    struct TestTransitions {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    impl TestTransitions {",
          "        fn sparse(&self) -> &[u8] {",
          "            &self.sparse",
          "        }",
          "",
          "        fn id_len(&self) -> usize {",
          "            std::mem::size_of::<StateID>()",
          "        }",
          "    }",
          "",
          "    let id = StateID(1.into());",
          "    let sp = Special::new();",
          "",
          "    let transitions = TestTransitions {",
          "        sparse: vec![",
          "            0, 1, // ntrans (257)",
          "            0, // (not a match)",
          "            0, 0, // valid input range",
          "            1, 0, 0, 0, // valid next state ID",
          "            1, // accelerator length",
          "        ],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let result = transitions.try_state(&sp, id);",
          "    let id = StateID(1.into());",
          "    let sp = Special::new();",
          "    assert_eq!(transitions.try_state(&sp, id), Err(DeserializeError::generic(\"state marked special as a match, but has no pattern IDs\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]