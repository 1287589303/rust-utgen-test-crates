[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = StateID(257);",
          "    let sparse_data = vec![0; 257];",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 257,",
          "        pattern_len: 1,",
          "    };",
          "    let special = Special {",
          "        max: StateID(256),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    ",
          "    let _ = transitions.try_state(&special, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(id.as_usize(), transitions.sparse.len());",
          "    assert!(transitions.sparse.len() > 0);",
          "    assert!(ntrans <= 257);",
          "    assert!(ntrans == 0);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(input_ranges_len > 0);",
          "    assert!(input_ranges.chunks(2).count() == 0);",
          "    assert!(next_len > 0);",
          "    assert!(next.chunks(transitions.id_len()).count() == 0);",
          "    assert!(!is_match);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(sp.is_match_state(id) == is_match);",
          "    assert!(!state.is_empty());",
          "    assert!(accel_len <= 3);",
          "    assert!(accel_len == 0);",
          "    assert!(accel_len > 0);",
          "    assert!(wire::check_slice_len(state, accel_len, \"sparse corrupt accelerator length\").is_err());"
        ],
        "code": [
          "{",
          "    let id = StateID(257);",
          "    let sparse_data = vec![0; 257];",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 257,",
          "        pattern_len: 1,",
          "    };",
          "    let special = Special {",
          "        max: StateID(256),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    ",
          "    let _ = transitions.try_state(&special, id);",
          "    assert_eq!(id.as_usize(), transitions.sparse.len());",
          "    assert!(transitions.sparse.len() > 0);",
          "    assert!(ntrans <= 257);",
          "    assert!(ntrans == 0);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(input_ranges_len > 0);",
          "    assert!(input_ranges.chunks(2).count() == 0);",
          "    assert!(next_len > 0);",
          "    assert!(next.chunks(transitions.id_len()).count() == 0);",
          "    assert!(!is_match);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(sp.is_match_state(id) == is_match);",
          "    assert!(!state.is_empty());",
          "    assert!(accel_len <= 3);",
          "    assert!(accel_len == 0);",
          "    assert!(accel_len > 0);",
          "    assert!(wire::check_slice_len(state, accel_len, \"sparse corrupt accelerator length\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = StateID(256);",
          "    let sparse_data = vec![0; 260];",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 257,",
          "        pattern_len: 1,",
          "    };",
          "    let special = Special {",
          "        max: StateID(256),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let _ = transitions.try_state(&special, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(id.as_usize(), transitions.sparse.len());",
          "    assert!(transitions.sparse.len() > 0);",
          "    assert!(wire::try_read_u16_as_usize(&transitions.sparse[id.as_usize()..], \"state transition length\").is_ok());",
          "    assert_eq!(ntrans, 257);",
          "    assert_eq!(ntrans, 0);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(wire::check_slice_len(&transitions.sparse, input_ranges_len, \"sparse byte pairs\").is_ok());",
          "    assert!(input_ranges.chunks(2).is_empty());",
          "    assert!(wire::check_slice_len(&transitions.sparse, next_len, \"sparse trans state IDs\").is_ok());",
          "    assert!(next.chunks(transitions.id_len()).is_empty());",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(sp.is_match_state(id) != is_match);",
          "    assert!(!state.is_empty());",
          "    assert_eq!(accel_len, 3);",
          "    assert!(accel_len == 0);",
          "    assert!(wire::check_slice_len(state, accel_len, \"sparse corrupt accelerator length\").is_err());"
        ],
        "code": [
          "{",
          "    let id = StateID(256);",
          "    let sparse_data = vec![0; 260];",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 257,",
          "        pattern_len: 1,",
          "    };",
          "    let special = Special {",
          "        max: StateID(256),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let _ = transitions.try_state(&special, id);",
          "    assert_eq!(id.as_usize(), transitions.sparse.len());",
          "    assert!(transitions.sparse.len() > 0);",
          "    assert!(wire::try_read_u16_as_usize(&transitions.sparse[id.as_usize()..], \"state transition length\").is_ok());",
          "    assert_eq!(ntrans, 257);",
          "    assert_eq!(ntrans, 0);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(wire::check_slice_len(&transitions.sparse, input_ranges_len, \"sparse byte pairs\").is_ok());",
          "    assert!(input_ranges.chunks(2).is_empty());",
          "    assert!(wire::check_slice_len(&transitions.sparse, next_len, \"sparse trans state IDs\").is_ok());",
          "    assert!(next.chunks(transitions.id_len()).is_empty());",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(sp.is_match_state(id) != is_match);",
          "    assert!(!state.is_empty());",
          "    assert_eq!(accel_len, 3);",
          "    assert!(accel_len == 0);",
          "    assert!(wire::check_slice_len(state, accel_len, \"sparse corrupt accelerator length\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = StateID(256);",
          "    let sparse_data = vec![0; 270];",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 257,",
          "        pattern_len: 0,",
          "    };",
          "    let special = Special {",
          "        max: StateID(256),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let _ = transitions.try_state(&special, id);",
          "}"
        ],
        "oracle": [
          "    let id = StateID(256);",
          "    let sparse_data = vec![0; 270];",
          "    let transitions = Transitions {",
          "    sparse: sparse_data,",
          "    classes: ByteClasses([0; 256]),",
          "    state_len: 257,",
          "    pattern_len: 0,",
          "    };",
          "    let special = Special {",
          "    max: StateID(256),",
          "    quit_id: StateID(0),",
          "    min_match: StateID(0),",
          "    max_match: StateID(0),",
          "    min_accel: StateID(0),",
          "    max_accel: StateID(0),",
          "    min_start: StateID(0),",
          "    max_start: StateID(0),",
          "    };",
          "    assert!(transitions.try_state(&special, id).is_err());"
        ],
        "code": [
          "{",
          "    let id = StateID(256);",
          "    let sparse_data = vec![0; 270];",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 257,",
          "        pattern_len: 0,",
          "    };",
          "    let special = Special {",
          "        max: StateID(256),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let _ = transitions.try_state(&special, id);",
          "    let id = StateID(256);",
          "    let sparse_data = vec![0; 270];",
          "    let transitions = Transitions {",
          "    sparse: sparse_data,",
          "    classes: ByteClasses([0; 256]),",
          "    state_len: 257,",
          "    pattern_len: 0,",
          "    };",
          "    let special = Special {",
          "    max: StateID(256),",
          "    quit_id: StateID(0),",
          "    min_match: StateID(0),",
          "    max_match: StateID(0),",
          "    min_accel: StateID(0),",
          "    max_accel: StateID(0),",
          "    min_start: StateID(0),",
          "    max_start: StateID(0),",
          "    };",
          "    assert!(transitions.try_state(&special, id).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = StateID(256);",
          "    let sparse_data = vec![0; 280];",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 257,",
          "        pattern_len: 1,",
          "    };",
          "    let special = Special {",
          "        max: StateID(256),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let _ = transitions.try_state(&special, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(id.as_usize(), transitions.sparse.len());",
          "    assert!(transitions.sparse.len() > 0);",
          "    assert!(wire::try_read_u16_as_usize(&transitions.sparse[id.as_usize()..], \"state transition length\").is_ok());",
          "    assert_eq!(ntrans, 257);",
          "    assert_eq!(ntrans, 0);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(wire::check_slice_len(&transitions.sparse[id.as_usize()..], input_ranges_len, \"sparse byte pairs\").is_ok());",
          "    assert!(input_ranges.chunks(2).is_empty());",
          "    assert!(wire::check_slice_len(&transitions.sparse[id.as_usize()..], next_len, \"sparse trans state IDs\").is_ok());",
          "    assert!(next.chunks(transitions.id_len()).is_empty());",
          "    assert!(!is_match);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert_eq!(sp.is_match_state(id), is_match);",
          "    assert!(!state.is_empty());",
          "    assert_eq!(accel_len, 3);",
          "    assert_eq!(accel_len, 0);",
          "    assert!(!sp.is_accel_state(id));",
          "    assert!(wire::check_slice_len(state, accel_len, \"sparse corrupt accelerator length\").is_err());"
        ],
        "code": [
          "{",
          "    let id = StateID(256);",
          "    let sparse_data = vec![0; 280];",
          "    let transitions = Transitions {",
          "        sparse: sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 257,",
          "        pattern_len: 1,",
          "    };",
          "    let special = Special {",
          "        max: StateID(256),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(0),",
          "        max_match: StateID(0),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let _ = transitions.try_state(&special, id);",
          "    assert_eq!(id.as_usize(), transitions.sparse.len());",
          "    assert!(transitions.sparse.len() > 0);",
          "    assert!(wire::try_read_u16_as_usize(&transitions.sparse[id.as_usize()..], \"state transition length\").is_ok());",
          "    assert_eq!(ntrans, 257);",
          "    assert_eq!(ntrans, 0);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(wire::check_slice_len(&transitions.sparse[id.as_usize()..], input_ranges_len, \"sparse byte pairs\").is_ok());",
          "    assert!(input_ranges.chunks(2).is_empty());",
          "    assert!(wire::check_slice_len(&transitions.sparse[id.as_usize()..], next_len, \"sparse trans state IDs\").is_ok());",
          "    assert!(next.chunks(transitions.id_len()).is_empty());",
          "    assert!(!is_match);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert_eq!(sp.is_match_state(id), is_match);",
          "    assert!(!state.is_empty());",
          "    assert_eq!(accel_len, 3);",
          "    assert_eq!(accel_len, 0);",
          "    assert!(!sp.is_accel_state(id));",
          "    assert!(wire::check_slice_len(state, accel_len, \"sparse corrupt accelerator length\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]