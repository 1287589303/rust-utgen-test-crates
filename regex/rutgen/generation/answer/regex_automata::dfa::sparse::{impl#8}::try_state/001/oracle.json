[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SparseTransitions {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    impl SparseTransitions {",
          "        fn sparse(&self) -> &[u8] {",
          "            &self.sparse",
          "        }",
          "    }",
          "",
          "    let sparse = SparseTransitions {",
          "        sparse: vec![0; 10], // has 10 bytes",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 1,",
          "    };",
          "    ",
          "    let sp = Special::new();",
          "    let id = StateID(10); // id as usize (10) > sparse().len() (10)",
          "",
          "    let _result = sparse.try_state(&sp, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(DeserializeError::generic(\"invalid caller provided sparse state ID\")));"
        ],
        "code": [
          "{",
          "    struct SparseTransitions {",
          "        sparse: Vec<u8>,",
          "        classes: ByteClasses,",
          "        state_len: usize,",
          "        pattern_len: usize,",
          "    }",
          "",
          "    impl SparseTransitions {",
          "        fn sparse(&self) -> &[u8] {",
          "            &self.sparse",
          "        }",
          "    }",
          "",
          "    let sparse = SparseTransitions {",
          "        sparse: vec![0; 10], // has 10 bytes",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 1,",
          "    };",
          "    ",
          "    let sp = Special::new();",
          "    let id = StateID(10); // id as usize (10) > sparse().len() (10)",
          "",
          "    let _result = sparse.try_state(&sp, id);",
          "    assert_eq!(_result, Err(DeserializeError::generic(\"invalid caller provided sparse state ID\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]