[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = StateID(0);",
          "    let sp = Special::new();",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 2 + 257 * 2 + 257 * StateID::SIZE],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    ",
          "    let result = transitions.try_state(&sp, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(DeserializeError::generic(\"whether state is a match or not is inconsistent\")));",
          "    assert!(id.as_usize() <= transitions.sparse.len());",
          "    assert!(wire::try_read_u16_as_usize(&transitions.sparse[id.as_usize()..], \"state transition length\").is_ok());",
          "    assert_eq!(ntrans, 257);",
          "    assert_eq!(ntrans, 0);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(wire::check_slice_len(&transitions.sparse[id.as_usize()..], input_ranges_len, \"sparse byte pairs\").is_ok());",
          "    assert!(input_ranges.chunks(2).is_empty());",
          "    assert!(wire::check_slice_len(&transitions.sparse[id.as_usize()..], next_len, \"sparse trans state IDs\").is_ok());",
          "    assert!(next.chunks(transitions.id_len()).is_empty());",
          "    assert!(!is_match);",
          "    assert!(pattern_ids.is_empty());",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(sp.is_match_state(id) != is_match);"
        ],
        "code": [
          "{",
          "    let id = StateID(0);",
          "    let sp = Special::new();",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 2 + 257 * 2 + 257 * StateID::SIZE],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "    ",
          "    let result = transitions.try_state(&sp, id);",
          "    assert_eq!(result, Err(DeserializeError::generic(\"whether state is a match or not is inconsistent\")));",
          "    assert!(id.as_usize() <= transitions.sparse.len());",
          "    assert!(wire::try_read_u16_as_usize(&transitions.sparse[id.as_usize()..], \"state transition length\").is_ok());",
          "    assert_eq!(ntrans, 257);",
          "    assert_eq!(ntrans, 0);",
          "    assert!(!is_match);",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(wire::check_slice_len(&transitions.sparse[id.as_usize()..], input_ranges_len, \"sparse byte pairs\").is_ok());",
          "    assert!(input_ranges.chunks(2).is_empty());",
          "    assert!(wire::check_slice_len(&transitions.sparse[id.as_usize()..], next_len, \"sparse trans state IDs\").is_ok());",
          "    assert!(next.chunks(transitions.id_len()).is_empty());",
          "    assert!(!is_match);",
          "    assert!(pattern_ids.is_empty());",
          "    assert!(!sp.is_match_state(id));",
          "    assert!(sp.is_match_state(id) != is_match);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = StateID(0);",
          "    let sp = Special::new();",
          "    ",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 2 + 257 * 2 + 257 * StateID::SIZE + 1],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let result = transitions.try_state(&sp, id);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), DeserializeError::generic(\"whether state is a match or not is inconsistent\"));"
        ],
        "code": [
          "{",
          "    let id = StateID(0);",
          "    let sp = Special::new();",
          "    ",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 2 + 257 * 2 + 257 * StateID::SIZE + 1],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let result = transitions.try_state(&sp, id);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), DeserializeError::generic(\"whether state is a match or not is inconsistent\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = StateID(0);",
          "    let sp = Special {",
          "        min_match: StateID(1),",
          "        max_match: StateID(1),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        quit_id: StateID(0),",
          "        max: StateID(1),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 2 + 257 * 2 + 257 * StateID::SIZE + 1],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let result = transitions.try_state(&sp, id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(DeserializeError::generic(\"whether state is a match or not is inconsistent\")));"
        ],
        "code": [
          "{",
          "    let id = StateID(0);",
          "    let sp = Special {",
          "        min_match: StateID(1),",
          "        max_match: StateID(1),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(0),",
          "        quit_id: StateID(0),",
          "        max: StateID(1),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "",
          "    let transitions = Transitions {",
          "        sparse: vec![0; 2 + 257 * 2 + 257 * StateID::SIZE + 1],",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 0,",
          "    };",
          "",
          "    let result = transitions.try_state(&sp, id);",
          "    assert_eq!(result, Err(DeserializeError::generic(\"whether state is a match or not is inconsistent\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]