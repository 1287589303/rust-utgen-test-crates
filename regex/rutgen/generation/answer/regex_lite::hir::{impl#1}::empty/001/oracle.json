[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Empty);",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::empty();",
          "    assert_eq!(result.kind, HirKind::Empty);",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::empty();",
          "    let kind = result.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Empty);",
          "    assert!(!result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::empty();",
          "    let kind = result.kind();",
          "    assert_eq!(result.kind(), &HirKind::Empty);",
          "    assert!(!result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::empty();",
          "    let anchored = result.is_start_anchored();",
          "}"
        ],
        "oracle": [
          "    let result = Hir::empty();",
          "    assert_eq!(result.kind(), &HirKind::Empty);",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.is_match_empty(), true);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::empty();",
          "    let anchored = result.is_start_anchored();",
          "    let result = Hir::empty();",
          "    assert_eq!(result.kind(), &HirKind::Empty);",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.is_match_empty(), true);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::empty();",
          "    let match_empty = result.is_match_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(match_empty, true);",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "    assert_eq!(result.kind(), &HirKind::Empty);"
        ],
        "code": [
          "{",
          "    let result = Hir::empty();",
          "    let match_empty = result.is_match_empty();",
          "    assert_eq!(match_empty, true);",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "    assert_eq!(result.kind(), &HirKind::Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::empty();",
          "    let captures_len = result.static_explicit_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Empty);",
          "    assert!(!result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::empty();",
          "    let captures_len = result.static_explicit_captures_len();",
          "    assert_eq!(result.kind(), &HirKind::Empty);",
          "    assert!(!result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]