[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool::<TestType, fn() -> TestType>::new();",
          "    let value = Some(Box::new(TestType));",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value,",
          "    };",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", guard));",
          "}"
        ],
        "oracle": [
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"PoolGuard\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"value\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"Some\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"TestType\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).len() > 0);",
          "    assert_eq!(guard.value.is_some(), true);",
          "    assert_eq!(guard.pool, &pool);"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool::<TestType, fn() -> TestType>::new();",
          "    let value = Some(Box::new(TestType));",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value,",
          "    };",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", guard));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"PoolGuard\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"value\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"Some\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"TestType\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).len() > 0);",
          "    assert_eq!(guard.value.is_some(), true);",
          "    assert_eq!(guard.pool, &pool);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool::<TestType, fn() -> TestType>::new();",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: None,",
          "    };",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", guard));",
          "}"
        ],
        "oracle": [
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"PoolGuard\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"value: None\"));",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", guard)), \"PoolGuard(value: None)\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", guard)).len(), \"PoolGuard(value: None)\".len());",
          "    assert!(format!(\"{:?}\", guard).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool::<TestType, fn() -> TestType>::new();",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: None,",
          "    };",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", guard));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"PoolGuard\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"value: None\"));",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", guard)), \"PoolGuard(value: None)\");",
          "    assert_eq!(core::fmt::format(format_args!(\"{:?}\", guard)).len(), \"PoolGuard(value: None)\".len());",
          "    assert!(format!(\"{:?}\", guard).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool::<TestType, fn() -> TestType>::new();",
          "    let value = Some(Box::new(TestType));",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value,",
          "    };",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", guard));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(guard.value.is_some(), true);",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"PoolGuard\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"TestType\"));",
          "    assert!(guard.pool.is_not_null());",
          "    assert_eq!(guard.value.as_ref().unwrap().is_some(), true);"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool::<TestType, fn() -> TestType>::new();",
          "    let value = Some(Box::new(TestType));",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value,",
          "    };",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", guard));",
          "    assert_eq!(guard.value.is_some(), true);",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"PoolGuard\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"TestType\"));",
          "    assert!(guard.pool.is_not_null());",
          "    assert_eq!(guard.value.as_ref().unwrap().is_some(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool::<TestType, fn() -> TestType>::new();",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: None,",
          "    };",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", guard));",
          "}"
        ],
        "oracle": [
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"PoolGuard\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"value: None\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"pool:\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).is_ok());",
          "    assert_eq!(guard.value, None);"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    impl Send for TestType {}",
          "",
          "    let pool = Pool::<TestType, fn() -> TestType>::new();",
          "    let guard = PoolGuard {",
          "        pool: &pool,",
          "        value: None,",
          "    };",
          "    let _ = core::fmt::format(format_args!(\"{:?}\", guard));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"PoolGuard\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"value: None\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).contains(\"pool:\"));",
          "    assert!(core::fmt::format(format_args!(\"{:?}\", guard)).is_ok());",
          "    assert_eq!(guard.value, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]