[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges: &[Utf8Range] = &[];",
          "    NextInsert::new(state_id, ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| NextInsert::new(ROOT, &[])).is_err(), true);"
        ],
        "code": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges: &[Utf8Range] = &[];",
          "    NextInsert::new(state_id, ranges);",
          "    assert_eq!(std::panic::catch_unwind(|| NextInsert::new(ROOT, &[])).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges: &[Utf8Range] = &[Utf8Range { start: 0, end: 1 }, ",
          "                                  Utf8Range { start: 2, end: 3 },",
          "                                  Utf8Range { start: 4, end: 5 },",
          "                                  Utf8Range { start: 6, end: 7 },",
          "                                  Utf8Range { start: 8, end: 9 }];",
          "    NextInsert::new(state_id, ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(std::panic::catch_unwind(|| NextInsert::new(ROOT, &[])), Err(_)));",
          "    assert!(matches!(std::panic::catch_unwind(|| NextInsert::new(ROOT, &vec![Utf8Range { start: 0, end: 1 }; 0])), Err(_)));",
          "    assert!(matches!(std::panic::catch_unwind(|| NextInsert::new(ROOT, &[Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 3 }, Utf8Range { start: 4, end: 5 }, Utf8Range { start: 6, end: 7 }, Utf8Range { start: 8, end: 9 }])), Err(_)));"
        ],
        "code": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges: &[Utf8Range] = &[Utf8Range { start: 0, end: 1 }, ",
          "                                  Utf8Range { start: 2, end: 3 },",
          "                                  Utf8Range { start: 4, end: 5 },",
          "                                  Utf8Range { start: 6, end: 7 },",
          "                                  Utf8Range { start: 8, end: 9 }];",
          "    NextInsert::new(state_id, ranges);",
          "    assert!(matches!(std::panic::catch_unwind(|| NextInsert::new(ROOT, &[])), Err(_)));",
          "    assert!(matches!(std::panic::catch_unwind(|| NextInsert::new(ROOT, &vec![Utf8Range { start: 0, end: 1 }; 0])), Err(_)));",
          "    assert!(matches!(std::panic::catch_unwind(|| NextInsert::new(ROOT, &[Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 3 }, Utf8Range { start: 4, end: 5 }, Utf8Range { start: 6, end: 7 }, Utf8Range { start: 8, end: 9 }])), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]