[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges = &[Utf8Range { start: 0, end: 1 }];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_next_insert.state_id(), ROOT);",
          "    assert_eq!(_next_insert.len, 1);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    ",
          "    let ranges = &[",
          "    Utf8Range { start: 0, end: 1 },",
          "    Utf8Range { start: 2, end: 3 },",
          "    Utf8Range { start: 4, end: 5 },",
          "    Utf8Range { start: 6, end: 7 },",
          "    ];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "    assert_eq!(_next_insert.len, 4);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    assert_eq!(_next_insert.ranges()[1], Utf8Range { start: 2, end: 3 });",
          "    assert_eq!(_next_insert.ranges()[2], Utf8Range { start: 4, end: 5 });",
          "    assert_eq!(_next_insert.ranges()[3], Utf8Range { start: 6, end: 7 });",
          "    ",
          "    let ranges = &[Utf8Range { start: 5, end: 10 }];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "    assert_eq!(_next_insert.len, 1);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 5, end: 10 });"
        ],
        "code": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges = &[Utf8Range { start: 0, end: 1 }];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "    assert_eq!(_next_insert.state_id(), ROOT);",
          "    assert_eq!(_next_insert.len, 1);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    ",
          "    let ranges = &[",
          "    Utf8Range { start: 0, end: 1 },",
          "    Utf8Range { start: 2, end: 3 },",
          "    Utf8Range { start: 4, end: 5 },",
          "    Utf8Range { start: 6, end: 7 },",
          "    ];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "    assert_eq!(_next_insert.len, 4);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    assert_eq!(_next_insert.ranges()[1], Utf8Range { start: 2, end: 3 });",
          "    assert_eq!(_next_insert.ranges()[2], Utf8Range { start: 4, end: 5 });",
          "    assert_eq!(_next_insert.ranges()[3], Utf8Range { start: 6, end: 7 });",
          "    ",
          "    let ranges = &[Utf8Range { start: 5, end: 10 }];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "    assert_eq!(_next_insert.len, 1);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 5, end: 10 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges = &[Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 3 }];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_next_insert.state_id(), ROOT);",
          "    assert_eq!(_next_insert.len, 2);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    assert_eq!(_next_insert.ranges()[1], Utf8Range { start: 2, end: 3 });",
          "    assert_eq!(_next_insert.ranges()[2], Utf8Range { start: 0, end: 0 });",
          "    assert_eq!(_next_insert.ranges()[3], Utf8Range { start: 0, end: 0 });"
        ],
        "code": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges = &[Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 3 }];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "    assert_eq!(_next_insert.state_id(), ROOT);",
          "    assert_eq!(_next_insert.len, 2);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    assert_eq!(_next_insert.ranges()[1], Utf8Range { start: 2, end: 3 });",
          "    assert_eq!(_next_insert.ranges()[2], Utf8Range { start: 0, end: 0 });",
          "    assert_eq!(_next_insert.ranges()[3], Utf8Range { start: 0, end: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges = &[",
          "        Utf8Range { start: 0, end: 1 },",
          "        Utf8Range { start: 2, end: 3 },",
          "        Utf8Range { start: 4, end: 5 },",
          "    ];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_next_insert.state_id(), ROOT);",
          "    assert_eq!(_next_insert.len, 3);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    assert_eq!(_next_insert.ranges()[1], Utf8Range { start: 2, end: 3 });",
          "    assert_eq!(_next_insert.ranges()[2], Utf8Range { start: 4, end: 5 });"
        ],
        "code": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges = &[",
          "        Utf8Range { start: 0, end: 1 },",
          "        Utf8Range { start: 2, end: 3 },",
          "        Utf8Range { start: 4, end: 5 },",
          "    ];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "    assert_eq!(_next_insert.state_id(), ROOT);",
          "    assert_eq!(_next_insert.len, 3);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    assert_eq!(_next_insert.ranges()[1], Utf8Range { start: 2, end: 3 });",
          "    assert_eq!(_next_insert.ranges()[2], Utf8Range { start: 4, end: 5 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges = &[",
          "        Utf8Range { start: 0, end: 1 },",
          "        Utf8Range { start: 2, end: 3 },",
          "        Utf8Range { start: 4, end: 5 },",
          "        Utf8Range { start: 6, end: 7 },",
          "    ];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_next_insert.state_id(), ROOT);",
          "    assert_eq!(_next_insert.len, 4);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    assert_eq!(_next_insert.ranges()[1], Utf8Range { start: 2, end: 3 });",
          "    assert_eq!(_next_insert.ranges()[2], Utf8Range { start: 4, end: 5 });",
          "    assert_eq!(_next_insert.ranges()[3], Utf8Range { start: 6, end: 7 });"
        ],
        "code": [
          "{",
          "    let state_id = ROOT;",
          "    let ranges = &[",
          "        Utf8Range { start: 0, end: 1 },",
          "        Utf8Range { start: 2, end: 3 },",
          "        Utf8Range { start: 4, end: 5 },",
          "        Utf8Range { start: 6, end: 7 },",
          "    ];",
          "    let _next_insert = NextInsert::new(state_id, ranges);",
          "    assert_eq!(_next_insert.state_id(), ROOT);",
          "    assert_eq!(_next_insert.len, 4);",
          "    assert_eq!(_next_insert.ranges()[0], Utf8Range { start: 0, end: 1 });",
          "    assert_eq!(_next_insert.ranges()[1], Utf8Range { start: 2, end: 3 });",
          "    assert_eq!(_next_insert.ranges()[2], Utf8Range { start: 4, end: 5 });",
          "    assert_eq!(_next_insert.ranges()[3], Utf8Range { start: 6, end: 7 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]