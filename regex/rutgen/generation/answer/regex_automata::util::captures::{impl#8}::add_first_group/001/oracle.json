[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let pid = PatternID(SmallIndex(0));",
          "    group_info.add_first_group(pid);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(group_info.slot_ranges.len(), 1);",
          "    assert_eq!(group_info.name_to_index.len(), 1);",
          "    assert_eq!(group_info.index_to_name.len(), 1);",
          "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
          "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
          "    assert!(group_info.slot_ranges[0].0 == group_info.slot_ranges[0].1);",
          "    assert!(group_info.name_to_index[0].is_empty());",
          "    assert!(group_info.index_to_name[0][0].is_none());"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let pid = PatternID(SmallIndex(0));",
          "    group_info.add_first_group(pid);",
          "    assert_eq!(group_info.slot_ranges.len(), 1);",
          "    assert_eq!(group_info.name_to_index.len(), 1);",
          "    assert_eq!(group_info.index_to_name.len(), 1);",
          "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
          "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
          "    assert!(group_info.slot_ranges[0].0 == group_info.slot_ranges[0].1);",
          "    assert!(group_info.name_to_index[0].is_empty());",
          "    assert!(group_info.index_to_name[0][0].is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let pid = PatternID(SmallIndex(0));",
          "    group_info.add_first_group(pid);",
          "    group_info.add_first_group(pid);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(std::panic::catch_unwind(|| group_info.add_first_group(pid)), Err(_)));",
          "    assert_eq!(group_info.slot_ranges.len(), 1);",
          "    assert_eq!(group_info.name_to_index.len(), 1);",
          "    assert_eq!(group_info.index_to_name.len(), 1);",
          "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let pid = PatternID(SmallIndex(0));",
          "    group_info.add_first_group(pid);",
          "    group_info.add_first_group(pid);",
          "    assert!(matches!(std::panic::catch_unwind(|| group_info.add_first_group(pid)), Err(_)));",
          "    assert_eq!(group_info.slot_ranges.len(), 1);",
          "    assert_eq!(group_info.name_to_index.len(), 1);",
          "    assert_eq!(group_info.index_to_name.len(), 1);",
          "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let pid1 = PatternID(SmallIndex(0));",
          "    group_info.add_first_group(pid1);",
          "    let pid2 = PatternID(SmallIndex(1));",
          "    group_info.add_first_group(pid2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(group_info.slot_ranges.len(), 2);",
          "    assert_eq!(group_info.name_to_index.len(), 2);",
          "    assert_eq!(group_info.index_to_name.len(), 2);",
          "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
          "    assert_eq!(group_info.slot_ranges[1], (SmallIndex(1), SmallIndex(1)));",
          "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
          "    assert_eq!(group_info.small_slot_len(), SmallIndex(1));"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let pid1 = PatternID(SmallIndex(0));",
          "    group_info.add_first_group(pid1);",
          "    let pid2 = PatternID(SmallIndex(1));",
          "    group_info.add_first_group(pid2);",
          "    assert_eq!(group_info.slot_ranges.len(), 2);",
          "    assert_eq!(group_info.name_to_index.len(), 2);",
          "    assert_eq!(group_info.index_to_name.len(), 2);",
          "    assert_eq!(group_info.slot_ranges[0], (SmallIndex(0), SmallIndex(0)));",
          "    assert_eq!(group_info.slot_ranges[1], (SmallIndex(1), SmallIndex(1)));",
          "    assert_eq!(group_info.memory_extra, core::mem::size_of::<Option<Arc<str>>>());",
          "    assert_eq!(group_info.small_slot_len(), SmallIndex(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let pid1 = PatternID(SmallIndex(0));",
          "    group_info.add_first_group(pid1);",
          "    let pid3 = PatternID(SmallIndex(2)); // This should panic",
          "    group_info.add_first_group(pid3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pid1.as_usize(), group_info.slot_ranges.len());",
          "    assert_eq!(pid1.as_usize(), group_info.name_to_index.len());",
          "    assert_eq!(pid1.as_usize(), group_info.index_to_name.len());",
          "    let slot_start = group_info.small_slot_len();",
          "    assert_eq!(slot_start, SmallIndex(0));"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let pid1 = PatternID(SmallIndex(0));",
          "    group_info.add_first_group(pid1);",
          "    let pid3 = PatternID(SmallIndex(2)); // This should panic",
          "    group_info.add_first_group(pid3);",
          "    assert_eq!(pid1.as_usize(), group_info.slot_ranges.len());",
          "    assert_eq!(pid1.as_usize(), group_info.name_to_index.len());",
          "    assert_eq!(pid1.as_usize(), group_info.index_to_name.len());",
          "    let slot_start = group_info.small_slot_len();",
          "    assert_eq!(slot_start, SmallIndex(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]