[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        dead_state: StateID,",
          "        start_state: StateID,",
          "        accel_state: StateID,",
          "    }",
          "    ",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            Self {",
          "                dead_state: StateID(SmallIndex::new(0)),",
          "                start_state: StateID(SmallIndex::new(1)),",
          "                accel_state: StateID(SmallIndex::new(2)),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    impl Automaton for TestDFA {",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == self.dead_state",
          "        }",
          "",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            id == self.start_state",
          "        }",
          "",
          "        fn is_quit_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "",
          "        fn is_match_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "",
          "        fn is_accel_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let state_id = dfa.dead_state;",
          "",
          "    let result = fmt_state_indicator(&mut core::fmt::Formatter::new(), dfa, state_id);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"D\")? == Ok",
          "    write!(f, \">\")? == Err",
          "    fmt_state_indicator(dfa, state_id) == Ok(())",
          "    dfa.is_dead_state(state_id) == true",
          "    dfa.is_start_state(state_id) == true"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        dead_state: StateID,",
          "        start_state: StateID,",
          "        accel_state: StateID,",
          "    }",
          "    ",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            Self {",
          "                dead_state: StateID(SmallIndex::new(0)),",
          "                start_state: StateID(SmallIndex::new(1)),",
          "                accel_state: StateID(SmallIndex::new(2)),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    impl Automaton for TestDFA {",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == self.dead_state",
          "        }",
          "",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            id == self.start_state",
          "        }",
          "",
          "        fn is_quit_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "",
          "        fn is_match_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "",
          "        fn is_accel_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let state_id = dfa.dead_state;",
          "",
          "    let result = fmt_state_indicator(&mut core::fmt::Formatter::new(), dfa, state_id);",
          "    write!(f, \"D\")? == Ok",
          "    write!(f, \">\")? == Err",
          "    fmt_state_indicator(dfa, state_id) == Ok(())",
          "    dfa.is_dead_state(state_id) == true",
          "    dfa.is_start_state(state_id) == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        dead_state: StateID,",
          "        start_state: StateID,",
          "        accel_state: StateID,",
          "    }",
          "    ",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            Self {",
          "                dead_state: StateID(SmallIndex::new(0)),",
          "                start_state: StateID(SmallIndex::new(1)),",
          "                accel_state: StateID(SmallIndex::new(2)),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    impl Automaton for TestDFA {",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == self.dead_state",
          "        }",
          "",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            id == self.start_state",
          "        }",
          "",
          "        fn is_quit_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "",
          "        fn is_match_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "",
          "        fn is_accel_state(&self, id: StateID) -> bool {",
          "            id == self.accel_state",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let state_id = dfa.dead_state;",
          "",
          "    let result = fmt_state_indicator(&mut core::fmt::Formatter::new(), dfa, state_id);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"D\").is_ok();",
          "    dfa.is_dead_state(id);",
          "    write!(f, \">\").is_err();",
          "    dfa.is_start_state(id);",
          "    fmt_state_indicator(f, dfa, id).unwrap();"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        dead_state: StateID,",
          "        start_state: StateID,",
          "        accel_state: StateID,",
          "    }",
          "    ",
          "    impl TestDFA {",
          "        fn new() -> Self {",
          "            Self {",
          "                dead_state: StateID(SmallIndex::new(0)),",
          "                start_state: StateID(SmallIndex::new(1)),",
          "                accel_state: StateID(SmallIndex::new(2)),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    impl Automaton for TestDFA {",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            id == self.dead_state",
          "        }",
          "",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            id == self.start_state",
          "        }",
          "",
          "        fn is_quit_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "",
          "        fn is_match_state(&self, _: StateID) -> bool {",
          "            false",
          "        }",
          "",
          "        fn is_accel_state(&self, id: StateID) -> bool {",
          "            id == self.accel_state",
          "        }",
          "    }",
          "",
          "    let dfa = TestDFA::new();",
          "    let state_id = dfa.dead_state;",
          "",
          "    let result = fmt_state_indicator(&mut core::fmt::Formatter::new(), dfa, state_id);",
          "    write!(f, \"D\").is_ok();",
          "    dfa.is_dead_state(id);",
          "    write!(f, \">\").is_err();",
          "    dfa.is_start_state(id);",
          "    fmt_state_indicator(f, dfa, id).unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]