[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![1, 2, 3]);",
          "    let literal_lit = Literal::exact(vec![4, 5, 6]);",
          "    literal_self.extend(&literal_lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_self.as_bytes(), &[1, 2, 3]);",
          "    assert_eq!(literal_self.len(), 3);",
          "    assert!(literal_self.is_inexact());"
        ],
        "code": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![1, 2, 3]);",
          "    let literal_lit = Literal::exact(vec![4, 5, 6]);",
          "    literal_self.extend(&literal_lit);",
          "    assert_eq!(literal_self.as_bytes(), &[1, 2, 3]);",
          "    assert_eq!(literal_self.len(), 3);",
          "    assert!(literal_self.is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![7, 8, 9]);",
          "    let literal_lit = Literal::exact(vec![]);",
          "    literal_self.extend(&literal_lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_self.is_exact(), false);",
          "    assert_eq!(literal_self.as_bytes(), vec![7, 8, 9].as_slice());",
          "    assert_eq!(literal_self.len(), 3);",
          "    assert!(literal_self.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![7, 8, 9]);",
          "    let literal_lit = Literal::exact(vec![]);",
          "    literal_self.extend(&literal_lit);",
          "    assert_eq!(literal_self.is_exact(), false);",
          "    assert_eq!(literal_self.as_bytes(), vec![7, 8, 9].as_slice());",
          "    assert_eq!(literal_self.len(), 3);",
          "    assert!(literal_self.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![10, 11]);",
          "    let literal_lit = Literal::inexact(vec![12, 13]);",
          "    literal_self.extend(&literal_lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_self.as_bytes(), &[10, 11]);",
          "    assert_eq!(literal_self.len(), 2);",
          "    assert!(literal_self.is_inexact());",
          "    assert!(!literal_self.is_exact());"
        ],
        "code": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![10, 11]);",
          "    let literal_lit = Literal::inexact(vec![12, 13]);",
          "    literal_self.extend(&literal_lit);",
          "    assert_eq!(literal_self.as_bytes(), &[10, 11]);",
          "    assert_eq!(literal_self.len(), 2);",
          "    assert!(literal_self.is_inexact());",
          "    assert!(!literal_self.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![14]);",
          "    let literal_lit = Literal::exact(vec![15, 16]);",
          "    literal_self.extend(&literal_lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_self.bytes.len(), 1);",
          "    assert_eq!(literal_self.bytes, vec![14]);",
          "    assert!(literal_self.is_exact());",
          "    assert!(literal_self.is_empty());",
          "    assert!(!literal_self.is_exact());"
        ],
        "code": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![14]);",
          "    let literal_lit = Literal::exact(vec![15, 16]);",
          "    literal_self.extend(&literal_lit);",
          "    assert_eq!(literal_self.bytes.len(), 1);",
          "    assert_eq!(literal_self.bytes, vec![14]);",
          "    assert!(literal_self.is_exact());",
          "    assert!(literal_self.is_empty());",
          "    assert!(!literal_self.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![17, 18, 19]);",
          "    let literal_lit = Literal::exact(vec![20, 21, 22, 23, 24]);",
          "    literal_self.extend(&literal_lit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal_self.bytes, vec![17, 18, 19]);",
          "    assert_eq!(literal_self.is_exact(), false);"
        ],
        "code": [
          "{",
          "    let mut literal_self = Literal::inexact(vec![17, 18, 19]);",
          "    let literal_lit = Literal::exact(vec![20, 21, 22, 23, 24]);",
          "    literal_self.extend(&literal_lit);",
          "    assert_eq!(literal_self.bytes, vec![17, 18, 19]);",
          "    assert_eq!(literal_self.is_exact(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]