[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let values = vec![1, 2, 3];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&1)",
          "    let _ = iter.next(); // should return Some(&2)",
          "    let _ = iter.next(); // should return Some(&3)",
          "}"
        ],
        "oracle": [
          "    let values = vec![1, 2, 3];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.next(), Some(&2));",
          "    assert_eq!(iter.next(), Some(&3));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let values = vec![1, 2, 3];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&1)",
          "    let _ = iter.next(); // should return Some(&2)",
          "    let _ = iter.next(); // should return Some(&3)",
          "    let values = vec![1, 2, 3];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.next(), Some(&2));",
          "    assert_eq!(iter.next(), Some(&3));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let values = vec![42];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&42)",
          "}"
        ],
        "oracle": [
          "    let values = vec![42]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), Some(&42));",
          "    let values = vec![1, 2, 3]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), Some(&1));",
          "    let values: Vec<i32> = vec![]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), None);",
          "    let values = vec![10, 20, 30, 40]; let mut iter = IntervalSetIter(values.iter()); iter.next(); assert_eq!(iter.next(), Some(&20));",
          "    let values = vec![100, 200]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), Some(&100)); iter.next(); assert_eq!(iter.next(), Some(&200));",
          "    let values = vec![5]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), Some(&5)); assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let values = vec![42];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&42)",
          "    let values = vec![42]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), Some(&42));",
          "    let values = vec![1, 2, 3]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), Some(&1));",
          "    let values: Vec<i32> = vec![]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), None);",
          "    let values = vec![10, 20, 30, 40]; let mut iter = IntervalSetIter(values.iter()); iter.next(); assert_eq!(iter.next(), Some(&20));",
          "    let values = vec![100, 200]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), Some(&100)); iter.next(); assert_eq!(iter.next(), Some(&200));",
          "    let values = vec![5]; let mut iter = IntervalSetIter(values.iter()); assert_eq!(iter.next(), Some(&5)); assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let values: Vec<i32> = Vec::new();",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return None",
          "}"
        ],
        "oracle": [
          "    let values: Vec<i32> = Vec::new();",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let values: Vec<i32> = Vec::new();",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return None",
          "    let values: Vec<i32> = Vec::new();",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let values = vec!['a', 'b', 'c'];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&'a')",
          "    let _ = iter.next(); // should return Some(&'b')",
          "    let _ = iter.next(); // should return Some(&'c')",
          "}"
        ],
        "oracle": [
          "    let values = vec!['a', 'b', 'c'];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    assert_eq!(iter.next(), Some(&'a'));",
          "    assert_eq!(iter.next(), Some(&'b'));",
          "    assert_eq!(iter.next(), Some(&'c'));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let values = vec!['a', 'b', 'c'];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&'a')",
          "    let _ = iter.next(); // should return Some(&'b')",
          "    let _ = iter.next(); // should return Some(&'c')",
          "    let values = vec!['a', 'b', 'c'];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    assert_eq!(iter.next(), Some(&'a'));",
          "    assert_eq!(iter.next(), Some(&'b'));",
          "    assert_eq!(iter.next(), Some(&'c'));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let values = vec![1, 1, 2];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&1)",
          "    let _ = iter.next(); // should return Some(&1)",
          "    let _ = iter.next(); // should return Some(&2)",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.next(), Some(&2));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let values = vec![1, 1, 2];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&1)",
          "    let _ = iter.next(); // should return Some(&1)",
          "    let _ = iter.next(); // should return Some(&2)",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.next(), Some(&1));",
          "    assert_eq!(iter.next(), Some(&2));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let values: Vec<&str> = vec![\"hello\", \"world\"];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&\"hello\")",
          "    let _ = iter.next(); // should return Some(&\"world\")",
          "}"
        ],
        "oracle": [
          "    let values: Vec<&str> = vec![\"hello\", \"world\"];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    assert_eq!(iter.next(), Some(&\"hello\"));",
          "    assert_eq!(iter.next(), Some(&\"world\"));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let values: Vec<&str> = vec![\"hello\", \"world\"];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    let _ = iter.next(); // should return Some(&\"hello\")",
          "    let _ = iter.next(); // should return Some(&\"world\")",
          "    let values: Vec<&str> = vec![\"hello\", \"world\"];",
          "    let mut iter = IntervalSetIter(values.iter());",
          "    assert_eq!(iter.next(), Some(&\"hello\"));",
          "    assert_eq!(iter.next(), Some(&\"world\"));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]