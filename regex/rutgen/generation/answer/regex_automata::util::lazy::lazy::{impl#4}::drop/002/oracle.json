[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyData {",
          "        value: i32,",
          "    }",
          "",
          "    let data = Box::new(DummyData { value: 42 });",
          "    let lazy: Lazy<DummyData, fn() -> DummyData> = Lazy {",
          "        state: AtomicU8::new(LAZY_STATE_DONE),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
          "    };",
          "",
          "    unsafe {",
          "        lazy.drop();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE);",
          "    assert!(!lazy.data.get_mut().is_null());",
          "    assert_eq!((*lazy.data.get_mut()).value, 42);"
        ],
        "code": [
          "{",
          "    struct DummyData {",
          "        value: i32,",
          "    }",
          "",
          "    let data = Box::new(DummyData { value: 42 });",
          "    let lazy: Lazy<DummyData, fn() -> DummyData> = Lazy {",
          "        state: AtomicU8::new(LAZY_STATE_DONE),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
          "    };",
          "",
          "    unsafe {",
          "        lazy.drop();",
          "    }",
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE);",
          "    assert!(!lazy.data.get_mut().is_null());",
          "    assert_eq!((*lazy.data.get_mut()).value, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherDummyData {",
          "        value: String,",
          "    }",
          "",
          "    let data = Box::new(AnotherDummyData { value: String::from(\"Hello\") });",
          "    let lazy: Lazy<AnotherDummyData, fn() -> AnotherDummyData> = Lazy {",
          "        state: AtomicU8::new(LAZY_STATE_DONE),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
          "    };",
          "",
          "    unsafe {",
          "        lazy.drop();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.state.get(), LAZY_STATE_DONE);",
          "    assert!(lazy.data.get().as_ptr().is_null());",
          "    assert!(lazy.create.get().is_none());"
        ],
        "code": [
          "{",
          "    struct AnotherDummyData {",
          "        value: String,",
          "    }",
          "",
          "    let data = Box::new(AnotherDummyData { value: String::from(\"Hello\") });",
          "    let lazy: Lazy<AnotherDummyData, fn() -> AnotherDummyData> = Lazy {",
          "        state: AtomicU8::new(LAZY_STATE_DONE),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
          "    };",
          "",
          "    unsafe {",
          "        lazy.drop();",
          "    }",
          "    assert_eq!(lazy.state.get(), LAZY_STATE_DONE);",
          "    assert!(lazy.data.get().as_ptr().is_null());",
          "    assert!(lazy.create.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DifferentData {",
          "        value: f64,",
          "    }",
          "",
          "    let data = Box::new(DifferentData { value: 3.14 });",
          "    let lazy: Lazy<DifferentData, fn() -> DifferentData> = Lazy {",
          "        state: AtomicU8::new(LAZY_STATE_DONE),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
          "    };",
          "",
          "    unsafe {",
          "        lazy.drop();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE);",
          "    assert!(!lazy.data.get_mut().is_null());",
          "    assert!(lazy.create.get().is_none());"
        ],
        "code": [
          "{",
          "    struct DifferentData {",
          "        value: f64,",
          "    }",
          "",
          "    let data = Box::new(DifferentData { value: 3.14 });",
          "    let lazy: Lazy<DifferentData, fn() -> DifferentData> = Lazy {",
          "        state: AtomicU8::new(LAZY_STATE_DONE),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(Box::into_raw(data))),",
          "    };",
          "",
          "    unsafe {",
          "        lazy.drop();",
          "    }",
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE);",
          "    assert!(!lazy.data.get_mut().is_null());",
          "    assert!(lazy.create.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]