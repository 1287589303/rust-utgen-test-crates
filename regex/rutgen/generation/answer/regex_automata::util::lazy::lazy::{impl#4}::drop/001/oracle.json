[
  {
    "uses": [
      "use core::sync::atomic::Ordering;",
      "use core::cell::Cell;",
      "use core::mem::MaybeUninit;",
      "use core::sync::atomic::AtomicU8;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::cell::Cell;",
          "    use core::mem::MaybeUninit;",
          "    use core::sync::atomic::{AtomicU8, Ordering};",
          "",
          "    const LAZY_STATE_INIT: u8 = 0;",
          "    const LAZY_STATE_BUSY: u8 = 1;",
          "",
          "    struct LazyTest {",
          "        state: AtomicU8,",
          "        create: Cell<Option<fn()>>,",
          "        data: Cell<MaybeUninit<*mut u8>>,",
          "    }",
          "",
          "    let lazy = LazyTest {",
          "        state: AtomicU8::new(LAZY_STATE_INIT),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(core::ptr::null_mut())),",
          "    };",
          "",
          "    // Call the drop function",
          "    let _ = unsafe { &mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy)) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.data.get_mut().assume_init(), core::ptr::null_mut());",
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_INIT);",
          "    lazy.state.store(LAZY_STATE_DONE, Ordering::SeqCst);",
          "    assert!(matches!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE));"
        ],
        "code": [
          "{",
          "    use core::cell::Cell;",
          "    use core::mem::MaybeUninit;",
          "    use core::sync::atomic::{AtomicU8, Ordering};",
          "",
          "    const LAZY_STATE_INIT: u8 = 0;",
          "    const LAZY_STATE_BUSY: u8 = 1;",
          "",
          "    struct LazyTest {",
          "        state: AtomicU8,",
          "        create: Cell<Option<fn()>>,",
          "        data: Cell<MaybeUninit<*mut u8>>,",
          "    }",
          "",
          "    let lazy = LazyTest {",
          "        state: AtomicU8::new(LAZY_STATE_INIT),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(core::ptr::null_mut())),",
          "    };",
          "",
          "    // Call the drop function",
          "    let _ = unsafe { &mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy)) };",
          "    assert_eq!(lazy.data.get_mut().assume_init(), core::ptr::null_mut());",
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_INIT);",
          "    lazy.state.store(LAZY_STATE_DONE, Ordering::SeqCst);",
          "    assert!(matches!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_DONE));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::cell::Cell;",
          "    use core::mem::MaybeUninit;",
          "    use core::sync::atomic::{AtomicU8, Ordering};",
          "",
          "    const LAZY_STATE_INIT: u8 = 0;",
          "    const LAZY_STATE_BUSY: u8 = 1;",
          "",
          "    struct LazyTest {",
          "        state: AtomicU8,",
          "        create: Cell<Option<fn()>>,",
          "        data: Cell<MaybeUninit<*mut u8>>,",
          "    }",
          "",
          "    let lazy = LazyTest {",
          "        state: AtomicU8::new(LAZY_STATE_BUSY),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(core::ptr::null_mut())),",
          "    };",
          "",
          "    // Call the drop function",
          "    let _ = unsafe { &mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy)) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_BUSY);",
          "    assert!(lazy.data.get().assume_init_ref().is_null());",
          "    assert!(lazy.create.get().is_none());",
          "    unsafe { std::ptr::drop_in_place(&mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy))); }",
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_BUSY);"
        ],
        "code": [
          "{",
          "    use core::cell::Cell;",
          "    use core::mem::MaybeUninit;",
          "    use core::sync::atomic::{AtomicU8, Ordering};",
          "",
          "    const LAZY_STATE_INIT: u8 = 0;",
          "    const LAZY_STATE_BUSY: u8 = 1;",
          "",
          "    struct LazyTest {",
          "        state: AtomicU8,",
          "        create: Cell<Option<fn()>>,",
          "        data: Cell<MaybeUninit<*mut u8>>,",
          "    }",
          "",
          "    let lazy = LazyTest {",
          "        state: AtomicU8::new(LAZY_STATE_BUSY),",
          "        create: Cell::new(None),",
          "        data: Cell::new(MaybeUninit::new(core::ptr::null_mut())),",
          "    };",
          "",
          "    // Call the drop function",
          "    let _ = unsafe { &mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy)) };",
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_BUSY);",
          "    assert!(lazy.data.get().assume_init_ref().is_null());",
          "    assert!(lazy.create.get().is_none());",
          "    unsafe { std::ptr::drop_in_place(&mut *(std::mem::transmute::<&LazyTest, *mut LazyTest>(&lazy))); }",
          "    assert_eq!(lazy.state.load(Ordering::SeqCst), LAZY_STATE_BUSY);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]