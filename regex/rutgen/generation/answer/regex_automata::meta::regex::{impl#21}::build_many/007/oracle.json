[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let result = builder.build_many::<&str>(&[]);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let regex = result.unwrap();",
          "    assert_eq!(None, regex.find(\"\"));",
          "    assert!(regex.match_kind.is_none());",
          "    assert!(regex.utf8.is_none());",
          "    assert!(regex.config.pre.is_none());",
          "    assert!(regex.pool.is_empty());",
          "    assert!(regex.hir.is_none());",
          "    assert!(regex.ast.is_none());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let result = builder.build_many::<&str>(&[]);",
          "    assert!(result.is_ok());",
          "    let regex = result.unwrap();",
          "    assert_eq!(None, regex.find(\"\"));",
          "    assert!(regex.match_kind.is_none());",
          "    assert!(regex.utf8.is_none());",
          "    assert!(regex.config.pre.is_none());",
          "    assert!(regex.pool.is_empty());",
          "    assert!(regex.hir.is_none());",
          "    assert!(regex.ast.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let result = builder.build_many(&[\"a\"]);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let regex = result.unwrap();",
          "    assert_eq!(regex.find(\"a\"), Some(Match::new(0, 1)));",
          "    assert_eq!(regex.find(\"b\"), None);",
          "    assert!(regex.build_many::<&str>(&[]).is_ok());",
          "    let err = builder.build_many(&[\"a\", \"b\", r\"\\p{Foo}\", \"c\"]).unwrap_err();",
          "    assert_eq!(Some(PatternID::must(2)), err.pattern());",
          "    assert!(builder.build_many(&[\"(((\"]).is_err());",
          "    assert!(builder.build_many(&[\"abc\", \"123\", \"?!@#\"]).is_ok());",
          "    assert!(builder.build_many(&[\"a\", \"b\", \"c\"]).is_ok());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let result = builder.build_many(&[\"a\"]);",
          "    assert!(result.is_ok());",
          "    let regex = result.unwrap();",
          "    assert_eq!(regex.find(\"a\"), Some(Match::new(0, 1)));",
          "    assert_eq!(regex.find(\"b\"), None);",
          "    assert!(regex.build_many::<&str>(&[]).is_ok());",
          "    let err = builder.build_many(&[\"a\", \"b\", r\"\\p{Foo}\", \"c\"]).unwrap_err();",
          "    assert_eq!(Some(PatternID::must(2)), err.pattern());",
          "    assert!(builder.build_many(&[\"(((\"]).is_err());",
          "    assert!(builder.build_many(&[\"abc\", \"123\", \"?!@#\"]).is_ok());",
          "    assert!(builder.build_many(&[\"a\", \"b\", \"c\"]).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let result = builder.build_many(&[\"a\", \"invalid_regex(\", \"b\"]);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(Some(PatternID::must(1)), result.unwrap_err().pattern());",
          "    assert!(builder.build_many(&[]).is_ok());",
          "    assert_eq!(None, builder.build_many(&[]).unwrap().find(\"\"));",
          "    assert!(builder.build_many(&[\"valid\", \"regex\"]).is_ok());",
          "    assert!(builder.build_many(&[\"another\", \"valid\", \"regex\"]).is_ok());",
          "    assert!(builder.build_many(&[\"yet\", \"another\", \"valid\", \"regex\"]).is_ok());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let result = builder.build_many(&[\"a\", \"invalid_regex(\", \"b\"]);",
          "    assert!(result.is_err());",
          "    assert_eq!(Some(PatternID::must(1)), result.unwrap_err().pattern());",
          "    assert!(builder.build_many(&[]).is_ok());",
          "    assert_eq!(None, builder.build_many(&[]).unwrap().find(\"\"));",
          "    assert!(builder.build_many(&[\"valid\", \"regex\"]).is_ok());",
          "    assert!(builder.build_many(&[\"another\", \"valid\", \"regex\"]).is_ok());",
          "    assert!(builder.build_many(&[\"yet\", \"another\", \"valid\", \"regex\"]).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]