[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_set = ByteSet::empty();",
          "    let iter = empty_set.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.set, &empty_set);",
          "    assert_eq!(iter.b, 0);"
        ],
        "code": [
          "{",
          "    let empty_set = ByteSet::empty();",
          "    let iter = empty_set.iter();",
          "    assert_eq!(iter.set, &empty_set);",
          "    assert_eq!(iter.b, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut single_byte_set = ByteSet::empty();",
          "    single_byte_set.add(0x00);",
          "    let iter = single_byte_set.iter();",
          "}"
        ],
        "oracle": [
          "    let single_byte_set = ByteSet::empty();",
          "    assert_eq!(single_byte_set.iter(), ByteSetIter { set: &single_byte_set, b: 0 });",
          "    single_byte_set.add(0x00);",
          "    let iter = single_byte_set.iter();",
          "    assert_eq!(iter.set, &single_byte_set);",
          "    assert_eq!(iter.b, 0);"
        ],
        "code": [
          "{",
          "    let mut single_byte_set = ByteSet::empty();",
          "    single_byte_set.add(0x00);",
          "    let iter = single_byte_set.iter();",
          "    let single_byte_set = ByteSet::empty();",
          "    assert_eq!(single_byte_set.iter(), ByteSetIter { set: &single_byte_set, b: 0 });",
          "    single_byte_set.add(0x00);",
          "    let iter = single_byte_set.iter();",
          "    assert_eq!(iter.set, &single_byte_set);",
          "    assert_eq!(iter.b, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut multiple_bytes_set = ByteSet::empty();",
          "    multiple_bytes_set.add(0x00);",
          "    multiple_bytes_set.add(0x7F);",
          "    multiple_bytes_set.add(0xFF);",
          "    let iter = multiple_bytes_set.iter();",
          "}"
        ],
        "oracle": [
          "    let mut multiple_bytes_set = ByteSet::empty();",
          "    multiple_bytes_set.add(0x00);",
          "    multiple_bytes_set.add(0x7F);",
          "    multiple_bytes_set.add(0xFF);",
          "    let iter = multiple_bytes_set.iter();",
          "    assert_eq!(iter.set, &multiple_bytes_set);",
          "    assert_eq!(iter.b, 0);"
        ],
        "code": [
          "{",
          "    let mut multiple_bytes_set = ByteSet::empty();",
          "    multiple_bytes_set.add(0x00);",
          "    multiple_bytes_set.add(0x7F);",
          "    multiple_bytes_set.add(0xFF);",
          "    let iter = multiple_bytes_set.iter();",
          "    let mut multiple_bytes_set = ByteSet::empty();",
          "    multiple_bytes_set.add(0x00);",
          "    multiple_bytes_set.add(0x7F);",
          "    multiple_bytes_set.add(0xFF);",
          "    let iter = multiple_bytes_set.iter();",
          "    assert_eq!(iter.set, &multiple_bytes_set);",
          "    assert_eq!(iter.b, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut max_size_set = ByteSet::empty();",
          "    for byte in 0..=0xFF {",
          "        max_size_set.add(byte);",
          "    }",
          "    let iter = max_size_set.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.set, &max_size_set);",
          "    assert_eq!(iter.b, 0);",
          "    assert!(max_size_set.iter().count() > 0);",
          "    assert!(max_size_set.is_empty() == false);",
          "    assert!(iter.set.contains(0x80);",
          "    assert!(iter.set.contains(0xFF);",
          "    assert!(iter.set.contains(0x00);"
        ],
        "code": [
          "{",
          "    let mut max_size_set = ByteSet::empty();",
          "    for byte in 0..=0xFF {",
          "        max_size_set.add(byte);",
          "    }",
          "    let iter = max_size_set.iter();",
          "    assert_eq!(iter.set, &max_size_set);",
          "    assert_eq!(iter.b, 0);",
          "    assert!(max_size_set.iter().count() > 0);",
          "    assert!(max_size_set.is_empty() == false);",
          "    assert!(iter.set.contains(0x80);",
          "    assert!(iter.set.contains(0xFF);",
          "    assert!(iter.set.contains(0x00);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]