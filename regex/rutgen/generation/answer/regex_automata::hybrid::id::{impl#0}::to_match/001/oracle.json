[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(0);",
          "    let match_id = state_id.to_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(match_id.as_usize_unchecked(), 0 | LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert!(!match_id.is_unknown());",
          "    assert!(!match_id.is_dead());",
          "    assert!(!match_id.is_quit());",
          "    assert!(!match_id.is_start());"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(0);",
          "    let match_id = state_id.to_match();",
          "    assert_eq!(match_id.as_usize_unchecked(), 0 | LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert!(!match_id.is_unknown());",
          "    assert!(!match_id.is_dead());",
          "    assert!(!match_id.is_quit());",
          "    assert!(!match_id.is_start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(LazyStateID::MAX);",
          "    let match_id = state_id.to_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(match_id.as_usize_unchecked() & LazyStateID::MASK_MATCH, LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert_eq!(match_id.as_usize_unchecked() >> 4, state_id.as_usize_unchecked());",
          "    assert!(state_id.is_tagged() == false);",
          "    assert!(state_id.is_dead() == false);",
          "    assert!(state_id.is_quit() == false);",
          "    assert!(state_id.is_start() == false);",
          "    assert!(state_id.is_unknown() == false);",
          "    assert!(state_id.to_match().is_match());"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(LazyStateID::MAX);",
          "    let match_id = state_id.to_match();",
          "    assert_eq!(match_id.as_usize_unchecked() & LazyStateID::MASK_MATCH, LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert_eq!(match_id.as_usize_unchecked() >> 4, state_id.as_usize_unchecked());",
          "    assert!(state_id.is_tagged() == false);",
          "    assert!(state_id.is_dead() == false);",
          "    assert!(state_id.is_quit() == false);",
          "    assert!(state_id.is_start() == false);",
          "    assert!(state_id.is_unknown() == false);",
          "    assert!(state_id.to_match().is_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(0);",
          "    let match_id = state_id.to_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(match_id.as_usize_unchecked(), LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert!(!match_id.is_dead());",
          "    assert!(!match_id.is_start());",
          "    assert!(!match_id.is_quit());",
          "    assert!(!match_id.is_unknown());"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(0);",
          "    let match_id = state_id.to_match();",
          "    assert_eq!(match_id.as_usize_unchecked(), LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert!(!match_id.is_dead());",
          "    assert!(!match_id.is_start());",
          "    assert!(!match_id.is_quit());",
          "    assert!(!match_id.is_unknown());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked((1 << 15) - 1);",
          "    let match_id = state_id.to_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(match_id.as_usize_unchecked(), (1 << 15) - 1 | LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert!(!match_id.is_dead());",
          "    assert!(!match_id.is_quit());",
          "    assert!(!match_id.is_start());",
          "    assert!(!match_id.is_unknown());"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked((1 << 15) - 1);",
          "    let match_id = state_id.to_match();",
          "    assert_eq!(match_id.as_usize_unchecked(), (1 << 15) - 1 | LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert!(!match_id.is_dead());",
          "    assert!(!match_id.is_quit());",
          "    assert!(!match_id.is_start());",
          "    assert!(!match_id.is_unknown());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(5);",
          "    let match_id = state_id.to_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(match_id.as_usize_unchecked(), 5 | LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert!(!match_id.is_unknown());",
          "    assert!(!match_id.is_dead());",
          "    assert!(!match_id.is_quit());",
          "    assert!(!match_id.is_start());"
        ],
        "code": [
          "{",
          "    let state_id = LazyStateID::new_unchecked(5);",
          "    let match_id = state_id.to_match();",
          "    assert_eq!(match_id.as_usize_unchecked(), 5 | LazyStateID::MASK_MATCH);",
          "    assert!(match_id.is_match());",
          "    assert!(!match_id.is_unknown());",
          "    assert!(!match_id.is_dead());",
          "    assert!(!match_id.is_quit());",
          "    assert!(!match_id.is_start());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]