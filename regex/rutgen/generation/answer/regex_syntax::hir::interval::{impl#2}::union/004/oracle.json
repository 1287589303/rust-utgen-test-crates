[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
      "struct TestBound(i32);",
      "",
      "impl Bound for TestBound {",
      "    // Assume appropriate implementations for Bound traits here.",
      "}",
      "",
      "#[derive(Clone, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
      "struct TestInterval {",
      "    lower: TestBound,",
      "    upper: TestBound,",
      "}",
      "",
      "impl Interval for TestInterval {",
      "    type Bound = TestBound;",
      "",
      "    fn lower(&self) -> Self::Bound { self.lower }",
      "    fn upper(&self) -> Self::Bound { self.upper }",
      "    fn set_lower(&mut self, bound: Self::Bound) { self.lower = bound; }",
      "    fn set_upper(&mut self, bound: Self::Bound) { self.upper = bound; }",
      "    fn case_fold_simple(&self, _intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> { Ok(()) }",
      "    fn is_contiguous(&self, other: &Self) -> bool { true }",
      "    fn is_intersection_empty(&self, other: &Self) -> bool { false }",
      "    fn is_subset(&self, other: &Self) -> bool { self.lower >= other.lower && self.upper <= other.upper }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(1), upper: TestBound(5) },",
          "    ]);",
          "    let other_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(6), upper: TestBound(10) },",
          "    ]);",
          "    ",
          "    self_intervals.folded = false;",
          "",
          "    self_intervals.union(&other_intervals);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_intervals.intervals(), vec![TestInterval { lower: TestBound(1), upper: TestBound(5) }, TestInterval { lower: TestBound(6), upper: TestBound(10) }]);",
          "    assert!(!self_intervals.folded);",
          "    assert_eq!(self_intervals.ranges.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut self_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(1), upper: TestBound(5) },",
          "    ]);",
          "    let other_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(6), upper: TestBound(10) },",
          "    ]);",
          "    ",
          "    self_intervals.folded = false;",
          "",
          "    self_intervals.union(&other_intervals);",
          "    assert_eq!(self_intervals.intervals(), vec![TestInterval { lower: TestBound(1), upper: TestBound(5) }, TestInterval { lower: TestBound(6), upper: TestBound(10) }]);",
          "    assert!(!self_intervals.folded);",
          "    assert_eq!(self_intervals.ranges.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(0), upper: TestBound(1) },",
          "    ]);",
          "    let other_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(2), upper: TestBound(3) },",
          "    ]);",
          "    ",
          "    self_intervals.folded = false;",
          "",
          "    self_intervals.union(&other_intervals);",
          "}"
        ],
        "oracle": [
          "    let mut self_intervals = IntervalSet::new(vec![",
          "    TestInterval { lower: TestBound(0), upper: TestBound(1) },",
          "    ]);",
          "    let other_intervals = IntervalSet::new(vec![",
          "    TestInterval { lower: TestBound(2), upper: TestBound(3) },",
          "    ]);",
          "    ",
          "    self_intervals.folded = false;",
          "    ",
          "    self_intervals.union(&other_intervals);",
          "    ",
          "    assert_eq!(self_intervals.intervals(), vec![",
          "    TestInterval { lower: TestBound(0), upper: TestBound(1) },",
          "    TestInterval { lower: TestBound(2), upper: TestBound(3) },",
          "    ]);",
          "    ",
          "    assert!(self_intervals.folded == false);"
        ],
        "code": [
          "{",
          "    let mut self_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(0), upper: TestBound(1) },",
          "    ]);",
          "    let other_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(2), upper: TestBound(3) },",
          "    ]);",
          "    ",
          "    self_intervals.folded = false;",
          "",
          "    self_intervals.union(&other_intervals);",
          "    let mut self_intervals = IntervalSet::new(vec![",
          "    TestInterval { lower: TestBound(0), upper: TestBound(1) },",
          "    ]);",
          "    let other_intervals = IntervalSet::new(vec![",
          "    TestInterval { lower: TestBound(2), upper: TestBound(3) },",
          "    ]);",
          "    ",
          "    self_intervals.folded = false;",
          "    ",
          "    self_intervals.union(&other_intervals);",
          "    ",
          "    assert_eq!(self_intervals.intervals(), vec![",
          "    TestInterval { lower: TestBound(0), upper: TestBound(1) },",
          "    TestInterval { lower: TestBound(2), upper: TestBound(3) },",
          "    ]);",
          "    ",
          "    assert!(self_intervals.folded == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(10), upper: TestBound(20) },",
          "        TestInterval { lower: TestBound(30), upper: TestBound(40) },",
          "    ]);",
          "    let other_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(50), upper: TestBound(60) },",
          "    ]);",
          "    ",
          "    self_intervals.folded = false;",
          "",
          "    self_intervals.union(&other_intervals);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_intervals.intervals(), &[",
          "    TestInterval { lower: TestBound(10), upper: TestBound(20) },",
          "    TestInterval { lower: TestBound(30), upper: TestBound(40) },",
          "    TestInterval { lower: TestBound(50), upper: TestBound(60) },",
          "    ]);"
        ],
        "code": [
          "{",
          "    let mut self_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(10), upper: TestBound(20) },",
          "        TestInterval { lower: TestBound(30), upper: TestBound(40) },",
          "    ]);",
          "    let other_intervals = IntervalSet::new(vec![",
          "        TestInterval { lower: TestBound(50), upper: TestBound(60) },",
          "    ]);",
          "    ",
          "    self_intervals.folded = false;",
          "",
          "    self_intervals.union(&other_intervals);",
          "    assert_eq!(self_intervals.intervals(), &[",
          "    TestInterval { lower: TestBound(10), upper: TestBound(20) },",
          "    TestInterval { lower: TestBound(30), upper: TestBound(40) },",
          "    TestInterval { lower: TestBound(50), upper: TestBound(60) },",
          "    ]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]