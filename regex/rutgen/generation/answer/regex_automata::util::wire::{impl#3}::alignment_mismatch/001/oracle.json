[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alignment = 1;",
          "    let address = 0;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "}"
        ],
        "oracle": [
          "    let alignment = 1;",
          "    let address = 0;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let alignment = 16;",
          "    let address = 8;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let alignment = 4;",
          "    let address = 12;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let alignment = 0;",
          "    let address = 0;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let alignment = usize::MAX;",
          "    let address = usize::MAX;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let alignment = 1;",
          "    let address = 0;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    let alignment = 1;",
          "    let address = 0;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let alignment = 16;",
          "    let address = 8;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let alignment = 4;",
          "    let address = 12;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let alignment = 0;",
          "    let address = 0;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "    ",
          "    let alignment = usize::MAX;",
          "    let address = usize::MAX;",
          "    let expected = DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment, address });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alignment = 2048;",
          "    let address = 4096;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "}"
        ],
        "oracle": [
          "    let alignment = 2048;",
          "    let address = 4096;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    assert_eq!(result.0, DeserializeErrorKind::AlignmentMismatch { alignment: 2048, address: 4096 });"
        ],
        "code": [
          "{",
          "    let alignment = 2048;",
          "    let address = 4096;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    let alignment = 2048;",
          "    let address = 4096;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    assert_eq!(result.0, DeserializeErrorKind::AlignmentMismatch { alignment: 2048, address: 4096 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alignment = 4096;",
          "    let address = 8192;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 4096, address: 8192 }));"
        ],
        "code": [
          "{",
          "    let alignment = 4096;",
          "    let address = 8192;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 4096, address: 8192 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alignment = 2;",
          "    let address = 1;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "}"
        ],
        "oracle": [
          "    let alignment = 2;",
          "    let address = 1;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 2, address: 1 })));"
        ],
        "code": [
          "{",
          "    let alignment = 2;",
          "    let address = 1;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    let alignment = 2;",
          "    let address = 1;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    assert!(matches!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 2, address: 1 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alignment = 4095;",
          "    let address = 8191;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "}"
        ],
        "oracle": [
          "    let alignment = 4095;",
          "    let address = 8191;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 4095, address: 8191 }));"
        ],
        "code": [
          "{",
          "    let alignment = 4095;",
          "    let address = 8191;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    let alignment = 4095;",
          "    let address = 8191;",
          "    let result = DeserializeError::alignment_mismatch(alignment, address);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::AlignmentMismatch { alignment: 4095, address: 8191 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]