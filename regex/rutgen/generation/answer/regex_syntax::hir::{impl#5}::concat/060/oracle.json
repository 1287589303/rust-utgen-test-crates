[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let literal_hir = Hir::literal([b'a', b'b', b'c']); ",
          "    let result = Hir::concat(vec![empty_hir.clone(), literal_hir.clone(), empty_hir.clone()]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Concat(vec![Hir::literal(vec![b'a', b'b', b'c'])]));",
          "    assert_eq!(result.props, Properties::concat(&vec![empty_hir.props.clone(), literal_hir.props.clone(), empty_hir.props.clone()]));",
          "    assert!(result.props.is_literal());",
          "    assert!(result.props.minimum_len().is_some());",
          "    assert_eq!(result.props.maximum_len(), Some(3));",
          "    assert_eq!(result.props.explicit_captures_len, 0);",
          "    assert_eq!(result.props.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let literal_hir = Hir::literal([b'a', b'b', b'c']); ",
          "    let result = Hir::concat(vec![empty_hir.clone(), literal_hir.clone(), empty_hir.clone()]);",
          "    assert_eq!(result.kind, HirKind::Concat(vec![Hir::literal(vec![b'a', b'b', b'c'])]));",
          "    assert_eq!(result.props, Properties::concat(&vec![empty_hir.props.clone(), literal_hir.props.clone(), empty_hir.props.clone()]));",
          "    assert!(result.props.is_literal());",
          "    assert!(result.props.minimum_len().is_some());",
          "    assert_eq!(result.props.maximum_len(), Some(3));",
          "    assert_eq!(result.props.explicit_captures_len, 0);",
          "    assert_eq!(result.props.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let literal_hir = Hir::literal([b'x']);",
          "    let result = Hir::concat(vec![empty_hir.clone(), empty_hir.clone(), literal_hir.clone()]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Hir::literal([b'x']), result);",
          "    assert_eq!(result.kind, HirKind::Concat(vec![empty_hir.clone(), empty_hir.clone(), literal_hir.clone()]));",
          "    assert!(matches!(result.kind, HirKind::Concat(_)));",
          "    assert_eq!(result.props, Properties::concat(&vec![empty_hir.clone(), empty_hir.clone(), literal_hir.clone()]));"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let literal_hir = Hir::literal([b'x']);",
          "    let result = Hir::concat(vec![empty_hir.clone(), empty_hir.clone(), literal_hir.clone()]);",
          "    assert_eq!(Hir::literal([b'x']), result);",
          "    assert_eq!(result.kind, HirKind::Concat(vec![empty_hir.clone(), empty_hir.clone(), literal_hir.clone()]));",
          "    assert!(matches!(result.kind, HirKind::Concat(_)));",
          "    assert_eq!(result.props, Properties::concat(&vec![empty_hir.clone(), empty_hir.clone(), literal_hir.clone()]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let nested_concat = Hir::concat(vec![",
          "        Hir::literal([b'd', b'e']),",
          "        empty_hir.clone(),",
          "        Hir::literal([b'f']),",
          "    ]);",
          "    let result = Hir::concat(vec![nested_concat, empty_hir.clone(), Hir::literal([b'g'])]);",
          "}"
        ],
        "oracle": [
          "    let empty_hir = Hir::empty();",
          "    let nested_concat = Hir::concat(vec![",
          "    Hir::literal([b'd', b'e']),",
          "    empty_hir.clone(),",
          "    Hir::literal([b'f']),",
          "    ]);",
          "    let result = Hir::concat(vec![nested_concat, empty_hir.clone(), Hir::literal([b'g'])]);",
          "    let expected = Hir::literal(b\"defg\");",
          "    assert_eq!(expected, result);"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let nested_concat = Hir::concat(vec![",
          "        Hir::literal([b'd', b'e']),",
          "        empty_hir.clone(),",
          "        Hir::literal([b'f']),",
          "    ]);",
          "    let result = Hir::concat(vec![nested_concat, empty_hir.clone(), Hir::literal([b'g'])]);",
          "    let empty_hir = Hir::empty();",
          "    let nested_concat = Hir::concat(vec![",
          "    Hir::literal([b'd', b'e']),",
          "    empty_hir.clone(),",
          "    Hir::literal([b'f']),",
          "    ]);",
          "    let result = Hir::concat(vec![nested_concat, empty_hir.clone(), Hir::literal([b'g'])]);",
          "    let expected = Hir::literal(b\"defg\");",
          "    assert_eq!(expected, result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let literal_hir1 = Hir::literal([b'm']);",
          "    let literal_hir2 = Hir::literal([b'n']);",
          "    let result = Hir::concat(vec![empty_hir.clone(), literal_hir1.clone(), literal_hir2.clone(), empty_hir.clone()]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(HirKind::Concat(vec![Hir::literal(vec![b'm', b'n])]), result.kind);",
          "    assert!(matches!(result.props, Properties(_)));",
          "    assert_eq!(result.props.minimum_len(), Some(2));",
          "    assert_eq!(result.props.maximum_len(), Some(2));",
          "    assert!(result.props.is_utf8());",
          "    assert!(result.props.is_literal());",
          "    assert!(result.props.alternation_literal());",
          "    assert_eq!(result.props.explicit_captures_len(), 0);",
          "    assert_eq!(result.props.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let empty_hir = Hir::empty();",
          "    let literal_hir1 = Hir::literal([b'm']);",
          "    let literal_hir2 = Hir::literal([b'n']);",
          "    let result = Hir::concat(vec![empty_hir.clone(), literal_hir1.clone(), literal_hir2.clone(), empty_hir.clone()]);",
          "    assert_eq!(HirKind::Concat(vec![Hir::literal(vec![b'm', b'n])]), result.kind);",
          "    assert!(matches!(result.props, Properties(_)));",
          "    assert_eq!(result.props.minimum_len(), Some(2));",
          "    assert_eq!(result.props.maximum_len(), Some(2));",
          "    assert!(result.props.is_utf8());",
          "    assert!(result.props.is_literal());",
          "    assert!(result.props.alternation_literal());",
          "    assert_eq!(result.props.explicit_captures_len(), 0);",
          "    assert_eq!(result.props.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]