[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_set = PatternSet::with_capacity(0);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let _iter = set_matches.into_iter();",
          "}"
        ],
        "oracle": [
          "    _iter.patset == set_matches.0",
          "    _iter.it.start == 0",
          "    _iter.it.end == set_matches.0.capacity()",
          "    _iter.it == core::ops::Range { start: 0, end: set_matches.0.capacity() }",
          "    _iter.patset.is_empty() == true"
        ],
        "code": [
          "{",
          "    let pattern_set = PatternSet::with_capacity(0);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let _iter = set_matches.into_iter();",
          "    _iter.patset == set_matches.0",
          "    _iter.it.start == 0",
          "    _iter.it.end == set_matches.0.capacity()",
          "    _iter.it == core::ops::Range { start: 0, end: set_matches.0.capacity() }",
          "    _iter.patset.is_empty() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_set = PatternSet::with_capacity(5);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let _iter = set_matches.into_iter();",
          "}"
        ],
        "oracle": [
          "    let pattern_set = PatternSet::with_capacity(5);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let iter = set_matches.into_iter();",
          "    assert_eq!(iter.patset.capacity(), 5);",
          "    assert_eq!(iter.it.start, 0);",
          "    assert_eq!(iter.it.end, 5);"
        ],
        "code": [
          "{",
          "    let pattern_set = PatternSet::with_capacity(5);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let _iter = set_matches.into_iter();",
          "    let pattern_set = PatternSet::with_capacity(5);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let iter = set_matches.into_iter();",
          "    assert_eq!(iter.patset.capacity(), 5);",
          "    assert_eq!(iter.it.start, 0);",
          "    assert_eq!(iter.it.end, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_set = PatternSet::with_capacity(1);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let _iter = set_matches.into_iter();",
          "}"
        ],
        "oracle": [
          "    let pattern_set = PatternSet::with_capacity(1);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let iter = set_matches.into_iter();",
          "    assert_eq!(iter.patset, set_matches.0);",
          "    assert_eq!(iter.it.start, 0);",
          "    assert_eq!(iter.it.end, set_matches.0.capacity());"
        ],
        "code": [
          "{",
          "    let pattern_set = PatternSet::with_capacity(1);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let _iter = set_matches.into_iter();",
          "    let pattern_set = PatternSet::with_capacity(1);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let iter = set_matches.into_iter();",
          "    assert_eq!(iter.patset, set_matches.0);",
          "    assert_eq!(iter.it.start, 0);",
          "    assert_eq!(iter.it.end, set_matches.0.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_set = PatternSet::with_capacity(100);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let _iter = set_matches.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.patset.capacity(), 100);",
          "    assert!(matches!(_iter.it, core::ops::Range { start: 0, end: 100 }));",
          "    assert_eq!(_iter.it.start, 0);",
          "    assert_eq!(_iter.it.end, set_matches.0.capacity());"
        ],
        "code": [
          "{",
          "    let pattern_set = PatternSet::with_capacity(100);",
          "    let set_matches = SetMatches(pattern_set);",
          "    let _iter = set_matches.into_iter();",
          "    assert_eq!(_iter.patset.capacity(), 100);",
          "    assert!(matches!(_iter.it, core::ops::Range { start: 0, end: 100 }));",
          "    assert_eq!(_iter.it.start, 0);",
          "    assert_eq!(_iter.it.end, set_matches.0.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]