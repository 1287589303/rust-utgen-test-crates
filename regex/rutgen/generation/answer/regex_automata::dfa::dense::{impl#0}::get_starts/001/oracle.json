[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestConfig {",
          "        start_kind: Option<StartKind>,",
          "    }",
          "",
          "    let config = TestConfig { start_kind: None };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Both);"
        ],
        "code": [
          "{",
          "    struct TestConfig {",
          "        start_kind: Option<StartKind>,",
          "    }",
          "",
          "    let config = TestConfig { start_kind: None };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Both);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestConfig {",
          "        start_kind: Option<StartKind>,",
          "    }",
          "",
          "    let config = TestConfig { start_kind: Some(StartKind::Both) };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Both);",
          "    config.start_kind = Some(StartKind::Unanchored);",
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Unanchored);",
          "    config.start_kind = Some(StartKind::Anchored);",
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Anchored);",
          "    config.start_kind = None;",
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Both);"
        ],
        "code": [
          "{",
          "    struct TestConfig {",
          "        start_kind: Option<StartKind>,",
          "    }",
          "",
          "    let config = TestConfig { start_kind: Some(StartKind::Both) };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Both);",
          "    config.start_kind = Some(StartKind::Unanchored);",
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Unanchored);",
          "    config.start_kind = Some(StartKind::Anchored);",
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Anchored);",
          "    config.start_kind = None;",
          "    assert_eq!(config.start_kind.unwrap_or(StartKind::Both), StartKind::Both);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestConfig {",
          "        start_kind: Option<StartKind>,",
          "    }",
          "",
          "    let config = TestConfig { start_kind: Some(StartKind::Unanchored) };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, StartKind::Unanchored);",
          "    ",
          "    let config = TestConfig { start_kind: None };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "    assert_eq!(result, StartKind::Both);"
        ],
        "code": [
          "{",
          "    struct TestConfig {",
          "        start_kind: Option<StartKind>,",
          "    }",
          "",
          "    let config = TestConfig { start_kind: Some(StartKind::Unanchored) };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "    assert_eq!(result, StartKind::Unanchored);",
          "    ",
          "    let config = TestConfig { start_kind: None };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "    assert_eq!(result, StartKind::Both);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestConfig {",
          "        start_kind: Option<StartKind>,",
          "    }",
          "",
          "    let config = TestConfig { start_kind: Some(StartKind::Anchored) };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.start_kind, Some(StartKind::Anchored));",
          "    assert_eq!(result, StartKind::Anchored);",
          "    assert_eq!(TestConfig { start_kind: None }.start_kind.unwrap_or(StartKind::Both), StartKind::Both);",
          "    assert_eq!(TestConfig { start_kind: Some(StartKind::Both) }.start_kind.unwrap_or(StartKind::Both), StartKind::Both);",
          "    assert_eq!(TestConfig { start_kind: Some(StartKind::Unanchored) }.start_kind.unwrap_or(StartKind::Both), StartKind::Unanchored);"
        ],
        "code": [
          "{",
          "    struct TestConfig {",
          "        start_kind: Option<StartKind>,",
          "    }",
          "",
          "    let config = TestConfig { start_kind: Some(StartKind::Anchored) };",
          "    let result = config.start_kind.unwrap_or(StartKind::Both);",
          "    assert_eq!(config.start_kind, Some(StartKind::Anchored));",
          "    assert_eq!(result, StartKind::Anchored);",
          "    assert_eq!(TestConfig { start_kind: None }.start_kind.unwrap_or(StartKind::Both), StartKind::Both);",
          "    assert_eq!(TestConfig { start_kind: Some(StartKind::Both) }.start_kind.unwrap_or(StartKind::Both), StartKind::Both);",
          "    assert_eq!(TestConfig { start_kind: Some(StartKind::Unanchored) }.start_kind.unwrap_or(StartKind::Both), StartKind::Unanchored);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]