[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut other = Seq {",
          "        literals: Some(vec![Literal { span: Span { start: 0, end: 1 }, kind: LiteralKind::Character, c: 'a' }]),",
          "    };",
          "    let mut self_seq = Seq::infinite();",
          "    ",
          "    self_seq.cross_preamble(&mut other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_seq.literals, None);",
          "    assert_eq!(other.literals.as_ref().unwrap().len(), 1);",
          "    assert!(self_seq.is_infinite());",
          "    assert!(self_seq.is_exact() == false);",
          "    assert!(self_seq.is_empty() == false);",
          "    assert!(self_seq.min_literal_len().is_none());",
          "    assert!(self_seq.max_literal_len().is_none());"
        ],
        "code": [
          "{",
          "    let mut other = Seq {",
          "        literals: Some(vec![Literal { span: Span { start: 0, end: 1 }, kind: LiteralKind::Character, c: 'a' }]),",
          "    };",
          "    let mut self_seq = Seq::infinite();",
          "    ",
          "    self_seq.cross_preamble(&mut other);",
          "    assert_eq!(self_seq.literals, None);",
          "    assert_eq!(other.literals.as_ref().unwrap().len(), 1);",
          "    assert!(self_seq.is_infinite());",
          "    assert!(self_seq.is_exact() == false);",
          "    assert!(self_seq.is_empty() == false);",
          "    assert!(self_seq.min_literal_len().is_none());",
          "    assert!(self_seq.max_literal_len().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut other = Seq {",
          "        literals: Some(vec![Literal { span: Span { start: 0, end: 1 }, kind: LiteralKind::Character, c: 'b' }]),",
          "    };",
          "    let mut self_seq = Seq::infinite();",
          "",
          "    self_seq.cross_preamble(&mut other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_seq.literals(), None);",
          "    assert_eq!(other.literals().unwrap().len(), 1);",
          "    assert_eq!(other.literals().unwrap()[0].c, 'b');",
          "    assert!(self_seq.is_inexact());"
        ],
        "code": [
          "{",
          "    let mut other = Seq {",
          "        literals: Some(vec![Literal { span: Span { start: 0, end: 1 }, kind: LiteralKind::Character, c: 'b' }]),",
          "    };",
          "    let mut self_seq = Seq::infinite();",
          "",
          "    self_seq.cross_preamble(&mut other);",
          "    assert_eq!(self_seq.literals(), None);",
          "    assert_eq!(other.literals().unwrap().len(), 1);",
          "    assert_eq!(other.literals().unwrap()[0].c, 'b');",
          "    assert!(self_seq.is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]