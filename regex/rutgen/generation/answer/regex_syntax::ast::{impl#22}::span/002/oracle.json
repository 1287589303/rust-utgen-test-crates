[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(10),",
          "    };",
          "    let inner_class_set = ClassSetItem::Literal(Literal {",
          "        span: span.clone(),",
          "        kind: LiteralKind::Unicode,",
          "        c: 'a',",
          "    });",
          "    let bracketed = ClassBracketed {",
          "        span: span.clone(),",
          "        negated: false,",
          "        kind: ClassSet::Item(inner_class_set),",
          "    };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let _ = class_set_item.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(10) };",
          "    let inner_class_set = ClassSetItem::Literal(Literal { span: span.clone(), kind: LiteralKind::Unicode, c: 'a' });",
          "    let bracketed = ClassBracketed { span: span.clone(), negated: false, kind: ClassSet::Item(inner_class_set) };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    assert_eq!(class_set_item.span(), &span);"
        ],
        "code": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(10),",
          "    };",
          "    let inner_class_set = ClassSetItem::Literal(Literal {",
          "        span: span.clone(),",
          "        kind: LiteralKind::Unicode,",
          "        c: 'a',",
          "    });",
          "    let bracketed = ClassBracketed {",
          "        span: span.clone(),",
          "        negated: false,",
          "        kind: ClassSet::Item(inner_class_set),",
          "    };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let _ = class_set_item.span();",
          "    let span = Span { start: Position(0), end: Position(10) };",
          "    let inner_class_set = ClassSetItem::Literal(Literal { span: span.clone(), kind: LiteralKind::Unicode, c: 'a' });",
          "    let bracketed = ClassBracketed { span: span.clone(), negated: false, kind: ClassSet::Item(inner_class_set) };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    assert_eq!(class_set_item.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(5),",
          "    };",
          "    let empty_item = ClassSetItem::Empty(span.clone());",
          "    let bracketed = ClassBracketed {",
          "        span: span.clone(),",
          "        negated: false,",
          "        kind: ClassSet::Item(empty_item),",
          "    };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let _ = class_set_item.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let bracketed = ClassBracketed { span: span.clone(), negated: false, kind: ClassSet::Item(ClassSetItem::Empty(span.clone())) };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let result = class_set_item.span();",
          "    assert_eq!(result, &span);"
        ],
        "code": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(5),",
          "    };",
          "    let empty_item = ClassSetItem::Empty(span.clone());",
          "    let bracketed = ClassBracketed {",
          "        span: span.clone(),",
          "        negated: false,",
          "        kind: ClassSet::Item(empty_item),",
          "    };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let _ = class_set_item.span();",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let bracketed = ClassBracketed { span: span.clone(), negated: false, kind: ClassSet::Item(ClassSetItem::Empty(span.clone())) };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let result = class_set_item.span();",
          "    assert_eq!(result, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(8),",
          "    };",
          "    let unicode_item = ClassSetItem::Unicode(ClassUnicode {",
          "        span: span.clone(),",
          "        negated: true,",
          "        kind: ClassUnicodeKind::Letter,",
          "    });",
          "    let bracketed = ClassBracketed {",
          "        span: span.clone(),",
          "        negated: false,",
          "        kind: ClassSet::Item(unicode_item),",
          "    };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let _ = class_set_item.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(8) };",
          "    let unicode_item = ClassSetItem::Unicode(ClassUnicode { span: span.clone(), negated: true, kind: ClassUnicodeKind::Letter });",
          "    let bracketed = ClassBracketed { span: span.clone(), negated: false, kind: ClassSet::Item(unicode_item) };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let returned_span = class_set_item.span();",
          "    assert_eq!(returned_span, &span);"
        ],
        "code": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(8),",
          "    };",
          "    let unicode_item = ClassSetItem::Unicode(ClassUnicode {",
          "        span: span.clone(),",
          "        negated: true,",
          "        kind: ClassUnicodeKind::Letter,",
          "    });",
          "    let bracketed = ClassBracketed {",
          "        span: span.clone(),",
          "        negated: false,",
          "        kind: ClassSet::Item(unicode_item),",
          "    };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let _ = class_set_item.span();",
          "    let span = Span { start: Position(0), end: Position(8) };",
          "    let unicode_item = ClassSetItem::Unicode(ClassUnicode { span: span.clone(), negated: true, kind: ClassUnicodeKind::Letter });",
          "    let bracketed = ClassBracketed { span: span.clone(), negated: false, kind: ClassSet::Item(unicode_item) };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let returned_span = class_set_item.span();",
          "    assert_eq!(returned_span, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(12),",
          "    };",
          "    let perl_item = ClassSetItem::Perl(ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Digit,",
          "        negated: false,",
          "    });",
          "    let bracketed = ClassBracketed {",
          "        span: span.clone(),",
          "        negated: true,",
          "        kind: ClassSet::Item(perl_item),",
          "    };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let _ = class_set_item.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(12) };",
          "    let bracketed = ClassBracketed { span: span.clone(), negated: true, kind: ClassSet::Item(perl_item) };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    assert_eq!(class_set_item.span(), &span);"
        ],
        "code": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(12),",
          "    };",
          "    let perl_item = ClassSetItem::Perl(ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Digit,",
          "        negated: false,",
          "    });",
          "    let bracketed = ClassBracketed {",
          "        span: span.clone(),",
          "        negated: true,",
          "        kind: ClassSet::Item(perl_item),",
          "    };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    let _ = class_set_item.span();",
          "    let span = Span { start: Position(0), end: Position(12) };",
          "    let bracketed = ClassBracketed { span: span.clone(), negated: true, kind: ClassSet::Item(perl_item) };",
          "    let class_set_item = ClassSetItem::Bracketed(Box::new(bracketed));",
          "    assert_eq!(class_set_item.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]