[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let position_start = Position { offset: 0 };",
          "    let position_end = Position { offset: 0 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'a' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let _ = item.span();",
          "}"
        ],
        "oracle": [
          "    let position_start = Position { offset: 0 };",
          "    let position_end = Position { offset: 0 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'a' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let result = item.span();",
          "    assert_eq!(result, &span);"
        ],
        "code": [
          "{",
          "    let position_start = Position { offset: 0 };",
          "    let position_end = Position { offset: 0 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'a' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let _ = item.span();",
          "    let position_start = Position { offset: 0 };",
          "    let position_end = Position { offset: 0 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'a' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let result = item.span();",
          "    assert_eq!(result, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let position_start = Position { offset: 5 };",
          "    let position_end = Position { offset: 5 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'b' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let _ = item.span();",
          "}"
        ],
        "oracle": [
          "    let position_start = Position { offset: 5 };",
          "    let position_end = Position { offset: 5 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'b' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    assert_eq!(item.span(), &span);"
        ],
        "code": [
          "{",
          "    let position_start = Position { offset: 5 };",
          "    let position_end = Position { offset: 5 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'b' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let _ = item.span();",
          "    let position_start = Position { offset: 5 };",
          "    let position_end = Position { offset: 5 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'b' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    assert_eq!(item.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let position_start = Position { offset: 10 };",
          "    let position_end = Position { offset: 20 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'c' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let _ = item.span();",
          "}"
        ],
        "oracle": [
          "    let position_start = Position { offset: 10 };",
          "    let position_end = Position { offset: 20 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'c' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    assert_eq!(item.span(), &span);"
        ],
        "code": [
          "{",
          "    let position_start = Position { offset: 10 };",
          "    let position_end = Position { offset: 20 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'c' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let _ = item.span();",
          "    let position_start = Position { offset: 10 };",
          "    let position_end = Position { offset: 20 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'c' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    assert_eq!(item.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let position_start = Position { offset: usize::max_value() as u64 };",
          "    let position_end = Position { offset: usize::max_value() as u64 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'd' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let _ = item.span();",
          "}"
        ],
        "oracle": [
          "    let position_start = Position { offset: usize::max_value() as u64 };",
          "    let position_end = Position { offset: usize::max_value() as u64 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'd' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    assert_eq!(item.span(), &span);"
        ],
        "code": [
          "{",
          "    let position_start = Position { offset: usize::max_value() as u64 };",
          "    let position_end = Position { offset: usize::max_value() as u64 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'd' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    let _ = item.span();",
          "    let position_start = Position { offset: usize::max_value() as u64 };",
          "    let position_end = Position { offset: usize::max_value() as u64 };",
          "    let span = Span { start: position_start, end: position_end };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'd' };",
          "    let item = ClassSetItem::Literal(literal);",
          "    assert_eq!(item.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]