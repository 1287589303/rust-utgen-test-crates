[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockGroup {",
          "        kind: ast::GroupKind,",
          "    }",
          "",
          "    let group = MockGroup {",
          "        kind: ast::GroupKind::CaptureIndex(0),",
          "    };",
          "",
          "    let expr = Hir::empty();",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI {",
          "        trans: &translator,",
          "        pattern: \"test\",",
          "    };",
          "",
          "    let _result = translator_i.hir_capture(&group, expr);",
          "}"
        ],
        "oracle": [
          "    Hir::capture(hir::Capture { index: 0, name: None, sub: Box::new(Hir::empty()) });",
          "    Hir::capture(hir::Capture { index: 1, name: None, sub: Box::new(Hir::empty()) });",
          "    Hir::capture(hir::Capture { index: 2, name: None, sub: Box::new(Hir::empty()) });",
          "    Hir::capture(hir::Capture { index: 0, name: Some(\"capture_name\".into_boxed_str()), sub: Box::new(Hir::empty()) });",
          "    Hir::capture(hir::Capture { index: 1, name: Some(\"capture_name\".into_boxed_str()), sub: Box::new(Hir::literal(b\"test\")) });"
        ],
        "code": [
          "{",
          "    struct MockGroup {",
          "        kind: ast::GroupKind,",
          "    }",
          "",
          "    let group = MockGroup {",
          "        kind: ast::GroupKind::CaptureIndex(0),",
          "    };",
          "",
          "    let expr = Hir::empty();",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI {",
          "        trans: &translator,",
          "        pattern: \"test\",",
          "    };",
          "",
          "    let _result = translator_i.hir_capture(&group, expr);",
          "    Hir::capture(hir::Capture { index: 0, name: None, sub: Box::new(Hir::empty()) });",
          "    Hir::capture(hir::Capture { index: 1, name: None, sub: Box::new(Hir::empty()) });",
          "    Hir::capture(hir::Capture { index: 2, name: None, sub: Box::new(Hir::empty()) });",
          "    Hir::capture(hir::Capture { index: 0, name: Some(\"capture_name\".into_boxed_str()), sub: Box::new(Hir::empty()) });",
          "    Hir::capture(hir::Capture { index: 1, name: Some(\"capture_name\".into_boxed_str()), sub: Box::new(Hir::literal(b\"test\")) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockGroup {",
          "        kind: ast::GroupKind,",
          "    }",
          "",
          "    let group = MockGroup {",
          "        kind: ast::GroupKind::CaptureName {",
          "            name: CaptureName {",
          "                span: Span::default(),",
          "                name: \"group_name\".to_string(),",
          "                index: 1,",
          "            },",
          "        },",
          "    };",
          "",
          "    let expr = Hir::empty();",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI {",
          "        trans: &translator,",
          "        pattern: \"test\",",
          "    };",
          "",
          "    let _result = translator_i.hir_capture(&group, expr);",
          "}"
        ],
        "oracle": [
          "    let group = MockGroup { kind: ast::GroupKind::CaptureIndex(1) };",
          "    let expr = Hir::empty();",
          "    let expected_capture_name = None;",
          "    let expected_index = 1;",
          "    let result = translator_i.hir_capture(&group, expr);",
          "    assert_eq!(result.kind, HirKind::Capture(hir::Capture { index: expected_index, name: expected_capture_name, sub: Box::new(expr) }));",
          "    assert!(result.props.is_some());",
          "    let group_name = CaptureName { span: Span::default(), name: \"group_name\".to_string(), index: 1 };",
          "    let group = MockGroup { kind: ast::GroupKind::CaptureName { name: group_name } };",
          "    let _result_capture_name = translator_i.hir_capture(&group, expr);",
          "    assert_eq!(_result_capture_name.kind, HirKind::Capture(hir::Capture { index: group_name.index, name: Some(group_name.name.clone().into_boxed_str()), sub: Box::new(expr) }));"
        ],
        "code": [
          "{",
          "    struct MockGroup {",
          "        kind: ast::GroupKind,",
          "    }",
          "",
          "    let group = MockGroup {",
          "        kind: ast::GroupKind::CaptureName {",
          "            name: CaptureName {",
          "                span: Span::default(),",
          "                name: \"group_name\".to_string(),",
          "                index: 1,",
          "            },",
          "        },",
          "    };",
          "",
          "    let expr = Hir::empty();",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI {",
          "        trans: &translator,",
          "        pattern: \"test\",",
          "    };",
          "",
          "    let _result = translator_i.hir_capture(&group, expr);",
          "    let group = MockGroup { kind: ast::GroupKind::CaptureIndex(1) };",
          "    let expr = Hir::empty();",
          "    let expected_capture_name = None;",
          "    let expected_index = 1;",
          "    let result = translator_i.hir_capture(&group, expr);",
          "    assert_eq!(result.kind, HirKind::Capture(hir::Capture { index: expected_index, name: expected_capture_name, sub: Box::new(expr) }));",
          "    assert!(result.props.is_some());",
          "    let group_name = CaptureName { span: Span::default(), name: \"group_name\".to_string(), index: 1 };",
          "    let group = MockGroup { kind: ast::GroupKind::CaptureName { name: group_name } };",
          "    let _result_capture_name = translator_i.hir_capture(&group, expr);",
          "    assert_eq!(_result_capture_name.kind, HirKind::Capture(hir::Capture { index: group_name.index, name: Some(group_name.name.clone().into_boxed_str()), sub: Box::new(expr) }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]