[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group = ast::Group {",
          "        span: Span::default(),",
          "        kind: ast::GroupKind::CaptureName {",
          "            name: CaptureName {",
          "                span: Span::default(),",
          "                name: \"valid_name\".to_string(),",
          "                index: 1,",
          "            },",
          "            ..Default::default()",
          "        },",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "    ",
          "    let expr = Hir::empty(); // valid Hir object",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"some_pattern\");",
          "",
          "    translator_i.hir_capture(&group, expr);",
          "}"
        ],
        "oracle": [
          "    let group = ast::Group { span: Span::default(), kind: ast::GroupKind::CaptureName { name: CaptureName { span: Span::default(), name: \"valid_name\".to_string(), index: 1, }, ..Default::default() }, ast: Box::new(Ast::default()), };",
          "    let expr = Hir::empty();",
          "    let result = translator_i.hir_capture(&group, expr);",
          "    assert_eq!(result.kind, HirKind::Capture(hir::Capture { index: 1, name: Some(\"valid_name\".to_string().into_boxed_str()), sub: Box::new(expr), }));"
        ],
        "code": [
          "{",
          "    let group = ast::Group {",
          "        span: Span::default(),",
          "        kind: ast::GroupKind::CaptureName {",
          "            name: CaptureName {",
          "                span: Span::default(),",
          "                name: \"valid_name\".to_string(),",
          "                index: 1,",
          "            },",
          "            ..Default::default()",
          "        },",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "    ",
          "    let expr = Hir::empty(); // valid Hir object",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"some_pattern\");",
          "",
          "    translator_i.hir_capture(&group, expr);",
          "    let group = ast::Group { span: Span::default(), kind: ast::GroupKind::CaptureName { name: CaptureName { span: Span::default(), name: \"valid_name\".to_string(), index: 1, }, ..Default::default() }, ast: Box::new(Ast::default()), };",
          "    let expr = Hir::empty();",
          "    let result = translator_i.hir_capture(&group, expr);",
          "    assert_eq!(result.kind, HirKind::Capture(hir::Capture { index: 1, name: Some(\"valid_name\".to_string().into_boxed_str()), sub: Box::new(expr), }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group = ast::Group {",
          "        span: Span::default(),",
          "        kind: ast::GroupKind::CaptureName {",
          "            name: CaptureName {",
          "                span: Span::default(),",
          "                name: \"name_zero\".to_string(),",
          "                index: 0,",
          "            },",
          "            ..Default::default()",
          "        },",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "    ",
          "    let expr = Hir::empty(); // valid Hir object",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"another_pattern\");",
          "",
          "    translator_i.hir_capture(&group, expr);",
          "}"
        ],
        "oracle": [
          "    Hir::capture(hir::Capture { index: 0, name: Some(\"name_zero\".to_string().into_boxed_str()), sub: Box::new(Hir::empty()) }) == translator_i.hir_capture(&group, expr);",
          "    assert_eq!(translator_i.hir_capture(&group, expr).kind, HirKind::Capture(hir::Capture { index: 0, name: Some(\"name_zero\".to_string().into_boxed_str()), sub: Box::new(expr) }));",
          "    assert!(translator_i.hir_capture(&group, expr).props == Properties::capture(&hir::Capture { index: 0, name: Some(\"name_zero\".to_string().into_boxed_str()), sub: Box::new(expr) }));"
        ],
        "code": [
          "{",
          "    let group = ast::Group {",
          "        span: Span::default(),",
          "        kind: ast::GroupKind::CaptureName {",
          "            name: CaptureName {",
          "                span: Span::default(),",
          "                name: \"name_zero\".to_string(),",
          "                index: 0,",
          "            },",
          "            ..Default::default()",
          "        },",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "    ",
          "    let expr = Hir::empty(); // valid Hir object",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"another_pattern\");",
          "",
          "    translator_i.hir_capture(&group, expr);",
          "    Hir::capture(hir::Capture { index: 0, name: Some(\"name_zero\".to_string().into_boxed_str()), sub: Box::new(Hir::empty()) }) == translator_i.hir_capture(&group, expr);",
          "    assert_eq!(translator_i.hir_capture(&group, expr).kind, HirKind::Capture(hir::Capture { index: 0, name: Some(\"name_zero\".to_string().into_boxed_str()), sub: Box::new(expr) }));",
          "    assert!(translator_i.hir_capture(&group, expr).props == Properties::capture(&hir::Capture { index: 0, name: Some(\"name_zero\".to_string().into_boxed_str()), sub: Box::new(expr) }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group = ast::Group {",
          "        span: Span::default(),",
          "        kind: ast::GroupKind::CaptureName {",
          "            name: CaptureName {",
          "                span: Span::default(),",
          "                name: \"large_index_name\".to_string(),",
          "                index: 10000,",
          "            },",
          "            ..Default::default()",
          "        },",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "    ",
          "    let expr = Hir::empty(); // valid Hir object",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"pattern_with_large_index\");",
          "",
          "    translator_i.hir_capture(&group, expr);",
          "}"
        ],
        "oracle": [
          "    let group_name = \"large_index_name\";",
          "    let group_index = 10000;",
          "    let group_span = Span::default();",
          "    let expected_capture = Hir::capture(hir::Capture { index: group_index, name: Some(Box::from(group_name)), sub: Box::new(Hir::empty()) });",
          "    let result_hir = translator_i.hir_capture(&group, expr);",
          "    assert_eq!(result_hir, expected_capture);"
        ],
        "code": [
          "{",
          "    let group = ast::Group {",
          "        span: Span::default(),",
          "        kind: ast::GroupKind::CaptureName {",
          "            name: CaptureName {",
          "                span: Span::default(),",
          "                name: \"large_index_name\".to_string(),",
          "                index: 10000,",
          "            },",
          "            ..Default::default()",
          "        },",
          "        ast: Box::new(Ast::default()),",
          "    };",
          "    ",
          "    let expr = Hir::empty(); // valid Hir object",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, \"pattern_with_large_index\");",
          "",
          "    translator_i.hir_capture(&group, expr);",
          "    let group_name = \"large_index_name\";",
          "    let group_index = 10000;",
          "    let group_span = Span::default();",
          "    let expected_capture = Hir::capture(hir::Capture { index: group_index, name: Some(Box::from(group_name)), sub: Box::new(Hir::empty()) });",
          "    let result_hir = translator_i.hir_capture(&group, expr);",
          "    assert_eq!(result_hir, expected_capture);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]