[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let half_match = HalfMatch::must(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern(), PatternID::new(0).unwrap());",
          "    assert_eq!(half_match.offset(), 0);"
        ],
        "code": [
          "{",
          "    let half_match = HalfMatch::must(0, 0);",
          "    assert_eq!(half_match.pattern(), PatternID::new(0).unwrap());",
          "    assert_eq!(half_match.offset(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let half_match = HalfMatch::must(0, usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern(), PatternID::new(0).unwrap());",
          "    assert_eq!(half_match.offset(), usize::MAX);"
        ],
        "code": [
          "{",
          "    let half_match = HalfMatch::must(0, usize::MAX);",
          "    assert_eq!(half_match.pattern(), PatternID::new(0).unwrap());",
          "    assert_eq!(half_match.offset(), usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let half_match = HalfMatch::must(usize::MAX, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern().0, PatternID::new(usize::MAX).unwrap());",
          "    assert_eq!(half_match.offset(), 0);"
        ],
        "code": [
          "{",
          "    let half_match = HalfMatch::must(usize::MAX, 0);",
          "    assert_eq!(half_match.pattern().0, PatternID::new(usize::MAX).unwrap());",
          "    assert_eq!(half_match.offset(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let half_match = HalfMatch::must(usize::MAX + 1, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| HalfMatch::must(usize::MAX + 1, 0)).is_err(), true);"
        ],
        "code": [
          "{",
          "    let half_match = HalfMatch::must(usize::MAX + 1, 0);",
          "    assert_eq!(std::panic::catch_unwind(|| HalfMatch::must(usize::MAX + 1, 0)).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let half_match = HalfMatch::must(5000, 5000);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern(), PatternID::new(5000).unwrap());",
          "    assert_eq!(half_match.offset(), 5000);"
        ],
        "code": [
          "{",
          "    let half_match = HalfMatch::must(5000, 5000);",
          "    assert_eq!(half_match.pattern(), PatternID::new(5000).unwrap());",
          "    assert_eq!(half_match.offset(), 5000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let half_match = HalfMatch::must(10000, usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern().0, PatternID::new(10000).unwrap());",
          "    assert_eq!(half_match.offset(), usize::MAX);"
        ],
        "code": [
          "{",
          "    let half_match = HalfMatch::must(10000, usize::MAX);",
          "    assert_eq!(half_match.pattern().0, PatternID::new(10000).unwrap());",
          "    assert_eq!(half_match.offset(), usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let half_match = HalfMatch::must(10, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern(), PatternID::new(10).unwrap());",
          "    assert_eq!(half_match.offset(), 0);"
        ],
        "code": [
          "{",
          "    let half_match = HalfMatch::must(10, 0);",
          "    assert_eq!(half_match.pattern(), PatternID::new(10).unwrap());",
          "    assert_eq!(half_match.offset(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let half_match = HalfMatch::must(10, usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern().0, 10);",
          "    assert_eq!(half_match.offset(), usize::MAX);",
          "    assert!(std::panic::catch_unwind(|| HalfMatch::must(usize::MAX + 1, 0)).is_err());"
        ],
        "code": [
          "{",
          "    let half_match = HalfMatch::must(10, usize::MAX);",
          "    assert_eq!(half_match.pattern().0, 10);",
          "    assert_eq!(half_match.offset(), usize::MAX);",
          "    assert!(std::panic::catch_unwind(|| HalfMatch::must(usize::MAX + 1, 0)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]