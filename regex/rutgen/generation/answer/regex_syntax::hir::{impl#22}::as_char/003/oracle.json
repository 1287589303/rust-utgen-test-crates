[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_around = Look::WordEndHalfAscii;",
          "    let _ = look_around.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_around.as_char(), '▷');"
        ],
        "code": [
          "{",
          "    let look_around = Look::WordEndHalfAscii;",
          "    let _ = look_around.as_char();",
          "    assert_eq!(look_around.as_char(), '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_around = Look::WordStartHalfAscii;",
          "    let _ = look_around.as_char();",
          "}"
        ],
        "oracle": [
          "    let look_around = Look::WordEndHalfAscii; assert_eq!(look_around.as_char(), '▷');"
        ],
        "code": [
          "{",
          "    let look_around = Look::WordStartHalfAscii;",
          "    let _ = look_around.as_char();",
          "    let look_around = Look::WordEndHalfAscii; assert_eq!(look_around.as_char(), '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_around = Look::WordStartHalfUnicode;",
          "    let _ = look_around.as_char();",
          "}"
        ],
        "oracle": [
          "    let look_around = Look::WordEndHalfAscii;",
          "    let result = look_around.as_char();",
          "    assert_eq!(result, '▷');"
        ],
        "code": [
          "{",
          "    let look_around = Look::WordStartHalfUnicode;",
          "    let _ = look_around.as_char();",
          "    let look_around = Look::WordEndHalfAscii;",
          "    let result = look_around.as_char();",
          "    assert_eq!(result, '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_around = Look::WordEndHalfUnicode;",
          "    let _ = look_around.as_char();",
          "}"
        ],
        "oracle": [
          "    let look_around = Look::WordEndHalfAscii;",
          "    assert_eq!(look_around.as_char(), '▷');"
        ],
        "code": [
          "{",
          "    let look_around = Look::WordEndHalfUnicode;",
          "    let _ = look_around.as_char();",
          "    let look_around = Look::WordEndHalfAscii;",
          "    assert_eq!(look_around.as_char(), '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_around = Look::WordStartAscii;",
          "    let _ = look_around.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');"
        ],
        "code": [
          "{",
          "    let look_around = Look::WordStartAscii;",
          "    let _ = look_around.as_char();",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_around = Look::WordEndAscii;",
          "    let _ = look_around.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');"
        ],
        "code": [
          "{",
          "    let look_around = Look::WordEndAscii;",
          "    let _ = look_around.as_char();",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '▷');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]