[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::EndCRLF;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::EndCRLF;",
          "    let _result = look.as_char();",
          "    assert_eq!(look.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::Start;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::Start;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::End;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::EndCRLF;",
          "    let expected: char = 'R';",
          "    assert_eq!(look.as_char(), expected);"
        ],
        "code": [
          "{",
          "    let look: Look = Look::End;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::EndCRLF;",
          "    let expected: char = 'R';",
          "    assert_eq!(look.as_char(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::StartLF;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::StartLF;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::EndLF;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::EndCRLF;",
          "    let expected: char = 'R';",
          "    assert_eq!(look.as_char(), expected);"
        ],
        "code": [
          "{",
          "    let look: Look = Look::EndLF;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::EndCRLF;",
          "    let expected: char = 'R';",
          "    assert_eq!(look.as_char(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::StartCRLF;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::StartCRLF;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordAscii;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::EndCRLF;",
          "    let expected: char = 'R';",
          "    assert_eq!(look.as_char(), expected);"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordAscii;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::EndCRLF;",
          "    let expected: char = 'R';",
          "    assert_eq!(look.as_char(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordAsciiNegate;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordAsciiNegate;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordUnicode;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordUnicodeNegate;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::EndCRLF;",
          "    let _result = look.as_char();",
          "    assert_eq!(_result, 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordUnicodeNegate;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::EndCRLF;",
          "    let _result = look.as_char();",
          "    assert_eq!(_result, 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordStartAscii;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordStartAscii;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordEndAscii;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::EndCRLF;",
          "    assert_eq!(look.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordEndAscii;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::EndCRLF;",
          "    assert_eq!(look.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordStartUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordStartUnicode;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::Start.as_char(), 'A');",
          "    assert_eq!(Look::End.as_char(), 'z');",
          "    assert_eq!(Look::StartLF.as_char(), '^');",
          "    assert_eq!(Look::EndLF.as_char(), '$');",
          "    assert_eq!(Look::StartCRLF.as_char(), 'r');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "    assert_eq!(Look::WordAscii.as_char(), 'b');",
          "    assert_eq!(Look::WordAsciiNegate.as_char(), 'B');",
          "    assert_eq!(Look::WordUnicode.as_char(), 'ùõÉ');",
          "    assert_eq!(Look::WordUnicodeNegate.as_char(), 'ùö©');",
          "    assert_eq!(Look::WordStartAscii.as_char(), '<');",
          "    assert_eq!(Look::WordEndAscii.as_char(), '>');",
          "    assert_eq!(Look::WordStartUnicode.as_char(), '„Äà');",
          "    assert_eq!(Look::WordEndUnicode.as_char(), '„Äâ');",
          "    assert_eq!(Look::WordStartHalfAscii.as_char(), '‚óÅ');",
          "    assert_eq!(Look::WordEndHalfAscii.as_char(), '‚ñ∑');",
          "    assert_eq!(Look::WordStartHalfUnicode.as_char(), '‚óÄ');",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '‚ñ∂');",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordEndUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::EndCRLF;",
          "    let result = look.as_char();",
          "    assert_eq!(result, 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordEndUnicode;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::EndCRLF;",
          "    let result = look.as_char();",
          "    assert_eq!(result, 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordStartHalfAscii;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordStartHalfAscii;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordEndHalfAscii;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordEndHalfAscii;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordStartHalfUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordStartHalfUnicode;",
          "    let _result = look.as_char();",
          "    assert_eq!(look.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::EndCRLF.as_char(), 'R');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]