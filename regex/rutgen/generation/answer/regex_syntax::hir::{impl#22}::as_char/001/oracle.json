[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.as_char(), '▶');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let _result = look.as_char();",
          "    assert_eq!(look.as_char(), '▶');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordStartHalfUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.as_char(), '▶');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordStartHalfUnicode;",
          "    let _result = look.as_char();",
          "    assert_eq!(look.as_char(), '▶');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordEndHalfAscii;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look.as_char(), '▶');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordEndHalfAscii;",
          "    let _result = look.as_char();",
          "    assert_eq!(look.as_char(), '▶');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordStartHalfAscii;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let expected: char = '▶';",
          "    let _result = look.as_char();",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordStartHalfAscii;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let expected: char = '▶';",
          "    let _result = look.as_char();",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordEndUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '▶');"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordEndUnicode;",
          "    let _result = look.as_char();",
          "    assert_eq!(Look::WordEndHalfUnicode.as_char(), '▶');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordStartUnicode;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    look.as_char() should return '▶' for Look::WordEndHalfUnicode."
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordStartUnicode;",
          "    let _result = look.as_char();",
          "    look.as_char() should return '▶' for Look::WordEndHalfUnicode.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordAsciiNegate;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let expected: char = '▶';",
          "    assert_eq!(look.as_char(), expected);"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordAsciiNegate;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let expected: char = '▶';",
          "    assert_eq!(look.as_char(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look: Look = Look::WordAscii;",
          "    let _result = look.as_char();",
          "}"
        ],
        "oracle": [
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let expected: char = '▶';",
          "    let _result = look.as_char();",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let look: Look = Look::WordAscii;",
          "    let _result = look.as_char();",
          "    let look: Look = Look::WordEndHalfUnicode;",
          "    let expected: char = '▶';",
          "    let _result = look.as_char();",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]