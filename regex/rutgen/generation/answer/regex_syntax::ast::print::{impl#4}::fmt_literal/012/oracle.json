[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "        c: '\\u{2603}', // Unicode character \"Snowman\"",
          "    };",
          "    ",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort), c: '\\u{2603}' }; assert_eq!(writer.output, r\"\\u{2603}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X), c: 'A' }; assert_eq!(writer.output, r\"\\x{41}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong), c: '\\u{1F600}' }; assert_eq!(writer.output, r\"\\U{1F600}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Meta, c: 'x' }; assert_eq!(writer.output, r\"\\x\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Superfluous, c: 'y' }; assert_eq!(writer.output, r\"\\y\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "        c: '\\u{2603}', // Unicode character \"Snowman\"",
          "    };",
          "    ",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort), c: '\\u{2603}' }; assert_eq!(writer.output, r\"\\u{2603}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X), c: 'A' }; assert_eq!(writer.output, r\"\\x{41}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong), c: '\\u{1F600}' }; assert_eq!(writer.output, r\"\\U{1F600}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Meta, c: 'x' }; assert_eq!(writer.output, r\"\\x\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Superfluous, c: 'y' }; assert_eq!(writer.output, r\"\\y\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "        c: '\\u{003A}', // Unicode character \":\"",
          "    };",
          "    ",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\x:\");",
          "    assert_eq!(writer.output.len(), 3);",
          "    assert!(writer.output.is_ascii());",
          "    assert!(writer.output.chars().all(|c| c.is_ascii()));",
          "    assert!(writer.output.contains(\"\\\\x\"));",
          "    assert!(writer.output.ends_with(\":\"));",
          "    assert!(writer.output.starts_with(\"\\\\x\"));",
          "    assert!(writer.output.matches(\":\").count() == 1);",
          "    assert!(writer.output.matches(\"\\\\x\").count() == 1);",
          "    assert!(writer.output.contains(\":\"));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "        c: '\\u{003A}', // Unicode character \":\"",
          "    };",
          "    ",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x:\");",
          "    assert_eq!(writer.output.len(), 3);",
          "    assert!(writer.output.is_ascii());",
          "    assert!(writer.output.chars().all(|c| c.is_ascii()));",
          "    assert!(writer.output.contains(\"\\\\x\"));",
          "    assert!(writer.output.ends_with(\":\"));",
          "    assert!(writer.output.starts_with(\"\\\\x\"));",
          "    assert!(writer.output.matches(\":\").count() == 1);",
          "    assert!(writer.output.matches(\"\\\\x\").count() == 1);",
          "    assert!(writer.output.contains(\":\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "        c: '\\u{1F600}', // Unicode character \"Grinning Face\"",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "    c: '\\u{1F600}',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{1F600}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'A',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{41}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Meta,",
          "    c: 'B',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "        c: '\\u{1F600}', // Unicode character \"Grinning Face\"",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "    c: '\\u{1F600}',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{1F600}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'A',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{41}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Meta,",
          "    c: 'B',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Meta,",
          "        c: '\\u{0042}', // Unicode character \"B\"",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort), c: '\\u{0042}' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{42}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X), c: '\\u{0042}' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{42}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong), c: '\\u{0042}' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\U{00000042}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Meta, c: '\\u{0042}' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Meta,",
          "        c: '\\u{0042}', // Unicode character \"B\"",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort), c: '\\u{0042}' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{42}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X), c: '\\u{0042}' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{42}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong), c: '\\u{0042}' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\U{00000042}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Meta, c: '\\u{0042}' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]