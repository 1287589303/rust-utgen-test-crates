[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "        c: '\\n',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Meta,",
          "    c: 'a',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\a\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "        c: '\\n',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Meta,",
          "    c: 'a',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\a\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "        c: '\\x0B',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "        c: '\\x0B',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "        c: ' ',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\ \");",
          "    assert_eq!(writer.output.len(), 2);",
          "    assert!(writer.output.contains(r\"\\ \"));",
          "    assert!(writer.output.contains(\" \"));",
          "    assert!(writer.output.starts_with(r\"\\ \"));",
          "    assert!(writer.output.ends_with(\" \"));",
          "    assert!(writer.output.chars().all(|c| c.is_ascii() || c.is_control()));",
          "    assert!(writer.output.contains('\\u{0020'}));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "        c: ' ',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    assert_eq!(writer.output.len(), 2);",
          "    assert!(writer.output.contains(r\"\\ \"));",
          "    assert!(writer.output.contains(\" \"));",
          "    assert!(writer.output.starts_with(r\"\\ \"));",
          "    assert!(writer.output.ends_with(\" \"));",
          "    assert!(writer.output.chars().all(|c| c.is_ascii() || c.is_control()));",
          "    assert!(writer.output.contains('\\u{0020'}));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "        c: '\\x07',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell), c: '\\x07' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed), c: '\\x0C' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab), c: '\\t' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed), c: '\\n' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn), c: '\\r' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab), c: '\\x0B' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space), c: ' ' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Meta, c: 'M' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\M\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "        c: '\\x07',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell), c: '\\x07' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed), c: '\\x0C' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab), c: '\\t' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed), c: '\\n' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn), c: '\\r' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab), c: '\\x0B' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space), c: ' ' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Meta, c: 'M' };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\M\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "        c: '\\x0C',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\f\");",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\\t\");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\\t\\r\");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\\t\\r\\ \");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Meta,",
          "    c: 'M',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\\t\\r\\ \\M\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "        c: '\\x0C',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\\t\");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\\t\\r\");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\\t\\r\\ \");",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Meta,",
          "    c: 'M',",
          "    };",
          "    assert!(w.fmt_literal(&ast).is_ok());",
          "    assert_eq!(writer.output, r\"\\f\\n\\v\\t\\r\\ \\M\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "        c: '\\t',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "        c: '\\t',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\ \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "        c: '\\r',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\r\");",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    assert_eq!(writer.output, r\"\\ \");}"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "        c: '\\r',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    assert_eq!(writer.output, r\"\\ \");}",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Meta,",
          "        c: 'a',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.output == \"a\"  // Validating output for Meta literal with character 'a'",
          "    writer.output == r\"\\f\"  // Validating output for Special(FormFeed)",
          "    writer.output == r\"\\n\"  // Validating output for Special(LineFeed)",
          "    writer.output == r\"\\r\"  // Validating output for Special(CarriageReturn)",
          "    writer.output == r\"\\v\"  // Validating output for Special(VerticalTab)",
          "    writer.output == r\"\\t\"  // Validating output for Special(Tab)",
          "    writer.output == r\"\\ \"   // Validating output for Special(Space)",
          "    writer.output == r\"\\a\"   // Validating output for Special(Bell)"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Meta,",
          "        c: 'a',",
          "    };",
          "    let mut w = Writer { wtr: &mut writer };",
          "    w.fmt_literal(&ast).unwrap();",
          "    writer.output == \"a\"  // Validating output for Meta literal with character 'a'",
          "    writer.output == r\"\\f\"  // Validating output for Special(FormFeed)",
          "    writer.output == r\"\\n\"  // Validating output for Special(LineFeed)",
          "    writer.output == r\"\\r\"  // Validating output for Special(CarriageReturn)",
          "    writer.output == r\"\\v\"  // Validating output for Special(VerticalTab)",
          "    writer.output == r\"\\t\"  // Validating output for Special(Tab)",
          "    writer.output == r\"\\ \"   // Validating output for Special(Space)",
          "    writer.output == r\"\\a\"   // Validating output for Special(Bell)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]