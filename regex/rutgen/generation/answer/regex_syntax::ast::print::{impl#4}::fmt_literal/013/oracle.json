[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "    ",
          "    let mut writer_instance = Writer { wtr: writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort), c: 'a' }; writer_instance.fmt_literal(&ast).unwrap(); assert_eq!(writer.output, r\"\\u{0061}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X), c: 'a' }; writer_instance.fmt_literal(&ast).unwrap(); assert_eq!(writer.output, r\"\\x{61}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong), c: 'a' }; writer_instance.fmt_literal(&ast).unwrap(); assert_eq!(writer.output, r\"\\U{00000061}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Verbatim, c: 'a' }; writer_instance.fmt_literal(&ast).unwrap(); assert_eq!(writer.output, \"a\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "    ",
          "    let mut writer_instance = Writer { wtr: writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort), c: 'a' }; writer_instance.fmt_literal(&ast).unwrap(); assert_eq!(writer.output, r\"\\u{0061}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X), c: 'a' }; writer_instance.fmt_literal(&ast).unwrap(); assert_eq!(writer.output, r\"\\x{61}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong), c: 'a' }; writer_instance.fmt_literal(&ast).unwrap(); assert_eq!(writer.output, r\"\\U{00000061}\");",
          "    ",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Verbatim, c: 'a' }; writer_instance.fmt_literal(&ast).unwrap(); assert_eq!(writer.output, \"a\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "        c: '\\u{1234}',",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    let expected_output = r\"\\u{1234}\";",
          "    assert_eq!(writer_instance.wtr.output, expected_output);",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'A',",
          "    };",
          "    let expected_output = r\"\\x{:02X}\".replace(\"{:02X}\", &format!(\"{:02X}\", 'A' as u32));",
          "    assert_eq!(writer_instance.wtr.output, expected_output);",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'V',",
          "    };",
          "    let expected_output = 'V'.to_string();",
          "    assert_eq!(writer_instance.wtr.output, expected_output);"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "        c: '\\u{1234}',",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    let expected_output = r\"\\u{1234}\";",
          "    assert_eq!(writer_instance.wtr.output, expected_output);",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'A',",
          "    };",
          "    let expected_output = r\"\\x{:02X}\".replace(\"{:02X}\", &format!(\"{:02X}\", 'A' as u32));",
          "    assert_eq!(writer_instance.wtr.output, expected_output);",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'V',",
          "    };",
          "    let expected_output = 'V'.to_string();",
          "    assert_eq!(writer_instance.wtr.output, expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "        c: 'b',",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort), c: 'b' }; let mut writer_instance = Writer { wtr: writer }; let _ = writer_instance.fmt_literal(&ast); assert_eq!(writer_instance.wtr.output, r\"\\u{0062}\");",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong), c: 'b' }; let mut writer_instance = Writer { wtr: writer }; let _ = writer_instance.fmt_literal(&ast); assert_eq!(writer_instance.wtr.output, r\"\\U{00000062}\");",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Verbatim, c: 'b' }; let mut writer_instance = Writer { wtr: writer }; let _ = writer_instance.fmt_literal(&ast); assert_eq!(writer_instance.wtr.output, 'b'.to_string());",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X), c: 'b' }; let mut writer_instance = Writer { wtr: writer }; let _ = writer_instance.fmt_literal(&ast); assert_eq!(writer_instance.wtr.output, r\"\\x{62}\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "        c: 'b',",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort), c: 'b' }; let mut writer_instance = Writer { wtr: writer }; let _ = writer_instance.fmt_literal(&ast); assert_eq!(writer_instance.wtr.output, r\"\\u{0062}\");",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong), c: 'b' }; let mut writer_instance = Writer { wtr: writer }; let _ = writer_instance.fmt_literal(&ast); assert_eq!(writer_instance.wtr.output, r\"\\U{00000062}\");",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Verbatim, c: 'b' }; let mut writer_instance = Writer { wtr: writer }; let _ = writer_instance.fmt_literal(&ast); assert_eq!(writer_instance.wtr.output, 'b'.to_string());",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X), c: 'b' }; let mut writer_instance = Writer { wtr: writer }; let _ = writer_instance.fmt_literal(&ast); assert_eq!(writer_instance.wtr.output, r\"\\x{62}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "        c: '\\u{1F600}', // Grinning face emoji",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\U{1F600}\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "    c: '\\u{1F600}', // Grinning face emoji",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{1F600}\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'A', // Character A",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{41}\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'A', // Character A",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, 'A'.to_string());"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "        c: '\\u{1F600}', // Grinning face emoji",
          "    };",
          "",
          "    let mut writer_instance = Writer { wtr: writer };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\U{1F600}\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "    c: '\\u{1F600}', // Grinning face emoji",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{1F600}\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'A', // Character A",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{41}\");",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'A', // Character A",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, 'A'.to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let special_chars = [",
          "        ast::SpecialLiteralKind::Bell,",
          "        ast::SpecialLiteralKind::FormFeed,",
          "        ast::SpecialLiteralKind::Tab,",
          "        ast::SpecialLiteralKind::LineFeed,",
          "        ast::SpecialLiteralKind::CarriageReturn,",
          "        ast::SpecialLiteralKind::VerticalTab,",
          "        ast::SpecialLiteralKind::Space,",
          "    ];",
          "",
          "    for special in &special_chars {",
          "        let mut writer = MockWriter { output: String::new() };",
          "        let ast = ast::Literal {",
          "            span: Span::default(),",
          "            kind: ast::LiteralKind::Special(*special),",
          "            c: ' ', // char is not used for special, but it is required by struct",
          "        };",
          "",
          "        let mut writer_instance = Writer { wtr: writer };",
          "        let _ = writer_instance.fmt_literal(&ast);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "    c: 'A',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, \"\\\\u{0041}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'B',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, \"\\\\x{42}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "    c: 'C',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, \"\\\\U{00000043}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'D',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, \"D\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let special_chars = [",
          "        ast::SpecialLiteralKind::Bell,",
          "        ast::SpecialLiteralKind::FormFeed,",
          "        ast::SpecialLiteralKind::Tab,",
          "        ast::SpecialLiteralKind::LineFeed,",
          "        ast::SpecialLiteralKind::CarriageReturn,",
          "        ast::SpecialLiteralKind::VerticalTab,",
          "        ast::SpecialLiteralKind::Space,",
          "    ];",
          "",
          "    for special in &special_chars {",
          "        let mut writer = MockWriter { output: String::new() };",
          "        let ast = ast::Literal {",
          "            span: Span::default(),",
          "            kind: ast::LiteralKind::Special(*special),",
          "            c: ' ', // char is not used for special, but it is required by struct",
          "        };",
          "",
          "        let mut writer_instance = Writer { wtr: writer };",
          "        let _ = writer_instance.fmt_literal(&ast);",
          "    }",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "    c: 'A',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, \"\\\\u{0041}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'B',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, \"\\\\x{42}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "    c: 'C',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, \"\\\\U{00000043}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'D',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&ast);",
          "    assert_eq!(writer.output, \"D\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]