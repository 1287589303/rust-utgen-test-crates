[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "        c: '\\u{07}',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\u{0B}',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, 'a'.to_string());",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\u{0C}',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "        c: '\\u{07}',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\u{0B}',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, 'a'.to_string());",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\u{0C}',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "        c: '\\u{0C}',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed), c: '\\n' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab), c: '\\u{0B}' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space), c: ' ' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell), c: '\\u{07}' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed), c: '\\u{0C}' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab), c: '\\t' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn), c: '\\r' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "        c: '\\u{0C}',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed), c: '\\n' };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab), c: '\\u{0B}' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space), c: ' ' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell), c: '\\u{07}' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed), c: '\\u{0C}' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab), c: '\\t' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let literal = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn), c: '\\r' };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "        c: '\\n',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "        c: '\\n',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "        c: '\\u{0B}',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "oracle": [
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\u{07}',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\u{0C}',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "        c: '\\u{0B}',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\u{07}',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\u{0C}',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "        c: ' ',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "oracle": [
          "    writer.output == r\"\\ \"",
          "    writer.output == r\"\\n\"",
          "    writer.output == r\"\\v\"",
          "    writer.output == r\"\\a\"",
          "    writer.output == r\"\\f\"",
          "    writer.output == r\"\\t\"",
          "    writer.output == r\"\\r\""
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "        c: ' ',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    writer.output == r\"\\ \"",
          "    writer.output == r\"\\n\"",
          "    writer.output == r\"\\v\"",
          "    writer.output == r\"\\a\"",
          "    writer.output == r\"\\f\"",
          "    writer.output == r\"\\t\"",
          "    writer.output == r\"\\r\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "        c: '\\r',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\r\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, 'a'.to_string());"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "        c: '\\r',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Verbatim,",
          "    c: 'a',",
          "    };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, 'a'.to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "        c: '\\t',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\t\");",
          "    assert!(writer.output.contains(\"\\t\"));",
          "    let literal_bell = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell), c: '\\u{07}' };",
          "    let literal_form_feed = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed), c: '\\u{0C}' };",
          "    let literal_line_feed = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed), c: '\\n' };",
          "    let literal_vertical_tab = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab), c: '\\u{0B}' };",
          "    let literal_carriage_return = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn), c: '\\r' };",
          "    let literal_space = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space), c: ' ' };",
          "    ",
          "    writer_instance.fmt_literal(&literal_bell);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_form_feed);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_line_feed);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_vertical_tab);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_carriage_return);",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_space);",
          "    assert_eq!(writer.output, r\"\\ \");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "        c: '\\t',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    assert!(writer.output.contains(\"\\t\"));",
          "    let literal_bell = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell), c: '\\u{07}' };",
          "    let literal_form_feed = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed), c: '\\u{0C}' };",
          "    let literal_line_feed = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed), c: '\\n' };",
          "    let literal_vertical_tab = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab), c: '\\u{0B}' };",
          "    let literal_carriage_return = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn), c: '\\r' };",
          "    let literal_space = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space), c: ' ' };",
          "    ",
          "    writer_instance.fmt_literal(&literal_bell);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_form_feed);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_line_feed);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_vertical_tab);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_carriage_return);",
          "    assert_eq!(writer.output, r\"\\r\");",
          "    writer.output.clear();",
          "    writer_instance.fmt_literal(&literal_space);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::LineFeed),",
          "    c: '\\n',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\n\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::VerticalTab),",
          "    c: '\\x0B',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\v\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Space),",
          "    c: ' ',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\ \");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Bell),",
          "    c: '\\x07',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\a\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::FormFeed),",
          "    c: '\\x0C',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\f\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::Tab),",
          "    c: '\\t',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\t\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let literal = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Special(ast::SpecialLiteralKind::CarriageReturn),",
          "    c: '\\r',",
          "    };",
          "    let mut writer_instance = Writer { wtr: &mut writer };",
          "    let _ = writer_instance.fmt_literal(&literal);",
          "    assert_eq!(writer.output, r\"\\r\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]