[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "        c: '\\u{0041}', // Unicode character 'A'",
          "    };",
          "    ",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\u{0041}\");",
          "    writer.output.clear();",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: '\\u{0041}', // Unicode character 'A'",
          "    };",
          "    ",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{41}\");",
          "    writer.output.clear();",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "    c: '\\u{0041}', // Unicode character 'A'",
          "    };",
          "    ",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\U{00000041}\");",
          "    writer.output.clear();",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Superfluous,",
          "    c: 'B',",
          "    };",
          "    ",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");",
          "    writer.output.clear();"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "        c: '\\u{0041}', // Unicode character 'A'",
          "    };",
          "    ",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{0041}\");",
          "    writer.output.clear();",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: '\\u{0041}', // Unicode character 'A'",
          "    };",
          "    ",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{41}\");",
          "    writer.output.clear();",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "    c: '\\u{0041}', // Unicode character 'A'",
          "    };",
          "    ",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\U{00000041}\");",
          "    writer.output.clear();",
          "    ",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Superfluous,",
          "    c: 'B',",
          "    };",
          "    ",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");",
          "    writer.output.clear();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Superfluous,",
          "        c: '\\n', // special character",
          "    };",
          "    ",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "    c: 'A',",
          "    };",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{0041}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'B',",
          "    };",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{42}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "    c: 'C',",
          "    };",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\U{00000043}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Superfluous,",
          "    c: 'D',",
          "    };",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\D\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Superfluous,",
          "        c: '\\n', // special character",
          "    };",
          "    ",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeShort),",
          "    c: 'A',",
          "    };",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\u{0041}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::X),",
          "    c: 'B',",
          "    };",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\x{42}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "    c: 'C',",
          "    };",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\U{00000043}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Superfluous,",
          "    c: 'D',",
          "    };",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\D\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "        c: '\\u{1F600}', // Unicode character U+1F600 (grinning face)",
          "    };",
          "    ",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    writer.output == r\"\\U{1F600}\"",
          "    writer.output == r\"\\u{1F600}\"",
          "    writer.output == r\"\\x{1F600}\"",
          "    writer.output == r\"\\U{0001F600}\"",
          "    writer.output == r\"\\U{1F6C0}\""
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::HexFixed(ast::HexLiteralKind::UnicodeLong),",
          "        c: '\\u{1F600}', // Unicode character U+1F600 (grinning face)",
          "    };",
          "    ",
          "    let mut fmt_writer = Writer { wtr: &mut writer };",
          "    let _ = fmt_writer.fmt_literal(&ast);",
          "    writer.output == r\"\\U{1F600}\"",
          "    writer.output == r\"\\u{1F600}\"",
          "    writer.output == r\"\\x{1F600}\"",
          "    writer.output == r\"\\U{0001F600}\"",
          "    writer.output == r\"\\U{1F6C0}\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]