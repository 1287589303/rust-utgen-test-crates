[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Meta,",
          "        c: 'A',",
          "    };",
          "",
          "    let mut formatter = Writer { wtr: &mut writer };",
          "    let _ = formatter.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Meta,",
          "    c: 'A',",
          "    };",
          "    let mut formatter = Writer { wtr: &mut writer };",
          "    let _ = formatter.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\A\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Superfluous,",
          "    c: 'B',",
          "    };",
          "    let mut formatter = Writer { wtr: &mut writer };",
          "    let _ = formatter.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Meta,",
          "        c: 'A',",
          "    };",
          "",
          "    let mut formatter = Writer { wtr: &mut writer };",
          "    let _ = formatter.fmt_literal(&ast);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Meta,",
          "    c: 'A',",
          "    };",
          "    let mut formatter = Writer { wtr: &mut writer };",
          "    let _ = formatter.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\A\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "    span: Span::default(),",
          "    kind: ast::LiteralKind::Superfluous,",
          "    c: 'B',",
          "    };",
          "    let mut formatter = Writer { wtr: &mut writer };",
          "    let _ = formatter.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Superfluous,",
          "        c: 'B',",
          "    };",
          "",
          "    let mut formatter = Writer { wtr: &mut writer };",
          "    let _ = formatter.fmt_literal(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\B\");",
          "    writer.output.clear();",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Meta, c: 'C' };",
          "    let _ = formatter.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\C\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::Literal {",
          "        span: Span::default(),",
          "        kind: ast::LiteralKind::Superfluous,",
          "        c: 'B',",
          "    };",
          "",
          "    let mut formatter = Writer { wtr: &mut writer };",
          "    let _ = formatter.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\B\");",
          "    writer.output.clear();",
          "    let ast = ast::Literal { span: Span::default(), kind: ast::LiteralKind::Meta, c: 'C' };",
          "    let _ = formatter.fmt_literal(&ast);",
          "    assert_eq!(writer.output, r\"\\C\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]