[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::Exact)",
          "        .prefilter(Some(Prefilter::default()));",
          "    builder.configure(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.config.match_kind, Some(MatchKind::Exact));",
          "    assert!(builder.config.pre.is_some());",
          "    assert_eq!(builder.config.pre.as_ref().unwrap(), &Some(Prefilter::default()));",
          "    assert_eq!(builder.configure(config), &mut builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::Exact)",
          "        .prefilter(Some(Prefilter::default()));",
          "    builder.configure(config);",
          "    assert_eq!(builder.config.match_kind, Some(MatchKind::Exact));",
          "    assert!(builder.config.pre.is_some());",
          "    assert_eq!(builder.config.pre.as_ref().unwrap(), &Some(Prefilter::default()));",
          "    assert_eq!(builder.configure(config), &mut builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::Partial)",
          "        .prefilter(None);",
          "    builder.configure(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.config.match_kind, Some(MatchKind::Partial));",
          "    assert_eq!(builder.config.pre, None);",
          "    assert_eq!(builder.configure(config) as *const _, &builder as *const _);",
          "    assert!(std::ptr::eq(builder.configure(config), &mut builder));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::Partial)",
          "        .prefilter(None);",
          "    builder.configure(config);",
          "    assert_eq!(builder.config.match_kind, Some(MatchKind::Partial));",
          "    assert_eq!(builder.config.pre, None);",
          "    assert_eq!(builder.configure(config) as *const _, &builder as *const _);",
          "    assert!(std::ptr::eq(builder.configure(config), &mut builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config {",
          "        match_kind: Some(MatchKind::MultiLine),",
          "        pre: Some(Some(Prefilter::default())),",
          "        starts_for_each_pattern: Some(true),",
          "        byte_classes: Some(false),",
          "        unicode_word_boundary: Some(true),",
          "        quitset: Some(ByteSet::default()),",
          "        specialize_start_states: Some(true),",
          "        size_limit: Some(Some(1024)),",
          "        ..Default::default()",
          "    };",
          "    builder.configure(config);",
          "}"
        ],
        "oracle": [
          "    builder.config.get_match_kind() == MatchKind::MultiLine",
          "    builder.config.get_prefilter().is_some()",
          "    builder.config.starts_for_each_pattern == Some(true)",
          "    builder.config.byte_classes == Some(false)",
          "    builder.config.unicode_word_boundary == Some(true)",
          "    builder.config.quitset.is_some()",
          "    builder.config.specialize_start_states == Some(true)",
          "    builder.config.size_limit == Some(Some(1024))"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config {",
          "        match_kind: Some(MatchKind::MultiLine),",
          "        pre: Some(Some(Prefilter::default())),",
          "        starts_for_each_pattern: Some(true),",
          "        byte_classes: Some(false),",
          "        unicode_word_boundary: Some(true),",
          "        quitset: Some(ByteSet::default()),",
          "        specialize_start_states: Some(true),",
          "        size_limit: Some(Some(1024)),",
          "        ..Default::default()",
          "    };",
          "    builder.configure(config);",
          "    builder.config.get_match_kind() == MatchKind::MultiLine",
          "    builder.config.get_prefilter().is_some()",
          "    builder.config.starts_for_each_pattern == Some(true)",
          "    builder.config.byte_classes == Some(false)",
          "    builder.config.unicode_word_boundary == Some(true)",
          "    builder.config.quitset.is_some()",
          "    builder.config.specialize_start_states == Some(true)",
          "    builder.config.size_limit == Some(Some(1024))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config::new().match_kind(MatchKind::DotMatchesNewLine);",
          "    builder.configure(config);",
          "}"
        ],
        "oracle": [
          "    builder.configure(config).is_some();",
          "    builder.configure(config).config.match_kind == Some(MatchKind::DotMatchesNewLine);",
          "    builder.configure(config).config.pre.is_none();",
          "    builder.configure(Config::new()).config == Config::new();",
          "    builder.configure(config).config.overwrite(config).match_kind == Some(MatchKind::DotMatchesNewLine);",
          "    builder.configure(config).config.quitset.is_none();",
          "    builder.configure(config).config.byte_classes.is_none();"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config::new().match_kind(MatchKind::DotMatchesNewLine);",
          "    builder.configure(config);",
          "    builder.configure(config).is_some();",
          "    builder.configure(config).config.match_kind == Some(MatchKind::DotMatchesNewLine);",
          "    builder.configure(config).config.pre.is_none();",
          "    builder.configure(Config::new()).config == Config::new();",
          "    builder.configure(config).config.overwrite(config).match_kind == Some(MatchKind::DotMatchesNewLine);",
          "    builder.configure(config).config.quitset.is_none();",
          "    builder.configure(config).config.byte_classes.is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config {",
          "        match_kind: Some(MatchKind::IgnoreWhitespace),",
          "        pre: None,",
          "        starts_for_each_pattern: None,",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: None,",
          "        quitset: None,",
          "        specialize_start_states: Some(false),",
          "        size_limit: None,",
          "        ..Default::default()",
          "    };",
          "    builder.configure(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.config.match_kind, Some(MatchKind::IgnoreWhitespace));",
          "    assert_eq!(builder.config.byte_classes, Some(true));",
          "    assert_eq!(builder.config.specialize_start_states, Some(false));",
          "    assert_eq!(builder.config.starts_for_each_pattern, None);",
          "    assert_eq!(builder.config.pre, None);",
          "    assert_eq!(builder.config.quitset, None);",
          "    assert!(builder.config.size_limit.is_none());",
          "    assert_eq!(builder.config.unicode_word_boundary, None);",
          "    assert!(builder.config.utf8_empty.is_none());",
          "    assert!(builder.config.autopre.is_none());",
          "    assert!(builder.config.nfa_size_limit.is_none());",
          "    assert!(builder.config.determinize_size_limit.is_none());",
          "    assert!(builder.config.dfa_size_limit.is_none());",
          "    assert!(builder.config.dfa_state_limit.is_none());",
          "    assert!(builder.config.onepass_size_limit.is_none());",
          "    assert!(builder.config.backtrack.is_none());",
          "    assert!(builder.config.line_terminator.is_none());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = Config {",
          "        match_kind: Some(MatchKind::IgnoreWhitespace),",
          "        pre: None,",
          "        starts_for_each_pattern: None,",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: None,",
          "        quitset: None,",
          "        specialize_start_states: Some(false),",
          "        size_limit: None,",
          "        ..Default::default()",
          "    };",
          "    builder.configure(config);",
          "    assert_eq!(builder.config.match_kind, Some(MatchKind::IgnoreWhitespace));",
          "    assert_eq!(builder.config.byte_classes, Some(true));",
          "    assert_eq!(builder.config.specialize_start_states, Some(false));",
          "    assert_eq!(builder.config.starts_for_each_pattern, None);",
          "    assert_eq!(builder.config.pre, None);",
          "    assert_eq!(builder.config.quitset, None);",
          "    assert!(builder.config.size_limit.is_none());",
          "    assert_eq!(builder.config.unicode_word_boundary, None);",
          "    assert!(builder.config.utf8_empty.is_none());",
          "    assert!(builder.config.autopre.is_none());",
          "    assert!(builder.config.nfa_size_limit.is_none());",
          "    assert!(builder.config.determinize_size_limit.is_none());",
          "    assert!(builder.config.dfa_size_limit.is_none());",
          "    assert!(builder.config.dfa_state_limit.is_none());",
          "    assert!(builder.config.onepass_size_limit.is_none());",
          "    assert!(builder.config.backtrack.is_none());",
          "    assert!(builder.config.line_terminator.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]