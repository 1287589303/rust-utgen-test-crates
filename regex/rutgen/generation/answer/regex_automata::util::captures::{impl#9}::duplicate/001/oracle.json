[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(0).unwrap());",
          "    let name = \"duplicate_name_1\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_error.kind, GroupInfoErrorKind::Duplicate { pattern, name: String::from(name) });"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(0).unwrap());",
          "    let name = \"duplicate_name_1\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "    assert_eq!(_error.kind, GroupInfoErrorKind::Duplicate { pattern, name: String::from(name) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(1).unwrap());",
          "    let name = \"duplicate_name_2\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "}"
        ],
        "oracle": [
          "    let pattern = PatternID(SmallIndex::from_usize(1).unwrap());",
          "    let name = \"duplicate_name_2\";",
          "    let expected_error = GroupInfoError {",
          "    kind: GroupInfoErrorKind::Duplicate {",
          "    pattern,",
          "    name: String::from(name),",
          "    },",
          "    };",
          "    assert_eq!(_error, expected_error);"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(1).unwrap());",
          "    let name = \"duplicate_name_2\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "    let pattern = PatternID(SmallIndex::from_usize(1).unwrap());",
          "    let name = \"duplicate_name_2\";",
          "    let expected_error = GroupInfoError {",
          "    kind: GroupInfoErrorKind::Duplicate {",
          "    pattern,",
          "    name: String::from(name),",
          "    },",
          "    };",
          "    assert_eq!(_error, expected_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(2).unwrap());",
          "    let name = \"duplicate_name_3\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "}"
        ],
        "oracle": [
          "    _assert_eq!(_error.kind, GroupInfoErrorKind::Duplicate { pattern, name: String::from(name) });",
          "    _assert!(matches!(_error.kind, GroupInfoErrorKind::Duplicate { .. }));",
          "    _assert!(matches!(GroupInfoError::duplicate(PatternID(SmallIndex::from_usize(3).unwrap()), \"another_duplicate\"), GroupInfoError { kind: GroupInfoErrorKind::Duplicate { .. } }));",
          "    _assert_ne!(_error.kind, GroupInfoErrorKind::TooManyPatterns { .. });",
          "    _assert_ne!(_error.kind, GroupInfoErrorKind::TooManyGroups { .. });",
          "    _assert_ne!(_error.kind, GroupInfoErrorKind::MissingGroups { .. });",
          "    _assert_ne!(_error.kind, GroupInfoErrorKind::FirstMustBeUnnamed { .. });"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(2).unwrap());",
          "    let name = \"duplicate_name_3\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "    _assert_eq!(_error.kind, GroupInfoErrorKind::Duplicate { pattern, name: String::from(name) });",
          "    _assert!(matches!(_error.kind, GroupInfoErrorKind::Duplicate { .. }));",
          "    _assert!(matches!(GroupInfoError::duplicate(PatternID(SmallIndex::from_usize(3).unwrap()), \"another_duplicate\"), GroupInfoError { kind: GroupInfoErrorKind::Duplicate { .. } }));",
          "    _assert_ne!(_error.kind, GroupInfoErrorKind::TooManyPatterns { .. });",
          "    _assert_ne!(_error.kind, GroupInfoErrorKind::TooManyGroups { .. });",
          "    _assert_ne!(_error.kind, GroupInfoErrorKind::MissingGroups { .. });",
          "    _assert_ne!(_error.kind, GroupInfoErrorKind::FirstMustBeUnnamed { .. });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(3).unwrap());",
          "    let name = \"duplicate_name_4\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "}"
        ],
        "oracle": [
          "    let pattern = PatternID(SmallIndex::from_usize(3).unwrap());",
          "    let name = \"duplicate_name_4\";",
          "    let expected_error = GroupInfoError { kind: GroupInfoErrorKind::Duplicate { pattern, name: String::from(name) } };",
          "    assert_eq!(_error, expected_error);"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(3).unwrap());",
          "    let name = \"duplicate_name_4\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "    let pattern = PatternID(SmallIndex::from_usize(3).unwrap());",
          "    let name = \"duplicate_name_4\";",
          "    let expected_error = GroupInfoError { kind: GroupInfoErrorKind::Duplicate { pattern, name: String::from(name) } };",
          "    assert_eq!(_error, expected_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(4).unwrap());",
          "    let name = \"duplicate_name_5\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "}"
        ],
        "oracle": [
          "    let pattern = PatternID(SmallIndex::from_usize(4).unwrap());",
          "    let name = \"duplicate_name_5\";",
          "    let expected_error = GroupInfoError {",
          "    kind: GroupInfoErrorKind::Duplicate {",
          "    pattern,",
          "    name: String::from(name),",
          "    },",
          "    };",
          "    assert_eq!(_error, expected_error);"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(SmallIndex::from_usize(4).unwrap());",
          "    let name = \"duplicate_name_5\";",
          "    let _error = GroupInfoError::duplicate(pattern, name);",
          "    let pattern = PatternID(SmallIndex::from_usize(4).unwrap());",
          "    let name = \"duplicate_name_5\";",
          "    let expected_error = GroupInfoError {",
          "    kind: GroupInfoErrorKind::Duplicate {",
          "    pattern,",
          "    name: String::from(name),",
          "    },",
          "    };",
          "    assert_eq!(_error, expected_error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]