[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let _map = Utf8BoundedMap::new(0);",
          "}"
        ],
        "oracle": [
          "    assertion_error = Utf8BoundedMap::new(0);"
        ],
        "code": [
          "{",
          "    let _map = Utf8BoundedMap::new(0);",
          "    assertion_error = Utf8BoundedMap::new(0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _map = Utf8BoundedMap::new(1);",
          "}"
        ],
        "oracle": [
          "    assert!(Utf8BoundedMap::new(1).capacity == 1);",
          "    assert!(Utf8BoundedMap::new(1).version == 0);",
          "    assert!(Utf8BoundedMap::new(1).map.is_empty());",
          "    assert!(Utf8BoundedMap::new(0).is_err());"
        ],
        "code": [
          "{",
          "    let _map = Utf8BoundedMap::new(1);",
          "    assert!(Utf8BoundedMap::new(1).capacity == 1);",
          "    assert!(Utf8BoundedMap::new(1).version == 0);",
          "    assert!(Utf8BoundedMap::new(1).map.is_empty());",
          "    assert!(Utf8BoundedMap::new(0).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _map = Utf8BoundedMap::new(10);",
          "}"
        ],
        "oracle": [
          "    assert!(Utf8BoundedMap::new(1).capacity > 0);",
          "    assert!(Utf8BoundedMap::new(5).capacity > 0);",
          "    assert!(Utf8BoundedMap::new(100).capacity > 0);",
          "    let result_zero_capacity = std::panic::catch_unwind(|| Utf8BoundedMap::new(0));",
          "    assert!(result_zero_capacity.is_err());",
          "    let result_negative_capacity = std::panic::catch_unwind(|| Utf8BoundedMap::new(usize::MAX));",
          "    assert!(result_negative_capacity.is_err());"
        ],
        "code": [
          "{",
          "    let _map = Utf8BoundedMap::new(10);",
          "    assert!(Utf8BoundedMap::new(1).capacity > 0);",
          "    assert!(Utf8BoundedMap::new(5).capacity > 0);",
          "    assert!(Utf8BoundedMap::new(100).capacity > 0);",
          "    let result_zero_capacity = std::panic::catch_unwind(|| Utf8BoundedMap::new(0));",
          "    assert!(result_zero_capacity.is_err());",
          "    let result_negative_capacity = std::panic::catch_unwind(|| Utf8BoundedMap::new(usize::MAX));",
          "    assert!(result_negative_capacity.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_capacity = usize::MAX;",
          "    let _map = Utf8BoundedMap::new(max_capacity);",
          "}"
        ],
        "oracle": [
          "    assert!(Utf8BoundedMap::new(1).capacity == 1);",
          "    assert!(Utf8BoundedMap::new(10).capacity == 10);",
          "    assert!(Utf8BoundedMap::new(100).capacity == 100);",
          "    assert!(Utf8BoundedMap::new(usize::MAX).capacity == usize::MAX);",
          "    assert!(std::panic::catch_unwind(|| Utf8BoundedMap::new(0)).is_err());"
        ],
        "code": [
          "{",
          "    let max_capacity = usize::MAX;",
          "    let _map = Utf8BoundedMap::new(max_capacity);",
          "    assert!(Utf8BoundedMap::new(1).capacity == 1);",
          "    assert!(Utf8BoundedMap::new(10).capacity == 10);",
          "    assert!(Utf8BoundedMap::new(100).capacity == 100);",
          "    assert!(Utf8BoundedMap::new(usize::MAX).capacity == usize::MAX);",
          "    assert!(std::panic::catch_unwind(|| Utf8BoundedMap::new(0)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]