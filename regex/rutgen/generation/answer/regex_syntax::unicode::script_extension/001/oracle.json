[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name = \"Latin\";",
          "    let _result = script_extension(canonical_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap(), expected_hir_class_for_latin);",
          "    ",
          "    let canonical_name_invalid = \"InvalidScript\";",
          "    let _result_invalid = script_extension(canonical_name_invalid);",
          "    assert_eq!(_result_invalid.is_err(), true);",
          "    assert_eq!(_result_invalid.err(), Some(Error::PropertyValueNotFound));",
          "    ",
          "    #[cfg(not(feature = \"unicode-script\"))]",
          "    {",
          "    let canonical_name = \"Latin\";",
          "    let _result = script_extension(canonical_name);",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.err(), Some(Error::PropertyNotFound));",
          "    }"
        ],
        "code": [
          "{",
          "    let canonical_name = \"Latin\";",
          "    let _result = script_extension(canonical_name);",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap(), expected_hir_class_for_latin);",
          "    ",
          "    let canonical_name_invalid = \"InvalidScript\";",
          "    let _result_invalid = script_extension(canonical_name_invalid);",
          "    assert_eq!(_result_invalid.is_err(), true);",
          "    assert_eq!(_result_invalid.err(), Some(Error::PropertyValueNotFound));",
          "    ",
          "    #[cfg(not(feature = \"unicode-script\"))]",
          "    {",
          "    let canonical_name = \"Latin\";",
          "    let _result = script_extension(canonical_name);",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.err(), Some(Error::PropertyNotFound));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name = \"\";",
          "    let _result = script_extension(canonical_name);",
          "}"
        ],
        "oracle": [
          "    let canonical_name = \"\"; assert_eq!(_result, Err(Error::PropertyNotFound));",
          "    let canonical_name = \"LATIN\"; assert_eq!(_result, Ok(hir::ClassUnicode::some_expected_value()));",
          "    let canonical_name = \"CYRILLIC\"; assert_eq!(_result, Ok(hir::ClassUnicode::some_expected_value()));",
          "    let canonical_name = \"UNKNOWN\"; assert_eq!(_result, Err(Error::PropertyValueNotFound));",
          "    let canonical_name = \"GREEK\"; assert_eq!(_result, Ok(hir::ClassUnicode::some_expected_value()));",
          "    let canonical_name = \"HEBREW\"; assert_eq!(_result, Err(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let canonical_name = \"\";",
          "    let _result = script_extension(canonical_name);",
          "    let canonical_name = \"\"; assert_eq!(_result, Err(Error::PropertyNotFound));",
          "    let canonical_name = \"LATIN\"; assert_eq!(_result, Ok(hir::ClassUnicode::some_expected_value()));",
          "    let canonical_name = \"CYRILLIC\"; assert_eq!(_result, Ok(hir::ClassUnicode::some_expected_value()));",
          "    let canonical_name = \"UNKNOWN\"; assert_eq!(_result, Err(Error::PropertyValueNotFound));",
          "    let canonical_name = \"GREEK\"; assert_eq!(_result, Ok(hir::ClassUnicode::some_expected_value()));",
          "    let canonical_name = \"HEBREW\"; assert_eq!(_result, Err(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name = \"NonExistentScript\";",
          "    let _result = script_extension(canonical_name);",
          "}"
        ],
        "oracle": [
          "    let canonical_name = \"NonExistentScript\";",
          "    let result = script_extension(canonical_name);",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let canonical_name = \"NonExistentScript\";",
          "    let _result = script_extension(canonical_name);",
          "    let canonical_name = \"NonExistentScript\";",
          "    let result = script_extension(canonical_name);",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name = \"ThisIsAVeryLongCanonicalScriptExtensionNameThatMightBeAtTheLimit\";",
          "    let _result = script_extension(canonical_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err(), Error::PropertyNotFound);"
        ],
        "code": [
          "{",
          "    let canonical_name = \"ThisIsAVeryLongCanonicalScriptExtensionNameThatMightBeAtTheLimit\";",
          "    let _result = script_extension(canonical_name);",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err(), Error::PropertyNotFound);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let canonical_name = \"Latin\";",
          "    let _result = script_extension(canonical_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(script_extension(\"Latin\"), Ok(hir::ClassUnicode::new()));",
          "    assert_eq!(script_extension(\"NonExistentScript\"), Err(Error::PropertyValueNotFound));",
          "    assert_eq!(script_extension(\"InvalidScript\"), Err(Error::PropertyNotFound));",
          "    assert!(script_extension(\"\").is_err());",
          "    assert!(script_extension(\"12345\").is_err());",
          "    assert_eq!(script_extension(\"Cyrillic\"), Ok(hir::ClassUnicode::new()));",
          "    assert_eq!(script_extension(\"Greek\"), Ok(hir::ClassUnicode::new()));",
          "    assert_eq!(script_extension(\"Arabic\"), Ok(hir::ClassUnicode::new()));",
          "    assert!(script_extension(\"  \").is_err());",
          "    assert_eq!(script_extension(\"Common\"), Ok(hir::ClassUnicode::new()));"
        ],
        "code": [
          "{",
          "    let canonical_name = \"Latin\";",
          "    let _result = script_extension(canonical_name);",
          "    assert_eq!(script_extension(\"Latin\"), Ok(hir::ClassUnicode::new()));",
          "    assert_eq!(script_extension(\"NonExistentScript\"), Err(Error::PropertyValueNotFound));",
          "    assert_eq!(script_extension(\"InvalidScript\"), Err(Error::PropertyNotFound));",
          "    assert!(script_extension(\"\").is_err());",
          "    assert!(script_extension(\"12345\").is_err());",
          "    assert_eq!(script_extension(\"Cyrillic\"), Ok(hir::ClassUnicode::new()));",
          "    assert_eq!(script_extension(\"Greek\"), Ok(hir::ClassUnicode::new()));",
          "    assert_eq!(script_extension(\"Arabic\"), Ok(hir::ClassUnicode::new()));",
          "    assert!(script_extension(\"  \").is_err());",
          "    assert_eq!(script_extension(\"Common\"), Ok(hir::ClassUnicode::new()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]