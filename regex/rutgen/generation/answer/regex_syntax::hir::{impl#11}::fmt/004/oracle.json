[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_unicode = Class::Unicode(ClassUnicode::empty());",
          "    let _ = format!(\"{:?}\", class_unicode);",
          "}"
        ],
        "oracle": [
          "    let class_unicode = Class::Unicode(ClassUnicode::empty());",
          "    let _ = format!(\"{:?}\", class_unicode);",
          "    assert_eq!(format!(\"{:?}\", class_unicode), \"{}\");"
        ],
        "code": [
          "{",
          "    let class_unicode = Class::Unicode(ClassUnicode::empty());",
          "    let _ = format!(\"{:?}\", class_unicode);",
          "    let class_unicode = Class::Unicode(ClassUnicode::empty());",
          "    let _ = format!(\"{:?}\", class_unicode);",
          "    assert_eq!(format!(\"{:?}\", class_unicode), \"{}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![range]));",
          "    let _ = format!(\"{:?}\", class_unicode);",
          "}"
        ],
        "oracle": [
          "    let range_empty = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let class_unicode_empty = Class::Unicode(ClassUnicode::new(vec![]));",
          "    let formatted_empty = format!(\"{:?}\", class_unicode_empty);",
          "    assert_eq!(formatted_empty, \"{}\");",
          "    let formatted_single = format!(\"{:?}\", class_unicode);",
          "    assert_eq!(formatted_single, \"{'a'}\");"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![range]));",
          "    let _ = format!(\"{:?}\", class_unicode);",
          "    let range_empty = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let class_unicode_empty = Class::Unicode(ClassUnicode::new(vec![]));",
          "    let formatted_empty = format!(\"{:?}\", class_unicode_empty);",
          "    assert_eq!(formatted_empty, \"{}\");",
          "    let formatted_single = format!(\"{:?}\", class_unicode);",
          "    assert_eq!(formatted_single, \"{'a'}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'B', end: 'B' };",
          "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![range]));",
          "    let _ = format!(\"{:?}\", class_unicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert_eq!(class_unicode.ranges()[0].start, 'B');",
          "    assert_eq!(class_unicode.ranges()[0].end, 'B');",
          "    assert!(matches!(class_unicode, Class::Unicode(_)));",
          "    assert!(!class_unicode.ranges().is_empty());",
          "    assert_eq!(format!(\"{:?}\", class_unicode), \"{(B..=B)}\");"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'B', end: 'B' };",
          "    let class_unicode = Class::Unicode(ClassUnicode::new(vec![range]));",
          "    let _ = format!(\"{:?}\", class_unicode);",
          "    assert_eq!(class_unicode.ranges().len(), 1);",
          "    assert_eq!(class_unicode.ranges()[0].start, 'B');",
          "    assert_eq!(class_unicode.ranges()[0].end, 'B');",
          "    assert!(matches!(class_unicode, Class::Unicode(_)));",
          "    assert!(!class_unicode.ranges().is_empty());",
          "    assert_eq!(format!(\"{:?}\", class_unicode), \"{(B..=B)}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]