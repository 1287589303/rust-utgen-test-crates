[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_bytes = ClassBytes::empty();",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = class_bytes.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.ranges().is_empty(), true);",
          "    assert!(formatter.is_empty());",
          "    assert!(formatter.write_str(\"[]\").is_ok());"
        ],
        "code": [
          "{",
          "    let class_bytes = ClassBytes::empty();",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = class_bytes.fmt(&mut formatter);",
          "    assert_eq!(class_bytes.ranges().is_empty(), true);",
          "    assert!(formatter.is_empty());",
          "    assert!(formatter.write_str(\"[]\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_range: Vec<ClassBytesRange> = vec![];",
          "    let class_bytes = ClassBytes::new(empty_range);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = class_bytes.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"{}\");",
          "    assert!(formatter.is_empty());",
          "    assert!(class_bytes.ranges().is_empty());",
          "    assert!(!class_bytes.is_ascii());",
          "    assert_eq!(class_bytes.minimum_len(), None);",
          "    assert_eq!(class_bytes.maximum_len(), None);",
          "    assert_eq!(class_bytes.literal(), None);",
          "    assert_eq!(class_bytes.to_unicode_class(), None);"
        ],
        "code": [
          "{",
          "    let empty_range: Vec<ClassBytesRange> = vec![];",
          "    let class_bytes = ClassBytes::new(empty_range);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = class_bytes.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"{}\");",
          "    assert!(formatter.is_empty());",
          "    assert!(class_bytes.ranges().is_empty());",
          "    assert!(!class_bytes.is_ascii());",
          "    assert_eq!(class_bytes.minimum_len(), None);",
          "    assert_eq!(class_bytes.maximum_len(), None);",
          "    assert_eq!(class_bytes.literal(), None);",
          "    assert_eq!(class_bytes.to_unicode_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]