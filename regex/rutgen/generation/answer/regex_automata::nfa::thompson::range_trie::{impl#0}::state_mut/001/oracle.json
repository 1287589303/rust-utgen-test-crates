[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    trie.states.push(State { transitions: vec![] });",
          "    let state_id = StateID::new_unchecked(0);",
          "    let _state = trie.state_mut(state_id);",
          "}"
        ],
        "oracle": [
          "    trie.states.len() == 1",
          "    trie.state_mut(state_id).transitions.len() == 0",
          "    trie.state_mut(state_id).is_match == false",
          "    trie.state_mut(state_id).ntrans == 0",
          "    trie.state_mut(state_id).input_ranges.is_empty() == true",
          "    trie.state_mut(state_id).next.is_empty() == true",
          "    trie.state_mut(state_id).pattern_ids.is_empty() == true",
          "    trie.state_mut(state_id).accel.is_empty() == true"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    trie.states.push(State { transitions: vec![] });",
          "    let state_id = StateID::new_unchecked(0);",
          "    let _state = trie.state_mut(state_id);",
          "    trie.states.len() == 1",
          "    trie.state_mut(state_id).transitions.len() == 0",
          "    trie.state_mut(state_id).is_match == false",
          "    trie.state_mut(state_id).ntrans == 0",
          "    trie.state_mut(state_id).input_ranges.is_empty() == true",
          "    trie.state_mut(state_id).next.is_empty() == true",
          "    trie.state_mut(state_id).pattern_ids.is_empty() == true",
          "    trie.state_mut(state_id).accel.is_empty() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    trie.states.push(State { transitions: vec![] });",
          "    trie.states.push(State { transitions: vec![] });",
          "    let state_id = StateID::new_unchecked(1);",
          "    let _state = trie.state_mut(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(trie.states.len(), 2);",
          "    assert!(trie.state_mut(state_id).transitions.is_empty());",
          "    assert_eq!(trie.state_mut(state_id).id, state_id);"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    trie.states.push(State { transitions: vec![] });",
          "    trie.states.push(State { transitions: vec![] });",
          "    let state_id = StateID::new_unchecked(1);",
          "    let _state = trie.state_mut(state_id);",
          "    assert_eq!(trie.states.len(), 2);",
          "    assert!(trie.state_mut(state_id).transitions.is_empty());",
          "    assert_eq!(trie.state_mut(state_id).id, state_id);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    trie.states.push(State { transitions: vec![] });",
          "    let state_id = StateID::new_unchecked(2);",
          "    let _state = trie.state_mut(state_id);",
          "}"
        ],
        "oracle": [
          "    let mut trie = RangeTrie::new();",
          "    trie.states.push(State { transitions: vec![] });",
          "    let state_id = StateID::new_unchecked(2);",
          "    let state_mut_ref = trie.state_mut(state_id);",
          "    assert_eq!(state_mut_ref.id, state_id);",
          "    assert!(trie.states.len() > 0);",
          "    assert!(trie.states[0].transitions.is_empty());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    trie.state_mut(StateID::ZERO);",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    trie.state_mut(StateID::new_unchecked(1));",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut trie = RangeTrie::new();",
          "    trie.states.push(State { transitions: vec![] });",
          "    let state_id = StateID::new_unchecked(2);",
          "    let _state = trie.state_mut(state_id);",
          "    let mut trie = RangeTrie::new();",
          "    trie.states.push(State { transitions: vec![] });",
          "    let state_id = StateID::new_unchecked(2);",
          "    let state_mut_ref = trie.state_mut(state_id);",
          "    assert_eq!(state_mut_ref.id, state_id);",
          "    assert!(trie.states.len() > 0);",
          "    assert!(trie.states[0].transitions.is_empty());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    trie.state_mut(StateID::ZERO);",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    trie.state_mut(StateID::new_unchecked(1));",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]