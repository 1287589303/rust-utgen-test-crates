[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![250]);",
          "    let _ = literal.is_poisonous();",
          "}"
        ],
        "oracle": [
          "    let literal = Literal::exact(vec![250]); assert!(literal.is_poisonous());",
          "    let literal = Literal::exact(vec![249]); assert!(!literal.is_poisonous());",
          "    let literal = Literal::inexact(vec![250]); assert!(literal.is_poisonous());",
          "    let literal = Literal::inexact(vec![200]); assert!(!literal.is_poisonous());",
          "    let literal = Literal::exact(vec![]); assert!(!literal.is_poisonous());",
          "    let literal = Literal::exact(vec![255]); assert!(literal.is_poisonous());",
          "    let literal = Literal::exact(vec![245]); assert!(!literal.is_poisonous());"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![250]);",
          "    let _ = literal.is_poisonous();",
          "    let literal = Literal::exact(vec![250]); assert!(literal.is_poisonous());",
          "    let literal = Literal::exact(vec![249]); assert!(!literal.is_poisonous());",
          "    let literal = Literal::inexact(vec![250]); assert!(literal.is_poisonous());",
          "    let literal = Literal::inexact(vec![200]); assert!(!literal.is_poisonous());",
          "    let literal = Literal::exact(vec![]); assert!(!literal.is_poisonous());",
          "    let literal = Literal::exact(vec![255]); assert!(literal.is_poisonous());",
          "    let literal = Literal::exact(vec![245]); assert!(!literal.is_poisonous());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![255]);",
          "    let _ = literal.is_poisonous();",
          "}"
        ],
        "oracle": [
          "    assert!(!literal.is_empty());",
          "    assert_eq!(literal.len(), 1);",
          "    assert_eq!(rank(literal.as_bytes()[0]), 255);",
          "    assert!(literal.is_poisonous());"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![255]);",
          "    let _ = literal.is_poisonous();",
          "    assert!(!literal.is_empty());",
          "    assert_eq!(literal.len(), 1);",
          "    assert_eq!(rank(literal.as_bytes()[0]), 255);",
          "    assert!(literal.is_poisonous());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::exact(vec![249]);",
          "    let _ = literal.is_poisonous();",
          "}"
        ],
        "oracle": [
          "    assert!(!literal.is_empty());",
          "    assert_eq!(literal.len(), 1);",
          "    assert_eq!(rank(literal.as_bytes()[0]), 249);",
          "    assert!(!literal.is_poisonous());",
          "    literal.extend(&Literal::exact(vec![250]));",
          "    assert!(literal.is_poisonous());",
          "    literal.keep_first_bytes(1);",
          "    assert!(literal.is_poisonous());"
        ],
        "code": [
          "{",
          "    let literal = Literal::exact(vec![249]);",
          "    let _ = literal.is_poisonous();",
          "    assert!(!literal.is_empty());",
          "    assert_eq!(literal.len(), 1);",
          "    assert_eq!(rank(literal.as_bytes()[0]), 249);",
          "    assert!(!literal.is_poisonous());",
          "    literal.extend(&Literal::exact(vec![250]));",
          "    assert!(literal.is_poisonous());",
          "    literal.keep_first_bytes(1);",
          "    assert!(literal.is_poisonous());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]