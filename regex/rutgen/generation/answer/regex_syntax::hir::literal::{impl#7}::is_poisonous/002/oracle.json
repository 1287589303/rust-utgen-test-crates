[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal = Literal::exact(vec![255, 1]);",
          "    let result = literal.is_poisonous();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert_eq!(literal.len(), 2);",
          "    assert!(!literal.is_empty());",
          "    assert!(!literal.is_exact());",
          "    assert!(rank(literal.as_bytes()[0]) >= 250);"
        ],
        "code": [
          "{",
          "    let mut literal = Literal::exact(vec![255, 1]);",
          "    let result = literal.is_poisonous();",
          "    assert_eq!(result, true);",
          "    assert_eq!(literal.len(), 2);",
          "    assert!(!literal.is_empty());",
          "    assert!(!literal.is_exact());",
          "    assert!(rank(literal.as_bytes()[0]) >= 250);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal = Literal::exact(vec![250, 2]);",
          "    let result = literal.is_poisonous();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(literal.len() > 1);",
          "    assert!(literal.is_empty() == false);",
          "    assert!(rank(literal.as_bytes()[0]) < 250);"
        ],
        "code": [
          "{",
          "    let mut literal = Literal::exact(vec![250, 2]);",
          "    let result = literal.is_poisonous();",
          "    assert_eq!(result, false);",
          "    assert!(literal.len() > 1);",
          "    assert!(literal.is_empty() == false);",
          "    assert!(rank(literal.as_bytes()[0]) < 250);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal = Literal::exact(vec![251, 3]);",
          "    let result = literal.is_poisonous();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_eq!(literal.len(), 2);",
          "    assert!(!literal.is_empty());",
          "    assert!(literal.as_bytes()[0] == 251 || literal.as_bytes()[1] == 3);",
          "    assert!(rank(literal.as_bytes()[0]) < 250);",
          "    assert!(rank(literal.as_bytes()[1]) < 250);"
        ],
        "code": [
          "{",
          "    let mut literal = Literal::exact(vec![251, 3]);",
          "    let result = literal.is_poisonous();",
          "    assert_eq!(result, false);",
          "    assert_eq!(literal.len(), 2);",
          "    assert!(!literal.is_empty());",
          "    assert!(literal.as_bytes()[0] == 251 || literal.as_bytes()[1] == 3);",
          "    assert!(rank(literal.as_bytes()[0]) < 250);",
          "    assert!(rank(literal.as_bytes()[1]) < 250);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal = Literal::exact(vec![200, 200]);",
          "    let result = literal.is_poisonous();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    literal.extend(&Literal::exact(vec![250]));",
          "    assert_eq!(result, false);",
          "    literal.keep_first_bytes(1);",
          "    assert_eq!(rank(literal.as_bytes()[0]) >= 250, true);",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut literal = Literal::exact(vec![200, 200]);",
          "    let result = literal.is_poisonous();",
          "    assert_eq!(result, false);",
          "    literal.extend(&Literal::exact(vec![250]));",
          "    assert_eq!(result, false);",
          "    literal.keep_first_bytes(1);",
          "    assert_eq!(rank(literal.as_bytes()[0]) >= 250, true);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal = Literal::exact(vec![255, 255]);",
          "    let result = literal.is_poisonous();",
          "}"
        ],
        "oracle": [
          "    let literal = Literal::exact(vec![255, 255]);",
          "    assert!(!literal.is_empty());",
          "    assert!(literal.len() > 1);",
          "    let first_byte = literal.as_bytes()[0];",
          "    assert!(rank(first_byte) >= 250);",
          "    assert_eq!(literal.is_poisonous(), true);"
        ],
        "code": [
          "{",
          "    let mut literal = Literal::exact(vec![255, 255]);",
          "    let result = literal.is_poisonous();",
          "    let literal = Literal::exact(vec![255, 255]);",
          "    assert!(!literal.is_empty());",
          "    assert!(literal.len() > 1);",
          "    let first_byte = literal.as_bytes()[0];",
          "    assert!(rank(first_byte) >= 250);",
          "    assert_eq!(literal.is_poisonous(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]