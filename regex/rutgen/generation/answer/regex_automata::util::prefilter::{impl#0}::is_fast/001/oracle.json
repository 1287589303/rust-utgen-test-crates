[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct PrefilterImpl {",
          "        is_fast: bool,",
          "    }",
          "",
          "    impl Debug for PrefilterImpl {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
          "            write!(f, \"PrefilterImpl\")",
          "        }",
          "    }",
          "",
          "    impl Send for PrefilterImpl {}",
          "    impl Sync for PrefilterImpl {}",
          "    impl RefUnwindSafe for PrefilterImpl {}",
          "    impl UnwindSafe for PrefilterImpl {}",
          "",
          "    let prefilter = Prefilter {",
          "        pre: Arc::new(PrefilterImpl { is_fast: true }),",
          "        is_fast: true,",
          "        max_needle_len: 0,",
          "    };",
          "",
          "    prefilter.is_fast();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(prefilter.is_fast(), true);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: false }), is_fast: false, max_needle_len: 0 };",
          "    assert_eq!(prefilter.is_fast(), false);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: true }), is_fast: false, max_needle_len: 0 };",
          "    assert_eq!(prefilter.is_fast(), false);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: false }), is_fast: true, max_needle_len: 0 };",
          "    assert_eq!(prefilter.is_fast(), true);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: true }), is_fast: true, max_needle_len: 0 };",
          "    assert_eq!(prefilter.is_fast(), true);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: true }), is_fast: true, max_needle_len: 10 };",
          "    assert_eq!(prefilter.is_fast(), true);"
        ],
        "code": [
          "{",
          "    struct PrefilterImpl {",
          "        is_fast: bool,",
          "    }",
          "",
          "    impl Debug for PrefilterImpl {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
          "            write!(f, \"PrefilterImpl\")",
          "        }",
          "    }",
          "",
          "    impl Send for PrefilterImpl {}",
          "    impl Sync for PrefilterImpl {}",
          "    impl RefUnwindSafe for PrefilterImpl {}",
          "    impl UnwindSafe for PrefilterImpl {}",
          "",
          "    let prefilter = Prefilter {",
          "        pre: Arc::new(PrefilterImpl { is_fast: true }),",
          "        is_fast: true,",
          "        max_needle_len: 0,",
          "    };",
          "",
          "    prefilter.is_fast();",
          "    assert_eq!(prefilter.is_fast(), true);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: false }), is_fast: false, max_needle_len: 0 };",
          "    assert_eq!(prefilter.is_fast(), false);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: true }), is_fast: false, max_needle_len: 0 };",
          "    assert_eq!(prefilter.is_fast(), false);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: false }), is_fast: true, max_needle_len: 0 };",
          "    assert_eq!(prefilter.is_fast(), true);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: true }), is_fast: true, max_needle_len: 0 };",
          "    assert_eq!(prefilter.is_fast(), true);",
          "    let prefilter = Prefilter { pre: Arc::new(PrefilterImpl { is_fast: true }), is_fast: true, max_needle_len: 10 };",
          "    assert_eq!(prefilter.is_fast(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct PrefilterImpl {",
          "        is_fast: bool,",
          "    }",
          "",
          "    impl Debug for PrefilterImpl {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
          "            write!(f, \"PrefilterImpl\")",
          "        }",
          "    }",
          "",
          "    impl Send for PrefilterImpl {}",
          "    impl Sync for PrefilterImpl {}",
          "    impl RefUnwindSafe for PrefilterImpl {}",
          "    impl UnwindSafe for PrefilterImpl {}",
          "",
          "    let prefilter = Prefilter {",
          "        pre: Arc::new(PrefilterImpl { is_fast: false }),",
          "        is_fast: false,",
          "        max_needle_len: 0,",
          "    };",
          "",
          "    prefilter.is_fast();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(prefilter.is_fast(), false);"
        ],
        "code": [
          "{",
          "    struct PrefilterImpl {",
          "        is_fast: bool,",
          "    }",
          "",
          "    impl Debug for PrefilterImpl {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
          "            write!(f, \"PrefilterImpl\")",
          "        }",
          "    }",
          "",
          "    impl Send for PrefilterImpl {}",
          "    impl Sync for PrefilterImpl {}",
          "    impl RefUnwindSafe for PrefilterImpl {}",
          "    impl UnwindSafe for PrefilterImpl {}",
          "",
          "    let prefilter = Prefilter {",
          "        pre: Arc::new(PrefilterImpl { is_fast: false }),",
          "        is_fast: false,",
          "        max_needle_len: 0,",
          "    };",
          "",
          "    prefilter.is_fast();",
          "    assert_eq!(prefilter.is_fast(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]