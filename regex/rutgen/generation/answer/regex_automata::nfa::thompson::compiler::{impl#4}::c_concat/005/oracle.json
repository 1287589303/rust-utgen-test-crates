[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        current: usize,",
          "        end: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = Result<ThompsonRef, BuildError>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.current < self.end {",
          "                self.current += 1;",
          "                Some(Ok(ThompsonRef { start: StateID(0), end: StateID(1) }))",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.current > 0 {",
          "                self.current -= 1;",
          "                Some(Ok(ThompsonRef { start: StateID(0), end: StateID(1) }))",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let iterator = TestIterator { current: 0, end: 1 };",
          "",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { look_behind: Some(1), anchored: Anchored::No },",
          "        builder: RefCell::new(Builder { config: Config::default() }),",
          "        utf8_state: RefCell::new(Utf8State { compiled: Utf8BoundedMap::default(), uncompiled: Vec::new() }),",
          "        trie_state: RefCell::new(RangeTrie { states: Vec::new(), free: Vec::new(), iter_stack: RefCell::new(Vec::new()), iter_ranges: RefCell::new(Vec::new()), dupe_stack: Vec::new(), insert_stack: Vec::new() }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: Vec::new() }),",
          "    };",
          "",
          "    let _result = compiler.c_concat(iterator);",
          "}"
        ],
        "oracle": [
          "    let iterator = TestIterator { current: 0, end: 1 };",
          "    assert!(compiler.is_reverse());",
          "    let first = iterator.next_back();",
          "    assert!(first.is_some());",
          "    let ThompsonRef { start, end } = first.unwrap().unwrap();",
          "    assert!(start == StateID(0) && end == StateID(1));",
          "    let next = iterator.next_back();",
          "    assert!(next.is_none());",
          "    let result = compiler.c_concat(iterator);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start == StateID(0) && thompson_ref.end == StateID(1));"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        current: usize,",
          "        end: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = Result<ThompsonRef, BuildError>;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.current < self.end {",
          "                self.current += 1;",
          "                Some(Ok(ThompsonRef { start: StateID(0), end: StateID(1) }))",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.current > 0 {",
          "                self.current -= 1;",
          "                Some(Ok(ThompsonRef { start: StateID(0), end: StateID(1) }))",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let iterator = TestIterator { current: 0, end: 1 };",
          "",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { look_behind: Some(1), anchored: Anchored::No },",
          "        builder: RefCell::new(Builder { config: Config::default() }),",
          "        utf8_state: RefCell::new(Utf8State { compiled: Utf8BoundedMap::default(), uncompiled: Vec::new() }),",
          "        trie_state: RefCell::new(RangeTrie { states: Vec::new(), free: Vec::new(), iter_stack: RefCell::new(Vec::new()), iter_ranges: RefCell::new(Vec::new()), dupe_stack: Vec::new(), insert_stack: Vec::new() }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: Vec::new() }),",
          "    };",
          "",
          "    let _result = compiler.c_concat(iterator);",
          "    let iterator = TestIterator { current: 0, end: 1 };",
          "    assert!(compiler.is_reverse());",
          "    let first = iterator.next_back();",
          "    assert!(first.is_some());",
          "    let ThompsonRef { start, end } = first.unwrap().unwrap();",
          "    assert!(start == StateID(0) && end == StateID(1));",
          "    let next = iterator.next_back();",
          "    assert!(next.is_none());",
          "    let result = compiler.c_concat(iterator);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert!(thompson_ref.start == StateID(0) && thompson_ref.end == StateID(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]