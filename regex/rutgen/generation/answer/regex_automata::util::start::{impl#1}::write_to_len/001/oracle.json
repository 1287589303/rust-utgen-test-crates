[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_byte_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let len = start_byte_map.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 256);",
          "    assert!(std::mem::size_of_val(&len) == std::mem::size_of::<usize>());",
          "    assert!(len > 0);",
          "    assert!(len == start_byte_map.write_to_len());"
        ],
        "code": [
          "{",
          "    let start_byte_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let len = start_byte_map.write_to_len();",
          "    assert_eq!(len, 256);",
          "    assert!(std::mem::size_of_val(&len) == std::mem::size_of::<usize>());",
          "    assert!(len > 0);",
          "    assert!(len == start_byte_map.write_to_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_byte_map = StartByteMap { map: [Start::WordByte; 256] };",
          "    let len = start_byte_map.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 256);"
        ],
        "code": [
          "{",
          "    let start_byte_map = StartByteMap { map: [Start::WordByte; 256] };",
          "    let len = start_byte_map.write_to_len();",
          "    assert_eq!(len, 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_byte_map = StartByteMap { map: [Start::Text; 256] };",
          "    let len = start_byte_map.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 256);"
        ],
        "code": [
          "{",
          "    let start_byte_map = StartByteMap { map: [Start::Text; 256] };",
          "    let len = start_byte_map.write_to_len();",
          "    assert_eq!(len, 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]