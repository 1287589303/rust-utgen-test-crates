[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let next_state = StateID(SmallIndex(0));",
          "    let group_index: u32 = u32::MAX + 1; // This will be negative in a signed context",
          "    let result = builder.add_capture_end(next_state, group_index);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), BuildError::invalid_capture_index(group_index));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let next_state = StateID(SmallIndex(0));",
          "    let group_index: u32 = u32::MAX + 1; // This will be negative in a signed context",
          "    let result = builder.add_capture_end(next_state, group_index);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), BuildError::invalid_capture_index(group_index));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let next_state = StateID(SmallIndex(1));",
          "    let group_index: u32 = 2u32.pow(32); // Value is greater than 2^32",
          "    let result = builder.add_capture_end(next_state, group_index);",
          "}"
        ],
        "oracle": [
          "    let mut builder = Builder::new();",
          "    let next_state = StateID(SmallIndex(1));",
          "    let group_index: u32 = 2u32.pow(32);",
          "    let result = builder.add_capture_end(next_state, group_index);",
          "    assert_eq!(result, Err(BuildError::invalid_capture_index(group_index)));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let next_state = StateID(SmallIndex(1));",
          "    let group_index: u32 = 2u32.pow(32); // Value is greater than 2^32",
          "    let result = builder.add_capture_end(next_state, group_index);",
          "    let mut builder = Builder::new();",
          "    let next_state = StateID(SmallIndex(1));",
          "    let group_index: u32 = 2u32.pow(32);",
          "    let result = builder.add_capture_end(next_state, group_index);",
          "    assert_eq!(result, Err(BuildError::invalid_capture_index(group_index)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]