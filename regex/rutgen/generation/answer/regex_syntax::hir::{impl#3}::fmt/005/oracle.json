[
  {
    "uses": [
      "use crate::ErrorKind;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ErrorKind;",
          "",
          "    let error_kind = ErrorKind::InvalidLineTerminator;",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error_kind.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer().as_slice(), b\"invalid line terminator, must be ASCII\");"
        ],
        "code": [
          "{",
          "    use crate::ErrorKind;",
          "",
          "    let error_kind = ErrorKind::InvalidLineTerminator;",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = error_kind.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer().as_slice(), b\"invalid line terminator, must be ASCII\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::ErrorKind;",
          "",
          "    let error_kind = ErrorKind::InvalidLineTerminator;",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = core::fmt::Display::fmt(&error_kind, &mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"invalid line terminator, must be ASCII\");"
        ],
        "code": [
          "{",
          "    use crate::ErrorKind;",
          "",
          "    let error_kind = ErrorKind::InvalidLineTerminator;",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = core::fmt::Display::fmt(&error_kind, &mut formatter);",
          "    assert_eq!(formatter.buffer(), \"invalid line terminator, must be ASCII\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]