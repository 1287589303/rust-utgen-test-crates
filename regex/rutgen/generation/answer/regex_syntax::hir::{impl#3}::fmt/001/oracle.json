[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "    ",
          "    let _ = error_kind.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    let expected_message = \"Unicode-aware case insensitivity matching is not available \\n (make sure the unicode-case feature is enabled)\";",
          "    assert_eq!(buffer.to_string(), expected_message);"
        ],
        "code": [
          "{",
          "    let error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "    ",
          "    let _ = error_kind.fmt(&mut buffer);",
          "    let error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    let expected_message = \"Unicode-aware case insensitivity matching is not available \\n (make sure the unicode-case feature is enabled)\";",
          "    assert_eq!(buffer.to_string(), expected_message);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = crate::ErrorKind::UnicodePropertyNotFound;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode property not found\");",
          "    error_kind = crate::ErrorKind::UnicodeNotAllowed;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode not allowed here\");",
          "    error_kind = crate::ErrorKind::InvalidUtf8;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"pattern can match invalid UTF-8\");",
          "    error_kind = crate::ErrorKind::InvalidLineTerminator;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"invalid line terminator, must be ASCII\");",
          "    error_kind = crate::ErrorKind::UnicodePropertyValueNotFound;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode property value not found\");",
          "    error_kind = crate::ErrorKind::UnicodePerlClassNotFound;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode-aware Perl class not found (make sure the unicode-perl feature is enabled)\");",
          "    error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode-aware case insensitivity matching is not available (make sure the unicode-case feature is enabled)\");"
        ],
        "code": [
          "{",
          "    let error_kind = crate::ErrorKind::UnicodePropertyNotFound;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode property not found\");",
          "    error_kind = crate::ErrorKind::UnicodeNotAllowed;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode not allowed here\");",
          "    error_kind = crate::ErrorKind::InvalidUtf8;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"pattern can match invalid UTF-8\");",
          "    error_kind = crate::ErrorKind::InvalidLineTerminator;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"invalid line terminator, must be ASCII\");",
          "    error_kind = crate::ErrorKind::UnicodePropertyValueNotFound;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode property value not found\");",
          "    error_kind = crate::ErrorKind::UnicodePerlClassNotFound;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode-aware Perl class not found (make sure the unicode-perl feature is enabled)\");",
          "    error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    assert_eq!(error_kind.fmt(&mut buffer).unwrap_err().to_string(), \"Unicode-aware case insensitivity matching is not available (make sure the unicode-case feature is enabled)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = crate::ErrorKind::InvalidUtf8;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "    let result = error_kind.fmt(&mut buffer);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(buffer.to_string(), \"Unicode-aware case insensitivity matching is not available \\n (make sure the unicode-case feature is enabled)\");"
        ],
        "code": [
          "{",
          "    let error_kind = crate::ErrorKind::InvalidUtf8;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "    let error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "    let result = error_kind.fmt(&mut buffer);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(buffer.to_string(), \"Unicode-aware case insensitivity matching is not available \\n (make sure the unicode-case feature is enabled)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = crate::ErrorKind::InvalidLineTerminator;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    error_kind.fmt(&mut buffer) == Ok(\"Unicode-aware case insensitivity matching is not available \\n (make sure the unicode-case feature is enabled)\")"
        ],
        "code": [
          "{",
          "    let error_kind = crate::ErrorKind::InvalidLineTerminator;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "    error_kind.fmt(&mut buffer) == Ok(\"Unicode-aware case insensitivity matching is not available \\n (make sure the unicode-case feature is enabled)\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = crate::ErrorKind::UnicodePropertyValueNotFound;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "    assert_eq!(error_kind.fmt(&mut buffer), Ok(()));",
          "    assert_eq!(buffer.to_string(), \"Unicode-aware case insensitivity matching is not available \\n (make sure the unicode-case feature is enabled)\");"
        ],
        "code": [
          "{",
          "    let error_kind = crate::ErrorKind::UnicodePropertyValueNotFound;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "    let error_kind = crate::ErrorKind::UnicodeCaseUnavailable;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "    assert_eq!(error_kind.fmt(&mut buffer), Ok(()));",
          "    assert_eq!(buffer.to_string(), \"Unicode-aware case insensitivity matching is not available \\n (make sure the unicode-case feature is enabled)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error_kind = crate::ErrorKind::UnicodePerlClassNotFound;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.as_str(), \"Unicode-aware Perl class not found (make sure the unicode-perl feature is enabled)\");"
        ],
        "code": [
          "{",
          "    let error_kind = crate::ErrorKind::UnicodePerlClassNotFound;",
          "    let mut buffer = core::fmt::Formatter::default();",
          "",
          "    let _ = error_kind.fmt(&mut buffer);",
          "    assert_eq!(buffer.as_str(), \"Unicode-aware Perl class not found (make sure the unicode-perl feature is enabled)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]