[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    let capacity = sparse_set.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 0);"
        ],
        "code": [
          "{",
          "    let sparse_set = SparseSet::new(0);",
          "    let capacity = sparse_set.capacity();",
          "    assert_eq!(capacity, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_set = SparseSet::new(1);",
          "    let capacity = sparse_set.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 0);"
        ],
        "code": [
          "{",
          "    let sparse_set = SparseSet::new(1);",
          "    let capacity = sparse_set.capacity();",
          "    assert_eq!(capacity, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_set = SparseSet::new(10);",
          "    let capacity = sparse_set.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, 0);"
        ],
        "code": [
          "{",
          "    let sparse_set = SparseSet::new(10);",
          "    let capacity = sparse_set.capacity();",
          "    assert_eq!(capacity, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_state_id = StateID(u32::MAX);",
          "    let sparse_set = SparseSet::new(max_state_id.0 as usize);",
          "    let capacity = sparse_set.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity, max_state_id.0 as usize);",
          "    assert!(capacity > 0);"
        ],
        "code": [
          "{",
          "    let max_state_id = StateID(u32::MAX);",
          "    let sparse_set = SparseSet::new(max_state_id.0 as usize);",
          "    let capacity = sparse_set.capacity();",
          "    assert_eq!(capacity, max_state_id.0 as usize);",
          "    assert!(capacity > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]