[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_unicode = ClassUnicode::empty();",
          "    class_unicode.literal();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.literal(), None);",
          "    ",
          "    let class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }]);",
          "    assert_eq!(class_unicode.literal(), None);",
          "    ",
          "    let class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'b', end: 'b' }]);",
          "    assert_eq!(class_unicode.literal(), None);",
          "    ",
          "    let class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: '1', end: '1' }, ClassUnicodeRange { start: '1', end: '2' }]);",
          "    assert_eq!(class_unicode.literal(), None);"
        ],
        "code": [
          "{",
          "    let class_unicode = ClassUnicode::empty();",
          "    class_unicode.literal();",
          "    assert_eq!(class_unicode.literal(), None);",
          "    ",
          "    let class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'z' }]);",
          "    assert_eq!(class_unicode.literal(), None);",
          "    ",
          "    let class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'b', end: 'b' }]);",
          "    assert_eq!(class_unicode.literal(), None);",
          "    ",
          "    let class_unicode = ClassUnicode::new(vec![ClassUnicodeRange { start: '1', end: '1' }, ClassUnicodeRange { start: '1', end: '2' }]);",
          "    assert_eq!(class_unicode.literal(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    class_unicode.literal();",
          "}"
        ],
        "oracle": [
          "    let range_empty = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let class_unicode_empty = ClassUnicode::new(vec![range_empty]);",
          "    assert_eq!(class_unicode_empty.literal(), None);",
          "    ",
          "    let range_multiple = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let range_multiple_end = ClassUnicodeRange { start: 'c', end: 'd' };",
          "    let class_unicode_multiple = ClassUnicode::new(vec![range_multiple, range_multiple_end]);",
          "    assert_eq!(class_unicode_multiple.literal(), None);"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    class_unicode.literal();",
          "    let range_empty = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let class_unicode_empty = ClassUnicode::new(vec![range_empty]);",
          "    assert_eq!(class_unicode_empty.literal(), None);",
          "    ",
          "    let range_multiple = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let range_multiple_end = ClassUnicodeRange { start: 'c', end: 'd' };",
          "    let class_unicode_multiple = ClassUnicode::new(vec![range_multiple, range_multiple_end]);",
          "    assert_eq!(class_unicode_multiple.literal(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let range2 = ClassUnicodeRange { start: 'b', end: 'c' };",
          "    let class_unicode = ClassUnicode::new(vec![range1, range2]);",
          "    class_unicode.literal();",
          "}"
        ],
        "oracle": [
          "    let range1 = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let range2 = ClassUnicodeRange { start: 'b', end: 'c' };",
          "    let class_unicode = ClassUnicode::new(vec![range1, range2]);",
          "    assert_eq!(class_unicode.literal(), None);"
        ],
        "code": [
          "{",
          "    let range1 = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let range2 = ClassUnicodeRange { start: 'b', end: 'c' };",
          "    let class_unicode = ClassUnicode::new(vec![range1, range2]);",
          "    class_unicode.literal();",
          "    let range1 = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let range2 = ClassUnicodeRange { start: 'b', end: 'c' };",
          "    let class_unicode = ClassUnicode::new(vec![range1, range2]);",
          "    assert_eq!(class_unicode.literal(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    class_unicode.literal();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_unicode.literal(), None);",
          "    class_unicode.push(ClassUnicodeRange { start: 'a', end: 'z' });",
          "    assert_eq!(class_unicode.literal(), None);",
          "    class_unicode.push(ClassUnicodeRange { start: 'b', end: 'b' });",
          "    assert_eq!(class_unicode.literal(), None);",
          "    class_unicode.push(ClassUnicodeRange { start: 'c', end: 'd' });",
          "    assert_eq!(class_unicode.literal(), None);"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    class_unicode.literal();",
          "    assert_eq!(class_unicode.literal(), None);",
          "    class_unicode.push(ClassUnicodeRange { start: 'a', end: 'z' });",
          "    assert_eq!(class_unicode.literal(), None);",
          "    class_unicode.push(ClassUnicodeRange { start: 'b', end: 'b' });",
          "    assert_eq!(class_unicode.literal(), None);",
          "    class_unicode.push(ClassUnicodeRange { start: 'c', end: 'd' });",
          "    assert_eq!(class_unicode.literal(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]