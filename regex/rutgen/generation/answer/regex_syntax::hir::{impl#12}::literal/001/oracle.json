[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "",
          "    let _result = class_unicode.literal();",
          "}"
        ],
        "oracle": [
          "    let range = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    assert_eq!(class_unicode.literal(), Some(b\"a\".to_vec()));",
          "    ",
          "    let range_empty = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let class_unicode_empty = ClassUnicode::new(vec![range_empty]);",
          "    assert_eq!(class_unicode_empty.literal(), None);",
          "    ",
          "    let range_multiple = vec![ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'b', end: 'b' }];",
          "    let class_unicode_multiple = ClassUnicode::new(range_multiple);",
          "    assert_eq!(class_unicode_multiple.literal(), None);"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "",
          "    let _result = class_unicode.literal();",
          "    let range = ClassUnicodeRange { start: 'a', end: 'a' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    assert_eq!(class_unicode.literal(), Some(b\"a\".to_vec()));",
          "    ",
          "    let range_empty = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let class_unicode_empty = ClassUnicode::new(vec![range_empty]);",
          "    assert_eq!(class_unicode_empty.literal(), None);",
          "    ",
          "    let range_multiple = vec![ClassUnicodeRange { start: 'a', end: 'a' }, ClassUnicodeRange { start: 'b', end: 'b' }];",
          "    let class_unicode_multiple = ClassUnicode::new(range_multiple);",
          "    assert_eq!(class_unicode_multiple.literal(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: '0', end: '1' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "",
          "    let _result = class_unicode.literal();",
          "}"
        ],
        "oracle": [
          "    let range = ClassUnicodeRange { start: 'A', end: 'A' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _result = class_unicode.literal();",
          "    assert_eq!(_result, Some(vec![65])); // ASCII value of 'A'",
          "    ",
          "    let range = ClassUnicodeRange { start: '1', end: '2' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _result = class_unicode.literal();",
          "    assert_eq!(_result, None); // '1' to '2' range should return None",
          "    ",
          "    let range = ClassUnicodeRange { start: 'a', end: 'c' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _result = class_unicode.literal();",
          "    assert_eq!(_result, None); // range includes multiple code points, should return None",
          "    ",
          "    let range = ClassUnicodeRange { start: 'Z', end: 'Z' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _result = class_unicode.literal();",
          "    assert_eq!(_result, Some(vec![90])); // ASCII value of 'Z'"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: '0', end: '1' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "",
          "    let _result = class_unicode.literal();",
          "    let range = ClassUnicodeRange { start: 'A', end: 'A' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _result = class_unicode.literal();",
          "    assert_eq!(_result, Some(vec![65])); // ASCII value of 'A'",
          "    ",
          "    let range = ClassUnicodeRange { start: '1', end: '2' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _result = class_unicode.literal();",
          "    assert_eq!(_result, None); // '1' to '2' range should return None",
          "    ",
          "    let range = ClassUnicodeRange { start: 'a', end: 'c' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _result = class_unicode.literal();",
          "    assert_eq!(_result, None); // range includes multiple code points, should return None",
          "    ",
          "    let range = ClassUnicodeRange { start: 'Z', end: 'Z' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _result = class_unicode.literal();",
          "    assert_eq!(_result, Some(vec![90])); // ASCII value of 'Z'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]