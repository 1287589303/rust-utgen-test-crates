[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"abc def ghi\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let haystack = \"abc def ghi\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"abc def ghi abc jkl\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2);",
          "    assert!(result > 0);",
          "    assert!(result <= haystack.matches(\"abc\").count());",
          "    assert_eq!(result, capture_matches.it.count());",
          "    assert_eq!(capture_matches.count(), capture_matches.count());"
        ],
        "code": [
          "{",
          "    let haystack = \"abc def ghi abc jkl\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "    assert_eq!(result, 2);",
          "    assert!(result > 0);",
          "    assert!(result <= haystack.matches(\"abc\").count());",
          "    assert_eq!(result, capture_matches.it.count());",
          "    assert_eq!(capture_matches.count(), capture_matches.count());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"xyz\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert!(result <= 1);",
          "    assert!(capture_matches.it.count() >= 0);",
          "    assert!(capture_matches.haystack.len() == 3);",
          "    assert!(it.total_captures() == 0);",
          "    assert!(result.is_instance_of::<usize>());",
          "    assert!(capture_matches.count() == capture_matches.it.count());"
        ],
        "code": [
          "{",
          "    let haystack = \"xyz\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "    assert_eq!(result, 0);",
          "    assert!(result <= 1);",
          "    assert!(capture_matches.it.count() >= 0);",
          "    assert!(capture_matches.haystack.len() == 3);",
          "    assert!(it.total_captures() == 0);",
          "    assert!(result.is_instance_of::<usize>());",
          "    assert!(capture_matches.count() == capture_matches.it.count());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "}"
        ],
        "oracle": [
          "    let haystack = \"\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let haystack = \"\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "    let haystack = \"\";",
          "    let it = meta::CapturesMatches::new(haystack, \"abc\");",
          "    let capture_matches = CaptureMatches { haystack, it };",
          "    let result = capture_matches.count();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]