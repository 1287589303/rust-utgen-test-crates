[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done(); // ensure we're at the start of the pattern",
          "    let result = parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.is_lookaround_prefix(), false);",
          "    parser.bump_if(\"?=\");",
          "    assert_eq!(parser.bump_if(\"?=\"), false);",
          "    parser.bump_if(\"?!\");",
          "    assert_eq!(parser.bump_if(\"?!\"), false);",
          "    parser.bump_if(\"?<=\");",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done(); // ensure we're at the start of the pattern",
          "    let result = parser.is_lookaround_prefix();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.is_lookaround_prefix(), false);",
          "    parser.bump_if(\"?=\");",
          "    assert_eq!(parser.bump_if(\"?=\"), false);",
          "    parser.bump_if(\"?!\");",
          "    assert_eq!(parser.bump_if(\"?!\"), false);",
          "    parser.bump_if(\"?<=\");",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"123abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done(); // ensure we're at the start of the pattern",
          "    let result = parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"123abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done();",
          "    assert_eq!(parser.is_lookaround_prefix(), false);",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.next_capture_index().unwrap(), 0);",
          "    assert_eq!(parser.flags().case_insensitive, false);",
          "    assert_eq!(parser.char().to_string(), \"1\");",
          "    assert_eq!(parser.bump(), true);",
          "    assert_eq!(parser.peek(), Some('2'));",
          "    assert_eq!(parser.peek_space(), None);",
          "    assert!(parser.bump_if(\"?=\") == false);",
          "    assert!(parser.bump_if(\"?!\") == false);",
          "    assert!(parser.bump_if(\"?<=\") == false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"123abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done(); // ensure we're at the start of the pattern",
          "    let result = parser.is_lookaround_prefix();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"123abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done();",
          "    assert_eq!(parser.is_lookaround_prefix(), false);",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.next_capture_index().unwrap(), 0);",
          "    assert_eq!(parser.flags().case_insensitive, false);",
          "    assert_eq!(parser.char().to_string(), \"1\");",
          "    assert_eq!(parser.bump(), true);",
          "    assert_eq!(parser.peek(), Some('2'));",
          "    assert_eq!(parser.peek_space(), None);",
          "    assert!(parser.bump_if(\"?=\") == false);",
          "    assert!(parser.bump_if(\"?!\") == false);",
          "    assert!(parser.bump_if(\"?<=\") == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"xyz hello\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done(); // ensure we're at the start of the pattern",
          "    let result = parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"xyz hello\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done(); // ensure we're at the start of the pattern",
          "    let result = parser.is_lookaround_prefix();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"a\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done(); // ensure we're at the start of the pattern",
          "    let result = parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(!parser.bump_if(\"?=\"));",
          "    assert!(!parser.bump_if(\"?!\"));",
          "    assert!(!parser.bump_if(\"?<=\"));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 5,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"a\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_done(); // ensure we're at the start of the pattern",
          "    let result = parser.is_lookaround_prefix();",
          "    assert_eq!(result, false);",
          "    assert!(!parser.bump_if(\"?=\"));",
          "    assert!(!parser.bump_if(\"?!\"));",
          "    assert!(!parser.bump_if(\"?<=\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]