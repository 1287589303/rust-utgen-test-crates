[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"?!abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_if(\"?=\"), false);",
          "    assert_eq!(parser.bump_if(\"?!\"), true);",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "    assert_eq!(parser.bump_if(\"?<!\"), false);",
          "    assert_eq!(parser.is_lookaround_prefix(), true);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"?!abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "    assert_eq!(parser.bump_if(\"?=\"), false);",
          "    assert_eq!(parser.bump_if(\"?!\"), true);",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "    assert_eq!(parser.bump_if(\"?<!\"), false);",
          "    assert_eq!(parser.is_lookaround_prefix(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"?!\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_if(\"?=\"), false);",
          "    assert_eq!(parser.bump_if(\"?!\"), true);",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "    assert_eq!(parser.bump_if(\"?<!\"), false);",
          "    assert!(parser.is_lookaround_prefix());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"?!\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "    assert_eq!(parser.bump_if(\"?=\"), false);",
          "    assert_eq!(parser.bump_if(\"?!\"), true);",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "    assert_eq!(parser.bump_if(\"?<!\"), false);",
          "    assert!(parser.is_lookaround_prefix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"?<=\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_if(\"?=\"), false);",
          "    assert_eq!(parser.bump_if(\"?!\"), true);",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "    assert_eq!(parser.bump_if(\"?<!\"), false);",
          "    assert!(parser.is_lookaround_prefix());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"?<=\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "    assert_eq!(parser.bump_if(\"?=\"), false);",
          "    assert_eq!(parser.bump_if(\"?!\"), true);",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "    assert_eq!(parser.bump_if(\"?<!\"), false);",
          "    assert!(parser.is_lookaround_prefix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"?<!xyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert!(!parser.bump_if(\"?=\"));",
          "    assert!(parser.bump_if(\"?!\"));",
          "    assert!(!parser.bump_if(\"?<=\"));",
          "    assert!(!parser.bump_if(\"?<!\"));",
          "    assert!(parser.is_lookaround_prefix());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"?<!xyz\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "    assert!(!parser.bump_if(\"?=\"));",
          "    assert!(parser.bump_if(\"?!\"));",
          "    assert!(!parser.bump_if(\"?<=\"));",
          "    assert!(!parser.bump_if(\"?<!\"));",
          "    assert!(parser.is_lookaround_prefix());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]