[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"(?=abc)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.bump_if(\"?=\"));",
          "    assert!(!parser.bump_if(\"?!\"));",
          "    assert!(!parser.bump_if(\"?<=\"));",
          "    assert!(!parser.bump_if(\"?<!\"));",
          "    assert!(parser.is_lookaround_prefix());",
          "    assert_eq!(parser.next_capture_index().unwrap(), 0);",
          "    assert_eq!(parser.flags().case_insensitive, false);",
          "    assert!(parser.char().is_alphabetic());",
          "    assert!(!parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"(?=abc)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "    assert!(parser.bump_if(\"?=\"));",
          "    assert!(!parser.bump_if(\"?!\"));",
          "    assert!(!parser.bump_if(\"?<=\"));",
          "    assert!(!parser.bump_if(\"?<!\"));",
          "    assert!(parser.is_lookaround_prefix());",
          "    assert_eq!(parser.next_capture_index().unwrap(), 0);",
          "    assert_eq!(parser.flags().case_insensitive, false);",
          "    assert!(parser.char().is_alphabetic());",
          "    assert!(!parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"(?!abc)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.bump_if(\"?=\") == false);",
          "    assert!(parser.bump_if(\"?!\") == true);",
          "    assert!(parser.bump_if(\"?<=\") == false);",
          "    assert!(parser.bump_if(\"?<!\") == false);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"(?!abc)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "    assert!(parser.bump_if(\"?=\") == false);",
          "    assert!(parser.bump_if(\"?!\") == true);",
          "    assert!(parser.bump_if(\"?<=\") == false);",
          "    assert!(parser.bump_if(\"?<!\") == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"(?<=abc)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_if(\"?=\"), true);",
          "    assert_eq!(parser.bump_if(\"?!\"), false);",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "    assert_eq!(parser.bump_if(\"?<!\"), false);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"(?<=abc)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "    assert_eq!(parser.bump_if(\"?=\"), true);",
          "    assert_eq!(parser.bump_if(\"?!\"), false);",
          "    assert_eq!(parser.bump_if(\"?<=\"), false);",
          "    assert_eq!(parser.bump_if(\"?<!\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"(?<!abc)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.bump_if(\"?=\") == false);",
          "    assert!(parser.bump_if(\"?!\") == false);",
          "    assert!(parser.bump_if(\"?<=\") == false);",
          "    assert!(parser.bump_if(\"?<!\") == true);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"(?<!abc)\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.is_lookaround_prefix();",
          "    assert!(parser.bump_if(\"?=\") == false);",
          "    assert!(parser.bump_if(\"?!\") == false);",
          "    assert!(parser.bump_if(\"?<=\") == false);",
          "    assert!(parser.bump_if(\"?<!\") == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]