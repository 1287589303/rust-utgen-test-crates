[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: u32,",
          "        upper: u32,",
          "    }",
          "    ",
          "    impl TestInterval {",
          "        fn new(lower: u32, upper: u32) -> Self {",
          "            Self { lower, upper }",
          "        }",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = u32;",
          "        ",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "        ",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "        ",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "        ",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            false // Simplified for the test",
          "        }",
          "        ",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "    }",
          "",
          "    let a = TestInterval::new(5, 10);",
          "    let b = TestInterval::new(10, 15);",
          "    a.is_contiguous(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(a.is_contiguous(&b) == true); // overlapping case",
          "    let c = TestInterval::new(11, 15);",
          "    assert!(a.is_contiguous(&c) == false); // non-contiguous case",
          "    let d = TestInterval::new(4, 5);",
          "    assert!(a.is_contiguous(&d) == true); // adjacent case",
          "    let e = TestInterval::new(5, 10);",
          "    assert!(a.is_contiguous(&e) == true); // identical case",
          "    let f = TestInterval::new(12, 15);",
          "    assert!(a.is_contiguous(&f) == false); // separate case",
          "    let g = TestInterval::new(10, 10);",
          "    assert!(a.is_contiguous(&g) == true); // single point case",
          "    let h = TestInterval::new(5, 5);",
          "    assert!(a.is_contiguous(&h) == true); // different single point case",
          "    let i = TestInterval::new(3, 6);",
          "    assert!(a.is_contiguous(&i) == true); // nested case",
          "    let j = TestInterval::new(6, 9);",
          "    assert!(a.is_contiguous(&j) == true); // overhang case",
          "    let k = TestInterval::new(3, 4);",
          "    assert!(a.is_contiguous(&k) == false); // below lower bound case",
          "    let l = TestInterval::new(15, 20);",
          "    assert!(a.is_contiguous(&l) == false); // far apart case"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: u32,",
          "        upper: u32,",
          "    }",
          "    ",
          "    impl TestInterval {",
          "        fn new(lower: u32, upper: u32) -> Self {",
          "            Self { lower, upper }",
          "        }",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = u32;",
          "        ",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "        ",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "        ",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "        ",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            false // Simplified for the test",
          "        }",
          "        ",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "    }",
          "",
          "    let a = TestInterval::new(5, 10);",
          "    let b = TestInterval::new(10, 15);",
          "    a.is_contiguous(&b);",
          "    assert!(a.is_contiguous(&b) == true); // overlapping case",
          "    let c = TestInterval::new(11, 15);",
          "    assert!(a.is_contiguous(&c) == false); // non-contiguous case",
          "    let d = TestInterval::new(4, 5);",
          "    assert!(a.is_contiguous(&d) == true); // adjacent case",
          "    let e = TestInterval::new(5, 10);",
          "    assert!(a.is_contiguous(&e) == true); // identical case",
          "    let f = TestInterval::new(12, 15);",
          "    assert!(a.is_contiguous(&f) == false); // separate case",
          "    let g = TestInterval::new(10, 10);",
          "    assert!(a.is_contiguous(&g) == true); // single point case",
          "    let h = TestInterval::new(5, 5);",
          "    assert!(a.is_contiguous(&h) == true); // different single point case",
          "    let i = TestInterval::new(3, 6);",
          "    assert!(a.is_contiguous(&i) == true); // nested case",
          "    let j = TestInterval::new(6, 9);",
          "    assert!(a.is_contiguous(&j) == true); // overhang case",
          "    let k = TestInterval::new(3, 4);",
          "    assert!(a.is_contiguous(&k) == false); // below lower bound case",
          "    let l = TestInterval::new(15, 20);",
          "    assert!(a.is_contiguous(&l) == false); // far apart case",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: u32,",
          "        upper: u32,",
          "    }",
          "    ",
          "    impl TestInterval {",
          "        fn new(lower: u32, upper: u32) -> Self {",
          "            Self { lower, upper }",
          "        }",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = u32;",
          "        ",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "        ",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "        ",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "        ",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            false",
          "        }",
          "        ",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "    }",
          "",
          "    let a = TestInterval::new(5, 10);",
          "    let b = TestInterval::new(11, 15);",
          "    a.is_contiguous(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(a.is_contiguous(&b) == false); // Non-contiguous intervals (5-10, 11-15)",
          "    ",
          "    let c = TestInterval::new(10, 15);",
          "    assert!(a.is_contiguous(&c) == true); // Contiguous as they touch at 10",
          "    ",
          "    let d = TestInterval::new(5, 5);",
          "    assert!(a.is_contiguous(&d) == true); // Contiguous as they touch at 5",
          "    ",
          "    let e = TestInterval::new(6, 10);",
          "    assert!(a.is_contiguous(&e) == true); // Overlapping intervals (5-10, 6-10)",
          "    ",
          "    let f = TestInterval::new(4, 5);",
          "    assert!(a.is_contiguous(&f) == true); // Contiguous intervals (5-10, 4-5)",
          "    ",
          "    let g = TestInterval::new(10, 10);",
          "    assert!(a.is_contiguous(&g) == true); // Contiguous as they touch at 10",
          "    ",
          "    let h = TestInterval::new(14, 20);",
          "    assert!(b.is_contiguous(&h) == true); // Contiguous intervals (11-15, 14-20)",
          "    ",
          "    let i = TestInterval::new(1, 4);",
          "    assert!(a.is_contiguous(&i) == false); // Non-contiguous (5-10, 1-4)"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: u32,",
          "        upper: u32,",
          "    }",
          "    ",
          "    impl TestInterval {",
          "        fn new(lower: u32, upper: u32) -> Self {",
          "            Self { lower, upper }",
          "        }",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = u32;",
          "        ",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "        ",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "        ",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "        ",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            false",
          "        }",
          "        ",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            self.lower >= other.lower && self.upper <= other.upper",
          "        }",
          "    }",
          "",
          "    let a = TestInterval::new(5, 10);",
          "    let b = TestInterval::new(11, 15);",
          "    a.is_contiguous(&b);",
          "    assert!(a.is_contiguous(&b) == false); // Non-contiguous intervals (5-10, 11-15)",
          "    ",
          "    let c = TestInterval::new(10, 15);",
          "    assert!(a.is_contiguous(&c) == true); // Contiguous as they touch at 10",
          "    ",
          "    let d = TestInterval::new(5, 5);",
          "    assert!(a.is_contiguous(&d) == true); // Contiguous as they touch at 5",
          "    ",
          "    let e = TestInterval::new(6, 10);",
          "    assert!(a.is_contiguous(&e) == true); // Overlapping intervals (5-10, 6-10)",
          "    ",
          "    let f = TestInterval::new(4, 5);",
          "    assert!(a.is_contiguous(&f) == true); // Contiguous intervals (5-10, 4-5)",
          "    ",
          "    let g = TestInterval::new(10, 10);",
          "    assert!(a.is_contiguous(&g) == true); // Contiguous as they touch at 10",
          "    ",
          "    let h = TestInterval::new(14, 20);",
          "    assert!(b.is_contiguous(&h) == true); // Contiguous intervals (11-15, 14-20)",
          "    ",
          "    let i = TestInterval::new(1, 4);",
          "    assert!(a.is_contiguous(&i) == false); // Non-contiguous (5-10, 1-4)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: u32,",
          "        upper: u32,",
          "    }",
          "    ",
          "    impl TestInterval {",
          "        fn new(lower: u32, upper: u32) -> Self {",
          "            Self { lower, upper }",
          "        }",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = u32;",
          "        ",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "        ",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "        ",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "        ",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            true // Simplified for the test",
          "        }",
          "        ",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let a = TestInterval::new(5, 10);",
          "    let b = TestInterval::new(12, 15);",
          "    a.is_contiguous(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(a.is_contiguous(&b) == false);",
          "    let c = TestInterval::new(10, 15);",
          "    assert!(a.is_contiguous(&c) == true);",
          "    let d = TestInterval::new(0, 5);",
          "    assert!(a.is_contiguous(&d) == true);",
          "    let e = TestInterval::new(5, 5);",
          "    assert!(a.is_contiguous(&e) == true);",
          "    let f = TestInterval::new(15, 20);",
          "    assert!(a.is_contiguous(&f) == false);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct TestInterval {",
          "        lower: u32,",
          "        upper: u32,",
          "    }",
          "    ",
          "    impl TestInterval {",
          "        fn new(lower: u32, upper: u32) -> Self {",
          "            Self { lower, upper }",
          "        }",
          "    }",
          "    ",
          "    impl Interval for TestInterval {",
          "        type Bound = u32;",
          "        ",
          "        fn lower(&self) -> Self::Bound {",
          "            self.lower",
          "        }",
          "        ",
          "        fn upper(&self) -> Self::Bound {",
          "            self.upper",
          "        }",
          "",
          "        fn set_lower(&mut self, bound: Self::Bound) {",
          "            self.lower = bound;",
          "        }",
          "        ",
          "        fn set_upper(&mut self, bound: Self::Bound) {",
          "            self.upper = bound;",
          "        }",
          "        ",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "",
          "        fn is_intersection_empty(&self, other: &Self) -> bool {",
          "            true // Simplified for the test",
          "        }",
          "        ",
          "        fn is_subset(&self, other: &Self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let a = TestInterval::new(5, 10);",
          "    let b = TestInterval::new(12, 15);",
          "    a.is_contiguous(&b);",
          "    assert!(a.is_contiguous(&b) == false);",
          "    let c = TestInterval::new(10, 15);",
          "    assert!(a.is_contiguous(&c) == true);",
          "    let d = TestInterval::new(0, 5);",
          "    assert!(a.is_contiguous(&d) == true);",
          "    let e = TestInterval::new(5, 5);",
          "    assert!(a.is_contiguous(&e) == true);",
          "    let f = TestInterval::new(15, 20);",
          "    assert!(a.is_contiguous(&f) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]