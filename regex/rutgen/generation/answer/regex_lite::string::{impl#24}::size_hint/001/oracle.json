[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN { splits, limit: 2 };",
          "    let hint = split_n.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (2, Some(2)));"
        ],
        "code": [
          "{",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN { splits, limit: 2 };",
          "    let hint = split_n.size_hint();",
          "    assert_eq!(hint, (2, Some(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN { splits, limit: 2 };",
          "    let hint = split_n.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (0, Some(0)));"
        ],
        "code": [
          "{",
          "    let haystack = \"\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN { splits, limit: 2 };",
          "    let hint = split_n.size_hint();",
          "    assert_eq!(hint, (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN { splits, limit: 0 };",
          "    let hint = split_n.size_hint();",
          "}"
        ],
        "oracle": [
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split { haystack, finder, last: 0 };",
          "    let split_n = SplitN { splits, limit: 0 };",
          "    let hint = split_n.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));"
        ],
        "code": [
          "{",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN { splits, limit: 0 };",
          "    let hint = split_n.size_hint();",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split { haystack, finder, last: 0 };",
          "    let split_n = SplitN { splits, limit: 0 };",
          "    let hint = split_n.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN { splits, limit: 1 };",
          "    let hint = split_n.size_hint();",
          "}"
        ],
        "oracle": [
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split { haystack, finder, last: 0 };",
          "    let split_n = SplitN { splits, limit: 1 };",
          "    let hint = split_n.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));"
        ],
        "code": [
          "{",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN { splits, limit: 1 };",
          "    let hint = split_n.size_hint();",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split { haystack, finder, last: 0 };",
          "    let split_n = SplitN { splits, limit: 1 };",
          "    let hint = split_n.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN {",
          "        splits,",
          "        limit: std::usize::MAX,",
          "    };",
          "    let hint = split_n.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (3, Some(3)));"
        ],
        "code": [
          "{",
          "    let haystack = \"abc|def|ghi\";",
          "    let finder = Matches::new(haystack, \"|\");",
          "    let splits = Split {",
          "        haystack,",
          "        finder,",
          "        last: 0,",
          "    };",
          "    let split_n = SplitN {",
          "        splits,",
          "        limit: std::usize::MAX,",
          "    };",
          "    let hint = split_n.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]