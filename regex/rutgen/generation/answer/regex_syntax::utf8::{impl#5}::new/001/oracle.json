[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = '\\u{0000}';",
          "    let end = '\\u{10FFFF}';",
          "    let result = Utf8Sequences::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 0);",
          "    assert_eq!(result.range_stack[0].end, 1114111);"
        ],
        "code": [
          "{",
          "    let start = '\\u{0000}';",
          "    let end = '\\u{10FFFF}';",
          "    let result = Utf8Sequences::new(start, end);",
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 0);",
          "    assert_eq!(result.range_stack[0].end, 1114111);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = '\\u{0041}'; // 'A'",
          "    let end = '\\u{0041}';   // 'A'",
          "    let result = Utf8Sequences::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 65); // ASCII value of 'A'",
          "    assert_eq!(result.range_stack[0].end, 65);   // ASCII value of 'A'"
        ],
        "code": [
          "{",
          "    let start = '\\u{0041}'; // 'A'",
          "    let end = '\\u{0041}';   // 'A'",
          "    let result = Utf8Sequences::new(start, end);",
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 65); // ASCII value of 'A'",
          "    assert_eq!(result.range_stack[0].end, 65);   // ASCII value of 'A'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = '\\u{0030}'; // '0'",
          "    let end = '\\u{0035}';   // '5'",
          "    let result = Utf8Sequences::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 48); // 0 in u32",
          "    assert_eq!(result.range_stack[0].end, 53);   // 5 in u32",
          "    assert!(result.range_stack[0].start < result.range_stack[0].end);"
        ],
        "code": [
          "{",
          "    let start = '\\u{0030}'; // '0'",
          "    let end = '\\u{0035}';   // '5'",
          "    let result = Utf8Sequences::new(start, end);",
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 48); // 0 in u32",
          "    assert_eq!(result.range_stack[0].end, 53);   // 5 in u32",
          "    assert!(result.range_stack[0].start < result.range_stack[0].end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = '\\u{0061}'; // 'a'",
          "    let end = '\\u{007A}';   // 'z'",
          "    let result = Utf8Sequences::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 97); // Unicode value for 'a'",
          "    assert_eq!(result.range_stack[0].end, 122);  // Unicode value for 'z'",
          "    assert_eq!(result.range_stack[0], ScalarRange { start: 97, end: 122 });"
        ],
        "code": [
          "{",
          "    let start = '\\u{0061}'; // 'a'",
          "    let end = '\\u{007A}';   // 'z'",
          "    let result = Utf8Sequences::new(start, end);",
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 97); // Unicode value for 'a'",
          "    assert_eq!(result.range_stack[0].end, 122);  // Unicode value for 'z'",
          "    assert_eq!(result.range_stack[0], ScalarRange { start: 97, end: 122 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = '\\u{FFFF}';",
          "    let end = '\\u{10FFFF}';",
          "    let result = Utf8Sequences::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 0xFFFF);",
          "    assert_eq!(result.range_stack[0].end, 0x10FFFF);"
        ],
        "code": [
          "{",
          "    let start = '\\u{FFFF}';",
          "    let end = '\\u{10FFFF}';",
          "    let result = Utf8Sequences::new(start, end);",
          "    assert_eq!(result.range_stack.len(), 1);",
          "    assert_eq!(result.range_stack[0].start, 0xFFFF);",
          "    assert_eq!(result.range_stack[0].end, 0x10FFFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = '\\u{0000}';",
          "    let end = '\\u{0000}';",
          "    let result = Utf8Sequences::new(start, end);",
          "}"
        ],
        "oracle": [
          "    let expected_range_stack = vec![ScalarRange { start: 0, end: 0 }];",
          "    let result = Utf8Sequences::new(start, end);",
          "    assert_eq!(result.range_stack, expected_range_stack);"
        ],
        "code": [
          "{",
          "    let start = '\\u{0000}';",
          "    let end = '\\u{0000}';",
          "    let result = Utf8Sequences::new(start, end);",
          "    let expected_range_stack = vec![ScalarRange { start: 0, end: 0 }];",
          "    let result = Utf8Sequences::new(start, end);",
          "    assert_eq!(result.range_stack, expected_range_stack);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]