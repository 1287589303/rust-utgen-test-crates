[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id_1);",
          "    self_set.add(state_id_2);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id_1);",
          "    other_set.add(state_id_3);",
          "    ",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    dest_set.len() == 1",
          "    dest_set.is_empty() == false",
          "    dest_set.ids.borrow().contains(&state_id_2) == true",
          "    dest_set.ids.borrow().contains(&state_id_1) == false",
          "    dest_set.ids.borrow().contains(&state_id_3) == false"
        ],
        "code": [
          "{",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id_1);",
          "    self_set.add(state_id_2);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id_1);",
          "    other_set.add(state_id_3);",
          "    ",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    dest_set.len() == 1",
          "    dest_set.is_empty() == false",
          "    dest_set.ids.borrow().contains(&state_id_2) == true",
          "    dest_set.ids.borrow().contains(&state_id_1) == false",
          "    dest_set.ids.borrow().contains(&state_id_3) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id_1);",
          "    self_set.add(state_id_2);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id_1);",
          "    other_set.add(state_id_2);",
          "",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(dest_set.len(), 0);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert!(dest_set.len() == 0);",
          "    assert!(self_set.len() == 2);",
          "    assert!(other_set.len() == 2);",
          "    assert_eq!(self_set.min(), StateID(SmallIndex(1)));",
          "    assert_eq!(other_set.min(), StateID(SmallIndex(1)));"
        ],
        "code": [
          "{",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id_1);",
          "    self_set.add(state_id_2);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id_1);",
          "    other_set.add(state_id_2);",
          "",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(dest_set.len(), 0);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert!(dest_set.len() == 0);",
          "    assert!(self_set.len() == 2);",
          "    assert!(other_set.len() == 2);",
          "    assert_eq!(self_set.min(), StateID(SmallIndex(1)));",
          "    assert_eq!(other_set.min(), StateID(SmallIndex(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id_1);",
          "    self_set.add(state_id_2);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id_1);",
          "    other_set.add(state_id_1); // Multiple entries of same element",
          "",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&state_id_2));",
          "    assert!(!dest_set.ids.borrow().contains(&state_id_1));",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(self_set.len() == 2);",
          "    assert!(other_set.len() == 2);",
          "    assert_eq!(self_set.is_empty(), false);",
          "    assert_eq!(other_set.is_empty(), false);",
          "    assert_eq!(state_id_1, state_id_1);",
          "    assert!(dest_set.ids.borrow().len() == 1);",
          "    assert!(dest_set.ids.borrow().contains(&state_id_2));"
        ],
        "code": [
          "{",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id_1);",
          "    self_set.add(state_id_2);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id_1);",
          "    other_set.add(state_id_1); // Multiple entries of same element",
          "",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&state_id_2));",
          "    assert!(!dest_set.ids.borrow().contains(&state_id_1));",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(self_set.len() == 2);",
          "    assert!(other_set.len() == 2);",
          "    assert_eq!(self_set.is_empty(), false);",
          "    assert_eq!(other_set.is_empty(), false);",
          "    assert_eq!(state_id_1, state_id_1);",
          "    assert!(dest_set.ids.borrow().len() == 1);",
          "    assert!(dest_set.ids.borrow().contains(&state_id_2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]