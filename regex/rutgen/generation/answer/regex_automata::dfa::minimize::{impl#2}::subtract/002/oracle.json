[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dest = StateSet::empty();",
          "    let mut self_set = StateSet::empty();",
          "    ",
          "    for id in 1..5 {",
          "        self_set.add(StateID(id));",
          "    }",
          "",
          "    let other = StateSet::empty();",
          "",
          "    self_set.subtract(&other, &mut dest);",
          "}"
        ],
        "oracle": [
          "    let mut dest = StateSet::empty();",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(StateID(1));",
          "    self_set.add(StateID(2));",
          "    self_set.add(StateID(3));",
          "    self_set.add(StateID(4));",
          "    let other = StateSet::empty();",
          "    self_set.subtract(&other, &mut dest);",
          "    assert!(dest.len() == 4);",
          "    assert!(dest.contains(StateID(1)));",
          "    assert!(dest.contains(StateID(2)));",
          "    assert!(dest.contains(StateID(3)));",
          "    assert!(dest.contains(StateID(4)));"
        ],
        "code": [
          "{",
          "    let mut dest = StateSet::empty();",
          "    let mut self_set = StateSet::empty();",
          "    ",
          "    for id in 1..5 {",
          "        self_set.add(StateID(id));",
          "    }",
          "",
          "    let other = StateSet::empty();",
          "",
          "    self_set.subtract(&other, &mut dest);",
          "    let mut dest = StateSet::empty();",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(StateID(1));",
          "    self_set.add(StateID(2));",
          "    self_set.add(StateID(3));",
          "    self_set.add(StateID(4));",
          "    let other = StateSet::empty();",
          "    self_set.subtract(&other, &mut dest);",
          "    assert!(dest.len() == 4);",
          "    assert!(dest.contains(StateID(1)));",
          "    assert!(dest.contains(StateID(2)));",
          "    assert!(dest.contains(StateID(3)));",
          "    assert!(dest.contains(StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dest = StateSet::empty();",
          "    dest.add(StateID(99));  // Initially adding an arbitrary element to dest",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    ",
          "    for id in 1..5 {",
          "        self_set.add(StateID(id));",
          "    }",
          "",
          "    let other = StateSet::empty();",
          "",
          "    self_set.subtract(&other, &mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 4);",
          "    assert!(dest.is_empty() == false);",
          "    assert!(dest.iter(|id| id).collect::<Vec<_>>() == vec![StateID(1), StateID(2), StateID(3), StateID(4)]);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other.is_empty());",
          "    assert!(self_set.len() == 4);",
          "    assert!(dest.ids.borrow().contains(&StateID(1)));",
          "    assert!(dest.ids.borrow().contains(&StateID(2)));",
          "    assert!(dest.ids.borrow().contains(&StateID(3)));",
          "    assert!(dest.ids.borrow().contains(&StateID(4)));"
        ],
        "code": [
          "{",
          "    let mut dest = StateSet::empty();",
          "    dest.add(StateID(99));  // Initially adding an arbitrary element to dest",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    ",
          "    for id in 1..5 {",
          "        self_set.add(StateID(id));",
          "    }",
          "",
          "    let other = StateSet::empty();",
          "",
          "    self_set.subtract(&other, &mut dest);",
          "    assert_eq!(dest.len(), 4);",
          "    assert!(dest.is_empty() == false);",
          "    assert!(dest.iter(|id| id).collect::<Vec<_>>() == vec![StateID(1), StateID(2), StateID(3), StateID(4)]);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other.is_empty());",
          "    assert!(self_set.len() == 4);",
          "    assert!(dest.ids.borrow().contains(&StateID(1)));",
          "    assert!(dest.ids.borrow().contains(&StateID(2)));",
          "    assert!(dest.ids.borrow().contains(&StateID(3)));",
          "    assert!(dest.ids.borrow().contains(&StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]