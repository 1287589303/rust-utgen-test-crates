[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(1));",
          "    self_set.add(StateID(2));",
          "    self_set.add(StateID(3));",
          "",
          "    other_set.add(StateID(2));",
          "    other_set.add(StateID(4));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 2);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(2)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(4)));"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(1));",
          "    self_set.add(StateID(2));",
          "    self_set.add(StateID(3));",
          "",
          "    other_set.add(StateID(2));",
          "    other_set.add(StateID(4));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 2);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(2)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(5));",
          "    self_set.add(StateID(6));",
          "",
          "    other_set.add(StateID(1));",
          "    other_set.add(StateID(2));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    dest_set.len() == 2",
          "    dest_set.is_empty() == false",
          "    dest_set.iter(|id| assert!(id == StateID(5) || id == StateID(6)));",
          "    other_set.len() == 2",
          "    self_set.len() == 2",
          "    assert!(self_set.len() != other_set.len());",
          "    dest_set.clear();",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 2);",
          "    dest_set.iter(|id| assert!(id == StateID(5) || id == StateID(6)));"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(5));",
          "    self_set.add(StateID(6));",
          "",
          "    other_set.add(StateID(1));",
          "    other_set.add(StateID(2));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    dest_set.len() == 2",
          "    dest_set.is_empty() == false",
          "    dest_set.iter(|id| assert!(id == StateID(5) || id == StateID(6)));",
          "    other_set.len() == 2",
          "    self_set.len() == 2",
          "    assert!(self_set.len() != other_set.len());",
          "    dest_set.clear();",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 2);",
          "    dest_set.iter(|id| assert!(id == StateID(5) || id == StateID(6)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(10));",
          "    self_set.add(StateID(20));",
          "",
          "    other_set.add(StateID(20));",
          "    other_set.add(StateID(30));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(10)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(20)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(30)));",
          "    dest_set.clear();",
          "    self_set.add(StateID(30));",
          "    other_set.add(StateID(10));",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(30)));",
          "    dest_set.clear();",
          "    self_set.add(StateID(20));",
          "    self_set.add(StateID(30));",
          "    other_set.add(StateID(30));",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(20)));",
          "    dest_set.clear();",
          "    self_set.add(StateID(10));",
          "    self_set.add(StateID(30));",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 2);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(10)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(30)));"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(10));",
          "    self_set.add(StateID(20));",
          "",
          "    other_set.add(StateID(20));",
          "    other_set.add(StateID(30));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(10)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(20)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(30)));",
          "    dest_set.clear();",
          "    self_set.add(StateID(30));",
          "    other_set.add(StateID(10));",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(30)));",
          "    dest_set.clear();",
          "    self_set.add(StateID(20));",
          "    self_set.add(StateID(30));",
          "    other_set.add(StateID(30));",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(20)));",
          "    dest_set.clear();",
          "    self_set.add(StateID(10));",
          "    self_set.add(StateID(30));",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 2);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(10)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(30)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(7));",
          "    self_set.add(StateID(8));",
          "    self_set.add(StateID(9));",
          "",
          "    other_set.add(StateID(5));",
          "    other_set.add(StateID(6));",
          "    other_set.add(StateID(10));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    dest_set.len() == 3",
          "    dest_set.ids.borrow().contains(&StateID(7))",
          "    dest_set.ids.borrow().contains(&StateID(8))",
          "    dest_set.ids.borrow().contains(&StateID(9))",
          "    !dest_set.ids.borrow().contains(&StateID(5))",
          "    !dest_set.ids.borrow().contains(&StateID(6))",
          "    !dest_set.ids.borrow().contains(&StateID(10))"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(7));",
          "    self_set.add(StateID(8));",
          "    self_set.add(StateID(9));",
          "",
          "    other_set.add(StateID(5));",
          "    other_set.add(StateID(6));",
          "    other_set.add(StateID(10));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    dest_set.len() == 3",
          "    dest_set.ids.borrow().contains(&StateID(7))",
          "    dest_set.ids.borrow().contains(&StateID(8))",
          "    dest_set.ids.borrow().contains(&StateID(9))",
          "    !dest_set.ids.borrow().contains(&StateID(5))",
          "    !dest_set.ids.borrow().contains(&StateID(6))",
          "    !dest_set.ids.borrow().contains(&StateID(10))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(1));",
          "    self_set.add(StateID(1)); // Adding the same element for common case",
          "",
          "    other_set.add(StateID(1));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 0); // Expecting dest_set to be empty since 1 is in both sets",
          "    assert!(dest_set.is_empty()); // Confirming dest_set is empty",
          "    assert!(self_set.is_empty() == false); // Confirming self_set is not empty",
          "    assert!(other_set.is_empty() == false); // Confirming other_set is not empty",
          "    assert_eq!(self_set.len(), 2); // Expecting self_set to still have two elements",
          "    assert_eq!(other_set.len(), 1); // Expecting other_set to have one element",
          "    assert_eq!(self_set.ids.borrow()[0], StateID(1)); // Confirming first element in self_set",
          "    assert_eq!(self_set.ids.borrow()[1], StateID(1)); // Confirming second element in self_set",
          "    assert_eq!(other_set.ids.borrow()[0], StateID(1)); // Confirming element in other_set"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(1));",
          "    self_set.add(StateID(1)); // Adding the same element for common case",
          "",
          "    other_set.add(StateID(1));",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 0); // Expecting dest_set to be empty since 1 is in both sets",
          "    assert!(dest_set.is_empty()); // Confirming dest_set is empty",
          "    assert!(self_set.is_empty() == false); // Confirming self_set is not empty",
          "    assert!(other_set.is_empty() == false); // Confirming other_set is not empty",
          "    assert_eq!(self_set.len(), 2); // Expecting self_set to still have two elements",
          "    assert_eq!(other_set.len(), 1); // Expecting other_set to have one element",
          "    assert_eq!(self_set.ids.borrow()[0], StateID(1)); // Confirming first element in self_set",
          "    assert_eq!(self_set.ids.borrow()[1], StateID(1)); // Confirming second element in self_set",
          "    assert_eq!(other_set.ids.borrow()[0], StateID(1)); // Confirming element in other_set",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]