[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    // Populate self_set with StateIDs that are greater than those in other_set",
          "    self_set.add(StateID(2));",
          "    self_set.add(StateID(3));",
          "    self_set.add(StateID(4));",
          "",
          "    // Populate other_set with lower StateIDs",
          "    other_set.add(StateID(0));",
          "    other_set.add(StateID(1));",
          "",
          "    // Call the subtract function",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 3);",
          "    assert!(dest_set.iter(|id| id == StateID(2)).count() > 0);",
          "    assert!(dest_set.iter(|id| id == StateID(3)).count() > 0);",
          "    assert!(dest_set.iter(|id| id == StateID(4)).count() > 0);",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    // Populate self_set with StateIDs that are greater than those in other_set",
          "    self_set.add(StateID(2));",
          "    self_set.add(StateID(3));",
          "    self_set.add(StateID(4));",
          "",
          "    // Populate other_set with lower StateIDs",
          "    other_set.add(StateID(0));",
          "    other_set.add(StateID(1));",
          "",
          "    // Call the subtract function",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 3);",
          "    assert!(dest_set.iter(|id| id == StateID(2)).count() > 0);",
          "    assert!(dest_set.iter(|id| id == StateID(3)).count() > 0);",
          "    assert!(dest_set.iter(|id| id == StateID(4)).count() > 0);",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    // Populate self_set with unique StateIDs",
          "    self_set.add(StateID(5));",
          "    self_set.add(StateID(6));",
          "    self_set.add(StateID(7));",
          "",
          "    // Populate other_set with lower overlapping StateIDs",
          "    other_set.add(StateID(1));",
          "    other_set.add(StateID(2));",
          "    other_set.add(StateID(3));",
          "",
          "    // Call the subtract function",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    dest_set.len() == 3",
          "    dest_set.is_empty() == false",
          "    dest_set.ids.borrow().contains(&StateID(5)) == true",
          "    dest_set.ids.borrow().contains(&StateID(6)) == true",
          "    dest_set.ids.borrow().contains(&StateID(7)) == true",
          "    dest_set.ids.borrow().contains(&StateID(1)) == false",
          "    dest_set.ids.borrow().contains(&StateID(2)) == false",
          "    dest_set.ids.borrow().contains(&StateID(3)) == false"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    // Populate self_set with unique StateIDs",
          "    self_set.add(StateID(5));",
          "    self_set.add(StateID(6));",
          "    self_set.add(StateID(7));",
          "",
          "    // Populate other_set with lower overlapping StateIDs",
          "    other_set.add(StateID(1));",
          "    other_set.add(StateID(2));",
          "    other_set.add(StateID(3));",
          "",
          "    // Call the subtract function",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    dest_set.len() == 3",
          "    dest_set.is_empty() == false",
          "    dest_set.ids.borrow().contains(&StateID(5)) == true",
          "    dest_set.ids.borrow().contains(&StateID(6)) == true",
          "    dest_set.ids.borrow().contains(&StateID(7)) == true",
          "    dest_set.ids.borrow().contains(&StateID(1)) == false",
          "    dest_set.ids.borrow().contains(&StateID(2)) == false",
          "    dest_set.ids.borrow().contains(&StateID(3)) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]