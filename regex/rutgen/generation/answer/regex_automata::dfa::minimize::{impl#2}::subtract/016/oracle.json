[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let state_a1 = StateID(1);",
          "    let state_a2 = StateID(2);",
          "    self_set.add(state_a1);",
          "",
          "    let mut other_set = StateSet::empty();",
          "    let state_b1 = StateID(3);",
          "    let state_b2 = StateID(4);",
          "    other_set.add(state_b1);",
          "    other_set.add(state_b2);",
          "",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(self_set.len(), 1);",
          "    assert_eq!(other_set.len(), 2);",
          "    assert_eq!(self_set.ids.borrow().get(0), Some(&StateID(1)));",
          "    assert_eq!(other_set.ids.borrow().get(0), Some(&StateID(3)));",
          "    assert_eq!(other_set.ids.borrow().get(1), Some(&StateID(4)));"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let state_a1 = StateID(1);",
          "    let state_a2 = StateID(2);",
          "    self_set.add(state_a1);",
          "",
          "    let mut other_set = StateSet::empty();",
          "    let state_b1 = StateID(3);",
          "    let state_b2 = StateID(4);",
          "    other_set.add(state_b1);",
          "    other_set.add(state_b2);",
          "",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(self_set.len(), 1);",
          "    assert_eq!(other_set.len(), 2);",
          "    assert_eq!(self_set.ids.borrow().get(0), Some(&StateID(1)));",
          "    assert_eq!(other_set.ids.borrow().get(0), Some(&StateID(3)));",
          "    assert_eq!(other_set.ids.borrow().get(1), Some(&StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    let state_b1 = StateID(1);",
          "    let state_b2 = StateID(2);",
          "    other_set.add(state_b1);",
          "    other_set.add(state_b2);",
          "",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert!(dest_set.is_empty() == true);",
          "    assert!(other_set.len() == 2);",
          "    assert!(dest_set.len() == 0);",
          "    assert!(dest_set.iter(|s| assert!(s != state_b1 && s != state_b2)));",
          "    assert!(self_set.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    let state_b1 = StateID(1);",
          "    let state_b2 = StateID(2);",
          "    other_set.add(state_b1);",
          "    other_set.add(state_b2);",
          "",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert!(dest_set.is_empty() == true);",
          "    assert!(other_set.len() == 2);",
          "    assert!(dest_set.len() == 0);",
          "    assert!(dest_set.iter(|s| assert!(s != state_b1 && s != state_b2)));",
          "    assert!(self_set.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]