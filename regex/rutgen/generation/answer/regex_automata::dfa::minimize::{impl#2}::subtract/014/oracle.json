[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(1), StateID(3), StateID(5)])) };",
          "    let other_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(2), StateID(4)])) };",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.ids.borrow().len(), 3);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(5)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(2)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(4)));",
          "    assert!(dest_set.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(1), StateID(3), StateID(5)])) };",
          "    let other_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(2), StateID(4)])) };",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.ids.borrow().len(), 3);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(5)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(2)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(4)));",
          "    assert!(dest_set.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(2), StateID(4)])) };",
          "    let other_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(2), StateID(4)])) };",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    dest_set.len() == 0",
          "    dest_set.is_empty() == true",
          "    self_set.len() == 2",
          "    other_set.len() == 2",
          "    self_set.is_empty() == false",
          "    other_set.is_empty() == false",
          "    self_set.ids.borrow().iter().cloned().all(|id| id == StateID(2) || id == StateID(4)) == true",
          "    other_set.ids.borrow().iter().cloned().all(|id| id == StateID(2) || id == StateID(4)) == true",
          "    dest_set.ids.borrow().iter().count() == 0",
          "    dest_set.ids.borrow().iter().all(|id| *id != StateID(2) && *id != StateID(4)) == true"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(2), StateID(4)])) };",
          "    let other_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(2), StateID(4)])) };",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    dest_set.len() == 0",
          "    dest_set.is_empty() == true",
          "    self_set.len() == 2",
          "    other_set.len() == 2",
          "    self_set.is_empty() == false",
          "    other_set.is_empty() == false",
          "    self_set.ids.borrow().iter().cloned().all(|id| id == StateID(2) || id == StateID(4)) == true",
          "    other_set.ids.borrow().iter().cloned().all(|id| id == StateID(2) || id == StateID(4)) == true",
          "    dest_set.ids.borrow().iter().count() == 0",
          "    dest_set.ids.borrow().iter().all(|id| *id != StateID(2) && *id != StateID(4)) == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(1), StateID(3), StateID(5)])) };",
          "    let other_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(1), StateID(4)])) };",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 2);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(5)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(4)));",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert!(dest_set.len() > 0);",
          "    assert!(self_set.len() == 3);",
          "    assert!(other_set.len() == 2);"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(1), StateID(3), StateID(5)])) };",
          "    let other_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(1), StateID(4)])) };",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.subtract(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 2);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(dest_set.ids.borrow().contains(&StateID(5)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(4)));",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert!(dest_set.len() > 0);",
          "    assert!(self_set.len() == 3);",
          "    assert!(other_set.len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]