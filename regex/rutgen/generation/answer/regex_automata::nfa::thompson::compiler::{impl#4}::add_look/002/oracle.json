[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::Start);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: false, ..Default::default() }, builder: RefCell::new(Builder::new()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: Vec::new(), }), };",
          "    ",
          "    assert_eq!(compiler.add_look(Look::Start), Ok(StateID::ZERO));",
          "    ",
          "    let result = compiler.add_look(Look::WordAscii);",
          "    assert!(result.is_ok());",
          "    assert_ne!(result.unwrap(), StateID::ZERO);",
          "    assert_eq!(compiler.builder.borrow().current_pattern_id(), PatternID::default());",
          "    ",
          "    let look_result = compiler.add_look(Look::End);",
          "    assert!(look_result.is_ok());",
          "    assert!(look_result.unwrap() != StateID::ZERO);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::Start);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: false, ..Default::default() }, builder: RefCell::new(Builder::new()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: Vec::new(), }), };",
          "    ",
          "    assert_eq!(compiler.add_look(Look::Start), Ok(StateID::ZERO));",
          "    ",
          "    let result = compiler.add_look(Look::WordAscii);",
          "    assert!(result.is_ok());",
          "    assert_ne!(result.unwrap(), StateID::ZERO);",
          "    assert_eq!(compiler.builder.borrow().current_pattern_id(), PatternID::default());",
          "    ",
          "    let look_result = compiler.add_look(Look::End);",
          "    assert!(look_result.is_ok());",
          "    assert!(look_result.unwrap() != StateID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::End);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: false, ..Default::default() }, builder: RefCell::new(Builder::new()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: Vec::new(), }), };",
          "    let result = compiler.add_look(Look::End);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_eq!(state_id, StateID::ZERO);",
          "    assert!(!compiler.is_reverse());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::End);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: false, ..Default::default() }, builder: RefCell::new(Builder::new()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: Vec::new(), }), };",
          "    let result = compiler.add_look(Look::End);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_eq!(state_id, StateID::ZERO);",
          "    assert!(!compiler.is_reverse());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::StartLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.is_reverse(), false);",
          "    assert_matches!(compiler.add_look(Look::StartLF), Ok(_));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::StartLF);",
          "    assert_eq!(compiler.is_reverse(), false);",
          "    assert_matches!(compiler.add_look(Look::StartLF), Ok(_));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::EndLF);",
          "}"
        ],
        "oracle": [
          "    self.is_reverse() returns false",
          "    compiler.add_look(Look::EndLF) returns Ok(StateID)"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::EndLF);",
          "    self.is_reverse() returns false",
          "    compiler.add_look(Look::EndLF) returns Ok(StateID)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.config.reverse, false);",
          "    assert_eq!(self.is_reverse(), false);",
          "    assert_eq!(look.as_repr(), Look::WordAscii.as_repr());",
          "    assert!(matches!(compiler.builder.borrow_mut().add_look(StateID::ZERO, Look::WordAscii), Ok(_)));",
          "    assert!(matches!(compiler.add_look(Look::WordAscii), Ok(_)));"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordAscii);",
          "    assert_eq!(compiler.config.reverse, false);",
          "    assert_eq!(self.is_reverse(), false);",
          "    assert_eq!(look.as_repr(), Look::WordAscii.as_repr());",
          "    assert!(matches!(compiler.builder.borrow_mut().add_look(StateID::ZERO, Look::WordAscii), Ok(_)));",
          "    assert!(matches!(compiler.add_look(Look::WordAscii), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordUnicode);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: false, ..Default::default() }, builder: RefCell::new(Builder::new()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: Vec::new(), }), };",
          "    assert_eq!(compiler.add_look(Look::WordUnicode).is_ok(), true);",
          "    let result = compiler.add_look(Look::WordAscii);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_ne!(state_id, StateID::ZERO);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordUnicode);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: false, ..Default::default() }, builder: RefCell::new(Builder::new()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: Vec::new(), }), };",
          "    assert_eq!(compiler.add_look(Look::WordUnicode).is_ok(), true);",
          "    let result = compiler.add_look(Look::WordAscii);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_ne!(state_id, StateID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordStartAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.config.reverse, false);",
          "    let result = compiler.add_look(Look::WordStartAscii);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_ne!(state_id, StateID::ZERO);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordStartAscii);",
          "    assert_eq!(compiler.config.reverse, false);",
          "    let result = compiler.add_look(Look::WordStartAscii);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_ne!(state_id, StateID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordEndAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.is_reverse(), false);",
          "    let result = compiler.add_look(Look::WordEndAscii);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), StateID::ZERO);",
          "    let mut builder = compiler.builder.borrow_mut();",
          "    assert_eq!(builder.memory_usage(), 0);",
          "    builder.clear();",
          "    assert!(builder.get_look_matcher().is_default());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordEndAscii);",
          "    assert_eq!(compiler.is_reverse(), false);",
          "    let result = compiler.add_look(Look::WordEndAscii);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), StateID::ZERO);",
          "    let mut builder = compiler.builder.borrow_mut();",
          "    assert_eq!(builder.memory_usage(), 0);",
          "    builder.clear();",
          "    assert!(builder.get_look_matcher().is_default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordStartUnicode);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::new(),",
          "    config: Config {",
          "    reverse: false,",
          "    ..Default::default()",
          "    },",
          "    builder: RefCell::new(Builder::new()),",
          "    utf8_state: RefCell::new(Utf8State::default()),",
          "    trie_state: RefCell::new(RangeTrie::default()),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "    version: 0,",
          "    capacity: 0,",
          "    map: Vec::new(),",
          "    }),",
          "    };",
          "    let result = compiler.add_look(Look::WordStartUnicode);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_eq!(state_id, StateID::ZERO);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordStartUnicode);",
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::new(),",
          "    config: Config {",
          "    reverse: false,",
          "    ..Default::default()",
          "    },",
          "    builder: RefCell::new(Builder::new()),",
          "    utf8_state: RefCell::new(Utf8State::default()),",
          "    trie_state: RefCell::new(RangeTrie::default()),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "    version: 0,",
          "    capacity: 0,",
          "    map: Vec::new(),",
          "    }),",
          "    };",
          "    let result = compiler.add_look(Look::WordStartUnicode);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_eq!(state_id, StateID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordEndUnicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.is_reverse(), false);",
          "    let result = compiler.add_look(Look::WordEndUnicode);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_eq!(state_id, StateID::ZERO);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config {",
          "            reverse: false,",
          "            ..Default::default()",
          "        },",
          "        builder: RefCell::new(Builder::new()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let _ = compiler.add_look(Look::WordEndUnicode);",
          "    assert_eq!(compiler.is_reverse(), false);",
          "    let result = compiler.add_look(Look::WordEndUnicode);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_eq!(state_id, StateID::ZERO);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]