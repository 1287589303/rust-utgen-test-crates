[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(0);",
          "    let quit_id = id.to_quit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(quit_id.as_usize_unchecked(), 4);",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_unknown());"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(0);",
          "    let quit_id = id.to_quit();",
          "    assert_eq!(quit_id.as_usize_unchecked(), 4);",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_unknown());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(31);",
          "    let quit_id = id.to_quit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(quit_id.as_usize_unchecked(), 31 | LazyStateID::MASK_QUIT);",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_unknown());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());",
          "    assert_eq!(id.as_usize_untagged(), 31);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(31);",
          "    let quit_id = id.to_quit();",
          "    assert_eq!(quit_id.as_usize_unchecked(), 31 | LazyStateID::MASK_QUIT);",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_unknown());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());",
          "    assert_eq!(id.as_usize_untagged(), 31);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(32);",
          "    let quit_id = id.to_quit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(quit_id.as_usize_unchecked(), 32 | LazyStateID::MASK_QUIT);",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_unknown());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(32);",
          "    let quit_id = id.to_quit();",
          "    assert_eq!(quit_id.as_usize_unchecked(), 32 | LazyStateID::MASK_QUIT);",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_unknown());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(0).to_unknown();",
          "    let quit_id = id.to_quit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(quit_id.as_usize_unchecked(), 1 << (LazyStateID::MAX_BIT - 2));",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_unknown());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(0).to_unknown();",
          "    let quit_id = id.to_quit();",
          "    assert_eq!(quit_id.as_usize_unchecked(), 1 << (LazyStateID::MAX_BIT - 2));",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_unknown());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(0).to_dead();",
          "    let quit_id = id.to_quit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(quit_id.as_usize_unchecked(), 1 << (LazyStateID::MAX_BIT - 2));",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());",
          "    assert!(!quit_id.is_unknown());"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(0).to_dead();",
          "    let quit_id = id.to_quit();",
          "    assert_eq!(quit_id.as_usize_unchecked(), 1 << (LazyStateID::MAX_BIT - 2));",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_match());",
          "    assert!(!quit_id.is_unknown());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(0).to_start();",
          "    let quit_id = id.to_quit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(quit_id.as_usize_unchecked(), 0 | LazyStateID::MASK_QUIT);"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(0).to_start();",
          "    let quit_id = id.to_quit();",
          "    assert_eq!(quit_id.as_usize_unchecked(), 0 | LazyStateID::MASK_QUIT);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::new_unchecked(0).to_match();",
          "    let quit_id = id.to_quit();",
          "}"
        ],
        "oracle": [
          "    let id = LazyStateID::new_unchecked(0).to_match();",
          "    let quit_id = id.to_quit();",
          "    assert_eq!(quit_id.as_usize_unchecked(), 16);",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_match());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_unknown());"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::new_unchecked(0).to_match();",
          "    let quit_id = id.to_quit();",
          "    let id = LazyStateID::new_unchecked(0).to_match();",
          "    let quit_id = id.to_quit();",
          "    assert_eq!(quit_id.as_usize_unchecked(), 16);",
          "    assert!(quit_id.is_quit());",
          "    assert!(!quit_id.is_match());",
          "    assert!(!quit_id.is_start());",
          "    assert!(!quit_id.is_dead());",
          "    assert!(!quit_id.is_unknown());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]