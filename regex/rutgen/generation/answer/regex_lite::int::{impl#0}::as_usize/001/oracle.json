[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 0;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert!(std::mem::size_of::<usize>() >= std::mem::size_of::<u32>());",
          "    ",
          "    let value: u32 = 1;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 1);",
          "    ",
          "    let value: u32 = u32::MAX;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, u32::MAX as usize);"
        ],
        "code": [
          "{",
          "    let value: u32 = 0;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 0);",
          "    assert!(std::mem::size_of::<usize>() >= std::mem::size_of::<u32>());",
          "    ",
          "    let value: u32 = 1;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 1);",
          "    ",
          "    let value: u32 = u32::MAX;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, u32::MAX as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 4_294_967_295;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4_294_967_295);",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<usize>());",
          "    assert!(result.is_positive());",
          "    assert!(result <= usize::MAX as u32 as usize);",
          "    assert_eq!(result, value as usize);"
        ],
        "code": [
          "{",
          "    let value: u32 = 4_294_967_295;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 4_294_967_295);",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<usize>());",
          "    assert!(result.is_positive());",
          "    assert!(result <= usize::MAX as u32 as usize);",
          "    assert_eq!(result, value as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 2_147_483_647;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2_147_483_647);"
        ],
        "code": [
          "{",
          "    let value: u32 = 2_147_483_647;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 2_147_483_647);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 1;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert!(std::mem::size_of_val(&result) == std::mem::size_of::<usize>());",
          "    assert!(result == value as usize);",
          "    assert!(result > 0);"
        ],
        "code": [
          "{",
          "    let value: u32 = 1;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 1);",
          "    assert!(std::mem::size_of_val(&result) == std::mem::size_of::<usize>());",
          "    assert!(result == value as usize);",
          "    assert!(result > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u32 = 4_000_000_000;",
          "    let result = value.as_usize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4_000_000_000 as usize);",
          "    assert!(std::mem::size_of::<usize>() >= std::mem::size_of::<u32>());",
          "    assert!(result == value as usize);"
        ],
        "code": [
          "{",
          "    let value: u32 = 4_000_000_000;",
          "    let result = value.as_usize();",
          "    assert_eq!(result, 4_000_000_000 as usize);",
          "    assert!(std::mem::size_of::<usize>() >= std::mem::size_of::<u32>());",
          "    assert!(result == value as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]