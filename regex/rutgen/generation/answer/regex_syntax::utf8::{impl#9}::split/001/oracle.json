[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x0000, end: 0xFFFF };",
          "    let result = scalar_range.split();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (range1, range2) = result.unwrap();",
          "    assert_eq!(range1.start, 0x0000);",
          "    assert_eq!(range1.end, 0xD7FF);",
          "    assert_eq!(range2.start, 0xE000);",
          "    assert_eq!(range2.end, 0xFFFF);"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0x0000, end: 0xFFFF };",
          "    let result = scalar_range.split();",
          "    assert!(result.is_some());",
          "    let (range1, range2) = result.unwrap();",
          "    assert_eq!(range1.start, 0x0000);",
          "    assert_eq!(range1.end, 0xD7FF);",
          "    assert_eq!(range2.start, 0xE000);",
          "    assert_eq!(range2.end, 0xFFFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0xD7FE, end: 0x10FFFF };",
          "    let result = scalar_range.split();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0.start, 0xD7FE);",
          "    assert_eq!(result.unwrap().0.end, 0xD7FF);",
          "    assert_eq!(result.unwrap().1.start, 0xE000);",
          "    assert_eq!(result.unwrap().1.end, 0x10FFFF);"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0xD7FE, end: 0x10FFFF };",
          "    let result = scalar_range.split();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().0.start, 0xD7FE);",
          "    assert_eq!(result.unwrap().0.end, 0xD7FF);",
          "    assert_eq!(result.unwrap().1.start, 0xE000);",
          "    assert_eq!(result.unwrap().1.end, 0x10FFFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0xD700, end: 0xE000 };",
          "    let result = scalar_range.split();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (first_range, second_range) = result.unwrap();",
          "    assert_eq!(first_range.start, 0xD700);",
          "    assert_eq!(first_range.end, 0xD7FF);",
          "    assert_eq!(second_range.start, 0xE000);",
          "    assert_eq!(second_range.end, 0xE000);"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0xD700, end: 0xE000 };",
          "    let result = scalar_range.split();",
          "    assert!(result.is_some());",
          "    let (first_range, second_range) = result.unwrap();",
          "    assert_eq!(first_range.start, 0xD700);",
          "    assert_eq!(first_range.end, 0xD7FF);",
          "    assert_eq!(second_range.start, 0xE000);",
          "    assert_eq!(second_range.end, 0xE000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scalar_range = ScalarRange { start: 0xA000, end: 0x10FFFE };",
          "    let result = scalar_range.split();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (first_range, second_range) = result.unwrap();",
          "    assert_eq!(first_range.start, 0xA000);",
          "    assert_eq!(first_range.end, 0xD7FF);",
          "    assert_eq!(second_range.start, 0xE000);",
          "    assert_eq!(second_range.end, 0x10FFFE);"
        ],
        "code": [
          "{",
          "    let scalar_range = ScalarRange { start: 0xA000, end: 0x10FFFE };",
          "    let result = scalar_range.split();",
          "    assert!(result.is_some());",
          "    let (first_range, second_range) = result.unwrap();",
          "    assert_eq!(first_range.start, 0xA000);",
          "    assert_eq!(first_range.end, 0xD7FF);",
          "    assert_eq!(second_range.start, 0xE000);",
          "    assert_eq!(second_range.end, 0x10FFFE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]