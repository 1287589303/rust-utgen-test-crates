[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[];",
          "    find_byte(needle, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(5, &[]), None);"
        ],
        "code": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[];",
          "    find_byte(needle, haystack);",
          "    assert_eq!(find_byte(5, &[]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[1, 2, 3, 4];",
          "    find_byte(needle, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(5, &[1, 2, 3, 4]), None);",
          "    assert_eq!(find_byte(1, &[1, 2, 3, 4]), Some(0));",
          "    assert_eq!(find_byte(4, &[1, 2, 3, 4]), Some(3));",
          "    assert_eq!(find_byte(3, &[1, 2, 3, 4]), Some(2));",
          "    assert_eq!(find_byte(0, &[1, 2, 3, 4]), None);",
          "    assert_eq!(find_byte(2, &[1, 2, 3, 4]), Some(1));",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(1, &[1]), Some(0));",
          "    assert_eq!(find_byte(128, &[127, 128, 129]), Some(1));",
          "    assert_eq!(find_byte(129, &[127, 128, 129]), Some(2));"
        ],
        "code": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[1, 2, 3, 4];",
          "    find_byte(needle, haystack);",
          "    assert_eq!(find_byte(5, &[1, 2, 3, 4]), None);",
          "    assert_eq!(find_byte(1, &[1, 2, 3, 4]), Some(0));",
          "    assert_eq!(find_byte(4, &[1, 2, 3, 4]), Some(3));",
          "    assert_eq!(find_byte(3, &[1, 2, 3, 4]), Some(2));",
          "    assert_eq!(find_byte(0, &[1, 2, 3, 4]), None);",
          "    assert_eq!(find_byte(2, &[1, 2, 3, 4]), Some(1));",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(1, &[1]), Some(0));",
          "    assert_eq!(find_byte(128, &[127, 128, 129]), Some(1));",
          "    assert_eq!(find_byte(129, &[127, 128, 129]), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[5, 1, 2, 3, 4];",
          "    find_byte(needle, haystack);",
          "}"
        ],
        "oracle": [
          "    find_byte(5, &[5, 1, 2, 3, 4]) == Some(0)",
          "    find_byte(1, &[5, 1, 2, 3, 4]) == Some(1)",
          "    find_byte(2, &[5, 1, 2, 3, 4]) == Some(2)",
          "    find_byte(3, &[5, 1, 2, 3, 4]) == Some(3)",
          "    find_byte(4, &[5, 1, 2, 3, 4]) == Some(4)",
          "    find_byte(6, &[5, 1, 2, 3, 4]) == None",
          "    find_byte(5, &[]) == None",
          "    find_byte(0, &[0, 0, 0]) == Some(0)",
          "    find_byte(0, &[1, 2, 3]) == None",
          "    find_byte(255, &[255]) == Some(0)",
          "    find_byte(255, &[0]) == None"
        ],
        "code": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[5, 1, 2, 3, 4];",
          "    find_byte(needle, haystack);",
          "    find_byte(5, &[5, 1, 2, 3, 4]) == Some(0)",
          "    find_byte(1, &[5, 1, 2, 3, 4]) == Some(1)",
          "    find_byte(2, &[5, 1, 2, 3, 4]) == Some(2)",
          "    find_byte(3, &[5, 1, 2, 3, 4]) == Some(3)",
          "    find_byte(4, &[5, 1, 2, 3, 4]) == Some(4)",
          "    find_byte(6, &[5, 1, 2, 3, 4]) == None",
          "    find_byte(5, &[]) == None",
          "    find_byte(0, &[0, 0, 0]) == Some(0)",
          "    find_byte(0, &[1, 2, 3]) == None",
          "    find_byte(255, &[255]) == Some(0)",
          "    find_byte(255, &[0]) == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[1, 2, 5, 3, 4];",
          "    find_byte(needle, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(5, &[1, 2, 5, 3, 4]), Some(2));",
          "    assert_eq!(find_byte(1, &[1, 2, 5, 3, 4]), Some(0));",
          "    assert_eq!(find_byte(4, &[1, 2, 5, 3, 4]), Some(4));",
          "    assert_eq!(find_byte(6, &[1, 2, 5, 3, 4]), None);",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(0, &[0]), Some(0));",
          "    assert_eq!(find_byte(0, &[1]), None);"
        ],
        "code": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[1, 2, 5, 3, 4];",
          "    find_byte(needle, haystack);",
          "    assert_eq!(find_byte(5, &[1, 2, 5, 3, 4]), Some(2));",
          "    assert_eq!(find_byte(1, &[1, 2, 5, 3, 4]), Some(0));",
          "    assert_eq!(find_byte(4, &[1, 2, 5, 3, 4]), Some(4));",
          "    assert_eq!(find_byte(6, &[1, 2, 5, 3, 4]), None);",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(0, &[0]), Some(0));",
          "    assert_eq!(find_byte(0, &[1]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[1, 2, 3, 4, 5];",
          "    find_byte(needle, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(5, &[1, 2, 3, 4, 5]), Some(4));",
          "    assert_eq!(find_byte(1, &[1, 2, 3, 4, 5]), Some(0));",
          "    assert_eq!(find_byte(3, &[1, 2, 3, 4, 5]), Some(2));",
          "    assert_eq!(find_byte(6, &[1, 2, 3, 4, 5]), None);",
          "    assert_eq!(find_byte(0, &[1, 2"
        ],
        "code": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[1, 2, 3, 4, 5];",
          "    find_byte(needle, haystack);",
          "    assert_eq!(find_byte(5, &[1, 2, 3, 4, 5]), Some(4));",
          "    assert_eq!(find_byte(1, &[1, 2, 3, 4, 5]), Some(0));",
          "    assert_eq!(find_byte(3, &[1, 2, 3, 4, 5]), Some(2));",
          "    assert_eq!(find_byte(6, &[1, 2, 3, 4, 5]), None);",
          "    assert_eq!(find_byte(0, &[1, 2",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[1, 5, 3, 5, 4];",
          "    find_byte(needle, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(0, &[1, 2, 3]), None);",
          "    assert_eq!(find_byte(1, &[1, 2, 3]), Some(0));",
          "    assert_eq!(find_byte(2, &[1, 2, 3]), Some(1));",
          "    assert_eq!(find_byte(3, &[1, 2, 3]), Some(2));",
          "    assert_eq!(find_byte(4, &[1, 2, 3]), None);",
          "    assert_eq!(find_byte(5, &[1, 5, 3, 5, 4]), Some(1));",
          "    assert_eq!(find_byte(5, &[1, 5, 3, 5, 4][..3]), Some(1));",
          "    assert_eq!(find_byte(5, &[5, 1, 3, 5, 4]), Some(0));",
          "    assert_eq!(find_byte(5, &[1, 3, 4]), None);",
          "    assert_eq!(find_byte(3, &[3, 1, 3]), Some(0));",
          "    assert_eq!(find_byte(4, &[]), None);",
          "    assert_eq!(find_byte(5, &[8, 9, 10]), None);",
          "    assert_eq!(find_byte(0, &[0]), Some(0));",
          "    assert_eq!(find_byte(1, &[0]), None);"
        ],
        "code": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[1, 5, 3, 5, 4];",
          "    find_byte(needle, haystack);",
          "    assert_eq!(find_byte(0, &[1, 2, 3]), None);",
          "    assert_eq!(find_byte(1, &[1, 2, 3]), Some(0));",
          "    assert_eq!(find_byte(2, &[1, 2, 3]), Some(1));",
          "    assert_eq!(find_byte(3, &[1, 2, 3]), Some(2));",
          "    assert_eq!(find_byte(4, &[1, 2, 3]), None);",
          "    assert_eq!(find_byte(5, &[1, 5, 3, 5, 4]), Some(1));",
          "    assert_eq!(find_byte(5, &[1, 5, 3, 5, 4][..3]), Some(1));",
          "    assert_eq!(find_byte(5, &[5, 1, 3, 5, 4]), Some(0));",
          "    assert_eq!(find_byte(5, &[1, 3, 4]), None);",
          "    assert_eq!(find_byte(3, &[3, 1, 3]), Some(0));",
          "    assert_eq!(find_byte(4, &[]), None);",
          "    assert_eq!(find_byte(5, &[8, 9, 10]), None);",
          "    assert_eq!(find_byte(0, &[0]), Some(0));",
          "    assert_eq!(find_byte(1, &[0]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[5, 5, 5, 5, 5];",
          "    find_byte(needle, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(5, &[5, 5, 5, 5, 5]), Some(0));",
          "    assert_eq!(find_byte(5, &[1, 2, 3, 4]), None);",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(0, &[0, 0, 0]), Some(0));",
          "    assert_eq!(find_byte(255, &[0, 255, 128]), Some(1));"
        ],
        "code": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: &[u8] = &[5, 5, 5, 5, 5];",
          "    find_byte(needle, haystack);",
          "    assert_eq!(find_byte(5, &[5, 5, 5, 5, 5]), Some(0));",
          "    assert_eq!(find_byte(5, &[1, 2, 3, 4]), None);",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(0, &[0, 0, 0]), Some(0));",
          "    assert_eq!(find_byte(255, &[0, 255, 128]), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 3;",
          "    let haystack: &[u8] = &[5, 5, 5, 5, 5];",
          "    find_byte(needle, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(3, &[5, 5, 5, 5, 5]), None);",
          "    assert_eq!(find_byte(5, &[5, 5, 5, 5, 5]), Some(0));",
          "    assert_eq!(find_byte(0, &[0, 1, 2, 3, 4]), Some(0));",
          "    assert_eq!(find_byte(1, &[0, 1, 2, 3, 4]), Some(1));",
          "    assert_eq!(find_byte(4, &[0, 1, 2, 3, 4]), Some(4));",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(3, &[1, 2, 3, 4, 5]), Some(2));",
          "    assert_eq!(find_byte(100, &[50, 100, 150]), Some(1));",
          "    assert_eq!(find_byte(50, &[50, 100, 150]), Some(0));",
          "    assert_eq!(find_byte(150, &[50, 100, 150]), Some(2));"
        ],
        "code": [
          "{",
          "    let needle: u8 = 3;",
          "    let haystack: &[u8] = &[5, 5, 5, 5, 5];",
          "    find_byte(needle, haystack);",
          "    assert_eq!(find_byte(3, &[5, 5, 5, 5, 5]), None);",
          "    assert_eq!(find_byte(5, &[5, 5, 5, 5, 5]), Some(0));",
          "    assert_eq!(find_byte(0, &[0, 1, 2, 3, 4]), Some(0));",
          "    assert_eq!(find_byte(1, &[0, 1, 2, 3, 4]), Some(1));",
          "    assert_eq!(find_byte(4, &[0, 1, 2, 3, 4]), Some(4));",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(3, &[1, 2, 3, 4, 5]), Some(2));",
          "    assert_eq!(find_byte(100, &[50, 100, 150]), Some(1));",
          "    assert_eq!(find_byte(50, &[50, 100, 150]), Some(0));",
          "    assert_eq!(find_byte(150, &[50, 100, 150]), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: Vec<u8> = (0..1000).map(|x| x as u8).collect();",
          "    find_byte(needle, &haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(5, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(5));",
          "    assert_eq!(find_byte(0, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(0));",
          "    assert_eq!(find_byte(999, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(999));",
          "    assert_eq!(find_byte(1000, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), None);",
          "    assert_eq!(find_byte(255, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(255));",
          "    assert_eq!(find_byte(256, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), None);",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(255, &[]), None);"
        ],
        "code": [
          "{",
          "    let needle: u8 = 5;",
          "    let haystack: Vec<u8> = (0..1000).map(|x| x as u8).collect();",
          "    find_byte(needle, &haystack);",
          "    assert_eq!(find_byte(5, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(5));",
          "    assert_eq!(find_byte(0, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(0));",
          "    assert_eq!(find_byte(999, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(999));",
          "    assert_eq!(find_byte(1000, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), None);",
          "    assert_eq!(find_byte(255, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(255));",
          "    assert_eq!(find_byte(256, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), None);",
          "    assert_eq!(find_byte(5, &[]), None);",
          "    assert_eq!(find_byte(255, &[]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needle: u8 = 255;",
          "    let haystack: Vec<u8> = (0..1000).map(|x| x as u8).collect();",
          "    find_byte(needle, &haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_byte(255, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), None);",
          "    assert_eq!(find_byte(0, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(0));",
          "    assert_eq!(find_byte(255, &[]), None);",
          "    assert_eq!(find_byte(128, &(0..128).map(|x| x as u8).collect::<Vec<u8>>()), Some(128));",
          "    assert_eq!(find_byte(255, &(0..256).map(|x| x as u8).collect::<Vec<u8>>()), Some(255));",
          "    assert_eq!(find_byte(2, &(1..10).map(|x| x as u8).collect::<Vec<u8>>()), Some(1));"
        ],
        "code": [
          "{",
          "    let needle: u8 = 255;",
          "    let haystack: Vec<u8> = (0..1000).map(|x| x as u8).collect();",
          "    find_byte(needle, &haystack);",
          "    assert_eq!(find_byte(255, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), None);",
          "    assert_eq!(find_byte(0, &(0..1000).map(|x| x as u8).collect::<Vec<u8>>()), Some(0));",
          "    assert_eq!(find_byte(255, &[]), None);",
          "    assert_eq!(find_byte(128, &(0..128).map(|x| x as u8).collect::<Vec<u8>>()), Some(128));",
          "    assert_eq!(find_byte(255, &(0..256).map(|x| x as u8).collect::<Vec<u8>>()), Some(255));",
          "    assert_eq!(find_byte(2, &(1..10).map(|x| x as u8).collect::<Vec<u8>>()), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]