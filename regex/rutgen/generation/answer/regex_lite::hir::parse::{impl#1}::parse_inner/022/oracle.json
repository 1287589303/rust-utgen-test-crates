[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(abc)\"; // valid group",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    let result = parser.parse_inner(); assert!(result.is_ok());",
          "    let hir = result.unwrap(); assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]) ]));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.depth.get(), 1);",
          "    assert_eq!(parser.capture_index.get(), 1);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(abc)\"; // valid group",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_inner();",
          "    let result = parser.parse_inner(); assert!(result.is_ok());",
          "    let hir = result.unwrap(); assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]) ]));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.depth.get(), 1);",
          "    assert_eq!(parser.capture_index.get(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(a|b|c)\"; // valid alternation",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().kind(), HirKind::Alternation(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]));",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), pattern.len());",
          "    assert_eq!(*parser.flags.borrow(), Flags::default());",
          "    assert!(parser.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(a|b|c)\"; // valid alternation",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_inner();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().kind(), HirKind::Alternation(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]));",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), pattern.len());",
          "    assert_eq!(*parser.flags.borrow(), Flags::default());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(a+|b)\"; // valid group with a repetition",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![ /* Expected Hir instances for ('a+', 'b') */ ]));",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(a+|b)\"; // valid group with a repetition",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_inner();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![ /* Expected Hir instances for ('a+', 'b') */ ]));",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(a[bc])\"; // valid group with a character class",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(_)));",
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(a[bc])\"; // valid group with a character class",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_inner();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert!(matches!(hir.kind(), HirKind::Alternation(_)));",
          "    assert_eq!(hir.is_start_anchored(), false);",
          "    assert_eq!(hir.is_match_empty(), false);",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]