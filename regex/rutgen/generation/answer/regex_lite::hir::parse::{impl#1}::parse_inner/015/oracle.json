[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(a|b)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Hir::alternation(vec![Hir::char('a'), Hir::char('b')])));",
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.depth.get(), 1);",
          "    assert_eq!(parser.pos.get(), 4);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(a|b)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    assert_eq!(result, Ok(Hir::alternation(vec![Hir::char('a'), Hir::char('b')])));",
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.depth.get(), 1);",
          "    assert_eq!(parser.pos.get(), 4);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(abc|def|ghi)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(abc|def|ghi)\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('|')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    assert_eq!(result, Ok(Hir::alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]), Hir::concat(vec![Hir::char('d'), Hir::char('e'), Hir::char('f')]), Hir::concat(vec![Hir::char('g'), Hir::char('h'), Hir::char('i')])]))));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(abc|def|ghi)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(abc|def|ghi)\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('|')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    assert_eq!(result, Ok(Hir::alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]), Hir::concat(vec![Hir::char('d'), Hir::char('e'), Hir::char('f')]), Hir::concat(vec![Hir::char('g'), Hir::char('h'), Hir::char('i')])]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(|)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(|)\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('(')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    assert_eq!(parser.parse_inner(), Ok(Hir::alternation(vec![Hir::concat(vec![])])));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"(|)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"(|)\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('(')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    assert_eq!(parser.parse_inner(), Ok(Hir::alternation(vec![Hir::concat(vec![])])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"((a|b)|(c|d))\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"((a|b)|(c|d))\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('|')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    assert!(parser.increment_depth().is_ok());",
          "    parser.bump_space();",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.char(), Some('|'));",
          "    let result = parser.parse_inner();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b')]), Hir::concat(vec![Hir::char('c'), Hir::char('d')])]));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"((a|b)|(c|d))\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"((a|b)|(c|d))\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('|')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    assert!(parser.increment_depth().is_ok());",
          "    parser.bump_space();",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.char(), Some('|'));",
          "    let result = parser.parse_inner();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b')]), Hir::concat(vec![Hir::char('c'), Hir::char('d')])]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags { case_insensitive: true, ..Flags::default() },",
          "    };",
          "    let pattern = \"(?i)(a|b)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags { case_insensitive: true, ..Flags::default() } };",
          "    let pattern = \"(?i)(a|b)\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(1), pos: Cell::new(0), char: Cell::new(Some('|')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    assert!(result.is_ok());",
          "    if let Ok(hir) = result {",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![]));",
          "    }"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags { case_insensitive: true, ..Flags::default() },",
          "    };",
          "    let pattern = \"(?i)(a|b)\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('(')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    parser.increment_depth().unwrap();",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    let config = Config { nest_limit: 10, flags: Flags { case_insensitive: true, ..Flags::default() } };",
          "    let pattern = \"(?i)(a|b)\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(1), pos: Cell::new(0), char: Cell::new(Some('|')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    parser.bump_space();",
          "    let result = parser.parse_inner();",
          "    assert!(result.is_ok());",
          "    if let Ok(hir) = result {",
          "    assert_eq!(hir.kind(), &HirKind::Alternation(vec![]));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]