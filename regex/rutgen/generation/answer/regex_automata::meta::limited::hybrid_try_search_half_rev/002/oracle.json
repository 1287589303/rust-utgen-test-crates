[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = crate::hybrid::dfa::DFA {",
          "        config: crate::hybrid::start::Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = crate::hybrid::dfa::Cache {",
          "        trans: vec![LazyStateID::new(0).unwrap()],",
          "        starts: vec![LazyStateID::new(0).unwrap()],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&b\"\"[..])",
          "        .span(0..0)",
          "        .anchored(crate::Anchored::Unanchored)",
          "        .earliest(false);",
          "    ",
          "    let min_start = 0;",
          "    ",
          "    let _result = crate::hybrid::df::hybrid_try_search_half_rev(&dfa, &mut cache, &input, min_start);",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.start_state_reverse(&mut cache, &input).is_ok());",
          "    assert!(input.start() == input.end());",
          "    let result = hybrid_eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat);",
          "    assert!(result.is_err() || mat.is_none());"
        ],
        "code": [
          "{",
          "    let dfa = crate::hybrid::dfa::DFA {",
          "        config: crate::hybrid::start::Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = crate::hybrid::dfa::Cache {",
          "        trans: vec![LazyStateID::new(0).unwrap()],",
          "        starts: vec![LazyStateID::new(0).unwrap()],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&b\"\"[..])",
          "        .span(0..0)",
          "        .anchored(crate::Anchored::Unanchored)",
          "        .earliest(false);",
          "    ",
          "    let min_start = 0;",
          "    ",
          "    let _result = crate::hybrid::df::hybrid_try_search_half_rev(&dfa, &mut cache, &input, min_start);",
          "    assert!(dfa.start_state_reverse(&mut cache, &input).is_ok());",
          "    assert!(input.start() == input.end());",
          "    let result = hybrid_eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat);",
          "    assert!(result.is_err() || mat.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = crate::hybrid::dfa::DFA {",
          "        config: crate::hybrid::start::Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = crate::hybrid::dfa::Cache {",
          "        trans: vec![LazyStateID::new(1).unwrap()],",
          "        starts: vec![LazyStateID::new(0).unwrap()],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&b\"\"[..])",
          "        .span(0..0)",
          "        .anchored(crate::Anchored::Unanchored)",
          "        .earliest(false);",
          "    ",
          "    let min_start = 0;",
          "    ",
          "    let _result = crate::hybrid::df::hybrid_try_search_half_rev(&dfa, &mut cache, &input, min_start);",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.start_state_reverse(&mut cache, &input).is_ok());",
          "    assert_eq!(input.start(), input.end());",
          "    assert!(hybrid_eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat).is_err());",
          "    assert!(matches!(_result, Ok(Some(_))));",
          "    assert!(matches!(_result, Err(RetryError::Quadratic(_))));",
          "    assert!(matches!(_result, Ok(None)));"
        ],
        "code": [
          "{",
          "    let dfa = crate::hybrid::dfa::DFA {",
          "        config: crate::hybrid::start::Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = crate::hybrid::dfa::Cache {",
          "        trans: vec![LazyStateID::new(1).unwrap()],",
          "        starts: vec![LazyStateID::new(0).unwrap()],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&b\"\"[..])",
          "        .span(0..0)",
          "        .anchored(crate::Anchored::Unanchored)",
          "        .earliest(false);",
          "    ",
          "    let min_start = 0;",
          "    ",
          "    let _result = crate::hybrid::df::hybrid_try_search_half_rev(&dfa, &mut cache, &input, min_start);",
          "    assert!(dfa.start_state_reverse(&mut cache, &input).is_ok());",
          "    assert_eq!(input.start(), input.end());",
          "    assert!(hybrid_eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat).is_err());",
          "    assert!(matches!(_result, Ok(Some(_))));",
          "    assert!(matches!(_result, Err(RetryError::Quadratic(_))));",
          "    assert!(matches!(_result, Ok(None)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]