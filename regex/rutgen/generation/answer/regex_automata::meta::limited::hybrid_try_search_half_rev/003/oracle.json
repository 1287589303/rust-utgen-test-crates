[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = Cache {",
          "        trans: vec![LazyStateID::new_unchecked(0)],",
          "        starts: vec![LazyStateID::new_unchecked(0)],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&[b'a']).set_span(Span::new(0, 0)).set_earliest(true);",
          "    let min_start = 0;",
          "",
          "    let _result = hybrid_try_search_half_rev(&dfa, &mut cache, &input, min_start);",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.start_state_reverse(&mut cache, &input).is_ok());",
          "    assert_eq!(input.start(), input.end());",
          "    assert!(hybrid_eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat).is_ok());",
          "    assert_eq!(_result, Ok(mat));"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = Cache {",
          "        trans: vec![LazyStateID::new_unchecked(0)],",
          "        starts: vec![LazyStateID::new_unchecked(0)],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&[b'a']).set_span(Span::new(0, 0)).set_earliest(true);",
          "    let min_start = 0;",
          "",
          "    let _result = hybrid_try_search_half_rev(&dfa, &mut cache, &input, min_start);",
          "    assert!(dfa.start_state_reverse(&mut cache, &input).is_ok());",
          "    assert_eq!(input.start(), input.end());",
          "    assert!(hybrid_eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat).is_ok());",
          "    assert_eq!(_result, Ok(mat));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = Cache {",
          "        trans: vec![LazyStateID::new_unchecked(0)],",
          "        starts: vec![LazyStateID::new_unchecked(1)],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&[b'b']).set_span(Span::new(0, 0)).set_earliest(true);",
          "    let min_start = 0;",
          "",
          "    let _result = hybrid_try_search_half_rev(&dfa, &mut cache, &input, min_start);",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.start_state_reverse(&mut cache, &input).is_ok());",
          "    assert_eq!(input.start(), input.end());",
          "    assert!(hybrid_eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat).is_ok());",
          "    assert_eq!(_result, Ok(mat));"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = Cache {",
          "        trans: vec![LazyStateID::new_unchecked(0)],",
          "        starts: vec![LazyStateID::new_unchecked(1)],",
          "        states: vec![],",
          "        states_to_id: StateMap::default(),",
          "        sparses: SparseSets::default(),",
          "        stack: vec![],",
          "        scratch_state_builder: StateBuilderEmpty::default(),",
          "        state_saver: StateSaver::default(),",
          "        memory_usage_state: 0,",
          "        clear_count: 0,",
          "        bytes_searched: 0,",
          "        progress: None,",
          "    };",
          "",
          "    let input = Input::new(&[b'b']).set_span(Span::new(0, 0)).set_earliest(true);",
          "    let min_start = 0;",
          "",
          "    let _result = hybrid_try_search_half_rev(&dfa, &mut cache, &input, min_start);",
          "    assert!(dfa.start_state_reverse(&mut cache, &input).is_ok());",
          "    assert_eq!(input.start(), input.end());",
          "    assert!(hybrid_eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut mat).is_ok());",
          "    assert_eq!(_result, Ok(mat));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]