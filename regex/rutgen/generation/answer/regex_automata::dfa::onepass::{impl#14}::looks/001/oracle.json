[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(0);",
          "    let result = epsilons.looks();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, (0 & Epsilons::LOOK_MASK).low_u32());",
          "    ",
          "    let epsilons = Epsilons(Epsilons::LOOK_MASK);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (Epsilons::LOOK_MASK & Epsilons::LOOK_MASK).low_u32());",
          "    ",
          "    let epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (0xFFFFFFFFFFFFFFFF & Epsilons::LOOK_MASK).low_u32());",
          "    ",
          "    let epsilons = Epsilons(0x000003FF_FFFFFF00);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (0x000003FF_FFFFFF00 & Epsilons::LOOK_MASK).low_u32());",
          "    ",
          "    let epsilons = Epsilons(0x00000000_00000000);",
          "    let result = epsilons.looks();",
          "    assert!(result.bits == 0);"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(0);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (0 & Epsilons::LOOK_MASK).low_u32());",
          "    ",
          "    let epsilons = Epsilons(Epsilons::LOOK_MASK);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (Epsilons::LOOK_MASK & Epsilons::LOOK_MASK).low_u32());",
          "    ",
          "    let epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (0xFFFFFFFFFFFFFFFF & Epsilons::LOOK_MASK).low_u32());",
          "    ",
          "    let epsilons = Epsilons(0x000003FF_FFFFFF00);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (0x000003FF_FFFFFF00 & Epsilons::LOOK_MASK).low_u32());",
          "    ",
          "    let epsilons = Epsilons(0x00000000_00000000);",
          "    let result = epsilons.looks();",
          "    assert!(result.bits == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK);",
          "    let result = epsilons.looks();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, (Epsilons::SLOT_MASK & Epsilons::LOOK_MASK).low_u32());",
          "    assert!(result.bits & Epsilons::LOOK_MASK == result.bits);",
          "    assert!(result.bits <= 0x000003FF);",
          "    assert_eq!(Epsilons::empty().looks().bits, 0);",
          "    assert_eq!(Epsilons(0).looks().bits, 0);",
          "    assert_eq!(Epsilons(Epsilons::LOOK_MASK).looks().bits, Epsilons::LOOK_MASK.low_u32());"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (Epsilons::SLOT_MASK & Epsilons::LOOK_MASK).low_u32());",
          "    assert!(result.bits & Epsilons::LOOK_MASK == result.bits);",
          "    assert!(result.bits <= 0x000003FF);",
          "    assert_eq!(Epsilons::empty().looks().bits, 0);",
          "    assert_eq!(Epsilons(0).looks().bits, 0);",
          "    assert_eq!(Epsilons(Epsilons::LOOK_MASK).looks().bits, Epsilons::LOOK_MASK.low_u32());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(Epsilons::LOOK_MASK);",
          "    let result = epsilons.looks();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, (Epsilons::LOOK_MASK & Epsilons::LOOK_MASK).low_u32());",
          "    let epsilons_empty = Epsilons(0);",
          "    let result_empty = epsilons_empty.looks();",
          "    assert_eq!(result_empty.bits, (0 & Epsilons::LOOK_MASK).low_u32());",
          "    let epsilons_non_zero = Epsilons(0x000003FF_FFFFFC00);",
          "    let result_non_zero = epsilons_non_zero.looks();",
          "    assert_eq!(result_non_zero.bits, (0x000003FF_FFFFFC00 & Epsilons::LOOK_MASK).low_u32());",
          "    let epsilons_high_value = Epsilons(u64::MAX);",
          "    let result_high_value = epsilons_high_value.looks();",
          "    assert_eq!(result_high_value.bits, (u64::MAX & Epsilons::LOOK_MASK).low_u32());"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(Epsilons::LOOK_MASK);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (Epsilons::LOOK_MASK & Epsilons::LOOK_MASK).low_u32());",
          "    let epsilons_empty = Epsilons(0);",
          "    let result_empty = epsilons_empty.looks();",
          "    assert_eq!(result_empty.bits, (0 & Epsilons::LOOK_MASK).low_u32());",
          "    let epsilons_non_zero = Epsilons(0x000003FF_FFFFFC00);",
          "    let result_non_zero = epsilons_non_zero.looks();",
          "    assert_eq!(result_non_zero.bits, (0x000003FF_FFFFFC00 & Epsilons::LOOK_MASK).low_u32());",
          "    let epsilons_high_value = Epsilons(u64::MAX);",
          "    let result_high_value = epsilons_high_value.looks();",
          "    assert_eq!(result_high_value.bits, (u64::MAX & Epsilons::LOOK_MASK).low_u32());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
          "    let result = epsilons.looks();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, (0xFFFFFFFFFFFFFFFF & Epsilons::LOOK_MASK).low_u32());",
          "    assert!(result.bits == 0x00000000000003FF);",
          "    assert_eq!(result.bits, 1023);",
          "    let empty_epsilons = Epsilons::empty();",
          "    assert!(empty_epsilons.looks().bits == 0);",
          "    let non_empty_epsilons = Epsilons(0x000003FF00000000);",
          "    assert!(non_empty_epsilons.looks().bits == 1023);"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(0xFFFFFFFFFFFFFFFF);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (0xFFFFFFFFFFFFFFFF & Epsilons::LOOK_MASK).low_u32());",
          "    assert!(result.bits == 0x00000000000003FF);",
          "    assert_eq!(result.bits, 1023);",
          "    let empty_epsilons = Epsilons::empty();",
          "    assert!(empty_epsilons.looks().bits == 0);",
          "    let non_empty_epsilons = Epsilons(0x000003FF00000000);",
          "    assert!(non_empty_epsilons.looks().bits == 1023);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK / 2);",
          "    let result = epsilons.looks();",
          "}"
        ],
        "oracle": [
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK / 2);",
          "    let expected_bits = (epsilons.0 & Epsilons::LOOK_MASK).low_u32();",
          "    assert_eq!(result.bits, expected_bits);",
          "    let epsilons_empty = Epsilons::empty();",
          "    let result_empty = epsilons_empty.looks();",
          "    assert!(result_empty.bits == 0);",
          "    let epsilons_full = Epsilons(Epsilons::SLOT_MASK | Epsilons::LOOK_MASK);",
          "    let result_full = epsilons_full.looks();",
          "    assert_eq!(result_full.bits, Epsilons::LOOK_MASK.low_u32());",
          "    let epsilons_zero = Epsilons(0);",
          "    let result_zero = epsilons_zero.looks();",
          "    assert_eq!(result_zero.bits, 0);"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK / 2);",
          "    let result = epsilons.looks();",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK / 2);",
          "    let expected_bits = (epsilons.0 & Epsilons::LOOK_MASK).low_u32();",
          "    assert_eq!(result.bits, expected_bits);",
          "    let epsilons_empty = Epsilons::empty();",
          "    let result_empty = epsilons_empty.looks();",
          "    assert!(result_empty.bits == 0);",
          "    let epsilons_full = Epsilons(Epsilons::SLOT_MASK | Epsilons::LOOK_MASK);",
          "    let result_full = epsilons_full.looks();",
          "    assert_eq!(result_full.bits, Epsilons::LOOK_MASK.low_u32());",
          "    let epsilons_zero = Epsilons(0);",
          "    let result_zero = epsilons_zero.looks();",
          "    assert_eq!(result_zero.bits, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(Epsilons::LOOK_MASK / 2);",
          "    let result = epsilons.looks();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, (epsilons.0 & Epsilons::LOOK_MASK).low_u32());",
          "    assert!(result.bits & Epsilons::LOOK_MASK != 0);",
          "    assert_eq!(result.bits, (Epsilons::LOOK_MASK / 2).low_u32());",
          "    assert_eq!(Epsilons::empty().looks().bits, 0);",
          "    assert!(Epsilons::LOOK_MASK.looks().bits & Epsilons::LOOK_MASK == Epsilons::LOOK_MASK.low_u32());"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(Epsilons::LOOK_MASK / 2);",
          "    let result = epsilons.looks();",
          "    assert_eq!(result.bits, (epsilons.0 & Epsilons::LOOK_MASK).low_u32());",
          "    assert!(result.bits & Epsilons::LOOK_MASK != 0);",
          "    assert_eq!(result.bits, (Epsilons::LOOK_MASK / 2).low_u32());",
          "    assert_eq!(Epsilons::empty().looks().bits, 0);",
          "    assert!(Epsilons::LOOK_MASK.looks().bits & Epsilons::LOOK_MASK == Epsilons::LOOK_MASK.low_u32());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]