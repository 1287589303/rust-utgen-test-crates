[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl super::Bound for TestBound {",
          "        fn decrement(self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    let lower = TestBound(5);",
          "    let upper = TestBound(3);",
          "    let interval = TestBound::create(lower, upper);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(interval.lower(), TestBound(3));",
          "    assert_eq!(interval.upper(), TestBound(5));"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl super::Bound for TestBound {",
          "        fn decrement(self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    let lower = TestBound(5);",
          "    let upper = TestBound(3);",
          "    let interval = TestBound::create(lower, upper);",
          "    assert_eq!(interval.lower(), TestBound(3));",
          "    assert_eq!(interval.upper(), TestBound(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl super::Bound for TestBound {",
          "        fn decrement(self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    let lower = TestBound(1000);",
          "    let upper = TestBound(-1000);",
          "    let interval = TestBound::create(lower, upper);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(interval.lower(), TestBound(-1000));",
          "    assert_eq!(interval.upper(), TestBound(1000));",
          "    assert_eq!(interval, TestBound::create(TestBound(-1000), TestBound(1000)));"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl super::Bound for TestBound {",
          "        fn decrement(self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    let lower = TestBound(1000);",
          "    let upper = TestBound(-1000);",
          "    let interval = TestBound::create(lower, upper);",
          "    assert_eq!(interval.lower(), TestBound(-1000));",
          "    assert_eq!(interval.upper(), TestBound(1000));",
          "    assert_eq!(interval, TestBound::create(TestBound(-1000), TestBound(1000)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl super::Bound for TestBound {",
          "        fn decrement(self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    let lower = TestBound(-1);",
          "    let upper = TestBound(0);",
          "    let interval = TestBound::create(lower, upper);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(interval.lower().0, -1);",
          "    assert_eq!(interval.upper().0, 0);",
          "    ",
          "    let lower = TestBound(0);",
          "    let upper = TestBound(-1);",
          "    let interval = TestBound::create(lower, upper);",
          "    ",
          "    assert_eq!(interval.lower().0, -1);",
          "    assert_eq!(interval.upper().0, 0);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl super::Bound for TestBound {",
          "        fn decrement(self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    let lower = TestBound(-1);",
          "    let upper = TestBound(0);",
          "    let interval = TestBound::create(lower, upper);",
          "    assert_eq!(interval.lower().0, -1);",
          "    assert_eq!(interval.upper().0, 0);",
          "    ",
          "    let lower = TestBound(0);",
          "    let upper = TestBound(-1);",
          "    let interval = TestBound::create(lower, upper);",
          "    ",
          "    assert_eq!(interval.lower().0, -1);",
          "    assert_eq!(interval.upper().0, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl super::Bound for TestBound {",
          "        fn decrement(self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    let lower = TestBound(std::i32::MAX);",
          "    let upper = TestBound(std::i32::MIN);",
          "    let interval = TestBound::create(lower, upper);",
          "}"
        ],
        "oracle": [
          "    let lower = TestBound(std::i32::MAX);",
          "    let upper = TestBound(std::i32::MIN);",
          "    let interval = TestBound::create(lower, upper);",
          "    assert_eq!(interval.lower(), upper);",
          "    assert_eq!(interval.upper(), lower);"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]",
          "    struct TestBound(i32);",
          "    ",
          "    impl super::Bound for TestBound {",
          "        fn decrement(self) -> Self {",
          "            TestBound(self.0 - 1)",
          "        }",
          "",
          "        fn increment(self) -> Self {",
          "            TestBound(self.0 + 1)",
          "        }",
          "    }",
          "",
          "    let lower = TestBound(std::i32::MAX);",
          "    let upper = TestBound(std::i32::MIN);",
          "    let interval = TestBound::create(lower, upper);",
          "    let lower = TestBound(std::i32::MAX);",
          "    let upper = TestBound(std::i32::MIN);",
          "    let interval = TestBound::create(lower, upper);",
          "    assert_eq!(interval.lower(), upper);",
          "    assert_eq!(interval.upper(), lower);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]