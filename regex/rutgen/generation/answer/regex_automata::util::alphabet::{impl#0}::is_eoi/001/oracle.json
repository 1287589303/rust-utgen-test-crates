[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unit_0 = Unit(UnitKind::U8(0));",
          "    let unit_255 = Unit(UnitKind::U8(255));",
          "",
          "    unit_0.is_eoi();",
          "    unit_255.is_eoi();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unit_0.is_eoi(), false);",
          "    assert_eq!(unit_255.is_eoi(), false);"
        ],
        "code": [
          "{",
          "    let unit_0 = Unit(UnitKind::U8(0));",
          "    let unit_255 = Unit(UnitKind::U8(255));",
          "",
          "    unit_0.is_eoi();",
          "    unit_255.is_eoi();",
          "    assert_eq!(unit_0.is_eoi(), false);",
          "    assert_eq!(unit_255.is_eoi(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unit_eoi_256 = Unit(UnitKind::EOI(256));",
          "    ",
          "    unit_eoi_256.is_eoi();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unit_eoi_256.is_eoi(), true);",
          "    let unit_byte_0 = Unit(UnitKind::U8(0));",
          "    assert_eq!(unit_byte_0.is_eoi(), false);",
          "    let unit_byte_255 = Unit(UnitKind::U8(255));",
          "    assert_eq!(unit_byte_255.is_eoi(), false);",
          "    let unit_eoi_1 = Unit(UnitKind::EOI(1));",
          "    assert_eq!(unit_eoi_1.is_eoi(), true);"
        ],
        "code": [
          "{",
          "    let unit_eoi_256 = Unit(UnitKind::EOI(256));",
          "    ",
          "    unit_eoi_256.is_eoi();",
          "    assert_eq!(unit_eoi_256.is_eoi(), true);",
          "    let unit_byte_0 = Unit(UnitKind::U8(0));",
          "    assert_eq!(unit_byte_0.is_eoi(), false);",
          "    let unit_byte_255 = Unit(UnitKind::U8(255));",
          "    assert_eq!(unit_byte_255.is_eoi(), false);",
          "    let unit_eoi_1 = Unit(UnitKind::EOI(1));",
          "    assert_eq!(unit_eoi_1.is_eoi(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unit_eoi_255 = Unit(UnitKind::EOI(255));",
          "    ",
          "    unit_eoi_255.is_eoi();",
          "}"
        ],
        "oracle": [
          "    assert!(unit_eoi_255.is_eoi() == true);",
          "    let unit_byte_0 = Unit(UnitKind::U8(0));",
          "    assert!(unit_byte_0.is_eoi() == false);",
          "    let unit_byte_100 = Unit(UnitKind::U8(100));",
          "    assert!(unit_byte_100.is_eoi() == false);",
          "    let unit_eoi_0 = Unit(UnitKind::EOI(0));",
          "    assert!(unit_eoi_0.is_eoi() == true);",
          "    let unit_eoi_256 = Unit(UnitKind::EOI(256));",
          "    assert!(unit_eoi_256.is_eoi() == true);"
        ],
        "code": [
          "{",
          "    let unit_eoi_255 = Unit(UnitKind::EOI(255));",
          "    ",
          "    unit_eoi_255.is_eoi();",
          "    assert!(unit_eoi_255.is_eoi() == true);",
          "    let unit_byte_0 = Unit(UnitKind::U8(0));",
          "    assert!(unit_byte_0.is_eoi() == false);",
          "    let unit_byte_100 = Unit(UnitKind::U8(100));",
          "    assert!(unit_byte_100.is_eoi() == false);",
          "    let unit_eoi_0 = Unit(UnitKind::EOI(0));",
          "    assert!(unit_eoi_0.is_eoi() == true);",
          "    let unit_eoi_256 = Unit(UnitKind::EOI(256));",
          "    assert!(unit_eoi_256.is_eoi() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]