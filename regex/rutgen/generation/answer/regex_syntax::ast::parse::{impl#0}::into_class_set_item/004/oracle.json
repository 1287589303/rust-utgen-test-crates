[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::from(0), end: Position::from(5) };",
          "    let literal = ast::Literal { span: span.clone(), kind: ast::LiteralKind::Basic, c: 'a' };",
          "    let primitive = Primitive::Literal(literal.clone());",
          "    ",
          "    let parser = ParserI {",
          "        parser: RefCell::new(()), // Placeholder parser",
          "        pattern: \"a\",",
          "    };",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ClassSetItem::Literal(literal));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::from(0), end: Position::from(5) };",
          "    let literal = ast::Literal { span: span.clone(), kind: ast::LiteralKind::Basic, c: 'a' };",
          "    let primitive = Primitive::Literal(literal.clone());",
          "    ",
          "    let parser = ParserI {",
          "        parser: RefCell::new(()), // Placeholder parser",
          "        pattern: \"a\",",
          "    };",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ClassSetItem::Literal(literal));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::from(3), end: Position::from(8) };",
          "    let literal = ast::Literal { span: span.clone(), kind: ast::LiteralKind::Basic, c: 'b' };",
          "    let primitive = Primitive::Literal(literal.clone());",
          "    ",
          "    let parser = ParserI {",
          "        parser: RefCell::new(()), // Placeholder parser",
          "        pattern: \"abcde\",",
          "    };",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(ast::ClassSetItem::Literal(literal)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::from(3), end: Position::from(8) };",
          "    let literal = ast::Literal { span: span.clone(), kind: ast::LiteralKind::Basic, c: 'b' };",
          "    let primitive = Primitive::Literal(literal.clone());",
          "    ",
          "    let parser = ParserI {",
          "        parser: RefCell::new(()), // Placeholder parser",
          "        pattern: \"abcde\",",
          "    };",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert_eq!(result, Ok(ast::ClassSetItem::Literal(literal)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::from(1), end: Position::from(2) };",
          "    let literal = ast::Literal { span: span.clone(), kind: ast::LiteralKind::Basic, c: 'c' };",
          "    let primitive = Primitive::Literal(literal.clone());",
          "    ",
          "    let parser = ParserI {",
          "        parser: RefCell::new(()), // Placeholder parser",
          "        pattern: \"test\",",
          "    };",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(ClassSetItem::Literal(literal)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::from(1), end: Position::from(2) };",
          "    let literal = ast::Literal { span: span.clone(), kind: ast::LiteralKind::Basic, c: 'c' };",
          "    let primitive = Primitive::Literal(literal.clone());",
          "    ",
          "    let parser = ParserI {",
          "        parser: RefCell::new(()), // Placeholder parser",
          "        pattern: \"test\",",
          "    };",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert_eq!(result, Ok(ClassSetItem::Literal(literal)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]