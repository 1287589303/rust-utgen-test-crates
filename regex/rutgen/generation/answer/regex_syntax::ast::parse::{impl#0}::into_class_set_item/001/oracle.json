[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Dot(span);",
          "    let parser = ParserI::new((), \".*\");",
          "    let _result = primitive.into_class_set_item(&parser);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Dot(span);",
          "    let parser = ParserI::new((), \".*\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, ast::ErrorKind::ClassEscapeInvalid);",
          "    assert_eq!(result.err().unwrap().span, span);",
          "    assert_eq!(result.err().unwrap().pattern, \".*\".to_string());"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Dot(span);",
          "    let parser = ParserI::new((), \".*\");",
          "    let _result = primitive.into_class_set_item(&parser);",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Dot(span);",
          "    let parser = ParserI::new((), \".*\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind, ast::ErrorKind::ClassEscapeInvalid);",
          "    assert_eq!(result.err().unwrap().span, span);",
          "    assert_eq!(result.err().unwrap().pattern, \".*\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 1 };",
          "    let assertion = Assertion { span, kind: AssertionKind::StartOfLine };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let parser = ParserI::new((), \"^\");",
          "    let _result = primitive.into_class_set_item(&parser);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 0, end: 1 };",
          "    let assertion = Assertion { span, kind: AssertionKind::StartOfLine };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let parser = ParserI::new((), \"^\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::ClassEscapeInvalid);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 1 };",
          "    let assertion = Assertion { span, kind: AssertionKind::StartOfLine };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let parser = ParserI::new((), \"^\");",
          "    let _result = primitive.into_class_set_item(&parser);",
          "    let span = Span { start: 0, end: 1 };",
          "    let assertion = Assertion { span, kind: AssertionKind::StartOfLine };",
          "    let primitive = Primitive::Assertion(assertion);",
          "    let parser = ParserI::new((), \"^\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::ClassEscapeInvalid);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Unicode(ClassUnicode { span, negated: false, kind: ClassUnicodeKind::Other });",
          "    let parser = ParserI::new((), \"\\\\w\");",
          "    let _result = primitive.into_class_set_item(&parser);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Literal(Literal { span, kind: LiteralKind::Other, c: 'a' });",
          "    let parser = ParserI::new((), \"\\\\w\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::ClassEscapeInvalid);",
          "    ",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Assertion(Assertion { span, kind: AssertionKind::WordBoundary });",
          "    let parser = ParserI::new((), \"\\\\w\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::ClassEscapeInvalid);",
          "    ",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Dot(span);",
          "    let parser = ParserI::new((), \"\\\\w\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::ClassEscapeInvalid);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Unicode(ClassUnicode { span, negated: false, kind: ClassUnicodeKind::Other });",
          "    let parser = ParserI::new((), \"\\\\w\");",
          "    let _result = primitive.into_class_set_item(&parser);",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Literal(Literal { span, kind: LiteralKind::Other, c: 'a' });",
          "    let parser = ParserI::new((), \"\\\\w\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::ClassEscapeInvalid);",
          "    ",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Assertion(Assertion { span, kind: AssertionKind::WordBoundary });",
          "    let parser = ParserI::new((), \"\\\\w\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::ClassEscapeInvalid);",
          "    ",
          "    let span = Span { start: 0, end: 1 };",
          "    let primitive = Primitive::Dot(span);",
          "    let parser = ParserI::new((), \"\\\\w\");",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ast::ErrorKind::ClassEscapeInvalid);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]