[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::SomeValidKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    ",
          "    let pattern = \"test_pattern\";",
          "    let parser = ParserI::new((), pattern);",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(ClassSetItem::Perl(perl_class)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::SomeValidKind, negated: false };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    ",
          "    let pattern = \"test_pattern\";",
          "    let parser = ParserI::new((), pattern);",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert_eq!(result, Ok(ClassSetItem::Perl(perl_class)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::SomeValidKind, negated: true };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    ",
          "    let pattern = \"test_pattern\";",
          "    let parser = ParserI::new((), pattern);",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ClassSetItem::Perl(perl_class));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::SomeValidKind, negated: true };",
          "    let primitive = Primitive::Perl(perl_class);",
          "    ",
          "    let pattern = \"test_pattern\";",
          "    let parser = ParserI::new((), pattern);",
          "    ",
          "    let result = primitive.into_class_set_item(&parser);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), ClassSetItem::Perl(perl_class));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]