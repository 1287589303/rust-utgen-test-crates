[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: Vec<u32> = vec![1, 2, 3, 4, 5];",
          "    let start_map = StartByteMap { map: Default::default() };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut start_table_clone = start_table.clone();",
          "    let _result: &mut [StateID] = start_table_clone.table_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.len(), 5);",
          "    assert_eq!(_result[0], StateID(1.into()));",
          "    assert_eq!(_result[1], StateID(2.into()));",
          "    assert_eq!(_result[2], StateID(3.into()));",
          "    assert_eq!(_result[3], StateID(4.into()));",
          "    assert_eq!(_result[4], StateID(5.into()));",
          "    assert_eq!(start_table.table.len(), 5);",
          "    assert!(std::ptr::eq(_result.as_ptr(), start_table_clone.table_mut().as_ptr()));",
          "    assert_eq!(start_table_clone.table_mut().len(), 5);",
          "    assert!(start_table_clone.table_mut() as *mut _ == _result as *mut _);"
        ],
        "code": [
          "{",
          "    let mut table: Vec<u32> = vec![1, 2, 3, 4, 5];",
          "    let start_map = StartByteMap { map: Default::default() };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut start_table_clone = start_table.clone();",
          "    let _result: &mut [StateID] = start_table_clone.table_mut();",
          "    assert_eq!(_result.len(), 5);",
          "    assert_eq!(_result[0], StateID(1.into()));",
          "    assert_eq!(_result[1], StateID(2.into()));",
          "    assert_eq!(_result[2], StateID(3.into()));",
          "    assert_eq!(_result[3], StateID(4.into()));",
          "    assert_eq!(_result[4], StateID(5.into()));",
          "    assert_eq!(start_table.table.len(), 5);",
          "    assert!(std::ptr::eq(_result.as_ptr(), start_table_clone.table_mut().as_ptr()));",
          "    assert_eq!(start_table_clone.table_mut().len(), 5);",
          "    assert!(start_table_clone.table_mut() as *mut _ == _result as *mut _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[u32] = &[1, 2, 3, 4, 5];",
          "    let start_map = StartByteMap { map: Default::default() };",
          "    let start_table = StartTable {",
          "        table: table,",
          "        kind: StartKind::Unanchored,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut start_table_clone = start_table.clone();",
          "    let _result: &mut [StateID] = start_table_clone.table_mut();",
          "}"
        ],
        "oracle": [
          "    let table: &[u32] = &[1, 2, 3, 4, 5];",
          "    let start_map = StartByteMap { map: Default::default() };",
          "    let start_table = StartTable {",
          "    table: table,",
          "    kind: StartKind::Unanchored,",
          "    start_map,",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let mut start_table_clone = start_table.clone();",
          "    let _result: &mut [StateID] = start_table_clone.table_mut();",
          "    assert_eq!(_result.len(), 5);",
          "    assert_eq!(_result[0], StateID(1));",
          "    assert_eq!(_result[1], StateID(2));",
          "    assert_eq!(_result[2], StateID(3));",
          "    assert_eq!(_result[3], StateID(4));",
          "    assert_eq!(_result[4], StateID(5));"
        ],
        "code": [
          "{",
          "    let table: &[u32] = &[1, 2, 3, 4, 5];",
          "    let start_map = StartByteMap { map: Default::default() };",
          "    let start_table = StartTable {",
          "        table: table,",
          "        kind: StartKind::Unanchored,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut start_table_clone = start_table.clone();",
          "    let _result: &mut [StateID] = start_table_clone.table_mut();",
          "    let table: &[u32] = &[1, 2, 3, 4, 5];",
          "    let start_map = StartByteMap { map: Default::default() };",
          "    let start_table = StartTable {",
          "    table: table,",
          "    kind: StartKind::Unanchored,",
          "    start_map,",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let mut start_table_clone = start_table.clone();",
          "    let _result: &mut [StateID] = start_table_clone.table_mut();",
          "    assert_eq!(_result.len(), 5);",
          "    assert_eq!(_result[0], StateID(1));",
          "    assert_eq!(_result[1], StateID(2));",
          "    assert_eq!(_result[2], StateID(3));",
          "    assert_eq!(_result[3], StateID(4));",
          "    assert_eq!(_result[4], StateID(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: Vec<u32> = vec![10];",
          "    let start_map = StartByteMap { map: Default::default() };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Anchored,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut start_table_clone = start_table.clone();",
          "    let _result: &mut [StateID] = start_table_clone.table_mut();",
          "}"
        ],
        "oracle": [
          "    let expected_table: &mut [StateID] = wire::u32s_to_state_ids_mut(&mut vec![10]);",
          "    assert_eq!(_result.len(), expected_table.len());",
          "    assert_eq!(_result[0], expected_table[0]);",
          "    assert_eq!(_result.as_ptr(), expected_table.as_ptr());",
          "    let initial_value = _result[0];",
          "    start_table_clone.table_mut()[0] = StateID(SmallIndex::new(1));",
          "    assert_ne!(_result[0], initial_value);"
        ],
        "code": [
          "{",
          "    let mut table: Vec<u32> = vec![10];",
          "    let start_map = StartByteMap { map: Default::default() };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Anchored,",
          "        start_map,",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let mut start_table_clone = start_table.clone();",
          "    let _result: &mut [StateID] = start_table_clone.table_mut();",
          "    let expected_table: &mut [StateID] = wire::u32s_to_state_ids_mut(&mut vec![10]);",
          "    assert_eq!(_result.len(), expected_table.len());",
          "    assert_eq!(_result[0], expected_table[0]);",
          "    assert_eq!(_result.as_ptr(), expected_table.as_ptr());",
          "    let initial_value = _result[0];",
          "    start_table_clone.table_mut()[0] = StateID(SmallIndex::new(1));",
          "    assert_ne!(_result[0], initial_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]