[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut config = Config::new()",
          "        .unicode_word_boundary(true); // precondition: self.get_unicode_word_boundary() is true",
          "    ",
          "    let non_ascii_byte = 128; // a non-ASCII byte",
          "",
          "    config.quit(non_ascii_byte, false); // precondition: byte.is_ascii() is false, yes is false",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert!(non_ascii_byte.is_ascii() == false);",
          "    assert!(config.quitset.is_some());",
          "    assert!(panic::catch_unwind(move || {",
          "    config.quit(non_ascii_byte, false);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut config = Config::new()",
          "        .unicode_word_boundary(true); // precondition: self.get_unicode_word_boundary() is true",
          "    ",
          "    let non_ascii_byte = 128; // a non-ASCII byte",
          "",
          "    config.quit(non_ascii_byte, false); // precondition: byte.is_ascii() is false, yes is false",
          "    assert_eq!(config.get_unicode_word_boundary(), true);",
          "    assert!(non_ascii_byte.is_ascii() == false);",
          "    assert!(config.quitset.is_some());",
          "    assert!(panic::catch_unwind(move || {",
          "    config.quit(non_ascii_byte, false);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut config = Config::new()",
          "        .unicode_word_boundary(true); // precondition: self.get_unicode_word_boundary() is true",
          "    ",
          "    let non_ascii_byte = 200; // another non-ASCII byte",
          "",
          "    config.quit(non_ascii_byte, false); // precondition: byte.is_ascii() is false, yes is false",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut config = Config::new().unicode_word_boundary(true);",
          "    let non_ascii_byte = 200;",
          "    config.quit(non_ascii_byte, false);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut config = Config::new()",
          "        .unicode_word_boundary(true); // precondition: self.get_unicode_word_boundary() is true",
          "    ",
          "    let non_ascii_byte = 200; // another non-ASCII byte",
          "",
          "    config.quit(non_ascii_byte, false); // precondition: byte.is_ascii() is false, yes is false",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut config = Config::new().unicode_word_boundary(true);",
          "    let non_ascii_byte = 200;",
          "    config.quit(non_ascii_byte, false);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]