[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pike_vm = PikeVM {",
          "        config: Config::default(),",
          "        nfa: NFA(Arc::new(Default::default())),",
          "    };",
          "    let input = Input::new(&[]).span(0..0);",
          "    let mut cache = Cache::new(&pike_vm);",
          "    let mut patset = PatternSet::new(0);",
          "",
          "    pike_vm.which_overlapping_imp(&mut cache, &input, &mut patset);",
          "}"
        ],
        "oracle": [
          "    assert!(patset.is_empty());",
          "    assert_eq!(cache.memory_usage(), 0);",
          "    assert!(input.is_done());",
          "    assert!(input.get_span().start == input.get_span().end);",
          "    assert!(input.start() == input.end());"
        ],
        "code": [
          "{",
          "    let pike_vm = PikeVM {",
          "        config: Config::default(),",
          "        nfa: NFA(Arc::new(Default::default())),",
          "    };",
          "    let input = Input::new(&[]).span(0..0);",
          "    let mut cache = Cache::new(&pike_vm);",
          "    let mut patset = PatternSet::new(0);",
          "",
          "    pike_vm.which_overlapping_imp(&mut cache, &input, &mut patset);",
          "    assert!(patset.is_empty());",
          "    assert_eq!(cache.memory_usage(), 0);",
          "    assert!(input.is_done());",
          "    assert!(input.get_span().start == input.get_span().end);",
          "    assert!(input.start() == input.end());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pike_vm = PikeVM {",
          "        config: Config::default(),",
          "        nfa: NFA(Arc::new(Default::default())),",
          "    };",
          "    let input = Input::new(&[]).span(0..0);",
          "    let mut cache = Cache::new(&pike_vm);",
          "    let mut patset = PatternSet::new(0);",
          "",
          "    pike_vm.which_overlapping_imp(&mut cache, &input, &mut patset);",
          "}"
        ],
        "oracle": [
          "    assert!(patset.is_empty());",
          "    assert!(cache.stack.is_empty());",
          "    assert!(cache.curr.set.is_empty());",
          "    assert!(cache.next.set.is_empty());",
          "    assert_eq!(input.start(), 0);",
          "    assert_eq!(input.end(), 0);",
          "    assert!(input.is_done());",
          "    assert_eq!(cache.memory_usage(), 0);",
          "    assert!(matches!(pike_vm.config.get_match_kind(), MatchKind::LeftmostFirst));"
        ],
        "code": [
          "{",
          "    let pike_vm = PikeVM {",
          "        config: Config::default(),",
          "        nfa: NFA(Arc::new(Default::default())),",
          "    };",
          "    let input = Input::new(&[]).span(0..0);",
          "    let mut cache = Cache::new(&pike_vm);",
          "    let mut patset = PatternSet::new(0);",
          "",
          "    pike_vm.which_overlapping_imp(&mut cache, &input, &mut patset);",
          "    assert!(patset.is_empty());",
          "    assert!(cache.stack.is_empty());",
          "    assert!(cache.curr.set.is_empty());",
          "    assert!(cache.next.set.is_empty());",
          "    assert_eq!(input.start(), 0);",
          "    assert_eq!(input.end(), 0);",
          "    assert!(input.is_done());",
          "    assert_eq!(cache.memory_usage(), 0);",
          "    assert!(matches!(pike_vm.config.get_match_kind(), MatchKind::LeftmostFirst));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]