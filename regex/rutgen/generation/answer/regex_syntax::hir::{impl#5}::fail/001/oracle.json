[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::fail();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::empty())));",
          "    assert_eq!(result.props, Properties::class(&Class::Bytes(ClassBytes::empty())));",
          "    assert!(match result.kind { HirKind::Class(ref c) if c == &Class::Bytes(ClassBytes::empty()) => true, _ => false });",
          "    assert!(result.props.0.minimum_len.is_none());",
          "    assert!(result.props.0.maximum_len.is_none());",
          "    assert!(!result.props.0.literal);",
          "    assert!(!result.props.0.alternation_literal);"
        ],
        "code": [
          "{",
          "    let result = Hir::fail();",
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::empty())));",
          "    assert_eq!(result.props, Properties::class(&Class::Bytes(ClassBytes::empty())));",
          "    assert!(match result.kind { HirKind::Class(ref c) if c == &Class::Bytes(ClassBytes::empty()) => true, _ => false });",
          "    assert!(result.props.0.minimum_len.is_none());",
          "    assert!(result.props.0.maximum_len.is_none());",
          "    assert!(!result.props.0.literal);",
          "    assert!(!result.props.0.alternation_literal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::fail();",
          "    let class = Class::Bytes(ClassBytes::empty());",
          "    let props = Properties::class(&class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Class(class));",
          "    assert_eq!(result.props, props);",
          "    assert_eq!(result.props.0.minimum_len, None);",
          "    assert_eq!(result.props.0.maximum_len, None);",
          "    assert_eq!(result.props.0.utf8, false);",
          "    assert_eq!(result.props.0.literal, false);",
          "    assert_eq!(result.props.0.alternation_literal, false);"
        ],
        "code": [
          "{",
          "    let result = Hir::fail();",
          "    let class = Class::Bytes(ClassBytes::empty());",
          "    let props = Properties::class(&class);",
          "    assert_eq!(result.kind, HirKind::Class(class));",
          "    assert_eq!(result.props, props);",
          "    assert_eq!(result.props.0.minimum_len, None);",
          "    assert_eq!(result.props.0.maximum_len, None);",
          "    assert_eq!(result.props.0.utf8, false);",
          "    assert_eq!(result.props.0.literal, false);",
          "    assert_eq!(result.props.0.alternation_literal, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]