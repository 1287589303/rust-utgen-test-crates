[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"(abc|def)\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"(abc|def)\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(None),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]), Hir::concat(vec![Hir::char('d'), Hir::char('e'), Hir::char('f')])]));",
          "    assert!(hir.is_match_empty());",
          "    assert!(!hir.is_start_anchored);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"(abc|def)\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse();",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"(abc|def)\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(None),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]), Hir::concat(vec![Hir::char('d'), Hir::char('e'), Hir::char('f')])]));",
          "    assert!(hir.is_match_empty());",
          "    assert!(!hir.is_start_anchored);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"(abc(d|e)f)*\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse();",
          "}"
        ],
        "oracle": [
          "    self.parse_inner() is Ok/hir for pattern \"(abc(d|e)f)*\" and config.nest_limit 5",
          "    check_hir_nesting(&hir, self.config.nest_limit) is Ok/hir for pattern \"(abc(d|e)f)*\" with depth at 2 (or lower)",
          "    parser.parse() returns Ok(hir) for pattern \"(abc(d|e)f)*\" and config.nest_limit 5"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 5, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"(abc(d|e)f)*\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse();",
          "    self.parse_inner() is Ok/hir for pattern \"(abc(d|e)f)*\" and config.nest_limit 5",
          "    check_hir_nesting(&hir, self.config.nest_limit) is Ok/hir for pattern \"(abc(d|e)f)*\" with depth at 2 (or lower)",
          "    parser.parse() returns Ok(hir) for pattern \"(abc(d|e)f)*\" and config.nest_limit 5",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    flags.case_insensitive = true;",
          "    let config = Config { nest_limit: 10, flags };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"(?i)(abc|def)\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse();",
          "}"
        ],
        "oracle": [
          "    let mut flags = Flags::default();",
          "    flags.case_insensitive = true;",
          "    let config = Config { nest_limit: 10, flags };",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"(?i)(abc|def)\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(None),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]), Hir::concat(vec![Hir::char('d'), Hir::char('e'), Hir::char('f')])]));",
          "    assert!(hir.is_start_anchored());",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    flags.case_insensitive = true;",
          "    let config = Config { nest_limit: 10, flags };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"(?i)(abc|def)\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse();",
          "    let mut flags = Flags::default();",
          "    flags.case_insensitive = true;",
          "    let config = Config { nest_limit: 10, flags };",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"(?i)(abc|def)\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(None),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), HirKind::Alternation(vec![Hir::concat(vec![Hir::char('a'), Hir::char('b'), Hir::char('c')]), Hir::concat(vec![Hir::char('d'), Hir::char('e'), Hir::char('f')])]));",
          "    assert!(hir.is_start_anchored());",
          "    assert!(!hir.is_match_empty());",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 6, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"((a|b)|(c|d))e\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse().is_ok(), true);",
          "    assert!(parser.parse().unwrap().is_a::<Hir>());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char.get(), None);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 6, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"((a|b)|(c|d))e\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse();",
          "    assert_eq!(parser.parse().is_ok(), true);",
          "    assert!(parser.parse().unwrap().is_a::<Hir>());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]