[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = MatchKind::All;",
          "    let hirs: Vec<()> = Vec::new(); // no Borrow<Hir> implementations available",
          "    let result = suffixes(kind, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_empty());",
          "    assert_eq!(result.len(), 0);",
          "    assert!(matches!(result, literal::Seq::empty()));",
          "    assert!(result.is_exact() == false);"
        ],
        "code": [
          "{",
          "    let kind = MatchKind::All;",
          "    let hirs: Vec<()> = Vec::new(); // no Borrow<Hir> implementations available",
          "    let result = suffixes(kind, &hirs);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.len(), 0);",
          "    assert!(matches!(result, literal::Seq::empty()));",
          "    assert!(result.is_exact() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NonHir;",
          "",
          "    let kind = MatchKind::All;",
          "    let hirs: Vec<NonHir> = vec![NonHir, NonHir]; // no Borrow<Hir> implementations available",
          "    let result = suffixes(kind, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_exact() == false);",
          "    assert!(result.is_empty());"
        ],
        "code": [
          "{",
          "    struct NonHir;",
          "",
          "    let kind = MatchKind::All;",
          "    let hirs: Vec<NonHir> = vec![NonHir, NonHir]; // no Borrow<Hir> implementations available",
          "    let result = suffixes(kind, &hirs);",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_exact() == false);",
          "    assert!(result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]