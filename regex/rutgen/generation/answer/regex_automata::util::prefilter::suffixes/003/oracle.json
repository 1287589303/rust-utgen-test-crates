[
  {
    "uses": [
      "use regex_syntax::hir::Literal;",
      "use regex_syntax::hir::Hir;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, Literal};",
          "",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let hirs: Vec<Hir> = Vec::new();",
          "    ",
          "    let result = suffixes(kind, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_exact() == false);",
          "    assert_eq!(result, literal::Seq::empty());"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, Literal};",
          "",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let hirs: Vec<Hir> = Vec::new();",
          "    ",
          "    let result = suffixes(kind, &hirs);",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_exact() == false);",
          "    assert_eq!(result, literal::Seq::empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, Literal};",
          "",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let literal_hir = Hir::Literal(Literal::new(\"a\"));",
          "    let hirs = vec![literal_hir];",
          "    ",
          "    let result = suffixes(kind, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_exact() == false);"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, Literal};",
          "",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let literal_hir = Hir::Literal(Literal::new(\"a\"));",
          "    let hirs = vec![literal_hir];",
          "    ",
          "    let result = suffixes(kind, &hirs);",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_exact() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, Literal};",
          "",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let hirs = vec![",
          "        Hir::Literal(Literal::new(\"abc\")),",
          "        Hir::Literal(Literal::new(\"def\")),",
          "        Hir::Literal(Literal::new(\"ghij\")),",
          "    ];",
          "    ",
          "    let result = suffixes(kind, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.is_exact());",
          "    assert!(result.contains(&\"abc\"));",
          "    assert!(result.contains(&\"def\"));",
          "    assert!(result.contains(&\"ghij\"));",
          "    assert_eq!(result.get(0), Some(&\"abc\"));",
          "    assert_eq!(result.get(1), Some(&\"def\"));",
          "    assert_eq!(result.get(2), Some(&\"ghij\"));"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, Literal};",
          "",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let hirs = vec![",
          "        Hir::Literal(Literal::new(\"abc\")),",
          "        Hir::Literal(Literal::new(\"def\")),",
          "        Hir::Literal(Literal::new(\"ghij\")),",
          "    ];",
          "    ",
          "    let result = suffixes(kind, &hirs);",
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.is_exact());",
          "    assert!(result.contains(&\"abc\"));",
          "    assert!(result.contains(&\"def\"));",
          "    assert!(result.contains(&\"ghij\"));",
          "    assert_eq!(result.get(0), Some(&\"abc\"));",
          "    assert_eq!(result.get(1), Some(&\"def\"));",
          "    assert_eq!(result.get(2), Some(&\"ghij\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use regex_syntax::hir::{Hir, Literal};",
          "",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let literal_hir = Hir::Literal(Literal::new(\"xyz\"));",
          "    let hirs = vec![literal_hir.clone(), literal_hir.clone()];",
          "    ",
          "    let result = suffixes(kind, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), expected_length);",
          "    assert!(result.is_exact() == expected_exact);",
          "    assert!(result.contains(expected_suffix));",
          "    assert!(hirs.is_empty() || hirs.iter().all(|hir| match hir.borrow() { Hir::Literal(_) => true, _ => false }));"
        ],
        "code": [
          "{",
          "    use regex_syntax::hir::{Hir, Literal};",
          "",
          "    let kind = MatchKind::LeftmostFirst;",
          "    let literal_hir = Hir::Literal(Literal::new(\"xyz\"));",
          "    let hirs = vec![literal_hir.clone(), literal_hir.clone()];",
          "    ",
          "    let result = suffixes(kind, &hirs);",
          "    assert_eq!(result.len(), expected_length);",
          "    assert!(result.is_exact() == expected_exact);",
          "    assert!(result.contains(expected_suffix));",
          "    assert!(hirs.is_empty() || hirs.iter().all(|hir| match hir.borrow() { Hir::Literal(_) => true, _ => false }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]