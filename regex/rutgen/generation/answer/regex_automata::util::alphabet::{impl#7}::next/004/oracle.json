[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockClass;",
          "    impl MockClass {",
          "        fn is_byte(&self, _: u8) -> bool {",
          "            false",
          "        }",
          "        fn is_eoi(&self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let classes = ByteClasses::empty();",
          "    let class = Unit(UnitKind::U8(0));",
          "    let mut elements = ByteClassElements {",
          "        classes: &classes,",
          "        class,",
          "        byte: 0,",
          "    };",
          "",
          "    while elements.byte < 256 {",
          "        let result = elements.next();",
          "        // We do not assert, as per instructions",
          "    }",
          "}"
        ],
        "oracle": [
          "    elements.byte = 0;",
          "    result = elements.next();",
          "    assert_eq!(result, Some(Unit::u8(0)));",
          "    elements.byte = 1;",
          "    result = elements.next();",
          "    assert_eq!(result, Some(Unit::u8(1)));",
          "    elements.byte = 255;",
          "    result = elements.next();",
          "    assert_eq!(result, Some(Unit::u8(255)));",
          "    elements.byte = 256;",
          "    result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 257;",
          "    result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 256;",
          "    elements.class = Unit(UnitKind::U8(1));",
          "    result = elements.next();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct MockClass;",
          "    impl MockClass {",
          "        fn is_byte(&self, _: u8) -> bool {",
          "            false",
          "        }",
          "        fn is_eoi(&self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let classes = ByteClasses::empty();",
          "    let class = Unit(UnitKind::U8(0));",
          "    let mut elements = ByteClassElements {",
          "        classes: &classes,",
          "        class,",
          "        byte: 0,",
          "    };",
          "",
          "    while elements.byte < 256 {",
          "        let result = elements.next();",
          "        // We do not assert, as per instructions",
          "    }",
          "    elements.byte = 0;",
          "    result = elements.next();",
          "    assert_eq!(result, Some(Unit::u8(0)));",
          "    elements.byte = 1;",
          "    result = elements.next();",
          "    assert_eq!(result, Some(Unit::u8(1)));",
          "    elements.byte = 255;",
          "    result = elements.next();",
          "    assert_eq!(result, Some(Unit::u8(255)));",
          "    elements.byte = 256;",
          "    result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 257;",
          "    result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 256;",
          "    elements.class = Unit(UnitKind::U8(1));",
          "    result = elements.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockClass;",
          "    impl MockClass {",
          "        fn is_byte(&self, _: u8) -> bool {",
          "            false",
          "        }",
          "        fn is_eoi(&self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let classes = ByteClasses::empty();",
          "    let class = Unit(UnitKind::U8(0));",
          "    let mut elements = ByteClassElements {",
          "        classes: &classes,",
          "        class,",
          "        byte: 256,",
          "    };",
          "",
          "    let result = elements.next();",
          "    // We do not assert, as per instructions",
          "}"
        ],
        "oracle": [
          "    elements.byte = 256;",
          "    result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 255;",
          "    let result = elements.next();",
          "    assert_eq!(result, Some(Unit::u8(255)));",
          "    elements.byte = 256;",
          "    let result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 257;",
          "    let result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 256;",
          "    let result = elements.next();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct MockClass;",
          "    impl MockClass {",
          "        fn is_byte(&self, _: u8) -> bool {",
          "            false",
          "        }",
          "        fn is_eoi(&self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let classes = ByteClasses::empty();",
          "    let class = Unit(UnitKind::U8(0));",
          "    let mut elements = ByteClassElements {",
          "        classes: &classes,",
          "        class,",
          "        byte: 256,",
          "    };",
          "",
          "    let result = elements.next();",
          "    // We do not assert, as per instructions",
          "    elements.byte = 256;",
          "    result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 255;",
          "    let result = elements.next();",
          "    assert_eq!(result, Some(Unit::u8(255)));",
          "    elements.byte = 256;",
          "    let result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 257;",
          "    let result = elements.next();",
          "    assert_eq!(result, None);",
          "    elements.byte = 256;",
          "    let result = elements.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockClass;",
          "    impl MockClass {",
          "        fn is_byte(&self, _: u8) -> bool {",
          "            false",
          "        }",
          "        fn is_eoi(&self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let classes = ByteClasses::empty();",
          "    let class = Unit(UnitKind::U8(0));",
          "    let mut elements = ByteClassElements {",
          "        classes: &classes,",
          "        class,",
          "        byte: 257,",
          "    };",
          "",
          "    let result = elements.next();",
          "    // We do not assert, as per instructions",
          "}"
        ],
        "oracle": [
          "    elements.byte = 0;",
          "    elements.class = Unit(UnitKind::U8(0));",
          "    elements.classes.set(0, 1);",
          "    assert_eq!(elements.next(), Some(Unit::u8(0)));",
          "    elements.byte = 256;",
          "    assert_eq!(elements.next(), None);",
          "    elements.byte = 255;",
          "    assert_eq!(elements.next(), None);",
          "    elements.byte = 256;",
          "    elements.class = Unit(UnitKind::U8(1));",
          "    assert_eq!(elements.next(), None);",
          "    elements.byte = 256;",
          "    elements.class = Unit(UnitKind::EOI(256));",
          "    assert_eq!(elements.next(), Some(Unit::eoi(256)));"
        ],
        "code": [
          "{",
          "    struct MockClass;",
          "    impl MockClass {",
          "        fn is_byte(&self, _: u8) -> bool {",
          "            false",
          "        }",
          "        fn is_eoi(&self) -> bool {",
          "            false",
          "        }",
          "    }",
          "",
          "    let classes = ByteClasses::empty();",
          "    let class = Unit(UnitKind::U8(0));",
          "    let mut elements = ByteClassElements {",
          "        classes: &classes,",
          "        class,",
          "        byte: 257,",
          "    };",
          "",
          "    let result = elements.next();",
          "    // We do not assert, as per instructions",
          "    elements.byte = 0;",
          "    elements.class = Unit(UnitKind::U8(0));",
          "    elements.classes.set(0, 1);",
          "    assert_eq!(elements.next(), Some(Unit::u8(0)));",
          "    elements.byte = 256;",
          "    assert_eq!(elements.next(), None);",
          "    elements.byte = 255;",
          "    assert_eq!(elements.next(), None);",
          "    elements.byte = 256;",
          "    elements.class = Unit(UnitKind::U8(1));",
          "    assert_eq!(elements.next(), None);",
          "    elements.byte = 256;",
          "    elements.class = Unit(UnitKind::EOI(256));",
          "    assert_eq!(elements.next(), Some(Unit::eoi(256)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]