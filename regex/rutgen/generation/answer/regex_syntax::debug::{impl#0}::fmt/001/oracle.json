[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(0);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.as_str(), \"\\x00\");",
          "    assert_eq!(buf.as_str().len(), 2);",
          "    assert!(buf.as_str().is_ascii());",
          "    assert!(buf.as_str().chars().all(|c| c.is_control() || c.is_ascii_graphic()));"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(0);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf.as_str(), \"\\x00\");",
          "    assert_eq!(buf.as_str().len(), 2);",
          "    assert!(buf.as_str().is_ascii());",
          "    assert!(buf.as_str().chars().all(|c| c.is_control() || c.is_ascii_graphic()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(1);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "}"
        ],
        "oracle": [
          "    let byte = super::Byte(1);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let result = byte.fmt(&mut buf);",
          "    assert!(result.is_ok());",
          "    let output = buf.as_str();",
          "    assert_eq!(output, r\"\\x01\");"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(1);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "    let byte = super::Byte(1);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let result = byte.fmt(&mut buf);",
          "    assert!(result.is_ok());",
          "    let output = buf.as_str();",
          "    assert_eq!(output, r\"\\x01\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(31);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "}"
        ],
        "oracle": [
          "    write!(buf, \"{}\", byte);",
          "    assert_eq!(buf, b\"\\x1f\");",
          "    let byte = super::Byte(127);",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf, b\"\\x7f\");",
          "    let byte = super::Byte(0);",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf, b\"\\x00\");",
          "    let byte = super::Byte(32);",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf, b\"' '\");",
          "    let byte = super::Byte(65);",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf, b\"A\");"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(31);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "    write!(buf, \"{}\", byte);",
          "    assert_eq!(buf, b\"\\x1f\");",
          "    let byte = super::Byte(127);",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf, b\"\\x7f\");",
          "    let byte = super::Byte(0);",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf, b\"\\x00\");",
          "    let byte = super::Byte(32);",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf, b\"' '\");",
          "    let byte = super::Byte(65);",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf, b\"A\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(33);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "}"
        ],
        "oracle": [
          "    let byte = super::Byte(33);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let result = byte.fmt(&mut buf);",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf.as_str(), \"\\x21\");"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(33);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "    let byte = super::Byte(33);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let result = byte.fmt(&mut buf);",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf.as_str(), \"\\x21\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(126);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "}"
        ],
        "oracle": [
          "    let byte = super::Byte(126);",
          "    let expected_output = \"~\";",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf.to_string(), expected_output);"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(126);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "    let byte = super::Byte(126);",
          "    let expected_output = \"~\";",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "    assert_eq!(buf.to_string(), expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(255);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"' '\") == Err(core::fmt::Error)",
          "    core::str::from_utf8(&bytes[..len]).unwrap() == \"0xFF\"",
          "    len == 4",
          "    bytes[0] == b'\\\\'",
          "    bytes[1] == b'x'",
          "    bytes[2] == b'F'",
          "    bytes[3] == b'F'"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(255);",
          "    let mut buf = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut buf);",
          "    write!(f, \"' '\") == Err(core::fmt::Error)",
          "    core::str::from_utf8(&bytes[..len]).unwrap() == \"0xFF\"",
          "    len == 4",
          "    bytes[0] == b'\\\\'",
          "    bytes[1] == b'x'",
          "    bytes[2] == b'F'",
          "    bytes[3] == b'F'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]