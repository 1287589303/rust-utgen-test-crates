[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(b' ');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let byte_space = super::Byte(b' ');",
          "    let mut formatter_space = core::fmt::Formatter::new();",
          "    assert!(byte_space.fmt(&mut formatter_space).is_ok());",
          "    let output_space = formatter_space.to_string();",
          "    assert_eq!(output_space, \"' '\");",
          "    ",
          "    let byte_valid = super::Byte(b'A');",
          "    let mut formatter_valid = core::fmt::Formatter::new();",
          "    assert!(byte_valid.fmt(&mut formatter_valid).is_ok());",
          "    let output_valid = formatter_valid.to_string();",
          "    assert_eq!(output_valid, \"\\\\x41\");",
          "    ",
          "    let byte_lower_hex = super::Byte(b'\\x0a');",
          "    let mut formatter_lower_hex = core::fmt::Formatter::new();",
          "    assert!(byte_lower_hex.fmt(&mut formatter_lower_hex).is_ok());",
          "    let output_lower_hex = formatter_lower_hex.to_string();",
          "    assert_eq!(output_lower_hex, \"\\\\n\");",
          "    ",
          "    let byte_upper_hex = super::Byte(b'\\x1f');",
          "    let mut formatter_upper_hex = core::fmt::Formatter::new();",
          "    assert!(byte_upper_hex.fmt(&mut formatter_upper_hex).is_ok());",
          "    let output_upper_hex = formatter_upper_hex.to_string();",
          "    assert_eq!(output_upper_hex, \"\\\\x1F\");",
          "    ",
          "    let byte_invalid = super::Byte(b'\\x80');",
          "    let mut formatter_invalid = core::fmt::Formatter::new();",
          "    assert!(byte_invalid.fmt(&mut formatter_invalid).is_ok());",
          "    let output_invalid = formatter_invalid.to_string();",
          "    assert!(output_invalid.starts_with(\"\\\\x80\"));"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(b' ');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    let byte_space = super::Byte(b' ');",
          "    let mut formatter_space = core::fmt::Formatter::new();",
          "    assert!(byte_space.fmt(&mut formatter_space).is_ok());",
          "    let output_space = formatter_space.to_string();",
          "    assert_eq!(output_space, \"' '\");",
          "    ",
          "    let byte_valid = super::Byte(b'A');",
          "    let mut formatter_valid = core::fmt::Formatter::new();",
          "    assert!(byte_valid.fmt(&mut formatter_valid).is_ok());",
          "    let output_valid = formatter_valid.to_string();",
          "    assert_eq!(output_valid, \"\\\\x41\");",
          "    ",
          "    let byte_lower_hex = super::Byte(b'\\x0a');",
          "    let mut formatter_lower_hex = core::fmt::Formatter::new();",
          "    assert!(byte_lower_hex.fmt(&mut formatter_lower_hex).is_ok());",
          "    let output_lower_hex = formatter_lower_hex.to_string();",
          "    assert_eq!(output_lower_hex, \"\\\\n\");",
          "    ",
          "    let byte_upper_hex = super::Byte(b'\\x1f');",
          "    let mut formatter_upper_hex = core::fmt::Formatter::new();",
          "    assert!(byte_upper_hex.fmt(&mut formatter_upper_hex).is_ok());",
          "    let output_upper_hex = formatter_upper_hex.to_string();",
          "    assert_eq!(output_upper_hex, \"\\\\x1F\");",
          "    ",
          "    let byte_invalid = super::Byte(b'\\x80');",
          "    let mut formatter_invalid = core::fmt::Formatter::new();",
          "    assert!(byte_invalid.fmt(&mut formatter_invalid).is_ok());",
          "    let output_invalid = formatter_invalid.to_string();",
          "    assert!(output_invalid.starts_with(\"\\\\x80\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(b'\\x00');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"' '\");",
          "    write!(f, \"{}\", core::str::from_utf8(&[0x00][..1]).unwrap());",
          "    assert_eq!(formatter, expected_formatter_output);",
          "    let byte = super::Byte(b' ');",
          "    assert_eq!(byte.fmt(&mut formatter), Ok(()));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let byte = super::Byte(b'\\x0A');",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter, expected_formatter_output);",
          "    let byte = super::Byte(b'\\x7F');",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter, expected_formatter_output);"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(b'\\x00');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    write!(f, \"' '\");",
          "    write!(f, \"{}\", core::str::from_utf8(&[0x00][..1]).unwrap());",
          "    assert_eq!(formatter, expected_formatter_output);",
          "    let byte = super::Byte(b' ');",
          "    assert_eq!(byte.fmt(&mut formatter), Ok(()));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let byte = super::Byte(b'\\x0A');",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter, expected_formatter_output);",
          "    let byte = super::Byte(b'\\x7F');",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter, expected_formatter_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(b'\\x1F');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte.0, b'\\x1F');",
          "    assert!(matches!(byte.fmt(&mut formatter), Ok(())));",
          "    assert!(formatter.buffer().is_empty());",
          "    ",
          "    let byte_space = super::Byte(b' ');",
          "    let mut formatter_space = core::fmt::Formatter::new();",
          "    let _ = byte_space.fmt(&mut formatter_space);",
          "    assert_eq!(formatter_space.buffer(), \"' '\");"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(b'\\x1F');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(byte.0, b'\\x1F');",
          "    assert!(matches!(byte.fmt(&mut formatter), Ok(())));",
          "    assert!(formatter.buffer().is_empty());",
          "    ",
          "    let byte_space = super::Byte(b' ');",
          "    let mut formatter_space = core::fmt::Formatter::new();",
          "    let _ = byte_space.fmt(&mut formatter_space);",
          "    assert_eq!(formatter_space.buffer(), \"' '\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(b'\\x20');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let byte = super::Byte(b' ');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    assert_eq!(formatter.to_string(), \"' '\");",
          "    let byte = super::Byte(b'\\x21');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\\\x21\");",
          "    let byte = super::Byte(b'\\x2a');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\\\x2a\");",
          "    let byte = super::Byte(b'\\x61');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\\\x61\");",
          "    let byte = super::Byte(b'\\x7a');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\\\x7a\");"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(b'\\x20');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    let byte = super::Byte(b' ');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    assert_eq!(formatter.to_string(), \"' '\");",
          "    let byte = super::Byte(b'\\x21');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\\\x21\");",
          "    let byte = super::Byte(b'\\x2a');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\\\x2a\");",
          "    let byte = super::Byte(b'\\x61');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\\\x61\");",
          "    let byte = super::Byte(b'\\x7a');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\\\x7a\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = super::Byte(b'\\x7F');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"\\x7F\");",
          "    assert!(formatter.is_ok());",
          "    assert!(matches!(formatter.result(), core::fmt::Result::Ok(_)));"
        ],
        "code": [
          "{",
          "    let byte = super::Byte(b'\\x7F');",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = byte.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"\\x7F\");",
          "    assert!(formatter.is_ok());",
          "    assert!(matches!(formatter.result(), core::fmt::Result::Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]