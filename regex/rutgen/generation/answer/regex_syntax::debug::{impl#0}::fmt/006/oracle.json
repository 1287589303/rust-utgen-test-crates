[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_instance = Byte(b' ');",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    let _ = byte_instance.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(formatter, \"' '\").unwrap();",
          "    assert_eq!(formatter.to_string(), \"' '\");",
          "    assert_eq!(byte_instance.0, b' ');",
          "    assert!(core::ascii::escape_default(byte_instance.0).count() == 0);",
          "    assert!(formatter.buf.is_empty());"
        ],
        "code": [
          "{",
          "    let byte_instance = Byte(b' ');",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    let _ = byte_instance.fmt(&mut formatter);",
          "    write!(formatter, \"' '\").unwrap();",
          "    assert_eq!(formatter.to_string(), \"' '\");",
          "    assert_eq!(byte_instance.0, b' ');",
          "    assert!(core::ascii::escape_default(byte_instance.0).count() == 0);",
          "    assert!(formatter.buf.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_instance = Byte(0xFF);",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    let _ = byte_instance.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let byte_instance_space = Byte(b' ');",
          "    let mut formatter_space = core::fmt::Formatter::default();",
          "    let result_space = byte_instance_space.fmt(&mut formatter_space);",
          "    assert_eq!(result_space, Ok(()));",
          "    assert_eq!(formatter_space.to_string(), \"' '\");",
          "    ",
          "    let byte_instance_not_space = Byte(0xFF);",
          "    let mut formatter_not_space = core::fmt::Formatter::default();",
          "    let result_not_space = byte_instance_not_space.fmt(&mut formatter_not_space);",
          "    assert_eq!(result_not_space, Ok(()));",
          "    assert!(formatter_not_space.to_string() != \"' '\");"
        ],
        "code": [
          "{",
          "    let byte_instance = Byte(0xFF);",
          "    let mut formatter = core::fmt::Formatter::default();",
          "    let _ = byte_instance.fmt(&mut formatter);",
          "    let byte_instance_space = Byte(b' ');",
          "    let mut formatter_space = core::fmt::Formatter::default();",
          "    let result_space = byte_instance_space.fmt(&mut formatter_space);",
          "    assert_eq!(result_space, Ok(()));",
          "    assert_eq!(formatter_space.to_string(), \"' '\");",
          "    ",
          "    let byte_instance_not_space = Byte(0xFF);",
          "    let mut formatter_not_space = core::fmt::Formatter::default();",
          "    let result_not_space = byte_instance_not_space.fmt(&mut formatter_not_space);",
          "    assert_eq!(result_not_space, Ok(()));",
          "    assert!(formatter_not_space.to_string() != \"' '\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]