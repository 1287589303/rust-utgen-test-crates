[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = Utf8Range { start: 0, end: 1 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 2, end: 3 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(intersects(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 3 }), false);"
        ],
        "code": [
          "{",
          "    let r1 = Utf8Range { start: 0, end: 1 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 2, end: 3 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "    assert_eq!(intersects(Utf8Range { start: 0, end: 1 }, Utf8Range { start: 2, end: 3 }), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = Utf8Range { start: 5, end: 10 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 11, end: 15 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(intersects(Utf8Range { start: 5, end: 10 }, Utf8Range { start: 11, end: 15 }), false);"
        ],
        "code": [
          "{",
          "    let r1 = Utf8Range { start: 5, end: 10 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 11, end: 15 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "    assert_eq!(intersects(Utf8Range { start: 5, end: 10 }, Utf8Range { start: 11, end: 15 }), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = Utf8Range { start: 100, end: 200 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 201, end: 300 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(intersects(Utf8Range { start: 100, end: 200 }, Utf8Range { start: 201, end: 300 }), false);"
        ],
        "code": [
          "{",
          "    let r1 = Utf8Range { start: 100, end: 200 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 201, end: 300 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "    assert_eq!(intersects(Utf8Range { start: 100, end: 200 }, Utf8Range { start: 201, end: 300 }), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = Utf8Range { start: 20, end: 30 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 31, end: 40 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(intersects(Utf8Range { start: 20, end: 30 }, Utf8Range { start: 31, end: 40 }), false);"
        ],
        "code": [
          "{",
          "    let r1 = Utf8Range { start: 20, end: 30 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 31, end: 40 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "    assert_eq!(intersects(Utf8Range { start: 20, end: 30 }, Utf8Range { start: 31, end: 40 }), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let r1 = Utf8Range { start: 0, end: 5 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 6, end: 10 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(intersects(Utf8Range { start: 0, end: 5 }, Utf8Range { start: 6, end: 10 }), false);"
        ],
        "code": [
          "{",
          "    let r1 = Utf8Range { start: 0, end: 5 }; // r1.end < r2.start",
          "    let r2 = Utf8Range { start: 6, end: 10 }; // r2.start is greater than r1.end",
          "    intersects(r1, r2);",
          "    assert_eq!(intersects(Utf8Range { start: 0, end: 5 }, Utf8Range { start: 6, end: 10 }), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]