[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = 0;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "}"
        ],
        "oracle": [
          "    let limit = 0;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "    let limit = 1;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "    let limit = 100;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "    let limit = usize::MAX;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });"
        ],
        "code": [
          "{",
          "    let limit = 0;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    let limit = 0;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "    let limit = 1;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "    let limit = 100;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "    let limit = usize::MAX;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = 1;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });"
        ],
        "code": [
          "{",
          "    let limit = 1;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = std::usize::MAX;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "}"
        ],
        "oracle": [
          "    let limit = std::usize::MAX;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "    assert!(error.size_limit().is_none());"
        ],
        "code": [
          "{",
          "    let limit = std::usize::MAX;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    let limit = std::usize::MAX;",
          "    let error = BuildError::exceeded_size_limit(limit);",
          "    assert_eq!(error.kind(), &BuildErrorKind::ExceededSizeLimit { limit });",
          "    assert!(error.size_limit().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]