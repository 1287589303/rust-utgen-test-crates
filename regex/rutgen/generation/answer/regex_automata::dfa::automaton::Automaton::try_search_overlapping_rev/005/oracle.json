[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAutomaton;",
          "",
          "    impl Automaton for TestAutomaton {",
          "        fn next_state(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        unsafe fn next_state_unchecked(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        fn next_eoi_state(&self, _current: StateID) -> StateID { 0 }",
          "        fn start_state(&self, _config: &start::Config) -> Result<StateID, StartError> { Ok(0) }",
          "        fn start_state_forward(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn start_state_reverse(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> { None }",
          "        fn is_special_state(&self, _id: StateID) -> bool { false }",
          "        fn is_dead_state(&self, _id: StateID) -> bool { false }",
          "        fn is_quit_state(&self, _id: StateID) -> bool { false }",
          "        fn is_match_state(&self, _id: StateID) -> bool { false }",
          "        fn is_start_state(&self, _id: StateID) -> bool { false }",
          "        fn is_accel_state(&self, _id: StateID) -> bool { false }",
          "        fn pattern_len(&self) -> usize { 0 }",
          "        fn match_len(&self, _id: StateID) -> usize { 0 }",
          "        fn match_pattern(&self, _id: StateID, _index: usize) -> PatternID { 0 }",
          "        fn has_empty(&self) -> bool { false }",
          "        fn is_utf8(&self) -> bool { true }",
          "        fn is_always_start_anchored(&self) -> bool { false }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] { &[] }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> { None }",
          "        fn try_search_fwd(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_rev(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_overlapping_fwd(&self, _input: &Input<'_>, _state: &mut OverlappingState) -> Result<(), MatchError> { Ok(()) }",
          "    }",
          "",
          "    let automaton = TestAutomaton;",
          "    let input = Input {",
          "        haystack: &[1, 2, 3],",
          "        span: Span::new(0, 3),",
          "        anchored: Anchored::None,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState::start();",
          "    state.at = 0;",
          "",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(automaton.try_search_overlapping_rev(&input, &mut state).is_err(), true);",
          "    assert_eq!(state.get_match().is_none(), true);",
          "    assert_eq!(state.at, 0);",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert_eq!(state.id.is_none(), true);"
        ],
        "code": [
          "{",
          "    struct TestAutomaton;",
          "",
          "    impl Automaton for TestAutomaton {",
          "        fn next_state(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        unsafe fn next_state_unchecked(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        fn next_eoi_state(&self, _current: StateID) -> StateID { 0 }",
          "        fn start_state(&self, _config: &start::Config) -> Result<StateID, StartError> { Ok(0) }",
          "        fn start_state_forward(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn start_state_reverse(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> { None }",
          "        fn is_special_state(&self, _id: StateID) -> bool { false }",
          "        fn is_dead_state(&self, _id: StateID) -> bool { false }",
          "        fn is_quit_state(&self, _id: StateID) -> bool { false }",
          "        fn is_match_state(&self, _id: StateID) -> bool { false }",
          "        fn is_start_state(&self, _id: StateID) -> bool { false }",
          "        fn is_accel_state(&self, _id: StateID) -> bool { false }",
          "        fn pattern_len(&self) -> usize { 0 }",
          "        fn match_len(&self, _id: StateID) -> usize { 0 }",
          "        fn match_pattern(&self, _id: StateID, _index: usize) -> PatternID { 0 }",
          "        fn has_empty(&self) -> bool { false }",
          "        fn is_utf8(&self) -> bool { true }",
          "        fn is_always_start_anchored(&self) -> bool { false }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] { &[] }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> { None }",
          "        fn try_search_fwd(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_rev(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_overlapping_fwd(&self, _input: &Input<'_>, _state: &mut OverlappingState) -> Result<(), MatchError> { Ok(()) }",
          "    }",
          "",
          "    let automaton = TestAutomaton;",
          "    let input = Input {",
          "        haystack: &[1, 2, 3],",
          "        span: Span::new(0, 3),",
          "        anchored: Anchored::None,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState::start();",
          "    state.at = 0;",
          "",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "    assert_eq!(automaton.try_search_overlapping_rev(&input, &mut state).is_err(), true);",
          "    assert_eq!(state.get_match().is_none(), true);",
          "    assert_eq!(state.at, 0);",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert_eq!(state.id.is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAutomaton;",
          "",
          "    impl Automaton for TestAutomaton {",
          "        fn next_state(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        unsafe fn next_state_unchecked(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        fn next_eoi_state(&self, _current: StateID) -> StateID { 0 }",
          "        fn start_state(&self, _config: &start::Config) -> Result<StateID, StartError> { Ok(0) }",
          "        fn start_state_forward(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn start_state_reverse(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> { None }",
          "        fn is_special_state(&self, _id: StateID) -> bool { false }",
          "        fn is_dead_state(&self, _id: StateID) -> bool { false }",
          "        fn is_quit_state(&self, _id: StateID) -> bool { false }",
          "        fn is_match_state(&self, _id: StateID) -> bool { false }",
          "        fn is_start_state(&self, _id: StateID) -> bool { false }",
          "        fn is_accel_state(&self, _id: StateID) -> bool { false }",
          "        fn pattern_len(&self) -> usize { 0 }",
          "        fn match_len(&self, _id: StateID) -> usize { 0 }",
          "        fn match_pattern(&self, _id: StateID, _index: usize) -> PatternID { 0 }",
          "        fn has_empty(&self) -> bool { false }",
          "        fn is_utf8(&self) -> bool { false }",
          "        fn is_always_start_anchored(&self) -> bool { false }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] { &[] }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> { None }",
          "        fn try_search_fwd(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_rev(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_overlapping_fwd(&self, _input: &Input<'_>, _state: &mut OverlappingState) -> Result<(), MatchError> { Ok(()) }",
          "    }",
          "",
          "    let automaton = TestAutomaton;",
          "    let input = Input {",
          "        haystack: &[4, 5, 6],",
          "        span: Span::new(0, 3),",
          "        anchored: Anchored::Anchored,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState::start();",
          "    state.at = 0;",
          "",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(automaton.try_search_overlapping_rev(&input, &mut state).is_err());",
          "    assert_eq!(state.get_match(), None);",
          "    assert!(state.rev_eoi);",
          "    assert_eq!(state.at, 0);"
        ],
        "code": [
          "{",
          "    struct TestAutomaton;",
          "",
          "    impl Automaton for TestAutomaton {",
          "        fn next_state(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        unsafe fn next_state_unchecked(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        fn next_eoi_state(&self, _current: StateID) -> StateID { 0 }",
          "        fn start_state(&self, _config: &start::Config) -> Result<StateID, StartError> { Ok(0) }",
          "        fn start_state_forward(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn start_state_reverse(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> { None }",
          "        fn is_special_state(&self, _id: StateID) -> bool { false }",
          "        fn is_dead_state(&self, _id: StateID) -> bool { false }",
          "        fn is_quit_state(&self, _id: StateID) -> bool { false }",
          "        fn is_match_state(&self, _id: StateID) -> bool { false }",
          "        fn is_start_state(&self, _id: StateID) -> bool { false }",
          "        fn is_accel_state(&self, _id: StateID) -> bool { false }",
          "        fn pattern_len(&self) -> usize { 0 }",
          "        fn match_len(&self, _id: StateID) -> usize { 0 }",
          "        fn match_pattern(&self, _id: StateID, _index: usize) -> PatternID { 0 }",
          "        fn has_empty(&self) -> bool { false }",
          "        fn is_utf8(&self) -> bool { false }",
          "        fn is_always_start_anchored(&self) -> bool { false }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] { &[] }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> { None }",
          "        fn try_search_fwd(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_rev(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_overlapping_fwd(&self, _input: &Input<'_>, _state: &mut OverlappingState) -> Result<(), MatchError> { Ok(()) }",
          "    }",
          "",
          "    let automaton = TestAutomaton;",
          "    let input = Input {",
          "        haystack: &[4, 5, 6],",
          "        span: Span::new(0, 3),",
          "        anchored: Anchored::Anchored,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState::start();",
          "    state.at = 0;",
          "",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "    assert!(automaton.try_search_overlapping_rev(&input, &mut state).is_err());",
          "    assert_eq!(state.get_match(), None);",
          "    assert!(state.rev_eoi);",
          "    assert_eq!(state.at, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAutomaton;",
          "",
          "    impl Automaton for TestAutomaton {",
          "        fn next_state(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        unsafe fn next_state_unchecked(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        fn next_eoi_state(&self, _current: StateID) -> StateID { 0 }",
          "        fn start_state(&self, _config: &start::Config) -> Result<StateID, StartError> { Ok(0) }",
          "        fn start_state_forward(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn start_state_reverse(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> { None }",
          "        fn is_special_state(&self, _id: StateID) -> bool { false }",
          "        fn is_dead_state(&self, _id: StateID) -> bool { false }",
          "        fn is_quit_state(&self, _id: StateID) -> bool { false }",
          "        fn is_match_state(&self, _id: StateID) -> bool { false }",
          "        fn is_start_state(&self, _id: StateID) -> bool { false }",
          "        fn is_accel_state(&self, _id: StateID) -> bool { false }",
          "        fn pattern_len(&self) -> usize { 0 }",
          "        fn match_len(&self, _id: StateID) -> usize { 0 }",
          "        fn match_pattern(&self, _id: StateID, _index: usize) -> PatternID { 0 }",
          "        fn has_empty(&self) -> bool { false }",
          "        fn is_utf8(&self) -> bool { true }",
          "        fn is_always_start_anchored(&self) -> bool { false }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] { &[] }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> { None }",
          "        fn try_search_fwd(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_rev(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_overlapping_fwd(&self, _input: &Input<'_>, _state: &mut OverlappingState) -> Result<(), MatchError> { Ok(()) }",
          "    }",
          "",
          "    let automaton = TestAutomaton;",
          "    let input = Input {",
          "        haystack: &[7],",
          "        span: Span::new(0, 1),",
          "        anchored: Anchored::None,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState::start();",
          "    state.at = 0;",
          "",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(automaton.try_search_overlapping_rev(&input, &mut state), Err(MatchError::quit(7, 0)));"
        ],
        "code": [
          "{",
          "    struct TestAutomaton;",
          "",
          "    impl Automaton for TestAutomaton {",
          "        fn next_state(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        unsafe fn next_state_unchecked(&self, _current: StateID, _input: u8) -> StateID { 0 }",
          "        fn next_eoi_state(&self, _current: StateID) -> StateID { 0 }",
          "        fn start_state(&self, _config: &start::Config) -> Result<StateID, StartError> { Ok(0) }",
          "        fn start_state_forward(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn start_state_reverse(&self, _input: &Input<'_>) -> Result<StateID, MatchError> { Ok(0) }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> { None }",
          "        fn is_special_state(&self, _id: StateID) -> bool { false }",
          "        fn is_dead_state(&self, _id: StateID) -> bool { false }",
          "        fn is_quit_state(&self, _id: StateID) -> bool { false }",
          "        fn is_match_state(&self, _id: StateID) -> bool { false }",
          "        fn is_start_state(&self, _id: StateID) -> bool { false }",
          "        fn is_accel_state(&self, _id: StateID) -> bool { false }",
          "        fn pattern_len(&self) -> usize { 0 }",
          "        fn match_len(&self, _id: StateID) -> usize { 0 }",
          "        fn match_pattern(&self, _id: StateID, _index: usize) -> PatternID { 0 }",
          "        fn has_empty(&self) -> bool { false }",
          "        fn is_utf8(&self) -> bool { true }",
          "        fn is_always_start_anchored(&self) -> bool { false }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] { &[] }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> { None }",
          "        fn try_search_fwd(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_rev(&self, _input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> { Ok(None) }",
          "        fn try_search_overlapping_fwd(&self, _input: &Input<'_>, _state: &mut OverlappingState) -> Result<(), MatchError> { Ok(()) }",
          "    }",
          "",
          "    let automaton = TestAutomaton;",
          "    let input = Input {",
          "        haystack: &[7],",
          "        span: Span::new(0, 1),",
          "        anchored: Anchored::None,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState::start();",
          "    state.at = 0;",
          "",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "    assert_eq!(automaton.try_search_overlapping_rev(&input, &mut state), Err(MatchError::quit(7, 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]