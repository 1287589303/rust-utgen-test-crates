[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockAutomaton {",
          "        has_empty: bool,",
          "        match_len: usize,",
          "    }",
          "",
          "    impl Automaton for MockAutomaton {",
          "        fn next_state(&self, current: StateID, input: u8) -> StateID {",
          "            0",
          "        }",
          "        unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID {",
          "            0",
          "        }",
          "        fn next_eoi_state(&self, current: StateID) -> StateID {",
          "            0",
          "        }",
          "        fn start_state(&self, config: &start::Config) -> Result<StateID, StartError> {",
          "            Ok(0)",
          "        }",
          "        fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(0)",
          "        }",
          "        fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(0)",
          "        }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> {",
          "            None",
          "        }",
          "        fn is_special_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_quit_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_match_state(&self, id: StateID) -> bool {",
          "            true",
          "        }",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            true",
          "        }",
          "        fn is_accel_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn pattern_len(&self) -> usize {",
          "            self.match_len",
          "        }",
          "        fn match_len(&self, id: StateID) -> usize {",
          "            self.match_len",
          "        }",
          "        fn match_pattern(&self, id: StateID, index: usize) -> PatternID {",
          "            0",
          "        }",
          "        fn has_empty(&self) -> bool {",
          "            self.has_empty",
          "        }",
          "        fn is_utf8(&self) -> bool {",
          "            true",
          "        }",
          "        fn is_always_start_anchored(&self) -> bool {",
          "            false",
          "        }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> {",
          "            None",
          "        }",
          "        fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> {",
          "            Ok(Some(HalfMatch { pattern: 0, offset: 0 }))",
          "        }",
          "        fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> {",
          "            Ok(Some(HalfMatch { pattern: 0, offset: 0 }))",
          "        }",
          "    }",
          "",
          "    let automaton = MockAutomaton { has_empty: false, match_len: 2 };",
          "    let input = Input {",
          "        haystack: b\"abc\",",
          "        span: Span::new(0, 3),",
          "        anchored: Anchored::None,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch { pattern: 0, offset: 2 }),",
          "        id: Some(0),",
          "        at: 2,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(state.get_match().is_some());",
          "    assert_eq!(state.mat.unwrap().offset, 2);",
          "    assert_eq!(state.next_match_index, Some(1));",
          "    assert!(state.rev_eoi);",
          "    assert!(automaton.is_utf8());",
          "    assert!(!automaton.has_empty());",
          "    assert!(automaton.is_match_state(state.id.unwrap()));",
          "    assert_eq!(automaton.match_len(state.id.unwrap()), 2);",
          "    assert_eq!(automaton.match_pattern(state.id.unwrap(), 0), 0);"
        ],
        "code": [
          "{",
          "    struct MockAutomaton {",
          "        has_empty: bool,",
          "        match_len: usize,",
          "    }",
          "",
          "    impl Automaton for MockAutomaton {",
          "        fn next_state(&self, current: StateID, input: u8) -> StateID {",
          "            0",
          "        }",
          "        unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID {",
          "            0",
          "        }",
          "        fn next_eoi_state(&self, current: StateID) -> StateID {",
          "            0",
          "        }",
          "        fn start_state(&self, config: &start::Config) -> Result<StateID, StartError> {",
          "            Ok(0)",
          "        }",
          "        fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(0)",
          "        }",
          "        fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(0)",
          "        }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> {",
          "            None",
          "        }",
          "        fn is_special_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_quit_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_match_state(&self, id: StateID) -> bool {",
          "            true",
          "        }",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            true",
          "        }",
          "        fn is_accel_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn pattern_len(&self) -> usize {",
          "            self.match_len",
          "        }",
          "        fn match_len(&self, id: StateID) -> usize {",
          "            self.match_len",
          "        }",
          "        fn match_pattern(&self, id: StateID, index: usize) -> PatternID {",
          "            0",
          "        }",
          "        fn has_empty(&self) -> bool {",
          "            self.has_empty",
          "        }",
          "        fn is_utf8(&self) -> bool {",
          "            true",
          "        }",
          "        fn is_always_start_anchored(&self) -> bool {",
          "            false",
          "        }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> {",
          "            None",
          "        }",
          "        fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> {",
          "            Ok(Some(HalfMatch { pattern: 0, offset: 0 }))",
          "        }",
          "        fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> {",
          "            Ok(Some(HalfMatch { pattern: 0, offset: 0 }))",
          "        }",
          "    }",
          "",
          "    let automaton = MockAutomaton { has_empty: false, match_len: 2 };",
          "    let input = Input {",
          "        haystack: b\"abc\",",
          "        span: Span::new(0, 3),",
          "        anchored: Anchored::None,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch { pattern: 0, offset: 2 }),",
          "        id: Some(0),",
          "        at: 2,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "    assert!(state.get_match().is_some());",
          "    assert_eq!(state.mat.unwrap().offset, 2);",
          "    assert_eq!(state.next_match_index, Some(1));",
          "    assert!(state.rev_eoi);",
          "    assert!(automaton.is_utf8());",
          "    assert!(!automaton.has_empty());",
          "    assert!(automaton.is_match_state(state.id.unwrap()));",
          "    assert_eq!(automaton.match_len(state.id.unwrap()), 2);",
          "    assert_eq!(automaton.match_pattern(state.id.unwrap(), 0), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockAutomaton {",
          "        has_empty: bool,",
          "        match_len: usize,",
          "    }",
          "",
          "    impl Automaton for MockAutomaton {",
          "        fn next_state(&self, current: StateID, input: u8) -> StateID {",
          "            0",
          "        }",
          "        unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID {",
          "            0",
          "        }",
          "        fn next_eoi_state(&self, current: StateID) -> StateID {",
          "            0",
          "        }",
          "        fn start_state(&self, config: &start::Config) -> Result<StateID, StartError> {",
          "            Ok(0)",
          "        }",
          "        fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(0)",
          "        }",
          "        fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(0)",
          "        }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> {",
          "            None",
          "        }",
          "        fn is_special_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_quit_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_match_state(&self, id: StateID) -> bool {",
          "            true",
          "        }",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            true",
          "        }",
          "        fn is_accel_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn pattern_len(&self) -> usize {",
          "            self.match_len",
          "        }",
          "        fn match_len(&self, id: StateID) -> usize {",
          "            self.match_len",
          "        }",
          "        fn match_pattern(&self, id: StateID, index: usize) -> PatternID {",
          "            0",
          "        }",
          "        fn has_empty(&self) -> bool {",
          "            self.has_empty",
          "        }",
          "        fn is_utf8(&self) -> bool {",
          "            true",
          "        }",
          "        fn is_always_start_anchored(&self) -> bool {",
          "            false",
          "        }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> {",
          "            None",
          "        }",
          "        fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> {",
          "            Ok(Some(HalfMatch { pattern: 0, offset: 0 }))",
          "        }",
          "        fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> {",
          "            Ok(Some(HalfMatch { pattern: 0, offset: 0 }))",
          "        }",
          "    }",
          "",
          "    let automaton = MockAutomaton { has_empty: false, match_len: 1 };",
          "    let input = Input {",
          "        haystack: b\"abc\",",
          "        span: Span::new(0, 3),",
          "        anchored: Anchored::None,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch { pattern: 0, offset: 2 }),",
          "        id: Some(0),",
          "        at: 2,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(state.get_match().is_some());",
          "    assert_eq!(state.mat.unwrap().pattern, 0);",
          "    assert_eq!(state.mat.unwrap().offset, 2);",
          "    assert!(!state.rev_eoi);",
          "    assert_eq!(state.at, 2);",
          "    assert_eq!(state.next_match_index, Some(0));",
          "    assert!(state.id.is_some());"
        ],
        "code": [
          "{",
          "    struct MockAutomaton {",
          "        has_empty: bool,",
          "        match_len: usize,",
          "    }",
          "",
          "    impl Automaton for MockAutomaton {",
          "        fn next_state(&self, current: StateID, input: u8) -> StateID {",
          "            0",
          "        }",
          "        unsafe fn next_state_unchecked(&self, current: StateID, input: u8) -> StateID {",
          "            0",
          "        }",
          "        fn next_eoi_state(&self, current: StateID) -> StateID {",
          "            0",
          "        }",
          "        fn start_state(&self, config: &start::Config) -> Result<StateID, StartError> {",
          "            Ok(0)",
          "        }",
          "        fn start_state_forward(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(0)",
          "        }",
          "        fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(0)",
          "        }",
          "        fn universal_start_state(&self, _mode: Anchored) -> Option<StateID> {",
          "            None",
          "        }",
          "        fn is_special_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_dead_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_quit_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn is_match_state(&self, id: StateID) -> bool {",
          "            true",
          "        }",
          "        fn is_start_state(&self, id: StateID) -> bool {",
          "            true",
          "        }",
          "        fn is_accel_state(&self, id: StateID) -> bool {",
          "            false",
          "        }",
          "        fn pattern_len(&self) -> usize {",
          "            self.match_len",
          "        }",
          "        fn match_len(&self, id: StateID) -> usize {",
          "            self.match_len",
          "        }",
          "        fn match_pattern(&self, id: StateID, index: usize) -> PatternID {",
          "            0",
          "        }",
          "        fn has_empty(&self) -> bool {",
          "            self.has_empty",
          "        }",
          "        fn is_utf8(&self) -> bool {",
          "            true",
          "        }",
          "        fn is_always_start_anchored(&self) -> bool {",
          "            false",
          "        }",
          "        fn accelerator(&self, _id: StateID) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn get_prefilter(&self) -> Option<&Prefilter> {",
          "            None",
          "        }",
          "        fn try_search_fwd(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> {",
          "            Ok(Some(HalfMatch { pattern: 0, offset: 0 }))",
          "        }",
          "        fn try_search_rev(&self, input: &Input<'_>) -> Result<Option<HalfMatch>, MatchError> {",
          "            Ok(Some(HalfMatch { pattern: 0, offset: 0 }))",
          "        }",
          "    }",
          "",
          "    let automaton = MockAutomaton { has_empty: false, match_len: 1 };",
          "    let input = Input {",
          "        haystack: b\"abc\",",
          "        span: Span::new(0, 3),",
          "        anchored: Anchored::None,",
          "        earliest: false,",
          "    };",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch { pattern: 0, offset: 2 }),",
          "        id: Some(0),",
          "        at: 2,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let _ = automaton.try_search_overlapping_rev(&input, &mut state);",
          "    assert!(state.get_match().is_some());",
          "    assert_eq!(state.mat.unwrap().pattern, 0);",
          "    assert_eq!(state.mat.unwrap().offset, 2);",
          "    assert!(!state.rev_eoi);",
          "    assert_eq!(state.at, 2);",
          "    assert_eq!(state.next_match_index, Some(0));",
          "    assert!(state.id.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]