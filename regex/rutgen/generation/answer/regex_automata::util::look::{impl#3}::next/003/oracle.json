[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet {",
          "        bits: Look::Start as u32,",
          "    };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    let mut look_set = LookSet { bits: Look::Start as u32 };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    assert!(iter.next().is_some());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Look::Start));",
          "    look_set.bits |= Look::End as u32;",
          "    iter.set = look_set;",
          "    assert!(iter.next().is_some());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Look::End));",
          "    look_set.bits |= Look::WordAscii as u32;",
          "    iter.set = look_set;",
          "    assert!(iter.next().is_some());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet {",
          "        bits: Look::Start as u32,",
          "    };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    let result = iter.next();",
          "    let mut look_set = LookSet { bits: Look::Start as u32 };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    assert!(iter.next().is_some());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Look::Start));",
          "    look_set.bits |= Look::End as u32;",
          "    iter.set = look_set;",
          "    assert!(iter.next().is_some());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Look::End));",
          "    look_set.bits |= Look::WordAscii as u32;",
          "    iter.set = look_set;",
          "    assert!(iter.next().is_some());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet {",
          "        bits: (Look::Start as u32) | (Look::End as u32),",
          "    };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    let result_start = iter.next();",
          "    let result_end = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_start, Some(Look::Start));",
          "    assert_eq!(result_end, Some(Look::End));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet {",
          "        bits: (Look::Start as u32) | (Look::End as u32),",
          "    };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    let result_start = iter.next();",
          "    let result_end = iter.next();",
          "    assert_eq!(result_start, Some(Look::Start));",
          "    assert_eq!(result_end, Some(Look::End));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet {",
          "        bits: 0b10_0000_0000_0000_0000, // Corresponds to Look::WordEndUnicode",
          "    };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Look::WordEndUnicode);",
          "    assert!(iter.set.contains(Look::WordEndUnicode) == false);",
          "    assert!(iter.set.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet {",
          "        bits: 0b10_0000_0000_0000_0000, // Corresponds to Look::WordEndUnicode",
          "    };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    let result = iter.next();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), Look::WordEndUnicode);",
          "    assert!(iter.set.contains(Look::WordEndUnicode) == false);",
          "    assert!(iter.set.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet {",
          "        bits: (Look::Start as u32) | (Look::StartLF as u32) | (Look::End as u32),",
          "    };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    let result_start = iter.next();",
          "    let result_start_lf = iter.next();",
          "    let result_end = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_start, Some(Look::Start));",
          "    assert_eq!(result_start_lf, Some(Look::StartLF));",
          "    assert_eq!(result_end, Some(Look::End));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet {",
          "        bits: (Look::Start as u32) | (Look::StartLF as u32) | (Look::End as u32),",
          "    };",
          "    let mut iter = LookSetIter { set: look_set };",
          "    let result_start = iter.next();",
          "    let result_start_lf = iter.next();",
          "    let result_end = iter.next();",
          "    assert_eq!(result_start, Some(Look::Start));",
          "    assert_eq!(result_start_lf, Some(Look::StartLF));",
          "    assert_eq!(result_end, Some(Look::End));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]