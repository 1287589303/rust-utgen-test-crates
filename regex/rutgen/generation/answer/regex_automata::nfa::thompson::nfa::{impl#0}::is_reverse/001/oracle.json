[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA(Arc::new(Inner {",
          "        reverse: true,",
          "        ..Default::default()",
          "    }));",
          "    let _ = nfa.is_reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.is_reverse(), true);",
          "    ",
          "    let nfa = NFA(Arc::new(Inner {",
          "    reverse: false,",
          "    ..Default::default()",
          "    }));",
          "    assert_eq!(nfa.is_reverse(), false);"
        ],
        "code": [
          "{",
          "    let nfa = NFA(Arc::new(Inner {",
          "        reverse: true,",
          "        ..Default::default()",
          "    }));",
          "    let _ = nfa.is_reverse();",
          "    assert_eq!(nfa.is_reverse(), true);",
          "    ",
          "    let nfa = NFA(Arc::new(Inner {",
          "    reverse: false,",
          "    ..Default::default()",
          "    }));",
          "    assert_eq!(nfa.is_reverse(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA(Arc::new(Inner {",
          "        reverse: false,",
          "        ..Default::default()",
          "    }));",
          "    let _ = nfa.is_reverse();",
          "}"
        ],
        "oracle": [
          "    let nfa = NFA(Arc::new(Inner { reverse: false, ..Default::default() })); assert_eq!(nfa.is_reverse(), false);",
          "    let nfa = NFA(Arc::new(Inner { reverse: true, ..Default::default() })); assert_eq!(nfa.is_reverse(), true);",
          "    let nfa = NFA(Arc::new(Inner { reverse: false, ..Default::default() })); assert!(nfa.is_reverse() == false);",
          "    let nfa = NFA(Arc::new(Inner { reverse: true, ..Default::default() })); assert!(nfa.is_reverse() == true);"
        ],
        "code": [
          "{",
          "    let nfa = NFA(Arc::new(Inner {",
          "        reverse: false,",
          "        ..Default::default()",
          "    }));",
          "    let _ = nfa.is_reverse();",
          "    let nfa = NFA(Arc::new(Inner { reverse: false, ..Default::default() })); assert_eq!(nfa.is_reverse(), false);",
          "    let nfa = NFA(Arc::new(Inner { reverse: true, ..Default::default() })); assert_eq!(nfa.is_reverse(), true);",
          "    let nfa = NFA(Arc::new(Inner { reverse: false, ..Default::default() })); assert!(nfa.is_reverse() == false);",
          "    let nfa = NFA(Arc::new(Inner { reverse: true, ..Default::default() })); assert!(nfa.is_reverse() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]