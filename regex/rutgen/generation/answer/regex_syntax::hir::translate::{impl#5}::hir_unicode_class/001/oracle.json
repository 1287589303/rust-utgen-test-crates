[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let ast_class = ast::ClassUnicode {",
          "        span,",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue { name: String::from(\"Age\"), value: String::from(\"3\") },",
          "    };",
          "",
          "    let result = translator.hir_unicode_class(&ast_class);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let class = result.unwrap();",
          "    assert_eq!(class.span.start, Position(0));",
          "    assert_eq!(class.span.end, Position(5));",
          "    assert!(!class.negated);",
          "    assert_eq!(class.kind, ClassUnicodeKind::NamedValue { name: String::from(\"Age\"), value: String::from(\"3\") });"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let ast_class = ast::ClassUnicode {",
          "        span,",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue { name: String::from(\"Age\"), value: String::from(\"3\") },",
          "    };",
          "",
          "    let result = translator.hir_unicode_class(&ast_class);",
          "    assert!(result.is_ok());",
          "    let class = result.unwrap();",
          "    assert_eq!(class.span.start, Position(0));",
          "    assert_eq!(class.span.end, Position(5));",
          "    assert!(!class.negated);",
          "    assert_eq!(class.kind, ClassUnicodeKind::NamedValue { name: String::from(\"Age\"), value: String::from(\"3\") });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let ast_class = ast::ClassUnicode {",
          "        span,",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue { name: String::from(\"InvalidName\"), value: String::from(\"InvalidValue\") },",
          "    };",
          "",
          "    let result = translator.hir_unicode_class(&ast_class);",
          "}"
        ],
        "oracle": [
          "    assert!(translator.flags().unicode());",
          "    assert_eq!(ast_class.kind, ast::ClassUnicodeKind::NamedValue { name: String::from(\"InvalidName\"), value: String::from(\"InvalidValue\") });",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct TestVisitor;",
          "    ",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let ast_class = ast::ClassUnicode {",
          "        span,",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue { name: String::from(\"InvalidName\"), value: String::from(\"InvalidValue\") },",
          "    };",
          "",
          "    let result = translator.hir_unicode_class(&ast_class);",
          "    assert!(translator.flags().unicode());",
          "    assert_eq!(ast_class.kind, ast::ClassUnicodeKind::NamedValue { name: String::from(\"InvalidName\"), value: String::from(\"InvalidValue\") });",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]