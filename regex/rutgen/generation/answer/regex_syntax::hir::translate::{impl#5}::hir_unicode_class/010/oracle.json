[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "        ",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "    }",
          "",
          "    let flags = Flags { unicode: Some(false), ..Flags::default() };",
          "    let visitor = TestVisitor { flags };",
          "",
          "    let ast_class = ast::ClassUnicode {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::OneLetter('a'),",
          "    };",
          "",
          "    let result = visitor.hir_unicode_class(&ast_class);",
          "}"
        ],
        "oracle": [
          "    visitor.flags().unicode() == false",
          "    assert_eq!(result, Err(visitor.error(ast_class.span, ErrorKind::UnicodeNotAllowed)))"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "        ",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "    }",
          "",
          "    let flags = Flags { unicode: Some(false), ..Flags::default() };",
          "    let visitor = TestVisitor { flags };",
          "",
          "    let ast_class = ast::ClassUnicode {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::OneLetter('a'),",
          "    };",
          "",
          "    let result = visitor.hir_unicode_class(&ast_class);",
          "    visitor.flags().unicode() == false",
          "    assert_eq!(result, Err(visitor.error(ast_class.span, ErrorKind::UnicodeNotAllowed)))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "        ",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "    }",
          "",
          "    let flags = Flags { unicode: Some(false), ..Flags::default() };",
          "    let visitor = TestVisitor { flags };",
          "",
          "    let ast_class = ast::ClassUnicode {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::Named(\"L\"),",
          "    };",
          "",
          "    let result = visitor.hir_unicode_class(&ast_class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(visitor.error(ast_class.span, ErrorKind::UnicodeNotAllowed)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "        ",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "    }",
          "",
          "    let flags = Flags { unicode: Some(false), ..Flags::default() };",
          "    let visitor = TestVisitor { flags };",
          "",
          "    let ast_class = ast::ClassUnicode {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::Named(\"L\"),",
          "    };",
          "",
          "    let result = visitor.hir_unicode_class(&ast_class);",
          "    assert_eq!(result, Err(visitor.error(ast_class.span, ErrorKind::UnicodeNotAllowed)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "        ",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "    }",
          "",
          "    let flags = Flags { unicode: Some(false), ..Flags::default() };",
          "    let visitor = TestVisitor { flags };",
          "",
          "    let ast_class = ast::ClassUnicode {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue { name: \"Script\".to_string(), value: \"Latin\".to_string() },",
          "    };",
          "",
          "    let result = visitor.hir_unicode_class(&ast_class);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    let err = result.err().unwrap();",
          "    assert_eq!(err.kind, ErrorKind::UnicodeNotAllowed);",
          "    assert_eq!(err.span, Span { start: Position(0), end: Position(1) });",
          "    assert_eq!(err.pattern, \"\");"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        flags: Flags,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "        ",
          "        fn flags(&self) -> Flags {",
          "            self.flags",
          "        }",
          "    }",
          "",
          "    let flags = Flags { unicode: Some(false), ..Flags::default() };",
          "    let visitor = TestVisitor { flags };",
          "",
          "    let ast_class = ast::ClassUnicode {",
          "        span: Span { start: Position(0), end: Position(1) },",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue { name: \"Script\".to_string(), value: \"Latin\".to_string() },",
          "    };",
          "",
          "    let result = visitor.hir_unicode_class(&ast_class);",
          "    assert!(result.is_err());",
          "    let err = result.err().unwrap();",
          "    assert_eq!(err.kind, ErrorKind::UnicodeNotAllowed);",
          "    assert_eq!(err.span, Span { start: Position(0), end: Position(1) });",
          "    assert_eq!(err.pattern, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]