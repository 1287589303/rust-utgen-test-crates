[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let _iter = slots.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.slots.0, 0);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let _iter = slots.iter();",
          "    assert_eq!(_iter.slots.0, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(Slots::LIMIT as u32);",
          "    let _iter = slots.iter();",
          "}"
        ],
        "oracle": [
          "    let slots = Slots(Slots::LIMIT as u32);",
          "    assert_eq!(_iter.slots.0, Slots::LIMIT as u32);",
          "    assert!(!_iter.slots.is_empty());",
          "    assert_eq!(_iter.slots.iter().slots.0, Slots::LIMIT as u32);"
        ],
        "code": [
          "{",
          "    let slots = Slots(Slots::LIMIT as u32);",
          "    let _iter = slots.iter();",
          "    let slots = Slots(Slots::LIMIT as u32);",
          "    assert_eq!(_iter.slots.0, Slots::LIMIT as u32);",
          "    assert!(!_iter.slots.is_empty());",
          "    assert_eq!(_iter.slots.iter().slots.0, Slots::LIMIT as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(15);",
          "    let _iter = slots.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.slots, slots);",
          "    assert_eq!(_iter.slots.0, 15);",
          "    assert!(!_iter.slots.is_empty());",
          "    let mut count = 0;",
          "    for _ in _iter.iter() { count += 1; }",
          "    assert_eq!(count, expected_number_of_bits_set);"
        ],
        "code": [
          "{",
          "    let slots = Slots(15);",
          "    let _iter = slots.iter();",
          "    assert_eq!(_iter.slots, slots);",
          "    assert_eq!(_iter.slots.0, 15);",
          "    assert!(!_iter.slots.is_empty());",
          "    let mut count = 0;",
          "    for _ in _iter.iter() { count += 1; }",
          "    assert_eq!(count, expected_number_of_bits_set);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(1);",
          "    let _iter = slots.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.slots, slots);"
        ],
        "code": [
          "{",
          "    let slots = Slots(1);",
          "    let _iter = slots.iter();",
          "    assert_eq!(_iter.slots, slots);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(Slots::LIMIT as u32 - 1);",
          "    let _iter = slots.iter();",
          "}"
        ],
        "oracle": [
          "    let slots = Slots(Slots::LIMIT as u32 - 1);",
          "    let iter = slots.iter();",
          "    assert_eq!(iter.slots.0, slots.0);",
          "    assert!(iter.slots.0 >= 0);",
          "    assert!(iter.slots.0 < Slots::LIMIT as u32);"
        ],
        "code": [
          "{",
          "    let slots = Slots(Slots::LIMIT as u32 - 1);",
          "    let _iter = slots.iter();",
          "    let slots = Slots(Slots::LIMIT as u32 - 1);",
          "    let iter = slots.iter();",
          "    assert_eq!(iter.slots.0, slots.0);",
          "    assert!(iter.slots.0 >= 0);",
          "    assert!(iter.slots.0 < Slots::LIMIT as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slots = Slots(Slots::LIMIT as u32);",
          "    let _iter = slots.iter();",
          "}"
        ],
        "oracle": [
          "    let slots = Slots(Slots::LIMIT as u32);",
          "    let _iter = slots.iter();",
          "    assert_eq!(_iter.slots.0, Slots::LIMIT as u32);",
          "    assert!(!_iter.slots.is_empty());",
          "    assert_eq!(_iter.slots.iter().count(), 0);"
        ],
        "code": [
          "{",
          "    let slots = Slots(Slots::LIMIT as u32);",
          "    let _iter = slots.iter();",
          "    let slots = Slots(Slots::LIMIT as u32);",
          "    let _iter = slots.iter();",
          "    assert_eq!(_iter.slots.0, Slots::LIMIT as u32);",
          "    assert!(!_iter.slots.is_empty());",
          "    assert_eq!(_iter.slots.iter().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]