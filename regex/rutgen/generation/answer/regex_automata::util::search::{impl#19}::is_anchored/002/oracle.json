[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let anchor = Anchored::Yes;",
          "    anchor.is_anchored();",
          "}"
        ],
        "oracle": [
          "    assert!(Anchored::Yes.is_anchored());",
          "    assert!(Anchored::Pattern(PatternID(SmallIndex::from(0))).is_anchored());",
          "    assert!(Anchored::Pattern(PatternID(SmallIndex::from(1))).is_anchored());",
          "    assert!(Anchored::Pattern(PatternID(SmallIndex::from(2))).is_anchored());",
          "    assert!(Anchored::Pattern(PatternID(SmallIndex::from(3))).is_anchored());"
        ],
        "code": [
          "{",
          "    let anchor = Anchored::Yes;",
          "    anchor.is_anchored();",
          "    assert!(Anchored::Yes.is_anchored());",
          "    assert!(Anchored::Pattern(PatternID(SmallIndex::from(0))).is_anchored());",
          "    assert!(Anchored::Pattern(PatternID(SmallIndex::from(1))).is_anchored());",
          "    assert!(Anchored::Pattern(PatternID(SmallIndex::from(2))).is_anchored());",
          "    assert!(Anchored::Pattern(PatternID(SmallIndex::from(3))).is_anchored());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(0);",
          "    let anchor = Anchored::Pattern(pattern_id);",
          "    anchor.is_anchored();",
          "}"
        ],
        "oracle": [
          "    assert!(anchor.is_anchored());",
          "    let anchor_yes = Anchored::Yes;",
          "    assert!(anchor_yes.is_anchored());",
          "    let anchor_pattern = Anchored::Pattern(PatternID(1));",
          "    assert!(anchor_pattern.is_anchored());"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(0);",
          "    let anchor = Anchored::Pattern(pattern_id);",
          "    anchor.is_anchored();",
          "    assert!(anchor.is_anchored());",
          "    let anchor_yes = Anchored::Yes;",
          "    assert!(anchor_yes.is_anchored());",
          "    let anchor_pattern = Anchored::Pattern(PatternID(1));",
          "    assert!(anchor_pattern.is_anchored());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(1);",
          "    let anchor = Anchored::Pattern(pattern_id);",
          "    anchor.is_anchored();",
          "}"
        ],
        "oracle": [
          "    assert!(anchor.is_anchored());",
          "    let anchor_another = Anchored::Yes;",
          "    assert!(anchor_another.is_anchored());",
          "    let anchor_invalid = Anchored::No;",
          "    assert!(!anchor_invalid.is_anchored());",
          "    let anchor_pattern = Anchored::Pattern(PatternID(2));",
          "    assert!(anchor_pattern.is_anchored());"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(1);",
          "    let anchor = Anchored::Pattern(pattern_id);",
          "    anchor.is_anchored();",
          "    assert!(anchor.is_anchored());",
          "    let anchor_another = Anchored::Yes;",
          "    assert!(anchor_another.is_anchored());",
          "    let anchor_invalid = Anchored::No;",
          "    assert!(!anchor_invalid.is_anchored());",
          "    let anchor_pattern = Anchored::Pattern(PatternID(2));",
          "    assert!(anchor_pattern.is_anchored());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]