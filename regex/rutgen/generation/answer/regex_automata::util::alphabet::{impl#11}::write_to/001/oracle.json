[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 0]; // Length is 0",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 0]; // Length is 0",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 1]; // Length is 1",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 1]; // Length is 1",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 1]; // Length is 1",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 1]; // Length is 1",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 2]; // Length is 2",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 2]; // Length is 2",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 3]; // Length is 3",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 3]; // Length is 3",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 4]; // Length is 4",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 4]; // Length is 4",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 5]; // Length is 5",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), SerializeError::buffer_too_small(\"byte set\"));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 5]; // Length is 5",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), SerializeError::buffer_too_small(\"byte set\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 6]; // Length is 6",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 6]; // Length is 6",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 7]; // Length is 7",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 7]; // Length is 7",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 8]; // Length is 8",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 8];",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 8]; // Length is 8",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 8];",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 9]; // Length is 9",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 9]; // Length is 9",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 10]; // Length is 10",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 10]; // Length is 10",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 11]; // Length is 11",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 11]; // Length is 11",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 12]; // Length is 12",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 12]; // Length is 12",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 13]; // Length is 13",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 13];",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 13]; // Length is 13",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 13];",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 14]; // Length is 14",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 14];",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 14]; // Length is 14",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 14];",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 15]; // Length is 15",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut buffer = [0u8; 15]; // Length is 15",
          "    let result = byte_set.write_to::<wire::Endian>(&mut buffer);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"byte set\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]