[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LittleEndian;",
          "    impl crate::util::wire::Endian for LittleEndian {",
          "        fn write_u128(value: u128, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_le_bytes());",
          "        }",
          "    }",
          "",
          "    let mut byte_set = ByteSet::default();",
          "    byte_set.add(1);",
          "    byte_set.add(2);",
          "",
          "    let mut dst = [0u8; 32];",
          "    let result = byte_set.write_to::<LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(16));",
          "    assert_eq!(&dst[0..16], &byte_set.bits.0[0].to_le_bytes());",
          "    assert_eq!(&dst[16..32], &byte_set.bits.0[1].to_le_bytes());",
          "    assert!(!byte_set.is_empty());",
          "    assert!(byte_set.contains(1));",
          "    assert!(byte_set.contains(2));",
          "    assert!(!byte_set.contains(3));",
          "    assert_eq!(byte_set.write_to_len(), 16);",
          "    assert!(byte_set.contains_range(1, 2));",
          "    assert!(!byte_set.contains_range(3, 4));"
        ],
        "code": [
          "{",
          "    struct LittleEndian;",
          "    impl crate::util::wire::Endian for LittleEndian {",
          "        fn write_u128(value: u128, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_le_bytes());",
          "        }",
          "    }",
          "",
          "    let mut byte_set = ByteSet::default();",
          "    byte_set.add(1);",
          "    byte_set.add(2);",
          "",
          "    let mut dst = [0u8; 32];",
          "    let result = byte_set.write_to::<LittleEndian>(&mut dst);",
          "    assert_eq!(result, Ok(16));",
          "    assert_eq!(&dst[0..16], &byte_set.bits.0[0].to_le_bytes());",
          "    assert_eq!(&dst[16..32], &byte_set.bits.0[1].to_le_bytes());",
          "    assert!(!byte_set.is_empty());",
          "    assert!(byte_set.contains(1));",
          "    assert!(byte_set.contains(2));",
          "    assert!(!byte_set.contains(3));",
          "    assert_eq!(byte_set.write_to_len(), 16);",
          "    assert!(byte_set.contains_range(1, 2));",
          "    assert!(!byte_set.contains_range(3, 4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BigEndian;",
          "    impl crate::util::wire::Endian for BigEndian {",
          "        fn write_u128(value: u128, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_be_bytes());",
          "        }",
          "    }",
          "",
          "    let mut byte_set = ByteSet::default();",
          "    byte_set.add(255);",
          "    byte_set.add(128);",
          "",
          "    let mut dst = [0u8; 32];",
          "    let result = byte_set.write_to::<BigEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(16));",
          "    assert_eq!(dst[0..16], [255, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0]);",
          "    assert!(dst.len() % 8 == 0);",
          "    assert!(byte_set.contains(255));",
          "    assert!(byte_set.contains(128));",
          "    assert!(!byte_set.contains(64));",
          "    assert!(byte_set.is_empty() == false);",
          "    assert_eq!(byte_set.write_to_len(), 16);"
        ],
        "code": [
          "{",
          "    struct BigEndian;",
          "    impl crate::util::wire::Endian for BigEndian {",
          "        fn write_u128(value: u128, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_be_bytes());",
          "        }",
          "    }",
          "",
          "    let mut byte_set = ByteSet::default();",
          "    byte_set.add(255);",
          "    byte_set.add(128);",
          "",
          "    let mut dst = [0u8; 32];",
          "    let result = byte_set.write_to::<BigEndian>(&mut dst);",
          "    assert_eq!(result, Ok(16));",
          "    assert_eq!(dst[0..16], [255, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0]);",
          "    assert!(dst.len() % 8 == 0);",
          "    assert!(byte_set.contains(255));",
          "    assert!(byte_set.contains(128));",
          "    assert!(!byte_set.contains(64));",
          "    assert!(byte_set.is_empty() == false);",
          "    assert_eq!(byte_set.write_to_len(), 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]