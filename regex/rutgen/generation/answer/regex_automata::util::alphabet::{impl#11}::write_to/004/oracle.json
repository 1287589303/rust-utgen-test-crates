[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 16];",
          "    let nwrite = byte_set.write_to_len();",
          "    let result = byte_set.write_to::<crate::util::wire::LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let mut byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 16];",
          "    let nwrite = byte_set.write_to_len();",
          "    assert_eq!(result, Ok(nwrite));",
          "    assert!(dst.len() >= nwrite);",
          "    assert_eq!(result.unwrap(), 16);",
          "    assert_eq!(dst[0..size_of::<u128>()], E::write_u128(byte_set.bits.0[0]));",
          "    assert_eq!(dst[size_of::<u128>()..], E::write_u128(byte_set.bits.0[1]));",
          "    assert!(nwrite % 8 == 0);"
        ],
        "code": [
          "{",
          "    let mut byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 16];",
          "    let nwrite = byte_set.write_to_len();",
          "    let result = byte_set.write_to::<crate::util::wire::LittleEndian>(&mut dst);",
          "    let mut byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 16];",
          "    let nwrite = byte_set.write_to_len();",
          "    assert_eq!(result, Ok(nwrite));",
          "    assert!(dst.len() >= nwrite);",
          "    assert_eq!(result.unwrap(), 16);",
          "    assert_eq!(dst[0..size_of::<u128>()], E::write_u128(byte_set.bits.0[0]));",
          "    assert_eq!(dst[size_of::<u128>()..], E::write_u128(byte_set.bits.0[1]));",
          "    assert!(nwrite % 8 == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 15];",
          "    let result = byte_set.write_to::<crate::util::wire::LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().what, \"byte set\");",
          "    assert_eq!(dst, [0; 15]);",
          "    assert_eq!(dst.len(), 15);",
          "    assert_eq!(byte_set.write_to_len(), 16);"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 15];",
          "    let result = byte_set.write_to::<crate::util::wire::LittleEndian>(&mut dst);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err().what, \"byte set\");",
          "    assert_eq!(dst, [0; 15]);",
          "    assert_eq!(dst.len(), 15);",
          "    assert_eq!(byte_set.write_to_len(), 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 16];",
          "    let result = byte_set.write_to::<crate::util::wire::LittleEndian>(&mut dst);",
          "    let nwrite = byte_set.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), 16);",
          "    assert_eq!(dst[0], 0);",
          "    assert_eq!(dst[1], 0);",
          "    assert_eq!(dst[2], 0);",
          "    assert_eq!(dst[3], 0);",
          "    assert_eq!(dst[4], 0);",
          "    assert_eq!(dst[5], 0);",
          "    assert_eq!(dst[6], 0);",
          "    assert_eq!(dst[7], 0);",
          "    assert_eq!(dst[8], 0);",
          "    assert_eq!(dst[9], 0);",
          "    assert_eq!(dst[10], 0);",
          "    assert_eq!(dst[11], 0);",
          "    assert_eq!(dst[12], 0);",
          "    assert_eq!(dst[13], 0);",
          "    assert_eq!(dst[14], 0);",
          "    assert_eq!(dst[15], 0);"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 16];",
          "    let result = byte_set.write_to::<crate::util::wire::LittleEndian>(&mut dst);",
          "    let nwrite = byte_set.write_to_len();",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), 16);",
          "    assert_eq!(dst[0], 0);",
          "    assert_eq!(dst[1], 0);",
          "    assert_eq!(dst[2], 0);",
          "    assert_eq!(dst[3], 0);",
          "    assert_eq!(dst[4], 0);",
          "    assert_eq!(dst[5], 0);",
          "    assert_eq!(dst[6], 0);",
          "    assert_eq!(dst[7], 0);",
          "    assert_eq!(dst[8], 0);",
          "    assert_eq!(dst[9], 0);",
          "    assert_eq!(dst[10], 0);",
          "    assert_eq!(dst[11], 0);",
          "    assert_eq!(dst[12], 0);",
          "    assert_eq!(dst[13], 0);",
          "    assert_eq!(dst[14], 0);",
          "    assert_eq!(dst[15], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 14];",
          "    let result = byte_set.write_to::<crate::util::wire::LittleEndian>(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.err().unwrap().what, \"byte set\");",
          "    assert_eq!(dst[..], [0u8; 14]);",
          "    assert!(dst.len() < byte_set.write_to_len());",
          "    assert_eq!(byte_set.write_to_len(), 16);"
        ],
        "code": [
          "{",
          "    let byte_set = ByteSet::default();",
          "    let mut dst = [0u8; 14];",
          "    let result = byte_set.write_to::<crate::util::wire::LittleEndian>(&mut dst);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.err().unwrap().what, \"byte set\");",
          "    assert_eq!(dst[..], [0u8; 14]);",
          "    assert!(dst.len() < byte_set.write_to_len());",
          "    assert_eq!(byte_set.write_to_len(), 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]