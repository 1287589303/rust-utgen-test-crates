[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI::new(Parser { ",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), ",
          "        capture_index: Cell::new(0), ",
          "        nest_limit: 0, ",
          "        octal: false, ",
          "        initial_ignore_whitespace: false, ",
          "        empty_min_range: false, ",
          "        ignore_whitespace: Cell::new(false), ",
          "        comments: RefCell::new(vec![]), ",
          "        stack_group: RefCell::new(vec![]), ",
          "        stack_class: RefCell::new(vec![]), ",
          "        capture_names: RefCell::new(vec![]), ",
          "        scratch: RefCell::new(String::new()) ",
          "    }, \"\");",
          "    assert_eq!(parser.bump_if(\"abc\"), false);",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI::new(Parser { pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), capture_index: Cell::new(0), nest_limit: 0, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, \"xyz\"); assert_eq!(parser.bump_if(\"abc\"), false);"
        ],
        "code": [
          "{",
          "    let parser = ParserI::new(Parser { ",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), ",
          "        capture_index: Cell::new(0), ",
          "        nest_limit: 0, ",
          "        octal: false, ",
          "        initial_ignore_whitespace: false, ",
          "        empty_min_range: false, ",
          "        ignore_whitespace: Cell::new(false), ",
          "        comments: RefCell::new(vec![]), ",
          "        stack_group: RefCell::new(vec![]), ",
          "        stack_class: RefCell::new(vec![]), ",
          "        capture_names: RefCell::new(vec![]), ",
          "        scratch: RefCell::new(String::new()) ",
          "    }, \"\");",
          "    assert_eq!(parser.bump_if(\"abc\"), false);",
          "    let parser = ParserI::new(Parser { pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), capture_index: Cell::new(0), nest_limit: 0, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, \"xyz\"); assert_eq!(parser.bump_if(\"abc\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI::new(Parser { ",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), ",
          "        capture_index: Cell::new(0), ",
          "        nest_limit: 0, ",
          "        octal: false, ",
          "        initial_ignore_whitespace: false, ",
          "        empty_min_range: false, ",
          "        ignore_whitespace: Cell::new(false), ",
          "        comments: RefCell::new(vec![]), ",
          "        stack_group: RefCell::new(vec![]), ",
          "        stack_class: RefCell::new(vec![]), ",
          "        capture_names: RefCell::new(vec![]), ",
          "        scratch: RefCell::new(String::from(\"xyz\")) ",
          "    }, \"xyz\");",
          "    assert_eq!(parser.bump_if(\"abc\"), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_if(\"abc\"), false);"
        ],
        "code": [
          "{",
          "    let parser = ParserI::new(Parser { ",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), ",
          "        capture_index: Cell::new(0), ",
          "        nest_limit: 0, ",
          "        octal: false, ",
          "        initial_ignore_whitespace: false, ",
          "        empty_min_range: false, ",
          "        ignore_whitespace: Cell::new(false), ",
          "        comments: RefCell::new(vec![]), ",
          "        stack_group: RefCell::new(vec![]), ",
          "        stack_class: RefCell::new(vec![]), ",
          "        capture_names: RefCell::new(vec![]), ",
          "        scratch: RefCell::new(String::from(\"xyz\")) ",
          "    }, \"xyz\");",
          "    assert_eq!(parser.bump_if(\"abc\"), false);",
          "    assert_eq!(parser.bump_if(\"abc\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI::new(Parser { ",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), ",
          "        capture_index: Cell::new(0), ",
          "        nest_limit: 0, ",
          "        octal: false, ",
          "        initial_ignore_whitespace: false, ",
          "        empty_min_range: false, ",
          "        ignore_whitespace: Cell::new(false), ",
          "        comments: RefCell::new(vec![]), ",
          "        stack_group: RefCell::new(vec![]), ",
          "        stack_class: RefCell::new(vec![]), ",
          "        capture_names: RefCell::new(vec![]), ",
          "        scratch: RefCell::new(String::from(\"ab\")) ",
          "    }, \"ab\");",
          "    assert_eq!(parser.bump_if(\"abc\"), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.bump_if(\"abc\"), false);"
        ],
        "code": [
          "{",
          "    let parser = ParserI::new(Parser { ",
          "        pos: Cell::new(Position { offset: 0, line: 1, column: 1 }), ",
          "        capture_index: Cell::new(0), ",
          "        nest_limit: 0, ",
          "        octal: false, ",
          "        initial_ignore_whitespace: false, ",
          "        empty_min_range: false, ",
          "        ignore_whitespace: Cell::new(false), ",
          "        comments: RefCell::new(vec![]), ",
          "        stack_group: RefCell::new(vec![]), ",
          "        stack_class: RefCell::new(vec![]), ",
          "        capture_names: RefCell::new(vec![]), ",
          "        scratch: RefCell::new(String::from(\"ab\")) ",
          "    }, \"ab\");",
          "    assert_eq!(parser.bump_if(\"abc\"), false);",
          "    assert_eq!(parser.bump_if(\"abc\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]