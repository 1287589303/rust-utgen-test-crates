[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(1);",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10], // example size",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "    let _result = transition_table.prev_state_id(state_id);",
          "}"
        ],
        "oracle": [
          "    let state_id_zero = StateID(0);",
          "    let state_id_valid = StateID(1);",
          "    let transition_table_valid = TransitionTable { table: vec![0; 10], classes: ByteClasses([0; 256]), stride2: 1 };",
          "    let transition_table_empty = TransitionTable { table: vec![], classes: ByteClasses([0; 256]), stride2: 1 };",
          "    let result_valid = transition_table_valid.prev_state_id(state_id_valid);",
          "    let result_empty = transition_table_empty.prev_state_id(state_id_valid);",
          "    let panic_result = std::panic::catch_unwind(|| transition_table_valid.prev_state_id(state_id_zero));",
          "    assert_eq!(result_valid, StateID(0));",
          "    assert!(panic_result.is_err());",
          "    assert_eq!(result_empty, StateID(0));"
        ],
        "code": [
          "{",
          "    let state_id = StateID(1);",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10], // example size",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "    let _result = transition_table.prev_state_id(state_id);",
          "    let state_id_zero = StateID(0);",
          "    let state_id_valid = StateID(1);",
          "    let transition_table_valid = TransitionTable { table: vec![0; 10], classes: ByteClasses([0; 256]), stride2: 1 };",
          "    let transition_table_empty = TransitionTable { table: vec![], classes: ByteClasses([0; 256]), stride2: 1 };",
          "    let result_valid = transition_table_valid.prev_state_id(state_id_valid);",
          "    let result_empty = transition_table_empty.prev_state_id(state_id_valid);",
          "    let panic_result = std::panic::catch_unwind(|| transition_table_valid.prev_state_id(state_id_zero));",
          "    assert_eq!(result_valid, StateID(0));",
          "    assert!(panic_result.is_err());",
          "    assert_eq!(result_empty, StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let state_id = StateID(0);",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "    let _result = transition_table.prev_state_id(state_id);",
          "}"
        ],
        "oracle": [
          "    let state_id = StateID(0);",
          "    let transition_table = TransitionTable { table: vec![0; 10], classes: ByteClasses([0; 256]), stride2: 1 };",
          "    let result = std::panic::catch_unwind(|| transition_table.prev_state_id(state_id));",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let state_id = StateID(0);",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "    let _result = transition_table.prev_state_id(state_id);",
          "    let state_id = StateID(0);",
          "    let transition_table = TransitionTable { table: vec![0; 10], classes: ByteClasses([0; 256]), stride2: 1 };",
          "    let result = std::panic::catch_unwind(|| transition_table.prev_state_id(state_id));",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_value = usize::MAX >> 1; // Create a sufficiently large value",
          "    let state_id = StateID(max_value);",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "    let _result = transition_table.prev_state_id(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.prev_state_id(StateID(1)), StateID(0));",
          "    assert_eq!(transition_table.prev_state_id(StateID(2)), StateID(1));",
          "    assert_eq!(transition_table.prev_state_id(StateID(10)), StateID(9));",
          "    panic::catch_unwind(|| transition_table.prev_state_id(StateID(0))).is_err();",
          "    assert_eq!(transition_table.prev_state_id(StateID(usize::MAX >> 1)), StateID((usize::MAX >> 1) - 1));"
        ],
        "code": [
          "{",
          "    let max_value = usize::MAX >> 1; // Create a sufficiently large value",
          "    let state_id = StateID(max_value);",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 10],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "    let _result = transition_table.prev_state_id(state_id);",
          "    assert_eq!(transition_table.prev_state_id(StateID(1)), StateID(0));",
          "    assert_eq!(transition_table.prev_state_id(StateID(2)), StateID(1));",
          "    assert_eq!(transition_table.prev_state_id(StateID(10)), StateID(9));",
          "    panic::catch_unwind(|| transition_table.prev_state_id(StateID(0))).is_err();",
          "    assert_eq!(transition_table.prev_state_id(StateID(usize::MAX >> 1)), StateID((usize::MAX >> 1) - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]