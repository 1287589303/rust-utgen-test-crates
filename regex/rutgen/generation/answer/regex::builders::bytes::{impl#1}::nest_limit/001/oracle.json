[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = vec![r\"a\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    builder.nest_limit(0).build().unwrap();",
          "}"
        ],
        "oracle": [
          "    builder.nest_limit(0).build().is_ok();",
          "    builder.nest_limit(0).build().unwrap();",
          "    let patterns = vec![r\"ab\"];",
          "    builder.nest_limit(0).build().is_err();",
          "    builder.nest_limit(1).build().unwrap();",
          "    builder.nest_limit(2).build().unwrap();",
          "    builder.nest_limit(10).build().unwrap();",
          "    builder.nest_limit(0).nest_limit(0).build().is_ok();"
        ],
        "code": [
          "{",
          "    let patterns = vec![r\"a\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    builder.nest_limit(0).build().unwrap();",
          "    builder.nest_limit(0).build().is_ok();",
          "    builder.nest_limit(0).build().unwrap();",
          "    let patterns = vec![r\"ab\"];",
          "    builder.nest_limit(0).build().is_err();",
          "    builder.nest_limit(1).build().unwrap();",
          "    builder.nest_limit(2).build().unwrap();",
          "    builder.nest_limit(10).build().unwrap();",
          "    builder.nest_limit(0).nest_limit(0).build().is_ok();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = vec![r\"ab\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    builder.nest_limit(1).build().unwrap();",
          "}"
        ],
        "oracle": [
          "    builder.nest_limit(0).build().is_err();",
          "    builder.nest_limit(2).build().unwrap();",
          "    builder.nest_limit(10).build().unwrap();",
          "    builder.nest_limit(0).build().is_err();"
        ],
        "code": [
          "{",
          "    let patterns = vec![r\"ab\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    builder.nest_limit(1).build().unwrap();",
          "    builder.nest_limit(0).build().is_err();",
          "    builder.nest_limit(2).build().unwrap();",
          "    builder.nest_limit(10).build().unwrap();",
          "    builder.nest_limit(0).build().is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = vec![r\"x\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    builder.nest_limit(u32::MAX).build().unwrap();",
          "}"
        ],
        "oracle": [
          "    builder.nest_limit(u32::MAX).build().unwrap();",
          "    builder.nest_limit(0).build().is_err();",
          "    builder.nest_limit(1).build().is_ok();",
          "    builder.nest_limit(10).build().is_ok();",
          "    builder.nest_limit(5).build().is_ok();",
          "    builder.nest_limit(3).build().is_ok();",
          "    builder.nest_limit(2).build().is_ok();"
        ],
        "code": [
          "{",
          "    let patterns = vec![r\"x\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    builder.nest_limit(u32::MAX).build().unwrap();",
          "    builder.nest_limit(u32::MAX).build().unwrap();",
          "    builder.nest_limit(0).build().is_err();",
          "    builder.nest_limit(1).build().is_ok();",
          "    builder.nest_limit(10).build().is_ok();",
          "    builder.nest_limit(5).build().is_ok();",
          "    builder.nest_limit(3).build().is_ok();",
          "    builder.nest_limit(2).build().is_ok();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let patterns = vec![r\"abc\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    builder.nest_limit(0).build().unwrap();",
          "}"
        ],
        "oracle": [
          "    builder.nest_limit(0).build().unwrap(); // should panic due to nest limit of 0",
          "    let patterns = vec![r\"ab\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    assert!(builder.nest_limit(0).build().is_err()); // expect error due to nest limit of 0",
          "    let patterns = vec![r\"a\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    assert!(builder.nest_limit(0).build().is_ok()); // expect success with nest limit of 0",
          "    let patterns = vec![r\"abc\", r\"de\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    assert!(builder.nest_limit(1).build().is_ok()); // expect success with nest limit of 1",
          "    let patterns = vec![r\"ab\", r\"cd\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    assert!(builder.nest_limit(1).build().is_err()); // expect error with nest limit of 1"
        ],
        "code": [
          "{",
          "    let patterns = vec![r\"abc\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    builder.nest_limit(0).build().unwrap();",
          "    builder.nest_limit(0).build().unwrap(); // should panic due to nest limit of 0",
          "    let patterns = vec![r\"ab\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    assert!(builder.nest_limit(0).build().is_err()); // expect error due to nest limit of 0",
          "    let patterns = vec![r\"a\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    assert!(builder.nest_limit(0).build().is_ok()); // expect success with nest limit of 0",
          "    let patterns = vec![r\"abc\", r\"de\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    assert!(builder.nest_limit(1).build().is_ok()); // expect success with nest limit of 1",
          "    let patterns = vec![r\"ab\", r\"cd\"];",
          "    let builder = RegexSetBuilder::new(patterns);",
          "    assert!(builder.nest_limit(1).build().is_err()); // expect error with nest limit of 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]