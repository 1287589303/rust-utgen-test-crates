[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let names = group_info.all_names();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::empty();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);",
          "    assert_eq!(names.pids.len(), group_info.pattern_len());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "    let names = group_info.all_names();",
          "    let group_info = GroupInfo::empty();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);",
          "    assert_eq!(names.pids.len(), group_info.pattern_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"a\")]).unwrap();",
          "    let names = group_info.all_names();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::new(vec![Some(\"a\")]).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);",
          "    assert_eq!(names.pids.len(), PatternID::iter(group_info.pattern_len()).len());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"a\")]).unwrap();",
          "    let names = group_info.all_names();",
          "    let group_info = GroupInfo::new(vec![Some(\"a\")]).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);",
          "    assert_eq!(names.pids.len(), PatternID::iter(group_info.pattern_len()).len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"(?P<foo>a)\")]).unwrap();",
          "    let names = group_info.all_names();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::new(vec![Some(\"(?P<foo>a)\")]).unwrap();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids, PatternID::iter(group_info.pattern_len()));",
          "    assert!(names.current_pid.is_none());",
          "    assert!(names.names.is_none());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![Some(\"(?P<foo>a)\")]).unwrap();",
          "    let names = group_info.all_names();",
          "    let group_info = GroupInfo::new(vec![Some(\"(?P<foo>a)\")]).unwrap();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids, PatternID::iter(group_info.pattern_len()));",
          "    assert!(names.current_pid.is_none());",
          "    assert!(names.names.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        Some(\"(?P<foo>a)\"),",
          "        Some(\"a\"),",
          "        Some(\"(a)\"),",
          "    ])",
          "    .unwrap();",
          "    let names = group_info.all_names();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::new(vec![Some(\"(?P<foo>a)\"), Some(\"a\"), Some(\"(a)\")]).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids, PatternID::iter(group_info.pattern_len()));",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        Some(\"(?P<foo>a)\"),",
          "        Some(\"a\"),",
          "        Some(\"(a)\"),",
          "    ])",
          "    .unwrap();",
          "    let names = group_info.all_names();",
          "    let group_info = GroupInfo::new(vec![Some(\"(?P<foo>a)\"), Some(\"a\"), Some(\"(a)\")]).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids, PatternID::iter(group_info.pattern_len()));",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        None,",
          "        None,",
          "        None,",
          "    ])",
          "    .unwrap();",
          "    let names = group_info.all_names();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::new(vec![None, None, None]).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids.len(), group_info.pattern_len());",
          "    assert!(names.current_pid.is_none());",
          "    assert!(names.names.is_none());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        None,",
          "        None,",
          "        None,",
          "    ])",
          "    .unwrap();",
          "    let names = group_info.all_names();",
          "    let group_info = GroupInfo::new(vec![None, None, None]).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids.len(), group_info.pattern_len());",
          "    assert!(names.current_pid.is_none());",
          "    assert!(names.names.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        Some(\"(a)\"),",
          "        Some(\"(b)\"),",
          "        Some(\"(c)\"),",
          "    ])",
          "    .unwrap();",
          "    let names = group_info.all_names();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::new(vec![Some(\"(a)\"), Some(\"(b)\"), Some(\"(c)\")]).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids, PatternID::iter(group_info.pattern_len()));",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        Some(\"(a)\"),",
          "        Some(\"(b)\"),",
          "        Some(\"(c)\"),",
          "    ])",
          "    .unwrap();",
          "    let names = group_info.all_names();",
          "    let group_info = GroupInfo::new(vec![Some(\"(a)\"), Some(\"(b)\"), Some(\"(c)\")]).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids, PatternID::iter(group_info.pattern_len()));",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns: Vec<Option<&str>> = (0..10).map(|i| Some(format!(\"(pattern{})\", i).as_str())).collect();",
          "    let group_info = GroupInfo::new(patterns).unwrap();",
          "    let names = group_info.all_names();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids.len(), group_info.pattern_len());",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);"
        ],
        "code": [
          "{",
          "    let patterns: Vec<Option<&str>> = (0..10).map(|i| Some(format!(\"(pattern{})\", i).as_str())).collect();",
          "    let group_info = GroupInfo::new(patterns).unwrap();",
          "    let names = group_info.all_names();",
          "    assert_eq!(names.group_info, &group_info);",
          "    assert_eq!(names.pids.len(), group_info.pattern_len());",
          "    assert_eq!(names.current_pid, None);",
          "    assert_eq!(names.names, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]