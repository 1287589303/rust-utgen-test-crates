[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn count(&self) -> usize {",
          "            0",
          "        }",
          "    }",
          "    ",
          "    let names = CaptureNames(MockGroupInfoPatternNames);",
          "    names.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.count(), 0);"
        ],
        "code": [
          "{",
          "    struct MockGroupInfoPatternNames;",
          "    impl captures::GroupInfoPatternNames<'static> for MockGroupInfoPatternNames {",
          "        fn count(&self) -> usize {",
          "            0",
          "        }",
          "    }",
          "    ",
          "    let names = CaptureNames(MockGroupInfoPatternNames);",
          "    names.count();",
          "    assert_eq!(names.count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleGroupInfoPatternNames;",
          "    impl captures::GroupInfoPatternNames<'static> for SingleGroupInfoPatternNames {",
          "        fn count(&self) -> usize {",
          "            1",
          "        }",
          "    }",
          "",
          "    let names = CaptureNames(SingleGroupInfoPatternNames);",
          "    names.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.count(), 1);"
        ],
        "code": [
          "{",
          "    struct SingleGroupInfoPatternNames;",
          "    impl captures::GroupInfoPatternNames<'static> for SingleGroupInfoPatternNames {",
          "        fn count(&self) -> usize {",
          "            1",
          "        }",
          "    }",
          "",
          "    let names = CaptureNames(SingleGroupInfoPatternNames);",
          "    names.count();",
          "    assert_eq!(names.count(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MultipleGroupsInfoPatternNames;",
          "    impl captures::GroupInfoPatternNames<'static> for MultipleGroupsInfoPatternNames {",
          "        fn count(&self) -> usize {",
          "            5",
          "        }",
          "    }",
          "",
          "    let names = CaptureNames(MultipleGroupsInfoPatternNames);",
          "    names.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.count(), 5);"
        ],
        "code": [
          "{",
          "    struct MultipleGroupsInfoPatternNames;",
          "    impl captures::GroupInfoPatternNames<'static> for MultipleGroupsInfoPatternNames {",
          "        fn count(&self) -> usize {",
          "            5",
          "        }",
          "    }",
          "",
          "    let names = CaptureNames(MultipleGroupsInfoPatternNames);",
          "    names.count();",
          "    assert_eq!(names.count(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    const MAX_CAPTURE_GROUPS: usize = 100; // Assuming a maximum limit for this example.",
          "    ",
          "    struct MaxGroupsInfoPatternNames;",
          "    impl captures::GroupInfoPatternNames<'static> for MaxGroupsInfoPatternNames {",
          "        fn count(&self) -> usize {",
          "            MAX_CAPTURE_GROUPS",
          "        }",
          "    }",
          "",
          "    let names = CaptureNames(MaxGroupsInfoPatternNames);",
          "    names.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(names.count(), MAX_CAPTURE_GROUPS);",
          "    let names_empty = CaptureNames(captures::GroupInfoPatternNames::default());",
          "    assert_eq!(names_empty.count(), 0);",
          "    let names_partial = CaptureNames(PartialGroupInfoPatternNames);",
          "    assert!(names_partial.count() < MAX_CAPTURE_GROUPS);",
          "    assert!(names_partial.count() >= 0);",
          "    let names_boundary = CaptureNames(BoundaryGroupInfoPatternNames);",
          "    assert_eq!(names_boundary.count(), BOUNDARY_GROUP_COUNT);"
        ],
        "code": [
          "{",
          "    const MAX_CAPTURE_GROUPS: usize = 100; // Assuming a maximum limit for this example.",
          "    ",
          "    struct MaxGroupsInfoPatternNames;",
          "    impl captures::GroupInfoPatternNames<'static> for MaxGroupsInfoPatternNames {",
          "        fn count(&self) -> usize {",
          "            MAX_CAPTURE_GROUPS",
          "        }",
          "    }",
          "",
          "    let names = CaptureNames(MaxGroupsInfoPatternNames);",
          "    names.count();",
          "    assert_eq!(names.count(), MAX_CAPTURE_GROUPS);",
          "    let names_empty = CaptureNames(captures::GroupInfoPatternNames::default());",
          "    assert_eq!(names_empty.count(), 0);",
          "    let names_partial = CaptureNames(PartialGroupInfoPatternNames);",
          "    assert!(names_partial.count() < MAX_CAPTURE_GROUPS);",
          "    assert!(names_partial.count() >= 0);",
          "    let names_boundary = CaptureNames(BoundaryGroupInfoPatternNames);",
          "    assert_eq!(names_boundary.count(), BOUNDARY_GROUP_COUNT);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]