[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let range1 = ClassBytesRange::new(10, 11); // start = 10, end = 11",
          "    let class_bytes = ClassBytes::new(vec![range1]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(class_bytes)),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_char(range.end())?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_char(range.end())?;",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let range1 = ClassBytesRange::new(10, 11); // start = 10, end = 11",
          "    let class_bytes = ClassBytes::new(vec![range1]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(class_bytes)),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_char(range.end())?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_char(range.end())?;",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let range1 = ClassUnicodeRange::new('a', 'b'); // start = 'a', end = 'b'",
          "    let class_unicode = ClassUnicode::new(vec![range1]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(class_unicode)),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char('a')?;",
          "    self.write_literal_char('b')?;",
          "    self.wtr.write_str(\"]\")?;",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let range1 = ClassUnicodeRange::new('a', 'b'); // start = 'a', end = 'b'",
          "    let class_unicode = ClassUnicode::new(vec![range1]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(class_unicode)),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char('a')?;",
          "    self.write_literal_char('b')?;",
          "    self.wtr.write_str(\"]\")?;",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    writer.visit_pre(&hir); // precondition: *hir.kind() matches HirKind::Empty is true",
          "    assert_eq!(writer.output, r\"(?:)\"); // expected output for HirKind::Empty case",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let cls_unicode = ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'b')]);",
          "    let hir_unicode = Hir {",
          "    kind: HirKind::Class(hir::Class::Unicode(cls_unicode)),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir_unicode);",
          "    assert!(writer.output.contains(\"[a-b]\")); // expected output for non-empty Unicode class",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let cls_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
          "    let hir_bytes = Hir {",
          "    kind: HirKind::Class(hir::Class::Bytes(cls_bytes)),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir_bytes);",
          "    assert!(writer.output.contains(\"(?-u:[\\x01\\x02])\")); // expected output for non-empty Bytes class",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let cls_empty_unicode = ClassUnicode::empty();",
          "    let hir_empty_unicode = Hir {",
          "    kind: HirKind::Class(hir::Class::Unicode(cls_empty_unicode)),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir_empty_unicode);",
          "    assert_eq!(writer.output, \"[a&&b]\"); // expected output for empty Unicode class",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let cls_empty_bytes = ClassBytes::empty();",
          "    let hir_empty_bytes = Hir {",
          "    kind: HirKind::Class(hir::Class::Bytes(cls_empty_bytes)),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir_empty_bytes);",
          "    assert_eq!(writer.output, \"[a&&b]\"); // expected output for empty Bytes class"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    writer.visit_pre(&hir); // precondition: *hir.kind() matches HirKind::Empty is true",
          "    assert_eq!(writer.output, r\"(?:)\"); // expected output for HirKind::Empty case",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let cls_unicode = ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'b')]);",
          "    let hir_unicode = Hir {",
          "    kind: HirKind::Class(hir::Class::Unicode(cls_unicode)),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir_unicode);",
          "    assert!(writer.output.contains(\"[a-b]\")); // expected output for non-empty Unicode class",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let cls_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
          "    let hir_bytes = Hir {",
          "    kind: HirKind::Class(hir::Class::Bytes(cls_bytes)),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir_bytes);",
          "    assert!(writer.output.contains(\"(?-u:[\\x01\\x02])\")); // expected output for non-empty Bytes class",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let cls_empty_unicode = ClassUnicode::empty();",
          "    let hir_empty_unicode = Hir {",
          "    kind: HirKind::Class(hir::Class::Unicode(cls_empty_unicode)),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir_empty_unicode);",
          "    assert_eq!(writer.output, \"[a&&b]\"); // expected output for empty Unicode class",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let cls_empty_bytes = ClassBytes::empty();",
          "    let hir_empty_bytes = Hir {",
          "    kind: HirKind::Class(hir::Class::Bytes(cls_empty_bytes)),",
          "    props: Properties::default(),",
          "    };",
          "    ",
          "    let _ = writer.visit_pre(&hir_empty_bytes);",
          "    assert_eq!(writer.output, \"[a&&b]\"); // expected output for empty Bytes class",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]