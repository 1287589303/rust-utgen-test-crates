[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:\\\\x{:02X})\")?;"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:\\\\x{:02X})\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    ",
          "    let unicode_range = ClassUnicodeRange::new('a', 'a'); // start == end",
          "    let unicode_class = ClassUnicode::new(vec![unicode_range]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Unicode(unicode_class)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?; // Expecting output r\"(?:)\" for HirKind::Empty",
          "    ",
          "    self.wtr.write_str(\"[\")?; // Expecting successful write for start of Unicode class",
          "    ",
          "    self.write_literal_char(range.start())?; // Expecting write to succeed for a range where start == end",
          "    ",
          "    self.wtr.write_str(\"[a&&b]\")?; // Expecting write of \"[a&&b]\" when ranges are empty",
          "    ",
          "    cls.ranges().is_empty() // Expecting false for non-empty ranges",
          "    ",
          "    range in cls.iter() // Expecting range to exist in class iteration",
          "    ",
          "    self.write_literal_class_byte(range.start())?; // Expecting successful write for byte class range when start == end",
          "    ",
          "    self.wtr.write_str(\"(?-u:[\")?; // Expecting initial write for byte class start",
          "    ",
          "    self.wtr.write_str(\"]\")?; // Expecting successful write for end of class brackets"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    ",
          "    let unicode_range = ClassUnicodeRange::new('a', 'a'); // start == end",
          "    let unicode_class = ClassUnicode::new(vec![unicode_range]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Unicode(unicode_class)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?; // Expecting output r\"(?:)\" for HirKind::Empty",
          "    ",
          "    self.wtr.write_str(\"[\")?; // Expecting successful write for start of Unicode class",
          "    ",
          "    self.write_literal_char(range.start())?; // Expecting write to succeed for a range where start == end",
          "    ",
          "    self.wtr.write_str(\"[a&&b]\")?; // Expecting write of \"[a&&b]\" when ranges are empty",
          "    ",
          "    cls.ranges().is_empty() // Expecting false for non-empty ranges",
          "    ",
          "    range in cls.iter() // Expecting range to exist in class iteration",
          "    ",
          "    self.write_literal_class_byte(range.start())?; // Expecting successful write for byte class range when start == end",
          "    ",
          "    self.wtr.write_str(\"(?-u:[\")?; // Expecting initial write for byte class start",
          "    ",
          "    self.wtr.write_str(\"]\")?; // Expecting successful write for end of class brackets",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    ",
          "    let bytes_range = ClassBytesRange::new(97, 97); // start == end",
          "    let bytes_class = ClassBytes::new(vec![bytes_range]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Bytes(bytes_class)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"[\")?;",
          "    let bytes_range = ClassBytesRange::new(97, 97);",
          "    let bytes_class = ClassBytes::new(vec![bytes_range]);",
          "    let hir = Hir { kind: HirKind::Class(Class::Bytes(bytes_class)), props: Properties::default() };",
          "    self.write_literal_class_byte(range.start())?;",
          "    let unicode_range = ClassUnicodeRange::new('a', 'a');",
          "    let unicode_class = ClassUnicode::new(vec![unicode_range]);",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class)), props: Properties::default() };",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    cls.ranges().is_empty() is false;",
          "    range in cls.iter() is true;",
          "    *hir.kind() matches HirKind::Class(hir::Class::Bytes(ref cls)) is true;",
          "    *hir.kind() matches HirKind::Empty is true;",
          "    *hir.kind() matches HirKind::Class(hir::Class::Unicode(ref cls)) is true;",
          "    self.write_literal_char(range.start())? is Err/None;"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    ",
          "    let bytes_range = ClassBytesRange::new(97, 97); // start == end",
          "    let bytes_class = ClassBytes::new(vec![bytes_range]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Bytes(bytes_class)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"[\")?;",
          "    let bytes_range = ClassBytesRange::new(97, 97);",
          "    let bytes_class = ClassBytes::new(vec![bytes_range]);",
          "    let hir = Hir { kind: HirKind::Class(Class::Bytes(bytes_class)), props: Properties::default() };",
          "    self.write_literal_class_byte(range.start())?;",
          "    let unicode_range = ClassUnicodeRange::new('a', 'a');",
          "    let unicode_class = ClassUnicode::new(vec![unicode_range]);",
          "    let hir_unicode = Hir { kind: HirKind::Class(Class::Unicode(unicode_class)), props: Properties::default() };",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    cls.ranges().is_empty() is false;",
          "    range in cls.iter() is true;",
          "    *hir.kind() matches HirKind::Class(hir::Class::Bytes(ref cls)) is true;",
          "    *hir.kind() matches HirKind::Empty is true;",
          "    *hir.kind() matches HirKind::Class(hir::Class::Unicode(ref cls)) is true;",
          "    self.write_literal_char(range.start())? is Err/None;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "",
          "    let unicode_range1 = ClassUnicodeRange::new('a', 'b'); // start < end",
          "    let unicode_range2 = ClassUnicodeRange::new('c', 'd');",
          "    let unicode_class = ClassUnicode::new(vec![unicode_range1, unicode_range2]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Unicode(unicode_class)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"(?mR:^)\")?;",
          "    self.wtr.write_str(\"(?mR:$)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\B)\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(r\"\\B\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end})\")?;",
          "    self.wtr.write_str(r\"\\b{start}\")?;",
          "    self.wtr.write_str(r\"\\b{end}\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start-half})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end-half})\")?;",
          "    self.wtr.write_str(r\"\\b{start-half}\")?;",
          "    self.wtr.write_str(r\"\\b{end-half}\")?;",
          "    write!(self.wtr, \"?P<{}>\", name)?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_char(range.end())?;"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "",
          "    let unicode_range1 = ClassUnicodeRange::new('a', 'b'); // start < end",
          "    let unicode_range2 = ClassUnicodeRange::new('c', 'd');",
          "    let unicode_class = ClassUnicode::new(vec![unicode_range1, unicode_range2]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Unicode(unicode_class)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"(?mR:^)\")?;",
          "    self.wtr.write_str(\"(?mR:$)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\B)\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(r\"\\B\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end})\")?;",
          "    self.wtr.write_str(r\"\\b{start}\")?;",
          "    self.wtr.write_str(r\"\\b{end}\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start-half})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end-half})\")?;",
          "    self.wtr.write_str(r\"\\b{start-half}\")?;",
          "    self.wtr.write_str(r\"\\b{end-half}\")?;",
          "    write!(self.wtr, \"?P<{}>\", name)?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_char(range.end())?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "",
          "    let bytes_range1 = ClassBytesRange::new(97, 98); // start < end",
          "    let bytes_range2 = ClassBytesRange::new(99, 100);",
          "    let bytes_class = ClassBytes::new(vec![bytes_range1, bytes_range2]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Bytes(bytes_class)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"[\")? == Ok(String::from(\"[\"))",
          "    hir.kind() == HirKind::Class(hir::Class::Bytes(ref cls))",
          "    cls.ranges().is_empty() == false",
          "    range in cls.iter() == true",
          "    range.start() == range.end() == false",
          "    self.write_literal_char(range.start())? == Ok(())",
          "    self.wtr.write_str(r\"(?-u:[\")? == Ok(String::from(\"(?-u:[\"))",
          "    self.wtr.write_str(\"]\")? == Ok(String::from(\"]\"))"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "",
          "    let bytes_range1 = ClassBytesRange::new(97, 98); // start < end",
          "    let bytes_range2 = ClassBytesRange::new(99, 100);",
          "    let bytes_class = ClassBytes::new(vec![bytes_range1, bytes_range2]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Bytes(bytes_class)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"[\")? == Ok(String::from(\"[\"))",
          "    hir.kind() == HirKind::Class(hir::Class::Bytes(ref cls))",
          "    cls.ranges().is_empty() == false",
          "    range in cls.iter() == true",
          "    range.start() == range.end() == false",
          "    self.write_literal_char(range.start())? == Ok(())",
          "    self.wtr.write_str(r\"(?-u:[\")? == Ok(String::from(\"(?-u:[\"))",
          "    self.wtr.write_str(\"]\")? == Ok(String::from(\"]\"))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]