[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let look = hir::Look::WordAscii;",
          "    let hir_kind = HirKind::Look(look);",
          "    let properties = Properties::default();",
          "    let hir = Hir { kind: hir_kind, props: properties };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    let expected_output = \"(?-u:\\\\b)\";",
          "    assert_eq!(writer.output, expected_output);",
          "}"
        ],
        "oracle": [
          "    writer.output.clear();",
          "    let look = hir::Look::WordAscii;",
          "    let hir_kind = HirKind::Look(look);",
          "    let properties = Properties::default();",
          "    let hir = Hir { kind: hir_kind, props: properties };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_pre(&hir);",
          "    assert!(result.is_ok());",
          "    assert_eq!(writer.output, \"(?-u:\\\\b)\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let look = hir::Look::WordAscii;",
          "    let hir_kind = HirKind::Look(look);",
          "    let properties = Properties::default();",
          "    let hir = Hir { kind: hir_kind, props: properties };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    let expected_output = \"(?-u:\\\\b)\";",
          "    assert_eq!(writer.output, expected_output);",
          "    writer.output.clear();",
          "    let look = hir::Look::WordAscii;",
          "    let hir_kind = HirKind::Look(look);",
          "    let properties = Properties::default();",
          "    let hir = Hir { kind: hir_kind, props: properties };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_pre(&hir);",
          "    assert!(result.is_ok());",
          "    assert_eq!(writer.output, \"(?-u:\\\\b)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]