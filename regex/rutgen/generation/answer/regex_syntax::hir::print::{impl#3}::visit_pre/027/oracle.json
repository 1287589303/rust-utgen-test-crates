[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let look = hir::Look::WordUnicodeNegate;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"(?-u:\\B)\");",
          "    assert!(visitor.visit_pre(&hir).is_ok());",
          "    assert!(matches!(hir.kind, HirKind::Look(hir::Look::WordUnicodeNegate)));",
          "    assert!(writer.output.contains(r\"(?-u:\\B)\"));",
          "    assert!(writer.output.len() > 0);"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let look = hir::Look::WordUnicodeNegate;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = visitor.visit_pre(&hir);",
          "    assert_eq!(writer.output, r\"(?-u:\\B)\");",
          "    assert!(visitor.visit_pre(&hir).is_ok());",
          "    assert!(matches!(hir.kind, HirKind::Look(hir::Look::WordUnicodeNegate)));",
          "    assert!(writer.output.contains(r\"(?-u:\\B)\"));",
          "    assert!(writer.output.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let look = hir::Look::WordStartUnicode;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    visitor.visit_pre(&hir).unwrap();",
          "    assert_eq!(writer.output, r\"\\B\");",
          "    assert!(matches!(visitor.wtr.write_str(r\"\\B\"), Ok(()));",
          "    assert_eq!(visitor.visit_pre(&hir), Ok(()));",
          "    assert!(matches!(visitor.visit_post(&hir), Ok(())));",
          "    assert!(matches!(visitor.finish(), Ok(())));",
          "    assert!(matches!(visitor.visit_alternation_in(), Ok(())));"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let look = hir::Look::WordStartUnicode;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = visitor.visit_pre(&hir);",
          "    visitor.visit_pre(&hir).unwrap();",
          "    assert_eq!(writer.output, r\"\\B\");",
          "    assert!(matches!(visitor.wtr.write_str(r\"\\B\"), Ok(()));",
          "    assert_eq!(visitor.visit_pre(&hir), Ok(()));",
          "    assert!(matches!(visitor.visit_post(&hir), Ok(())));",
          "    assert!(matches!(visitor.finish(), Ok(())));",
          "    assert!(matches!(visitor.visit_alternation_in(), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let look = hir::Look::WordStartHalfUnicode;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"\\B\")?;",
          "    assert_eq!(writer.output, r\"\\B\");",
          "    let look = hir::Look::WordUnicodeNegate;",
          "    let hir = Hir { kind: HirKind::Look(look), props: Properties::default() };",
          "    assert!(visitor.visit_pre(&hir).is_ok());"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let look = hir::Look::WordStartHalfUnicode;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    ",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(r\"\\B\")?;",
          "    assert_eq!(writer.output, r\"\\B\");",
          "    let look = hir::Look::WordUnicodeNegate;",
          "    let hir = Hir { kind: HirKind::Look(look), props: Properties::default() };",
          "    assert!(visitor.visit_pre(&hir).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]