[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::EndCRLF),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    writer.write_str(\"(?mR:$)\").unwrap();",
          "    let result = writer.finish();",
          "}"
        ],
        "oracle": [
          "    writer.finish() == Ok(())",
          "    writer.output == \"(?mR:$)\"",
          "    hir.kind() == HirKind::Look(hir::Look::EndCRLF)",
          "    self.wtr.write_str(\"(?mR:$)\") == Ok(())"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::EndCRLF),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    writer.write_str(\"(?mR:$)\").unwrap();",
          "    let result = writer.finish();",
          "    writer.finish() == Ok(())",
          "    writer.output == \"(?mR:$)\"",
          "    hir.kind() == HirKind::Look(hir::Look::EndCRLF)",
          "    self.wtr.write_str(\"(?mR:$)\") == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::EndCRLF),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    writer.write_str(\"(?mR:$)\").unwrap();",
          "    let result = writer.finish();",
          "}"
        ],
        "oracle": [
          "    writer.write_str(\"(?mR:$)\").unwrap();",
          "    let hir = Hir {",
          "    kind: HirKind::Look(hir::Look::EndCRLF),",
          "    props: Properties::default(),",
          "    };",
          "    let result = writer.visit_pre(&hir);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::EndCRLF),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    writer.write_str(\"(?mR:$)\").unwrap();",
          "    let result = writer.finish();",
          "    writer.write_str(\"(?mR:$)\").unwrap();",
          "    let hir = Hir {",
          "    kind: HirKind::Look(hir::Look::EndCRLF),",
          "    props: Properties::default(),",
          "    };",
          "    let result = writer.visit_pre(&hir);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]