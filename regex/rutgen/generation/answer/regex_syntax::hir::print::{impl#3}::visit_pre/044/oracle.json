[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: Result<(), fmt::Error>,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            self.output = Err(fmt::Error);",
          "            self.output",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::Start),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: Result<(), fmt::Error>,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            self.output = Err(fmt::Error);",
          "            self.output",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::Start),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    assert_eq!(writer.output, Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: Result<(), fmt::Error>,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            self.output = Err(fmt::Error);",
          "            self.output",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::End),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    assert!(writer.output.is_err());",
          "    assert_eq!(writer.output.unwrap_err().kind(), fmt::Error);",
          "    assert_eq!(hir.kind, HirKind::Look(hir::Look::End));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: Result<(), fmt::Error>,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            self.output = Err(fmt::Error);",
          "            self.output",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::End),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    assert!(writer.output.is_err());",
          "    assert_eq!(writer.output.unwrap_err().kind(), fmt::Error);",
          "    assert_eq!(hir.kind, HirKind::Look(hir::Look::End));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: Result<(), fmt::Error>,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            self.output = Err(fmt::Error);",
          "            self.output",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordAscii),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir { kind: HirKind::Look(hir::Look::Start), props: Properties::default() };",
          "    let result = writer.visit_pre(&hir);",
          "    assert_eq!(result, Err(fmt::Error));",
          "    assert!(writer.output.is_err());"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: Result<(), fmt::Error>,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            self.output = Err(fmt::Error);",
          "            self.output",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordAscii),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir { kind: HirKind::Look(hir::Look::Start), props: Properties::default() };",
          "    let result = writer.visit_pre(&hir);",
          "    assert_eq!(result, Err(fmt::Error));",
          "    assert!(writer.output.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: Result<(), fmt::Error>,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            self.output = Err(fmt::Error);",
          "            self.output",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordUnicode),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    let _ = writer.visit_pre(&hir);",
          "    assert_eq!(writer.output.is_err(), true);",
          "    assert_eq!(writer.output.unwrap_err().kind(), fmt::Error);"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: Result<(), fmt::Error>,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            self.output = Err(fmt::Error);",
          "            self.output",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: Ok(()) };",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordUnicode),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    let _ = writer.visit_pre(&hir);",
          "    assert_eq!(writer.output.is_err(), true);",
          "    assert_eq!(writer.output.unwrap_err().kind(), fmt::Error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]