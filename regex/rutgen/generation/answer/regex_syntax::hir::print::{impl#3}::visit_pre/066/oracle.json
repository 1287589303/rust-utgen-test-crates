[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0x61, 0x61)]))), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    ",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'a')])), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    ",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'b')])), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    ",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0x61, 0x61), ClassBytesRange::new(0x62, 0x62)]))), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    ",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'z')])), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0x61, 0x61)]))), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    ",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'a')])), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    ",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'b')])), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    ",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0x61, 0x61), ClassBytesRange::new(0x62, 0x62)]))), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    ",
          "    writer.clear();",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'z')])), props: Properties::default() };",
          "    let _result = visitor.visit_pre(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let cls = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'a'),",
          "        ClassUnicodeRange::new('b', 'b'),",
          "    ]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"[a&&b]\");",
          "    self.wtr.write_str(\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(\"\\b\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"(?mR:^)\")?;",
          "    self.wtr.write_str(\"(?mR:$)\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let cls = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'a'),",
          "        ClassUnicodeRange::new('b', 'b'),",
          "    ]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"[a&&b]\");",
          "    self.wtr.write_str(\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(\"\\b\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"(?mR:^)\")?;",
          "    self.wtr.write_str(\"(?mR:$)\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let cls = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'a'),",
          "    ]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.assert_eq!(visitor.visit_pre(&hir), Ok(()));",
          "    cls.ranges().is_empty().assert_eq!(false);",
          "    self.wtr.write_str(\"[\").expect(\"Failed to write opening bracket\");",
          "    let range = cls.iter().next().expect(\"Iterator should have elements\");",
          "    range.start().assert_eq!(range.end());",
          "    self.write_literal_char(range.start()).expect(\"Failed to write literal char\");",
          "    self.wtr.write_str(\"]\").expect(\"Failed to write closing bracket\");"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let cls = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'a'),",
          "    ]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.assert_eq!(visitor.visit_pre(&hir), Ok(()));",
          "    cls.ranges().is_empty().assert_eq!(false);",
          "    self.wtr.write_str(\"[\").expect(\"Failed to write opening bracket\");",
          "    let range = cls.iter().next().expect(\"Iterator should have elements\");",
          "    range.start().assert_eq!(range.end());",
          "    self.write_literal_char(range.start()).expect(\"Failed to write literal char\");",
          "    self.wtr.write_str(\"]\").expect(\"Failed to write closing bracket\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let cls = ClassBytes::new(vec![",
          "        ClassBytesRange::new(65, 65), // A",
          "    ]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_byte(b)?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:\")?;",
          "    self.write_literal(byte)?;",
          "    self.wtr.write_str(r\"(?:\")?;"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let cls = ClassBytes::new(vec![",
          "        ClassBytesRange::new(65, 65), // A",
          "    ]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_byte(b)?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:\")?;",
          "    self.write_literal(byte)?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let cls = ClassBytes::new(vec![",
          "        ClassBytesRange::new(65, 90), // A-Z",
          "        ClassBytesRange::new(97, 122), // a-z",
          "    ]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(65)?;",
          "    self.write_literal_class_byte(90)?;",
          "    self.write_literal_class_byte(97)?;",
          "    self.write_literal_class_byte(122)?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"]\")?;"
        ],
        "code": [
          "{",
          "    let mut writer = Vec::new();",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let cls = ClassBytes::new(vec![",
          "        ClassBytesRange::new(65, 90), // A-Z",
          "        ClassBytesRange::new(97, 122), // a-z",
          "    ]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(65)?;",
          "    self.write_literal_class_byte(90)?;",
          "    self.write_literal_class_byte(97)?;",
          "    self.write_literal_class_byte(122)?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]