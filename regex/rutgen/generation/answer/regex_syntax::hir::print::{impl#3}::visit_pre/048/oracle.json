[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_range = ClassBytesRange::new(5, 5);",
          "    let class_bytes = ClassBytes::new(vec![bytes_range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(class_bytes)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    let bytes_range = ClassBytesRange::new(5, 5);",
          "    let class_bytes = ClassBytes::new(vec![bytes_range]);",
          "    assert_eq!(self.wtr.write_str(\"[a&&b]\"), Ok(()));",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(class_bytes)), props: Properties::default() };",
          "    assert!(cls.ranges().is_empty() == false);",
          "    for range in cls.iter() {",
          "    assert!(range.start() == range.end());",
          "    assert!(self.write_literal_class_byte(range.start()).is_err());",
          "    }",
          "    assert_eq!(self.write_literal_class_byte(5), Ok(()));"
        ],
        "code": [
          "{",
          "    let bytes_range = ClassBytesRange::new(5, 5);",
          "    let class_bytes = ClassBytes::new(vec![bytes_range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(class_bytes)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    let bytes_range = ClassBytesRange::new(5, 5);",
          "    let class_bytes = ClassBytes::new(vec![bytes_range]);",
          "    assert_eq!(self.wtr.write_str(\"[a&&b]\"), Ok(()));",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(class_bytes)), props: Properties::default() };",
          "    assert!(cls.ranges().is_empty() == false);",
          "    for range in cls.iter() {",
          "    assert!(range.start() == range.end());",
          "    assert!(self.write_literal_class_byte(range.start()).is_err());",
          "    }",
          "    assert_eq!(self.write_literal_class_byte(5), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unicode_range = ClassUnicodeRange::new('a', 'a');",
          "    let class_unicode = ClassUnicode::new(vec![unicode_range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(class_unicode)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.write_literal_byte(b)?;",
          "    let result = core::str::from_utf8(bytes);",
          "    if length == 1 {",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    }",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;"
        ],
        "code": [
          "{",
          "    let unicode_range = ClassUnicodeRange::new('a', 'a');",
          "    let class_unicode = ClassUnicode::new(vec![unicode_range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(class_unicode)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.write_literal_byte(b)?;",
          "    let result = core::str::from_utf8(bytes);",
          "    if length == 1 {",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    }",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = &[65, 66, 67];",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(bytes.to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    &cls.iter().collect::<Vec<_>>()[0].start() == &cls.iter().collect::<Vec<_>>()[0].end()?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.write_literal_byte(65)?;",
          "    self.write_literal_byte(66)?;",
          "    self.write_literal_byte(67)?;"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = &[65, 66, 67];",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(bytes.to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_char(range.start())?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    &cls.iter().collect::<Vec<_>>()[0].start() == &cls.iter().collect::<Vec<_>>()[0].end()?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.write_literal_byte(65)?;",
          "    self.write_literal_byte(66)?;",
          "    self.write_literal_byte(67)?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]