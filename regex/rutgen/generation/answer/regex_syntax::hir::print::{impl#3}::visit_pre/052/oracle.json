[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(bytes.clone())),",
          "        props: Properties::default(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let cls = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
          "    let hir = Hir { kind: HirKind::Class(Class::Bytes(cls)), props: Properties::default() };",
          "    let _ = writer.visit_pre(&hir);",
          "    cls.ranges().is_empty() == false;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?.is_err();",
          "    cls.iter().next().is_some();",
          "    range.start() == range.end() == false;",
          "    range.start() + 1 == range.end() == true;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    writer.visit_pre(&hir).is_ok();"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(bytes.clone())),",
          "        props: Properties::default(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let cls = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
          "    let hir = Hir { kind: HirKind::Class(Class::Bytes(cls)), props: Properties::default() };",
          "    let _ = writer.visit_pre(&hir);",
          "    cls.ranges().is_empty() == false;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?.is_err();",
          "    cls.iter().next().is_some();",
          "    range.start() == range.end() == false;",
          "    range.start() + 1 == range.end() == true;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    writer.visit_pre(&hir).is_ok();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = 10;",
          "    let end = 11;",
          "    let range = ClassBytesRange::new(start, end);",
          "    let class_bytes = ClassBytes::new(vec![range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(class_bytes)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    cls.ranges().is_empty() == false;",
          "    range.start() + 1 == range.end();",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    Ok(());",
          "    *hir.kind() == HirKind::Class(hir::Class::Bytes(class_bytes));",
          "    range in cls.iter();",
          "    self.wtr.write_str(\"(?-u:[\")? == Ok(());",
          "    *hir.kind() == HirKind::Literal(hir::Literal(ref bytes));",
          "    range.start() == range.end() == false;",
          "    *hir.kind() == HirKind::Class(hir::Class::Unicode(ref cls));",
          "    cls.ranges().is_empty() == false;"
        ],
        "code": [
          "{",
          "    let start = 10;",
          "    let end = 11;",
          "    let range = ClassBytesRange::new(start, end);",
          "    let class_bytes = ClassBytes::new(vec![range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(class_bytes)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    cls.ranges().is_empty() == false;",
          "    range.start() + 1 == range.end();",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    Ok(());",
          "    *hir.kind() == HirKind::Class(hir::Class::Bytes(class_bytes));",
          "    range in cls.iter();",
          "    self.wtr.write_str(\"(?-u:[\")? == Ok(());",
          "    *hir.kind() == HirKind::Literal(hir::Literal(ref bytes));",
          "    range.start() == range.end() == false;",
          "    *hir.kind() == HirKind::Class(hir::Class::Unicode(ref cls));",
          "    cls.ranges().is_empty() == false;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range_start = 'a';",
          "    let range_end = 'b';",
          "    let range = ClassUnicodeRange::new(range_start, range_end);",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(class_unicode)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"[a&&b]\");",
          "    writer.visit_pre(&hir);",
          "    cls.ranges().is_empty() is false;",
          "    *hir.kind() matches HirKind::Class(hir::Class::Bytes(ref cls)) or HirKind::Class(hir::Class::Unicode(ref cls));",
          "    *hir.kind() matches HirKind::Literal(hir::Literal(ref bytes));",
          "    range in cls.iter() is true;",
          "    range.start() + 1 == range.end() is true;",
          "    self.write_literal_class_byte(range.start())? is Ok/Some;",
          "    self.write_literal_class_byte(range.end())? is Err/None;"
        ],
        "code": [
          "{",
          "    let range_start = 'a';",
          "    let range_end = 'b';",
          "    let range = ClassUnicodeRange::new(range_start, range_end);",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(class_unicode)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"[a&&b]\");",
          "    writer.visit_pre(&hir);",
          "    cls.ranges().is_empty() is false;",
          "    *hir.kind() matches HirKind::Class(hir::Class::Bytes(ref cls)) or HirKind::Class(hir::Class::Unicode(ref cls));",
          "    *hir.kind() matches HirKind::Literal(hir::Literal(ref bytes));",
          "    range in cls.iter() is true;",
          "    range.start() + 1 == range.end() is true;",
          "    self.write_literal_class_byte(range.start())? is Ok/Some;",
          "    self.write_literal_class_byte(range.end())? is Err/None;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]