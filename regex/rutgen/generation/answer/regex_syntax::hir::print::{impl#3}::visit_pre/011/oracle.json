[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordEndHalfUnicode),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"\\b{end-half}\")? == Ok(())",
          "    *hir.kind() == HirKind::Look(hir::Look::WordEndHalfUnicode)"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordEndHalfUnicode),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(r\"\\b{end-half}\")? == Ok(())",
          "    *hir.kind() == HirKind::Look(hir::Look::WordEndHalfUnicode)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyWriter;",
          "",
          "    impl fmt::Write for EmptyWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordEndHalfUnicode),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let writer = Writer { wtr: EmptyWriter };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(()), writer.visit_pre(&hir));",
          "    assert!(matches!(hir.kind(), HirKind::Look(hir::Look::WordEndHalfUnicode)));",
          "    assert!(writer.wtr.write_str(r\"\\b{end-half}\").is_ok());"
        ],
        "code": [
          "{",
          "    struct EmptyWriter;",
          "",
          "    impl fmt::Write for EmptyWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordEndHalfUnicode),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let writer = Writer { wtr: EmptyWriter };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    assert_eq!(Ok(()), writer.visit_pre(&hir));",
          "    assert!(matches!(hir.kind(), HirKind::Look(hir::Look::WordEndHalfUnicode)));",
          "    assert!(writer.wtr.write_str(r\"\\b{end-half}\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]