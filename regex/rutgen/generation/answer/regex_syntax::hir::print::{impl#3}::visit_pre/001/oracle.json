[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(hir::Literal(b\"a\".to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(hir::Literal(b\"b\".to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![hir1, hir2]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let hir1 = Hir { kind: HirKind::Literal(hir::Literal(b\"a\".to_vec())), props: Properties::default() };",
          "    let hir2 = Hir { kind: HirKind::Literal(hir::Literal(b\"b\".to_vec())), props: Properties::default() };",
          "    let hir = Hir { kind: HirKind::Alternation(vec![hir1, hir2]), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_pre(&hir);",
          "    assert!(result.is_ok());",
          "    assert_eq!(writer.output, r\"(?:)\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(hir::Literal(b\"a\".to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(hir::Literal(b\"b\".to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![hir1, hir2]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let hir1 = Hir { kind: HirKind::Literal(hir::Literal(b\"a\".to_vec())), props: Properties::default() };",
          "    let hir2 = Hir { kind: HirKind::Literal(hir::Literal(b\"b\".to_vec())), props: Properties::default() };",
          "    let hir = Hir { kind: HirKind::Alternation(vec![hir1, hir2]), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_pre(&hir);",
          "    assert!(result.is_ok());",
          "    assert_eq!(writer.output, r\"(?:)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let nested_hir1 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir { kind: HirKind::Literal(hir::Literal(b\"x\".to_vec())), props: Properties::default() },",
          "            Hir { kind: HirKind::Literal(hir::Literal(b\"y\".to_vec())), props: Properties::default() },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let nested_hir2 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir { kind: HirKind::Literal(hir::Literal(b\"z\".to_vec())), props: Properties::default() },",
          "            Hir { kind: HirKind::Literal(hir::Literal(b\"w\".to_vec())), props: Properties::default() },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![nested_hir1, nested_hir2]),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:\")?;",
          "    *hir.kind() matches HirKind::Alternation(_);",
          "    writer.output should match r\"(?:x|y|z|w)\";",
          "    visitor.visit_pre(&hir) should be Ok(());",
          "    self.wtr.write_str(expected_output)?;",
          "    self.wtr.write_str(\"([^\\s]+)\")?;",
          "    self.wtr.write_str(\"(?-u:^)\")?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(r\"(?m:^)\")?;",
          "    self.wtr.write_str(r\"(?m:$)\")?;",
          "    self.wtr.write_str(r\"(?mR:^)\")?;",
          "    self.wtr.write_str(r\"(?mR:$)\")?;",
          "    self.wtr.write_str(\"Pr\")?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    self.wtr.write_str(r\"(?-u:[\")?;",
          "    self.wtr.write_str(\"(?u:xxx)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start})\")?;",
          "    self.wtr.write_str(r\"\\b{end}\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start-half})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end-half})\")?;",
          "    self.wtr.write_str(r\"\\b{start-half}\")?;",
          "    self.wtr.write_str(r\"\\b{end-half}\")?;",
          "    self.wtr.write_str(\"(?-u:^)\")?;",
          "    self.wtr.write_str(\"(?-u:$)\")?;",
          "    self.wtr.write_str(r\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(r\"])\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"(?u:xxx)\")?;",
          "    self.wtr.write_str(r\"(?-u:[\")?;",
          "    self.wtr.write_str(\"(?u:[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(r\"(?-u:[\")?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"(?u:xxx)\")?;",
          "    self.wtr.write_str(r\"(?-u:[\")?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"(?u:[\")?;",
          "    self.wtr.write_str(\"(?-u:^)\")?;",
          "    self.wtr.write_str(r\"(?mR:$)\")?;",
          "    self.wtr.write_str(\"(?u:[\")?;",
          "    self.wtr.write_str(r\"(?u:{end})\")?;",
          "    self.wtr.write_str(r\"(?u:{start})\")?;",
          "    self.wtr.write_str(\"[a&&]\")?;",
          "    self.wtr.write_str(\"((?u:.*)?$)\")?;",
          "    self.wtr.write_str(r\"(?u:{end})\")?;",
          "    self.wtr.write_str(r\"(?u:{start})\")?;",
          "    self.wtr.write_str(\"(?u:xx)\")?;",
          "    visitor.visit_post(&hir) should be Ok(());",
          "    local_hir.kind() should be HirKind::Alternation(_);",
          "    self.wtr.write_str(\"(?u:^)\")?;",
          "    self.wtr.write_str(\"(?-u:[start-half])\")?;",
          "    self.wtr.write_str(\"(?-u:[end-half])\")?;",
          "    self.wtr.write_str(\"(?-u:[a])\")?;",
          "    writer.output should match expected_output;",
          "    writer.output should not match unexpected_output;"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let nested_hir1 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir { kind: HirKind::Literal(hir::Literal(b\"x\".to_vec())), props: Properties::default() },",
          "            Hir { kind: HirKind::Literal(hir::Literal(b\"y\".to_vec())), props: Properties::default() },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let nested_hir2 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir { kind: HirKind::Literal(hir::Literal(b\"z\".to_vec())), props: Properties::default() },",
          "            Hir { kind: HirKind::Literal(hir::Literal(b\"w\".to_vec())), props: Properties::default() },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![nested_hir1, nested_hir2]),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    *hir.kind() matches HirKind::Alternation(_);",
          "    writer.output should match r\"(?:x|y|z|w)\";",
          "    visitor.visit_pre(&hir) should be Ok(());",
          "    self.wtr.write_str(expected_output)?;",
          "    self.wtr.write_str(\"([^\\s]+)\")?;",
          "    self.wtr.write_str(\"(?-u:^)\")?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(r\"(?m:^)\")?;",
          "    self.wtr.write_str(r\"(?m:$)\")?;",
          "    self.wtr.write_str(r\"(?mR:^)\")?;",
          "    self.wtr.write_str(r\"(?mR:$)\")?;",
          "    self.wtr.write_str(\"Pr\")?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    self.wtr.write_str(r\"(?-u:[\")?;",
          "    self.wtr.write_str(\"(?u:xxx)\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start})\")?;",
          "    self.wtr.write_str(r\"\\b{end}\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start-half})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end-half})\")?;",
          "    self.wtr.write_str(r\"\\b{start-half}\")?;",
          "    self.wtr.write_str(r\"\\b{end-half}\")?;",
          "    self.wtr.write_str(\"(?-u:^)\")?;",
          "    self.wtr.write_str(\"(?-u:$)\")?;",
          "    self.wtr.write_str(r\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(r\"])\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"(?u:xxx)\")?;",
          "    self.wtr.write_str(r\"(?-u:[\")?;",
          "    self.wtr.write_str(\"(?u:[\")?;",
          "    self.wtr.write_str(\"]\")?;",
          "    self.wtr.write_str(r\"(?-u:[\")?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"(?u:xxx)\")?;",
          "    self.wtr.write_str(r\"(?-u:[\")?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(\"(?u:[\")?;",
          "    self.wtr.write_str(\"(?-u:^)\")?;",
          "    self.wtr.write_str(r\"(?mR:$)\")?;",
          "    self.wtr.write_str(\"(?u:[\")?;",
          "    self.wtr.write_str(r\"(?u:{end})\")?;",
          "    self.wtr.write_str(r\"(?u:{start})\")?;",
          "    self.wtr.write_str(\"[a&&]\")?;",
          "    self.wtr.write_str(\"((?u:.*)?$)\")?;",
          "    self.wtr.write_str(r\"(?u:{end})\")?;",
          "    self.wtr.write_str(r\"(?u:{start})\")?;",
          "    self.wtr.write_str(\"(?u:xx)\")?;",
          "    visitor.visit_post(&hir) should be Ok(());",
          "    local_hir.kind() should be HirKind::Alternation(_);",
          "    self.wtr.write_str(\"(?u:^)\")?;",
          "    self.wtr.write_str(\"(?-u:[start-half])\")?;",
          "    self.wtr.write_str(\"(?-u:[end-half])\")?;",
          "    self.wtr.write_str(\"(?-u:[a])\")?;",
          "    writer.output should match expected_output;",
          "    writer.output should not match unexpected_output;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(hir::Literal(b\"c\".to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(hir::Literal(b\"c\".to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![hir1, hir2]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:\")? == Err(fmt::Error)",
          "    self.wtr.write_str(\"(?:\" )? == Ok(())",
          "    hir.kind() == HirKind::Alternation(_)",
          "    visitor.visit_pre(&hir) == Err(fmt::Error)",
          "    writer.output == \"c\"",
          "    writer.output == \"(?:c|c)\"",
          "    writer.output.contains(\"c\") == true"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let hir1 = Hir {",
          "        kind: HirKind::Literal(hir::Literal(b\"c\".to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir2 = Hir {",
          "        kind: HirKind::Literal(hir::Literal(b\"c\".to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![hir1, hir2]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:\")? == Err(fmt::Error)",
          "    self.wtr.write_str(\"(?:\" )? == Ok(())",
          "    hir.kind() == HirKind::Alternation(_)",
          "    visitor.visit_pre(&hir) == Err(fmt::Error)",
          "    writer.output == \"c\"",
          "    writer.output == \"(?:c|c)\"",
          "    writer.output.contains(\"c\") == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]