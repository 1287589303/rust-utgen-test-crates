[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter(String);",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter(String::new());",
          "    let look = hir::Look::WordUnicode;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"\\b\")?;",
          "    assert!(writer.0 == r\"\\b\");",
          "    assert!(visitor.visit_pre(&hir).is_ok());",
          "    assert!(matches!(hir.kind(), HirKind::Look(hir::Look::WordUnicode)));",
          "    assert!(matches!(writer.0, r\"\\b\"));"
        ],
        "code": [
          "{",
          "    struct MockWriter(String);",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter(String::new());",
          "    let look = hir::Look::WordUnicode;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    assert!(writer.0 == r\"\\b\");",
          "    assert!(visitor.visit_pre(&hir).is_ok());",
          "    assert!(matches!(hir.kind(), HirKind::Look(hir::Look::WordUnicode)));",
          "    assert!(matches!(writer.0, r\"\\b\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrorWriter;",
          "    impl fmt::Write for ErrorWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Err(fmt::Error)",
          "        }",
          "    }",
          "",
          "    let mut writer = ErrorWriter;",
          "    let look = hir::Look::WordUnicode;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_pre(&hir), Err(fmt::Error));",
          "    assert!(matches!(visitor.wtr.write_str(r\"\\b\"), Err(fmt::Error)));",
          "    assert_eq!(hir.kind, HirKind::Look(hir::Look::WordUnicode));",
          "    assert_eq!(visitor.wtr.write_str(r\"\\b\").is_err(), true);",
          "    assert!(visitor.visit_pre(&hir).is_err());"
        ],
        "code": [
          "{",
          "    struct ErrorWriter;",
          "    impl fmt::Write for ErrorWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Err(fmt::Error)",
          "        }",
          "    }",
          "",
          "    let mut writer = ErrorWriter;",
          "    let look = hir::Look::WordUnicode;",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    assert_eq!(visitor.visit_pre(&hir), Err(fmt::Error));",
          "    assert!(matches!(visitor.wtr.write_str(r\"\\b\"), Err(fmt::Error)));",
          "    assert_eq!(hir.kind, HirKind::Look(hir::Look::WordUnicode));",
          "    assert_eq!(visitor.wtr.write_str(r\"\\b\").is_err(), true);",
          "    assert!(visitor.visit_pre(&hir).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]