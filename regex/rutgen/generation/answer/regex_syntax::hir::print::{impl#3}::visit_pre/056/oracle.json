[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![104, 101, 108, 108, 111]; // \"hello\"",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(bytes.clone())),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    writer.visit_pre(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_byte(b)?;",
          "    self.write_literal_byte(range.start())?;",
          "    self.write_literal_byte(range.end())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    core::str::from_utf8(bytes)?;",
          "    self.write_literal_char(c)?;",
          "    self.write_literal_byte(b)?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\B)\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![104, 101, 108, 108, 111]; // \"hello\"",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(bytes.clone())),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    writer.visit_pre(&hir).unwrap();",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_byte(b)?;",
          "    self.write_literal_byte(range.start())?;",
          "    self.write_literal_byte(range.end())?;",
          "    self.wtr.write_str(\"]\")?;",
          "    core::str::from_utf8(bytes)?;",
          "    self.write_literal_char(c)?;",
          "    self.write_literal_byte(b)?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\B)\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranges = vec![ClassUnicodeRange::new('a', 'b')]; // Range from 'a' to 'b', not inclusive",
          "    let cls = ClassUnicode::new(ranges.clone());",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    writer.visit_pre(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"[\")?",
          "    self.write_literal_char('a')?",
          "    self.wtr.write_str(\"-\")?",
          "    self.write_literal_char('b')?",
          "    self.wtr.write_str(\"]\")?"
        ],
        "code": [
          "{",
          "    let ranges = vec![ClassUnicodeRange::new('a', 'b')]; // Range from 'a' to 'b', not inclusive",
          "    let cls = ClassUnicode::new(ranges.clone());",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    writer.visit_pre(&hir).unwrap();",
          "    self.wtr.write_str(\"[\")?",
          "    self.write_literal_char('a')?",
          "    self.wtr.write_str(\"-\")?",
          "    self.write_literal_char('b')?",
          "    self.wtr.write_str(\"]\")?",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_ranges = vec![ClassBytesRange::new(1, 3)]; // Range 1 to 3 (1, 2, 3)",
          "    let cls = ClassBytes::new(byte_ranges.clone());",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    writer.visit_pre(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    cls.ranges().is_empty() is false;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    range.start() + 1 == range.end() is false;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    writer.visit_pre(&hir).unwrap();",
          "    hir.kind() matches HirKind::Class(hir::Class::Bytes(ref cls));",
          "    cls.iter() - asserts that range in cls.iter() is true;",
          "    self.wtr.write_str(\"]\")?;"
        ],
        "code": [
          "{",
          "    let byte_ranges = vec![ClassBytesRange::new(1, 3)]; // Range 1 to 3 (1, 2, 3)",
          "    let cls = ClassBytes::new(byte_ranges.clone());",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    writer.visit_pre(&hir).unwrap();",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    cls.ranges().is_empty() is false;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    range.start() + 1 == range.end() is false;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"(?:\")?;",
          "    writer.visit_pre(&hir).unwrap();",
          "    hir.kind() matches HirKind::Class(hir::Class::Bytes(ref cls));",
          "    cls.iter() - asserts that range in cls.iter() is true;",
          "    self.wtr.write_str(\"]\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]