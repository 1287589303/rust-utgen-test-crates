[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let capture_hir = Hir {",
          "        kind: HirKind::Capture(hir::Capture { name: Some(String::from(\"test_capture\")), ..Default::default() }),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_pre(&capture_hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_pre(&capture_hir).unwrap();",
          "    assert_eq!(writer.output, \"(\");",
          "    assert!(writer.output.contains(\"?P<test_capture>\"));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let capture_hir = Hir {",
          "        kind: HirKind::Capture(hir::Capture { name: Some(String::from(\"test_capture\")), ..Default::default() }),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_pre(&capture_hir).unwrap();",
          "    visitor.visit_pre(&capture_hir).unwrap();",
          "    assert_eq!(writer.output, \"(\");",
          "    assert!(writer.output.contains(\"?P<test_capture>\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let capture_hir = Hir {",
          "        kind: HirKind::Capture(hir::Capture { name: Some(String::from(\"another_capture\")), ..Default::default() }),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_pre(&capture_hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    let capture_hir = Hir { kind: HirKind::Capture(hir::Capture { name: Some(String::from(\"another_capture\")), ..Default::default() }), props: Properties::default() };",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_pre(&capture_hir);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(writer.output.contains(\"?P<another_capture>\"));",
          "    assert!(writer.output.starts_with(\"(\"));",
          "    assert!(writer.output.ends_with(\")\"));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let capture_hir = Hir {",
          "        kind: HirKind::Capture(hir::Capture { name: Some(String::from(\"another_capture\")), ..Default::default() }),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_pre(&capture_hir).unwrap();",
          "    let capture_hir = Hir { kind: HirKind::Capture(hir::Capture { name: Some(String::from(\"another_capture\")), ..Default::default() }), props: Properties::default() };",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_pre(&capture_hir);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(writer.output.contains(\"?P<another_capture>\"));",
          "    assert!(writer.output.starts_with(\"(\"));",
          "    assert!(writer.output.ends_with(\")\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]