[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let cls = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'b'),",
          "        ClassUnicodeRange::new('c', 'd'),",
          "    ]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])?;",
          "    Ok(())",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    Ok(())",
          "    self.wtr.write_str(\")\").map_err(|_| fmt::Error)?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\")\").map_err(|_| fmt::Error)?;",
          "    self.wtr.write_str(\">\")?;"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let cls = ClassUnicode::new(vec![",
          "        ClassUnicodeRange::new('a', 'b'),",
          "        ClassUnicodeRange::new('c', 'd'),",
          "    ]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])?;",
          "    Ok(())",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    Ok(())",
          "    self.wtr.write_str(\")\").map_err(|_| fmt::Error)?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\"[\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"])?;",
          "    self.wtr.write_str(\")\").map_err(|_| fmt::Error)?;",
          "    self.wtr.write_str(\">\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let cls = ClassBytes::new(vec![",
          "        ClassBytesRange::new(1, 2),",
          "        ClassBytesRange::new(3, 4),",
          "    ]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(1)?;",
          "    self.write_literal_class_byte(2)?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_class_byte(3)?;",
          "    self.write_literal_class_byte(4)?;",
          "    self.wtr.write_str(\"])\")?;",
          "    Ok(())"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let cls = ClassBytes::new(vec![",
          "        ClassBytesRange::new(1, 2),",
          "        ClassBytesRange::new(3, 4),",
          "    ]);",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(cls)),",
          "        props: Properties::default(),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.write_literal_class_byte(1)?;",
          "    self.write_literal_class_byte(2)?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_class_byte(3)?;",
          "    self.write_literal_class_byte(4)?;",
          "    self.wtr.write_str(\"])\")?;",
          "    Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let bytes: &[u8] = b\"abc\";",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(bytes.to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"(?mR:^)\")?;",
          "    self.wtr.write_str(\"(?mR:$)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\B)\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(r\"\\B\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end})\")?;",
          "    self.wtr.write_str(r\"\\b{start}\")?;",
          "    self.wtr.write_str(r\"\\b{end}\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start-half})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end-half})\")?;",
          "    self.wtr.write_str(r\"\\b{start-half}\")?;",
          "    self.wtr.write_str(r\"\\b{end-half}\")?;"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let bytes: &[u8] = b\"abc\";",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(bytes.to_vec())),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.visit_pre(&hir);",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    self.wtr.write_str(\"])\")?;",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.write_literal_class_byte(range.end())?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"(?mR:^)\")?;",
          "    self.wtr.write_str(\"(?mR:$)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\B)\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(r\"\\B\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end})\")?;",
          "    self.wtr.write_str(r\"\\b{start}\")?;",
          "    self.wtr.write_str(r\"\\b{end}\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start-half})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end-half})\")?;",
          "    self.wtr.write_str(r\"\\b{start-half}\")?;",
          "    self.wtr.write_str(r\"\\b{end-half}\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]