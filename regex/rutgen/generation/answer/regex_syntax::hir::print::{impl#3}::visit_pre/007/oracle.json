[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct WriterMock {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for WriterMock {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            if self.output.len() > 0 {",
          "                return Err(fmt::Error);",
          "            }",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = WriterMock { output: String::new() };",
          "    let capture = hir::Capture { name: Some(\"test_name\".to_string()), ..Default::default() };",
          "    let hir = Hir { kind: HirKind::Capture(capture), props: Default::default() };",
          "    ",
          "    let result = writer.visit_pre(&hir);",
          "    let _ = writer.finish();",
          "",
          "    // Triggering the write! error",
          "    let name = capture.name.as_ref().unwrap();",
          "    let _ = write!(writer, \"?P<{}>\", name);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(\")?;",
          "    let capture = hir::Capture { name: Some(\"test_name\".to_string()), ..Default::default() };",
          "    let hir = Hir { kind: HirKind::Capture(capture), props: Default::default() };",
          "    assert_eq!(writer.visit_pre(&hir), Ok(()));",
          "    assert!(writer.output.is_empty());",
          "    let name = capture.name.as_ref().unwrap();",
          "    assert_eq!(write!(writer, \"?P<{}>\", name).is_err(), true);"
        ],
        "code": [
          "{",
          "    struct WriterMock {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for WriterMock {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            if self.output.len() > 0 {",
          "                return Err(fmt::Error);",
          "            }",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = WriterMock { output: String::new() };",
          "    let capture = hir::Capture { name: Some(\"test_name\".to_string()), ..Default::default() };",
          "    let hir = Hir { kind: HirKind::Capture(capture), props: Default::default() };",
          "    ",
          "    let result = writer.visit_pre(&hir);",
          "    let _ = writer.finish();",
          "",
          "    // Triggering the write! error",
          "    let name = capture.name.as_ref().unwrap();",
          "    let _ = write!(writer, \"?P<{}>\", name);",
          "    self.wtr.write_str(\"(\")?;",
          "    let capture = hir::Capture { name: Some(\"test_name\".to_string()), ..Default::default() };",
          "    let hir = Hir { kind: HirKind::Capture(capture), props: Default::default() };",
          "    assert_eq!(writer.visit_pre(&hir), Ok(()));",
          "    assert!(writer.output.is_empty());",
          "    let name = capture.name.as_ref().unwrap();",
          "    assert_eq!(write!(writer, \"?P<{}>\", name).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]