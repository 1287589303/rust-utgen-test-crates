[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "",
          "    let bytes_range = ClassBytesRange::new(10, 20);",
          "    let class_bytes = ClassBytes::new(vec![bytes_range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(class_bytes)),",
          "        props: Default::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    cls.iter().next().is_some();",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_class_byte(range.end()).is_err();",
          "    cls.ranges().is_empty() == false;",
          "    *hir.kind() == HirKind::Class(hir::Class::Bytes(ref cls));",
          "    *hir.kind() == HirKind::Literal(hir::Literal(ref bytes));",
          "    range.start() == range.end() == false;",
          "    range.start() + 1 == range.end() == false;",
          "    self.wtr.write_str(\"[a&&b]\").is_ok();",
          "    writer.finish().is_ok();",
          "    output.is_empty() == false;"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "",
          "    let bytes_range = ClassBytesRange::new(10, 20);",
          "    let class_bytes = ClassBytes::new(vec![bytes_range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Bytes(class_bytes)),",
          "        props: Default::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"(?-u:[\")?;",
          "    cls.iter().next().is_some();",
          "    self.write_literal_class_byte(range.start())?;",
          "    self.wtr.write_str(\"-\")?;",
          "    self.write_literal_class_byte(range.end()).is_err();",
          "    cls.ranges().is_empty() == false;",
          "    *hir.kind() == HirKind::Class(hir::Class::Bytes(ref cls));",
          "    *hir.kind() == HirKind::Literal(hir::Literal(ref bytes));",
          "    range.start() == range.end() == false;",
          "    range.start() + 1 == range.end() == false;",
          "    self.wtr.write_str(\"[a&&b]\").is_ok();",
          "    writer.finish().is_ok();",
          "    output.is_empty() == false;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "",
          "    let unicode_range = ClassUnicodeRange::new('a', 'c');",
          "    let class_unicode = ClassUnicode::new(vec![unicode_range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(class_unicode)),",
          "        props: Default::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"(?-u:[\")? == Ok",
          "    self.write_literal_class_byte(range.start())? == Ok",
          "    self.wtr.write_str(\"-\")? == Ok",
          "    self.write_literal_class_byte(range.end())? == Err"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "",
          "    let unicode_range = ClassUnicodeRange::new('a', 'c');",
          "    let class_unicode = ClassUnicode::new(vec![unicode_range]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class::Unicode(class_unicode)),",
          "        props: Default::default(),",
          "    };",
          "",
          "    let _ = writer.visit_pre(&hir);",
          "    self.wtr.write_str(\"(?-u:[\")? == Ok",
          "    self.write_literal_class_byte(range.start())? == Ok",
          "    self.wtr.write_str(\"-\")? == Ok",
          "    self.write_literal_class_byte(range.end())? == Err",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]