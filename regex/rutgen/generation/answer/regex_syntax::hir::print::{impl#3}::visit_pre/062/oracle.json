[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = String::new();",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    Writer { wtr: &mut writer }.visit_pre(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(ClassBytes::empty())), props: Properties::default() };",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::empty())), props: Properties::default() };",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'b')])), props: Properties::default() };",
          "    self.wtr.write_str(\"[a-b]\")?;",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0x61, 0x62)])), props: Properties::default() };",
          "    self.wtr.write_str(\"(?-u:[a-b])\")?;"
        ],
        "code": [
          "{",
          "    let mut writer = String::new();",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    Writer { wtr: &mut writer }.visit_pre(&hir).unwrap();",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(ClassBytes::empty())), props: Properties::default() };",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::empty())), props: Properties::default() };",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('a', 'b')])), props: Properties::default() };",
          "    self.wtr.write_str(\"[a-b]\")?;",
          "    let hir = Hir { kind: HirKind::Class(hir::Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0x61, 0x62)])), props: Properties::default() };",
          "    self.wtr.write_str(\"(?-u:[a-b])\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = String::new();",
          "    let unicode_class = ClassUnicode::empty();",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Unicode(unicode_class)),",
          "        props: Properties::default(),",
          "    };",
          "    Writer { wtr: &mut writer }.visit_pre(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"(?:)\")?;"
        ],
        "code": [
          "{",
          "    let mut writer = String::new();",
          "    let unicode_class = ClassUnicode::empty();",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Unicode(unicode_class)),",
          "        props: Properties::default(),",
          "    };",
          "    Writer { wtr: &mut writer }.visit_pre(&hir).unwrap();",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut writer = String::new();",
          "    let bytes_class = ClassBytes::empty();",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Bytes(bytes_class)),",
          "        props: Properties::default(),",
          "    };",
          "    Writer { wtr: &mut writer }.visit_pre(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"(?mR:^)\")?;",
          "    self.wtr.write_str(\"(?mR:$)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\B)\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(r\"\\B\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end})\")?;",
          "    self.wtr.write_str(r\"\\b{start}\")?;",
          "    self.wtr.write_str(r\"\\b{end}\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start-half})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end-half})\")?;",
          "    self.wtr.write_str(r\"\\b{start-half}\")?;",
          "    self.wtr.write_str(r\"\\b{end-half}\")?;"
        ],
        "code": [
          "{",
          "    let mut writer = String::new();",
          "    let bytes_class = ClassBytes::empty();",
          "    let hir = Hir {",
          "        kind: HirKind::Class(Class::Bytes(bytes_class)),",
          "        props: Properties::default(),",
          "    };",
          "    Writer { wtr: &mut writer }.visit_pre(&hir).unwrap();",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"(?:)\")?;",
          "    self.wtr.write_str(\"[a&&b]\")?;",
          "    self.wtr.write_str(r\"\\A\")?;",
          "    self.wtr.write_str(r\"\\z\")?;",
          "    self.wtr.write_str(\"(?m:^)\")?;",
          "    self.wtr.write_str(\"(?m:$)\")?;",
          "    self.wtr.write_str(\"(?mR:^)\")?;",
          "    self.wtr.write_str(\"(?mR:$)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b)\")?;",
          "    self.wtr.write_str(r\"(?-u:\\B)\")?;",
          "    self.wtr.write_str(r\"\\b\")?;",
          "    self.wtr.write_str(r\"\\B\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end})\")?;",
          "    self.wtr.write_str(r\"\\b{start}\")?;",
          "    self.wtr.write_str(r\"\\b{end}\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{start-half})\")?;",
          "    self.wtr.write_str(r\"(?-u:\\b{end-half})\")?;",
          "    self.wtr.write_str(r\"\\b{start-half}\")?;",
          "    self.wtr.write_str(r\"\\b{end-half}\")?;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]