[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Err(fmt::Error)",
          "        }",
          "    }",
          "",
          "    let writer = TestWriter;",
          "    let mut visitor = Writer { wtr: writer };",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordEndHalfUnicode),",
          "        props: Default::default(),",
          "    };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_pre(&hir), Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Err(fmt::Error)",
          "        }",
          "    }",
          "",
          "    let writer = TestWriter;",
          "    let mut visitor = Writer { wtr: writer };",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordEndHalfUnicode),",
          "        props: Default::default(),",
          "    };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    assert_eq!(visitor.visit_pre(&hir), Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = TestWriter;",
          "    let mut visitor = Writer { wtr: writer };",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordEndHalfUnicode),",
          "        props: Default::default(),",
          "    };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "}"
        ],
        "oracle": [
          "    visitor.visit_pre(&hir).expect(\"visit_pre should succeed\")",
          "    assert_eq!(self.wtr.write_str(r\"\\b{end-half}\"), Err(fmt::Error))"
        ],
        "code": [
          "{",
          "    struct TestWriter;",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, _s: &str) -> fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = TestWriter;",
          "    let mut visitor = Writer { wtr: writer };",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Look(hir::Look::WordEndHalfUnicode),",
          "        props: Default::default(),",
          "    };",
          "",
          "    let _ = visitor.visit_pre(&hir);",
          "    visitor.visit_pre(&hir).expect(\"visit_pre should succeed\")",
          "    assert_eq!(self.wtr.write_str(r\"\\b{end-half}\"), Err(fmt::Error))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]