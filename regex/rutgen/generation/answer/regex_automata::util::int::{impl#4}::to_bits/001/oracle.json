[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = -2_147_483_648;",
          "    let result = value.to_bits();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    let value: i32 = 0;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 0);",
          "    let value: i32 = 1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 1);",
          "    let value: i32 = 2;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2);",
          "    let value: i32 = 2_147_483_647;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2_147_483_647);",
          "    let value: i32 = -1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 4294967295);",
          "    let value: i32 = -128;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 4294967168);",
          "    let value: i32 = 127;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 127);"
        ],
        "code": [
          "{",
          "    let value: i32 = -2_147_483_648;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 0);",
          "    let value: i32 = 0;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 0);",
          "    let value: i32 = 1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 1);",
          "    let value: i32 = 2;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2);",
          "    let value: i32 = 2_147_483_647;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2_147_483_647);",
          "    let value: i32 = -1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 4294967295);",
          "    let value: i32 = -128;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 4294967168);",
          "    let value: i32 = 127;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 127);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 2_147_483_647;",
          "    let result = value.to_bits();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2_147_483_647 as u32);"
        ],
        "code": [
          "{",
          "    let value: i32 = 2_147_483_647;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2_147_483_647 as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 0;",
          "    let result = value.to_bits();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<u32>());",
          "    let value: i32 = -1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, u32::MAX);",
          "    let value: i32 = 1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 1);",
          "    let value: i32 = i32::MIN;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, (u32::MAX >> 1) + 1);",
          "    let value: i32 = i32::MAX;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, u32::MAX >> 1);"
        ],
        "code": [
          "{",
          "    let value: i32 = 0;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 0);",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<u32>());",
          "    let value: i32 = -1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, u32::MAX);",
          "    let value: i32 = 1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 1);",
          "    let value: i32 = i32::MIN;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, (u32::MAX >> 1) + 1);",
          "    let value: i32 = i32::MAX;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, u32::MAX >> 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = -1;",
          "    let result = value.to_bits();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, u32::MAX);",
          "    assert_eq!(result, (-1i32).to_bits());",
          "    assert_eq!(result, 4294967295);",
          "    assert_eq!(result, 0xFFFFFFFF);",
          "    assert!(result == u32::from(-1i32));",
          "    assert!(result == (value as u32));"
        ],
        "code": [
          "{",
          "    let value: i32 = -1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, u32::MAX);",
          "    assert_eq!(result, (-1i32).to_bits());",
          "    assert_eq!(result, 4294967295);",
          "    assert_eq!(result, 0xFFFFFFFF);",
          "    assert!(result == u32::from(-1i32));",
          "    assert!(result == (value as u32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = -100;",
          "    let result = value.to_bits();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4294967196);"
        ],
        "code": [
          "{",
          "    let value: i32 = -100;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 4294967196);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 1;",
          "    let result = value.to_bits();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert_eq!(value.to_bits(), 1);",
          "    let value: i32 = 0;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 0);",
          "    let value: i32 = -1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 4294967295);",
          "    let value: i32 = 2147483647;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2147483647);",
          "    let value: i32 = -2147483648;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2147483648);"
        ],
        "code": [
          "{",
          "    let value: i32 = 1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 1);",
          "    assert_eq!(value.to_bits(), 1);",
          "    let value: i32 = 0;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 0);",
          "    let value: i32 = -1;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 4294967295);",
          "    let value: i32 = 2147483647;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2147483647);",
          "    let value: i32 = -2147483648;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 2147483648);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 100;",
          "    let result = value.to_bits();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 100u32);"
        ],
        "code": [
          "{",
          "    let value: i32 = 100;",
          "    let result = value.to_bits();",
          "    assert_eq!(result, 100u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]