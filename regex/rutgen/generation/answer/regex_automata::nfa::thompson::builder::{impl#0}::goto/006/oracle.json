[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let next_state_id = StateID(SmallIndex(1));",
          "    let state = State::Empty { next: next_state_id };",
          "    let result = state.goto();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(next_state_id));"
        ],
        "code": [
          "{",
          "    let next_state_id = StateID(SmallIndex(1));",
          "    let state = State::Empty { next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(next_state_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let next_state_id = StateID(SmallIndex(2));",
          "    let state = State::Union { alternates: vec![next_state_id] };",
          "    let result = state.goto();",
          "}"
        ],
        "oracle": [
          "    let next_state_id = StateID(SmallIndex(4));",
          "    let state = State::Empty { next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(next_state_id));",
          "    ",
          "    let next_state_id = StateID(SmallIndex(1));",
          "    let state = State::Union { alternates: vec![next_state_id] };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(next_state_id));",
          "    ",
          "    let state = State::Union { alternates: vec![StateID(SmallIndex(3)), StateID(SmallIndex(4))] };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "    ",
          "    let state = State::UnionReverse { alternates: vec![StateID(SmallIndex(5))] };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(StateID(SmallIndex(5))));",
          "    ",
          "    let state = State::UnionReverse { alternates: vec![StateID(SmallIndex(10)), StateID(SmallIndex(20))] };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "    ",
          "    let state = State::Fail;",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "    ",
          "    let next_state_id = StateID(SmallIndex(3));",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "    ",
          "    let next_state_id = StateID(SmallIndex(6));",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(2)), group_index: SmallIndex(1), next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let next_state_id = StateID(SmallIndex(2));",
          "    let state = State::Union { alternates: vec![next_state_id] };",
          "    let result = state.goto();",
          "    let next_state_id = StateID(SmallIndex(4));",
          "    let state = State::Empty { next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(next_state_id));",
          "    ",
          "    let next_state_id = StateID(SmallIndex(1));",
          "    let state = State::Union { alternates: vec![next_state_id] };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(next_state_id));",
          "    ",
          "    let state = State::Union { alternates: vec![StateID(SmallIndex(3)), StateID(SmallIndex(4))] };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "    ",
          "    let state = State::UnionReverse { alternates: vec![StateID(SmallIndex(5))] };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(StateID(SmallIndex(5))));",
          "    ",
          "    let state = State::UnionReverse { alternates: vec![StateID(SmallIndex(10)), StateID(SmallIndex(20))] };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "    ",
          "    let state = State::Fail;",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "    ",
          "    let next_state_id = StateID(SmallIndex(3));",
          "    let state = State::CaptureStart { pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "    ",
          "    let next_state_id = StateID(SmallIndex(6));",
          "    let state = State::CaptureEnd { pattern_id: PatternID(SmallIndex(2)), group_index: SmallIndex(1), next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let next_state_id = StateID(SmallIndex(3));",
          "    let state = State::UnionReverse { alternates: vec![next_state_id] };",
          "    let result = state.goto();",
          "}"
        ],
        "oracle": [
          "    let next_state_id = StateID(SmallIndex(3));",
          "    let state = State::Empty { next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(next_state_id));"
        ],
        "code": [
          "{",
          "    let next_state_id = StateID(SmallIndex(3));",
          "    let state = State::UnionReverse { alternates: vec![next_state_id] };",
          "    let result = state.goto();",
          "    let next_state_id = StateID(SmallIndex(3));",
          "    let state = State::Empty { next: next_state_id };",
          "    let result = state.goto();",
          "    assert_eq!(result, Some(next_state_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]