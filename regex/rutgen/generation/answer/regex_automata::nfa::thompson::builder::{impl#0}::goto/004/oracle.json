[
  {
    "uses": [
      "use crate::util::primitives::SmallIndex;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let state_id1 = StateID(SmallIndex(1));",
          "    let state_id2 = StateID(SmallIndex(2));",
          "    let state_id3 = StateID(SmallIndex(3));",
          "",
          "    let alternates = vec![state_id1, state_id2, state_id3];",
          "",
          "    let state = State::Union { alternates };",
          "",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.goto(), None);"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let state_id1 = StateID(SmallIndex(1));",
          "    let state_id2 = StateID(SmallIndex(2));",
          "    let state_id3 = StateID(SmallIndex(3));",
          "",
          "    let alternates = vec![state_id1, state_id2, state_id3];",
          "",
          "    let state = State::Union { alternates };",
          "",
          "    let _ = state.goto();",
          "    assert_eq!(state.goto(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let state_id1 = StateID(SmallIndex(1));",
          "    let state_id2 = StateID(SmallIndex(2));",
          "    let state_id3 = StateID(SmallIndex(3));",
          "",
          "    let alternates = vec![state_id1, state_id2, state_id3];",
          "",
          "    let state = State::UnionReverse { alternates };",
          "",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.goto(), None);"
        ],
        "code": [
          "{",
          "    use crate::util::primitives::SmallIndex;",
          "",
          "    let state_id1 = StateID(SmallIndex(1));",
          "    let state_id2 = StateID(SmallIndex(2));",
          "    let state_id3 = StateID(SmallIndex(3));",
          "",
          "    let alternates = vec![state_id1, state_id2, state_id3];",
          "",
          "    let state = State::UnionReverse { alternates };",
          "",
          "    let _ = state.goto();",
          "    assert_eq!(state.goto(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]