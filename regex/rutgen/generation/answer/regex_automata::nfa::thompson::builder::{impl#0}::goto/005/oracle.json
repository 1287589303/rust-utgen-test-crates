[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Union { alternates: Vec::new() };",
          "    let _result = state.goto();",
          "}"
        ],
        "oracle": [
          "    let state = State::Union { alternates: vec![StateID(SmallIndex(0))] };",
          "    let _result = state.goto();",
          "    assert_eq!(_result, Some(StateID(SmallIndex(0))));"
        ],
        "code": [
          "{",
          "    let state = State::Union { alternates: Vec::new() };",
          "    let _result = state.goto();",
          "    let state = State::Union { alternates: vec![StateID(SmallIndex(0))] };",
          "    let _result = state.goto();",
          "    assert_eq!(_result, Some(StateID(SmallIndex(0))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Union { alternates: vec![StateID(SmallIndex(1)), StateID(SmallIndex(2))] };",
          "    let _result = state.goto();",
          "}"
        ],
        "oracle": [
          "    let state = State::Union { alternates: vec![StateID(SmallIndex(1)), StateID(SmallIndex(2))] };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let state = State::Union { alternates: vec![StateID(SmallIndex(1)), StateID(SmallIndex(2))] };",
          "    let _result = state.goto();",
          "    let state = State::Union { alternates: vec![StateID(SmallIndex(1)), StateID(SmallIndex(2))] };",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]