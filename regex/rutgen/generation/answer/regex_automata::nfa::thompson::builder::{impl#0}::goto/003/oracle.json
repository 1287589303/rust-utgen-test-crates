[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "    ",
          "    let state = State::UnionReverse {",
          "        alternates: vec![state_id_1, state_id_2, state_id_3],",
          "    };",
          "",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.goto(), None);"
        ],
        "code": [
          "{",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "    ",
          "    let state = State::UnionReverse {",
          "        alternates: vec![state_id_1, state_id_2, state_id_3],",
          "    };",
          "",
          "    let _ = state.goto();",
          "    assert_eq!(state.goto(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::UnionReverse {",
          "        alternates: vec![],",
          "    };",
          "",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    let state = State::UnionReverse { alternates: vec![] };",
          "    assert_eq!(state.goto(), None);"
        ],
        "code": [
          "{",
          "    let state = State::UnionReverse {",
          "        alternates: vec![],",
          "    };",
          "",
          "    let _ = state.goto();",
          "    let state = State::UnionReverse { alternates: vec![] };",
          "    assert_eq!(state.goto(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]