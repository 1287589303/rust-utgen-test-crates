[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    let state = State::Fail;",
          "    let result = state.goto();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.goto();",
          "    let state = State::Fail;",
          "    let result = state.goto();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::CaptureStart {",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "        group_index: SmallIndex(1),",
          "        next: StateID(SmallIndex(2)),",
          "    };",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.goto(), None);"
        ],
        "code": [
          "{",
          "    let state = State::CaptureStart {",
          "        pattern_id: PatternID(SmallIndex(0)),",
          "        group_index: SmallIndex(1),",
          "        next: StateID(SmallIndex(2)),",
          "    };",
          "    let _ = state.goto();",
          "    assert_eq!(state.goto(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::CaptureEnd {",
          "        pattern_id: PatternID(SmallIndex(1)),",
          "        group_index: SmallIndex(0),",
          "        next: StateID(SmallIndex(3)),",
          "    };",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.goto(), None);"
        ],
        "code": [
          "{",
          "    let state = State::CaptureEnd {",
          "        pattern_id: PatternID(SmallIndex(1)),",
          "        group_index: SmallIndex(0),",
          "        next: StateID(SmallIndex(3)),",
          "    };",
          "    let _ = state.goto();",
          "    assert_eq!(state.goto(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(4)) },",
          "    };",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(4)) } };",
          "    assert_eq!(state.goto(), None);"
        ],
        "code": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(4)) },",
          "    };",
          "    let _ = state.goto();",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(4)) } };",
          "    assert_eq!(state.goto(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Sparse {",
          "        transitions: vec![",
          "            Transition { start: 1, end: 2, next: StateID(SmallIndex(5)) },",
          "            Transition { start: 3, end: 4, next: StateID(SmallIndex(6)) },",
          "        ],",
          "    };",
          "    let _ = state.goto();",
          "}"
        ],
        "oracle": [
          "    let state = State::Sparse { transitions: vec![Transition { start: 1, end: 2, next: StateID(SmallIndex(5)) }, Transition { start: 3, end: 4, next: StateID(SmallIndex(6)) }] };",
          "    assert_eq!(state.goto(), None);"
        ],
        "code": [
          "{",
          "    let state = State::Sparse {",
          "        transitions: vec![",
          "            Transition { start: 1, end: 2, next: StateID(SmallIndex(5)) },",
          "            Transition { start: 3, end: 4, next: StateID(SmallIndex(6)) },",
          "        ],",
          "    };",
          "    let _ = state.goto();",
          "    let state = State::Sparse { transitions: vec![Transition { start: 1, end: 2, next: StateID(SmallIndex(5)) }, Transition { start: 3, end: 4, next: StateID(SmallIndex(6)) }] };",
          "    assert_eq!(state.goto(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]