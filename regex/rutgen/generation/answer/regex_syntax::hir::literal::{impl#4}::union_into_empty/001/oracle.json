[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"a\", \"\", \"b\"]);",
          "    let mut seq2 = Seq::new(&[\"foo\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[\"a\", \"foo\", \"b\"]), seq1);",
          "    assert_eq!(seq1.literals().is_some(), true);",
          "    assert_eq!(seq1.literals().unwrap().len(), 3);",
          "    assert_eq!(seq2.literals().is_some(), false);",
          "    assert_eq!(seq1.len(), Some(3));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"a\", \"\", \"b\"]);",
          "    let mut seq2 = Seq::new(&[\"foo\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[\"a\", \"foo\", \"b\"]), seq1);",
          "    assert_eq!(seq1.literals().is_some(), true);",
          "    assert_eq!(seq1.literals().unwrap().len(), 3);",
          "    assert_eq!(seq2.literals().is_some(), false);",
          "    assert_eq!(seq1.len(), Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"\", \"c\"]);",
          "    let mut seq2 = Seq::new(&[\"bar\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(&[Literal::new(b\"bar\"), Literal::new(b\"c\")]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq1.is_empty() == false);",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.is_exact() == false);",
          "    assert!(seq1.is_inexact());",
          "    assert!(seq2.is_empty());",
          "    assert!(seq1.len() == Some(2));",
          "    assert!(seq2.literals().is_none());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"\", \"c\"]);",
          "    let mut seq2 = Seq::new(&[\"bar\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[Literal::new(b\"bar\"), Literal::new(b\"c\")]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(2));",
          "    assert!(seq1.is_empty() == false);",
          "    assert!(seq1.is_finite());",
          "    assert!(seq1.is_exact() == false);",
          "    assert!(seq1.is_inexact());",
          "    assert!(seq2.is_empty());",
          "    assert!(seq1.len() == Some(2));",
          "    assert!(seq2.literals().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"d\", \"e\"]);",
          "    let mut seq2 = Seq::new(&[\"baz\", \"qux\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[\"\", \"baz\", \"d\", \"e\"]), seq1);",
          "    assert_eq!(seq1.is_empty(), false);",
          "    assert_eq!(seq1.len(), Some(4));",
          "    assert_eq!(seq1.literals().unwrap().len(), 4);",
          "    assert!(seq1.literals().unwrap().contains(&Literal::new(b\"baz\")));",
          "    assert!(seq1.literals().unwrap().contains(&Literal::new(b\"d\")));",
          "    assert!(seq1.literals().unwrap().contains(&Literal::new(b\"e\")));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"d\", \"e\"]);",
          "    let mut seq2 = Seq::new(&[\"baz\", \"qux\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[\"\", \"baz\", \"d\", \"e\"]), seq1);",
          "    assert_eq!(seq1.is_empty(), false);",
          "    assert_eq!(seq1.len(), Some(4));",
          "    assert_eq!(seq1.literals().unwrap().len(), 4);",
          "    assert!(seq1.literals().unwrap().contains(&Literal::new(b\"baz\")));",
          "    assert!(seq1.literals().unwrap().contains(&Literal::new(b\"d\")));",
          "    assert!(seq1.literals().unwrap().contains(&Literal::new(b\"e\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"x\", \"\", \"y\"]);",
          "    let mut seq2 = Seq::new(&[\"alpha\", \"beta\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(vec![Literal::new(\"x\"), Literal::new(\"alpha\"), Literal::new(\"y\")].as_slice()));",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"x\", \"\", \"y\"]);",
          "    let mut seq2 = Seq::new(&[\"alpha\", \"beta\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(vec![Literal::new(\"x\"), Literal::new(\"alpha\"), Literal::new(\"y\")].as_slice()));",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"m\", \"n\"]);",
          "    let mut seq2 = Seq::new(&[\"gamma\", \"delta\", \"epsilon\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[\"m\", \"n\", \"gamma\", \"delta\", \"epsilon\"]), seq1);",
          "    assert_eq!(None, seq1.literals);",
          "    assert_eq!(Some(0), seq2.len());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"m\", \"n\"]);",
          "    let mut seq2 = Seq::new(&[\"gamma\", \"delta\", \"epsilon\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[\"m\", \"n\", \"gamma\", \"delta\", \"epsilon\"]), seq1);",
          "    assert_eq!(None, seq1.literals);",
          "    assert_eq!(Some(0), seq2.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]