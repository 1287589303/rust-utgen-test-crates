[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"a\", \"\", \"f\"]);",
          "    let mut seq2 = Seq::new(&[]);",
          "",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1, Seq::new(&[\"a\", \"f\"]));",
          "    assert_eq!(Some(0), seq2.len());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"a\", \"\", \"f\"]);",
          "    let mut seq2 = Seq::new(&[]);",
          "",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1, Seq::new(&[\"a\", \"f\"]));",
          "    assert_eq!(Some(0), seq2.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"b\", \"c\"]);",
          "    let mut seq2 = Seq::new(&[]);",
          "",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals().unwrap().len(), 2);",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"b\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"c\");",
          "    assert_eq!(seq2.literals(), None);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"b\", \"c\"]);",
          "    let mut seq2 = Seq::new(&[]);",
          "",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.literals().unwrap().len(), 2);",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"b\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"c\");",
          "    assert_eq!(seq2.literals(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"x\", \"\", \"y\"]);",
          "    let mut seq2 = Seq::new(&[\"z\", \"w\"]);",
          "",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals().is_some(), true);",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"x\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"y\");",
          "    assert_eq!(seq1.literals().unwrap()[2].as_bytes(), b\"z\");",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"x\", \"\", \"y\"]);",
          "    let mut seq2 = Seq::new(&[\"z\", \"w\"]);",
          "",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.literals().is_some(), true);",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert_eq!(seq1.literals().unwrap()[0].as_bytes(), b\"x\");",
          "    assert_eq!(seq1.literals().unwrap()[1].as_bytes(), b\"y\");",
          "    assert_eq!(seq1.literals().unwrap()[2].as_bytes(), b\"z\");",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]