[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"foo\", \"bar\", \"\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::empty(), seq1);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"foo\", \"bar\", \"\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::empty(), seq1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"baz\", \"qux\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.is_empty(), true);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), None);",
          "    assert_eq!(seq2.literals(), None);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"baz\", \"qux\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.is_empty(), true);",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.literals(), None);",
          "    assert_eq!(seq2.literals(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"a\", \"b\"]);",
          "    let mut seq2 = Seq::new(&[\"c\", \"d\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), Some(&[\"\", \"a\", \"b\"]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert_eq!(seq1.literals(), Some(&[\"\", \"c\", \"a\", \"b\"]));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::new(&[\"\", \"a\", \"b\"]);",
          "    let mut seq2 = Seq::new(&[\"c\", \"d\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.literals(), Some(&[\"\", \"a\", \"b\"]));",
          "    assert_eq!(seq2.len(), Some(0));",
          "    assert_eq!(seq1.len(), Some(3));",
          "    assert_eq!(seq1.literals(), Some(&[\"\", \"c\", \"a\", \"b\"]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"foo\", \"foo\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), None);",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"foo\", \"foo\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.literals(), None);",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"\", \"bar\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, seq1.literals());",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[\"\", \"\", \"bar\"]), seq2);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"\", \"bar\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(None, seq1.literals());",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::new(&[\"\", \"\", \"bar\"]), seq2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, seq1.literals());",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::empty(), seq1);",
          "    assert_eq!(Seq::new(&[\"\"]), seq2);"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(None, seq1.literals());",
          "    assert_eq!(Some(0), seq2.len());",
          "    assert_eq!(Seq::empty(), seq1);",
          "    assert_eq!(Seq::new(&[\"\"]), seq2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"foo\", \"\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), None);",
          "    assert_eq!(seq2.len(), Some(0));"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"foo\", \"\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.literals(), None);",
          "    assert_eq!(seq2.len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"\", \"\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq1.literals(), None);",
          "    assert_eq!(Some(0), seq2.len());"
        ],
        "code": [
          "{",
          "    let mut seq1 = Seq::empty();",
          "    let mut seq2 = Seq::new(&[\"\", \"\", \"\"]);",
          "    seq1.union_into_empty(&mut seq2);",
          "    assert_eq!(seq1.literals(), None);",
          "    assert_eq!(Some(0), seq2.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]