[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(0, 255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.start(), 0);",
          "    assert_eq!(range.end(), 255);",
          "    assert_eq!(range.len(), 256);",
          "    assert!(range.is_contiguous(&ClassBytesRange::new(0, 255));",
          "    assert!(range.is_subset(&ClassBytesRange::new(0, 255));",
          "    assert!(!range.is_intersection_empty(&ClassBytesRange::new(256, 255));",
          "    assert_eq!(range.difference(&ClassBytesRange::new(128, 200)), (Some(ClassBytesRange::new(0, 127)), Some(ClassBytesRange::new(201, 255))));",
          "    assert_eq!(range.union(&ClassBytesRange::new(128, 200)), Some(ClassBytesRange::new(0, 255)));",
          "    assert_eq!(range.intersect(&ClassBytesRange::new(128, 200)), Some(ClassBytesRange::new(128, 200)));"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(0, 255);",
          "    assert_eq!(range.start(), 0);",
          "    assert_eq!(range.end(), 255);",
          "    assert_eq!(range.len(), 256);",
          "    assert!(range.is_contiguous(&ClassBytesRange::new(0, 255));",
          "    assert!(range.is_subset(&ClassBytesRange::new(0, 255));",
          "    assert!(!range.is_intersection_empty(&ClassBytesRange::new(256, 255));",
          "    assert_eq!(range.difference(&ClassBytesRange::new(128, 200)), (Some(ClassBytesRange::new(0, 127)), Some(ClassBytesRange::new(201, 255))));",
          "    assert_eq!(range.union(&ClassBytesRange::new(128, 200)), Some(ClassBytesRange::new(0, 255)));",
          "    assert_eq!(range.intersect(&ClassBytesRange::new(128, 200)), Some(ClassBytesRange::new(128, 200)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(100, 100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.start(), 100);",
          "    assert_eq!(range.end(), 100);",
          "    assert_eq!(range.len(), 1);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(100, 100);",
          "    assert_eq!(range.start(), 100);",
          "    assert_eq!(range.end(), 100);",
          "    assert_eq!(range.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.start(), 0);",
          "    assert_eq!(range.end(), 0);",
          "    assert_eq!(range.len(), 1);",
          "    ",
          "    let range2 = ClassBytesRange::new(5, 10);",
          "    assert_eq!(range2.start(), 5);",
          "    assert_eq!(range2.end(), 10);",
          "    assert_eq!(range2.len(), 6);",
          "    ",
          "    let range3 = ClassBytesRange::new(10, 5);",
          "    assert_eq!(range3.start(), 5);",
          "    assert_eq!(range3.end(), 10);",
          "    assert_eq!(range3.len(), 6);",
          "    ",
          "    let range4 = ClassBytesRange::new(u8::MAX, u8::MAX);",
          "    assert_eq!(range4.start(), u8::MAX);",
          "    assert_eq!(range4.end(), u8::MAX);",
          "    assert_eq!(range4.len(), 1);"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(0, 0);",
          "    assert_eq!(range.start(), 0);",
          "    assert_eq!(range.end(), 0);",
          "    assert_eq!(range.len(), 1);",
          "    ",
          "    let range2 = ClassBytesRange::new(5, 10);",
          "    assert_eq!(range2.start(), 5);",
          "    assert_eq!(range2.end(), 10);",
          "    assert_eq!(range2.len(), 6);",
          "    ",
          "    let range3 = ClassBytesRange::new(10, 5);",
          "    assert_eq!(range3.start(), 5);",
          "    assert_eq!(range3.end(), 10);",
          "    assert_eq!(range3.len(), 6);",
          "    ",
          "    let range4 = ClassBytesRange::new(u8::MAX, u8::MAX);",
          "    assert_eq!(range4.start(), u8::MAX);",
          "    assert_eq!(range4.end(), u8::MAX);",
          "    assert_eq!(range4.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(256, 255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ClassBytesRange::new(0, 0).start(), 0);",
          "    assert_eq!(ClassBytesRange::new(0, 255).end(), 255);",
          "    assert_eq!(ClassBytesRange::new(1, 2).len(), 2);",
          "    assert!(std::panic::catch_unwind(|| ClassBytesRange::new(256, 255)).is_err());"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(256, 255);",
          "    assert_eq!(ClassBytesRange::new(0, 0).start(), 0);",
          "    assert_eq!(ClassBytesRange::new(0, 255).end(), 255);",
          "    assert_eq!(ClassBytesRange::new(1, 2).len(), 2);",
          "    assert!(std::panic::catch_unwind(|| ClassBytesRange::new(256, 255)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(255, 0);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| ClassBytesRange::new(255, 0)).is_err());"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(255, 0);",
          "    assert!(std::panic::catch_unwind(|| ClassBytesRange::new(255, 0)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let range = ClassBytesRange::new(100, 256);",
          "}"
        ],
        "oracle": [
          "    assert!(ClassBytesRange::new(100, 256).start() == 100);",
          "    assert!(ClassBytesRange::new(100, 256).end() == 256);",
          "    assert!(ClassBytesRange::new(100, 256).len() == (256 - 100) as usize);",
          "    assert!(std::panic::catch_unwind(|| ClassBytesRange::new(256, 100)).is_err());"
        ],
        "code": [
          "{",
          "    let range = ClassBytesRange::new(100, 256);",
          "    assert!(ClassBytesRange::new(100, 256).start() == 100);",
          "    assert!(ClassBytesRange::new(100, 256).end() == 256);",
          "    assert!(ClassBytesRange::new(100, 256).len() == (256 - 100) as usize);",
          "    assert!(std::panic::catch_unwind(|| ClassBytesRange::new(256, 100)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]