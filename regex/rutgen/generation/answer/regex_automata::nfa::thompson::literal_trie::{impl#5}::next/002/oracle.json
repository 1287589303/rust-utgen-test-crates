[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 0, end: 5, next: StateID(1) },",
          "        Transition { start: 5, end: 10, next: StateID(2) },",
          "    ];",
          "",
          "    let chunks: Vec<(usize, usize)> = vec![(0, 2)];",
          "    let mut iter = StateChunksIter {",
          "        transitions: &transitions,",
          "        chunks: chunks.iter(),",
          "        active: Some(&transitions[1..2]),",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&[Transition { start: 5, end: 10, next: StateID(2) }]));"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 0, end: 5, next: StateID(1) },",
          "        Transition { start: 5, end: 10, next: StateID(2) },",
          "    ];",
          "",
          "    let chunks: Vec<(usize, usize)> = vec![(0, 2)];",
          "    let mut iter = StateChunksIter {",
          "        transitions: &transitions,",
          "        chunks: chunks.iter(),",
          "        active: Some(&transitions[1..2]),",
          "    };",
          "",
          "    let result = iter.next();",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&[Transition { start: 5, end: 10, next: StateID(2) }]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 1, end: 3, next: StateID(1) },",
          "        Transition { start: 3, end: 5, next: StateID(2) },",
          "    ];",
          "",
          "    let chunks: Vec<(usize, usize)> = vec![(0, 1)];",
          "    let mut iter = StateChunksIter {",
          "        transitions: &transitions,",
          "        chunks: chunks.iter(),",
          "        active: Some(&transitions[0..1]),",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&transitions[0..1]));"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 1, end: 3, next: StateID(1) },",
          "        Transition { start: 3, end: 5, next: StateID(2) },",
          "    ];",
          "",
          "    let chunks: Vec<(usize, usize)> = vec![(0, 1)];",
          "    let mut iter = StateChunksIter {",
          "        transitions: &transitions,",
          "        chunks: chunks.iter(),",
          "        active: Some(&transitions[0..1]),",
          "    };",
          "",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(&transitions[0..1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 0, end: 1, next: StateID(1) },",
          "    ];",
          "",
          "    let chunks: Vec<(usize, usize)> = vec![(0, 1)];",
          "    let mut iter = StateChunksIter {",
          "        transitions: &transitions,",
          "        chunks: chunks.iter(),",
          "        active: Some(&transitions[0..1]),",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&transitions[0..1]));"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 0, end: 1, next: StateID(1) },",
          "    ];",
          "",
          "    let chunks: Vec<(usize, usize)> = vec![(0, 1)];",
          "    let mut iter = StateChunksIter {",
          "        transitions: &transitions,",
          "        chunks: chunks.iter(),",
          "        active: Some(&transitions[0..1]),",
          "    };",
          "",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(&transitions[0..1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 8, end: 10, next: StateID(3) },",
          "    ];",
          "",
          "    let chunks: Vec<(usize, usize)> = vec![(0, 0)];",
          "    let mut iter = StateChunksIter {",
          "        transitions: &transitions,",
          "        chunks: chunks.iter(),",
          "        active: Some(&transitions[0..1]),",
          "    };",
          "",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&transitions[0..1]));"
        ],
        "code": [
          "{",
          "    let transitions = vec![",
          "        Transition { start: 8, end: 10, next: StateID(3) },",
          "    ];",
          "",
          "    let chunks: Vec<(usize, usize)> = vec![(0, 0)];",
          "    let mut iter = StateChunksIter {",
          "        transitions: &transitions,",
          "        chunks: chunks.iter(),",
          "        active: Some(&transitions[0..1]),",
          "    };",
          "",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(&transitions[0..1]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]