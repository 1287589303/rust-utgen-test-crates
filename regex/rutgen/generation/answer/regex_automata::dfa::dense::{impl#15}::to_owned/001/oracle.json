[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[u32] = &[1, 2, 3, 4, 5]; // length 5",
          "    let classes = ByteClasses([0; 256]); // valid initialization",
          "    let stride2: usize = 3; // within range [1, 9]",
          "",
          "    let transition_table = TransitionTable {",
          "        table: table,",
          "        classes: classes,",
          "        stride2: stride2,",
          "    };",
          "",
          "    let owned_transition_table = transition_table.to_owned();",
          "}"
        ],
        "oracle": [
          "    let table: &[u32] = &[1, 2, 3, 4, 5];",
          "    let classes = ByteClasses([0; 256]);",
          "    let stride2: usize = 3;",
          "    let transition_table = TransitionTable { table: table, classes: classes, stride2: stride2 };",
          "    let owned_transition_table = transition_table.to_owned();",
          "    assert_eq!(owned_transition_table.table, table.to_vec());",
          "    assert_eq!(owned_transition_table.classes, classes);",
          "    assert_eq!(owned_transition_table.stride2, stride2);"
        ],
        "code": [
          "{",
          "    let table: &[u32] = &[1, 2, 3, 4, 5]; // length 5",
          "    let classes = ByteClasses([0; 256]); // valid initialization",
          "    let stride2: usize = 3; // within range [1, 9]",
          "",
          "    let transition_table = TransitionTable {",
          "        table: table,",
          "        classes: classes,",
          "        stride2: stride2,",
          "    };",
          "",
          "    let owned_transition_table = transition_table.to_owned();",
          "    let table: &[u32] = &[1, 2, 3, 4, 5];",
          "    let classes = ByteClasses([0; 256]);",
          "    let stride2: usize = 3;",
          "    let transition_table = TransitionTable { table: table, classes: classes, stride2: stride2 };",
          "    let owned_transition_table = transition_table.to_owned();",
          "    assert_eq!(owned_transition_table.table, table.to_vec());",
          "    assert_eq!(owned_transition_table.classes, classes);",
          "    assert_eq!(owned_transition_table.stride2, stride2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[u32] = &[1]; // length 1",
          "    let classes = ByteClasses([0; 256]); // valid initialization",
          "    let stride2: usize = 1; // minimum value",
          "",
          "    let transition_table = TransitionTable {",
          "        table: table,",
          "        classes: classes,",
          "        stride2: stride2,",
          "    };",
          "",
          "    let owned_transition_table = transition_table.to_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(owned_transition_table.table, transition_table.table.as_ref().to_vec());",
          "    assert_eq!(owned_transition_table.classes, transition_table.classes.clone());",
          "    assert_eq!(owned_transition_table.stride2, transition_table.stride2);",
          "    assert_eq!(owned_transition_table.len(), transition_table.len());",
          "    assert_eq!(owned_transition_table.alphabet_len(), transition_table.alphabet_len());",
          "    assert!(owned_transition_table.is_valid(StateID(0)));"
        ],
        "code": [
          "{",
          "    let table: &[u32] = &[1]; // length 1",
          "    let classes = ByteClasses([0; 256]); // valid initialization",
          "    let stride2: usize = 1; // minimum value",
          "",
          "    let transition_table = TransitionTable {",
          "        table: table,",
          "        classes: classes,",
          "        stride2: stride2,",
          "    };",
          "",
          "    let owned_transition_table = transition_table.to_owned();",
          "    assert_eq!(owned_transition_table.table, transition_table.table.as_ref().to_vec());",
          "    assert_eq!(owned_transition_table.classes, transition_table.classes.clone());",
          "    assert_eq!(owned_transition_table.stride2, transition_table.stride2);",
          "    assert_eq!(owned_transition_table.len(), transition_table.len());",
          "    assert_eq!(owned_transition_table.alphabet_len(), transition_table.alphabet_len());",
          "    assert!(owned_transition_table.is_valid(StateID(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[u32] = &[0; 257]; // length 257",
          "    let classes = ByteClasses([0; 256]); // valid initialization",
          "    let stride2: usize = 9; // maximum value",
          "",
          "    let transition_table = TransitionTable {",
          "        table: table,",
          "        classes: classes,",
          "        stride2: stride2,",
          "    };",
          "",
          "    let owned_transition_table = transition_table.to_owned();",
          "}"
        ],
        "oracle": [
          "    let expected_table: Vec<u32> = vec![0; 257];",
          "    let expected_classes = ByteClasses([0; 256]);",
          "    let expected_stride2: usize = 9;",
          "    ",
          "    assert_eq!(owned_transition_table.table, expected_table);",
          "    assert_eq!(owned_transition_table.classes, expected_classes);",
          "    assert_eq!(owned_transition_table.stride2, expected_stride2);"
        ],
        "code": [
          "{",
          "    let table: &[u32] = &[0; 257]; // length 257",
          "    let classes = ByteClasses([0; 256]); // valid initialization",
          "    let stride2: usize = 9; // maximum value",
          "",
          "    let transition_table = TransitionTable {",
          "        table: table,",
          "        classes: classes,",
          "        stride2: stride2,",
          "    };",
          "",
          "    let owned_transition_table = transition_table.to_owned();",
          "    let expected_table: Vec<u32> = vec![0; 257];",
          "    let expected_classes = ByteClasses([0; 256]);",
          "    let expected_stride2: usize = 9;",
          "    ",
          "    assert_eq!(owned_transition_table.table, expected_table);",
          "    assert_eq!(owned_transition_table.classes, expected_classes);",
          "    assert_eq!(owned_transition_table.stride2, expected_stride2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: &[u32] = &[1, 2, 3]; // length 3",
          "    let classes = ByteClasses([0; 256]); // valid initialization",
          "    let stride2: usize = 5; // within range [1, 9]",
          "",
          "    let transition_table = TransitionTable {",
          "        table: table,",
          "        classes: classes,",
          "        stride2: stride2,",
          "    };",
          "",
          "    let owned_transition_table = transition_table.to_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(owned_transition_table.table, vec![1, 2, 3]);",
          "    assert_eq!(owned_transition_table.classes, classes);",
          "    assert_eq!(owned_transition_table.stride2, stride2);"
        ],
        "code": [
          "{",
          "    let table: &[u32] = &[1, 2, 3]; // length 3",
          "    let classes = ByteClasses([0; 256]); // valid initialization",
          "    let stride2: usize = 5; // within range [1, 9]",
          "",
          "    let transition_table = TransitionTable {",
          "        table: table,",
          "        classes: classes,",
          "        stride2: stride2,",
          "    };",
          "",
          "    let owned_transition_table = transition_table.to_owned();",
          "    assert_eq!(owned_transition_table.table, vec![1, 2, 3]);",
          "    assert_eq!(owned_transition_table.classes, classes);",
          "    assert_eq!(owned_transition_table.stride2, stride2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]