[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.static_explicit_captures_len(), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "    assert_eq!(hir.static_explicit_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "    ",
          "    let hir_with_captures = Hir {",
          "    kind: HirKind::Capture(Capture::new(/* parameters */)),",
          "    is_start_anchored: true,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(1),",
          "    };",
          "    assert_eq!(hir_with_captures.static_explicit_captures_len(), Some(1));",
          "    ",
          "    let hir_without_captures = Hir {",
          "    kind: HirKind::Char('a'),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    };",
          "    assert_eq!(hir_without_captures.static_explicit_captures_len(), None);",
          "    ",
          "    let hir_multiple_captures = Hir {",
          "    kind: HirKind::Alternation(vec![Hir::capture(Capture::new(/* parameters */)), Hir::capture(Capture::new(/* parameters */))]),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(2),",
          "    };",
          "    assert_eq!(hir_multiple_captures.static_explicit_captures_len(), Some(2));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(0),",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(0));",
          "    ",
          "    let hir_with_captures = Hir {",
          "    kind: HirKind::Capture(Capture::new(/* parameters */)),",
          "    is_start_anchored: true,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(1),",
          "    };",
          "    assert_eq!(hir_with_captures.static_explicit_captures_len(), Some(1));",
          "    ",
          "    let hir_without_captures = Hir {",
          "    kind: HirKind::Char('a'),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    };",
          "    assert_eq!(hir_without_captures.static_explicit_captures_len(), None);",
          "    ",
          "    let hir_multiple_captures = Hir {",
          "    kind: HirKind::Alternation(vec![Hir::capture(Capture::new(/* parameters */)), Hir::capture(Capture::new(/* parameters */))]),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(2),",
          "    };",
          "    assert_eq!(hir_multiple_captures.static_explicit_captures_len(), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.static_explicit_captures_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir::char('a'),",
          "            Hir::char('b'),",
          "            Hir::char('c'),",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(3),",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.static_explicit_captures_len(), Some(3));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir::char('a'),",
          "            Hir::char('b'),",
          "            Hir::char('c'),",
          "        ]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(3),",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {}),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(1000),",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.static_explicit_captures_len(), Some(1000));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture {}),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: Some(1000),",
          "    };",
          "    let _ = hir.static_explicit_captures_len();",
          "    assert_eq!(hir.static_explicit_captures_len(), Some(1000));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]