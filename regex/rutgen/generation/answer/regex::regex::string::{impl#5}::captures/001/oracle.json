[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(\\w+)\").unwrap();",
          "    let hay = \"hello\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(caps.is_some(), true);",
          "    assert_eq!(caps.unwrap().get(0).unwrap().as_str(), \"hello\");",
          "    assert_eq!(caps.unwrap().get(1).unwrap().as_str(), \"hello\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(\\w+)\").unwrap();",
          "    let hay = \"hello\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(caps.is_some(), true);",
          "    assert_eq!(caps.unwrap().get(0).unwrap().as_str(), \"hello\");",
          "    assert_eq!(caps.unwrap().get(1).unwrap().as_str(), \"hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?<name>\\w+) is (?<age>\\d+) years old\").unwrap();",
          "    let hay = \"Alice is 30 years old\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"(?<name>\\w+) is (?<age>\\d+) years old\").unwrap();",
          "    let hay = \"Alice is 30 years old\";",
          "    let caps = re.captures(hay).unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"Alice is 30 years old\");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \"Alice\");",
          "    assert_eq!(caps.get(2).unwrap().as_str(), \"30\");",
          "    assert_eq!(&caps[0], \"Alice is 30 years old\");",
          "    assert_eq!(&caps[1], \"Alice\");",
          "    assert_eq!(&caps[2], \"30\");",
          "    assert_eq!(caps.name(\"name\").unwrap().as_str(), \"Alice\");",
          "    assert_eq!(caps.name(\"age\").unwrap().as_str(), \"30\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?<name>\\w+) is (?<age>\\d+) years old\").unwrap();",
          "    let hay = \"Alice is 30 years old\";",
          "    let _caps = re.captures(hay);",
          "    let re = Regex::new(r\"(?<name>\\w+) is (?<age>\\d+) years old\").unwrap();",
          "    let hay = \"Alice is 30 years old\";",
          "    let caps = re.captures(hay).unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"Alice is 30 years old\");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \"Alice\");",
          "    assert_eq!(caps.get(2).unwrap().as_str(), \"30\");",
          "    assert_eq!(&caps[0], \"Alice is 30 years old\");",
          "    assert_eq!(&caps[1], \"Alice\");",
          "    assert_eq!(&caps[2], \"30\");",
          "    assert_eq!(caps.name(\"name\").unwrap().as_str(), \"Alice\");",
          "    assert_eq!(caps.name(\"age\").unwrap().as_str(), \"30\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(Hello, (\\w+))\").unwrap();",
          "    let hay = \"Hello, world!\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_caps.is_some(), true);",
          "    let caps = _caps.unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"Hello, world!\");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \"world\");",
          "    assert_eq!(&caps[0], \"Hello, world!\");",
          "    assert_eq!(&caps[1], \"world\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(Hello, (\\w+))\").unwrap();",
          "    let hay = \"Hello, world!\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(_caps.is_some(), true);",
          "    let caps = _caps.unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"Hello, world!\");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \"world\");",
          "    assert_eq!(&caps[0], \"Hello, world!\");",
          "    assert_eq!(&caps[1], \"world\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let hay = \"\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures(hay), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let hay = \"\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(re.captures(hay), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"a\").unwrap();",
          "    let hay = \"a\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_caps.is_some(), true);",
          "    assert_eq!(_caps.unwrap().get(0).unwrap().as_str(), \"a\");",
          "    assert_eq!(_caps.unwrap().caps.len(), 1);",
          "    ",
          "    let re_non_matching = Regex::new(r\"b\").unwrap();",
          "    let hay_non_matching = \"a\";",
          "    let _caps_non_matching = re_non_matching.captures(hay_non_matching);",
          "    assert_eq!(_caps_non_matching.is_none(), true);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"a\").unwrap();",
          "    let hay = \"a\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(_caps.is_some(), true);",
          "    assert_eq!(_caps.unwrap().get(0).unwrap().as_str(), \"a\");",
          "    assert_eq!(_caps.unwrap().caps.len(), 1);",
          "    ",
          "    let re_non_matching = Regex::new(r\"b\").unwrap();",
          "    let hay_non_matching = \"a\";",
          "    let _caps_non_matching = re_non_matching.captures(hay_non_matching);",
          "    assert_eq!(_caps_non_matching.is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"exact\").unwrap();",
          "    let hay = \"exact\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_caps.is_some(), true);",
          "    assert_eq!(_caps.unwrap().get(0).unwrap().as_str(), \"exact\");",
          "    assert_eq!(_caps.unwrap().static_captures_len, None);",
          "    assert_eq!(_caps.unwrap().caps.len(), 1);",
          "    assert_eq!(_caps.unwrap().caps.get(1), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"exact\").unwrap();",
          "    let hay = \"exact\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(_caps.is_some(), true);",
          "    assert_eq!(_caps.unwrap().get(0).unwrap().as_str(), \"exact\");",
          "    assert_eq!(_caps.unwrap().static_captures_len, None);",
          "    assert_eq!(_caps.unwrap().caps.len(), 1);",
          "    assert_eq!(_caps.unwrap().caps.get(1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"no digits here\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures(hay), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\d+\").unwrap();",
          "    let hay = \"no digits here\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(re.captures(hay), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"[\\w\\s]+\").unwrap();",
          "    let hay = \"Hello, World!\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_caps.is_some(), true);",
          "    assert_eq!(_caps.unwrap().get(0).unwrap().as_str(), \"Hello, World!\");",
          "    assert_eq!(_caps.unwrap().caps.len(), 1);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"[\\w\\s]+\").unwrap();",
          "    let hay = \"Hello, World!\";",
          "    let _caps = re.captures(hay);",
          "    assert_eq!(_caps.is_some(), true);",
          "    assert_eq!(_caps.unwrap().get(0).unwrap().as_str(), \"Hello, World!\");",
          "    assert_eq!(_caps.unwrap().caps.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\s+\").unwrap();",
          "    let hay = \"This  is  a test.\";",
          "    let _caps = re.captures(hay);",
          "}"
        ],
        "oracle": [
          "    assert!(_caps.is_some());",
          "    let caps = _caps.unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"  \");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \" \");",
          "    assert_eq!(caps.get(2).unwrap().as_str(), \" \");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\s+\").unwrap();",
          "    let hay = \"This  is  a test.\";",
          "    let _caps = re.captures(hay);",
          "    assert!(_caps.is_some());",
          "    let caps = _caps.unwrap();",
          "    assert_eq!(caps.get(0).unwrap().as_str(), \"  \");",
          "    assert_eq!(caps.get(1).unwrap().as_str(), \" \");",
          "    assert_eq!(caps.get(2).unwrap().as_str(), \" \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]