[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(0));",
          "    let _ = dfa.is_accel_state(StateID(2));",
          "}"
        ],
        "oracle": [
          "    assert!(!dfa.is_accel_state(StateID(0)));",
          "    assert!(!dfa.is_accel_state(StateID(2)));",
          "    assert!(dfa.is_accel_state(StateID(3)));",
          "    assert!(dfa.is_accel_state(StateID(4)));",
          "    assert!(dfa.is_accel_state(StateID(5)));",
          "    assert!(dfa.is_accel_state(StateID(6)));",
          "    assert!(dfa.is_accel_state(StateID(7)));",
          "    assert!(!dfa.is_accel_state(StateID(8)));",
          "    assert!(!dfa.is_accel_state(StateID(9)));",
          "    assert!(!dfa.is_accel_state(StateID(10)));"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(0));",
          "    let _ = dfa.is_accel_state(StateID(2));",
          "    assert!(!dfa.is_accel_state(StateID(0)));",
          "    assert!(!dfa.is_accel_state(StateID(2)));",
          "    assert!(dfa.is_accel_state(StateID(3)));",
          "    assert!(dfa.is_accel_state(StateID(4)));",
          "    assert!(dfa.is_accel_state(StateID(5)));",
          "    assert!(dfa.is_accel_state(StateID(6)));",
          "    assert!(dfa.is_accel_state(StateID(7)));",
          "    assert!(!dfa.is_accel_state(StateID(8)));",
          "    assert!(!dfa.is_accel_state(StateID(9)));",
          "    assert!(!dfa.is_accel_state(StateID(10)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(3));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(1)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(3));",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(1)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(7));",
          "}"
        ],
        "oracle": [
          "    assert!(dfa.is_accel_state(StateID(3)) == true);",
          "    assert!(dfa.is_accel_state(StateID(7)) == true);",
          "    assert!(dfa.is_accel_state(StateID(2)) == false);",
          "    assert!(dfa.is_accel_state(StateID(8)) == false);",
          "    assert!(dfa.is_accel_state(StateID(1)) == false);"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(7));",
          "    assert!(dfa.is_accel_state(StateID(3)) == true);",
          "    assert!(dfa.is_accel_state(StateID(7)) == true);",
          "    assert!(dfa.is_accel_state(StateID(2)) == false);",
          "    assert!(dfa.is_accel_state(StateID(8)) == false);",
          "    assert!(dfa.is_accel_state(StateID(1)) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(10));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(1)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(10));",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(1)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(0)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(2));",
          "    let _ = dfa.is_accel_state(StateID(8));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        special: Special,",
          "    }",
          "",
          "    let dfa = TestDFA {",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 1,",
          "            min_match: 2,",
          "            max_match: 5,",
          "            min_accel: 3,",
          "            max_accel: 7,",
          "            min_start: 4,",
          "            max_start: 9,",
          "        },",
          "    };",
          "",
          "    let _ = dfa.is_accel_state(StateID(2));",
          "    let _ = dfa.is_accel_state(StateID(8));",
          "    assert_eq!(dfa.is_accel_state(StateID(2)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(3)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(4)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(5)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(6)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(7)), true);",
          "    assert_eq!(dfa.is_accel_state(StateID(8)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(9)), false);",
          "    assert_eq!(dfa.is_accel_state(StateID(10)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]