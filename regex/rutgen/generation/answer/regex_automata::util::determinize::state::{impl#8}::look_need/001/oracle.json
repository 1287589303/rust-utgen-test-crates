[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_bytes: [u8; 9] = [0, 0, 0, 0, 0, 1, 0, 0, 0];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, 1);",
          "    assert!(result.contains(1));",
          "    assert!(!result.contains(0));",
          "    assert_eq!(result.len(), 1);",
          "    assert!(!result.is_empty());",
          "    assert!(result.contains_word());",
          "    assert!(!result.contains_word_ascii());",
          "    assert!(!result.contains_word_unicode());"
        ],
        "code": [
          "{",
          "    let input_bytes: [u8; 9] = [0, 0, 0, 0, 0, 1, 0, 0, 0];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "    assert_eq!(result.bits, 1);",
          "    assert!(result.contains(1));",
          "    assert!(!result.contains(0));",
          "    assert_eq!(result.len(), 1);",
          "    assert!(!result.is_empty());",
          "    assert!(result.contains_word());",
          "    assert!(!result.contains_word_ascii());",
          "    assert!(!result.contains_word_unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_bytes: [u8; 9] = [0, 0, 0, 0, 0, 0, 0, 0, 0];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, LookSet::read_repr(&input_bytes[5..]));"
        ],
        "code": [
          "{",
          "    let input_bytes: [u8; 9] = [0, 0, 0, 0, 0, 0, 0, 0, 0];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "    assert_eq!(result, LookSet::read_repr(&input_bytes[5..]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_bytes: [u8; 9] = [0, 0, 0, 0, 0, 255, 255, 255, 255];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, 0xFFFFFFFF);"
        ],
        "code": [
          "{",
          "    let input_bytes: [u8; 9] = [0, 0, 0, 0, 0, 255, 255, 255, 255];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "    assert_eq!(result.bits, 0xFFFFFFFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_bytes: [u8; 9] = [0, 0, 0, 0, 0, 100, 0, 0, 0];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, 0);"
        ],
        "code": [
          "{",
          "    let input_bytes: [u8; 9] = [0, 0, 0, 0, 0, 100, 0, 0, 0];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "    assert_eq!(result.bits, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_bytes: [u8; 9] = [1, 2, 3, 4, 5, 10, 0, 0, 0];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bits, u32::from_ne_bytes([10, 0, 0, 0]));",
          "    assert_eq!(result.len(), 1);",
          "    assert!(!result.is_empty());",
          "    assert!(result.contains(Look::SomeLook));",
          "    assert!(!result.contains(Look::OtherLook));",
          "    assert!(result.contains_anchor());",
          "    assert!(!result.contains_word());",
          "    assert_eq!(result.singleton(Look::SomeLook).bits, result.bits);",
          "    assert!(result.union(LookSet::empty()).bits == result.bits);",
          "    assert!(result.intersect(LookSet::empty()).is_empty());"
        ],
        "code": [
          "{",
          "    let input_bytes: [u8; 9] = [1, 2, 3, 4, 5, 10, 0, 0, 0];",
          "    let repr = Repr(&input_bytes);",
          "    let result = repr.look_need();",
          "    assert_eq!(result.bits, u32::from_ne_bytes([10, 0, 0, 0]));",
          "    assert_eq!(result.len(), 1);",
          "    assert!(!result.is_empty());",
          "    assert!(result.contains(Look::SomeLook));",
          "    assert!(!result.contains(Look::OtherLook));",
          "    assert!(result.contains_anchor());",
          "    assert!(!result.contains_word());",
          "    assert_eq!(result.singleton(Look::SomeLook).bits, result.bits);",
          "    assert!(result.union(LookSet::empty()).bits == result.bits);",
          "    assert!(result.intersect(LookSet::empty()).is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]