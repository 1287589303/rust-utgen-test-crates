[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels_data: &[u32] = &[1, 4, 5, 6, 7];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(0);",
          "}"
        ],
        "oracle": [
          "    let accels_data: &[u32] = &[1, 4, 5, 6, 7];",
          "    let accels = Accels { accels: accels_data };",
          "    assert_eq!(accels.len(), 1);",
          "    let result = accels.needles(0);",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(result, &[5, 6, 7]);"
        ],
        "code": [
          "{",
          "    let accels_data: &[u32] = &[1, 4, 5, 6, 7];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(0);",
          "    let accels_data: &[u32] = &[1, 4, 5, 6, 7];",
          "    let accels = Accels { accels: accels_data };",
          "    assert_eq!(accels.len(), 1);",
          "    let result = accels.needles(0);",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(result, &[5, 6, 7]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels_data: &[u32] = &[2, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(1);",
          "}"
        ],
        "oracle": [
          "    let accels_data: &[u32] = &[2, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    assert_eq!(accels.len(), 2);",
          "    let result = accels.needles(1);",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(result, &[6, 7, 8, 9]);",
          "    assert!(std::panic::catch_unwind(|| accels.needles(2)).is_err());"
        ],
        "code": [
          "{",
          "    let accels_data: &[u32] = &[2, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(1);",
          "    let accels_data: &[u32] = &[2, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    assert_eq!(accels.len(), 2);",
          "    let result = accels.needles(1);",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(result, &[6, 7, 8, 9]);",
          "    assert!(std::panic::catch_unwind(|| accels.needles(2)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels_data: &[u32] = &[3, 2, 3, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(2);",
          "}"
        ],
        "oracle": [
          "    let accels_data: &[u32] = &[3, 2, 3, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(2);",
          "    assert_eq!(result, &[4, 5, 6]);"
        ],
        "code": [
          "{",
          "    let accels_data: &[u32] = &[3, 2, 3, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(2);",
          "    let accels_data: &[u32] = &[3, 2, 3, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(2);",
          "    assert_eq!(result, &[4, 5, 6]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"invalid accelerator index 3\")]"
        ],
        "prefix": [
          "{",
          "    let accels_data: &[u32] = &[3, 2, 3, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(3);",
          "}"
        ],
        "oracle": [
          "    let accels_data: &[u32] = &[3, 2, 3, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(3);"
        ],
        "code": [
          "{",
          "    let accels_data: &[u32] = &[3, 2, 3, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(3);",
          "    let accels_data: &[u32] = &[3, 2, 3, 4, 5, 6, 7, 8, 9];",
          "    let accels = Accels { accels: accels_data };",
          "    let result = accels.needles(3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]