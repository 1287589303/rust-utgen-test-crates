[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
          "    let result = transition.matches_byte(100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);  // matches_byte should return true when byte is equal to start",
          "    assert!(result == (100 <= transition.end));  // confirm that byte is less than or equal to end"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 100, end: 200, next: StateID(0) };",
          "    let result = transition.matches_byte(100);",
          "    assert_eq!(result, true);  // matches_byte should return true when byte is equal to start",
          "    assert!(result == (100 <= transition.end));  // confirm that byte is less than or equal to end",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 150, end: 150, next: StateID(0) };",
          "    let result = transition.matches_byte(150);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(transition.matches_byte(150));",
          "    assert!(transition.matches_byte(149));",
          "    assert!(!transition.matches_byte(151));",
          "    assert!(transition.matches_byte(150));"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 150, end: 150, next: StateID(0) };",
          "    let result = transition.matches_byte(150);",
          "    assert_eq!(result, true);",
          "    assert!(transition.matches_byte(150));",
          "    assert!(transition.matches_byte(149));",
          "    assert!(!transition.matches_byte(151));",
          "    assert!(transition.matches_byte(150));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 200, end: 250, next: StateID(0) };",
          "    let result = transition.matches_byte(200);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(result == true);"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 200, end: 250, next: StateID(0) };",
          "    let result = transition.matches_byte(200);",
          "    assert_eq!(result, true);",
          "    assert!(result == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
          "    let result = transition.matches_byte(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(result == true);",
          "    assert!(transition.matches_byte(255));",
          "    assert!(transition.matches_byte(128));",
          "    assert!(!transition.matches_byte(256));",
          "    assert!(transition.matches_byte(0));",
          "    assert!(transition.matches_byte(255));",
          "    assert_eq!(result, transition.matches_byte(0));",
          "    assert_eq!(result, transition.matches_byte(255));",
          "    assert_eq!(result, transition.matches_byte(128));",
          "    assert_eq!(false, transition.matches_byte(256));"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
          "    let result = transition.matches_byte(0);",
          "    assert_eq!(result, true);",
          "    assert!(result == true);",
          "    assert!(transition.matches_byte(255));",
          "    assert!(transition.matches_byte(128));",
          "    assert!(!transition.matches_byte(256));",
          "    assert!(transition.matches_byte(0));",
          "    assert!(transition.matches_byte(255));",
          "    assert_eq!(result, transition.matches_byte(0));",
          "    assert_eq!(result, transition.matches_byte(255));",
          "    assert_eq!(result, transition.matches_byte(128));",
          "    assert_eq!(false, transition.matches_byte(256));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
          "    let result = transition.matches_byte(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let transition = Transition { start: 10, end: 20, next: StateID(1) };",
          "    let result = transition.matches_byte(10);",
          "    assert_eq!(result, true);",
          "    let result = transition.matches_byte(20);",
          "    assert_eq!(result, true);",
          "    let result = transition.matches_byte(5);",
          "    assert_eq!(result, false);",
          "    let result = transition.matches_byte(25);",
          "    assert_eq!(result, false);",
          "    let transition = Transition { start: 100, end: 150, next: StateID(2) };",
          "    let result = transition.matches_byte(100);",
          "    assert_eq!(result, true);",
          "    let result = transition.matches_byte(150);",
          "    assert_eq!(result, true);",
          "    let result = transition.matches_byte(99);",
          "    assert_eq!(result, false);",
          "    let result = transition.matches_byte(151);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 0, end: 255, next: StateID(0) };",
          "    let result = transition.matches_byte(255);",
          "    assert_eq!(result, true);",
          "    let transition = Transition { start: 10, end: 20, next: StateID(1) };",
          "    let result = transition.matches_byte(10);",
          "    assert_eq!(result, true);",
          "    let result = transition.matches_byte(20);",
          "    assert_eq!(result, true);",
          "    let result = transition.matches_byte(5);",
          "    assert_eq!(result, false);",
          "    let result = transition.matches_byte(25);",
          "    assert_eq!(result, false);",
          "    let transition = Transition { start: 100, end: 150, next: StateID(2) };",
          "    let result = transition.matches_byte(100);",
          "    assert_eq!(result, true);",
          "    let result = transition.matches_byte(150);",
          "    assert_eq!(result, true);",
          "    let result = transition.matches_byte(99);",
          "    assert_eq!(result, false);",
          "    let result = transition.matches_byte(151);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 50, end: 255, next: StateID(0) };",
          "    let result = transition.matches_byte(50);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(result);",
          "    assert!(transition.matches_byte(255));",
          "    assert!(transition.matches_byte(100));",
          "    assert!(!transition.matches_byte(49));",
          "    assert!(!transition.matches_byte(256));"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 50, end: 255, next: StateID(0) };",
          "    let result = transition.matches_byte(50);",
          "    assert_eq!(result, true);",
          "    assert!(result);",
          "    assert!(transition.matches_byte(255));",
          "    assert!(transition.matches_byte(100));",
          "    assert!(!transition.matches_byte(49));",
          "    assert!(!transition.matches_byte(256));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 100, end: 150, next: StateID(0) };",
          "    let result = transition.matches_byte(100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(result);",
          "    assert!(transition.matches_byte(150));"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 100, end: 150, next: StateID(0) };",
          "    let result = transition.matches_byte(100);",
          "    assert_eq!(result, true);",
          "    assert!(result);",
          "    assert!(transition.matches_byte(150));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 50, end: 200, next: StateID(0) };",
          "    let result = transition.matches_byte(51);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(transition.matches_byte(50));",
          "    assert!(transition.matches_byte(200));",
          "    assert!(!transition.matches_byte(49));",
          "    assert!(!transition.matches_byte(201));"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 50, end: 200, next: StateID(0) };",
          "    let result = transition.matches_byte(51);",
          "    assert_eq!(result, true);",
          "    assert!(transition.matches_byte(50));",
          "    assert!(transition.matches_byte(200));",
          "    assert!(!transition.matches_byte(49));",
          "    assert!(!transition.matches_byte(201));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]