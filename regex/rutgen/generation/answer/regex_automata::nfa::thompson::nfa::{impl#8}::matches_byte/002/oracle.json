[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 5, end: 10, next: StateID(SmallIndex::new(1)) };",
          "    let byte = 3;",
          "    transition.matches_byte(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.matches_byte(byte), false);",
          "    assert!(self.start > byte);",
          "    assert!(byte < transition.start);",
          "    assert!(transition.start - byte == 2);"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 5, end: 10, next: StateID(SmallIndex::new(1)) };",
          "    let byte = 3;",
          "    transition.matches_byte(byte);",
          "    assert_eq!(transition.matches_byte(byte), false);",
          "    assert!(self.start > byte);",
          "    assert!(byte < transition.start);",
          "    assert!(transition.start - byte == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 10, end: 10, next: StateID(SmallIndex::new(1)) };",
          "    let byte = 9;",
          "    transition.matches_byte(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.matches_byte(9), false);"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 10, end: 10, next: StateID(SmallIndex::new(1)) };",
          "    let byte = 9;",
          "    transition.matches_byte(byte);",
          "    assert_eq!(transition.matches_byte(9), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 20, end: 50, next: StateID(SmallIndex::new(1)) };",
          "    let byte = 15;",
          "    transition.matches_byte(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.matches_byte(byte), false);"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 20, end: 50, next: StateID(SmallIndex::new(1)) };",
          "    let byte = 15;",
          "    transition.matches_byte(byte);",
          "    assert_eq!(transition.matches_byte(byte), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]