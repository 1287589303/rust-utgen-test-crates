[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    builder.case_insensitive(true);",
          "}"
        ],
        "oracle": [
          "    let mut builder = ParserBuilder::new();",
          "    let result = builder.case_insensitive(true);",
          "    assert_eq!(result as *const _, builder as *const _);",
          "    let result = builder.case_insensitive(false);",
          "    assert_eq!(result as *const _, builder as *const _);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    builder.case_insensitive(true);",
          "    let mut builder = ParserBuilder::new();",
          "    let result = builder.case_insensitive(true);",
          "    assert_eq!(result as *const _, builder as *const _);",
          "    let result = builder.case_insensitive(false);",
          "    assert_eq!(result as *const _, builder as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    builder.case_insensitive(false);",
          "}"
        ],
        "oracle": [
          "    builder.case_insensitive(false); // Ensure `case_insensitive` is set to false",
          "    builder.case_insensitive(true);  // Ensure `case_insensitive` is set to true",
          "    assert_eq!(builder.hir.flags.case_insensitive, None); // Expect case_insensitive to be None after false",
          "    builder.case_insensitive(true); // Set to true",
          "    assert_eq!(builder.hir.flags.case_insensitive, Some(true)); // Expect case_insensitive to be Some(true)",
          "    assert_eq!(builder.case_insensitive(false) as *const _, &builder as *const _); // Check self return type on false",
          "    assert_eq!(builder.case_insensitive(true) as *const _, &builder as *const _); // Check self return type on true"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    builder.case_insensitive(false);",
          "    builder.case_insensitive(false); // Ensure `case_insensitive` is set to false",
          "    builder.case_insensitive(true);  // Ensure `case_insensitive` is set to true",
          "    assert_eq!(builder.hir.flags.case_insensitive, None); // Expect case_insensitive to be None after false",
          "    builder.case_insensitive(true); // Set to true",
          "    assert_eq!(builder.hir.flags.case_insensitive, Some(true)); // Expect case_insensitive to be Some(true)",
          "    assert_eq!(builder.case_insensitive(false) as *const _, &builder as *const _); // Check self return type on false",
          "    assert_eq!(builder.case_insensitive(true) as *const _, &builder as *const _); // Check self return type on true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]