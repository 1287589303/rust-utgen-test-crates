[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct MockInterval;",
          "",
          "    impl Interval for MockInterval {",
          "        type Bound = char;",
          "        fn lower(&self) -> Self::Bound { 'a' }",
          "        fn upper(&self) -> Self::Bound { 'z' }",
          "        fn set_lower(&mut self, _: Self::Bound) {}",
          "        fn set_upper(&mut self, _: Self::Bound) {}",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::<MockInterval> {",
          "        ranges: Vec::new(),",
          "        folded: false,",
          "    };",
          "    let result = interval_set.case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(interval_set.folded, false);",
          "    assert!(interval_set.ranges.is_empty());",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct MockInterval;",
          "",
          "    impl Interval for MockInterval {",
          "        type Bound = char;",
          "        fn lower(&self) -> Self::Bound { 'a' }",
          "        fn upper(&self) -> Self::Bound { 'z' }",
          "        fn set_lower(&mut self, _: Self::Bound) {}",
          "        fn set_upper(&mut self, _: Self::Bound) {}",
          "        fn case_fold_simple(&self, _: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            Ok(())",
          "        }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::<MockInterval> {",
          "        ranges: Vec::new(),",
          "        folded: false,",
          "    };",
          "    let result = interval_set.case_fold_simple();",
          "    assert_eq!(interval_set.folded, false);",
          "    assert!(interval_set.ranges.is_empty());",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct MockInterval;",
          "",
          "    impl Interval for MockInterval {",
          "        type Bound = char;",
          "        fn lower(&self) -> Self::Bound { 'a' }",
          "        fn upper(&self) -> Self::Bound { 'z' }",
          "        fn set_lower(&mut self, _: Self::Bound) {}",
          "        fn set_upper(&mut self, _: Self::Bound) {}",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            intervals.push(*self);",
          "            Ok(())",
          "        }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::<MockInterval> {",
          "        ranges: vec![MockInterval::default()],",
          "        folded: false,",
          "    };",
          "    let result = interval_set.case_fold_simple();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert!(interval_set.folded);",
          "    assert_eq!(interval_set.ranges.len(), 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), 'a');",
          "    assert_eq!(interval_set.ranges[0].upper(), 'z');"
        ],
        "code": [
          "{",
          "    #[derive(Clone, Copy, Debug, Default, Eq, PartialEq, PartialOrd, Ord)]",
          "    struct MockInterval;",
          "",
          "    impl Interval for MockInterval {",
          "        type Bound = char;",
          "        fn lower(&self) -> Self::Bound { 'a' }",
          "        fn upper(&self) -> Self::Bound { 'z' }",
          "        fn set_lower(&mut self, _: Self::Bound) {}",
          "        fn set_upper(&mut self, _: Self::Bound) {}",
          "        fn case_fold_simple(&self, intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
          "            intervals.push(*self);",
          "            Ok(())",
          "        }",
          "        fn is_contiguous(&self, _: &Self) -> bool { true }",
          "        fn is_intersection_empty(&self, _: &Self) -> bool { false }",
          "        fn is_subset(&self, _: &Self) -> bool { false }",
          "    }",
          "",
          "    let mut interval_set = IntervalSet::<MockInterval> {",
          "        ranges: vec![MockInterval::default()],",
          "        folded: false,",
          "    };",
          "    let result = interval_set.case_fold_simple();",
          "    assert!(result.is_ok());",
          "    assert!(interval_set.folded);",
          "    assert_eq!(interval_set.ranges.len(), 1);",
          "    assert_eq!(interval_set.ranges[0].lower(), 'a');",
          "    assert_eq!(interval_set.ranges[0].upper(), 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]