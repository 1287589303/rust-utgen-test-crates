[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = LiteralTrie::forward();",
          "    trie.rev = false;",
          "    let input: &[u8] = &[1, 2, 3, 4, 5];",
          "    trie.add(input).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut trie = LiteralTrie::forward();",
          "    trie.rev = false;",
          "    let input: &[u8] = &[1, 2, 3, 4, 5];",
          "    assert_eq!(trie.add(input), Ok(()));",
          "    trie.rev = true;",
          "    let input_rev: &[u8] = &[5, 4, 3, 2, 1];",
          "    assert_eq!(trie.add(input_rev), Ok(()));",
          "    trie.rev = false;",
          "    let input_empty: &[u8] = &[];",
          "    assert_eq!(trie.add(input_empty), Ok(()));"
        ],
        "code": [
          "{",
          "    let mut trie = LiteralTrie::forward();",
          "    trie.rev = false;",
          "    let input: &[u8] = &[1, 2, 3, 4, 5];",
          "    trie.add(input).unwrap();",
          "    let mut trie = LiteralTrie::forward();",
          "    trie.rev = false;",
          "    let input: &[u8] = &[1, 2, 3, 4, 5];",
          "    assert_eq!(trie.add(input), Ok(()));",
          "    trie.rev = true;",
          "    let input_rev: &[u8] = &[5, 4, 3, 2, 1];",
          "    assert_eq!(trie.add(input_rev), Ok(()));",
          "    trie.rev = false;",
          "    let input_empty: &[u8] = &[];",
          "    assert_eq!(trie.add(input_empty), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut trie = LiteralTrie::reverse();",
          "    trie.rev = true;",
          "    let input: &[u8] = &[5, 4, 3, 2, 1];",
          "    trie.add(input).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(trie.rev == true);",
          "    assert_eq!(trie.states.len(), initial_state_count + 1);",
          "    assert_eq!(trie.states[prev].chunks.len(), expected_chunks_after_addition);",
          "    assert!(trie.get_or_add_state(prev, 5).is_ok());",
          "    assert!(trie.get_or_add_state(prev, 4).is_ok());",
          "    assert!(trie.get_or_add_state(prev, 3).is_ok());",
          "    assert!(trie.get_or_add_state(prev, 2).is_ok());",
          "    assert!(trie.get_or_add_state(prev, 1).is_ok());",
          "    assert_eq!(trie.states[prev].is_leaf(), true);",
          "    assert_eq!(trie.states[prev].transitions.len(), expected_transitions_count);"
        ],
        "code": [
          "{",
          "    let mut trie = LiteralTrie::reverse();",
          "    trie.rev = true;",
          "    let input: &[u8] = &[5, 4, 3, 2, 1];",
          "    trie.add(input).unwrap();",
          "    assert!(trie.rev == true);",
          "    assert_eq!(trie.states.len(), initial_state_count + 1);",
          "    assert_eq!(trie.states[prev].chunks.len(), expected_chunks_after_addition);",
          "    assert!(trie.get_or_add_state(prev, 5).is_ok());",
          "    assert!(trie.get_or_add_state(prev, 4).is_ok());",
          "    assert!(trie.get_or_add_state(prev, 3).is_ok());",
          "    assert!(trie.get_or_add_state(prev, 2).is_ok());",
          "    assert!(trie.get_or_add_state(prev, 1).is_ok());",
          "    assert_eq!(trie.states[prev].is_leaf(), true);",
          "    assert_eq!(trie.states[prev].transitions.len(), expected_transitions_count);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]