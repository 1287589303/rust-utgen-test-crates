[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(&[b\"a\".to_vec(), b\"b\".to_vec(), b\"c\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::exact(b\"b\"), Literal::exact(b\"c\")]));",
          "    ",
          "    let mut seq_empty = Seq::new(&[b\"sam\".to_vec(), b\"samwise\".to_vec()]);",
          "    seq_empty.minimize_by_preference();",
          "    assert_eq!(seq_empty.literals(), Some(&[Literal::inexact(b\"sam\")]));",
          "    ",
          "    let mut seq_reversed = Seq::new(&[b\"samwise\".to_vec(), b\"sam\".to_vec()]);",
          "    seq_reversed.minimize_by_preference();",
          "    assert_eq!(seq_reversed.literals(), Some(&[Literal::exact(b\"samwise\"), Literal::exact(b\"sam\")]));",
          "    ",
          "    let mut seq_with_empty_string = Seq::new(&[b\"foo\".to_vec(), b\"bar\".to_vec(), b\"\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq_with_empty_string.minimize_by_preference();",
          "    let expected_with_empty = Seq::from_iter([Literal::exact(b\"foo\"), Literal::exact(b\"bar\"), Literal::inexact(b\"\")]);",
          "    assert_eq!(seq_with_empty, expected_with_empty);",
          "    ",
          "    let mut seq_empty_at_start = Seq::new(&[b\"\".to_vec(), b\"foo\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq_empty_at_start.minimize_by_preference();",
          "    assert_eq!(seq_empty_at_start.literals(), Some(&[Literal::inexact(b\"\")]));"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(&[b\"a\".to_vec(), b\"b\".to_vec(), b\"c\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"a\"), Literal::exact(b\"b\"), Literal::exact(b\"c\")]));",
          "    ",
          "    let mut seq_empty = Seq::new(&[b\"sam\".to_vec(), b\"samwise\".to_vec()]);",
          "    seq_empty.minimize_by_preference();",
          "    assert_eq!(seq_empty.literals(), Some(&[Literal::inexact(b\"sam\")]));",
          "    ",
          "    let mut seq_reversed = Seq::new(&[b\"samwise\".to_vec(), b\"sam\".to_vec()]);",
          "    seq_reversed.minimize_by_preference();",
          "    assert_eq!(seq_reversed.literals(), Some(&[Literal::exact(b\"samwise\"), Literal::exact(b\"sam\")]));",
          "    ",
          "    let mut seq_with_empty_string = Seq::new(&[b\"foo\".to_vec(), b\"bar\".to_vec(), b\"\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq_with_empty_string.minimize_by_preference();",
          "    let expected_with_empty = Seq::from_iter([Literal::exact(b\"foo\"), Literal::exact(b\"bar\"), Literal::inexact(b\"\")]);",
          "    assert_eq!(seq_with_empty, expected_with_empty);",
          "    ",
          "    let mut seq_empty_at_start = Seq::new(&[b\"\".to_vec(), b\"foo\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq_empty_at_start.minimize_by_preference();",
          "    assert_eq!(seq_empty_at_start.literals(), Some(&[Literal::inexact(b\"\")]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(&[b\"foo\".to_vec(), b\"bar\".to_vec(), b\"\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Seq::from_iter([Literal::exact(b\"foo\"), Literal::exact(b\"bar\"), Literal::inexact(b\"\")]), seq);"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(&[b\"foo\".to_vec(), b\"bar\".to_vec(), b\"\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(Seq::from_iter([Literal::exact(b\"foo\"), Literal::exact(b\"bar\"), Literal::inexact(b\"\")]), seq);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(&[b\"\".to_vec(), b\"foo\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "}"
        ],
        "oracle": [
          "    assert!(!seq.is_finite());",
          "    assert!(seq.is_empty());",
          "    assert_eq!(seq.len(), Some(0));",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"\")]));",
          "    assert_eq!(seq.literals().unwrap().len(), 1);"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(&[b\"\".to_vec(), b\"foo\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert!(!seq.is_finite());",
          "    assert!(seq.is_empty());",
          "    assert_eq!(seq.len(), Some(0));",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"\")]));",
          "    assert_eq!(seq.literals().unwrap().len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(&[b\"sam\".to_vec(), b\"samwise\".to_vec(), b\"sam\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"sam\")]));",
          "    assert_eq!(seq.len(), Some(1));",
          "    assert!(seq.is_inexact());",
          "    assert!(seq.is_finite());",
          "    assert!(!seq.is_empty());"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(&[b\"sam\".to_vec(), b\"samwise\".to_vec(), b\"sam\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"sam\")]));",
          "    assert_eq!(seq.len(), Some(1));",
          "    assert!(seq.is_inexact());",
          "    assert!(seq.is_finite());",
          "    assert!(!seq.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut seq = Seq::new(&[b\"samwise\".to_vec(), b\"sam\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"samwise\".to_vec())]));",
          "    assert_eq!(seq.is_empty(), false);",
          "    assert_eq!(seq.len(), Some(1));",
          "    assert_eq!(seq.is_exact(), false);",
          "    assert_eq!(seq.is_inexact(), true);",
          "    ",
          "    let mut seq = Seq::new(&[b\"sam\".to_vec(), b\"samwise\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"sam\".to_vec()), Literal::exact(b\"samwise\".to_vec())]));",
          "    assert_eq!(seq.len(), Some(2));",
          "    assert_eq!(seq.is_exact(), true);",
          "    ",
          "    let mut seq = Seq::new(&[b\"foo\".to_vec(), b\"bar\".to_vec(), b\"\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"foo\".to_vec()), Literal::exact(b\"bar\".to_vec()), Literal::inexact(b\"\".to_vec())]));",
          "    assert_eq!(seq.len(), Some(3));",
          "    ",
          "    let mut seq = Seq::new(&[b\"\".to_vec(), b\"foo\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"\".to_vec())]));",
          "    assert_eq!(seq.len(), Some(1));",
          "    assert_eq!(seq.is_exact(), false);",
          "    assert_eq!(seq.is_inexact(), true);"
        ],
        "code": [
          "{",
          "    let mut seq = Seq::new(&[b\"samwise\".to_vec(), b\"sam\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"samwise\".to_vec())]));",
          "    assert_eq!(seq.is_empty(), false);",
          "    assert_eq!(seq.len(), Some(1));",
          "    assert_eq!(seq.is_exact(), false);",
          "    assert_eq!(seq.is_inexact(), true);",
          "    ",
          "    let mut seq = Seq::new(&[b\"sam\".to_vec(), b\"samwise\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"sam\".to_vec()), Literal::exact(b\"samwise\".to_vec())]));",
          "    assert_eq!(seq.len(), Some(2));",
          "    assert_eq!(seq.is_exact(), true);",
          "    ",
          "    let mut seq = Seq::new(&[b\"foo\".to_vec(), b\"bar\".to_vec(), b\"\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::exact(b\"foo\".to_vec()), Literal::exact(b\"bar\".to_vec()), Literal::inexact(b\"\".to_vec())]));",
          "    assert_eq!(seq.len(), Some(3));",
          "    ",
          "    let mut seq = Seq::new(&[b\"\".to_vec(), b\"foo\".to_vec(), b\"quux\".to_vec(), b\"fox\".to_vec()]);",
          "    seq.minimize_by_preference();",
          "    assert_eq!(seq.literals(), Some(&[Literal::inexact(b\"\".to_vec())]));",
          "    assert_eq!(seq.len(), Some(1));",
          "    assert_eq!(seq.is_exact(), false);",
          "    assert_eq!(seq.is_inexact(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]