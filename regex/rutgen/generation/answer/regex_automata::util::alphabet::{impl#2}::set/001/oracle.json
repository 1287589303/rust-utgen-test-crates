[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get(0), 1);",
          "    assert_eq!(byte_classes.get(1), 0);",
          "    assert_eq!(byte_classes.get(255), 0);",
          "    byte_classes.set(255, 2);",
          "    assert_eq!(byte_classes.get(255), 2);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(0, 1);",
          "    assert_eq!(byte_classes.get(0), 1);",
          "    assert_eq!(byte_classes.get(1), 0);",
          "    assert_eq!(byte_classes.get(255), 0);",
          "    byte_classes.set(255, 2);",
          "    assert_eq!(byte_classes.get(255), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(0, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get(0), 0);",
          "    byte_classes.set(255, 1);",
          "    assert_eq!(byte_classes.get(255), 1);",
          "    byte_classes.set(128, 2);",
          "    assert_eq!(byte_classes.get(128), 2);",
          "    byte_classes.set(1, 3);",
          "    assert_eq!(byte_classes.get(1), 3);",
          "    byte_classes.set(10, 5);",
          "    assert_eq!(byte_classes.get(10), 5);",
          "    byte_classes.set(64, 4);",
          "    assert_eq!(byte_classes.get(64), 4);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(0, 0);",
          "    assert_eq!(byte_classes.get(0), 0);",
          "    byte_classes.set(255, 1);",
          "    assert_eq!(byte_classes.get(255), 1);",
          "    byte_classes.set(128, 2);",
          "    assert_eq!(byte_classes.get(128), 2);",
          "    byte_classes.set(1, 3);",
          "    assert_eq!(byte_classes.get(1), 3);",
          "    byte_classes.set(10, 5);",
          "    assert_eq!(byte_classes.get(10), 5);",
          "    byte_classes.set(64, 4);",
          "    assert_eq!(byte_classes.get(64), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(255, 255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get(255), 255);",
          "    assert_eq!(byte_classes.get(0), 0);",
          "    assert!(byte_classes.is_singleton() == false);",
          "    byte_classes.set(128, 10);",
          "    assert_eq!(byte_classes.get(128), 10);",
          "    assert!(byte_classes.alphabet_len() == 256);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(255, 255);",
          "    assert_eq!(byte_classes.get(255), 255);",
          "    assert_eq!(byte_classes.get(0), 0);",
          "    assert!(byte_classes.is_singleton() == false);",
          "    byte_classes.set(128, 10);",
          "    assert_eq!(byte_classes.get(128), 10);",
          "    assert!(byte_classes.alphabet_len() == 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(128, 127);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get(128), 127);",
          "    assert_eq!(byte_classes.get(0), 0);",
          "    assert_eq!(byte_classes.get(255), 0);",
          "    assert_eq!(byte_classes.get(100), 0);",
          "    byte_classes.set(0, 50);",
          "    assert_eq!(byte_classes.get(0), 50);",
          "    byte_classes.set(255, 25);",
          "    assert_eq!(byte_classes.get(255), 25);",
          "    byte_classes.set(128, 5);",
          "    assert_eq!(byte_classes.get(128), 5);",
          "    assert!(byte_classes.is_singleton() == false);",
          "    assert_eq!(byte_classes.alphabet_len(), 256);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(128, 127);",
          "    assert_eq!(byte_classes.get(128), 127);",
          "    assert_eq!(byte_classes.get(0), 0);",
          "    assert_eq!(byte_classes.get(255), 0);",
          "    assert_eq!(byte_classes.get(100), 0);",
          "    byte_classes.set(0, 50);",
          "    assert_eq!(byte_classes.get(0), 50);",
          "    byte_classes.set(255, 25);",
          "    assert_eq!(byte_classes.get(255), 25);",
          "    byte_classes.set(128, 5);",
          "    assert_eq!(byte_classes.get(128), 5);",
          "    assert!(byte_classes.is_singleton() == false);",
          "    assert_eq!(byte_classes.alphabet_len(), 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(100, 50);",
          "    byte_classes.set(100, 150);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get(100), 150);",
          "    assert_eq!(byte_classes.get(101), 0);",
          "    assert_eq!(byte_classes.get(250), 0);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(100, 50);",
          "    byte_classes.set(100, 150);",
          "    assert_eq!(byte_classes.get(100), 150);",
          "    assert_eq!(byte_classes.get(101), 0);",
          "    assert_eq!(byte_classes.get(250), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]