[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 5;",
          "    let b: usize = 3;",
          "    let what: &'static str = \"small multiplication\";",
          "    let result = mul(a, b, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(15));"
        ],
        "code": [
          "{",
          "    let a: usize = 5;",
          "    let b: usize = 3;",
          "    let what: &'static str = \"small multiplication\";",
          "    let result = mul(a, b, what);",
          "    assert_eq!(result, Ok(15));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 0;",
          "    let b: usize = 123456;",
          "    let what: &'static str = \"multiplying by zero\";",
          "    let result = mul(a, b, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(0));"
        ],
        "code": [
          "{",
          "    let a: usize = 0;",
          "    let b: usize = 123456;",
          "    let what: &'static str = \"multiplying by zero\";",
          "    let result = mul(a, b, what);",
          "    assert_eq!(result, Ok(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 1;",
          "    let b: usize = usize::MAX; // 2^63 - 1 for 64-bit systems",
          "    let what: &'static str = \"boundary multiplication\";",
          "    let result = mul(a, b, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(usize::MAX));"
        ],
        "code": [
          "{",
          "    let a: usize = 1;",
          "    let b: usize = usize::MAX; // 2^63 - 1 for 64-bit systems",
          "    let what: &'static str = \"boundary multiplication\";",
          "    let result = mul(a, b, what);",
          "    assert_eq!(result, Ok(usize::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 100000;",
          "    let b: usize = 100000;",
          "    let what: &'static str = \"large number multiplication\";",
          "    let result = mul(a, b, what);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 10000000000);"
        ],
        "code": [
          "{",
          "    let a: usize = 100000;",
          "    let b: usize = 100000;",
          "    let what: &'static str = \"large number multiplication\";",
          "    let result = mul(a, b, what);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 10000000000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 2;",
          "    let b: usize = usize::MAX / 2; // To avoid overflow",
          "    let what: &'static str = \"max bound multiplication\";",
          "    let result = mul(a, b, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(a * b));"
        ],
        "code": [
          "{",
          "    let a: usize = 2;",
          "    let b: usize = usize::MAX / 2; // To avoid overflow",
          "    let what: &'static str = \"max bound multiplication\";",
          "    let result = mul(a, b, what);",
          "    assert_eq!(result, Ok(a * b));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]