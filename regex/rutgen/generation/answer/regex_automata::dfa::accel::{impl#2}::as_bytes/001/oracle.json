[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 0],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: AccelsSlice { accels: [] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 0);",
          "    assert_eq!(bytes.as_ptr(), accels.as_ref().as_ptr().cast::<u8>());",
          "    assert_eq!(bytes, &[] as &[u8]);",
          "    let accels_with_data = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4] } };",
          "    let bytes_with_data = accels_with_data.as_bytes();",
          "    assert_eq!(bytes_with_data.len(), 4 * ACCEL_TY_SIZE);",
          "    assert_eq!(bytes_with_data.as_ptr(), accels_with_data.as_ref().as_ptr().cast::<u8>());",
          "    assert_eq!(bytes_with_data[0], 1);",
          "    assert_eq!(bytes_with_data[1], 2);",
          "    assert_eq!(bytes_with_data[2], 3);",
          "    assert_eq!(bytes_with_data[3], 4);"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 0],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [] } };",
          "    let _ = accels.as_bytes();",
          "    let accels = Accels { accels: AccelsSlice { accels: [] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 0);",
          "    assert_eq!(bytes.as_ptr(), accels.as_ref().as_ptr().cast::<u8>());",
          "    assert_eq!(bytes, &[] as &[u8]);",
          "    let accels_with_data = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4] } };",
          "    let bytes_with_data = accels_with_data.as_bytes();",
          "    assert_eq!(bytes_with_data.len(), 4 * ACCEL_TY_SIZE);",
          "    assert_eq!(bytes_with_data.as_ptr(), accels_with_data.as_ref().as_ptr().cast::<u8>());",
          "    assert_eq!(bytes_with_data[0], 1);",
          "    assert_eq!(bytes_with_data[1], 2);",
          "    assert_eq!(bytes_with_data[2], 3);",
          "    assert_eq!(bytes_with_data[3], 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 1],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: AccelsSlice { accels: [0] } };",
          "    assert_eq!(accels.as_bytes(), &[0]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [255] } };",
          "    assert_eq!(accels.as_bytes(), &[255]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4] } };",
          "    assert_eq!(accels.as_bytes(), &[1, 2, 3, 4]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [u32::MAX] } };",
          "    assert_eq!(accels.as_bytes(), &[255, 255, 255, 255]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [u32::MIN] } };",
          "    assert_eq!(accels.as_bytes(), &[0, 0, 0, 0]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [10, 20, 30, 40] } };",
          "    assert_eq!(accels.as_bytes(), &[10, 20, 30, 40]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6, 7, 8] } };",
          "    assert_eq!(accels.as_bytes(), &[1, 2, 3, 4, 5, 6, 7, 8]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [] } };",
          "    assert_eq!(accels.as_bytes(), &[]);"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 1],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1] } };",
          "    let _ = accels.as_bytes();",
          "    let accels = Accels { accels: AccelsSlice { accels: [0] } };",
          "    assert_eq!(accels.as_bytes(), &[0]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [255] } };",
          "    assert_eq!(accels.as_bytes(), &[255]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4] } };",
          "    assert_eq!(accels.as_bytes(), &[1, 2, 3, 4]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [u32::MAX] } };",
          "    assert_eq!(accels.as_bytes(), &[255, 255, 255, 255]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [u32::MIN] } };",
          "    assert_eq!(accels.as_bytes(), &[0, 0, 0, 0]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [10, 20, 30, 40] } };",
          "    assert_eq!(accels.as_bytes(), &[10, 20, 30, 40]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6, 7, 8] } };",
          "    assert_eq!(accels.as_bytes(), &[1, 2, 3, 4, 5, 6, 7, 8]);",
          "    let accels = Accels { accels: AccelsSlice { accels: [] } };",
          "    assert_eq!(accels.as_bytes(), &[]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 2],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 8);",
          "    assert_eq!(bytes[0], 1);",
          "    assert_eq!(bytes[1], 0);",
          "    assert_eq!(bytes[2], 0);",
          "    assert_eq!(bytes[3], 0);",
          "    assert_eq!(bytes[4], 2);",
          "    assert_eq!(bytes[5], 0);",
          "    assert_eq!(bytes[6], 0);",
          "    assert_eq!(bytes[7], 0);"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 2],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2] } };",
          "    let _ = accels.as_bytes();",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 8);",
          "    assert_eq!(bytes[0], 1);",
          "    assert_eq!(bytes[1], 0);",
          "    assert_eq!(bytes[2], 0);",
          "    assert_eq!(bytes[3], 0);",
          "    assert_eq!(bytes[4], 2);",
          "    assert_eq!(bytes[5], 0);",
          "    assert_eq!(bytes[6], 0);",
          "    assert_eq!(bytes[7], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 3],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 3 * ACCEL_TY_SIZE);",
          "    assert_eq!(bytes[0], 1);",
          "    assert_eq!(bytes[1], 0);",
          "    assert_eq!(bytes[2], 0);",
          "    assert_eq!(bytes[3], 0);",
          "    assert_eq!(bytes[4], 2);",
          "    assert_eq!(bytes[5], 0);",
          "    assert_eq!(bytes[6], 0);",
          "    assert_eq!(bytes[7], 0);",
          "    assert_eq!(bytes[8], 3);",
          "    assert_eq!(bytes[9], 0);",
          "    assert_eq!(bytes[10], 0);",
          "    assert_eq!(bytes[11], 0);"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 3],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3] } };",
          "    let _ = accels.as_bytes();",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 3 * ACCEL_TY_SIZE);",
          "    assert_eq!(bytes[0], 1);",
          "    assert_eq!(bytes[1], 0);",
          "    assert_eq!(bytes[2], 0);",
          "    assert_eq!(bytes[3], 0);",
          "    assert_eq!(bytes[4], 2);",
          "    assert_eq!(bytes[5], 0);",
          "    assert_eq!(bytes[6], 0);",
          "    assert_eq!(bytes[7], 0);",
          "    assert_eq!(bytes[8], 3);",
          "    assert_eq!(bytes[9], 0);",
          "    assert_eq!(bytes[10], 0);",
          "    assert_eq!(bytes[11], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 4],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4] } };",
          "    let result = accels.as_bytes();",
          "    assert_eq!(result.len(), ACCEL_LEN * ACCEL_TY_SIZE);",
          "    assert_eq!(result[0], 1);",
          "    assert_eq!(result[1], 2);",
          "    assert_eq!(result[2], 3);",
          "    assert_eq!(result[3], 4);",
          "    assert_eq!(result[4], 0);",
          "    assert_eq!(result[5], 0);",
          "    assert_eq!(result[6], 0);",
          "    assert_eq!(result[7], 0);"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 4],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4] } };",
          "    let _ = accels.as_bytes();",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4] } };",
          "    let result = accels.as_bytes();",
          "    assert_eq!(result.len(), ACCEL_LEN * ACCEL_TY_SIZE);",
          "    assert_eq!(result[0], 1);",
          "    assert_eq!(result[1], 2);",
          "    assert_eq!(result[2], 3);",
          "    assert_eq!(result[3], 4);",
          "    assert_eq!(result[4], 0);",
          "    assert_eq!(result[5], 0);",
          "    assert_eq!(result[6], 0);",
          "    assert_eq!(result[7], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 5],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 5 * ACCEL_TY_SIZE);",
          "    assert_eq!(bytes[0], 1 as u8);",
          "    assert_eq!(bytes[1], 0);",
          "    assert_eq!(bytes[2], 0);",
          "    assert_eq!(bytes[3], 0);",
          "    assert_eq!(bytes[4], 2 as u8);",
          "    assert_eq!(bytes[5], 0);",
          "    assert_eq!(bytes[6], 0);",
          "    assert_eq!(bytes[7], 0);",
          "    assert_eq!(bytes[8], 3 as u8);",
          "    assert_eq!(bytes[9], 0);",
          "    assert_eq!(bytes[10], 0);",
          "    assert_eq!(bytes[11], 0);",
          "    assert_eq!(bytes[12], 4 as u8);",
          "    assert_eq!(bytes[13], 0);",
          "    assert_eq!(bytes[14], 0);",
          "    assert_eq!(bytes[15], 0);",
          "    assert_eq!(bytes[16], 5 as u8);",
          "    assert_eq!(bytes[17], 0);",
          "    assert_eq!(bytes[18], 0);",
          "    assert_eq!(bytes[19], 0);"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 5],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5] } };",
          "    let _ = accels.as_bytes();",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 5 * ACCEL_TY_SIZE);",
          "    assert_eq!(bytes[0], 1 as u8);",
          "    assert_eq!(bytes[1], 0);",
          "    assert_eq!(bytes[2], 0);",
          "    assert_eq!(bytes[3], 0);",
          "    assert_eq!(bytes[4], 2 as u8);",
          "    assert_eq!(bytes[5], 0);",
          "    assert_eq!(bytes[6], 0);",
          "    assert_eq!(bytes[7], 0);",
          "    assert_eq!(bytes[8], 3 as u8);",
          "    assert_eq!(bytes[9], 0);",
          "    assert_eq!(bytes[10], 0);",
          "    assert_eq!(bytes[11], 0);",
          "    assert_eq!(bytes[12], 4 as u8);",
          "    assert_eq!(bytes[13], 0);",
          "    assert_eq!(bytes[14], 0);",
          "    assert_eq!(bytes[15], 0);",
          "    assert_eq!(bytes[16], 5 as u8);",
          "    assert_eq!(bytes[17], 0);",
          "    assert_eq!(bytes[18], 0);",
          "    assert_eq!(bytes[19], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 6],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 6 * ACCEL_TY_SIZE);",
          "    assert_eq!(bytes[0], 1u8);",
          "    assert_eq!(bytes[1], 2u8);",
          "    assert_eq!(bytes[2], 3u8);",
          "    assert_eq!(bytes[3], 4u8);",
          "    assert_eq!(bytes[4], 5u8);",
          "    assert_eq!(bytes[5], 6u8);",
          "    assert!(core::ptr::eq(bytes.as_ptr(), accels.as_ref().as_ptr().cast::<u8>()));"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 6],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6] } };",
          "    let _ = accels.as_bytes();",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), 6 * ACCEL_TY_SIZE);",
          "    assert_eq!(bytes[0], 1u8);",
          "    assert_eq!(bytes[1], 2u8);",
          "    assert_eq!(bytes[2], 3u8);",
          "    assert_eq!(bytes[3], 4u8);",
          "    assert_eq!(bytes[4], 5u8);",
          "    assert_eq!(bytes[5], 6u8);",
          "    assert!(core::ptr::eq(bytes.as_ptr(), accels.as_ref().as_ptr().cast::<u8>()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 7],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6, 7] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6, 7] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), ACCEL_TY_SIZE * 7);",
          "    assert_eq!(bytes[0], 1);",
          "    assert_eq!(bytes[1], 2);",
          "    assert_eq!(bytes[2], 3);",
          "    assert_eq!(bytes[3], 4);",
          "    assert_eq!(bytes[4], 5);",
          "    assert_eq!(bytes[5], 6);",
          "    assert_eq!(bytes[6], 7);",
          "    assert_eq!(bytes[7], 0); // Assuming trailing zero for u8 representation of AccelTy",
          "    assert_eq!(bytes[8], 0);",
          "    assert_eq!(bytes[9], 0);",
          "    assert_eq!(bytes[10], 0);"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 7],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6, 7] } };",
          "    let _ = accels.as_bytes();",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6, 7] } };",
          "    let bytes = accels.as_bytes();",
          "    assert_eq!(bytes.len(), ACCEL_TY_SIZE * 7);",
          "    assert_eq!(bytes[0], 1);",
          "    assert_eq!(bytes[1], 2);",
          "    assert_eq!(bytes[2], 3);",
          "    assert_eq!(bytes[3], 4);",
          "    assert_eq!(bytes[4], 5);",
          "    assert_eq!(bytes[5], 6);",
          "    assert_eq!(bytes[6], 7);",
          "    assert_eq!(bytes[7], 0); // Assuming trailing zero for u8 representation of AccelTy",
          "    assert_eq!(bytes[8], 0);",
          "    assert_eq!(bytes[9], 0);",
          "    assert_eq!(bytes[10], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 8],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6, 7, 8] } };",
          "    let _ = accels.as_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(accels.len(), 8);",
          "    assert_eq!(accels.as_bytes().len(), ACCEL_TY_SIZE * 8);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr() as *const AccelTy) }, 1);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(ACCEL_TY_SIZE) as *const AccelTy) }, 2);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(2 * ACCEL_TY_SIZE) as *const AccelTy) }, 3);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(3 * ACCEL_TY_SIZE) as *const AccelTy) }, 4);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(4 * ACCEL_TY_SIZE) as *const AccelTy) }, 5);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(5 * ACCEL_TY_SIZE) as *const AccelTy) }, 6);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(6 * ACCEL_TY_SIZE) as *const AccelTy) }, 7);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(7 * ACCEL_TY_SIZE) as *const AccelTy) }, 8);"
        ],
        "code": [
          "{",
          "    struct AccelsSlice {",
          "        accels: [AccelTy; 8],",
          "    }",
          "    impl AsRef<[AccelTy]> for AccelsSlice {",
          "        fn as_ref(&self) -> &[AccelTy] {",
          "            &self.accels",
          "        }",
          "    }",
          "    let accels = Accels { accels: AccelsSlice { accels: [1, 2, 3, 4, 5, 6, 7, 8] } };",
          "    let _ = accels.as_bytes();",
          "    assert_eq!(accels.len(), 8);",
          "    assert_eq!(accels.as_bytes().len(), ACCEL_TY_SIZE * 8);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr() as *const AccelTy) }, 1);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(ACCEL_TY_SIZE) as *const AccelTy) }, 2);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(2 * ACCEL_TY_SIZE) as *const AccelTy) }, 3);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(3 * ACCEL_TY_SIZE) as *const AccelTy) }, 4);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(4 * ACCEL_TY_SIZE) as *const AccelTy) }, 5);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(5 * ACCEL_TY_SIZE) as *const AccelTy) }, 6);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(6 * ACCEL_TY_SIZE) as *const AccelTy) }, 7);",
          "    assert_eq!(unsafe { *(accels.as_bytes().as_ptr().add(7 * ACCEL_TY_SIZE) as *const AccelTy) }, 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]