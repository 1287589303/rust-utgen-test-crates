[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![1, 2, 3, 4],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 2,",
          "    };",
          "    transition_table.truncate(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.table.len(), 0);",
          "    assert!(transition_table.table.is_empty());"
        ],
        "code": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![1, 2, 3, 4],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 2,",
          "    };",
          "    transition_table.truncate(0);",
          "    assert_eq!(transition_table.table.len(), 0);",
          "    assert!(transition_table.table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![1, 2, 3, 4, 5, 6],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "    transition_table.truncate(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.table.len(), 4);",
          "    assert_eq!(transition_table.table, vec![1, 2, 3, 4]);",
          "    assert!(transition_table.table.iter().all(|&x| x != 5));",
          "    assert!(transition_table.table.iter().all(|&x| x != 6));"
        ],
        "code": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![1, 2, 3, 4, 5, 6],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 1,",
          "    };",
          "    transition_table.truncate(1);",
          "    assert_eq!(transition_table.table.len(), 4);",
          "    assert_eq!(transition_table.table, vec![1, 2, 3, 4]);",
          "    assert!(transition_table.table.iter().all(|&x| x != 5));",
          "    assert!(transition_table.table.iter().all(|&x| x != 6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 9,",
          "    };",
          "    transition_table.truncate(512);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.table.len(), 2048);",
          "    assert!(transition_table.table.iter().all(|&x| x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10));",
          "    assert_eq!(transition_table.stride2, 9);",
          "    assert!(transition_table.table.len() % (1 << transition_table.stride2) == 0);",
          "    assert!(transition_table.table.len() >= 0);"
        ],
        "code": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 9,",
          "    };",
          "    transition_table.truncate(512);",
          "    assert_eq!(transition_table.table.len(), 2048);",
          "    assert!(transition_table.table.iter().all(|&x| x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10));",
          "    assert_eq!(transition_table.stride2, 9);",
          "    assert!(transition_table.table.len() % (1 << transition_table.stride2) == 0);",
          "    assert!(transition_table.table.len() >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![1, 2, 3, 4, 5],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 4,",
          "    };",
          "    transition_table.truncate(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.table.len(), 16);",
          "    assert_eq!(transition_table.table, vec![1, 2, 3, 4, 5]);",
          "    assert!(transition_table.table.iter().all(|&x| x <= 5));"
        ],
        "code": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![1, 2, 3, 4, 5],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 4,",
          "    };",
          "    transition_table.truncate(8);",
          "    assert_eq!(transition_table.table.len(), 16);",
          "    assert_eq!(transition_table.table, vec![1, 2, 3, 4, 5]);",
          "    assert!(transition_table.table.iter().all(|&x| x <= 5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![0; 1024],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 5,",
          "    };",
          "    transition_table.truncate(32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.table.len(), 1024);",
          "    assert_eq!(transition_table.table.len(), 32 << 5);",
          "    assert_eq!(transition_table.table.len(), 1024);",
          "    transition_table.truncate(32);",
          "    assert_eq!(transition_table.table.len(), 32 << 5);",
          "    assert!(transition_table.table.len() <= 1024);"
        ],
        "code": [
          "{",
          "    let mut transition_table = TransitionTable {",
          "        table: vec![0; 1024],",
          "        classes: ByteClasses([0; 256]),",
          "        stride2: 5,",
          "    };",
          "    transition_table.truncate(32);",
          "    assert_eq!(transition_table.table.len(), 1024);",
          "    assert_eq!(transition_table.table.len(), 32 << 5);",
          "    assert_eq!(transition_table.table.len(), 1024);",
          "    transition_table.truncate(32);",
          "    assert_eq!(transition_table.table.len(), 32 << 5);",
          "    assert!(transition_table.table.len() <= 1024);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]