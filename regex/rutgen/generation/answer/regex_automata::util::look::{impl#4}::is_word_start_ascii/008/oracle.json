[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"abc\"; // haystack has at least one character",
          "    let at = 0; // at == 0, should validate that word_before is false",
          "    matcher.is_word_start_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), true); // at == 0, word_after should be true for a word byte  'a'",
          "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is false",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false); // no character at index equal to haystack.len() to check",
          "    let at = 1; // at > 0, haystack[at - 1] is 'a'",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false); // word_before is true, word_after should be false for 'b' which is preceded by 'a'"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"abc\"; // haystack has at least one character",
          "    let at = 0; // at == 0, should validate that word_before is false",
          "    matcher.is_word_start_ascii(haystack, at);",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), true); // at == 0, word_after should be true for a word byte  'a'",
          "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is false",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false); // no character at index equal to haystack.len() to check",
          "    let at = 1; // at > 0, haystack[at - 1] is 'a'",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false); // word_before is true, word_after should be false for 'b' which is preceded by 'a'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"abc\"; // haystack has at least one character",
          "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is out of bounds",
          "    matcher.is_word_start_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 0; // at == 0, should validate that word_before is false",
          "    assert!(!matcher.is_word_start_ascii(haystack, at));",
          "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is out of bounds",
          "    assert!(matcher.is_word_start_ascii(haystack, at));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"abc\"; // haystack has at least one character",
          "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is out of bounds",
          "    matcher.is_word_start_ascii(haystack, at);",
          "    plaintext",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"abc\";",
          "    let at = 0; // at == 0, should validate that word_before is false",
          "    assert!(!matcher.is_word_start_ascii(haystack, at));",
          "    let at = haystack.len(); // at == haystack.len(), should validate that word_after is out of bounds",
          "    assert!(matcher.is_word_start_ascii(haystack, at));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]