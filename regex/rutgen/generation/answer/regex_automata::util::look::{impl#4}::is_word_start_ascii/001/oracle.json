[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"hello_world_this\";",
          "    let at = 5; // at > 0 and at < haystack.len()",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_start_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let haystack = b\"hello_world_this\";",
          "    let at = 5;",
          "    let matcher = LookMatcher::new();",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let haystack = b\"hello_world_this\";",
          "    let at = 5; // at > 0 and at < haystack.len()",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_start_ascii(haystack, at);",
          "    let haystack = b\"hello_world_this\";",
          "    let at = 5;",
          "    let matcher = LookMatcher::new();",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"1two_three\";",
          "    let at = 3; // at > 0 and at < haystack.len()",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_start_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let haystack = b\"1two_three\";",
          "    let at = 3;",
          "    let matcher = LookMatcher::new();",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let haystack = b\"1two_three\";",
          "    let at = 3; // at > 0 and at < haystack.len()",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_start_ascii(haystack, at);",
          "    let haystack = b\"1two_three\";",
          "    let at = 3;",
          "    let matcher = LookMatcher::new();",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"abc_def\";",
          "    let at = 3; // at > 0 and at < haystack.len()",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_start_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);  // word_before is true, word_after is true",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);          // confirms word_before is true",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), true);              // confirms word_after is true"
        ],
        "code": [
          "{",
          "    let haystack = b\"abc_def\";",
          "    let at = 3; // at > 0 and at < haystack.len()",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_start_ascii(haystack, at);",
          "    assert_eq!(matcher.is_word_start_ascii(haystack, at), false);  // word_before is true, word_after is true",
          "    assert_eq!(utf8::is_word_byte(haystack[at - 1]), true);          // confirms word_before is true",
          "    assert_eq!(utf8::is_word_byte(haystack[at]), true);              // confirms word_after is true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]