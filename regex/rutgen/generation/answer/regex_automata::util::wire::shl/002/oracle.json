[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 1;",
          "    let b: usize = 0;",
          "    let what: &'static str = \"test_case_0\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(1);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let a: usize = 1;",
          "    let b: usize = 0;",
          "    let what: &'static str = \"test_case_0\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(1);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let a: usize = 1;",
          "    let b: usize = 0;",
          "    let what: &'static str = \"test_case_0\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(1);",
          "    assert_eq!(result, expected);",
          "    let a: usize = 1;",
          "    let b: usize = 0;",
          "    let what: &'static str = \"test_case_0\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(1);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 2;",
          "    let b: usize = 1;",
          "    let what: &'static str = \"test_case_1\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(4);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(shl(2, 1, \"test_case_1\"), Ok(4));",
          "    assert_eq!(shl(4, 2, \"test_case_2\"), Ok(16));",
          "    assert_eq!(shl(1, 0, \"test_case_3\"), Ok(1));",
          "    assert_eq!(shl(8, 1, \"test_case_4\"), Ok(16));",
          "    assert_eq!(shl(16, 3, \"test_case_5\"), Ok(128));",
          "    assert_eq!(shl(0, 5, \"test_case_6\"), Ok(0));",
          "    assert_eq!(shl(3, 2, \"test_case_7\"), Ok(12));",
          "    assert_eq!(shl(7, 1, \"test_case_8\"), Ok(14));",
          "    assert_eq!(shl(15, 1, \"test_case_9\"), Ok(30));",
          "    assert_eq!(shl(31, 0, \"test_case_10\"), Ok(31));"
        ],
        "code": [
          "{",
          "    let a: usize = 2;",
          "    let b: usize = 1;",
          "    let what: &'static str = \"test_case_1\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(4);",
          "    assert_eq!(result, expected);",
          "    assert_eq!(shl(2, 1, \"test_case_1\"), Ok(4));",
          "    assert_eq!(shl(4, 2, \"test_case_2\"), Ok(16));",
          "    assert_eq!(shl(1, 0, \"test_case_3\"), Ok(1));",
          "    assert_eq!(shl(8, 1, \"test_case_4\"), Ok(16));",
          "    assert_eq!(shl(16, 3, \"test_case_5\"), Ok(128));",
          "    assert_eq!(shl(0, 5, \"test_case_6\"), Ok(0));",
          "    assert_eq!(shl(3, 2, \"test_case_7\"), Ok(12));",
          "    assert_eq!(shl(7, 1, \"test_case_8\"), Ok(14));",
          "    assert_eq!(shl(15, 1, \"test_case_9\"), Ok(30));",
          "    assert_eq!(shl(31, 0, \"test_case_10\"), Ok(31));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 3;",
          "    let b: usize = 2;",
          "    let what: &'static str = \"test_case_2\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(12);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(shl(3, 2, \"test_case_2\"), Ok(12));"
        ],
        "code": [
          "{",
          "    let a: usize = 3;",
          "    let b: usize = 2;",
          "    let what: &'static str = \"test_case_2\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(12);",
          "    assert_eq!(result, expected);",
          "    assert_eq!(shl(3, 2, \"test_case_2\"), Ok(12));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = usize::MAX >> 1; // Ensures enough room for shifting",
          "    let b: usize = 1;",
          "    let what: &'static str = \"test_case_3\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(usize::MAX);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(shl(usize::MAX >> 1, 1, \"test_case_3\"), Ok(usize::MAX));"
        ],
        "code": [
          "{",
          "    let a: usize = usize::MAX >> 1; // Ensures enough room for shifting",
          "    let b: usize = 1;",
          "    let what: &'static str = \"test_case_3\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(usize::MAX);",
          "    assert_eq!(result, expected);",
          "    assert_eq!(shl(usize::MAX >> 1, 1, \"test_case_3\"), Ok(usize::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 15;",
          "    let b: usize = 3;",
          "    let what: &'static str = \"test_case_4\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(120);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(shl(15, 3, \"test_case_4\"), Ok(120));"
        ],
        "code": [
          "{",
          "    let a: usize = 15;",
          "    let b: usize = 3;",
          "    let what: &'static str = \"test_case_4\";",
          "    let result = shl(a, b, what);",
          "    let expected = Ok(120);",
          "    assert_eq!(result, expected);",
          "    assert_eq!(shl(15, 3, \"test_case_4\"), Ok(120));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]