[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 1; // a is small enough",
          "    let b: usize = 32; // b is at the threshold of causing overflow",
          "    let what: &'static str = \"test\";",
          "    let result = shl(a, b, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(\"test\")));"
        ],
        "code": [
          "{",
          "    let a: usize = 1; // a is small enough",
          "    let b: usize = 32; // b is at the threshold of causing overflow",
          "    let what: &'static str = \"test\";",
          "    let result = shl(a, b, what);",
          "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(\"test\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = usize::MAX >> 1; // a is at its maximum without overflow",
          "    let b: usize = 32; // b is at the threshold of causing overflow",
          "    let what: &'static str = \"test\";",
          "    let result = shl(a, b, what);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(what)));"
        ],
        "code": [
          "{",
          "    let a: usize = usize::MAX >> 1; // a is at its maximum without overflow",
          "    let b: usize = 32; // b is at the threshold of causing overflow",
          "    let what: &'static str = \"test\";",
          "    let result = shl(a, b, what);",
          "    assert_eq!(result, Err(DeserializeError::arithmetic_overflow(what)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = usize::MAX >> 1; // a is at its maximum",
          "    let b: usize = 64; // b definitely causes overflow",
          "    let what: &'static str = \"test\";",
          "    let result = shl(a, b, what);",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err().is_arithmetic_overflow();",
          "    result.unwrap_err().contains(\"test\");",
          "    result.unwrap_err().kind() == DeserializeErrorKind::ArithmeticOverflow { what: \"test\" };",
          "    result.is_err();",
          "    result.err().unwrap() == DeserializeError::arithmetic_overflow(\"test\");"
        ],
        "code": [
          "{",
          "    let a: usize = usize::MAX >> 1; // a is at its maximum",
          "    let b: usize = 64; // b definitely causes overflow",
          "    let what: &'static str = \"test\";",
          "    let result = shl(a, b, what);",
          "    result.unwrap_err().is_arithmetic_overflow();",
          "    result.unwrap_err().contains(\"test\");",
          "    result.unwrap_err().kind() == DeserializeErrorKind::ArithmeticOverflow { what: \"test\" };",
          "    result.is_err();",
          "    result.err().unwrap() == DeserializeError::arithmetic_overflow(\"test\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]