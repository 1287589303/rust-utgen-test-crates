[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestSearch;",
          "",
          "    impl TestSearch {",
          "        fn new() -> Self {",
          "            TestSearch",
          "        }",
          "    }",
          "",
          "    let haystack: &[u8] = b\"hello, world\"; // valid UTF-8",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(0, 5)), // Non-character boundary (after 'o')",
          "        id: Some(0),",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(false);",
          "",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "",
          "    // The result is not asserted; focus is on input and function call.",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = b\"hello, world\";",
          "    let mut state = OverlappingState {",
          "    mat: Some(HalfMatch::new(0, 5)),",
          "    id: Some(0),",
          "    at: 0,",
          "    next_match_index: Some(0),",
          "    rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "    .anchored(Anchored::Yes)",
          "    .earliest(false);",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestSearch;",
          "",
          "    impl TestSearch {",
          "        fn new() -> Self {",
          "            TestSearch",
          "        }",
          "    }",
          "",
          "    let haystack: &[u8] = b\"hello, world\"; // valid UTF-8",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(0, 5)), // Non-character boundary (after 'o')",
          "        id: Some(0),",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(false);",
          "",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "",
          "    // The result is not asserted; focus is on input and function call.",
          "    let haystack: &[u8] = b\"hello, world\";",
          "    let mut state = OverlappingState {",
          "    mat: Some(HalfMatch::new(0, 5)),",
          "    id: Some(0),",
          "    at: 0,",
          "    next_match_index: Some(0),",
          "    rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "    .anchored(Anchored::Yes)",
          "    .earliest(false);",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]