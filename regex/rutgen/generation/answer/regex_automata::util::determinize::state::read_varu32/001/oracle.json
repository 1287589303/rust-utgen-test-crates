[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = [0b0000_0001];",
          "    let result = read_varu32(&data);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (1, 1));"
        ],
        "code": [
          "{",
          "    let data = [0b0000_0001];",
          "    let result = read_varu32(&data);",
          "    assert_eq!(result, (1, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = [0b0000_0011];",
          "    let result = read_varu32(&data);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (3, 1));"
        ],
        "code": [
          "{",
          "    let data = [0b0000_0011];",
          "    let result = read_varu32(&data);",
          "    assert_eq!(result, (3, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = [0b0111_1111];",
          "    let result = read_varu32(&data);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (127, 1));"
        ],
        "code": [
          "{",
          "    let data = [0b0111_1111];",
          "    let result = read_varu32(&data);",
          "    assert_eq!(result, (127, 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = [0b1000_0000, 0b0000_0001];",
          "    let result = read_varu32(&data);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (1, 2));"
        ],
        "code": [
          "{",
          "    let data = [0b1000_0000, 0b0000_0001];",
          "    let result = read_varu32(&data);",
          "    assert_eq!(result, (1, 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = [0b1111_1111, 0b0000_0001];",
          "    let result = read_varu32(&data);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (1, 2));"
        ],
        "code": [
          "{",
          "    let data = [0b1111_1111, 0b0000_0001];",
          "    let result = read_varu32(&data);",
          "    assert_eq!(result, (1, 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = [0b1000_0000, 0b0111_1111];",
          "    let result = read_varu32(&data);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (127, 2));"
        ],
        "code": [
          "{",
          "    let data = [0b1000_0000, 0b0111_1111];",
          "    let result = read_varu32(&data);",
          "    assert_eq!(result, (127, 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]