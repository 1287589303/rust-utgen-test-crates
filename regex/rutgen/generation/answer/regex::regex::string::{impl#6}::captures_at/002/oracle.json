[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"\";",
          "    let start = haystack.len();",
          "    re.captures_at(haystack, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures_at(haystack, start), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"\";",
          "    let start = haystack.len();",
          "    re.captures_at(haystack, start);",
          "    assert_eq!(re.captures_at(haystack, start), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let start = haystack.len(); // This is `7`, which is equal to haystack.len()",
          "    re.captures_at(haystack, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures_at(haystack, start), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let start = haystack.len(); // This is `7`, which is equal to haystack.len()",
          "    re.captures_at(haystack, start);",
          "    assert_eq!(re.captures_at(haystack, start), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let start = haystack.len() + 1; // This is `8`, which is greater than haystack.len()",
          "    re.captures_at(haystack, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures_at(haystack, start), None);",
          "    assert!(std::panic::catch_unwind(|| re.captures_at(haystack, haystack.len() + 1)).is_err());",
          "    assert_eq!(re.captures_at(haystack, haystack.len()), None);",
          "    assert_eq!(re.captures_at(\"\", 0), None);",
          "    assert_eq!(re.captures_at(\"chew\", 1), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let start = haystack.len() + 1; // This is `8`, which is greater than haystack.len()",
          "    re.captures_at(haystack, start);",
          "    assert_eq!(re.captures_at(haystack, start), None);",
          "    assert!(std::panic::catch_unwind(|| re.captures_at(haystack, haystack.len() + 1)).is_err());",
          "    assert_eq!(re.captures_at(haystack, haystack.len()), None);",
          "    assert_eq!(re.captures_at(\"\", 0), None);",
          "    assert_eq!(re.captures_at(\"chew\", 1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]