[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexBuilder::new(r\"^foo$\");",
          "    let result = builder.multi_line(true).crlf(true);",
          "    let _ = result.build().unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut builder = RegexBuilder::new(r\"^foo$\");",
          "    let result = builder.multi_line(true).crlf(true);",
          "    assert_eq!(result, &builder);"
        ],
        "code": [
          "{",
          "    let mut builder = RegexBuilder::new(r\"^foo$\");",
          "    let result = builder.multi_line(true).crlf(true);",
          "    let _ = result.build().unwrap();",
          "    let mut builder = RegexBuilder::new(r\"^foo$\");",
          "    let result = builder.multi_line(true).crlf(true);",
          "    assert_eq!(result, &builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = RegexBuilder::new(r\"^foo$\");",
          "    let result = builder.multi_line(true).crlf(false);",
          "    let _ = result.build().unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut builder = RegexBuilder::new(r\"^foo$\");",
          "    assert_eq!(builder.multi_line(true).crlf(false), &builder);",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "    let regex = result.unwrap();",
          "    assert_eq!(regex.as_str(), r\"^foo$\");"
        ],
        "code": [
          "{",
          "    let mut builder = RegexBuilder::new(r\"^foo$\");",
          "    let result = builder.multi_line(true).crlf(false);",
          "    let _ = result.build().unwrap();",
          "    let mut builder = RegexBuilder::new(r\"^foo$\");",
          "    assert_eq!(builder.multi_line(true).crlf(false), &builder);",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "    let regex = result.unwrap();",
          "    assert_eq!(regex.as_str(), r\"^foo$\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]