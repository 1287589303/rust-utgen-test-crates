[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[42, 1, 2, 3];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(42, &[42, 1, 2, 3]), Some(0));",
          "    assert_eq!(memchr(1, &[42, 1, 2, 3]), Some(1));",
          "    assert_eq!(memchr(2, &[42, 1, 2, 3]), Some(2));",
          "    assert_eq!(memchr(3, &[42, 1, 2, 3]), Some(3));",
          "    assert_eq!(memchr(100, &[42, 1, 2, 3]), None);",
          "    assert_eq!(memchr(42, &[]), None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[42, 1, 2, 3];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "    assert_eq!(memchr(42, &[42, 1, 2, 3]), Some(0));",
          "    assert_eq!(memchr(1, &[42, 1, 2, 3]), Some(1));",
          "    assert_eq!(memchr(2, &[42, 1, 2, 3]), Some(2));",
          "    assert_eq!(memchr(3, &[42, 1, 2, 3]), Some(3));",
          "    assert_eq!(memchr(100, &[42, 1, 2, 3]), None);",
          "    assert_eq!(memchr(42, &[]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 42, 3];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(42, &[1, 2, 42, 3]), Some(2));",
          "    assert_eq!(memchr(1, &[1, 2, 42, 3]), Some(0));",
          "    assert_eq!(memchr(3, &[1, 2, 42, 3]), Some(3));",
          "    assert_eq!(memchr(99, &[1, 2, 42, 3]), None);",
          "    assert_eq!(memchr(0, &[]), None);",
          "    assert_eq!(memchr(42, &[42]), Some(0));",
          "    assert_eq!(memchr(0, &[1, 2, 3]), None);",
          "    assert_eq!(memchr(42, &[1, 42, 3]), Some(1));",
          "    assert_eq!(memchr(1, &[1]), Some(0));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 42, 3];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "    assert_eq!(memchr(42, &[1, 2, 42, 3]), Some(2));",
          "    assert_eq!(memchr(1, &[1, 2, 42, 3]), Some(0));",
          "    assert_eq!(memchr(3, &[1, 2, 42, 3]), Some(3));",
          "    assert_eq!(memchr(99, &[1, 2, 42, 3]), None);",
          "    assert_eq!(memchr(0, &[]), None);",
          "    assert_eq!(memchr(42, &[42]), Some(0));",
          "    assert_eq!(memchr(0, &[1, 2, 3]), None);",
          "    assert_eq!(memchr(42, &[1, 42, 3]), Some(1));",
          "    assert_eq!(memchr(1, &[1]), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 3, 42];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(42, &[1, 2, 3, 42]), Some(3));",
          "    assert_eq!(memchr(1, &[1, 2, 3, 42]), Some(0));",
          "    assert_eq!(memchr(2, &[1, 2, 3, 42]), Some(1));",
          "    assert_eq!(memchr(3, &[1, 2, 3, 42]), Some(2));",
          "    assert_eq!(memchr(4, &[1, 2, 3, 42]), None);",
          "    assert_eq!(memchr(42, &[]), None);",
          "    assert_eq!(memchr(0, &[0, 1, 2, 3]), Some(0));",
          "    assert_eq!(memchr(255, &[255, 256, 257]), Some(0));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 3, 42];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "    assert_eq!(memchr(42, &[1, 2, 3, 42]), Some(3));",
          "    assert_eq!(memchr(1, &[1, 2, 3, 42]), Some(0));",
          "    assert_eq!(memchr(2, &[1, 2, 3, 42]), Some(1));",
          "    assert_eq!(memchr(3, &[1, 2, 3, 42]), Some(2));",
          "    assert_eq!(memchr(4, &[1, 2, 3, 42]), None);",
          "    assert_eq!(memchr(42, &[]), None);",
          "    assert_eq!(memchr(0, &[0, 1, 2, 3]), Some(0));",
          "    assert_eq!(memchr(255, &[255, 256, 257]), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 3];",
          "    let n1: u8 = 4;",
          "    let _ = memchr(n1, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(4, &[1, 2, 3]), None);",
          "    assert_eq!(memchr(1, &[1, 2, 3]), Some(0));",
          "    assert_eq!(memchr(2, &[1, 2, 3]), Some(1));",
          "    assert_eq!(memchr(3, &[1, 2, 3]), Some(2));",
          "    assert_eq!(memchr(255, &[1, 2, 3]), None);",
          "    assert_eq!(memchr(1, &[]), None);",
          "    assert_eq!(memchr(0, &[0, 1, 2]), Some(0));",
          "    assert_eq!(memchr(1, &[0, 1, 2]), Some(1));",
          "    assert_eq!(memchr(2, &[0, 1, 2]), Some(2));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 3];",
          "    let n1: u8 = 4;",
          "    let _ = memchr(n1, haystack);",
          "    assert_eq!(memchr(4, &[1, 2, 3]), None);",
          "    assert_eq!(memchr(1, &[1, 2, 3]), Some(0));",
          "    assert_eq!(memchr(2, &[1, 2, 3]), Some(1));",
          "    assert_eq!(memchr(3, &[1, 2, 3]), Some(2));",
          "    assert_eq!(memchr(255, &[1, 2, 3]), None);",
          "    assert_eq!(memchr(1, &[]), None);",
          "    assert_eq!(memchr(0, &[0, 1, 2]), Some(0));",
          "    assert_eq!(memchr(1, &[0, 1, 2]), Some(1));",
          "    assert_eq!(memchr(2, &[0, 1, 2]), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[42];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(42, &[42]), Some(0));",
          "    assert_eq!(memchr(43, &[42]), None);",
          "    assert_eq!(memchr(42, &[42, 43]), Some(0));",
          "    assert_eq!(memchr(43, &[43, 42]), Some(1));",
          "    assert_eq!(memchr(42, &[]), None);",
          "    assert_eq!(memchr(0, &[0, 1, 2]), Some(0));",
          "    assert_eq!(memchr(1, &[0, 1, 2]), Some(1));",
          "    assert_eq!(memchr(2, &[0, 1, 2]), Some(2));",
          "    assert_eq!(memchr(3, &[0, 1, 2]), None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[42];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "    assert_eq!(memchr(42, &[42]), Some(0));",
          "    assert_eq!(memchr(43, &[42]), None);",
          "    assert_eq!(memchr(42, &[42, 43]), Some(0));",
          "    assert_eq!(memchr(43, &[43, 42]), Some(1));",
          "    assert_eq!(memchr(42, &[]), None);",
          "    assert_eq!(memchr(0, &[0, 1, 2]), Some(0));",
          "    assert_eq!(memchr(1, &[0, 1, 2]), Some(1));",
          "    assert_eq!(memchr(2, &[0, 1, 2]), Some(2));",
          "    assert_eq!(memchr(3, &[0, 1, 2]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[100];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(42, &[100]), None);",
          "    assert_eq!(memchr(100, &[100]), Some(0));",
          "    assert_eq!(memchr(101, &[100, 101, 102]), Some(1));",
          "    assert_eq!(memchr(102, &[100, 101, 102]), Some(2));",
          "    assert_eq!(memchr(100, &[]), None);",
          "    assert_eq!(memchr(255, &[0, 1, 2]), None);",
          "    assert_eq!(memchr(0, &[0, 1, 2]), Some(0));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[100];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "    assert_eq!(memchr(42, &[100]), None);",
          "    assert_eq!(memchr(100, &[100]), Some(0));",
          "    assert_eq!(memchr(101, &[100, 101, 102]), Some(1));",
          "    assert_eq!(memchr(102, &[100, 101, 102]), Some(2));",
          "    assert_eq!(memchr(100, &[]), None);",
          "    assert_eq!(memchr(255, &[0, 1, 2]), None);",
          "    assert_eq!(memchr(0, &[0, 1, 2]), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[0; 1024];",
          "    let n1: u8 = 100;",
          "    let mut extended_haystack = haystack.to_vec();",
          "    extended_haystack[500] = n1;",
          "    let _ = memchr(n1, &extended_haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(100, &[0; 1024]), None);",
          "    assert_eq!(memchr(100, &[0; 500]), None);",
          "    assert_eq!(memchr(100, &[100; 1024]), Some(0));",
          "    assert_eq!(memchr(100, &[0, 0, 0, 100]), Some(3));",
          "    assert_eq!(memchr(100, &[0, 0, 100, 0]), Some(2));",
          "    assert_eq!(memchr(100, &[0, 100, 0]), Some(1));",
          "    assert_eq!(memchr(100, &[0, 0, 0, 0]), None);",
          "    assert_eq!(memchr(100, &extended_haystack), Some(500));",
          "    assert_eq!(memchr(0, &[0, 1, 2]), Some(0));",
          "    assert_eq!(memchr(1, &[0, 1, 2]), Some(1));",
          "    assert_eq!(memchr(2, &[0, 1, 2]), Some(2));",
          "    assert_eq!(memchr(3, &[0, 1, 2]), None);",
          "    assert_eq!(memchr(255, &[255, 0, 0]), Some(0));",
          "    assert_eq!(memchr(0, &[255, 255, 255]), None);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[0; 1024];",
          "    let n1: u8 = 100;",
          "    let mut extended_haystack = haystack.to_vec();",
          "    extended_haystack[500] = n1;",
          "    let _ = memchr(n1, &extended_haystack);",
          "    assert_eq!(memchr(100, &[0; 1024]), None);",
          "    assert_eq!(memchr(100, &[0; 500]), None);",
          "    assert_eq!(memchr(100, &[100; 1024]), Some(0));",
          "    assert_eq!(memchr(100, &[0, 0, 0, 100]), Some(3));",
          "    assert_eq!(memchr(100, &[0, 0, 100, 0]), Some(2));",
          "    assert_eq!(memchr(100, &[0, 100, 0]), Some(1));",
          "    assert_eq!(memchr(100, &[0, 0, 0, 0]), None);",
          "    assert_eq!(memchr(100, &extended_haystack), Some(500));",
          "    assert_eq!(memchr(0, &[0, 1, 2]), Some(0));",
          "    assert_eq!(memchr(1, &[0, 1, 2]), Some(1));",
          "    assert_eq!(memchr(2, &[0, 1, 2]), Some(2));",
          "    assert_eq!(memchr(3, &[0, 1, 2]), None);",
          "    assert_eq!(memchr(255, &[255, 0, 0]), Some(0));",
          "    assert_eq!(memchr(0, &[255, 255, 255]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[0; 1024];",
          "    let n1: u8 = 100;",
          "    let _ = memchr(n1, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(100, &[0; 1024]), None);",
          "    assert_eq!(memchr(0, &[0; 1024]), Some(0));",
          "    assert_eq!(memchr(50, &[0; 1024]), None);",
          "    assert_eq!(memchr(255, &[0; 1024]), None);",
          "    assert_eq!(memchr(10, &[10; 1024]), Some(0));",
          "    assert_eq!(memchr(1, &[1, 2, 3, 4, 1]), Some(0));",
          "    assert_eq!(memchr(4, &[1, 2, 3, 4, 5]), Some(3));",
          "    assert_eq!(memchr(5, &[1, 2, 3, 4, 5]), Some(4));",
          "    assert_eq!(memchr(200, &[100, 150, 200, 250]), Some(2));",
          "    assert_eq!(memchr(150, &[100, 150, 200, 250]), Some(1));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[0; 1024];",
          "    let n1: u8 = 100;",
          "    let _ = memchr(n1, haystack);",
          "    assert_eq!(memchr(100, &[0; 1024]), None);",
          "    assert_eq!(memchr(0, &[0; 1024]), Some(0));",
          "    assert_eq!(memchr(50, &[0; 1024]), None);",
          "    assert_eq!(memchr(255, &[0; 1024]), None);",
          "    assert_eq!(memchr(10, &[10; 1024]), Some(0));",
          "    assert_eq!(memchr(1, &[1, 2, 3, 4, 1]), Some(0));",
          "    assert_eq!(memchr(4, &[1, 2, 3, 4, 5]), Some(3));",
          "    assert_eq!(memchr(5, &[1, 2, 3, 4, 5]), Some(4));",
          "    assert_eq!(memchr(200, &[100, 150, 200, 250]), Some(2));",
          "    assert_eq!(memchr(150, &[100, 150, 200, 250]), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 42, 3, 42];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(memchr(42, &[1, 2, 42, 3, 42]), Some(2));",
          "    assert_eq!(memchr(1, &[1, 2, 42, 3, 42]), Some(0));",
          "    assert_eq!(memchr(3, &[1, 2, 42, 3, 42]), Some(3));",
          "    assert_eq!(memchr(99, &[1, 2, 42, 3, 42]), None);",
          "    assert_eq!(memchr(42, &[]), None);",
          "    assert_eq!(memchr(255, &[255, 255, 255]), Some(0));",
          "    assert_eq!(memchr(0, &[0, 1, 2, 3]), Some(0));",
          "    assert_eq!(memchr(2, &[1, 2, 3]), Some(1));",
          "    assert_eq!(memchr(42, &[1, 2, 3, 42, 42]), Some(3));",
          "    assert_eq!(memchr(42, &[42, 1, 2, 3]), Some(0));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 42, 3, 42];",
          "    let n1: u8 = 42;",
          "    let _ = memchr(n1, haystack);",
          "    assert_eq!(memchr(42, &[1, 2, 42, 3, 42]), Some(2));",
          "    assert_eq!(memchr(1, &[1, 2, 42, 3, 42]), Some(0));",
          "    assert_eq!(memchr(3, &[1, 2, 42, 3, 42]), Some(3));",
          "    assert_eq!(memchr(99, &[1, 2, 42, 3, 42]), None);",
          "    assert_eq!(memchr(42, &[]), None);",
          "    assert_eq!(memchr(255, &[255, 255, 255]), Some(0));",
          "    assert_eq!(memchr(0, &[0, 1, 2, 3]), Some(0));",
          "    assert_eq!(memchr(2, &[1, 2, 3]), Some(1));",
          "    assert_eq!(memchr(42, &[1, 2, 3, 42, 42]), Some(3));",
          "    assert_eq!(memchr(42, &[42, 1, 2, 3]), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]