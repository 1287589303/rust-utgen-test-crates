[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    let config2 = Config { which_captures: Some(WhichCaptures::Implicit), ..Config::new() };",
          "    assert_eq!(config2.get_which_captures(), WhichCaptures::Implicit);",
          "    let config3 = Config { which_captures: Some(WhichCaptures::None), ..Config::new() };",
          "    assert_eq!(config3.get_which_captures(), WhichCaptures::None);",
          "    let config4 = Config { which_captures: None, ..Config::new() };",
          "    assert_eq!(config4.get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    let config2 = Config { which_captures: Some(WhichCaptures::Implicit), ..Config::new() };",
          "    assert_eq!(config2.get_which_captures(), WhichCaptures::Implicit);",
          "    let config3 = Config { which_captures: Some(WhichCaptures::None), ..Config::new() };",
          "    assert_eq!(config3.get_which_captures(), WhichCaptures::None);",
          "    let config4 = Config { which_captures: None, ..Config::new() };",
          "    assert_eq!(config4.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().utf8(true).which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::new().utf8(true).which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().reverse(true).which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::new().reverse(true).which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::Implicit).get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nfa_size_limit(Some(1)).which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nfa_size_limit(Some(1)).which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().shrink(true).which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::new().shrink(true).which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::All).get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(Config::new().which_captures(WhichCaptures::None).get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(Config::new().get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().unanchored_prefix(true).which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);"
        ],
        "code": [
          "{",
          "    let config = Config::new().unanchored_prefix(true).which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]