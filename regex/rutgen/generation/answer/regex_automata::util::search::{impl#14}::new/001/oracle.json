[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 0;",
          "    let pattern_set = PatternSet::new(capacity);",
          "}"
        ],
        "oracle": [
          "    let capacity = 0;",
          "    let pattern_set = PatternSet::new(capacity);",
          "    assert_eq!(pattern_set.len, 0);",
          "    assert_eq!(pattern_set.capacity(), capacity);",
          "    assert_eq!(pattern_set.which, alloc::vec![false; capacity].into_boxed_slice());"
        ],
        "code": [
          "{",
          "    let capacity = 0;",
          "    let pattern_set = PatternSet::new(capacity);",
          "    let capacity = 0;",
          "    let pattern_set = PatternSet::new(capacity);",
          "    assert_eq!(pattern_set.len, 0);",
          "    assert_eq!(pattern_set.capacity(), capacity);",
          "    assert_eq!(pattern_set.which, alloc::vec![false; capacity].into_boxed_slice());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = PatternID::LIMIT;",
          "    let pattern_set = PatternSet::new(capacity);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pattern_set.len, 0);",
          "    assert_eq!(pattern_set.capacity(), PatternID::LIMIT);",
          "    assert_eq!(pattern_set.which, alloc::vec![false; PatternID::LIMIT].into_boxed_slice());"
        ],
        "code": [
          "{",
          "    let capacity = PatternID::LIMIT;",
          "    let pattern_set = PatternSet::new(capacity);",
          "    assert_eq!(pattern_set.len, 0);",
          "    assert_eq!(pattern_set.capacity(), PatternID::LIMIT);",
          "    assert_eq!(pattern_set.which, alloc::vec![false; PatternID::LIMIT].into_boxed_slice());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let capacity = PatternID::LIMIT + 1;",
          "    let pattern_set = PatternSet::new(capacity);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(PatternSet::new(PatternID::LIMIT).len, 0);",
          "    assert_eq!(PatternSet::new(PatternID::LIMIT).which.len(), PatternID::LIMIT);",
          "    assert!(PatternSet::new(PatternID::LIMIT).which.iter().all(|&x| !x);)"
        ],
        "code": [
          "{",
          "    let capacity = PatternID::LIMIT + 1;",
          "    let pattern_set = PatternSet::new(capacity);",
          "    assert_eq!(PatternSet::new(PatternID::LIMIT).len, 0);",
          "    assert_eq!(PatternSet::new(PatternID::LIMIT).which.len(), PatternID::LIMIT);",
          "    assert!(PatternSet::new(PatternID::LIMIT).which.iter().all(|&x| !x);)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]