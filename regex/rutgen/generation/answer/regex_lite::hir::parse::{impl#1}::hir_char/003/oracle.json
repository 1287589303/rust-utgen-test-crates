[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('a');",
          "}"
        ],
        "oracle": [
          "    .assert_eq(_result.kind(), HirKind::Char('a'))",
          "    .assert!(!_result.is_start_anchored())",
          "    .assert!(!_result.is_match_empty())",
          "    .assert_eq(_result.static_explicit_captures_len(), Some(0))"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('a');",
          "    .assert_eq(_result.kind(), HirKind::Char('a'))",
          "    .assert!(!_result.is_start_anchored())",
          "    .assert!(!_result.is_match_empty())",
          "    .assert_eq(_result.static_explicit_captures_len(), Some(0))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('A')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('A');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), &HirKind::Char('A'));",
          "    assert!(!_result.is_start_anchored());",
          "    assert!(!_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('A')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('A');",
          "    assert_eq!(_result.kind(), &HirKind::Char('A'));",
          "    assert!(!_result.is_start_anchored());",
          "    assert!(!_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('1');",
          "}"
        ],
        "oracle": [
          "    let expected_result = Hir::char('1');",
          "    assert_eq!(_result, expected_result);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('1');",
          "    let expected_result = Hir::char('1');",
          "    assert_eq!(_result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('@')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('@');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), HirKind::Char('@'));",
          "    assert!(!_result.is_start_anchored());",
          "    assert!(!_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('@')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('@');",
          "    assert_eq!(_result.kind(), HirKind::Char('@'));",
          "    assert!(!_result.is_start_anchored());",
          "    assert!(!_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('α')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('α');",
          "}"
        ],
        "oracle": [
          "    let parser = Parser { config, pattern: \"test\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('α')), capture_index: Cell::new(0), flags: RefCell::new(Flags { case_insensitive: false, ..Default::default() }), capture_names: RefCell::new(vec![]) };",
          "    assert_eq!(_result.kind(), HirKind::Char('α'));",
          "    assert!(!_result.is_start_anchored());",
          "    assert!(!_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "    assert_eq!(_result.kind(), Hir::char('α').kind());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            ..Default::default()",
          "        },",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"test\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('α')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.hir_char('α');",
          "    let parser = Parser { config, pattern: \"test\", depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('α')), capture_index: Cell::new(0), flags: RefCell::new(Flags { case_insensitive: false, ..Default::default() }), capture_names: RefCell::new(vec![]) };",
          "    assert_eq!(_result.kind(), HirKind::Char('α'));",
          "    assert!(!_result.is_start_anchored());",
          "    assert!(!_result.is_match_empty());",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "    assert_eq!(_result.kind(), Hir::char('α').kind());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]