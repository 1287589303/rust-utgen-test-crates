[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(0);",
          "    let _ = epsilons.slots();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(epsilons.slots(), Slots(0));",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK << Epsilons::SLOT_SHIFT);",
          "    assert_eq!(epsilons.slots(), Slots(Epsilons::SLOT_MASK));",
          "    let epsilons = Epsilons((Epsilons::SLOT_MASK << Epsilons::SLOT_SHIFT) | 1);",
          "    assert_eq!(epsilons.slots(), Slots(Epsilons::SLOT_MASK));",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK << (Epsilons::SLOT_SHIFT + 1));",
          "    assert_eq!(epsilons.slots(), Slots(0));",
          "    let epsilons = Epsilons(u64::MAX);",
          "    assert_eq!(epsilons.slots(), Slots((u64::MAX >> Epsilons::SLOT_SHIFT) as u32));"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(0);",
          "    let _ = epsilons.slots();",
          "    assert_eq!(epsilons.slots(), Slots(0));",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK << Epsilons::SLOT_SHIFT);",
          "    assert_eq!(epsilons.slots(), Slots(Epsilons::SLOT_MASK));",
          "    let epsilons = Epsilons((Epsilons::SLOT_MASK << Epsilons::SLOT_SHIFT) | 1);",
          "    assert_eq!(epsilons.slots(), Slots(Epsilons::SLOT_MASK));",
          "    let epsilons = Epsilons(Epsilons::SLOT_MASK << (Epsilons::SLOT_SHIFT + 1));",
          "    assert_eq!(epsilons.slots(), Slots(0));",
          "    let epsilons = Epsilons(u64::MAX);",
          "    assert_eq!(epsilons.slots(), Slots((u64::MAX >> Epsilons::SLOT_SHIFT) as u32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons(u64::MAX);",
          "    let _ = epsilons.slots();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(epsilons.slots(), Slots((u64::MAX >> Epsilons::SLOT_SHIFT).low_u32()));"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons(u64::MAX);",
          "    let _ = epsilons.slots();",
          "    assert_eq!(epsilons.slots(), Slots((u64::MAX >> Epsilons::SLOT_SHIFT).low_u32()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let epsilons = Epsilons((1 << Epsilons::SLOT_SHIFT) - 1);",
          "    let _ = epsilons.slots();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(epsilons.slots(), Slots(((1 << Epsilons::SLOT_SHIFT) - 1) >> Epsilons::SLOT_SHIFT).low_u32());",
          "    assert_eq!(Epsilons::empty().slots(), Slots(0));",
          "    assert!(epsilons.is_empty() == false);",
          "    assert!(Epsilons::empty().is_empty() == true);",
          "    let epsilons_with_set_slots = epsilons.set_slots(Slots(5));",
          "    assert_eq!(epsilons_with_set_slots.slots(), Slots(5));",
          "    assert_eq!(epsilons.slots().low_u32(), (epsilons.0 >> Epsilons::SLOT_SHIFT).low_u32());"
        ],
        "code": [
          "{",
          "    let epsilons = Epsilons((1 << Epsilons::SLOT_SHIFT) - 1);",
          "    let _ = epsilons.slots();",
          "    assert_eq!(epsilons.slots(), Slots(((1 << Epsilons::SLOT_SHIFT) - 1) >> Epsilons::SLOT_SHIFT).low_u32());",
          "    assert_eq!(Epsilons::empty().slots(), Slots(0));",
          "    assert!(epsilons.is_empty() == false);",
          "    assert!(Epsilons::empty().is_empty() == true);",
          "    let epsilons_with_set_slots = epsilons.set_slots(Slots(5));",
          "    assert_eq!(epsilons_with_set_slots.slots(), Slots(5));",
          "    assert_eq!(epsilons.slots().low_u32(), (epsilons.0 >> Epsilons::SLOT_SHIFT).low_u32());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]