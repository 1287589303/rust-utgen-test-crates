[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(10)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(false)",
          "        .utf8(true)",
          "        .nest_limit(1000)",
          "        .octal(false);",
          "",
          "    let mut builder = ast::parse::ParserBuilder::new();",
          "    config.apply_ast(&mut builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.ignore_whitespace, true);",
          "    assert_eq!(builder.nest_limit, 1000);",
          "    assert_eq!(builder.octal, false);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(10)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(false)",
          "        .utf8(true)",
          "        .nest_limit(1000)",
          "        .octal(false);",
          "",
          "    let mut builder = ast::parse::ParserBuilder::new();",
          "    config.apply_ast(&mut builder);",
          "    assert_eq!(builder.ignore_whitespace, true);",
          "    assert_eq!(builder.nest_limit, 1000);",
          "    assert_eq!(builder.octal, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(false)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(true)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(false)",
          "        .unicode(true)",
          "        .utf8(false)",
          "        .nest_limit(500)",
          "        .octal(true);",
          "",
          "    let mut builder = ast::parse::ParserBuilder::new();",
          "    config.apply_ast(&mut builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_case_insensitive(), false);",
          "    assert_eq!(config.get_multi_line(), true);",
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_crlf(), true);",
          "    assert_eq!(config.get_line_terminator(), 255);",
          "    assert_eq!(config.get_swap_greed(), true);",
          "    assert_eq!(config.get_ignore_whitespace(), false);",
          "    assert_eq!(config.get_unicode(), true);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_nest_limit(), 500);",
          "    assert_eq!(config.get_octal(), true);",
          "    assert!(builder.ignore_whitespace);",
          "    assert_eq!(builder.nest_limit, 500);",
          "    assert!(builder.octal);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(false)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(true)",
          "        .crlf(true)",
          "        .line_terminator(255)",
          "        .swap_greed(true)",
          "        .ignore_whitespace(false)",
          "        .unicode(true)",
          "        .utf8(false)",
          "        .nest_limit(500)",
          "        .octal(true);",
          "",
          "    let mut builder = ast::parse::ParserBuilder::new();",
          "    config.apply_ast(&mut builder);",
          "    assert_eq!(config.get_case_insensitive(), false);",
          "    assert_eq!(config.get_multi_line(), true);",
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_crlf(), true);",
          "    assert_eq!(config.get_line_terminator(), 255);",
          "    assert_eq!(config.get_swap_greed(), true);",
          "    assert_eq!(config.get_ignore_whitespace(), false);",
          "    assert_eq!(config.get_unicode(), true);",
          "    assert_eq!(config.get_utf8(), false);",
          "    assert_eq!(config.get_nest_limit(), 500);",
          "    assert_eq!(config.get_octal(), true);",
          "    assert!(builder.ignore_whitespace);",
          "    assert_eq!(builder.nest_limit, 500);",
          "    assert!(builder.octal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(0)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(false)",
          "        .utf8(true)",
          "        .nest_limit(0)",
          "        .octal(false);",
          "",
          "    let mut builder = ast::parse::ParserBuilder::new();",
          "    config.apply_ast(&mut builder);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.ignore_whitespace);",
          "    assert_eq!(builder.nest_limit, 0);",
          "    assert!(!builder.octal);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(0)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(false)",
          "        .utf8(true)",
          "        .nest_limit(0)",
          "        .octal(false);",
          "",
          "    let mut builder = ast::parse::ParserBuilder::new();",
          "    config.apply_ast(&mut builder);",
          "    assert!(builder.ignore_whitespace);",
          "    assert_eq!(builder.nest_limit, 0);",
          "    assert!(!builder.octal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(1)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(false)",
          "        .utf8(true)",
          "        .nest_limit(1_000_000)",
          "        .octal(false);",
          "",
          "    let mut builder = ast::parse::ParserBuilder::new();",
          "    config.apply_ast(&mut builder);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.ignore_whitespace == true);",
          "    assert_eq!(builder.nest_limit, 1_000_000);",
          "    assert!(builder.octal == false);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .case_insensitive(true)",
          "        .multi_line(false)",
          "        .dot_matches_new_line(false)",
          "        .crlf(false)",
          "        .line_terminator(1)",
          "        .swap_greed(false)",
          "        .ignore_whitespace(true)",
          "        .unicode(false)",
          "        .utf8(true)",
          "        .nest_limit(1_000_000)",
          "        .octal(false);",
          "",
          "    let mut builder = ast::parse::ParserBuilder::new();",
          "    config.apply_ast(&mut builder);",
          "    assert!(builder.ignore_whitespace == true);",
          "    assert_eq!(builder.nest_limit, 1_000_000);",
          "    assert!(builder.octal == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for case_insensitive in [true, false].iter() {",
          "        for multi_line in [true, false].iter() {",
          "            for dot_matches_new_line in [true, false].iter() {",
          "                for crlf in [true, false].iter() {",
          "                    for line_terminator in 0..=255 {",
          "                        for swap_greed in [true, false].iter() {",
          "                            for ignore_whitespace in [true, false].iter() {",
          "                                for unicode in [true, false].iter() {",
          "                                    for utf8 in [true, false].iter() {",
          "                                        for nest_limit in [0, 1_000_000].iter() {",
          "                                            for octal in [true, false].iter() {",
          "                                                let config = Config::new()",
          "                                                    .case_insensitive(*case_insensitive)",
          "                                                    .multi_line(*multi_line)",
          "                                                    .dot_matches_new_line(*dot_matches_new_line)",
          "                                                    .crlf(*crlf)",
          "                                                    .line_terminator(line_terminator)",
          "                                                    .swap_greed(*swap_greed)",
          "                                                    .ignore_whitespace(*ignore_whitespace)",
          "                                                    .unicode(*unicode)",
          "                                                    .utf8(*utf8)",
          "                                                    .nest_limit(*nest_limit)",
          "                                                    .octal(*octal);",
          "    ",
          "                                                let mut builder = ast::parse::ParserBuilder::new();",
          "                                                config.apply_ast(&mut builder);",
          "                                            }",
          "                                        }",
          "                                    }",
          "                                }",
          "                            }",
          "                        }",
          "                    }",
          "                }",
          "            }",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_case_insensitive(), *case_insensitive);",
          "    assert_eq!(config.get_multi_line(), *multi_line);",
          "    assert_eq!(config.get_dot_matches_new_line(), *dot_matches_new_line);",
          "    assert_eq!(config.get_crlf(), *crlf);",
          "    assert_eq!(config.get_line_terminator(), line_terminator);",
          "    assert_eq!(config.get_swap_greed(), *swap_greed);",
          "    assert_eq!(config.get_ignore_whitespace(), *ignore_whitespace);",
          "    assert_eq!(config.get_unicode(), *unicode);",
          "    assert_eq!(config.get_utf8(), *utf8);",
          "    assert_eq!(config.get_nest_limit(), *nest_limit);",
          "    assert_eq!(config.get_octal(), *octal);"
        ],
        "code": [
          "{",
          "    for case_insensitive in [true, false].iter() {",
          "        for multi_line in [true, false].iter() {",
          "            for dot_matches_new_line in [true, false].iter() {",
          "                for crlf in [true, false].iter() {",
          "                    for line_terminator in 0..=255 {",
          "                        for swap_greed in [true, false].iter() {",
          "                            for ignore_whitespace in [true, false].iter() {",
          "                                for unicode in [true, false].iter() {",
          "                                    for utf8 in [true, false].iter() {",
          "                                        for nest_limit in [0, 1_000_000].iter() {",
          "                                            for octal in [true, false].iter() {",
          "                                                let config = Config::new()",
          "                                                    .case_insensitive(*case_insensitive)",
          "                                                    .multi_line(*multi_line)",
          "                                                    .dot_matches_new_line(*dot_matches_new_line)",
          "                                                    .crlf(*crlf)",
          "                                                    .line_terminator(line_terminator)",
          "                                                    .swap_greed(*swap_greed)",
          "                                                    .ignore_whitespace(*ignore_whitespace)",
          "                                                    .unicode(*unicode)",
          "                                                    .utf8(*utf8)",
          "                                                    .nest_limit(*nest_limit)",
          "                                                    .octal(*octal);",
          "    ",
          "                                                let mut builder = ast::parse::ParserBuilder::new();",
          "                                                config.apply_ast(&mut builder);",
          "                                            }",
          "                                        }",
          "                                    }",
          "                                }",
          "                            }",
          "                        }",
          "                    }",
          "                }",
          "            }",
          "        }",
          "    }",
          "    assert_eq!(config.get_case_insensitive(), *case_insensitive);",
          "    assert_eq!(config.get_multi_line(), *multi_line);",
          "    assert_eq!(config.get_dot_matches_new_line(), *dot_matches_new_line);",
          "    assert_eq!(config.get_crlf(), *crlf);",
          "    assert_eq!(config.get_line_terminator(), line_terminator);",
          "    assert_eq!(config.get_swap_greed(), *swap_greed);",
          "    assert_eq!(config.get_ignore_whitespace(), *ignore_whitespace);",
          "    assert_eq!(config.get_unicode(), *unicode);",
          "    assert_eq!(config.get_utf8(), *utf8);",
          "    assert_eq!(config.get_nest_limit(), *nest_limit);",
          "    assert_eq!(config.get_octal(), *octal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]