[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    let result = core::fmt::format(format_args!(\"{:?}\", byte_classes));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"ByteClasses({{singletons}})\") == Ok(());",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    assert!(byte_classes.is_singleton());",
          "    let result = core::fmt::format(format_args!(\"{:?}\", byte_classes));",
          "    assert_eq!(result, \"ByteClasses({{singletons}})\");"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    let result = core::fmt::format(format_args!(\"{:?}\", byte_classes));",
          "    write!(f, \"ByteClasses({{singletons}})\") == Ok(());",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    assert!(byte_classes.is_singleton());",
          "    let result = core::fmt::format(format_args!(\"{:?}\", byte_classes));",
          "    assert_eq!(result, \"ByteClasses({{singletons}})\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let result = core::fmt::format(format_args!(\"{:?}\", byte_classes));",
          "}"
        ],
        "oracle": [
          "    write!(f, \"ByteClasses({{singletons}})\") == result",
          "    result.contains(\"ByteClasses({{singletons}})\")",
          "    assert_eq!(result, \"ByteClasses({{singletons}})\");",
          "    assert!(byte_classes.is_singleton());",
          "    let byte_classes = ByteClasses::singletons();",
          "    format!(\"{:?}\", byte_classes) == \"ByteClasses({{singletons}})\""
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let result = core::fmt::format(format_args!(\"{:?}\", byte_classes));",
          "    write!(f, \"ByteClasses({{singletons}})\") == result",
          "    result.contains(\"ByteClasses({{singletons}})\")",
          "    assert_eq!(result, \"ByteClasses({{singletons}})\");",
          "    assert!(byte_classes.is_singleton());",
          "    let byte_classes = ByteClasses::singletons();",
          "    format!(\"{:?}\", byte_classes) == \"ByteClasses({{singletons}})\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(0, 0); // Set the first byte class",
          "    let result = core::fmt::format(format_args!(\"{:?}\", byte_classes));",
          "}"
        ],
        "oracle": [
          "    assert!(result.contains(\"ByteClasses({{singletons}})\"));"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(0, 0); // Set the first byte class",
          "    let result = core::fmt::format(format_args!(\"{:?}\", byte_classes));",
          "    assert!(result.contains(\"ByteClasses({{singletons}})\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]