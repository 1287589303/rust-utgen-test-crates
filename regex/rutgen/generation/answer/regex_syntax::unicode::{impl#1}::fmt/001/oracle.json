[
  {
    "uses": [
      "use core::fmt::Formatter;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct MyFormatter;",
          "",
          "    impl Formatter {",
          "        fn new() -> Self {",
          "            MyFormatter {}",
          "        }",
          "",
          "        fn write(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let error = CaseFoldError(());",
          "    let mut formatter = MyFormatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.write(\"Unicode-aware case folding is not available (probably because the unicode-case feature is not enabled)\"), Ok(()));",
          "    assert_eq!(formatter.write(\"Some other text\"), Ok(()));",
          "    assert!(formatter.write(\"Unexpected error\").is_ok());",
          "    assert!(formatter.write(\"\").is_ok());",
          "    assert_eq!(error.to_string(), \"Unicode-aware case folding is not available (probably because the unicode-case feature is not enabled)\");",
          "    assert!(core::fmt::Result::Ok.is_ok());",
          "    assert!(core::fmt::Result::Err(core::fmt::Error).is_err());"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct MyFormatter;",
          "",
          "    impl Formatter {",
          "        fn new() -> Self {",
          "            MyFormatter {}",
          "        }",
          "",
          "        fn write(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let error = CaseFoldError(());",
          "    let mut formatter = MyFormatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(formatter.write(\"Unicode-aware case folding is not available (probably because the unicode-case feature is not enabled)\"), Ok(()));",
          "    assert_eq!(formatter.write(\"Some other text\"), Ok(()));",
          "    assert!(formatter.write(\"Unexpected error\").is_ok());",
          "    assert!(formatter.write(\"\").is_ok());",
          "    assert_eq!(error.to_string(), \"Unicode-aware case folding is not available (probably because the unicode-case feature is not enabled)\");",
          "    assert!(core::fmt::Result::Ok.is_ok());",
          "    assert!(core::fmt::Result::Err(core::fmt::Error).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct EmptyFormatter;",
          "",
          "    impl Formatter {",
          "        fn new() -> Self {",
          "            EmptyFormatter {}",
          "        }",
          "",
          "        fn write(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let error = CaseFoldError(());",
          "    let mut formatter = EmptyFormatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", CaseFoldError(())), \"Unicode-aware case folding is not available (probably because the unicode-case feature is not enabled)\");",
          "    assert!(format!(\"{:?}\", CaseFoldError(())) == \"CaseFoldError(())\");",
          "    let mut formatter = EmptyFormatter::new();",
          "    assert!(formatter.write(\"test\").is_ok());"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct EmptyFormatter;",
          "",
          "    impl Formatter {",
          "        fn new() -> Self {",
          "            EmptyFormatter {}",
          "        }",
          "",
          "        fn write(&mut self, _: &str) -> core::fmt::Result {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let error = CaseFoldError(());",
          "    let mut formatter = EmptyFormatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    assert_eq!(format!(\"{}\", CaseFoldError(())), \"Unicode-aware case folding is not available (probably because the unicode-case feature is not enabled)\");",
          "    assert!(format!(\"{:?}\", CaseFoldError(())) == \"CaseFoldError(())\");",
          "    let mut formatter = EmptyFormatter::new();",
          "    assert!(formatter.write(\"test\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct FailingFormatter;",
          "",
          "    impl Formatter {",
          "        fn new() -> Self {",
          "            FailingFormatter {}",
          "        }",
          "",
          "        fn write(&mut self, _: &str) -> core::fmt::Result {",
          "            panic!(\"Simulated panic in formatter write\");",
          "        }",
          "    }",
          "",
          "    let error = CaseFoldError(());",
          "    let mut formatter = FailingFormatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let error = CaseFoldError(());",
          "    let mut formatter = FailingFormatter::new();",
          "    let result = error.fmt(&mut formatter);",
          "    assert!(result.is_err());",
          "    assert_eq!(format!(\"{}\", error), \"Unicode-aware case folding is not available (probably because the unicode-case feature is not enabled)\");",
          "    assert_eq!(formatter.write(\"test\"), Err(core::fmt::Error));"
        ],
        "code": [
          "{",
          "    use core::fmt::Formatter;",
          "",
          "    struct FailingFormatter;",
          "",
          "    impl Formatter {",
          "        fn new() -> Self {",
          "            FailingFormatter {}",
          "        }",
          "",
          "        fn write(&mut self, _: &str) -> core::fmt::Result {",
          "            panic!(\"Simulated panic in formatter write\");",
          "        }",
          "    }",
          "",
          "    let error = CaseFoldError(());",
          "    let mut formatter = FailingFormatter::new();",
          "    let _ = error.fmt(&mut formatter);",
          "    let error = CaseFoldError(());",
          "    let mut formatter = FailingFormatter::new();",
          "    let result = error.fmt(&mut formatter);",
          "    assert!(result.is_err());",
          "    assert_eq!(format!(\"{}\", error), \"Unicode-aware case folding is not available (probably because the unicode-case feature is not enabled)\");",
          "    assert_eq!(formatter.write(\"test\"), Err(core::fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]