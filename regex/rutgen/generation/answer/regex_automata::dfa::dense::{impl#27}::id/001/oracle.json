[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        id: StateID(Default::default()),",
          "        stride2: 0,",
          "        transitions: &[],",
          "    };",
          "    let _ = state.id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id(), StateID(Default::default()));"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        id: StateID(Default::default()),",
          "        stride2: 0,",
          "        transitions: &[],",
          "    };",
          "    let _ = state.id();",
          "    assert_eq!(state.id(), StateID(Default::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        id: StateID(SmallIndex::new(0).unwrap()),",
          "        stride2: 0,",
          "        transitions: &[],",
          "    };",
          "    let _ = state.id();",
          "}"
        ],
        "oracle": [
          "    let state = State { id: StateID(SmallIndex::new(0).unwrap()), stride2: 0, transitions: &[] };",
          "    assert_eq!(state.id(), StateID(SmallIndex::new(0).unwrap()));"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        id: StateID(SmallIndex::new(0).unwrap()),",
          "        stride2: 0,",
          "        transitions: &[],",
          "    };",
          "    let _ = state.id();",
          "    let state = State { id: StateID(SmallIndex::new(0).unwrap()), stride2: 0, transitions: &[] };",
          "    assert_eq!(state.id(), StateID(SmallIndex::new(0).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        id: StateID(SmallIndex::new(u32::MAX as usize).unwrap()),",
          "        stride2: 0,",
          "        transitions: &[],",
          "    };",
          "    let _ = state.id();",
          "}"
        ],
        "oracle": [
          "    let state = State { id: StateID(SmallIndex::new(u32::MAX as usize).unwrap()), stride2: 0, transitions: &[] }; assert_eq!(state.id(), StateID(SmallIndex::new(u32::MAX as usize).unwrap()));"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        id: StateID(SmallIndex::new(u32::MAX as usize).unwrap()),",
          "        stride2: 0,",
          "        transitions: &[],",
          "    };",
          "    let _ = state.id();",
          "    let state = State { id: StateID(SmallIndex::new(u32::MAX as usize).unwrap()), stride2: 0, transitions: &[] }; assert_eq!(state.id(), StateID(SmallIndex::new(u32::MAX as usize).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        id: StateID(SmallIndex::new((u32::MAX as usize) / 2).unwrap()),",
          "        stride2: 0,",
          "        transitions: &[],",
          "    };",
          "    let _ = state.id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id(), StateID(SmallIndex::new((u32::MAX as usize) / 2).unwrap()));"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        id: StateID(SmallIndex::new((u32::MAX as usize) / 2).unwrap()),",
          "        stride2: 0,",
          "        transitions: &[],",
          "    };",
          "    let _ = state.id();",
          "    assert_eq!(state.id(), StateID(SmallIndex::new((u32::MAX as usize) / 2).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]