[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let match_kind = MatchKind::All;",
          "    let result = match_kind.continue_past_first_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(match_kind.continue_past_first_match(), true);",
          "    let match_kind_leftmost = MatchKind::LeftmostFirst;",
          "    assert_eq!(match_kind_leftmost.continue_past_first_match(), false);",
          "    let match_kind_cloned = match_kind;",
          "    assert_eq!(match_kind_cloned.continue_past_first_match(), true);",
          "    assert_ne!(match_kind_leftmost.continue_past_first_match(), match_kind.continue_past_first_match());"
        ],
        "code": [
          "{",
          "    let match_kind = MatchKind::All;",
          "    let result = match_kind.continue_past_first_match();",
          "    assert_eq!(match_kind.continue_past_first_match(), true);",
          "    let match_kind_leftmost = MatchKind::LeftmostFirst;",
          "    assert_eq!(match_kind_leftmost.continue_past_first_match(), false);",
          "    let match_kind_cloned = match_kind;",
          "    assert_eq!(match_kind_cloned.continue_past_first_match(), true);",
          "    assert_ne!(match_kind_leftmost.continue_past_first_match(), match_kind.continue_past_first_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let match_kind = MatchKind::LeftmostFirst;",
          "    let result = match_kind.continue_past_first_match();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let match_kind = MatchKind::All;",
          "    let result = match_kind.continue_past_first_match();",
          "    assert_eq!(result, true);",
          "    let match_kind = MatchKind::LeftmostFirst;",
          "    let result = match_kind.continue_past_first_match();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let match_kind = MatchKind::LeftmostFirst;",
          "    let result = match_kind.continue_past_first_match();",
          "    assert_eq!(result, false);",
          "    let match_kind = MatchKind::All;",
          "    let result = match_kind.continue_past_first_match();",
          "    assert_eq!(result, true);",
          "    let match_kind = MatchKind::LeftmostFirst;",
          "    let result = match_kind.continue_past_first_match();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]