[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_bytes = hir::ClassBytes {",
          "        set: IntervalSet::new(),",
          "    };",
          "    let frame = HirFrame::ClassBytes(class_bytes.clone());",
          "    let result = frame.unwrap_class_bytes();",
          "}"
        ],
        "oracle": [
          "    let class_bytes = hir::ClassBytes { set: IntervalSet::new() };",
          "    let frame = HirFrame::ClassBytes(class_bytes.clone());",
          "    assert_eq!(frame.unwrap_class_bytes(), class_bytes);",
          "    assert!(matches!(frame, HirFrame::ClassBytes(_)));",
          "    assert!(frame.unwrap_class_bytes().eq(&class_bytes));",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let frame = HirFrame::Expr(hir::Hir::new());",
          "    frame.unwrap_class_bytes();",
          "    }).is_err());",
          "    assert_eq!(frame.unwrap_class_bytes(), class_bytes);"
        ],
        "code": [
          "{",
          "    let class_bytes = hir::ClassBytes {",
          "        set: IntervalSet::new(),",
          "    };",
          "    let frame = HirFrame::ClassBytes(class_bytes.clone());",
          "    let result = frame.unwrap_class_bytes();",
          "    let class_bytes = hir::ClassBytes { set: IntervalSet::new() };",
          "    let frame = HirFrame::ClassBytes(class_bytes.clone());",
          "    assert_eq!(frame.unwrap_class_bytes(), class_bytes);",
          "    assert!(matches!(frame, HirFrame::ClassBytes(_)));",
          "    assert!(frame.unwrap_class_bytes().eq(&class_bytes));",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let frame = HirFrame::Expr(hir::Hir::new());",
          "    frame.unwrap_class_bytes();",
          "    }).is_err());",
          "    assert_eq!(frame.unwrap_class_bytes(), class_bytes);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let frame = HirFrame::Expr(Hir::default());",
          "    let _result = frame.unwrap_class_bytes();",
          "}"
        ],
        "oracle": [
          "    let frame = HirFrame::ClassBytes(ClassBytes::default());",
          "    let result = frame.unwrap_class_bytes();",
          "    assert_eq!(result, ClassBytes::default());",
          "    let frame = HirFrame::ClassBytes(ClassBytes { /* specific fields */ });",
          "    let result = frame.unwrap_class_bytes();",
          "    assert_eq!(result, ClassBytes { /* specific fields */ });",
          "    let frame = HirFrame::Expr(Hir::default());",
          "    let result = std::panic::catch_unwind(|| frame.unwrap_class_bytes());",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Expr(Hir::default());",
          "    let _result = frame.unwrap_class_bytes();",
          "    let frame = HirFrame::ClassBytes(ClassBytes::default());",
          "    let result = frame.unwrap_class_bytes();",
          "    assert_eq!(result, ClassBytes::default());",
          "    let frame = HirFrame::ClassBytes(ClassBytes { /* specific fields */ });",
          "    let result = frame.unwrap_class_bytes();",
          "    assert_eq!(result, ClassBytes { /* specific fields */ });",
          "    let frame = HirFrame::Expr(Hir::default());",
          "    let result = std::panic::catch_unwind(|| frame.unwrap_class_bytes());",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]