[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name = \"Decimal_Number\";",
          "    let result = gencat(canonical_name);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir_class(DECIMAL_NUMBER));"
        ],
        "code": [
          "{",
          "    let canonical_name = \"Decimal_Number\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir_class(DECIMAL_NUMBER));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let canonical_name = \"Invalid_Property\";",
          "    let result = gencat(canonical_name);",
          "}"
        ],
        "oracle": [
          "    let canonical_name = \"Decimal_Number\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir_class(DECIMAL_NUMBER));",
          "    let canonical_name = \"ASCII\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir_class(&[('\\0', '\\x7F')]));",
          "    let canonical_name = \"Any\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir_class(&[('\\0', '\\u{10FFFF}]));",
          "    let canonical_name = \"Assigned\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    // Assuming Unassigned is a valid property, negation should not cause an error",
          "    let unassigned = gencat(\"Unassigned\").unwrap();",
          "    let cls = gencat(\"Assigned\").unwrap();",
          "    assert!(cls.is_negated());",
          "    let canonical_name = \"Invalid_Property\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);"
        ],
        "code": [
          "{",
          "    let canonical_name = \"Invalid_Property\";",
          "    let result = gencat(canonical_name);",
          "    let canonical_name = \"Decimal_Number\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir_class(DECIMAL_NUMBER));",
          "    let canonical_name = \"ASCII\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir_class(&[('\\0', '\\x7F')]));",
          "    let canonical_name = \"Any\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), hir_class(&[('\\0', '\\u{10FFFF}]));",
          "    let canonical_name = \"Assigned\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_ok());",
          "    // Assuming Unassigned is a valid property, negation should not cause an error",
          "    let unassigned = gencat(\"Unassigned\").unwrap();",
          "    let cls = gencat(\"Assigned\").unwrap();",
          "    assert!(cls.is_negated());",
          "    let canonical_name = \"Invalid_Property\";",
          "    let result = gencat(canonical_name);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyValueNotFound);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]