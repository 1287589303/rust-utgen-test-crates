[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = gencat(\"ASCII\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(hir_class(&[('\\0', '\\x7F')])));",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));"
        ],
        "code": [
          "{",
          "    let result = gencat(\"ASCII\");",
          "    assert_eq!(result, Ok(hir_class(&[('\\0', '\\x7F')])));",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = gencat(\"Any\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode, hir_class(&[('\\0', '\\u{10FFFF}]));"
        ],
        "code": [
          "{",
          "    let result = gencat(\"Any\");",
          "    assert!(result.is_ok());",
          "    let class_unicode = result.unwrap();",
          "    assert_eq!(class_unicode, hir_class(&[('\\0', '\\u{10FFFF}]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = gencat(\"Assigned\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(matches!(result, Ok(hir::ClassUnicode {..})));",
          "    assert_ne!(result.err(), Some(Error::PropertyNotFound));",
          "    assert_ne!(result.err(), Some(Error::PropertyValueNotFound));"
        ],
        "code": [
          "{",
          "    let result = gencat(\"Assigned\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert!(matches!(result, Ok(hir::ClassUnicode {..})));",
          "    assert_ne!(result.err(), Some(Error::PropertyNotFound));",
          "    assert_ne!(result.err(), Some(Error::PropertyValueNotFound));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = gencat(\"Unassigned\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);"
        ],
        "code": [
          "{",
          "    let result = gencat(\"Unassigned\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::PropertyNotFound);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = gencat(\"Invalid_Name\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    let result = gencat(\"ASCII\");",
          "    assert!(result.is_ok());",
          "    let result = gencat(\"Any\");",
          "    assert!(result.is_ok());",
          "    let result = gencat(\"Assigned\");",
          "    assert!(result.is_ok());",
          "    let result = gencat(\"Some_Unknown_Property\");",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    let result = gencat(\"Decimal_Number\");",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = gencat(\"Invalid_Name\");",
          "    assert_eq!(result, Err(Error::PropertyNotFound));",
          "    let result = gencat(\"ASCII\");",
          "    assert!(result.is_ok());",
          "    let result = gencat(\"Any\");",
          "    assert!(result.is_ok());",
          "    let result = gencat(\"Assigned\");",
          "    assert!(result.is_ok());",
          "    let result = gencat(\"Some_Unknown_Property\");",
          "    assert_eq!(result, Err(Error::PropertyValueNotFound));",
          "    let result = gencat(\"Decimal_Number\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]