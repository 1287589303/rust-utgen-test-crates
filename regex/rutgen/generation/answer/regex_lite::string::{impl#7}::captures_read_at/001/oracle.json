[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = 0;",
          "    let _ = re.captures_read_at(&mut locs, haystack, start);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = 0;",
          "    assert!(re.captures_read_at(&mut locs, haystack, start).is_some());",
          "    let m = re.captures_read_at(&mut locs, haystack, start).unwrap();",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), 5);",
          "    assert_eq!(m.as_str(), \"hello\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = 0;",
          "    let _ = re.captures_read_at(&mut locs, haystack, start);",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = 0;",
          "    assert!(re.captures_read_at(&mut locs, haystack, start).is_some());",
          "    let m = re.captures_read_at(&mut locs, haystack, start).unwrap();",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), 5);",
          "    assert_eq!(m.as_str(), \"hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = 6;",
          "    let _ = re.captures_read_at(&mut locs, haystack, start);",
          "}"
        ],
        "oracle": [
          "    assert!(re.captures_read_at(&mut locs, haystack, 6).is_some());",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().start(), 6);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().end(), 11);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().as_str(), \"world\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = 6;",
          "    let _ = re.captures_read_at(&mut locs, haystack, start);",
          "    assert!(re.captures_read_at(&mut locs, haystack, 6).is_some());",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().start(), 6);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().end(), 11);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, 6).unwrap().as_str(), \"world\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    ",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = haystack.len() - 5; // \"world\"",
          "    let _ = re.captures_read_at(&mut locs, haystack, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).is_some(), true);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().start(), start);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().end(), haystack.len());",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().as_str(), \"world\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    ",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = haystack.len() - 5; // \"world\"",
          "    let _ = re.captures_read_at(&mut locs, haystack, start);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).is_some(), true);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().start(), start);",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().end(), haystack.len());",
          "    assert_eq!(re.captures_read_at(&mut locs, haystack, start).unwrap().as_str(), \"world\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = haystack.len(); // Out of bounds index",
          "    let _ = re.captures_read_at(&mut locs, haystack, start);",
          "}"
        ],
        "oracle": [
          "    assert!(re.captures_read_at(&mut locs, haystack, start).is_none());",
          "    assert!(re.captures_read_at(&mut locs, haystack, start - 1).is_some());",
          "    assert!(re.captures_read_at(&mut locs, haystack, start - 2).is_some());",
          "    assert!(re.captures_read_at(&mut locs, haystack, 0).is_some());",
          "    assert!(re.captures_read_at(&mut locs, haystack, 1).is_some());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\\w+\").unwrap();",
          "    let haystack = \"hello world\";",
          "    let mut locs = re.captures_at(haystack, 0).unwrap();",
          "    let start = haystack.len(); // Out of bounds index",
          "    let _ = re.captures_read_at(&mut locs, haystack, start);",
          "    assert!(re.captures_read_at(&mut locs, haystack, start).is_none());",
          "    assert!(re.captures_read_at(&mut locs, haystack, start - 1).is_some());",
          "    assert!(re.captures_read_at(&mut locs, haystack, start - 2).is_some());",
          "    assert!(re.captures_read_at(&mut locs, haystack, 0).is_some());",
          "    assert!(re.captures_read_at(&mut locs, haystack, 1).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]