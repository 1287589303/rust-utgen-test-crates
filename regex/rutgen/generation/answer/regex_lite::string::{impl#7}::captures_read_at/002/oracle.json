[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let mut locs = regex.capture_locations();",
          "    let result = regex.captures_read_at(&mut locs, haystack, haystack.len() + 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let mut locs = regex.capture_locations();",
          "    let result = regex.captures_read_at(&mut locs, haystack, haystack.len() + 1);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let mut locs = regex.capture_locations();",
          "    let result = regex.captures_read_at(&mut locs, haystack, usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let mut locs = regex.capture_locations();",
          "    let result = regex.captures_read_at(&mut locs, haystack, usize::MAX);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"\";",
          "    let mut locs = regex.capture_locations();",
          "    let result = regex.captures_read_at(&mut locs, haystack, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"\";",
          "    let mut locs = regex.capture_locations();",
          "    let result = regex.captures_read_at(&mut locs, haystack, 0);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct IncorrectCaptureLocations(Vec<Option<NonMaxUsize>>);",
          "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let mut locs = IncorrectCaptureLocations(vec![None; 2]); // Incorrect instance",
          "    let result = regex.captures_read_at(&mut locs, haystack, 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct IncorrectCaptureLocations(Vec<Option<NonMaxUsize>>);",
          "    let regex = Regex::new(r\"\\bchew\\b\").unwrap();",
          "    let haystack = \"eschew\";",
          "    let mut locs = IncorrectCaptureLocations(vec![None; 2]); // Incorrect instance",
          "    let result = regex.captures_read_at(&mut locs, haystack, 0);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]