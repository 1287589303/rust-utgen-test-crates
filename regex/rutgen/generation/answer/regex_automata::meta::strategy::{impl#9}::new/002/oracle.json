[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(",
          "            Config::new()",
          "                .auto_prefilter(true)",
          "                .match_kind(MatchKind::LeftmostFirst)",
          "                .line_terminator(b'\\n')",
          "                .build(),",
          "            &[],",
          "        ),",
          "        pre: Some(Prefilter {",
          "            is_fast: true,",
          "            max_needle_len: 0,",
          "            pre: Arc::new(()),",
          "        }),",
          "        hybrid: None,",
          "        dfa: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "    };",
          "    ",
          "    let hirs = vec![];",
          "    ",
          "    let result = ReverseInner::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    let core = Core {",
          "    info: RegexInfo::new(",
          "    Config::new()",
          "    .auto_prefilter(true)",
          "    .match_kind(MatchKind::LeftmostFirst)",
          "    .line_terminator(b'\\n')",
          "    .build(),",
          "    &[],",
          "    ),",
          "    hybrid: None,",
          "    dfa: None,",
          "    pre: Some(Prefilter {",
          "    is_fast: false,",
          "    max_needle_len: 0,",
          "    pre: Arc::new(()),",
          "    }),",
          "    nfa: NFA(Arc::new(Inner)),",
          "    };",
          "    let hirs = vec![];",
          "    let result = ReverseInner::new(core, &hirs);",
          "    assert_eq!(result, Err(core));"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(",
          "            Config::new()",
          "                .auto_prefilter(true)",
          "                .match_kind(MatchKind::LeftmostFirst)",
          "                .line_terminator(b'\\n')",
          "                .build(),",
          "            &[],",
          "        ),",
          "        pre: Some(Prefilter {",
          "            is_fast: true,",
          "            max_needle_len: 0,",
          "            pre: Arc::new(()),",
          "        }),",
          "        hybrid: None,",
          "        dfa: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "    };",
          "    ",
          "    let hirs = vec![];",
          "    ",
          "    let result = ReverseInner::new(core, &hirs);",
          "    let core = Core {",
          "    info: RegexInfo::new(",
          "    Config::new()",
          "    .auto_prefilter(true)",
          "    .match_kind(MatchKind::LeftmostFirst)",
          "    .line_terminator(b'\\n')",
          "    .build(),",
          "    &[],",
          "    ),",
          "    hybrid: None,",
          "    dfa: None,",
          "    pre: Some(Prefilter {",
          "    is_fast: false,",
          "    max_needle_len: 0,",
          "    pre: Arc::new(()),",
          "    }),",
          "    nfa: NFA(Arc::new(Inner)),",
          "    };",
          "    let hirs = vec![];",
          "    let result = ReverseInner::new(core, &hirs);",
          "    assert_eq!(result, Err(core));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(",
          "            Config::new()",
          "                .auto_prefilter(true)",
          "                .match_kind(MatchKind::LeftmostFirst)",
          "                .line_terminator(b'\\n')",
          "                .build(),",
          "            &[],",
          "        ),",
          "        pre: Some(Prefilter {",
          "            is_fast: true,",
          "            max_needle_len: 0,",
          "            pre: Arc::new(()),",
          "        }),",
          "        hybrid: None,",
          "        dfa: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "    };",
          "",
          "    let hirs = vec![];",
          "",
          "    let result = ReverseInner::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), core);",
          "    assert_eq!(core.info.config().get_auto_prefilter(), true);",
          "    assert_eq!(core.info.config().get_match_kind(), MatchKind::LeftmostFirst);",
          "    assert!(core.info.is_always_anchored_start());",
          "    assert!(core.hybrid.is_none());",
          "    assert!(core.dfa.is_none());",
          "    assert!(core.pre.as_ref().map_or(false, |p| p.is_fast()));"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(",
          "            Config::new()",
          "                .auto_prefilter(true)",
          "                .match_kind(MatchKind::LeftmostFirst)",
          "                .line_terminator(b'\\n')",
          "                .build(),",
          "            &[],",
          "        ),",
          "        pre: Some(Prefilter {",
          "            is_fast: true,",
          "            max_needle_len: 0,",
          "            pre: Arc::new(()),",
          "        }),",
          "        hybrid: None,",
          "        dfa: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "    };",
          "",
          "    let hirs = vec![];",
          "",
          "    let result = ReverseInner::new(core, &hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), core);",
          "    assert_eq!(core.info.config().get_auto_prefilter(), true);",
          "    assert_eq!(core.info.config().get_match_kind(), MatchKind::LeftmostFirst);",
          "    assert!(core.info.is_always_anchored_start());",
          "    assert!(core.hybrid.is_none());",
          "    assert!(core.dfa.is_none());",
          "    assert!(core.pre.as_ref().map_or(false, |p| p.is_fast()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]