[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new()",
          "            .auto_prefilter(true)",
          "            .which_captures(WhichCaptures::None)",
          "            .match_kind(MatchKind::LeftmostFirst)",
          "            .nfa_size_limit(Some(1024)),",
          "            &[]),",
          "        pre: None,",
          "        hybrid: None,",
          "        dfa: Some(DFA::new(&RegexInfo::new(Config::default(), &[]), None, &NFA::default(), &NFA::default())),",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "}"
        ],
        "oracle": [
          "    let core = Core { info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst).nfa_size_limit(Some(1024)), &[]), pre: None, hybrid: None, dfa: Some(DFA::new(&RegexInfo::new(Config::default(), &[]), None, &NFA::default(), &NFA::default())) };",
          "    let hirs: &[&Hir] = &[];",
          "    let result = ReverseInner::new(core, hirs);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new()",
          "            .auto_prefilter(true)",
          "            .which_captures(WhichCaptures::None)",
          "            .match_kind(MatchKind::LeftmostFirst)",
          "            .nfa_size_limit(Some(1024)),",
          "            &[]),",
          "        pre: None,",
          "        hybrid: None,",
          "        dfa: Some(DFA::new(&RegexInfo::new(Config::default(), &[]), None, &NFA::default(), &NFA::default())),",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let core = Core { info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst).nfa_size_limit(Some(1024)), &[]), pre: None, hybrid: None, dfa: Some(DFA::new(&RegexInfo::new(Config::default(), &[]), None, &NFA::default(), &NFA::default())) };",
          "    let hirs: &[&Hir] = &[];",
          "    let result = ReverseInner::new(core, hirs);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new()",
          "            .auto_prefilter(true)",
          "            .which_captures(WhichCaptures::None)",
          "            .match_kind(MatchKind::LeftmostFirst)",
          "            .nfa_size_limit(Some(10))),",
          "        pre: None,",
          "        hybrid: None,",
          "        dfa: Some(DFA::new(&RegexInfo::new(Config::default(), &[]), None, &NFA::default(), &NFA::default())),",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "}"
        ],
        "oracle": [
          "    let core = Core { info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst).nfa_size_limit(Some(10))), pre: None, hybrid: None, dfa: Some(DFA::new(&RegexInfo::new(Config::default(), &[]), None, &NFA::default(), &NFA::default())) };",
          "    let hirs: &[&Hir] = &[];",
          "    let result = ReverseInner::new(core, hirs);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new()",
          "            .auto_prefilter(true)",
          "            .which_captures(WhichCaptures::None)",
          "            .match_kind(MatchKind::LeftmostFirst)",
          "            .nfa_size_limit(Some(10))),",
          "        pre: None,",
          "        hybrid: None,",
          "        dfa: Some(DFA::new(&RegexInfo::new(Config::default(), &[]), None, &NFA::default(), &NFA::default())),",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let core = Core { info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst).nfa_size_limit(Some(10))), pre: None, hybrid: None, dfa: Some(DFA::new(&RegexInfo::new(Config::default(), &[]), None, &NFA::default(), &NFA::default())) };",
          "    let hirs: &[&Hir] = &[];",
          "    let result = ReverseInner::new(core, hirs);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]