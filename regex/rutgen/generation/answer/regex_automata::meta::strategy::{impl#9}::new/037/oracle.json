[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]),",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "}"
        ],
        "oracle": [
          "    let core = Core {",
          "    info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]),",
          "    pre: None,",
          "    nfa: NFA(Arc::new(Inner)),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::new(),",
          "    backtrack: wrappers::BoundedBacktracker::new(),",
          "    onepass: wrappers::OnePass::new(),",
          "    hybrid: None,",
          "    dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "    ",
          "    let result = ReverseInner::new(core, hirs);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]),",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "    let core = Core {",
          "    info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]),",
          "    pre: None,",
          "    nfa: NFA(Arc::new(Inner)),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::new(),",
          "    backtrack: wrappers::BoundedBacktracker::new(),",
          "    onepass: wrappers::OnePass::new(),",
          "    hybrid: None,",
          "    dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "    ",
          "    let result = ReverseInner::new(core, hirs);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::All), &[]),",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core.info.config().get_auto_prefilter(), true);",
          "    assert_eq!(core.info.config().get_match_kind(), MatchKind::All);",
          "    assert_eq!(core.info.is_always_anchored_start(), false);",
          "    assert_eq!(core.hybrid.is_some(), false);",
          "    assert_eq!(core.dfa.is_some(), false);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::All), &[]),",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "    assert_eq!(core.info.config().get_auto_prefilter(), true);",
          "    assert_eq!(core.info.config().get_match_kind(), MatchKind::All);",
          "    assert_eq!(core.info.is_always_anchored_start(), false);",
          "    assert_eq!(core.hybrid.is_some(), false);",
          "    assert_eq!(core.dfa.is_some(), false);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core_info = RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]);",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "}"
        ],
        "oracle": [
          "    core.info.config().get_auto_prefilter() == true",
          "    core.info.config().get_match_kind() == MatchKind::LeftmostFirst",
          "    core.info.is_always_anchored_start() == false",
          "    core.hybrid.is_some() == false",
          "    core.dfa.is_some() == false",
          "    result.is_err() == true",
          "    result.unwrap_err() == core"
        ],
        "code": [
          "{",
          "    let core_info = RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]);",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "    core.info.config().get_auto_prefilter() == true",
          "    core.info.config().get_match_kind() == MatchKind::LeftmostFirst",
          "    core.info.is_always_anchored_start() == false",
          "    core.hybrid.is_some() == false",
          "    core.dfa.is_some() == false",
          "    result.is_err() == true",
          "    result.unwrap_err() == core",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core_info = RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]);",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), core);"
        ],
        "code": [
          "{",
          "    let core_info = RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]);",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), core);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core_info = RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]);",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "}"
        ],
        "oracle": [
          "    let core_info = RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]);",
          "    let core = Core {",
          "    info: core_info,",
          "    pre: None,",
          "    nfa: NFA(Arc::new(Inner)),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::new(),",
          "    backtrack: wrappers::BoundedBacktracker::new(),",
          "    onepass: wrappers::OnePass::new(),",
          "    hybrid: None,",
          "    dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "    let result = ReverseInner::new(core, hirs);",
          "    assert_eq!(result, Err(core));"
        ],
        "code": [
          "{",
          "    let core_info = RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]);",
          "    let core = Core {",
          "        info: core_info,",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner)),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::new(),",
          "        backtrack: wrappers::BoundedBacktracker::new(),",
          "        onepass: wrappers::OnePass::new(),",
          "        hybrid: None,",
          "        dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "",
          "    let result = ReverseInner::new(core, hirs);",
          "    let _ = result.unwrap_err();",
          "    let core_info = RegexInfo::new(Config::new().auto_prefilter(true).which_captures(WhichCaptures::None).match_kind(MatchKind::LeftmostFirst), &[]);",
          "    let core = Core {",
          "    info: core_info,",
          "    pre: None,",
          "    nfa: NFA(Arc::new(Inner)),",
          "    nfarev: None,",
          "    pikevm: wrappers::PikeVM::new(),",
          "    backtrack: wrappers::BoundedBacktracker::new(),",
          "    onepass: wrappers::OnePass::new(),",
          "    hybrid: None,",
          "    dfa: None,",
          "    };",
          "    let hirs: &[&Hir] = &[];",
          "    let result = ReverseInner::new(core, hirs);",
          "    assert_eq!(result, Err(core));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]