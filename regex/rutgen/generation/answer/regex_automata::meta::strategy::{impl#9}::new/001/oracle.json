[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfo::new(",
          "            Config::new()",
          "                .auto_prefilter(true)",
          "                .match_kind(MatchKind::All)",
          "                .build(),",
          "            &[],",
          "        ))),",
          "        pre: Some(Prefilter {",
          "            is_fast: false,",
          "            ..Default::default()",
          "        }),",
          "        hybrid: Some(wrappers::Hybrid::none()),",
          "        dfa: Some(wrappers::DFA::none()),",
          "        nfa: NFA(Arc::new(Inner::default())),",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![]; // provide an appropriate Hir input",
          "    let result = ReverseInner::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    let core = Core {",
          "    info: RegexInfo(Arc::new(RegexInfo::new(",
          "    Config::new()",
          "    .auto_prefilter(true)",
          "    .match_kind(MatchKind::All)",
          "    .build(),",
          "    &[],",
          "    ))),",
          "    pre: Some(Prefilter {",
          "    is_fast: false,",
          "    ..Default::default()",
          "    }),",
          "    hybrid: Some(wrappers::Hybrid::none()),",
          "    dfa: Some(wrappers::DFA::none()),",
          "    nfa: NFA(Arc::new(Inner::default())),",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    };",
          "    assert_eq!(ReverseInner::new(core, &hirs), Err(core));"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfo::new(",
          "            Config::new()",
          "                .auto_prefilter(true)",
          "                .match_kind(MatchKind::All)",
          "                .build(),",
          "            &[],",
          "        ))),",
          "        pre: Some(Prefilter {",
          "            is_fast: false,",
          "            ..Default::default()",
          "        }),",
          "        hybrid: Some(wrappers::Hybrid::none()),",
          "        dfa: Some(wrappers::DFA::none()),",
          "        nfa: NFA(Arc::new(Inner::default())),",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![]; // provide an appropriate Hir input",
          "    let result = ReverseInner::new(core, &hirs);",
          "    let core = Core {",
          "    info: RegexInfo(Arc::new(RegexInfo::new(",
          "    Config::new()",
          "    .auto_prefilter(true)",
          "    .match_kind(MatchKind::All)",
          "    .build(),",
          "    &[],",
          "    ))),",
          "    pre: Some(Prefilter {",
          "    is_fast: false,",
          "    ..Default::default()",
          "    }),",
          "    hybrid: Some(wrappers::Hybrid::none()),",
          "    dfa: Some(wrappers::DFA::none()),",
          "    nfa: NFA(Arc::new(Inner::default())),",
          "    pikevm: wrappers::PikeVM::default(),",
          "    backtrack: wrappers::BoundedBacktracker::default(),",
          "    onepass: wrappers::OnePass::default(),",
          "    };",
          "    assert_eq!(ReverseInner::new(core, &hirs), Err(core));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfo::new(",
          "            Config::new()",
          "                .auto_prefilter(true)",
          "                .match_kind(MatchKind::LeftmostFirst)",
          "                .build(),",
          "            &[],",
          "        ))),",
          "        pre: Some(Prefilter {",
          "            is_fast: false,",
          "            ..Default::default()",
          "        }),",
          "        hybrid: Some(wrappers::Hybrid::none()),",
          "        dfa: Some(wrappers::DFA::none()),",
          "        nfa: NFA(Arc::new(Inner::default())),",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![]; // provide an appropriate Hir input",
          "    let result = ReverseInner::new(core, &hirs);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), core);",
          "    assert!(core.info.config().get_auto_prefilter());",
          "    assert!(core.info.config().get_match_kind() != MatchKind::LeftmostFirst);",
          "    assert!(core.pre.is_some() && !core.pre.as_ref().unwrap().is_fast);",
          "    assert!(core.hybrid.is_some());",
          "    assert!(core.dfa.is_some());"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo(Arc::new(RegexInfo::new(",
          "            Config::new()",
          "                .auto_prefilter(true)",
          "                .match_kind(MatchKind::LeftmostFirst)",
          "                .build(),",
          "            &[],",
          "        ))),",
          "        pre: Some(Prefilter {",
          "            is_fast: false,",
          "            ..Default::default()",
          "        }),",
          "        hybrid: Some(wrappers::Hybrid::none()),",
          "        dfa: Some(wrappers::DFA::none()),",
          "        nfa: NFA(Arc::new(Inner::default())),",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "    };",
          "    let hirs: Vec<&Hir> = vec![]; // provide an appropriate Hir input",
          "    let result = ReverseInner::new(core, &hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), core);",
          "    assert!(core.info.config().get_auto_prefilter());",
          "    assert!(core.info.config().get_match_kind() != MatchKind::LeftmostFirst);",
          "    assert!(core.pre.is_some() && !core.pre.as_ref().unwrap().is_fast);",
          "    assert!(core.hybrid.is_some());",
          "    assert!(core.dfa.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]