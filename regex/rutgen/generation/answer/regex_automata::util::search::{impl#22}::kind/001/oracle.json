[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::quit(42, 0);",
          "    let kind = error.kind();",
          "}"
        ],
        "oracle": [
          "    let error = MatchError::quit(42, 0);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::Quit { byte: 42, offset: 0 });"
        ],
        "code": [
          "{",
          "    let error = MatchError::quit(42, 0);",
          "    let kind = error.kind();",
          "    let error = MatchError::quit(42, 0);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::Quit { byte: 42, offset: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::gave_up(0);",
          "    let kind = error.kind();",
          "}"
        ],
        "oracle": [
          "    let error = MatchError::gave_up(0);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::GaveUp { offset: 0 });"
        ],
        "code": [
          "{",
          "    let error = MatchError::gave_up(0);",
          "    let kind = error.kind();",
          "    let error = MatchError::gave_up(0);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::GaveUp { offset: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::haystack_too_long(100);",
          "    let kind = error.kind();",
          "}"
        ],
        "oracle": [
          "    let error = MatchError::haystack_too_long(100);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::HaystackTooLong { len: 100 });"
        ],
        "code": [
          "{",
          "    let error = MatchError::haystack_too_long(100);",
          "    let kind = error.kind();",
          "    let error = MatchError::haystack_too_long(100);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::HaystackTooLong { len: 100 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAnchored;",
          "    let error = MatchError::unsupported_anchored(DummyAnchored);",
          "    let kind = error.kind();",
          "}"
        ],
        "oracle": [
          "    let error = MatchError::unsupported_anchored(DummyAnchored);",
          "    assert_eq!(kind, &MatchErrorKind::UnsupportedAnchored { mode: DummyAnchored });",
          "    let error = MatchError::quit(0x1A, 5);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::Quit { byte: 0x1A, offset: 5 });",
          "    let error = MatchError::gave_up(10);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::GaveUp { offset: 10 });",
          "    let error = MatchError::haystack_too_long(1024);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::HaystackTooLong { len: 1024 });"
        ],
        "code": [
          "{",
          "    struct DummyAnchored;",
          "    let error = MatchError::unsupported_anchored(DummyAnchored);",
          "    let kind = error.kind();",
          "    let error = MatchError::unsupported_anchored(DummyAnchored);",
          "    assert_eq!(kind, &MatchErrorKind::UnsupportedAnchored { mode: DummyAnchored });",
          "    let error = MatchError::quit(0x1A, 5);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::Quit { byte: 0x1A, offset: 5 });",
          "    let error = MatchError::gave_up(10);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::GaveUp { offset: 10 });",
          "    let error = MatchError::haystack_too_long(1024);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::HaystackTooLong { len: 1024 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::quit(255, 10);",
          "    let kind = error.kind();",
          "}"
        ],
        "oracle": [
          "    let error = MatchError::quit(255, 10);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::Quit { byte: 255, offset: 10 });",
          "    assert!(matches!(kind, MatchErrorKind::Quit { .. }));",
          "    assert_ne!(kind, &MatchErrorKind::GaveUp { offset: 0 });",
          "    assert_ne!(kind, &MatchErrorKind::HaystackTooLong { len: 0 });"
        ],
        "code": [
          "{",
          "    let error = MatchError::quit(255, 10);",
          "    let kind = error.kind();",
          "    let error = MatchError::quit(255, 10);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::Quit { byte: 255, offset: 10 });",
          "    assert!(matches!(kind, MatchErrorKind::Quit { .. }));",
          "    assert_ne!(kind, &MatchErrorKind::GaveUp { offset: 0 });",
          "    assert_ne!(kind, &MatchErrorKind::HaystackTooLong { len: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::haystack_too_long(0);",
          "    let kind = error.kind();",
          "}"
        ],
        "oracle": [
          "    let error = MatchError::haystack_too_long(0);",
          "    assert_eq!(kind, &MatchErrorKind::HaystackTooLong { len: 0 });"
        ],
        "code": [
          "{",
          "    let error = MatchError::haystack_too_long(0);",
          "    let kind = error.kind();",
          "    let error = MatchError::haystack_too_long(0);",
          "    assert_eq!(kind, &MatchErrorKind::HaystackTooLong { len: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = MatchError::gave_up(1000);",
          "    let kind = error.kind();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(kind, &MatchErrorKind::GaveUp { offset: 1000 });"
        ],
        "code": [
          "{",
          "    let error = MatchError::gave_up(1000);",
          "    let kind = error.kind();",
          "    assert_eq!(kind, &MatchErrorKind::GaveUp { offset: 1000 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]