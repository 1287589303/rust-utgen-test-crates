[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x20).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.write_literal_byte(0x7F).unwrap_err();",
          "    writer.write_literal_byte(0x20).unwrap();",
          "    writer.write_literal_byte(0x21).unwrap();",
          "    writer.write_literal_byte(0x2F).unwrap();",
          "    writer.write_literal_byte(0x00).unwrap_err();",
          "    writer.write_literal_byte(0x09).unwrap_err();"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x20).unwrap();",
          "    writer.write_literal_byte(0x7F).unwrap_err();",
          "    writer.write_literal_byte(0x20).unwrap();",
          "    writer.write_literal_byte(0x21).unwrap();",
          "    writer.write_literal_byte(0x2F).unwrap();",
          "    writer.write_literal_byte(0x00).unwrap_err();",
          "    writer.write_literal_byte(0x09).unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x09).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"(?-u:\\\\x09)\");"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x09).unwrap();",
          "    assert_eq!(buffer, \"(?-u:\\\\x09)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x0A).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"(?-u:\\\\x0A)\");"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x0A).unwrap();",
          "    assert_eq!(buffer, \"(?-u:\\\\x0A)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x0C).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"(?-u:\\\\x0C)\");"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x0C).unwrap();",
          "    assert_eq!(buffer, \"(?-u:\\\\x0C)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x0D).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"(?-u:\\\\x0D)\");"
        ],
        "code": [
          "{",
          "    let mut buffer = String::new();",
          "    let mut writer = Writer { wtr: &mut buffer };",
          "    writer.write_literal_byte(0x0D).unwrap();",
          "    assert_eq!(buffer, \"(?-u:\\\\x0D)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]