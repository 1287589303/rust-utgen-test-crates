[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 0; // ASCII control character",
          "    writer.write_literal_byte(input).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 128; // Non-ASCII character",
          "    assert_eq!(writer.write_literal_byte(input).unwrap_err().to_string(), \"(?-u:\\\\x80)\");",
          "    let input = 0xFF; // Non-ASCII character",
          "    assert_eq!(writer.write_literal_byte(input).unwrap_err().to_string(), \"(?-u:\\\\xFF)\");",
          "    let input = 0x20; // ASCII whitespace",
          "    assert_eq!(writer.write_literal_byte(input).unwrap_err().to_string(), \"=expected_output_for_spaces\");",
          "    assert!(output.is_empty());"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 0; // ASCII control character",
          "    writer.write_literal_byte(input).unwrap();",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 128; // Non-ASCII character",
          "    assert_eq!(writer.write_literal_byte(input).unwrap_err().to_string(), \"(?-u:\\\\x80)\");",
          "    let input = 0xFF; // Non-ASCII character",
          "    assert_eq!(writer.write_literal_byte(input).unwrap_err().to_string(), \"(?-u:\\\\xFF)\");",
          "    let input = 0x20; // ASCII whitespace",
          "    assert_eq!(writer.write_literal_byte(input).unwrap_err().to_string(), \"=expected_output_for_spaces\");",
          "    assert!(output.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 32; // ASCII whitespace character",
          "    writer.write_literal_byte(input).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"(?-u:\\\\x20)\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 32; // ASCII whitespace character",
          "    writer.write_literal_byte(input).unwrap();",
          "    assert_eq!(output, \"(?-u:\\\\x20)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 128; // Just above the ASCII range",
          "    writer.write_literal_byte(input).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"(?-u:\\\\x80)\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 128; // Just above the ASCII range",
          "    writer.write_literal_byte(input).unwrap();",
          "    assert_eq!(output, \"(?-u:\\\\x80)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 255; // Maximum value for u8",
          "    writer.write_literal_byte(input).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"(?-u:\\\\xFF)\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let input = 255; // Maximum value for u8",
          "    writer.write_literal_byte(input).unwrap();",
          "    assert_eq!(output, \"(?-u:\\\\xFF)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]