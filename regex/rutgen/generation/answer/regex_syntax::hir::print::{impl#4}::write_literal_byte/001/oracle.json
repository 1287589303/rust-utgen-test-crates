[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut visitor = TestVisitor { output: String::new() };",
          "    let mut writer = Writer { wtr: &mut visitor.output };",
          "",
          "    // Boundary case b = 0x7F (valid ASCII character)",
          "    let _ = writer.write_literal_byte(0x7F);",
          "}"
        ],
        "oracle": [
          "    writer.write_literal_byte(0x7F).is_ok();",
          "    visitor.output.eq(\"(?-u:\\\\x7F)\");",
          "    writer.write_literal_byte(0x00).is_ok();",
          "    visitor.output.eq(\"(?-u:\\\\x00)\");",
          "    writer.write_literal_byte(b'\\n').is_ok();",
          "    visitor.output.eq(\"(?-u:\\\\x0A)\");",
          "    writer.write_literal_byte(0x20).is_ok();",
          "    visitor.output.eq(\" \");",
          "    writer.write_literal_byte(0x41).is_ok();",
          "    visitor.output.eq(\"A\");"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut visitor = TestVisitor { output: String::new() };",
          "    let mut writer = Writer { wtr: &mut visitor.output };",
          "",
          "    // Boundary case b = 0x7F (valid ASCII character)",
          "    let _ = writer.write_literal_byte(0x7F);",
          "    writer.write_literal_byte(0x7F).is_ok();",
          "    visitor.output.eq(\"(?-u:\\\\x7F)\");",
          "    writer.write_literal_byte(0x00).is_ok();",
          "    visitor.output.eq(\"(?-u:\\\\x00)\");",
          "    writer.write_literal_byte(b'\\n').is_ok();",
          "    visitor.output.eq(\"(?-u:\\\\x0A)\");",
          "    writer.write_literal_byte(0x20).is_ok();",
          "    visitor.output.eq(\" \");",
          "    writer.write_literal_byte(0x41).is_ok();",
          "    visitor.output.eq(\"A\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut visitor = TestVisitor { output: String::new() };",
          "    let mut writer = Writer { wtr: &mut visitor.output };",
          "",
          "    // Boundary case b = 0x1F (ASCII control character)",
          "    let _ = writer.write_literal_byte(0x1F);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.output, \"(?-u:\\\\x1F)\");",
          "    assert!(visitor.output.is_empty());",
          "    assert!(visitor.output.contains(\"(?-u:\\\\\"));",
          "    assert!(visitor.output.len() > 0);",
          "    assert!(visitor.output.starts_with(\"(?-u:\\\\\"));",
          "    assert_eq!(writer.write_literal_byte(0x7F).unwrap_err(), fmt::Error);",
          "    assert!(visitor.output.contains(\"(?-u:\\\\x7F)\"));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut visitor = TestVisitor { output: String::new() };",
          "    let mut writer = Writer { wtr: &mut visitor.output };",
          "",
          "    // Boundary case b = 0x1F (ASCII control character)",
          "    let _ = writer.write_literal_byte(0x1F);",
          "    assert_eq!(visitor.output, \"(?-u:\\\\x1F)\");",
          "    assert!(visitor.output.is_empty());",
          "    assert!(visitor.output.contains(\"(?-u:\\\\\"));",
          "    assert!(visitor.output.len() > 0);",
          "    assert!(visitor.output.starts_with(\"(?-u:\\\\\"));",
          "    assert_eq!(writer.write_literal_byte(0x7F).unwrap_err(), fmt::Error);",
          "    assert!(visitor.output.contains(\"(?-u:\\\\x7F)\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut visitor = TestVisitor { output: String::new() };",
          "    let mut writer = Writer { wtr: &mut visitor.output };",
          "",
          "    // Boundary case b = 0x20 (ASCII whitespace)",
          "    let _ = writer.write_literal_byte(0x20);",
          "}"
        ],
        "oracle": [
          "    let result = writer.write_literal_byte(0x7F);",
          "    assert!(result.is_err(), \"Expected error for ASCII control character at b = 0x7F\");",
          "    ",
          "    let result = writer.write_literal_byte(0x1F);",
          "    assert!(result.is_ok(), \"Expected success for non-whitespace, non-control character at b = 0x1F\");",
          "    ",
          "    let result = writer.write_literal_byte(0x7E);",
          "    assert_eq!(visitor.output, \"~\", \"Expected output to be ~ for b = 0x7E\");"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        output: String,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = String;",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(self.output)",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut visitor = TestVisitor { output: String::new() };",
          "    let mut writer = Writer { wtr: &mut visitor.output };",
          "",
          "    // Boundary case b = 0x20 (ASCII whitespace)",
          "    let _ = writer.write_literal_byte(0x20);",
          "    let result = writer.write_literal_byte(0x7F);",
          "    assert!(result.is_err(), \"Expected error for ASCII control character at b = 0x7F\");",
          "    ",
          "    let result = writer.write_literal_byte(0x1F);",
          "    assert!(result.is_ok(), \"Expected success for non-whitespace, non-control character at b = 0x1F\");",
          "    ",
          "    let result = writer.write_literal_byte(0x7E);",
          "    assert_eq!(visitor.output, \"~\", \"Expected output to be ~ for b = 0x7E\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]