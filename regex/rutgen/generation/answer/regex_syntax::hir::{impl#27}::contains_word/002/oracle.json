[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet::empty();",
          "    lookset.contains_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.contains_word(), false);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet::empty();",
          "    lookset.contains_word();",
          "    assert_eq!(lookset.contains_word(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet::full();",
          "    lookset.contains_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.contains_word(), true);",
          "    let lookset_empty = LookSet::empty();",
          "    assert_eq!(lookset_empty.contains_word(), false);",
          "    let lookset_singleton = LookSet::singleton(Look::WordAscii);",
          "    assert_eq!(lookset_singleton.contains_word(), true);",
          "    let lookset_ascii_negate = LookSet::singleton(Look::WordAsciiNegate);",
          "    assert_eq!(lookset_ascii_negate.contains_word(), true);",
          "    let lookset_unicode_negate = LookSet::singleton(Look::WordUnicodeNegate);",
          "    assert_eq!(lookset_unicode_negate.contains_word(), true);",
          "    let lookset_no_words = LookSet::empty().insert(Look::SomeOtherLook);",
          "    assert_eq!(lookset_no_words.contains_word(), false);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet::full();",
          "    lookset.contains_word();",
          "    assert_eq!(lookset.contains_word(), true);",
          "    let lookset_empty = LookSet::empty();",
          "    assert_eq!(lookset_empty.contains_word(), false);",
          "    let lookset_singleton = LookSet::singleton(Look::WordAscii);",
          "    assert_eq!(lookset_singleton.contains_word(), true);",
          "    let lookset_ascii_negate = LookSet::singleton(Look::WordAsciiNegate);",
          "    assert_eq!(lookset_ascii_negate.contains_word(), true);",
          "    let lookset_unicode_negate = LookSet::singleton(Look::WordUnicodeNegate);",
          "    assert_eq!(lookset_unicode_negate.contains_word(), true);",
          "    let lookset_no_words = LookSet::empty().insert(Look::SomeOtherLook);",
          "    assert_eq!(lookset_no_words.contains_word(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordAscii);",
          "    lookset.contains_word();",
          "}"
        ],
        "oracle": [
          "    let lookset = LookSet::singleton(Look::WordAscii);",
          "    assert_eq!(lookset.contains_word(), true);",
          "    let lookset_empty = LookSet::empty();",
          "    assert_eq!(lookset_empty.contains_word(), false);",
          "    let lookset_full = LookSet::full();",
          "    assert_eq!(lookset_full.contains_word(), true);",
          "    let lookset_negated = LookSet::singleton(Look::WordAsciiNegate);",
          "    assert_eq!(lookset_negated.contains_word(), true);",
          "    let lookset_unicode = LookSet::singleton(Look::WordUnicode);",
          "    assert_eq!(lookset_unicode.contains_word(), true);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordAscii);",
          "    lookset.contains_word();",
          "    let lookset = LookSet::singleton(Look::WordAscii);",
          "    assert_eq!(lookset.contains_word(), true);",
          "    let lookset_empty = LookSet::empty();",
          "    assert_eq!(lookset_empty.contains_word(), false);",
          "    let lookset_full = LookSet::full();",
          "    assert_eq!(lookset_full.contains_word(), true);",
          "    let lookset_negated = LookSet::singleton(Look::WordAsciiNegate);",
          "    assert_eq!(lookset_negated.contains_word(), true);",
          "    let lookset_unicode = LookSet::singleton(Look::WordUnicode);",
          "    assert_eq!(lookset_unicode.contains_word(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordAsciiNegate);",
          "    lookset.contains_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.contains_word(), true);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordAsciiNegate);",
          "    lookset.contains_word();",
          "    assert_eq!(lookset.contains_word(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordStartHalfAscii);",
          "    lookset.contains_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.contains_word(), false);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordStartHalfAscii);",
          "    lookset.contains_word();",
          "    assert_eq!(lookset.contains_word(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordEndHalfAscii);",
          "    lookset.contains_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.contains_word(), true);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet::singleton(Look::WordEndHalfAscii);",
          "    lookset.contains_word();",
          "    assert_eq!(lookset.contains_word(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordAscii);",
          "    lookset.set_insert(Look::WordStartHalfAscii);",
          "    lookset.contains_word();",
          "}"
        ],
        "oracle": [
          "    assert!(!lookset.contains_word_unicode());",
          "    assert!(lookset.contains_word_ascii());",
          "    assert!(lookset.contains_word());",
          "    assert_eq!(lookset.len(), 2);",
          "    assert!(!lookset.is_empty());"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordAscii);",
          "    lookset.set_insert(Look::WordStartHalfAscii);",
          "    lookset.contains_word();",
          "    assert!(!lookset.contains_word_unicode());",
          "    assert!(lookset.contains_word_ascii());",
          "    assert!(lookset.contains_word());",
          "    assert_eq!(lookset.len(), 2);",
          "    assert!(!lookset.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordAscii);",
          "    lookset.set_insert(Look::WordAsciiNegate);",
          "    lookset.contains_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.contains_word(), true);",
          "    lookset.set_remove(Look::WordAscii);",
          "    assert_eq!(lookset.contains_word(), true);",
          "    lookset.set_remove(Look::WordAsciiNegate);",
          "    assert_eq!(lookset.contains_word(), false);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::WordAscii);",
          "    lookset.set_insert(Look::WordAsciiNegate);",
          "    lookset.contains_word();",
          "    assert_eq!(lookset.contains_word(), true);",
          "    lookset.set_remove(Look::WordAscii);",
          "    assert_eq!(lookset.contains_word(), true);",
          "    lookset.set_remove(Look::WordAsciiNegate);",
          "    assert_eq!(lookset.contains_word(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]