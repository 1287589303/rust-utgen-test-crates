[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = Utf8Range { start: 0, end: 0 };",
          "    let sequence = Utf8Sequence::One(range);",
          "    let slice = sequence.as_slice();",
          "}"
        ],
        "oracle": [
          "    let range = Utf8Range { start: 0, end: 0 };",
          "    let sequence = Utf8Sequence::One(range);",
          "    assert_eq!(slice.len(), 1);",
          "    assert_eq!(slice[0], range);",
          "    assert_eq!(slice.as_ptr(), &range as *const _);"
        ],
        "code": [
          "{",
          "    let range = Utf8Range { start: 0, end: 0 };",
          "    let sequence = Utf8Sequence::One(range);",
          "    let slice = sequence.as_slice();",
          "    let range = Utf8Range { start: 0, end: 0 };",
          "    let sequence = Utf8Sequence::One(range);",
          "    assert_eq!(slice.len(), 1);",
          "    assert_eq!(slice[0], range);",
          "    assert_eq!(slice.as_ptr(), &range as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range_start = Utf8Range { start: 0, end: 255 };",
          "    let sequence_start = Utf8Sequence::One(range_start);",
          "    let slice_start = sequence_start.as_slice();",
          "    ",
          "    let range_end = Utf8Range { start: 255, end: 255 };",
          "    let sequence_end = Utf8Sequence::One(range_end);",
          "    let slice_end = sequence_end.as_slice();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice_start.len(), 1);",
          "    assert_eq!(slice_start[0], Utf8Range { start: 0, end: 255 });",
          "    assert_eq!(slice_end.len(), 1);",
          "    assert_eq!(slice_end[0], Utf8Range { start: 255, end: 255 });"
        ],
        "code": [
          "{",
          "    let range_start = Utf8Range { start: 0, end: 255 };",
          "    let sequence_start = Utf8Sequence::One(range_start);",
          "    let slice_start = sequence_start.as_slice();",
          "    ",
          "    let range_end = Utf8Range { start: 255, end: 255 };",
          "    let sequence_end = Utf8Sequence::One(range_end);",
          "    let slice_end = sequence_end.as_slice();",
          "    assert_eq!(slice_start.len(), 1);",
          "    assert_eq!(slice_start[0], Utf8Range { start: 0, end: 255 });",
          "    assert_eq!(slice_end.len(), 1);",
          "    assert_eq!(slice_end[0], Utf8Range { start: 255, end: 255 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]