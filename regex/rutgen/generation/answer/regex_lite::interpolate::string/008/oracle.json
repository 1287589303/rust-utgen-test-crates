[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"This is a test string.\";",
          "    ",
          "    let append = |_, _: &mut String| {};",
          "    let name_to_index = |_| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"This is a test string.\"",
          "    dst.len() == replacement.len()",
          "    dst.contains('$') == false",
          "    dst.is_empty() == false",
          "    replacement == \"This is a test string.\""
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"This is a test string.\";",
          "    ",
          "    let append = |_, _: &mut String| {};",
          "    let name_to_index = |_| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"This is a test string.\"",
          "    dst.len() == replacement.len()",
          "    dst.contains('$') == false",
          "    dst.is_empty() == false",
          "    replacement == \"This is a test string.\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"Leading text followed by a sentence.\";",
          "    ",
          "    let append = |_, _: &mut String| {};",
          "    let name_to_index = |_| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"Leading text followed by a sentence.\"",
          "    dst.len() == \"Leading text followed by a sentence.\".len()",
          "    dst.is_empty() == false",
          "    dst.contains('$') == false"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"Leading text followed by a sentence.\";",
          "    ",
          "    let append = |_, _: &mut String| {};",
          "    let name_to_index = |_| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"Leading text followed by a sentence.\"",
          "    dst.len() == \"Leading text followed by a sentence.\".len()",
          "    dst.is_empty() == false",
          "    dst.contains('$') == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"A sentence followed by trailing text.\";",
          "    ",
          "    let append = |_, _: &mut String| {};",
          "    let name_to_index = |_| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst.is_empty() == false",
          "    dst == \"A sentence followed by trailing text.\""
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"A sentence followed by trailing text.\";",
          "    ",
          "    let append = |_, _: &mut String| {};",
          "    let name_to_index = |_| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst.is_empty() == false",
          "    dst == \"A sentence followed by trailing text.\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"Just some plain text.\";",
          "    ",
          "    let append = |_, _: &mut String| {};",
          "    let name_to_index = |_| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"Just some plain text.\""
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"Just some plain text.\";",
          "    ",
          "    let append = |_, _: &mut String| {};",
          "    let name_to_index = |_| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"Just some plain text.\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]