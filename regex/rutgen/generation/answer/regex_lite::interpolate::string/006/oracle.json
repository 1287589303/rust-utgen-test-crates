[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"abc$def${name}ghi\";",
          "    ",
          "    let mut append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"value0\");",
          "        } else if index == 1 {",
          "            dst.push_str(\"value1\");",
          "        }",
          "    };",
          "    ",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1) // Maps \"name\" to index 1",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "    ",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"abcvalue1ghi\"",
          "    replacement.is_empty() == true",
          "    append called with index 1",
          "    name_to_index(\"name\") == Some(1)",
          "    find_cap_ref(replacement.as_bytes()) == Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 })",
          "    replacement.contains('$') == false",
          "    replacement.starts_with('$') == false",
          "    replacement.len() > 0"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"abc$def${name}ghi\";",
          "    ",
          "    let mut append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"value0\");",
          "        } else if index == 1 {",
          "            dst.push_str(\"value1\");",
          "        }",
          "    };",
          "    ",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1) // Maps \"name\" to index 1",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "    ",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"abcvalue1ghi\"",
          "    replacement.is_empty() == true",
          "    append called with index 1",
          "    name_to_index(\"name\") == Some(1)",
          "    find_cap_ref(replacement.as_bytes()) == Some(CaptureRef { cap: Ref::Named(\"name\"), end: 5 })",
          "    replacement.contains('$') == false",
          "    replacement.starts_with('$') == false",
          "    replacement.len() > 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]