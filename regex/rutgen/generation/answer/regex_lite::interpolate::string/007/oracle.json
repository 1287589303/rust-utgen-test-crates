[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$0\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"value_for_0\");",
          "        }",
          "    };",
          "    let name_to_index = |_| None;",
          "    ",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"value_for_0\"",
          "    replacement == \"\"",
          "    append(0, &mut dst) called",
          "    name_to_index(\"$\") == None",
          "    debug_assert!(!(replacement.is_empty()))"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$0\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"value_for_0\");",
          "        }",
          "    };",
          "    let name_to_index = |_| None;",
          "    ",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"value_for_0\"",
          "    replacement == \"\"",
          "    append(0, &mut dst) called",
          "    name_to_index(\"$\") == None",
          "    debug_assert!(!(replacement.is_empty()))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$name\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 1 {",
          "            dst.push_str(\"value_for_name\");",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"value_for_name\"",
          "    replacement == \"\"",
          "    append called with argument 1",
          "    name_to_index called with argument \"name\" returning Some(1)"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$name\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 1 {",
          "            dst.push_str(\"value_for_name\");",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"value_for_name\"",
          "    replacement == \"\"",
          "    append called with argument 1",
          "    name_to_index called with argument \"name\" returning Some(1)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$0$other$name\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"value_for_0\");",
          "        } else if i == 1 {",
          "            dst.push_str(\"value_for_name\");",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst.push_str(\"$other$name\");",
          "    replacement = \"$other$name\";",
          "    replacement.is_empty() == false;",
          "    replacement.find('$') == Some(0);",
          "    replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') == false;",
          "    find_cap_ref(replacement.as_bytes()).is_none() == true;",
          "    dst.push_str(replacement);"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$0$other$name\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"value_for_0\");",
          "        } else if i == 1 {",
          "            dst.push_str(\"value_for_name\");",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst.push_str(\"$other$name\");",
          "    replacement = \"$other$name\";",
          "    replacement.is_empty() == false;",
          "    replacement.find('$') == Some(0);",
          "    replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') == false;",
          "    find_cap_ref(replacement.as_bytes()).is_none() == true;",
          "    dst.push_str(replacement);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$$0$name\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"value_for_0\");",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst.should_equal(\"value_for_0\");",
          "    dst.should_contain(\"name\");"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$$0$name\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"value_for_0\");",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst.should_equal(\"value_for_0\");",
          "    dst.should_contain(\"name\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]