[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$0 test $1\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"first_capture\");",
          "        } else if i == 1 {",
          "            dst.push_str(\"second_capture\");",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| match name {",
          "        \"first\" => Some(0),",
          "        \"second\" => Some(1),",
          "        _ => None,",
          "    };",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"first_capture test second_capture\");",
          "    assert!(!dst.is_empty());",
          "    assert!(replacement.is_empty());",
          "    assert_eq!(dst.contains(\"first_capture\"), true);",
          "    assert_eq!(dst.contains(\"second_capture\"), true);",
          "    assert_eq!(replacement.find('$'), None);",
          "    assert_eq!(dst.len(), 30);"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$0 test $1\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"first_capture\");",
          "        } else if i == 1 {",
          "            dst.push_str(\"second_capture\");",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| match name {",
          "        \"first\" => Some(0),",
          "        \"second\" => Some(1),",
          "        _ => None,",
          "    };",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, \"first_capture test second_capture\");",
          "    assert!(!dst.is_empty());",
          "    assert!(replacement.is_empty());",
          "    assert_eq!(dst.contains(\"first_capture\"), true);",
          "    assert_eq!(dst.contains(\"second_capture\"), true);",
          "    assert_eq!(replacement.find('$'), None);",
          "    assert_eq!(dst.len(), 30);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$0 test $name\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"exists\");",
          "        }",
          "    };",
          "    let name_to_index = |_| None;",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"exists test $name\"",
          "    dst.len() == 22",
          "    dst.contains(\"exists\") == true",
          "    dst.contains(\"test\") == true",
          "    dst.contains(\"$name\") == true",
          "    (dst == \"exists test $name\") && (dst.is_empty() == false)",
          "    append.call_count == 1"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$0 test $name\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"exists\");",
          "        }",
          "    };",
          "    let name_to_index = |_| None;",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"exists test $name\"",
          "    dst.len() == 22",
          "    dst.contains(\"exists\") == true",
          "    dst.contains(\"test\") == true",
          "    dst.contains(\"$name\") == true",
          "    (dst == \"exists test $name\") && (dst.is_empty() == false)",
          "    append.call_count == 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$$0 should be escaped $1\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"value\");",
          "        } else if i == 1 {",
          "            dst.push_str(\"another_value\");",
          "        }",
          "    };",
          "    let name_to_index = |_| None;",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"value should be escaped another_value\"",
          "    replacement.is_empty() == true",
          "    append_called_with(0) == true",
          "    append_called_with(1) == true"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$$0 should be escaped $1\";",
          "    let mut append = |i: usize, dst: &mut String| {",
          "        if i == 0 {",
          "            dst.push_str(\"value\");",
          "        } else if i == 1 {",
          "            dst.push_str(\"another_value\");",
          "        }",
          "    };",
          "    let name_to_index = |_| None;",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"value should be escaped another_value\"",
          "    replacement.is_empty() == true",
          "    append_called_with(0) == true",
          "    append_called_with(1) == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]