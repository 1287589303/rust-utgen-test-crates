[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$1\";",
          "    let mut capture_values = vec![\"value1\"];",
          "    let append = |i: usize, dst: &mut String| {",
          "        if i < capture_values.len() {",
          "            dst.push_str(capture_values[i]);",
          "        }",
          "    };",
          "    let name_to_index = |_name: &str| None; // No named captures in this case",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"value1\"",
          "    capture_values.len() == 1",
          "    replacement == \"$1\"",
          "    replacement.contains('$') == true",
          "    dst.is_empty() == false"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$1\";",
          "    let mut capture_values = vec![\"value1\"];",
          "    let append = |i: usize, dst: &mut String| {",
          "        if i < capture_values.len() {",
          "            dst.push_str(capture_values[i]);",
          "        }",
          "    };",
          "    let name_to_index = |_name: &str| None; // No named captures in this case",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"value1\"",
          "    capture_values.len() == 1",
          "    replacement == \"$1\"",
          "    replacement.contains('$') == true",
          "    dst.is_empty() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"${name}\";",
          "    let capture_values = vec![\"value1\"];",
          "    let append = |i: usize, dst: &mut String| {",
          "        if i < capture_values.len() {",
          "            dst.push_str(capture_values[i]);",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" { Some(0) } else { None }",
          "    };",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"value1\"",
          "    dst.len() == 6",
          "    replacement.is_empty() == true",
          "    capture_values.len() == 1",
          "    append(0, &mut dst) called == true",
          "    name_to_index(\"name\") == Some(0)",
          "    replacement.contains(\"$\") == false",
          "    dst.contains(\"value1\") == true"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"${name}\";",
          "    let capture_values = vec![\"value1\"];",
          "    let append = |i: usize, dst: &mut String| {",
          "        if i < capture_values.len() {",
          "            dst.push_str(capture_values[i]);",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" { Some(0) } else { None }",
          "    };",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"value1\"",
          "    dst.len() == 6",
          "    replacement.is_empty() == true",
          "    capture_values.len() == 1",
          "    append(0, &mut dst) called == true",
          "    name_to_index(\"name\") == Some(0)",
          "    replacement.contains(\"$\") == false",
          "    dst.contains(\"value1\") == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$$1\";",
          "    let mut capture_values = vec![\"value1\"];",
          "    let append = |i: usize, dst: &mut String| {",
          "        if i < capture_values.len() {",
          "            dst.push_str(capture_values[i]);",
          "        }",
          "    };",
          "    let name_to_index = |_name: &str| None;",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"$value1\"",
          "    replacement.is_empty() == true",
          "    capture_values[0] == \"value1\"",
          "    append.call_count() == 1",
          "    name_to_index.call_count() == 0"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$$1\";",
          "    let mut capture_values = vec![\"value1\"];",
          "    let append = |i: usize, dst: &mut String| {",
          "        if i < capture_values.len() {",
          "            dst.push_str(capture_values[i]);",
          "        }",
          "    };",
          "    let name_to_index = |_name: &str| None;",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"$value1\"",
          "    replacement.is_empty() == true",
          "    capture_values[0] == \"value1\"",
          "    append.call_count() == 1",
          "    name_to_index.call_count() == 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$1 and ${name}\";",
          "    let capture_values = vec![\"value1\", \"value2\"];",
          "    let append = |i: usize, dst: &mut String| {",
          "        if i < capture_values.len() {",
          "            dst.push_str(capture_values[i]);",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" { Some(0) } else { None }",
          "    };",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"value1 and value1\"",
          "    dst == \"value2 and \"",
          "    dst == \"\"",
          "    dst.contains(\"$\") == false"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"$1 and ${name}\";",
          "    let capture_values = vec![\"value1\", \"value2\"];",
          "    let append = |i: usize, dst: &mut String| {",
          "        if i < capture_values.len() {",
          "            dst.push_str(capture_values[i]);",
          "        }",
          "    };",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" { Some(0) } else { None }",
          "    };",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"value1 and value1\"",
          "    dst == \"value2 and \"",
          "    dst == \"\"",
          "    dst.contains(\"$\") == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"No captures here.\";",
          "    let append = |_i: usize, _dst: &mut String| {}; // No captures to append",
          "    let name_to_index = |_name: &str| None; // No named captures",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst == \"No captures here.\"",
          "    dst.len() == replacement.len()",
          "    dst.contains(\"$\") == false",
          "    dst.is_empty() == false",
          "    dst == replacement"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"No captures here.\";",
          "    let append = |_i: usize, _dst: &mut String| {}; // No captures to append",
          "    let name_to_index = |_name: &str| None; // No named captures",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    dst == \"No captures here.\"",
          "    dst.len() == replacement.len()",
          "    dst.contains(\"$\") == false",
          "    dst.is_empty() == false",
          "    dst == replacement",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]