[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State { transitions: vec![] };",
          "    state.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.transitions.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut state = State { transitions: vec![] };",
          "    state.clear();",
          "    assert_eq!(state.transitions.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State {",
          "        transitions: vec![Transition {",
          "            range: Utf8Range { start: 0, end: 0 },",
          "            next_id: StateID::new_unchecked(2),",
          "        }],",
          "    };",
          "    state.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.transitions.len(), 0);",
          "    assert!(state.transitions.is_empty());",
          "    assert!(state.transitions.iter().all(|t| t.next_id != StateID::new_unchecked(2)));",
          "    assert!(state.transitions.iter().find(|t| t.next_id == StateID::new_unchecked(2)).is_none());",
          "    assert!(state.transitions.iter().find(|t| t.range.start == 0).is_none());",
          "    assert!(state.transitions.iter().find(|t| t.range.end == 0).is_none());"
        ],
        "code": [
          "{",
          "    let mut state = State {",
          "        transitions: vec![Transition {",
          "            range: Utf8Range { start: 0, end: 0 },",
          "            next_id: StateID::new_unchecked(2),",
          "        }],",
          "    };",
          "    state.clear();",
          "    assert_eq!(state.transitions.len(), 0);",
          "    assert!(state.transitions.is_empty());",
          "    assert!(state.transitions.iter().all(|t| t.next_id != StateID::new_unchecked(2)));",
          "    assert!(state.transitions.iter().find(|t| t.next_id == StateID::new_unchecked(2)).is_none());",
          "    assert!(state.transitions.iter().find(|t| t.range.start == 0).is_none());",
          "    assert!(state.transitions.iter().find(|t| t.range.end == 0).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State {",
          "        transitions: vec![",
          "            Transition {",
          "                range: Utf8Range { start: 0, end: 0 },",
          "                next_id: StateID::new_unchecked(2),",
          "            },",
          "            Transition {",
          "                range: Utf8Range { start: 255, end: 255 },",
          "                next_id: StateID::new_unchecked(3),",
          "            },",
          "        ],",
          "    };",
          "    state.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.transitions.len(), 0);",
          "    assert!(state.transitions.is_empty());",
          "    assert_ne!(state.transitions.len(), 2);",
          "    assert_eq!(state.transitions.get(0), None);",
          "    assert_eq!(state.transitions.get(1), None);"
        ],
        "code": [
          "{",
          "    let mut state = State {",
          "        transitions: vec![",
          "            Transition {",
          "                range: Utf8Range { start: 0, end: 0 },",
          "                next_id: StateID::new_unchecked(2),",
          "            },",
          "            Transition {",
          "                range: Utf8Range { start: 255, end: 255 },",
          "                next_id: StateID::new_unchecked(3),",
          "            },",
          "        ],",
          "    };",
          "    state.clear();",
          "    assert_eq!(state.transitions.len(), 0);",
          "    assert!(state.transitions.is_empty());",
          "    assert_ne!(state.transitions.len(), 2);",
          "    assert_eq!(state.transitions.get(0), None);",
          "    assert_eq!(state.transitions.get(1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state = State {",
          "        transitions: vec![",
          "            Transition {",
          "                range: Utf8Range { start: 0, end: 0 },",
          "                next_id: StateID::new_unchecked(1),",
          "            },",
          "            Transition {",
          "                range: Utf8Range { start: 255, end: 255 },",
          "                next_id: StateID::new_unchecked(4),",
          "            },",
          "            Transition {",
          "                range: Utf8Range { start: 1, end: 254 },",
          "                next_id: StateID::new_unchecked(5),",
          "            },",
          "        ],",
          "    };",
          "    state.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.transitions.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut state = State {",
          "        transitions: vec![",
          "            Transition {",
          "                range: Utf8Range { start: 0, end: 0 },",
          "                next_id: StateID::new_unchecked(1),",
          "            },",
          "            Transition {",
          "                range: Utf8Range { start: 255, end: 255 },",
          "                next_id: StateID::new_unchecked(4),",
          "            },",
          "            Transition {",
          "                range: Utf8Range { start: 1, end: 254 },",
          "                next_id: StateID::new_unchecked(5),",
          "            },",
          "        ],",
          "    };",
          "    state.clear();",
          "    assert_eq!(state.transitions.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]