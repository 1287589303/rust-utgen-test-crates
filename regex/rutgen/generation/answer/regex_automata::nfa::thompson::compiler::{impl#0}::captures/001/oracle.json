[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(None)",
          "        .shrink(false)",
          "        .which_captures(WhichCaptures::All);",
          "    let config_result = config.captures(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config_result.get_which_captures(), WhichCaptures::All);",
          "    assert!(config_result.get_utf8());",
          "    assert!(!config_result.get_reverse());",
          "    assert_eq!(config_result.get_nfa_size_limit(), None);",
          "    assert!(!config_result.get_shrink());",
          "    assert!(config_result.get_captures());"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(None)",
          "        .shrink(false)",
          "        .which_captures(WhichCaptures::All);",
          "    let config_result = config.captures(true);",
          "    assert_eq!(config_result.get_which_captures(), WhichCaptures::All);",
          "    assert!(config_result.get_utf8());",
          "    assert!(!config_result.get_reverse());",
          "    assert_eq!(config_result.get_nfa_size_limit(), None);",
          "    assert!(!config_result.get_shrink());",
          "    assert!(config_result.get_captures());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(None)",
          "        .shrink(true)",
          "        .which_captures(WhichCaptures::All);",
          "    let config_result = config.captures(true);",
          "}"
        ],
        "oracle": [
          "    assert!(config_result.get_which_captures() == WhichCaptures::All);",
          "    assert!(config_result.get_utf8() == true);",
          "    assert!(config_result.get_reverse() == false);",
          "    assert!(config_result.get_nfa_size_limit() == None);",
          "    assert!(config_result.get_shrink() == true);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(None)",
          "        .shrink(true)",
          "        .which_captures(WhichCaptures::All);",
          "    let config_result = config.captures(true);",
          "    assert!(config_result.get_which_captures() == WhichCaptures::All);",
          "    assert!(config_result.get_utf8() == true);",
          "    assert!(config_result.get_reverse() == false);",
          "    assert!(config_result.get_nfa_size_limit() == None);",
          "    assert!(config_result.get_shrink() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(Some(1024))",
          "        .shrink(false)",
          "        .which_captures(WhichCaptures::All);",
          "    let config_result = config.captures(true);",
          "}"
        ],
        "oracle": [
          "    assert!(config_result.get_which_captures() == WhichCaptures::All);",
          "    assert!(config_result.get_utf8() == true);",
          "    assert!(config_result.get_reverse() == false);",
          "    assert!(config_result.get_nfa_size_limit() == Some(1024));",
          "    assert!(config_result.get_shrink() == false);"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(Some(1024))",
          "        .shrink(false)",
          "        .which_captures(WhichCaptures::All);",
          "    let config_result = config.captures(true);",
          "    assert!(config_result.get_which_captures() == WhichCaptures::All);",
          "    assert!(config_result.get_utf8() == true);",
          "    assert!(config_result.get_reverse() == false);",
          "    assert!(config_result.get_nfa_size_limit() == Some(1024));",
          "    assert!(config_result.get_shrink() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]