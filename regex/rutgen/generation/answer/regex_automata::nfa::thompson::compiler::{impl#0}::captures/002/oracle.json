[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(None)",
          "        .shrink(true)",
          "        .which_captures(WhichCaptures::None)",
          "        .look_matcher(LookMatcher {",
          "            lineterm: DebugByte::default(),",
          "        });",
          "",
          "    let _ = config.captures(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None)",
          "    assert!(config.get_utf8())",
          "    assert!(!config.get_reverse())",
          "    assert_eq!(config.get_nfa_size_limit(), None)",
          "    assert!(config.get_shrink())",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default())"
        ],
        "code": [
          "{",
          "    let config = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(None)",
          "        .shrink(true)",
          "        .which_captures(WhichCaptures::None)",
          "        .look_matcher(LookMatcher {",
          "            lineterm: DebugByte::default(),",
          "        });",
          "",
          "    let _ = config.captures(false);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None)",
          "    assert!(config.get_utf8())",
          "    assert!(!config.get_reverse())",
          "    assert_eq!(config.get_nfa_size_limit(), None)",
          "    assert!(config.get_shrink())",
          "    assert_eq!(config.get_look_matcher().lineterm, DebugByte::default())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config_zero = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(None)",
          "        .shrink(true)",
          "        .which_captures(WhichCaptures::None)",
          "        .look_matcher(LookMatcher {",
          "            lineterm: DebugByte::default(),",
          "        });",
          "",
          "    let _ = config_zero.captures(false);",
          "",
          "    let config_max = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(Some(usize::MAX))",
          "        .shrink(true)",
          "        .which_captures(WhichCaptures::None)",
          "        .look_matcher(LookMatcher {",
          "            lineterm: DebugByte::default(),",
          "        });",
          "",
          "    let _ = config_max.captures(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config_zero.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config_max.get_which_captures(), WhichCaptures::None);",
          "    assert!(config_zero.get_reverse() == false);",
          "    assert!(config_max.get_reverse() == false);"
        ],
        "code": [
          "{",
          "    let config_zero = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(None)",
          "        .shrink(true)",
          "        .which_captures(WhichCaptures::None)",
          "        .look_matcher(LookMatcher {",
          "            lineterm: DebugByte::default(),",
          "        });",
          "",
          "    let _ = config_zero.captures(false);",
          "",
          "    let config_max = Config::new()",
          "        .utf8(true)",
          "        .reverse(false)",
          "        .nfa_size_limit(Some(usize::MAX))",
          "        .shrink(true)",
          "        .which_captures(WhichCaptures::None)",
          "        .look_matcher(LookMatcher {",
          "            lineterm: DebugByte::default(),",
          "        });",
          "",
          "    let _ = config_max.captures(false);",
          "    assert_eq!(config_zero.get_which_captures(), WhichCaptures::None);",
          "    assert_eq!(config_max.get_which_captures(), WhichCaptures::None);",
          "    assert!(config_zero.get_reverse() == false);",
          "    assert!(config_max.get_reverse() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]