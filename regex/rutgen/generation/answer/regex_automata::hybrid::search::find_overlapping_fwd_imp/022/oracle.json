[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"abcde\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span { start: 0, end: haystack.len() })",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: Some(LazyStateID::new_unchecked(0)),",
          "        at: 0,",
          "        next_match_index: Some(1),",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let mut dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::always_match(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    dfa.next_state_untagged(&mut cache, LazyStateID::new_unchecked(0), b'a');",
          "",
          "    let result = find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id, Some(LazyStateID::new_unchecked(0)));",
          "    assert_eq!(state.next_match_index, Some(1));",
          "    assert!(dfa.match_len(&cache, state.id.unwrap()) > 0);",
          "    assert!(state.at < input.end());",
          "    assert!(input.haystack()[state.at] == b'a');",
          "    assert_eq!(result, Ok(()));",
          "    assert!(state.mat.is_some());",
          "    assert_eq!(state.next_match_index, Some(2));",
          "    assert_eq!(cache.bytes_searched, 1);",
          "    assert!(cache.memory_usage() < cache.cache_capacity);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"abcde\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span { start: 0, end: haystack.len() })",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: Some(LazyStateID::new_unchecked(0)),",
          "        at: 0,",
          "        next_match_index: Some(1),",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let mut dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::always_match(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    dfa.next_state_untagged(&mut cache, LazyStateID::new_unchecked(0), b'a');",
          "",
          "    let result = find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state);",
          "    assert!(result.is_ok());",
          "    assert_eq!(state.id, Some(LazyStateID::new_unchecked(0)));",
          "    assert_eq!(state.next_match_index, Some(1));",
          "    assert!(dfa.match_len(&cache, state.id.unwrap()) > 0);",
          "    assert!(state.at < input.end());",
          "    assert!(input.haystack()[state.at] == b'a');",
          "    assert_eq!(result, Ok(()));",
          "    assert!(state.mat.is_some());",
          "    assert_eq!(state.next_match_index, Some(2));",
          "    assert_eq!(cache.bytes_searched, 1);",
          "    assert!(cache.memory_usage() < cache.cache_capacity);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"fghij\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span { start: 0, end: haystack.len() })",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: Some(LazyStateID::new_unchecked(1)),",
          "        at: 0,",
          "        next_match_index: Some(1),",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let mut dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::always_match(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    dfa.next_state_untagged(&mut cache, LazyStateID::new_unchecked(1), b'f');",
          "",
          "    let result = find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = b\"fghij\";",
          "    let input = Input::new(&haystack)",
          "    .span(Span { start: 0, end: haystack.len() })",
          "    .anchored(Anchored::Yes)",
          "    .earliest(true);",
          "    ",
          "    let mut state = OverlappingState {",
          "    mat: None,",
          "    id: Some(LazyStateID::new_unchecked(1)),",
          "    at: 0,",
          "    next_match_index: Some(1),",
          "    rev_eoi: false,",
          "    };",
          "    ",
          "    let mut dfa = DFA {",
          "    config: Config::default(),",
          "    nfa: NFA::always_match(),",
          "    stride2: 1,",
          "    start_map: StartByteMap::default(),",
          "    classes: ByteClasses::default(),",
          "    quitset: ByteSet::default(),",
          "    cache_capacity: 10,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    dfa.next_state_untagged(&mut cache, LazyStateID::new_unchecked(1), b'f');",
          "    ",
          "    let result = find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"fghij\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span { start: 0, end: haystack.len() })",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: Some(LazyStateID::new_unchecked(1)),",
          "        at: 0,",
          "        next_match_index: Some(1),",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let mut dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::always_match(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    dfa.next_state_untagged(&mut cache, LazyStateID::new_unchecked(1), b'f');",
          "",
          "    let result = find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state);",
          "    assert!(result.is_ok());",
          "    let haystack: &[u8] = b\"fghij\";",
          "    let input = Input::new(&haystack)",
          "    .span(Span { start: 0, end: haystack.len() })",
          "    .anchored(Anchored::Yes)",
          "    .earliest(true);",
          "    ",
          "    let mut state = OverlappingState {",
          "    mat: None,",
          "    id: Some(LazyStateID::new_unchecked(1)),",
          "    at: 0,",
          "    next_match_index: Some(1),",
          "    rev_eoi: false,",
          "    };",
          "    ",
          "    let mut dfa = DFA {",
          "    config: Config::default(),",
          "    nfa: NFA::always_match(),",
          "    stride2: 1,",
          "    start_map: StartByteMap::default(),",
          "    classes: ByteClasses::default(),",
          "    quitset: ByteSet::default(),",
          "    cache_capacity: 10,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    dfa.next_state_untagged(&mut cache, LazyStateID::new_unchecked(1), b'f');",
          "    ",
          "    let result = find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"xyzabc\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span { start: 0, end: haystack.len() })",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: Some(LazyStateID::new_unchecked(2)),",
          "        at: 0,",
          "        next_match_index: Some(2),",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let mut dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::always_match(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    dfa.next_state_untagged(&mut cache, LazyStateID::new_unchecked(2), b'x');",
          "",
          "    let result = find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.id, Some(LazyStateID::new_unchecked(2)));",
          "    assert_eq!(state.next_match_index, Some(2));",
          "    assert!(state.next_match_index.unwrap() < dfa.match_len(&cache, LazyStateID::new_unchecked(2)));",
          "    assert!(find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state).is_ok());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"xyzabc\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span { start: 0, end: haystack.len() })",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: Some(LazyStateID::new_unchecked(2)),",
          "        at: 0,",
          "        next_match_index: Some(2),",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let mut dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::always_match(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    dfa.next_state_untagged(&mut cache, LazyStateID::new_unchecked(2), b'x');",
          "",
          "    let result = find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state);",
          "    assert!(result.is_ok());",
          "    assert_eq!(state.id, Some(LazyStateID::new_unchecked(2)));",
          "    assert_eq!(state.next_match_index, Some(2));",
          "    assert!(state.next_match_index.unwrap() < dfa.match_len(&cache, LazyStateID::new_unchecked(2)));",
          "    assert!(find_overlapping_fwd_imp(&dfa, &mut cache, &input, None, &mut state).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]