[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let result = crate::dfa::accel::from_bytes_unchecked(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind(), DeserializeErrorKind::BufferTooSmall);",
          "    assert!(result.err().unwrap().what.contains(\"accelerators length\"));"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[];",
          "    let result = crate::dfa::accel::from_bytes_unchecked(slice);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind(), DeserializeErrorKind::BufferTooSmall);",
          "    assert!(result.err().unwrap().what.contains(\"accelerators length\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &b\"\\x01\\x02\\x03\"[..]; // Length 3, unaligned",
          "    let result = crate::dfa::accel::from_bytes_unchecked(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, DeserializeErrorKind::InvalidUSize(\"accelerators length\"));",
          "    assert!(result.unwrap_err().slice.len() < ACCEL_LEN);",
          "    assert!(result.unwrap_err().slice.len() % ACCEL_TY_SIZE != 0);",
          "    assert!(result.unwrap_err().slice.len() > 0);",
          "    assert!(result.unwrap_err().alignment.is_err());"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &b\"\\x01\\x02\\x03\"[..]; // Length 3, unaligned",
          "    let result = crate::dfa::accel::from_bytes_unchecked(slice);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, DeserializeErrorKind::InvalidUSize(\"accelerators length\"));",
          "    assert!(result.unwrap_err().slice.len() < ACCEL_LEN);",
          "    assert!(result.unwrap_err().slice.len() % ACCEL_TY_SIZE != 0);",
          "    assert!(result.unwrap_err().slice.len() > 0);",
          "    assert!(result.unwrap_err().alignment.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]