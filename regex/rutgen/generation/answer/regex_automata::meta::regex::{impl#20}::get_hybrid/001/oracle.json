[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().hybrid(true);",
          "    let _ = config.get_hybrid();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config = Config::new().hybrid(false);",
          "    assert_eq!(config.get_hybrid(), false);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().hybrid(true);",
          "    let _ = config.get_hybrid();",
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config = Config::new().hybrid(false);",
          "    assert_eq!(config.get_hybrid(), false);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().hybrid(false);",
          "    let _ = config.get_hybrid();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_hybrid(), false);",
          "    let config = Config::new().hybrid(true);",
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().hybrid(false);",
          "    let _ = config.get_hybrid();",
          "    assert_eq!(config.get_hybrid(), false);",
          "    let config = Config::new().hybrid(true);",
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().hybrid(None);",
          "    let _ = config.get_hybrid();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config_disable_hybrid = Config::new().hybrid(false);",
          "    assert_eq!(config_disable_hybrid.get_hybrid(), false);",
          "    let config_enable_hybrid = Config::new().hybrid(true);",
          "    assert_eq!(config_enable_hybrid.get_hybrid(), true);",
          "    let config_default_hybrid = Config::new();",
          "    assert_eq!(config_default_hybrid.get_hybrid(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().hybrid(None);",
          "    let _ = config.get_hybrid();",
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config_disable_hybrid = Config::new().hybrid(false);",
          "    assert_eq!(config_disable_hybrid.get_hybrid(), false);",
          "    let config_enable_hybrid = Config::new().hybrid(true);",
          "    assert_eq!(config_enable_hybrid.get_hybrid(), true);",
          "    let config_default_hybrid = Config::new();",
          "    assert_eq!(config_default_hybrid.get_hybrid(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().hybrid(None);",
          "    let _ = config.get_hybrid();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config = Config::new().hybrid(Some(true));",
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config = Config::new().hybrid(Some(false));",
          "    assert_eq!(config.get_hybrid(), false);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid(), true);",
          "    #[cfg(not(feature = \"hybrid\"))] { assert_eq!(config.get_hybrid(), false); }"
        ],
        "code": [
          "{",
          "    let config = Config::new().hybrid(None);",
          "    let _ = config.get_hybrid();",
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config = Config::new().hybrid(Some(true));",
          "    assert_eq!(config.get_hybrid(), true);",
          "    let config = Config::new().hybrid(Some(false));",
          "    assert_eq!(config.get_hybrid(), false);",
          "    let config = Config::new();",
          "    assert_eq!(config.get_hybrid(), true);",
          "    #[cfg(not(feature = \"hybrid\"))] { assert_eq!(config.get_hybrid(), false); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]