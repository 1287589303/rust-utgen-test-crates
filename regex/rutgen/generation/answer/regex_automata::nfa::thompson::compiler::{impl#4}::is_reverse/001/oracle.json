[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        reverse: Some(true),",
          "        ..Default::default()",
          "    };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "    let _ = compiler.is_reverse();",
          "}"
        ],
        "oracle": [
          "    assert!(compiler.is_reverse() == true);",
          "    let config = Config { reverse: Some(false), ..Default::default() };",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    assert!(compiler.is_reverse() == false);",
          "    let config = Config { reverse: None, ..Default::default() };",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    assert!(compiler.is_reverse() == false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        reverse: Some(true),",
          "        ..Default::default()",
          "    };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "    let _ = compiler.is_reverse();",
          "    assert!(compiler.is_reverse() == true);",
          "    let config = Config { reverse: Some(false), ..Default::default() };",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    assert!(compiler.is_reverse() == false);",
          "    let config = Config { reverse: None, ..Default::default() };",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    assert!(compiler.is_reverse() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        reverse: Some(false),",
          "        ..Default::default()",
          "    };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "    let _ = compiler.is_reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.is_reverse(), false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        reverse: Some(false),",
          "        ..Default::default()",
          "    };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "    let _ = compiler.is_reverse();",
          "    assert_eq!(compiler.is_reverse(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        reverse: None,",
          "        ..Default::default()",
          "    };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "    let _ = compiler.is_reverse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(compiler.is_reverse(), false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        reverse: None,",
          "        ..Default::default()",
          "    };",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config,",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "    let _ = compiler.is_reverse();",
          "    assert_eq!(compiler.is_reverse(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]