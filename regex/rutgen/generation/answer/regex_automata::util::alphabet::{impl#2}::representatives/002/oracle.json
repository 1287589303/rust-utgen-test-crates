[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let representatives = byte_classes.representatives(..);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let representatives = byte_classes.representatives(..);",
          "    assert_eq!(representatives.cur_byte, 0);",
          "    assert_eq!(representatives.end_byte, None);",
          "    assert!(representatives.last_class.is_none());",
          "    assert_eq!(representatives.classes, &byte_classes);"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let representatives = byte_classes.representatives(..);",
          "    let byte_classes = ByteClasses::empty();",
          "    let representatives = byte_classes.representatives(..);",
          "    assert_eq!(representatives.cur_byte, 0);",
          "    assert_eq!(representatives.end_byte, None);",
          "    assert!(representatives.last_class.is_none());",
          "    assert_eq!(representatives.classes, &byte_classes);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::singletons();",
          "    let representatives = byte_classes.representatives(..);",
          "}"
        ],
        "oracle": [
          "    assert!(representatives.classes == &byte_classes);",
          "    assert_eq!(representatives.cur_byte, 0);",
          "    assert!(representatives.end_byte.is_none());",
          "    assert!(representatives.last_class.is_none());"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::singletons();",
          "    let representatives = byte_classes.representatives(..);",
          "    assert!(representatives.classes == &byte_classes);",
          "    assert_eq!(representatives.cur_byte, 0);",
          "    assert!(representatives.end_byte.is_none());",
          "    assert!(representatives.last_class.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let representatives = byte_classes.representatives(..);",
          "}"
        ],
        "oracle": [
          "    let byte_classes = ByteClasses::empty();",
          "    let representatives = byte_classes.representatives(..);",
          "    assert_eq!(representatives.classes, &byte_classes);",
          "    assert_eq!(representatives.cur_byte, 0);",
          "    assert_eq!(representatives.end_byte, None);",
          "    assert_eq!(representatives.last_class, None);",
          "    assert!(representatives.cur_byte < usize::MAX);"
        ],
        "code": [
          "{",
          "    let byte_classes = ByteClasses::empty();",
          "    let representatives = byte_classes.representatives(..);",
          "    let byte_classes = ByteClasses::empty();",
          "    let representatives = byte_classes.representatives(..);",
          "    assert_eq!(representatives.classes, &byte_classes);",
          "    assert_eq!(representatives.cur_byte, 0);",
          "    assert_eq!(representatives.end_byte, None);",
          "    assert_eq!(representatives.last_class, None);",
          "    assert!(representatives.cur_byte < usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]