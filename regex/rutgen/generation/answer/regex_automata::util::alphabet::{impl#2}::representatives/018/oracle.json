[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(b'a', 1);",
          "    byte_classes.set(b'b', 2);",
          "    let reps = byte_classes.representatives(0..=1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reps.cur_byte, 0);",
          "    assert_eq!(reps.end_byte, Some(2));",
          "    assert_eq!(reps.last_class, None);",
          "    assert_eq!(byte_classes.get(b'a'), 1);",
          "    assert_eq!(byte_classes.get(b'b'), 2);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(b'a', 1);",
          "    byte_classes.set(b'b', 2);",
          "    let reps = byte_classes.representatives(0..=1);",
          "    assert_eq!(reps.cur_byte, 0);",
          "    assert_eq!(reps.end_byte, Some(2));",
          "    assert_eq!(reps.last_class, None);",
          "    assert_eq!(byte_classes.get(b'a'), 1);",
          "    assert_eq!(byte_classes.get(b'b'), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(b'0', 1);",
          "    byte_classes.set(b'1', 2);",
          "    byte_classes.set(b'2', 3);",
          "    let reps = byte_classes.representatives(0..=2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reps.cur_byte, 0);",
          "    assert_eq!(reps.end_byte, Some(3));",
          "    assert!(reps.last_class.is_none());",
          "    assert_eq!(byte_classes.get(b'0'), 1);",
          "    assert_eq!(byte_classes.get(b'1'), 2);",
          "    assert_eq!(byte_classes.get(b'2'), 3);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(b'0', 1);",
          "    byte_classes.set(b'1', 2);",
          "    byte_classes.set(b'2', 3);",
          "    let reps = byte_classes.representatives(0..=2);",
          "    assert_eq!(reps.cur_byte, 0);",
          "    assert_eq!(reps.end_byte, Some(3));",
          "    assert!(reps.last_class.is_none());",
          "    assert_eq!(byte_classes.get(b'0'), 1);",
          "    assert_eq!(byte_classes.get(b'1'), 2);",
          "    assert_eq!(byte_classes.get(b'2'), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(b'\\x01', 1);",
          "    byte_classes.set(b'\\xFF', 2);",
          "    let reps = byte_classes.representatives(1..=255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reps.cur_byte, 1);",
          "    assert_eq!(reps.end_byte, Some(256));",
          "    assert_eq!(reps.last_class, None);",
          "    assert_eq!(byte_classes.get(b'\\x01'), 1);",
          "    assert_eq!(byte_classes.get(b'\\xFF'), 2);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(b'\\x01', 1);",
          "    byte_classes.set(b'\\xFF', 2);",
          "    let reps = byte_classes.representatives(1..=255);",
          "    assert_eq!(reps.cur_byte, 1);",
          "    assert_eq!(reps.end_byte, Some(256));",
          "    assert_eq!(reps.last_class, None);",
          "    assert_eq!(byte_classes.get(b'\\x01'), 1);",
          "    assert_eq!(byte_classes.get(b'\\xFF'), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]