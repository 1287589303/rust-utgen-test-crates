[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x01'..b'\\x03');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reps.cur_byte, 2);",
          "    assert_eq!(reps.end_byte, Some(3));",
          "    assert!(reps.last_class.is_none());",
          "    assert!(reps.classes == byte_classes);",
          "    assert_ne!(reps.classes.get(b'\\x01'), reps.classes.get(b'\\x02'));"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x01'..b'\\x03');",
          "    assert_eq!(reps.cur_byte, 2);",
          "    assert_eq!(reps.end_byte, Some(3));",
          "    assert!(reps.last_class.is_none());",
          "    assert!(reps.classes == byte_classes);",
          "    assert_ne!(reps.classes.get(b'\\x01'), reps.classes.get(b'\\x02'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x02'..b'\\x05');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_classes.get(b'\\x02'), expected_class);",
          "    assert_eq!(byte_classes.get(b'\\x03'), expected_class);",
          "    assert_eq!(byte_classes.get(b'\\x04'), expected_class);",
          "    assert!(reps.cur_byte > usize::from(b'\\x02'));",
          "    assert!(reps.end_byte.is_some());",
          "    assert!(reps.end_byte.unwrap() > reps.cur_byte);",
          "    assert!(reps.last_class.is_none());",
          "    assert!(reps.classes.alphabet_len() > 0);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x02'..b'\\x05');",
          "    assert_eq!(byte_classes.get(b'\\x02'), expected_class);",
          "    assert_eq!(byte_classes.get(b'\\x03'), expected_class);",
          "    assert_eq!(byte_classes.get(b'\\x04'), expected_class);",
          "    assert!(reps.cur_byte > usize::from(b'\\x02'));",
          "    assert!(reps.end_byte.is_some());",
          "    assert!(reps.end_byte.unwrap() > reps.cur_byte);",
          "    assert!(reps.last_class.is_none());",
          "    assert!(reps.classes.alphabet_len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x10'..b'\\x12');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reps.cur_byte, 17);",
          "    assert_eq!(reps.end_byte, Some(18));",
          "    assert!(reps.last_class.is_none());",
          "    assert!(reps.classes.get(b'\\x10') != reps.classes.get(b'\\x11'));",
          "    assert!(reps.classes.get(b'\\x10') != reps.classes.get(b'\\x12'));",
          "    assert!(reps.classes.get(b'\\x12') != reps.classes.get(b'\\x10'));"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::empty();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x10'..b'\\x12');",
          "    assert_eq!(reps.cur_byte, 17);",
          "    assert_eq!(reps.end_byte, Some(18));",
          "    assert!(reps.last_class.is_none());",
          "    assert!(reps.classes.get(b'\\x10') != reps.classes.get(b'\\x11'));",
          "    assert!(reps.classes.get(b'\\x10') != reps.classes.get(b'\\x12'));",
          "    assert!(reps.classes.get(b'\\x12') != reps.classes.get(b'\\x10'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x0F'..b'\\x10');",
          "}"
        ],
        "oracle": [
          "    let mut byte_classes = ByteClasses::singletons();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x0F'..b'\\x10');",
          "    assert_eq!(reps.cur_byte, 16);",
          "    assert!(reps.end_byte.is_some());",
          "    assert_ne!(reps.cur_byte, usize::MAX);",
          "    assert!(reps.last_class.is_none());",
          "    assert!(byte_classes.is_singleton());",
          "    assert_eq!(byte_classes.alphabet_len(), 256);",
          "    assert_eq!(byte_classes.stride2(), 128);"
        ],
        "code": [
          "{",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x0F'..b'\\x10');",
          "    let mut byte_classes = ByteClasses::singletons();",
          "    let reps: ByteClassRepresentatives = byte_classes.representatives(b'\\x0F'..b'\\x10');",
          "    assert_eq!(reps.cur_byte, 16);",
          "    assert!(reps.end_byte.is_some());",
          "    assert_ne!(reps.cur_byte, usize::MAX);",
          "    assert!(reps.last_class.is_none());",
          "    assert!(byte_classes.is_singleton());",
          "    assert_eq!(byte_classes.alphabet_len(), 256);",
          "    assert_eq!(byte_classes.stride2(), 128);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]