[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: u32::MAX, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"ab\"));",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Capture { index: 0, name: None, sub: vec![] },",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let result = compiler.c_zero_or_one(&hir, true);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: u32::MAX, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"ab\"));",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Capture { index: 0, name: None, sub: vec![] },",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let result = compiler.c_zero_or_one(&hir, true);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"\"));",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: true,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, false);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"\"));",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: true,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, false);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a\"));",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, true);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a\"));",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, true);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"[a-z]\"));",
          "    ",
          "    let class = hir::Class::new(vec![('a', 'z')]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, false);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"[a-z]\"));",
          "    let class = hir::Class::new(vec![('a', 'z')]);",
          "    let hir = Hir {",
          "    kind: HirKind::Class(class),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    };",
          "    let result = compiler.c_zero_or_one(&hir, false);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"[a-z]\"));",
          "    ",
          "    let class = hir::Class::new(vec![('a', 'z')]);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, false);",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"[a-z]\"));",
          "    let class = hir::Class::new(vec![('a', 'z')]);",
          "    let hir = Hir {",
          "    kind: HirKind::Class(class),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    };",
          "    let result = compiler.c_zero_or_one(&hir, false);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a*\"));",
          "    ",
          "    let repetition = hir::Repetition::new(0, None); // 0 or more",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, true);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a*\"));",
          "    ",
          "    let repetition = hir::Repetition::new(0, None); // 0 or more",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, true);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a.b\"));",
          "    ",
          "    let left_hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let right_hir = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![left_hir, right_hir]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, false);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");",
          "    assert!(matches!(result, Err(Error { msg: _ })));",
          "    assert!(result.err().is_some());",
          "    assert!(result.unwrap_err().is::<Error>());",
          "    assert!(result.unwrap_err().msg.contains(\"exhausted\"));",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err() == Error { msg: \"exhausted state IDs, too many states\" });"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a.b\"));",
          "    ",
          "    let left_hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let right_hir = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![left_hir, right_hir]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, false);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, \"exhausted state IDs, too many states\");",
          "    assert!(matches!(result, Err(Error { msg: _ })));",
          "    assert!(result.err().is_some());",
          "    assert!(result.unwrap_err().is::<Error>());",
          "    assert!(result.unwrap_err().msg.contains(\"exhausted\"));",
          "    assert!(result.is_err());",
          "    assert!(result.unwrap_err() == Error { msg: \"exhausted state IDs, too many states\" });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a|b\"));",
          "    ",
          "    let left_hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let right_hir = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![left_hir, right_hir]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, true);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, \"exhausted state IDs, too many states\");",
          "    assert!(matches!(compiler.nfa.borrow().states.get(0), Some(State::Splits { targets, reverse }))).",
          "    assert_eq!(compiler.nfa.borrow().memory_extra, expected_memory);",
          "    assert!(matches!(compiler.nfa.borrow().cap_name_to_index.get(&Arc::new(\"a\".into())), None));",
          "    assert!(matches!(compiler.nfa.borrow().cap_name_to_index.get(&Arc::new(\"b\".into())), None));",
          "    assert!(compiler.nfa.borrow().states.is_empty());",
          "    assert!(compiler.nfa.borrow().is_match_empty);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let compiler = Compiler::new(config, String::from(\"a|b\"));",
          "    ",
          "    let left_hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let right_hir = Hir {",
          "        kind: HirKind::Char('b'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    ",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![left_hir, right_hir]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "",
          "    let result = compiler.c_zero_or_one(&hir, true);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, \"exhausted state IDs, too many states\");",
          "    assert!(matches!(compiler.nfa.borrow().states.get(0), Some(State::Splits { targets, reverse }))).",
          "    assert_eq!(compiler.nfa.borrow().memory_extra, expected_memory);",
          "    assert!(matches!(compiler.nfa.borrow().cap_name_to_index.get(&Arc::new(\"a\".into())), None));",
          "    assert!(matches!(compiler.nfa.borrow().cap_name_to_index.get(&Arc::new(\"b\".into())), None));",
          "    assert!(compiler.nfa.borrow().states.is_empty());",
          "    assert!(compiler.nfa.borrow().is_match_empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]