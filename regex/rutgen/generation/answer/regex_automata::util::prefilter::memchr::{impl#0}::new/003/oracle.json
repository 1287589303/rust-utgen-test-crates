[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[&[u8; 1]] = &[b\"A\"];",
          "    let result = Memchr::new(MatchKind::All, needles);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Memchr(b'A')));"
        ],
        "code": [
          "{",
          "    let needles: &[&[u8; 1]] = &[b\"A\"];",
          "    let result = Memchr::new(MatchKind::All, needles);",
          "    assert_eq!(result, Some(Memchr(b'A')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[&[u8; 1]] = &[b\"B\"];",
          "    let result = Memchr::new(MatchKind::LeftmostFirst, needles);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    if let Some(memchr) = result {",
          "    assert_eq!(memchr.0, b'B');",
          "    }"
        ],
        "code": [
          "{",
          "    let needles: &[&[u8; 1]] = &[b\"B\"];",
          "    let result = Memchr::new(MatchKind::LeftmostFirst, needles);",
          "    assert!(result.is_some());",
          "    if let Some(memchr) = result {",
          "    assert_eq!(memchr.0, b'B');",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]