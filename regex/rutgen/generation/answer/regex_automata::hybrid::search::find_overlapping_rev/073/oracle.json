[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    ",
          "    let haystack: &[u8] = b\"example haystack\";",
          "    let input = Input::new(&haystack).span(Span::new(0, 0));",
          "    ",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let _ = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    cache.search_start(state.at);",
          "    let sid = init_rev(&dfa, &mut cache, &input).unwrap();",
          "    state.id = Some(sid);",
          "    state.rev_eoi = true;",
          "    assert!(state.mat.is_some());",
          "    assert!(state.at == input.start());",
          "    let result = eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut state.mat).unwrap();",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    ",
          "    let haystack: &[u8] = b\"example haystack\";",
          "    let input = Input::new(&haystack).span(Span::new(0, 0));",
          "    ",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let _ = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    cache.search_start(state.at);",
          "    let sid = init_rev(&dfa, &mut cache, &input).unwrap();",
          "    state.id = Some(sid);",
          "    state.rev_eoi = true;",
          "    assert!(state.mat.is_some());",
          "    assert!(state.at == input.start());",
          "    let result = eoi_rev(&dfa, &mut cache, &input, &mut sid, &mut state.mat).unwrap();",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    ",
          "    let haystack: &[u8] = b\"another example\";",
          "    let input = Input::new(&haystack).span(Span::new(3, 3));",
          "    ",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 3,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let _ = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(!input.is_done());",
          "    assert!(state.id.is_none());",
          "    let sid = init_rev(&dfa, &mut cache, &input).expect(\"Expected Ok from init_rev\");",
          "    assert!(input.start() == input.end());",
          "    assert!(!state.rev_eoi);",
          "    let next_sid = dfa.next_state(&mut cache, sid, input.haystack()[state.at]).expect(\"Expected Ok from next_state\");",
          "    assert!(next_sid.is_tagged());",
          "    assert!(next_sid.is_start());",
          "    assert!(state.at == input.start());",
          "    assert!(state.mat.is_some());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    ",
          "    let haystack: &[u8] = b\"another example\";",
          "    let input = Input::new(&haystack).span(Span::new(3, 3));",
          "    ",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 3,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let _ = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    assert!(!input.is_done());",
          "    assert!(state.id.is_none());",
          "    let sid = init_rev(&dfa, &mut cache, &input).expect(\"Expected Ok from init_rev\");",
          "    assert!(input.start() == input.end());",
          "    assert!(!state.rev_eoi);",
          "    let next_sid = dfa.next_state(&mut cache, sid, input.haystack()[state.at]).expect(\"Expected Ok from next_state\");",
          "    assert!(next_sid.is_tagged());",
          "    assert!(next_sid.is_start());",
          "    assert!(state.at == input.start());",
          "    assert!(state.mat.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    ",
          "    let haystack: &[u8] = b\"test haystack\";",
          "    let input = Input::new(&haystack).span(Span::new(4, 4));",
          "    ",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(PatternID::default(), 0)),",
          "        id: None,",
          "        at: 4,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let _ = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    let dfa = DFA { config: Config::default(), nfa: thompson::NFA::default(), stride2: 1, start_map: StartByteMap::default(), classes: ByteClasses::default(), quitset: ByteSet::default(), cache_capacity: 1024, };",
          "    let mut cache = Cache::new(&dfa);",
          "    let haystack: &[u8] = b\"test haystack\";",
          "    let input = Input::new(&haystack).span(Span::new(4, 4));",
          "    let mut state = OverlappingState { mat: None, id: None, at: 4, next_match_index: None, rev_eoi: false };",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state).unwrap();",
          "    assert!(state.mat.is_some());",
          "    assert_eq!(state.next_match_index, Some(1));",
          "    assert_eq!(state.rev_eoi, true);",
          "    assert_eq!(state.at, 4);",
          "    assert!(state.id.is_some());",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 1,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 1024,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    ",
          "    let haystack: &[u8] = b\"test haystack\";",
          "    let input = Input::new(&haystack).span(Span::new(4, 4));",
          "    ",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(PatternID::default(), 0)),",
          "        id: None,",
          "        at: 4,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let _ = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    let dfa = DFA { config: Config::default(), nfa: thompson::NFA::default(), stride2: 1, start_map: StartByteMap::default(), classes: ByteClasses::default(), quitset: ByteSet::default(), cache_capacity: 1024, };",
          "    let mut cache = Cache::new(&dfa);",
          "    let haystack: &[u8] = b\"test haystack\";",
          "    let input = Input::new(&haystack).span(Span::new(4, 4));",
          "    let mut state = OverlappingState { mat: None, id: None, at: 4, next_match_index: None, rev_eoi: false };",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state).unwrap();",
          "    assert!(state.mat.is_some());",
          "    assert_eq!(state.next_match_index, Some(1));",
          "    assert_eq!(state.rev_eoi, true);",
          "    assert_eq!(state.at, 4);",
          "    assert!(state.id.is_some());",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]