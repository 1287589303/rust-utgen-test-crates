[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    let haystack: &[u8] = b\"abcde\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span::new(0, 5));",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 4,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.is_done(), false);",
          "    assert_eq!(state.id, None);",
          "    assert!(init_rev(&dfa, &mut cache, &input).is_ok());",
          "    assert_ne!(input.start(), input.end());",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert!(dfa.next_state(&mut cache, sid, input.haystack()[state.at]).is_ok());",
          "    assert!(!sid.is_tagged());",
          "    assert_eq!(state.at, input.start());",
          "    assert_eq!(state.mat.is_some(), false);",
          "    assert!(matches!(result, Ok(())));"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    let haystack: &[u8] = b\"abcde\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span::new(0, 5));",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 4,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    assert_eq!(input.is_done(), false);",
          "    assert_eq!(state.id, None);",
          "    assert!(init_rev(&dfa, &mut cache, &input).is_ok());",
          "    assert_ne!(input.start(), input.end());",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert!(dfa.next_state(&mut cache, sid, input.haystack()[state.at]).is_ok());",
          "    assert!(!sid.is_tagged());",
          "    assert_eq!(state.at, input.start());",
          "    assert_eq!(state.mat.is_some(), false);",
          "    assert!(matches!(result, Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    let haystack: &[u8] = b\"testing\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span::new(0, 7));",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 6,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(state.mat.is_none());",
          "    assert_eq!(state.at, 6);",
          "    assert!(state.next_match_index.is_none());",
          "    assert!(!state.rev_eoi);",
          "    assert!(state.id.is_some());",
          "    assert!(cache.bytes_searched > 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    let haystack: &[u8] = b\"testing\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span::new(0, 7));",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 6,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(state.mat.is_none());",
          "    assert_eq!(state.at, 6);",
          "    assert!(state.next_match_index.is_none());",
          "    assert!(!state.rev_eoi);",
          "    assert!(state.id.is_some());",
          "    assert!(cache.bytes_searched > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    let haystack: &[u8] = b\"example\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span::new(0, 7));",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 6,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(!input.is_done());",
          "    assert!(state.id.is_none());",
          "    let sid = init_rev(&dfa, &mut cache, &input).unwrap();",
          "    assert!(input.start() != input.end());",
          "    assert!(!state.rev_eoi);",
          "    assert!(dfa.next_state(&mut cache, sid, input.haystack()[state.at]).is_ok());",
          "    assert!(!sid.is_tagged());",
          "    assert_eq!(state.at, input.start());",
          "    assert!(state.mat.is_none());",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 10,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    let haystack: &[u8] = b\"example\";",
          "    let input = Input::new(&haystack)",
          "        .span(Span::new(0, 7));",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 6,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    assert!(!input.is_done());",
          "    assert!(state.id.is_none());",
          "    let sid = init_rev(&dfa, &mut cache, &input).unwrap();",
          "    assert!(input.start() != input.end());",
          "    assert!(!state.rev_eoi);",
          "    assert!(dfa.next_state(&mut cache, sid, input.haystack()[state.at]).is_ok());",
          "    assert!(!sid.is_tagged());",
          "    assert_eq!(state.at, input.start());",
          "    assert!(state.mat.is_none());",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]