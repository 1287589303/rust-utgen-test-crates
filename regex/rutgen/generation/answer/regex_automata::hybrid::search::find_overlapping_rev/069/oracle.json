[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    let input = Input::new(&[b'a']);",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert!(state.mat.is_none());",
          "    assert!(state.id.is_none());",
          "    assert_eq!(state.at, 0);",
          "    assert!(state.rev_eoi == false);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    let input = Input::new(&[b'a']);",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    assert!(result.is_err());",
          "    assert!(state.mat.is_none());",
          "    assert!(state.id.is_none());",
          "    assert_eq!(state.at, 0);",
          "    assert!(state.rev_eoi == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    let input = Input::new(&[b'a']);",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    state.at = 1; // setting at > input.end() - 1",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(state.mat, None);",
          "    assert_eq!(state.id, None);",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert_eq!(cache.bytes_searched, 0);",
          "    assert_eq!(cache.clear_count(), 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    ",
          "    let mut cache = Cache::new(&dfa);",
          "    let input = Input::new(&[b'a']);",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    ",
          "    state.at = 1; // setting at > input.end() - 1",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(state.mat, None);",
          "    assert_eq!(state.id, None);",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert_eq!(cache.bytes_searched, 0);",
          "    assert_eq!(cache.clear_count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    let input = Input::new(&[]);",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(state.mat, None);",
          "    assert_eq!(state.id, None);",
          "    assert_eq!(state.at, 0);",
          "    assert_eq!(state.next_match_index, None);",
          "    assert_eq!(state.rev_eoi, false);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "",
          "    let mut cache = Cache::new(&dfa);",
          "    let input = Input::new(&[]);",
          "    let mut state = OverlappingState {",
          "        mat: None,",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "",
          "    let result = find_overlapping_rev(&dfa, &mut cache, &input, &mut state);",
          "    assert!(result.is_err());",
          "    assert_eq!(state.mat, None);",
          "    assert_eq!(state.id, None);",
          "    assert_eq!(state.at, 0);",
          "    assert_eq!(state.next_match_index, None);",
          "    assert_eq!(state.rev_eoi, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]