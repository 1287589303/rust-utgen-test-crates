[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'a', b'\\r', b'b', b'\\n'];",
          "    let at = 1;",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(!matcher.is_end(haystack, at));",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert!(haystack[at] != b'\\n');",
          "    assert_eq!(at, 0);",
          "    assert!(haystack[at - 1] != b'\\r');"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'a', b'\\r', b'b', b'\\n'];",
          "    let at = 1;",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert!(!matcher.is_end(haystack, at));",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert!(haystack[at] != b'\\n');",
          "    assert_eq!(at, 0);",
          "    assert!(haystack[at - 1] != b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'a', b'b', b'\\r'];",
          "    let at = 2;",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(!matcher.is_end(haystack, at));",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert!(haystack[at] != b'\\n');",
          "    assert_eq!(at, 0);",
          "    assert!(haystack[at - 1] != b'\\r');"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'a', b'b', b'\\r'];",
          "    let at = 2;",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert!(!matcher.is_end(haystack, at));",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert!(haystack[at] != b'\\n');",
          "    assert_eq!(at, 0);",
          "    assert!(haystack[at - 1] != b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\n', b'\\r', b'b'];",
          "    let at = 3;",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_end_crlf(haystack, at), true);",
          "    assert!(haystack[at - 1] != b'\\r');",
          "    assert!(!matcher.is_end(haystack, at));",
          "    assert!(haystack[at] == b'\\r');",
          "    assert!(haystack[at] != b'\\n');",
          "    assert!(at == 0);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\n', b'\\r', b'b'];",
          "    let at = 3;",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert_eq!(matcher.is_end_crlf(haystack, at), true);",
          "    assert!(haystack[at - 1] != b'\\r');",
          "    assert!(!matcher.is_end(haystack, at));",
          "    assert!(haystack[at] == b'\\r');",
          "    assert!(haystack[at] != b'\\n');",
          "    assert!(at == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\n', b'a', b'\\r'];",
          "    let at = 4;",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_end(haystack, at), false);",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert_ne!(haystack[at - 1], b'\\r');"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'\\n', b'a', b'\\r'];",
          "    let at = 4;",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert_eq!(matcher.is_end(haystack, at), false);",
          "    assert_eq!(haystack[at], b'\\r');",
          "    assert_ne!(haystack[at - 1], b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]