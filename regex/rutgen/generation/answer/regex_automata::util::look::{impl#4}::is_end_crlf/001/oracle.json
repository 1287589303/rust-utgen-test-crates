[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Hello, World!\";",
          "    let matcher = LookMatcher::new();",
          "    let at = haystack.len();",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_end_crlf(haystack, at));",
          "    assert!(matcher.is_end(haystack, at));",
          "    assert!(matcher.is_end_crlf(haystack, at) == true);",
          "    assert!(haystack[at] == b'\\r' || (at == 0 || haystack[at - 1] != b'\\r'));"
        ],
        "code": [
          "{",
          "    let haystack = b\"Hello, World!\";",
          "    let matcher = LookMatcher::new();",
          "    let at = haystack.len();",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert!(matcher.is_end_crlf(haystack, at));",
          "    assert!(matcher.is_end(haystack, at));",
          "    assert!(matcher.is_end_crlf(haystack, at) == true);",
          "    assert!(haystack[at] == b'\\r' || (at == 0 || haystack[at - 1] != b'\\r'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Hello\\r\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // At the position of '\\r'",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_end_crlf(haystack, at) == true);",
          "    assert!(matcher.is_end(haystack, at) == true);",
          "    assert!(haystack[at] == b'\\r');",
          "    assert!(haystack[at] != b'\\n');",
          "    assert!(at == 5);",
          "    assert!(at <= haystack.len());"
        ],
        "code": [
          "{",
          "    let haystack = b\"Hello\\r\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // At the position of '\\r'",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert!(matcher.is_end_crlf(haystack, at) == true);",
          "    assert!(matcher.is_end(haystack, at) == true);",
          "    assert!(haystack[at] == b'\\r');",
          "    assert!(haystack[at] != b'\\n');",
          "    assert!(at == 5);",
          "    assert!(at <= haystack.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Hello\\n\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // At the position of '\\n'",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_end(haystack, at));",
          "    assert_eq!(matcher.is_end_crlf(haystack, at), true);",
          "    assert_eq!(matcher.is_end_crlf(haystack, at), haystack[at] == b'\\n');",
          "    assert!(haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'));"
        ],
        "code": [
          "{",
          "    let haystack = b\"Hello\\n\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // At the position of '\\n'",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert!(matcher.is_end(haystack, at));",
          "    assert_eq!(matcher.is_end_crlf(haystack, at), true);",
          "    assert_eq!(matcher.is_end_crlf(haystack, at), haystack[at] == b'\\n');",
          "    assert!(haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Hello\\r\\n\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // At the position of '\\r'",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    matcher.is_end_crlf(haystack, at) == true",
          "    haystack[at] == b'\\r'",
          "    matcher.is_end(haystack, at) == true",
          "    haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r') == false",
          "    at <= haystack.len()",
          "    at == 5",
          "    haystack[at - 1] == b'\\n'",
          "    haystack.len() == 7"
        ],
        "code": [
          "{",
          "    let haystack = b\"Hello\\r\\n\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 5; // At the position of '\\r'",
          "    matcher.is_end_crlf(haystack, at);",
          "    matcher.is_end_crlf(haystack, at) == true",
          "    haystack[at] == b'\\r'",
          "    matcher.is_end(haystack, at) == true",
          "    haystack[at] == b'\\n' && (at == 0 || haystack[at - 1] != b'\\r') == false",
          "    at <= haystack.len()",
          "    at == 5",
          "    haystack[at - 1] == b'\\n'",
          "    haystack.len() == 7",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Hello\\r\\n\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 6; // At the position of '\\n'",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.is_end(haystack, at));",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert!(at > 0);",
          "    assert_ne!(haystack[at - 1], b'\\r');"
        ],
        "code": [
          "{",
          "    let haystack = b\"Hello\\r\\n\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 6; // At the position of '\\n'",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert!(matcher.is_end(haystack, at));",
          "    assert_eq!(haystack[at], b'\\n');",
          "    assert!(at > 0);",
          "    assert_ne!(haystack[at - 1], b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"\\nWorld!\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 0; // At the position of '\\n'",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_end_crlf(haystack, at), true);",
          "    assert_eq!(matcher.is_end_crlf(haystack, 1), false);",
          "    assert_eq!(matcher.is_end_crlf(haystack, 6), true);",
          "    assert_eq!(matcher.is_end_crlf(haystack, 5), false);",
          "    assert_eq!(matcher.is_end_crlf(haystack, 7), true);"
        ],
        "code": [
          "{",
          "    let haystack = b\"\\nWorld!\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 0; // At the position of '\\n'",
          "    matcher.is_end_crlf(haystack, at);",
          "    assert_eq!(matcher.is_end_crlf(haystack, at), true);",
          "    assert_eq!(matcher.is_end_crlf(haystack, 1), false);",
          "    assert_eq!(matcher.is_end_crlf(haystack, 6), true);",
          "    assert_eq!(matcher.is_end_crlf(haystack, 5), false);",
          "    assert_eq!(matcher.is_end_crlf(haystack, 7), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 0; // At the end of an empty haystack",
          "    matcher.is_end_crlf(haystack, at);",
          "}"
        ],
        "oracle": [
          "    self.is_end_crlf(haystack, at) == true",
          "    self.is_end(haystack, at) == true",
          "    haystack[at] == b'\\r' == false",
          "    haystack[at] == b'\\n' == false",
          "    at == 0 == true",
          "    haystack[at - 1] != b'\\r' is not applicable (out of bounds)"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"\";",
          "    let matcher = LookMatcher::new();",
          "    let at = 0; // At the end of an empty haystack",
          "    matcher.is_end_crlf(haystack, at);",
          "    self.is_end_crlf(haystack, at) == true",
          "    self.is_end(haystack, at) == true",
          "    haystack[at] == b'\\r' == false",
          "    haystack[at] == b'\\n' == false",
          "    at == 0 == true",
          "    haystack[at - 1] != b'\\r' is not applicable (out of bounds)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]