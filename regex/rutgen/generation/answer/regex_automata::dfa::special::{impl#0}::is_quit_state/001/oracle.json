[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(1),",
          "        quit_id: StateID(2),",
          "        min_match: StateID(3),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(5),",
          "        max_accel: StateID(6),",
          "        min_start: StateID(7),",
          "        max_start: StateID(8),",
          "    };",
          "    let id = special.quit_id;",
          "    special.is_quit_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_quit_state(StateID(2)), true);",
          "    assert_eq!(special.is_quit_state(StateID(1)), false);",
          "    assert_eq!(special.is_quit_state(StateID(3)), false);",
          "    assert_eq!(special.is_quit_state(StateID(4)), false);",
          "    assert_eq!(special.is_quit_state(StateID(5)), false);",
          "    assert_eq!(special.is_quit_state(StateID(6)), false);",
          "    assert_eq!(special.is_quit_state(StateID(7)), false);",
          "    assert_eq!(special.is_quit_state(StateID(8)), false);",
          "    assert_eq!(special.is_quit_state(StateID(0)), false);",
          "    assert_eq!(special.is_quit_state(StateID(3)), false);",
          "    assert_eq!(special.is_quit_state(DEAD), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(1),",
          "        quit_id: StateID(2),",
          "        min_match: StateID(3),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(5),",
          "        max_accel: StateID(6),",
          "        min_start: StateID(7),",
          "        max_start: StateID(8),",
          "    };",
          "    let id = special.quit_id;",
          "    special.is_quit_state(id);",
          "    assert_eq!(special.is_quit_state(StateID(2)), true);",
          "    assert_eq!(special.is_quit_state(StateID(1)), false);",
          "    assert_eq!(special.is_quit_state(StateID(3)), false);",
          "    assert_eq!(special.is_quit_state(StateID(4)), false);",
          "    assert_eq!(special.is_quit_state(StateID(5)), false);",
          "    assert_eq!(special.is_quit_state(StateID(6)), false);",
          "    assert_eq!(special.is_quit_state(StateID(7)), false);",
          "    assert_eq!(special.is_quit_state(StateID(8)), false);",
          "    assert_eq!(special.is_quit_state(StateID(0)), false);",
          "    assert_eq!(special.is_quit_state(StateID(3)), false);",
          "    assert_eq!(special.is_quit_state(DEAD), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(1),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(3),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(5),",
          "        max_accel: StateID(6),",
          "        min_start: StateID(7),",
          "        max_start: StateID(8),",
          "    };",
          "    let id = special.quit_id;",
          "    special.is_quit_state(id);",
          "}"
        ],
        "oracle": [
          "    assert!(special.is_dead_state(id));",
          "    assert_eq!(special.is_quit_state(id), false);",
          "    assert_eq!(special.quit_id, id);",
          "    assert!(!special.is_dead_state(id));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(1),",
          "        quit_id: StateID(0),",
          "        min_match: StateID(3),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(5),",
          "        max_accel: StateID(6),",
          "        min_start: StateID(7),",
          "        max_start: StateID(8),",
          "    };",
          "    let id = special.quit_id;",
          "    special.is_quit_state(id);",
          "    assert!(special.is_dead_state(id));",
          "    assert_eq!(special.is_quit_state(id), false);",
          "    assert_eq!(special.quit_id, id);",
          "    assert!(!special.is_dead_state(id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(12),",
          "        min_match: StateID(13),",
          "        max_match: StateID(14),",
          "        min_accel: StateID(15),",
          "        max_accel: StateID(16),",
          "        min_start: StateID(17),",
          "        max_start: StateID(18),",
          "    };",
          "    let id = special.quit_id;",
          "    special.is_quit_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_quit_state(StateID(12)), true);",
          "    assert_eq!(special.is_quit_state(StateID(11)), false);",
          "    assert_eq!(special.is_quit_state(StateID(10)), false);",
          "    assert_eq!(special.is_quit_state(DEAD), false);",
          "    assert_eq!(special.is_quit_state(StateID(13)), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(12),",
          "        min_match: StateID(13),",
          "        max_match: StateID(14),",
          "        min_accel: StateID(15),",
          "        max_accel: StateID(16),",
          "        min_start: StateID(17),",
          "        max_start: StateID(18),",
          "    };",
          "    let id = special.quit_id;",
          "    special.is_quit_state(id);",
          "    assert_eq!(special.is_quit_state(StateID(12)), true);",
          "    assert_eq!(special.is_quit_state(StateID(11)), false);",
          "    assert_eq!(special.is_quit_state(StateID(10)), false);",
          "    assert_eq!(special.is_quit_state(DEAD), false);",
          "    assert_eq!(special.is_quit_state(StateID(13)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]