[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.utf8(true);",
          "    builder.line_terminator(0);",
          "    builder.case_insensitive(false);",
          "    builder.multi_line(false);",
          "    builder.dot_matches_new_line(false);",
          "    builder.swap_greed(false);",
          "    builder.unicode(false);",
          "    builder.crlf(false);",
          "",
          "    let translator = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack, RefCell::new(vec![]));",
          "    assert_eq!(translator.flags, Cell::new(builder.flags));",
          "    assert_eq!(translator.utf8, true);",
          "    assert_eq!(translator.line_terminator, 0);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.utf8(true);",
          "    builder.line_terminator(0);",
          "    builder.case_insensitive(false);",
          "    builder.multi_line(false);",
          "    builder.dot_matches_new_line(false);",
          "    builder.swap_greed(false);",
          "    builder.unicode(false);",
          "    builder.crlf(false);",
          "",
          "    let translator = builder.build();",
          "    assert_eq!(translator.stack, RefCell::new(vec![]));",
          "    assert_eq!(translator.flags, Cell::new(builder.flags));",
          "    assert_eq!(translator.utf8, true);",
          "    assert_eq!(translator.line_terminator, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.utf8(true);",
          "    builder.line_terminator(1);",
          "    builder.case_insensitive(true);",
          "    builder.multi_line(true);",
          "    builder.dot_matches_new_line(true);",
          "    builder.swap_greed(true);",
          "    builder.unicode(true);",
          "    builder.crlf(true);",
          "",
          "    let translator = builder.build();",
          "}"
        ],
        "oracle": [
          "    let builder = TranslatorBuilder::new();",
          "    let translator = builder.build();",
          "    assert_eq!(translator.stack, RefCell::new(vec![]));",
          "    assert_eq!(translator.flags.get(), builder.flags);",
          "    assert_eq!(translator.utf8, true);",
          "    assert_eq!(translator.line_terminator, 1);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.utf8(true);",
          "    builder.line_terminator(1);",
          "    builder.case_insensitive(true);",
          "    builder.multi_line(true);",
          "    builder.dot_matches_new_line(true);",
          "    builder.swap_greed(true);",
          "    builder.unicode(true);",
          "    builder.crlf(true);",
          "",
          "    let translator = builder.build();",
          "    let builder = TranslatorBuilder::new();",
          "    let translator = builder.build();",
          "    assert_eq!(translator.stack, RefCell::new(vec![]));",
          "    assert_eq!(translator.flags.get(), builder.flags);",
          "    assert_eq!(translator.utf8, true);",
          "    assert_eq!(translator.line_terminator, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.utf8(false);",
          "    builder.line_terminator(2);",
          "    builder.case_insensitive(true);",
          "    builder.multi_line(false);",
          "    builder.dot_matches_new_line(true);",
          "    builder.swap_greed(false);",
          "    builder.unicode(false);",
          "    builder.crlf(true);",
          "",
          "    let translator = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack.borrow().len(), 0);",
          "    assert_eq!(translator.flags.get().case_insensitive, Some(true));",
          "    assert_eq!(translator.flags.get().multi_line, Some(false));",
          "    assert_eq!(translator.flags.get().dot_matches_new_line, Some(true));",
          "    assert_eq!(translator.flags.get().unicode, Some(false));",
          "    assert_eq!(translator.flags.get().crlf, Some(true));",
          "    assert_eq!(translator.flags.get().swap_greed, Some(false));",
          "    assert_eq!(translator.utf8, false);",
          "    assert_eq!(translator.line_terminator, 2);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.utf8(false);",
          "    builder.line_terminator(2);",
          "    builder.case_insensitive(true);",
          "    builder.multi_line(false);",
          "    builder.dot_matches_new_line(true);",
          "    builder.swap_greed(false);",
          "    builder.unicode(false);",
          "    builder.crlf(true);",
          "",
          "    let translator = builder.build();",
          "    assert_eq!(translator.stack.borrow().len(), 0);",
          "    assert_eq!(translator.flags.get().case_insensitive, Some(true));",
          "    assert_eq!(translator.flags.get().multi_line, Some(false));",
          "    assert_eq!(translator.flags.get().dot_matches_new_line, Some(true));",
          "    assert_eq!(translator.flags.get().unicode, Some(false));",
          "    assert_eq!(translator.flags.get().crlf, Some(true));",
          "    assert_eq!(translator.flags.get().swap_greed, Some(false));",
          "    assert_eq!(translator.utf8, false);",
          "    assert_eq!(translator.line_terminator, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.utf8(false);",
          "    builder.line_terminator(255);",
          "    builder.case_insensitive(false);",
          "    builder.multi_line(true);",
          "    builder.dot_matches_new_line(false);",
          "    builder.swap_greed(true);",
          "    builder.unicode(true);",
          "    builder.crlf(false);",
          "",
          "    let translator = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack, RefCell::new(vec![]));",
          "    assert_eq!(translator.flags, Cell::new(builder.flags));",
          "    assert_eq!(translator.utf8, false);",
          "    assert_eq!(translator.line_terminator, 255);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.utf8(false);",
          "    builder.line_terminator(255);",
          "    builder.case_insensitive(false);",
          "    builder.multi_line(true);",
          "    builder.dot_matches_new_line(false);",
          "    builder.swap_greed(true);",
          "    builder.unicode(true);",
          "    builder.crlf(false);",
          "",
          "    let translator = builder.build();",
          "    assert_eq!(translator.stack, RefCell::new(vec![]));",
          "    assert_eq!(translator.flags, Cell::new(builder.flags));",
          "    assert_eq!(translator.utf8, false);",
          "    assert_eq!(translator.line_terminator, 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]