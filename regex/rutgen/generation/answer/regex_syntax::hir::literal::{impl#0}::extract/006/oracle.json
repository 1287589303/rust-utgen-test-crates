[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new();",
          "    let hir = Hir { kind: HirKind::Empty, props: Properties::default() };",
          "    let result = extractor.extract(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Seq::singleton(Literal::exact(vec![])));"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new();",
          "    let hir = Hir { kind: HirKind::Empty, props: Properties::default() };",
          "    let result = extractor.extract(&hir);",
          "    assert_eq!(result, Seq::singleton(Literal::exact(vec![])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new();",
          "    let hir = Hir { kind: HirKind::Look(Look::new()), props: Properties::default() };",
          "    let result = extractor.extract(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.literals().unwrap(), &[Literal::exact(vec![])]);",
          "    assert!(result.is_exact());",
          "    assert!(result.is_finite());"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new();",
          "    let hir = Hir { kind: HirKind::Look(Look::new()), props: Properties::default() };",
          "    let result = extractor.extract(&hir);",
          "    assert_eq!(result.literals().unwrap(), &[Literal::exact(vec![])]);",
          "    assert!(result.is_exact());",
          "    assert!(result.is_finite());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]