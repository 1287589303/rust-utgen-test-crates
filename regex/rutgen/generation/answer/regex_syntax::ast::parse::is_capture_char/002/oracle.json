[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '_';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);"
        ],
        "code": [
          "{",
          "    let c = '_';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert!(result == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);  // Validate that 'a' is a valid first character in a capture group name when first is true.",
          "    ",
          "    let c = '_';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, true);  // Validate that '_' is a valid first character in a capture group name when first is true.",
          "    ",
          "    let c = '1';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, false);  // Validate that '1' is NOT a valid first character in a capture group name when first is true.",
          "    ",
          "    let c = 'A';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, true);  // Validate that 'A' is a valid first character in a capture group name when first is true."
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, true);  // Validate that 'a' is a valid first character in a capture group name when first is true.",
          "    ",
          "    let c = '_';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, true);  // Validate that '_' is a valid first character in a capture group name when first is true.",
          "    ",
          "    let c = '1';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, false);  // Validate that '1' is NOT a valid first character in a capture group name when first is true.",
          "    ",
          "    let c = 'A';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, true);  // Validate that 'A' is a valid first character in a capture group name when first is true.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'A';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let c = 'A';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'z';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert!(is_capture_char('_', true));",
          "    assert!(is_capture_char('A', true));",
          "    assert!(!is_capture_char('1', true));",
          "    assert!(!is_capture_char('.', true));",
          "    assert!(!is_capture_char('[', true));",
          "    assert!(!is_capture_char(']', true));",
          "    assert!(is_capture_char('z', true));",
          "    assert!(!is_capture_char('!', true));"
        ],
        "code": [
          "{",
          "    let c = 'z';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert!(is_capture_char('_', true));",
          "    assert!(is_capture_char('A', true));",
          "    assert!(!is_capture_char('1', true));",
          "    assert!(!is_capture_char('.', true));",
          "    assert!(!is_capture_char('[', true));",
          "    assert!(!is_capture_char(']', true));",
          "    assert!(is_capture_char('z', true));",
          "    assert!(!is_capture_char('!', true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'Z';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);"
        ],
        "code": [
          "{",
          "    let c = 'Z';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert!(result == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '1';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let c = '1';",
          "    let first = true;",
          "    let result = is_capture_char(c, first);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]