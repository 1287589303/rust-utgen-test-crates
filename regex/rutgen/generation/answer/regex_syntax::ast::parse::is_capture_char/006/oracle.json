[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('_', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('.', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);  // Test for c == '.' with first == false",
          "    ",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);  // Test for c == '_' with first == false",
          "    ",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true);  // Test for c == '[' with first == false",
          "    ",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false);  // Test for c == ']' with first == false",
          "    ",
          "    let result = is_capture_char('a', false);",
          "    assert_eq!(result, true);  // Test for c being an alphanumeric character with first == false",
          "    ",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);  // Confirming c == '.' with first == false again",
          "    ",
          "    let result = is_capture_char('!', false);",
          "    assert_eq!(result, false);  // Test for c being a non-alphanumeric and non-special character with first == false"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);  // Test for c == '.' with first == false",
          "    ",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);  // Test for c == '_' with first == false",
          "    ",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true);  // Test for c == '[' with first == false",
          "    ",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false);  // Test for c == ']' with first == false",
          "    ",
          "    let result = is_capture_char('a', false);",
          "    assert_eq!(result, true);  // Test for c being an alphanumeric character with first == false",
          "    ",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);  // Confirming c == '.' with first == false again",
          "    ",
          "    let result = is_capture_char('!', false);",
          "    assert_eq!(result, false);  // Test for c being a non-alphanumeric and non-special character with first == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('[', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true); // c == '[' should return true",
          "    let result_dot = is_capture_char('.', false);",
          "    assert_eq!(result_dot, true); // c == '.' should return true",
          "    let result_underscore = is_capture_char('_', false);",
          "    assert_eq!(result_underscore, true); // c == '_' should return true",
          "    let result_bracket_closing = is_capture_char(']', false);",
          "    assert_eq!(result_bracket_closing, false); // c == ']' should return false",
          "    let result_non_alphanumeric = is_capture_char('#', false);",
          "    assert_eq!(result_non_alphanumeric, false); // non-alphanumeric should return false"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true); // c == '[' should return true",
          "    let result_dot = is_capture_char('.', false);",
          "    assert_eq!(result_dot, true); // c == '.' should return true",
          "    let result_underscore = is_capture_char('_', false);",
          "    assert_eq!(result_underscore, true); // c == '_' should return true",
          "    let result_bracket_closing = is_capture_char(']', false);",
          "    assert_eq!(result_bracket_closing, false); // c == ']' should return false",
          "    let result_non_alphanumeric = is_capture_char('#', false);",
          "    assert_eq!(result_non_alphanumeric, false); // non-alphanumeric should return false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char(']', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('a', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('A', false), true);",
          "    assert_eq!(is_capture_char('z', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('a', false);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('A', false), true);",
          "    assert_eq!(is_capture_char('z', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('0', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true); // c == '0' is alphanumeric and should return true",
          "    ",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true); // c == '_' should return true",
          "    ",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true); // c == '.' should return true",
          "    ",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true); // c == '[' should return true",
          "    ",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false); // c == ']' should return false"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('0', false);",
          "    assert_eq!(result, true); // c == '0' is alphanumeric and should return true",
          "    ",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true); // c == '_' should return true",
          "    ",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true); // c == '.' should return true",
          "    ",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true); // c == '[' should return true",
          "    ",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, false); // c == ']' should return false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('Z', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('0', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('A', false), true);",
          "    assert_eq!(is_capture_char('%', false), false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('Z', false);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('0', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('A', false), true);",
          "    assert_eq!(is_capture_char('%', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('9', false);",
          "}"
        ],
        "oracle": [
          "    let result = is_capture_char('_', false); assert_eq!(result, true);",
          "    let result = is_capture_char('.', false); assert_eq!(result, true);",
          "    let result = is_capture_char('[', false); assert_eq!(result, true);",
          "    let result = is_capture_char(']', false); assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('9', false);",
          "    let result = is_capture_char('_', false); assert_eq!(result, true);",
          "    let result = is_capture_char('.', false); assert_eq!(result, true);",
          "    let result = is_capture_char('[', false); assert_eq!(result, true);",
          "    let result = is_capture_char(']', false); assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]