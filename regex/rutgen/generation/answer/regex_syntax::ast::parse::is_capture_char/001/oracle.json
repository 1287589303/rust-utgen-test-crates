[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_cases = ['1', '2', '3', '!', '@', '#', '%', '^', '&', '*', '(', ')', '-', '=', '+', '\\0'];",
          "    for &c in &test_cases {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('1', true), false);",
          "    assert_eq!(is_capture_char('2', true), false);",
          "    assert_eq!(is_capture_char('3', true), false);",
          "    assert_eq!(is_capture_char('!', true), false);",
          "    assert_eq!(is_capture_char('@', true), false);",
          "    assert_eq!(is_capture_char('#', true), false);",
          "    assert_eq!(is_capture_char('%', true), false);",
          "    assert_eq!(is_capture_char('^', true), false);",
          "    assert_eq!(is_capture_char('&', true), false);",
          "    assert_eq!(is_capture_char('*', true), false);",
          "    assert_eq!(is_capture_char('(', true), false);",
          "    assert_eq!(is_capture_char(')', true), false);",
          "    assert_eq!(is_capture_char('-', true), false);",
          "    assert_eq!(is_capture_char('=', true), false);",
          "    assert_eq!(is_capture_char('+', true), false);",
          "    assert_eq!(is_capture_char('\\0', true), false);"
        ],
        "code": [
          "{",
          "    let test_cases = ['1', '2', '3', '!', '@', '#', '%', '^', '&', '*', '(', ')', '-', '=', '+', '\\0'];",
          "    for &c in &test_cases {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "    assert_eq!(is_capture_char('1', true), false);",
          "    assert_eq!(is_capture_char('2', true), false);",
          "    assert_eq!(is_capture_char('3', true), false);",
          "    assert_eq!(is_capture_char('!', true), false);",
          "    assert_eq!(is_capture_char('@', true), false);",
          "    assert_eq!(is_capture_char('#', true), false);",
          "    assert_eq!(is_capture_char('%', true), false);",
          "    assert_eq!(is_capture_char('^', true), false);",
          "    assert_eq!(is_capture_char('&', true), false);",
          "    assert_eq!(is_capture_char('*', true), false);",
          "    assert_eq!(is_capture_char('(', true), false);",
          "    assert_eq!(is_capture_char(')', true), false);",
          "    assert_eq!(is_capture_char('-', true), false);",
          "    assert_eq!(is_capture_char('=', true), false);",
          "    assert_eq!(is_capture_char('+', true), false);",
          "    assert_eq!(is_capture_char('\\0', true), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special_characters = ['$', '>', '<', '|', '/', '\\\\', ':', ';', '\\\"', '\\''];",
          "    for &c in &special_characters {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(!is_capture_char('$', true));",
          "    assert!(!is_capture_char('>', true));",
          "    assert!(!is_capture_char('<', true));",
          "    assert!(!is_capture_char('|', true));",
          "    assert!(!is_capture_char('/', true));",
          "    assert!(!is_capture_char('\\\\', true));",
          "    assert!(!is_capture_char(':', true));",
          "    assert!(!is_capture_char(';', true));",
          "    assert!(!is_capture_char('\\\"', true));",
          "    assert!(!is_capture_char('\\'', true));"
        ],
        "code": [
          "{",
          "    let special_characters = ['$', '>', '<', '|', '/', '\\\\', ':', ';', '\\\"', '\\''];",
          "    for &c in &special_characters {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "    assert!(!is_capture_char('$', true));",
          "    assert!(!is_capture_char('>', true));",
          "    assert!(!is_capture_char('<', true));",
          "    assert!(!is_capture_char('|', true));",
          "    assert!(!is_capture_char('/', true));",
          "    assert!(!is_capture_char('\\\\', true));",
          "    assert!(!is_capture_char(':', true));",
          "    assert!(!is_capture_char(';', true));",
          "    assert!(!is_capture_char('\\\"', true));",
          "    assert!(!is_capture_char('\\'', true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uppercase_non_alpha = ['@', '#', '$', '%', '^', '&', '*'];",
          "    for &c in &uppercase_non_alpha {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(result == false);"
        ],
        "code": [
          "{",
          "    let uppercase_non_alpha = ['@', '#', '$', '%', '^', '&', '*'];",
          "    for &c in &uppercase_non_alpha {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "    assert!(result == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lowercase_non_alpha = ['`', '~', '-', '=', '+', ',', '.', '<', '>'];",
          "    for &c in &lowercase_non_alpha {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(!is_capture_char('`', true));",
          "    assert!(!is_capture_char('~', true));",
          "    assert!(!is_capture_char('-', true));",
          "    assert!(!is_capture_char('=', true));",
          "    assert!(!is_capture_char('+', true));",
          "    assert!(!is_capture_char(',', true));",
          "    assert!(!is_capture_char('.', true));",
          "    assert!(!is_capture_char('<', true));",
          "    assert!(!is_capture_char('>', true));"
        ],
        "code": [
          "{",
          "    let lowercase_non_alpha = ['`', '~', '-', '=', '+', ',', '.', '<', '>'];",
          "    for &c in &lowercase_non_alpha {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "    assert!(!is_capture_char('`', true));",
          "    assert!(!is_capture_char('~', true));",
          "    assert!(!is_capture_char('-', true));",
          "    assert!(!is_capture_char('=', true));",
          "    assert!(!is_capture_char('+', true));",
          "    assert!(!is_capture_char(',', true));",
          "    assert!(!is_capture_char('.', true));",
          "    assert!(!is_capture_char('<', true));",
          "    assert!(!is_capture_char('>', true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]