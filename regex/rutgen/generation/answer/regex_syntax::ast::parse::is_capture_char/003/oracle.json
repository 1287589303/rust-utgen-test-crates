[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '#'; // not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('#', false), false);"
        ],
        "code": [
          "{",
          "    let c = '#'; // not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('#', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '@'; // not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert!(!is_capture_char('@', false));"
        ],
        "code": [
          "{",
          "    let c = '@'; // not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert!(!is_capture_char('@', false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '%'; // not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('%', false), false);"
        ],
        "code": [
          "{",
          "    let c = '%'; // not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('%', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = ' '; // whitespace; not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char(' ', false), false);"
        ],
        "code": [
          "{",
          "    let c = ' '; // whitespace; not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char(' ', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '`'; // not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('`', false), false);"
        ],
        "code": [
          "{",
          "    let c = '`'; // not '_', not alphanumeric, and not '.' or '[' or ']'",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('`', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]