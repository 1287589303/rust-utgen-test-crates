[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '_';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);"
        ],
        "code": [
          "{",
          "    let c = '_';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '[';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('[', false), true);"
        ],
        "code": [
          "{",
          "    let c = '[';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = ']';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    let c = ']';",
          "    let first = false;",
          "    assert_eq!(is_capture_char(c, first), true);"
        ],
        "code": [
          "{",
          "    let c = ']';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    let c = ']';",
          "    let first = false;",
          "    assert_eq!(is_capture_char(c, first), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('0', false), true);",
          "    assert_eq!(is_capture_char('A', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('Z', false), true);",
          "    assert_eq!(is_capture_char('9', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);"
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('0', false), true);",
          "    assert_eq!(is_capture_char('A', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('Z', false), true);",
          "    assert_eq!(is_capture_char('9', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '1';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('5', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char(' ', false), false);",
          "    assert_eq!(is_capture_char('!', false), false);"
        ],
        "code": [
          "{",
          "    let c = '1';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('5', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char(' ', false), false);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'z';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('0', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "    assert_eq!(is_capture_char('-', false), false);"
        ],
        "code": [
          "{",
          "    let c = 'z';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('0', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "    assert_eq!(is_capture_char('-', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'A';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('b', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);"
        ],
        "code": [
          "{",
          "    let c = 'A';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('b', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '9';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('9', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "    assert_eq!(is_capture_char(' ', false), false);"
        ],
        "code": [
          "{",
          "    let c = '9';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('9', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "    assert_eq!(is_capture_char(' ', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]