[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags {",
          "        unicode: Some(true),",
          "        ..Flags::default()",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::WordBoundaryStartAngle,",
          "    };",
          "",
          "    let translator_ref = &translator;",
          "    let result = translator_ref.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    let assertion = ast::Assertion { span: Span::default(), kind: ast::AssertionKind::WordBoundaryStartAngle };",
          "    let result = translator_ref.hir_assertion(&assertion);",
          "    assert!(result.is_ok());",
          "    let hir_result = result.unwrap();",
          "    assert_eq!(hir_result.kind, HirKind::Look(hir::Look::WordStartUnicode));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags {",
          "        unicode: Some(true),",
          "        ..Flags::default()",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::WordBoundaryStartAngle,",
          "    };",
          "",
          "    let translator_ref = &translator;",
          "    let result = translator_ref.hir_assertion(&assertion);",
          "    let assertion = ast::Assertion { span: Span::default(), kind: ast::AssertionKind::WordBoundaryStartAngle };",
          "    let result = translator_ref.hir_assertion(&assertion);",
          "    assert!(result.is_ok());",
          "    let hir_result = result.unwrap();",
          "    assert_eq!(hir_result.kind, HirKind::Look(hir::Look::WordStartUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags {",
          "        unicode: Some(true),",
          "        ..Flags::default()",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::WordBoundaryStart,",
          "    };",
          "",
          "    let translator_ref = &translator;",
          "    let result = translator_ref.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordStartUnicode)));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags {",
          "        unicode: Some(true),",
          "        ..Flags::default()",
          "    };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::WordBoundaryStart,",
          "    };",
          "",
          "    let translator_ref = &translator;",
          "    let result = translator_ref.hir_assertion(&assertion);",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordStartUnicode)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]