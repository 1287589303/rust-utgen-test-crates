[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            multi_line: Some(true),",
          "            crlf: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    let expected = Ok(Hir::look(hir::Look::End));",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            multi_line: Some(true),",
          "            crlf: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "    let expected = Ok(Hir::look(hir::Look::End));",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            multi_line: Some(true),",
          "            crlf: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            multi_line: Some(true),",
          "            crlf: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            multi_line: Some(false),",
          "            crlf: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            multi_line: Some(false),",
          "            crlf: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            multi_line: Some(false),",
          "            crlf: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    let mut translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(Flags { unicode: Some(true), multi_line: Some(false), crlf: Some(false), ..Flags::default() }), utf8: true, line_terminator: b'\\n' };",
          "    let assertion = ast::Assertion { span: Span::default(), kind: ast::AssertionKind::EndText };",
          "    let result = translator.hir_assertion(&assertion);",
          "    assert!(result.is_ok());",
          "    let hir_result = result.unwrap();",
          "    assert_eq!(hir_result.kind, HirKind::Look(hir::Look::End));"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(true),",
          "            multi_line: Some(false),",
          "            crlf: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "    let mut translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(Flags { unicode: Some(true), multi_line: Some(false), crlf: Some(false), ..Flags::default() }), utf8: true, line_terminator: b'\\n' };",
          "    let assertion = ast::Assertion { span: Span::default(), kind: ast::AssertionKind::EndText };",
          "    let result = translator.hir_assertion(&assertion);",
          "    assert!(result.is_ok());",
          "    let hir_result = result.unwrap();",
          "    assert_eq!(hir_result.kind, HirKind::Look(hir::Look::End));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            multi_line: Some(true),",
          "            crlf: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    let mut translator = Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags {",
          "    unicode: Some(false),",
          "    multi_line: Some(true),",
          "    crlf: Some(true),",
          "    ..Flags::default()",
          "    }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let assertion = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::EndText,",
          "    };",
          "    ",
          "    let expected_result = Ok(Hir::look(hir::Look::End));",
          "    assert_eq!(translator.hir_assertion(&assertion), expected_result);"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            multi_line: Some(true),",
          "            crlf: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "    let mut translator = Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags {",
          "    unicode: Some(false),",
          "    multi_line: Some(true),",
          "    crlf: Some(true),",
          "    ..Flags::default()",
          "    }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let assertion = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::EndText,",
          "    };",
          "    ",
          "    let expected_result = Ok(Hir::look(hir::Look::End));",
          "    assert_eq!(translator.hir_assertion(&assertion), expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            multi_line: Some(true),",
          "            crlf: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            multi_line: Some(true),",
          "            crlf: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            multi_line: Some(false),",
          "            crlf: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    let expected_result = Hir::look(hir::Look::End);",
          "    assert_eq!(_result, Ok(expected_result));",
          "    assert!(!translator.flags().multi_line());",
          "    assert!(translator.flags().crlf());",
          "    assert!(!translator.flags().unicode());"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            multi_line: Some(false),",
          "            crlf: Some(true),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "    let expected_result = Hir::look(hir::Look::End);",
          "    assert_eq!(_result, Ok(expected_result));",
          "    assert!(!translator.flags().multi_line());",
          "    assert!(translator.flags().crlf());",
          "    assert!(!translator.flags().unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            multi_line: Some(false),",
          "            crlf: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));",
          "    assert!(matches!(_result, Ok(Hir { kind: HirKind::Look(hir::Look::End), .. })));",
          "    assert_eq!(translator.flags().unicode(), false);",
          "    assert_eq!(translator.flags().multi_line(), false);",
          "    assert_eq!(translator.flags().crlf(), false);"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            multi_line: Some(false),",
          "            crlf: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let _result = translator.hir_assertion(&assertion);",
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));",
          "    assert!(matches!(_result, Ok(Hir { kind: HirKind::Look(hir::Look::End), .. })));",
          "    assert_eq!(translator.flags().unicode(), false);",
          "    assert_eq!(translator.flags().multi_line(), false);",
          "    assert_eq!(translator.flags().crlf(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]