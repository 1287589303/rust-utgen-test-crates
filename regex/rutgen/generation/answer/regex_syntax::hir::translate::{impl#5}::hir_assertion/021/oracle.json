[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyVisitor;",
          "    impl Visitor for DummyVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let pattern = \"test_pattern\";",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            multi_line: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndLine,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, pattern);",
          "    let _result = translator_i.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.unwrap(), Hir::look(hir::Look::End));"
        ],
        "code": [
          "{",
          "    struct DummyVisitor;",
          "    impl Visitor for DummyVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let pattern = \"test_pattern\";",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            multi_line: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndLine,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, pattern);",
          "    let _result = translator_i.hir_assertion(&assertion);",
          "    assert_eq!(_result.unwrap(), Hir::look(hir::Look::End));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyVisitor;",
          "    impl Visitor for DummyVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let pattern = \"test_pattern\";",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            multi_line: Some(false),",
          "            crlf: Some(true),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndLine,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, pattern);",
          "    let _result = translator_i.hir_assertion(&assertion);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));",
          "    assert!(translator_i.flags().multi_line() == false);",
          "    assert_eq!(translator_i.flags().crlf(), true);",
          "    assert_eq!(translator_i.flags().unicode(), true);",
          "    assert_eq!(translator_i.flags().case_insensitive(), false);",
          "    assert_eq!(translator_i.flags().dot_matches_new_line(), false);",
          "    assert_eq!(translator_i.flags().swap_greed(), false);"
        ],
        "code": [
          "{",
          "    struct DummyVisitor;",
          "    impl Visitor for DummyVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let pattern = \"test_pattern\";",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            multi_line: Some(false),",
          "            crlf: Some(true),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let assertion = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndLine,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&translator, pattern);",
          "    let _result = translator_i.hir_assertion(&assertion);",
          "    assert_eq!(_result, Ok(Hir::look(hir::Look::End)));",
          "    assert!(translator_i.flags().multi_line() == false);",
          "    assert_eq!(translator_i.flags().crlf(), true);",
          "    assert_eq!(translator_i.flags().unicode(), true);",
          "    assert_eq!(translator_i.flags().case_insensitive(), false);",
          "    assert_eq!(translator_i.flags().dot_matches_new_line(), false);",
          "    assert_eq!(translator_i.flags().swap_greed(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]