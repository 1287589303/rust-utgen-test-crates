[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        trans: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut trans = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let asst = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::NotWordBoundary,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "",
          "    let result = translator_i.hir_assertion(&asst);",
          "}"
        ],
        "oracle": [
          "    let trans = Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags {",
          "    unicode: Some(false),",
          "    ..Flags::default()",
          "    }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let asst = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::NotWordBoundary,",
          "    };",
          "    ",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "    ",
          "    let result = translator_i.hir_assertion(&asst);",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordAsciiNegate)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        trans: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut trans = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let asst = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::NotWordBoundary,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "",
          "    let result = translator_i.hir_assertion(&asst);",
          "    let trans = Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags {",
          "    unicode: Some(false),",
          "    ..Flags::default()",
          "    }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let asst = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::NotWordBoundary,",
          "    };",
          "    ",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "    ",
          "    let result = translator_i.hir_assertion(&asst);",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::WordAsciiNegate)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        trans: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut trans = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let asst = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "",
          "    let result = translator_i.hir_assertion(&asst);",
          "}"
        ],
        "oracle": [
          "    let trans_flags_unset = Flags { unicode: Some(false), ..Flags::default() };",
          "    let trans_flags_set = Flags { unicode: Some(true), ..Flags::default() };",
          "    ",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::End)));",
          "    ",
          "    let asst_not_word_boundary = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::NotWordBoundary,",
          "    };",
          "    ",
          "    let result_not_word_boundary = translator_i.hir_assertion(&asst_not_word_boundary);",
          "    assert_eq!(result_not_word_boundary, Ok(Hir::look(hir::Look::WordAsciiNegate)));",
          "    ",
          "    let asst_word_boundary = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::WordBoundary,",
          "    };",
          "    ",
          "    let result_word_boundary = translator_i.hir_assertion(&asst_word_boundary);",
          "    assert_eq!(result_word_boundary, Ok(Hir::look(hir::Look::WordAscii)));",
          "    ",
          "    let asst_word_boundary_unicode = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::WordBoundary,",
          "    };",
          "    ",
          "    trans.flags.set(Flags { unicode: Some(true), ..Flags::default() });",
          "    let result_word_boundary_unicode = translator_i.hir_assertion(&asst_word_boundary_unicode);",
          "    assert_eq!(result_word_boundary_unicode, Ok(Hir::look(hir::Look::WordUnicode)));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        trans: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut trans = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let asst = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::EndText,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "",
          "    let result = translator_i.hir_assertion(&asst);",
          "    let trans_flags_unset = Flags { unicode: Some(false), ..Flags::default() };",
          "    let trans_flags_set = Flags { unicode: Some(true), ..Flags::default() };",
          "    ",
          "    assert_eq!(result, Ok(Hir::look(hir::Look::End)));",
          "    ",
          "    let asst_not_word_boundary = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::NotWordBoundary,",
          "    };",
          "    ",
          "    let result_not_word_boundary = translator_i.hir_assertion(&asst_not_word_boundary);",
          "    assert_eq!(result_not_word_boundary, Ok(Hir::look(hir::Look::WordAsciiNegate)));",
          "    ",
          "    let asst_word_boundary = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::WordBoundary,",
          "    };",
          "    ",
          "    let result_word_boundary = translator_i.hir_assertion(&asst_word_boundary);",
          "    assert_eq!(result_word_boundary, Ok(Hir::look(hir::Look::WordAscii)));",
          "    ",
          "    let asst_word_boundary_unicode = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::WordBoundary,",
          "    };",
          "    ",
          "    trans.flags.set(Flags { unicode: Some(true), ..Flags::default() });",
          "    let result_word_boundary_unicode = translator_i.hir_assertion(&asst_word_boundary_unicode);",
          "    assert_eq!(result_word_boundary_unicode, Ok(Hir::look(hir::Look::WordUnicode)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVisitor {",
          "        trans: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut trans = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let asst = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::StartLine,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "",
          "    let result = translator_i.hir_assertion(&asst);",
          "}"
        ],
        "oracle": [
          "    let trans = Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags {",
          "    unicode: Some(false),",
          "    ..Flags::default()",
          "    }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let asst_not_word_boundary = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::NotWordBoundary,",
          "    };",
          "    ",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "    let result = translator_i.hir_assertion(&asst_not_word_boundary);",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind, HirKind::Look(hir::Look::WordAsciiNegate));"
        ],
        "code": [
          "{",
          "    struct TestVisitor {",
          "        trans: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = ();",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut trans = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Flags::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let asst = ast::Assertion {",
          "        span: Span::default(),",
          "        kind: ast::AssertionKind::StartLine,",
          "    };",
          "",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "",
          "    let result = translator_i.hir_assertion(&asst);",
          "    let trans = Translator {",
          "    stack: RefCell::new(vec![]),",
          "    flags: Cell::new(Flags {",
          "    unicode: Some(false),",
          "    ..Flags::default()",
          "    }),",
          "    utf8: true,",
          "    line_terminator: b'\\n',",
          "    };",
          "    ",
          "    let asst_not_word_boundary = ast::Assertion {",
          "    span: Span::default(),",
          "    kind: ast::AssertionKind::NotWordBoundary,",
          "    };",
          "    ",
          "    let translator_i = TranslatorI::new(&trans, \"\");",
          "    let result = translator_i.hir_assertion(&asst_not_word_boundary);",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind, HirKind::Look(hir::Look::WordAsciiNegate));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]