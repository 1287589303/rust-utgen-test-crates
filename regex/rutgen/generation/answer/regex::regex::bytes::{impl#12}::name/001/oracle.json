[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"abc123\").unwrap();",
          "    let numbers = caps.name(\"numbers\");",
          "}"
        ],
        "oracle": [
          "    assert!(numbers.is_some());",
          "    assert_eq!(numbers.unwrap().start, 3);",
          "    assert_eq!(numbers.unwrap().end, 6);",
          "    let letters = caps.name(\"letters\");",
          "    assert!(letters.is_none());"
        ],
        "code": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"abc123\").unwrap();",
          "    let numbers = caps.name(\"numbers\");",
          "    assert!(numbers.is_some());",
          "    assert_eq!(numbers.unwrap().start, 3);",
          "    assert_eq!(numbers.unwrap().end, 6);",
          "    let letters = caps.name(\"letters\");",
          "    assert!(letters.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"abcXYZ\").unwrap();",
          "    let letters = caps.name(\"letters\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(letters, Some(Match::new(b\"abcXYZ\", 3, 6)));",
          "    assert_eq!(caps.name(\"numbers\"), None);",
          "    assert_eq!(caps.name(\"invalid\"), None);",
          "    assert_eq!(caps.name(\"letters\").map_or(&b\"\"[..], |m| m.as_bytes()), b\"\");",
          "    assert_eq!(caps.name(\"letters\").map(|m| m.start), Some(3));",
          "    assert_eq!(caps.name(\"letters\").map(|m| m.end), Some(6));"
        ],
        "code": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"abcXYZ\").unwrap();",
          "    let letters = caps.name(\"letters\");",
          "    assert_eq!(letters, Some(Match::new(b\"abcXYZ\", 3, 6)));",
          "    assert_eq!(caps.name(\"numbers\"), None);",
          "    assert_eq!(caps.name(\"invalid\"), None);",
          "    assert_eq!(caps.name(\"letters\").map_or(&b\"\"[..], |m| m.as_bytes()), b\"\");",
          "    assert_eq!(caps.name(\"letters\").map(|m| m.start), Some(3));",
          "    assert_eq!(caps.name(\"letters\").map(|m| m.end), Some(6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"abc\").unwrap();",
          "    let letters = caps.name(\"numbers\");",
          "}"
        ],
        "oracle": [
          "    assert!(letters.is_none());"
        ],
        "code": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"abc\").unwrap();",
          "    let letters = caps.name(\"numbers\");",
          "    assert!(letters.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"abc123\").unwrap();",
          "    let non_existent = caps.name(\"non_existent_group\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(non_existent, None);"
        ],
        "code": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"abc123\").unwrap();",
          "    let non_existent = caps.name(\"non_existent_group\");",
          "    assert_eq!(non_existent, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"\").unwrap();",
          "    let letters = caps.name(\"numbers\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(letters, None);",
          "    let caps = re.captures(b\"abc123\").unwrap();",
          "    let numbers = caps.name(\"numbers\").unwrap();",
          "    assert_eq!(numbers.start, 3);",
          "    assert_eq!(numbers.end, 6);",
          "    let letters = caps.name(\"letters\");",
          "    assert_eq!(letters, None);",
          "    let caps = re.captures(b\"ABC\").unwrap();",
          "    let numbers = caps.name(\"numbers\");",
          "    assert_eq!(numbers, None);",
          "    let letters = caps.name(\"letters\").unwrap();",
          "    assert_eq!(letters.start, 0);",
          "    assert_eq!(letters.end, 3);"
        ],
        "code": [
          "{",
          "    let re = regex::bytes::Regex::new(r\"[a-z]+(?:(?<numbers>[0-9]+)|(?<letters>[A-Z]+))\").unwrap();",
          "    let caps = re.captures(b\"\").unwrap();",
          "    let letters = caps.name(\"numbers\");",
          "    assert_eq!(letters, None);",
          "    let caps = re.captures(b\"abc123\").unwrap();",
          "    let numbers = caps.name(\"numbers\").unwrap();",
          "    assert_eq!(numbers.start, 3);",
          "    assert_eq!(numbers.end, 6);",
          "    let letters = caps.name(\"letters\");",
          "    assert_eq!(letters, None);",
          "    let caps = re.captures(b\"ABC\").unwrap();",
          "    let numbers = caps.name(\"numbers\");",
          "    assert_eq!(numbers, None);",
          "    let letters = caps.name(\"letters\").unwrap();",
          "    assert_eq!(letters.start, 0);",
          "    assert_eq!(letters.end, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]