[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_ids: Vec<StateID> = Vec::new();",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let state_ids: Vec<StateID> = Vec::new();",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID::default();",
          "    let state_ids = vec![state_id];",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    let state_id = StateID::default();",
          "    let state_ids = vec![state_id];",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(state_id));",
          "    assert_eq!(iter.next(), None);",
          "    state_ids.push(StateID::default());",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    assert_eq!(iter.next(), Some(state_id));"
        ],
        "code": [
          "{",
          "    let state_id = StateID::default();",
          "    let state_ids = vec![state_id];",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    let result = iter.next();",
          "    let state_id = StateID::default();",
          "    let state_ids = vec![state_id];",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(state_id));",
          "    assert_eq!(iter.next(), None);",
          "    state_ids.push(StateID::default());",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    assert_eq!(iter.next(), Some(state_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id1 = StateID::default();",
          "    let state_id2 = StateID(SmallIndex(1));",
          "    let state_ids = vec![state_id1, state_id2];",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    ",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    let result3 = iter.next(); // Should return None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result1, Some(state_id1));",
          "    assert_eq!(result2, Some(state_id2));",
          "    assert_eq!(result3, None);"
        ],
        "code": [
          "{",
          "    let state_id1 = StateID::default();",
          "    let state_id2 = StateID(SmallIndex(1));",
          "    let state_ids = vec![state_id1, state_id2];",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    ",
          "    let result1 = iter.next();",
          "    let result2 = iter.next();",
          "    let result3 = iter.next(); // Should return None",
          "    assert_eq!(result1, Some(state_id1));",
          "    assert_eq!(result2, Some(state_id2));",
          "    assert_eq!(result3, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id1 = StateID::default();",
          "    let state_id2 = StateID(SmallIndex(1));",
          "    let state_ids = vec![state_id1, state_id2];",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    ",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    let result = iter.next(); // Should be None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next(), Some(state_id1)); // First call, expect Some(state_id1)",
          "    assert_eq!(iter.next(), Some(state_id2)); // Second call, expect Some(state_id2)",
          "    assert_eq!(iter.next(), None); // Third call, expect None"
        ],
        "code": [
          "{",
          "    let state_id1 = StateID::default();",
          "    let state_id2 = StateID(SmallIndex(1));",
          "    let state_ids = vec![state_id1, state_id2];",
          "    let mut iter = SparseSetIter(state_ids.iter());",
          "    ",
          "    let _ = iter.next();",
          "    let _ = iter.next();",
          "    let result = iter.next(); // Should be None",
          "    assert_eq!(iter.next(), Some(state_id1)); // First call, expect Some(state_id1)",
          "    assert_eq!(iter.next(), Some(state_id2)); // Second call, expect Some(state_id2)",
          "    assert_eq!(iter.next(), None); // Third call, expect None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]