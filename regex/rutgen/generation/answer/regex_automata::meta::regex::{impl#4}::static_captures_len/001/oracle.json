[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(\"a\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(a)\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(a)|(b)\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(b)+\").unwrap();",
          "    re.static_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(1), Regex::new(\"a\").unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new(\"(a)\").unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
          "    assert_eq!(Some(3), Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new(\"(b)+\").unwrap().static_captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"a\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(a)\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(a)|(b)\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(a)(b)|(c)(d)\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(b)+\").unwrap();",
          "    re.static_captures_len();",
          "    assert_eq!(Some(1), Regex::new(\"a\").unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new(\"(a)\").unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new(\"(a)|(b)\").unwrap().static_captures_len());",
          "    assert_eq!(Some(3), Regex::new(\"(a)(b)|(c)(d)\").unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new(\"(b)+\").unwrap().static_captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(\"(a)|b\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"a|(b)\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(b)*\").unwrap();",
          "    re.static_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.static_captures_len(), None);",
          "    assert_eq!(re.static_captures_len(), None);",
          "    assert_eq!(re.static_captures_len(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(\"(a)|b\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"a|(b)\").unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new(\"(b)*\").unwrap();",
          "    re.static_captures_len();",
          "    assert_eq!(re.static_captures_len(), None);",
          "    assert_eq!(re.static_captures_len(), None);",
          "    assert_eq!(re.static_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new_many(&[\"a\", \"b\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)\", \"(b)\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)\", \"b\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"a\", \"(b)\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)\", \"(b)*\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)+\", \"(b)+\"]).unwrap();",
          "    re.static_captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Some(1), Regex::new_many(&[\"a\", \"b\"]).unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new_many(&[\"(a)\", \"(b)\"]).unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new_many(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap().static_captures_len());",
          "    assert_eq!(Some(3), Regex::new_many(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap().static_captures_len());",
          "    assert_eq!(None, Regex::new_many(&[\"(a)\", \"b\"]).unwrap().static_captures_len());",
          "    assert_eq!(None, Regex::new_many(&[\"a\", \"(b)\"]).unwrap().static_captures_len());",
          "    assert_eq!(None, Regex::new_many(&[\"(a)\", \"(b)*\"]).unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new_many(&[\"(a)+\", \"(b)+\"]).unwrap().static_captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new_many(&[\"a\", \"b\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)\", \"(b)\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)\", \"b\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"a\", \"(b)\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)\", \"(b)*\"]).unwrap();",
          "    re.static_captures_len();",
          "    ",
          "    let re = Regex::new_many(&[\"(a)+\", \"(b)+\"]).unwrap();",
          "    re.static_captures_len();",
          "    assert_eq!(Some(1), Regex::new_many(&[\"a\", \"b\"]).unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new_many(&[\"(a)\", \"(b)\"]).unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new_many(&[\"(a)|(b)\", \"(c)|(d)\"]).unwrap().static_captures_len());",
          "    assert_eq!(Some(3), Regex::new_many(&[\"(a)(b)|(c)(d)\", \"(x)(y)\"]).unwrap().static_captures_len());",
          "    assert_eq!(None, Regex::new_many(&[\"(a)\", \"b\"]).unwrap().static_captures_len());",
          "    assert_eq!(None, Regex::new_many(&[\"a\", \"(b)\"]).unwrap().static_captures_len());",
          "    assert_eq!(None, Regex::new_many(&[\"(a)\", \"(b)*\"]).unwrap().static_captures_len());",
          "    assert_eq!(Some(2), Regex::new_many(&[\"(a)+\", \"(b)+\"]).unwrap().static_captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]