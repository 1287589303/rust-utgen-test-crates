[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_patterns = [",
          "        \"a\",",
          "        \"[^a]\",",
          "        \".\",",
          "        \"\\\\W\",",
          "        \"\\\\b\",",
          "        \"\\\\B\",",
          "        \"(?-u)\\\\b\",",
          "        \"(?-u)\\\\B\",",
          "        \"\\\\xFF\",",
          "    ];",
          "",
          "    for pattern in &test_patterns {",
          "        let properties = regex_syntax::ParserBuilder::new()",
          "            .utf8(true)",
          "            .build()",
          "            .parse(pattern)",
          "            .unwrap()",
          "            .properties();",
          "        properties.is_utf8();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"a\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"[^a]\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\".\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\W\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\b\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\B\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"(?-u)\\\\b\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"(?-u)\\\\B\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\xFF\").unwrap().properties().is_utf8());"
        ],
        "code": [
          "{",
          "    let test_patterns = [",
          "        \"a\",",
          "        \"[^a]\",",
          "        \".\",",
          "        \"\\\\W\",",
          "        \"\\\\b\",",
          "        \"\\\\B\",",
          "        \"(?-u)\\\\b\",",
          "        \"(?-u)\\\\B\",",
          "        \"\\\\xFF\",",
          "    ];",
          "",
          "    for pattern in &test_patterns {",
          "        let properties = regex_syntax::ParserBuilder::new()",
          "            .utf8(true)",
          "            .build()",
          "            .parse(pattern)",
          "            .unwrap()",
          "            .properties();",
          "        properties.is_utf8();",
          "    }",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"a\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"[^a]\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\".\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\W\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\b\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\B\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"(?-u)\\\\b\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"(?-u)\\\\B\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().utf8(true).build().parse(\"\\\\xFF\").unwrap().properties().is_utf8());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_patterns = [",
          "        \"(?-u)[^a]\",",
          "        \"(?-u).\",",
          "        \"(?-u)\\\\W\",",
          "        \"(?-u)\\\\xFF\",",
          "    ];",
          "",
          "    for pattern in &test_patterns {",
          "        let properties = regex_syntax::ParserBuilder::new()",
          "            .utf8(false)",
          "            .build()",
          "            .parse(pattern)",
          "            .unwrap()",
          "            .properties();",
          "        properties.is_utf8();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)[^a]\").unwrap().properties().is_utf8());",
          "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u).\").unwrap().properties().is_utf8());",
          "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)\\W\").unwrap().properties().is_utf8());",
          "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)\\xFF\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\xFF\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\xE2\\x98\\x83\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"a\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"[^a]\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\".\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\W\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\b\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\B\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\b\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\B\").unwrap().properties().is_utf8());"
        ],
        "code": [
          "{",
          "    let test_patterns = [",
          "        \"(?-u)[^a]\",",
          "        \"(?-u).\",",
          "        \"(?-u)\\\\W\",",
          "        \"(?-u)\\\\xFF\",",
          "    ];",
          "",
          "    for pattern in &test_patterns {",
          "        let properties = regex_syntax::ParserBuilder::new()",
          "            .utf8(false)",
          "            .build()",
          "            .parse(pattern)",
          "            .unwrap()",
          "            .properties();",
          "        properties.is_utf8();",
          "    }",
          "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)[^a]\").unwrap().properties().is_utf8());",
          "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u).\").unwrap().properties().is_utf8());",
          "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)\\W\").unwrap().properties().is_utf8());",
          "    assert!(!regex_syntax::ParserBuilder::new().utf8(false).build().parse(r\"(?-u)\\xFF\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\xFF\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\xE2\\x98\\x83\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"a\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"[^a]\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\".\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\W\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\b\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"\\B\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\b\").unwrap().properties().is_utf8());",
          "    assert!(regex_syntax::ParserBuilder::new().build().parse(r\"(?-u)\\B\").unwrap().properties().is_utf8());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]