[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'!';",
          "    is_valid_cap_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'!'), false);"
        ],
        "code": [
          "{",
          "    let input = b'!';",
          "    is_valid_cap_letter(input);",
          "    assert_eq!(is_valid_cap_letter(b'!'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'@';",
          "    is_valid_cap_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'@'), false);"
        ],
        "code": [
          "{",
          "    let input = b'@';",
          "    is_valid_cap_letter(input);",
          "    assert_eq!(is_valid_cap_letter(b'@'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'#';",
          "    is_valid_cap_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'#'), false);"
        ],
        "code": [
          "{",
          "    let input = b'#';",
          "    is_valid_cap_letter(input);",
          "    assert_eq!(is_valid_cap_letter(b'#'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'$';",
          "    is_valid_cap_letter(input);",
          "}"
        ],
        "oracle": [
          "    let input = b'0'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'5'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'a'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'z'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'A'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'Z'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'@'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'$'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'_'; assert_eq!(is_valid_cap_letter(input), true);"
        ],
        "code": [
          "{",
          "    let input = b'$';",
          "    is_valid_cap_letter(input);",
          "    let input = b'0'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'5'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'a'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'z'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'A'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'Z'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'@'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'$'; assert_eq!(is_valid_cap_letter(input), false);",
          "    let input = b'_'; assert_eq!(is_valid_cap_letter(input), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'%';",
          "    is_valid_cap_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'%'), false);"
        ],
        "code": [
          "{",
          "    let input = b'%';",
          "    is_valid_cap_letter(input);",
          "    assert_eq!(is_valid_cap_letter(b'%'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]