[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 97; // corresponds to 'a'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(97), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = 97; // corresponds to 'a'",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(97), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 122; // corresponds to 'z'",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert!(is_valid_cap_letter(122));  // Test with byte corresponding to 'z' (valid lowercase letter)",
          "    assert!(is_valid_cap_letter(97));   // Test with byte corresponding to 'a' (valid lowercase letter)",
          "    assert!(is_valid_cap_letter(90));   // Test with byte corresponding to 'Z' (valid uppercase letter)",
          "    assert!(is_valid_cap_letter(48));   // Test with byte corresponding to '0' (valid digit)",
          "    assert!(is_valid_cap_letter(95));   // Test with byte corresponding to '_' (valid underscore)"
        ],
        "code": [
          "{",
          "    let b: u8 = 122; // corresponds to 'z'",
          "    is_valid_cap_letter(b);",
          "    assert!(is_valid_cap_letter(122));  // Test with byte corresponding to 'z' (valid lowercase letter)",
          "    assert!(is_valid_cap_letter(97));   // Test with byte corresponding to 'a' (valid lowercase letter)",
          "    assert!(is_valid_cap_letter(90));   // Test with byte corresponding to 'Z' (valid uppercase letter)",
          "    assert!(is_valid_cap_letter(48));   // Test with byte corresponding to '0' (valid digit)",
          "    assert!(is_valid_cap_letter(95));   // Test with byte corresponding to '_' (valid underscore)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 48; // corresponds to '0' (testing excluded from b'0'..=b'9')",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    is_valid_cap_letter(b'a'); // should return true",
          "    is_valid_cap_letter(b'z'); // should return true",
          "    is_valid_cap_letter(b'A'); // should return true",
          "    is_valid_cap_letter(b'Z'); // should return true",
          "    is_valid_cap_letter(b'_'); // should return true"
        ],
        "code": [
          "{",
          "    let b: u8 = 48; // corresponds to '0' (testing excluded from b'0'..=b'9')",
          "    is_valid_cap_letter(b);",
          "    is_valid_cap_letter(b'a'); // should return true",
          "    is_valid_cap_letter(b'z'); // should return true",
          "    is_valid_cap_letter(b'A'); // should return true",
          "    is_valid_cap_letter(b'Z'); // should return true",
          "    is_valid_cap_letter(b'_'); // should return true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 57; // corresponds to '9' (testing excluded from b'0'..=b'9')",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    is_valid_cap_letter(b'a'); // Expect true",
          "    is_valid_cap_letter(b'g'); // Expect true",
          "    is_valid_cap_letter(b'1'); // Expect false",
          "    is_valid_cap_letter(b'Z'); // Expect true",
          "    is_valid_cap_letter(b'_'); // Expect true"
        ],
        "code": [
          "{",
          "    let b: u8 = 57; // corresponds to '9' (testing excluded from b'0'..=b'9')",
          "    is_valid_cap_letter(b);",
          "    is_valid_cap_letter(b'a'); // Expect true",
          "    is_valid_cap_letter(b'g'); // Expect true",
          "    is_valid_cap_letter(b'1'); // Expect false",
          "    is_valid_cap_letter(b'Z'); // Expect true",
          "    is_valid_cap_letter(b'_'); // Expect true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]