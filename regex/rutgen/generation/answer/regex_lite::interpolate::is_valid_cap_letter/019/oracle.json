[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'A';",
          "    is_valid_cap_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert!(is_valid_cap_letter(b'A'));"
        ],
        "code": [
          "{",
          "    let input = b'A';",
          "    is_valid_cap_letter(input);",
          "    assert!(is_valid_cap_letter(b'A'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'Z';",
          "    is_valid_cap_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let input = b'Z';",
          "    is_valid_cap_letter(input);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'_';",
          "    is_valid_cap_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'B'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "    assert_eq!(is_valid_cap_letter(b'1'), false);",
          "    assert_eq!(is_valid_cap_letter(b'a'), false);",
          "    assert_eq!(is_valid_cap_letter(b'Z' + 1), false);  // Testing just above valid range",
          "    assert_eq!(is_valid_cap_letter(b'@'), false); // Testing non-allowed character"
        ],
        "code": [
          "{",
          "    let input = b'_';",
          "    is_valid_cap_letter(input);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'B'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "    assert_eq!(is_valid_cap_letter(b'1'), false);",
          "    assert_eq!(is_valid_cap_letter(b'a'), false);",
          "    assert_eq!(is_valid_cap_letter(b'Z' + 1), false);  // Testing just above valid range",
          "    assert_eq!(is_valid_cap_letter(b'@'), false); // Testing non-allowed character",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]