[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'0';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'0';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'1';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'1'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'1';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'1'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'2';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'2'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'2';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'2'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'3';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert!(is_valid_cap_letter(b'0'));",
          "    assert!(is_valid_cap_letter(b'1'));",
          "    assert!(is_valid_cap_letter(b'2'));",
          "    assert!(is_valid_cap_letter(b'3'));",
          "    assert!(is_valid_cap_letter(b'4'));",
          "    assert!(is_valid_cap_letter(b'5'));",
          "    assert!(is_valid_cap_letter(b'6'));",
          "    assert!(is_valid_cap_letter(b'7'));",
          "    assert!(is_valid_cap_letter(b'8'));",
          "    assert!(is_valid_cap_letter(b'9'));",
          "    assert!(is_valid_cap_letter(b'a'));",
          "    assert!(is_valid_cap_letter(b'b'));",
          "    assert!(is_valid_cap_letter(b'z'));",
          "    assert!(is_valid_cap_letter(b'A'));",
          "    assert!(is_valid_cap_letter(b'B'));",
          "    assert!(is_valid_cap_letter(b'Z'));",
          "    assert!(is_valid_cap_letter(b'_'));"
        ],
        "code": [
          "{",
          "    let b: u8 = b'3';",
          "    is_valid_cap_letter(b);",
          "    assert!(is_valid_cap_letter(b'0'));",
          "    assert!(is_valid_cap_letter(b'1'));",
          "    assert!(is_valid_cap_letter(b'2'));",
          "    assert!(is_valid_cap_letter(b'3'));",
          "    assert!(is_valid_cap_letter(b'4'));",
          "    assert!(is_valid_cap_letter(b'5'));",
          "    assert!(is_valid_cap_letter(b'6'));",
          "    assert!(is_valid_cap_letter(b'7'));",
          "    assert!(is_valid_cap_letter(b'8'));",
          "    assert!(is_valid_cap_letter(b'9'));",
          "    assert!(is_valid_cap_letter(b'a'));",
          "    assert!(is_valid_cap_letter(b'b'));",
          "    assert!(is_valid_cap_letter(b'z'));",
          "    assert!(is_valid_cap_letter(b'A'));",
          "    assert!(is_valid_cap_letter(b'B'));",
          "    assert!(is_valid_cap_letter(b'Z'));",
          "    assert!(is_valid_cap_letter(b'_'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'4';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'4'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'4';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'4'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'5';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'5'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'5';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'6';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'6'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'6';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'6'), true);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'7';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'1'), true);",
          "    assert_eq!(is_valid_cap_letter(b'2'), true);",
          "    assert_eq!(is_valid_cap_letter(b'3'), true);",
          "    assert_eq!(is_valid_cap_letter(b'4'), true);",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);",
          "    assert_eq!(is_valid_cap_letter(b'6'), true);",
          "    assert_eq!(is_valid_cap_letter(b'7'), true);",
          "    assert_eq!(is_valid_cap_letter(b'8'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'7';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'1'), true);",
          "    assert_eq!(is_valid_cap_letter(b'2'), true);",
          "    assert_eq!(is_valid_cap_letter(b'3'), true);",
          "    assert_eq!(is_valid_cap_letter(b'4'), true);",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);",
          "    assert_eq!(is_valid_cap_letter(b'6'), true);",
          "    assert_eq!(is_valid_cap_letter(b'7'), true);",
          "    assert_eq!(is_valid_cap_letter(b'8'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'8';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'8';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'9';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'1'), true);",
          "    assert_eq!(is_valid_cap_letter(b'2'), true);",
          "    assert_eq!(is_valid_cap_letter(b'3'), true);",
          "    assert_eq!(is_valid_cap_letter(b'4'), true);",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);",
          "    assert_eq!(is_valid_cap_letter(b'6'), true);",
          "    assert_eq!(is_valid_cap_letter(b'7'), true);",
          "    assert_eq!(is_valid_cap_letter(b'8'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'9';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'1'), true);",
          "    assert_eq!(is_valid_cap_letter(b'2'), true);",
          "    assert_eq!(is_valid_cap_letter(b'3'), true);",
          "    assert_eq!(is_valid_cap_letter(b'4'), true);",
          "    assert_eq!(is_valid_cap_letter(b'5'), true);",
          "    assert_eq!(is_valid_cap_letter(b'6'), true);",
          "    assert_eq!(is_valid_cap_letter(b'7'), true);",
          "    assert_eq!(is_valid_cap_letter(b'8'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'a';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    is_valid_cap_letter(b'0'); // Expected: true",
          "    is_valid_cap_letter(b'5'); // Expected: true",
          "    is_valid_cap_letter(b'a'); // Expected: true",
          "    is_valid_cap_letter(b'z'); // Expected: true",
          "    is_valid_cap_letter(b'A'); // Expected: true",
          "    is_valid_cap_letter(b'Z'); // Expected: true",
          "    is_valid_cap_letter(b'_'); // Expected: true"
        ],
        "code": [
          "{",
          "    let b: u8 = b'a';",
          "    is_valid_cap_letter(b);",
          "    is_valid_cap_letter(b'0'); // Expected: true",
          "    is_valid_cap_letter(b'5'); // Expected: true",
          "    is_valid_cap_letter(b'a'); // Expected: true",
          "    is_valid_cap_letter(b'z'); // Expected: true",
          "    is_valid_cap_letter(b'A'); // Expected: true",
          "    is_valid_cap_letter(b'Z'); // Expected: true",
          "    is_valid_cap_letter(b'_'); // Expected: true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'z';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'1'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);"
        ],
        "code": [
          "{",
          "    let b: u8 = b'z';",
          "    is_valid_cap_letter(b);",
          "    assert_eq!(is_valid_cap_letter(b'0'), true);",
          "    assert_eq!(is_valid_cap_letter(b'1'), true);",
          "    assert_eq!(is_valid_cap_letter(b'9'), true);",
          "    assert_eq!(is_valid_cap_letter(b'a'), true);",
          "    assert_eq!(is_valid_cap_letter(b'z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'A'), true);",
          "    assert_eq!(is_valid_cap_letter(b'Z'), true);",
          "    assert_eq!(is_valid_cap_letter(b'_'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'A';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert!(is_valid_cap_letter(b'0'));",
          "    assert!(is_valid_cap_letter(b'5'));",
          "    assert!(is_valid_cap_letter(b'a'));",
          "    assert!(is_valid_cap_letter(b'z'));",
          "    assert!(is_valid_cap_letter(b'A'));",
          "    assert!(is_valid_cap_letter(b'Z'));",
          "    assert!(is_valid_cap_letter(b'_'));"
        ],
        "code": [
          "{",
          "    let b: u8 = b'A';",
          "    is_valid_cap_letter(b);",
          "    assert!(is_valid_cap_letter(b'0'));",
          "    assert!(is_valid_cap_letter(b'5'));",
          "    assert!(is_valid_cap_letter(b'a'));",
          "    assert!(is_valid_cap_letter(b'z'));",
          "    assert!(is_valid_cap_letter(b'A'));",
          "    assert!(is_valid_cap_letter(b'Z'));",
          "    assert!(is_valid_cap_letter(b'_'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'Z';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    is_valid_cap_letter(b'0') == true",
          "    is_valid_cap_letter(b'5') == true",
          "    is_valid_cap_letter(b'A') == true",
          "    is_valid_cap_letter(b'Z') == true",
          "    is_valid_cap_letter(b'a') == true",
          "    is_valid_cap_letter(b'z') == true",
          "    is_valid_cap_letter(b'_') == true"
        ],
        "code": [
          "{",
          "    let b: u8 = b'Z';",
          "    is_valid_cap_letter(b);",
          "    is_valid_cap_letter(b'0') == true",
          "    is_valid_cap_letter(b'5') == true",
          "    is_valid_cap_letter(b'A') == true",
          "    is_valid_cap_letter(b'Z') == true",
          "    is_valid_cap_letter(b'a') == true",
          "    is_valid_cap_letter(b'z') == true",
          "    is_valid_cap_letter(b'_') == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'_';",
          "    is_valid_cap_letter(b);",
          "}"
        ],
        "oracle": [
          "    assert!(is_valid_cap_letter(b'0'));",
          "    assert!(is_valid_cap_letter(b'1'));",
          "    assert!(is_valid_cap_letter(b'9'));",
          "    assert!(is_valid_cap_letter(b'a'));",
          "    assert!(is_valid_cap_letter(b'z'));",
          "    assert!(is_valid_cap_letter(b'A'));",
          "    assert!(is_valid_cap_letter(b'Z'));",
          "    assert!(is_valid_cap_letter(b'_'));"
        ],
        "code": [
          "{",
          "    let b: u8 = b'_';",
          "    is_valid_cap_letter(b);",
          "    assert!(is_valid_cap_letter(b'0'));",
          "    assert!(is_valid_cap_letter(b'1'));",
          "    assert!(is_valid_cap_letter(b'9'));",
          "    assert!(is_valid_cap_letter(b'a'));",
          "    assert!(is_valid_cap_letter(b'z'));",
          "    assert!(is_valid_cap_letter(b'A'));",
          "    assert!(is_valid_cap_letter(b'Z'));",
          "    assert!(is_valid_cap_letter(b'_'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]