[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.unicode(false);",
          "}"
        ],
        "oracle": [
          "    builder.flags.unicode.assert_eq(Some(false));"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.unicode(false);",
          "    builder.flags.unicode.assert_eq(Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.unicode(false).unicode(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.flags.unicode, Some(false));"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.unicode(false).unicode(false);",
          "    assert_eq!(builder.flags.unicode, Some(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.case_insensitive(true)",
          "           .multi_line(true)",
          "           .unicode(false);",
          "}"
        ],
        "oracle": [
          "    builder.unicode(false).flags.unicode.is_some() == Some(false)"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    builder.case_insensitive(true)",
          "           .multi_line(true)",
          "           .unicode(false);",
          "    builder.unicode(false).flags.unicode.is_some() == Some(false)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]