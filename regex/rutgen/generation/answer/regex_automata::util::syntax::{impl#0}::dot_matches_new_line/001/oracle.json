[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().dot_matches_new_line(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.dot_matches_new_line, true);",
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    let config_false = Config::new().dot_matches_new_line(false);",
          "    assert_eq!(config_false.dot_matches_new_line, false);",
          "    assert_eq!(config_false.get_dot_matches_new_line(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().dot_matches_new_line(true);",
          "    assert_eq!(config.dot_matches_new_line, true);",
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    let config_false = Config::new().dot_matches_new_line(false);",
          "    assert_eq!(config_false.dot_matches_new_line, false);",
          "    assert_eq!(config_false.get_dot_matches_new_line(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    let config_enabled = Config::new().dot_matches_new_line(true);",
          "    assert_eq!(config_enabled.get_dot_matches_new_line(), true);",
          "    let config_disabled = Config::new().dot_matches_new_line(false).dot_matches_new_line(true);",
          "    assert_eq!(config_disabled.get_dot_matches_new_line(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().dot_matches_new_line(false);",
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    let config_enabled = Config::new().dot_matches_new_line(true);",
          "    assert_eq!(config_enabled.get_dot_matches_new_line(), true);",
          "    let config_disabled = Config::new().dot_matches_new_line(false).dot_matches_new_line(true);",
          "    assert_eq!(config_disabled.get_dot_matches_new_line(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().case_insensitive(true).dot_matches_new_line(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_case_insensitive(), true);",
          "    assert_eq!(config.get_multi_line(), false);",
          "    assert_eq!(config.get_unicode(), true);",
          "    assert_eq!(config.get_utf8(), true);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    assert_eq!(config.get_octal(), false);",
          "    assert_eq!(config.get_swap_greed(), false);",
          "    assert_eq!(config.get_ignore_whitespace(), false);",
          "    assert_eq!(config.get_crlf(), false);",
          "    assert_eq!(config.get_line_terminator(), b'\\n');"
        ],
        "code": [
          "{",
          "    let config = Config::new().case_insensitive(true).dot_matches_new_line(true);",
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_case_insensitive(), true);",
          "    assert_eq!(config.get_multi_line(), false);",
          "    assert_eq!(config.get_unicode(), true);",
          "    assert_eq!(config.get_utf8(), true);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    assert_eq!(config.get_octal(), false);",
          "    assert_eq!(config.get_swap_greed(), false);",
          "    assert_eq!(config.get_ignore_whitespace(), false);",
          "    assert_eq!(config.get_crlf(), false);",
          "    assert_eq!(config.get_line_terminator(), b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().multi_line(true).dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_multi_line(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().multi_line(true).dot_matches_new_line(false);",
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_multi_line(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().crlf(true).dot_matches_new_line(true);",
          "}"
        ],
        "oracle": [
          "    config.get_dot_matches_new_line() == true",
          "    config.get_crlf() == true"
        ],
        "code": [
          "{",
          "    let config = Config::new().crlf(true).dot_matches_new_line(true);",
          "    config.get_dot_matches_new_line() == true",
          "    config.get_crlf() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().line_terminator(10).dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_line_terminator(), 10);"
        ],
        "code": [
          "{",
          "    let config = Config::new().line_terminator(10).dot_matches_new_line(false);",
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_line_terminator(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().swap_greed(true).dot_matches_new_line(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_swap_greed(), true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().swap_greed(true).dot_matches_new_line(true);",
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_swap_greed(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().ignore_whitespace(true).dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().ignore_whitespace(true).dot_matches_new_line(false);",
          "    assert_eq!(config.dot_matches_new_line, false);",
          "    assert_eq!(config.ignore_whitespace, true);",
          "    let new_config = config.dot_matches_new_line(true);",
          "    assert_eq!(new_config.dot_matches_new_line, true);",
          "    assert_eq!(new_config.ignore_whitespace, true);"
        ],
        "code": [
          "{",
          "    let config = Config::new().ignore_whitespace(true).dot_matches_new_line(false);",
          "    let config = Config::new().ignore_whitespace(true).dot_matches_new_line(false);",
          "    assert_eq!(config.dot_matches_new_line, false);",
          "    assert_eq!(config.ignore_whitespace, true);",
          "    let new_config = config.dot_matches_new_line(true);",
          "    assert_eq!(new_config.dot_matches_new_line, true);",
          "    assert_eq!(new_config.ignore_whitespace, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().unicode(true).dot_matches_new_line(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_unicode(), true);",
          "    ",
          "    let config_disabled = Config::new().unicode(false).dot_matches_new_line(false);",
          "    assert_eq!(config_disabled.get_dot_matches_new_line(), false);",
          "    assert_eq!(config_disabled.get_unicode(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().unicode(true).dot_matches_new_line(true);",
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_unicode(), true);",
          "    ",
          "    let config_disabled = Config::new().unicode(false).dot_matches_new_line(false);",
          "    assert_eq!(config_disabled.get_dot_matches_new_line(), false);",
          "    assert_eq!(config_disabled.get_unicode(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().utf8(true).dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_utf8(), true);",
          "    assert_eq!(config.get_case_insensitive(), false);",
          "    assert_eq!(config.get_multi_line(), false);",
          "    assert_eq!(config.get_crlf(), false);",
          "    assert_eq!(config.get_line_terminator(), 0);",
          "    assert_eq!(config.get_swap_greed(), false);",
          "    assert_eq!(config.get_ignore_whitespace(), false);",
          "    assert_eq!(config.get_unicode(), true);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    assert_eq!(config.get_octal(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().utf8(true).dot_matches_new_line(false);",
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_utf8(), true);",
          "    assert_eq!(config.get_case_insensitive(), false);",
          "    assert_eq!(config.get_multi_line(), false);",
          "    assert_eq!(config.get_crlf(), false);",
          "    assert_eq!(config.get_line_terminator(), 0);",
          "    assert_eq!(config.get_swap_greed(), false);",
          "    assert_eq!(config.get_ignore_whitespace(), false);",
          "    assert_eq!(config.get_unicode(), true);",
          "    assert_eq!(config.get_nest_limit(), 0);",
          "    assert_eq!(config.get_octal(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().nest_limit(500).dot_matches_new_line(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_nest_limit(), 500);"
        ],
        "code": [
          "{",
          "    let config = Config::new().nest_limit(500).dot_matches_new_line(true);",
          "    assert_eq!(config.get_dot_matches_new_line(), true);",
          "    assert_eq!(config.get_nest_limit(), 500);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().octal(true).dot_matches_new_line(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_octal(), true);",
          "    assert_eq!(config.get_unicode(), false);",
          "    assert_eq!(config.get_utf8(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().octal(true).dot_matches_new_line(false);",
          "    assert_eq!(config.get_dot_matches_new_line(), false);",
          "    assert_eq!(config.get_octal(), true);",
          "    assert_eq!(config.get_unicode(), false);",
          "    assert_eq!(config.get_utf8(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]