[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a*\"),",
          "        states: vec![State::Char { code: 'a' }, State::Match],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = vec![FollowEpsilon::Explore(StateID(0))];",
          "    let mut curr_slots = vec![None; 1];",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"aa\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "    ",
          "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "}"
        ],
        "oracle": [
          "    curr_slots[0] == None",
          "    next.slot_table.for_state(StateID(0)) == curr_slots",
          "    stack.len() == 0",
          "    next.set.contains(StateID(0)) == true",
          "    curr_slots[0].is_some() == true",
          "    stack[0] == FollowEpsilon::Explore(StateID(0))"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a*\"),",
          "        states: vec![State::Char { code: 'a' }, State::Match],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = vec![FollowEpsilon::Explore(StateID(0))];",
          "    let mut curr_slots = vec![None; 1];",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"aa\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "    ",
          "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "    curr_slots[0] == None",
          "    next.slot_table.for_state(StateID(0)) == curr_slots",
          "    stack.len() == 0",
          "    next.set.contains(StateID(0)) == true",
          "    curr_slots[0].is_some() == true",
          "    stack[0] == FollowEpsilon::Explore(StateID(0))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"b*\"),",
          "        states: vec![State::Char { code: 'b' }, State::Match],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = vec![FollowEpsilon::Explore(StateID(0))];",
          "    let mut curr_slots = vec![None; 2];",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"bbb\";",
          "    let at = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(stack.len(), 1);",
          "    assert!(matches!(stack.last(), Some(FollowEpsilon::Explore(StateID(0)))));",
          "    assert!(curr_slots.iter().all(|&slot| slot.is_none()));",
          "    assert!(next.set.is_empty());",
          "    assert_eq!(next.slot_table.for_state(StateID(0)), curr_slots);",
          "    assert!(curr_slots[0].is_none());",
          "    assert!(curr_slots[1].is_none());",
          "    assert_eq!(haystack[at], b'b');",
          "    assert_eq!(next.set.len(), 1);",
          "    assert!(next.set.contains(StateID(0)));"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"b*\"),",
          "        states: vec![State::Char { code: 'b' }, State::Match],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = vec![FollowEpsilon::Explore(StateID(0))];",
          "    let mut curr_slots = vec![None; 2];",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"bbb\";",
          "    let at = 1;",
          "    let sid = StateID(0);",
          "    ",
          "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "    assert_eq!(stack.len(), 1);",
          "    assert!(matches!(stack.last(), Some(FollowEpsilon::Explore(StateID(0)))));",
          "    assert!(curr_slots.iter().all(|&slot| slot.is_none()));",
          "    assert!(next.set.is_empty());",
          "    assert_eq!(next.slot_table.for_state(StateID(0)), curr_slots);",
          "    assert!(curr_slots[0].is_none());",
          "    assert!(curr_slots[1].is_none());",
          "    assert_eq!(haystack[at], b'b');",
          "    assert_eq!(next.set.len(), 1);",
          "    assert!(next.set.contains(StateID(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"c\"),",
          "        states: vec![State::Char { code: 'c' }, State::Match],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = vec![FollowEpsilon::Explore(StateID(0))];",
          "    let mut curr_slots = vec![None; 1];",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"c\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "}"
        ],
        "oracle": [
          "    stack.push(FollowEpsilon::Explore(StateID(0)));",
          "    let Some(frame) = stack.pop();",
          "    frame matches FollowEpsilon::Explore(StateID(0));",
          "    curr_slots[0] = Some(NonMaxUsize::new(at).unwrap());",
          "    next.slot_table.for_state(StateID(0)).copy_from_slice(&curr_slots);",
          "    next.set.insert(StateID(0));"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"c\"),",
          "        states: vec![State::Char { code: 'c' }, State::Match],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "    ",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = vec![FollowEpsilon::Explore(StateID(0))];",
          "    let mut curr_slots = vec![None; 1];",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"c\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "    stack.push(FollowEpsilon::Explore(StateID(0)));",
          "    let Some(frame) = stack.pop();",
          "    frame matches FollowEpsilon::Explore(StateID(0));",
          "    curr_slots[0] = Some(NonMaxUsize::new(at).unwrap());",
          "    next.slot_table.for_state(StateID(0)).copy_from_slice(&curr_slots);",
          "    next.set.insert(StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"d\"),",
          "        states: vec![State::Char { code: 'd' }, State::Match],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = vec![FollowEpsilon::Explore(StateID(0))];",
          "    let mut curr_slots = vec![None; 1];",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"d\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "}"
        ],
        "oracle": [
          "    stack.pop().is_some() // Check that stack has elements",
          "    frame == FollowEpsilon::Explore(StateID(0)) // Check that the popped frame is an Explore variant with the expected StateID",
          "    curr_slots[0].is_none() // Check that the initial current slot is None",
          "    next.set.contains(StateID(0)) // Check that the state set in next contains StateID(0)",
          "    curr_slots[0].is_some() // Check that the slot in curr_slots is not None after the exploration",
          "    stack.len() == 0 // Check that the stack is empty after epsilon closure execution",
          "    next.slot_table.for_state(StateID(0)).copy_from_slice(&curr_slots) // Check that slot table in next states is updated correctly"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"d\"),",
          "        states: vec![State::Char { code: 'd' }, State::Match],",
          "        start: StateID(0),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![None],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    let pike_vm = PikeVM::new(nfa);",
          "    let mut stack = vec![FollowEpsilon::Explore(StateID(0))];",
          "    let mut curr_slots = vec![None; 1];",
          "    let mut next = ActiveStates {",
          "        set: SparseSet::new(),",
          "        slot_table: SlotTable::new(),",
          "    };",
          "    let haystack = b\"d\";",
          "    let at = 0;",
          "    let sid = StateID(0);",
          "",
          "    pike_vm.epsilon_closure(&mut stack, &mut curr_slots, &mut next, haystack, at, sid);",
          "    stack.pop().is_some() // Check that stack has elements",
          "    frame == FollowEpsilon::Explore(StateID(0)) // Check that the popped frame is an Explore variant with the expected StateID",
          "    curr_slots[0].is_none() // Check that the initial current slot is None",
          "    next.set.contains(StateID(0)) // Check that the state set in next contains StateID(0)",
          "    curr_slots[0].is_some() // Check that the slot in curr_slots is not None after the exploration",
          "    stack.len() == 0 // Check that the stack is empty after epsilon closure execution",
          "    next.slot_table.for_state(StateID(0)).copy_from_slice(&curr_slots) // Check that slot table in next states is updated correctly",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]