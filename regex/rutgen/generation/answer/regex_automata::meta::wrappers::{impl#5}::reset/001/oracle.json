[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockBoundedBacktracker {",
          "        engine: Option<BoundedBacktrackerEngine>,",
          "    }",
          "    ",
          "    impl MockBoundedBacktracker {",
          "        fn new() -> Self {",
          "            MockBoundedBacktracker {",
          "                engine: Some(BoundedBacktrackerEngine(",
          "                    Some(backtrack::BoundedBacktracker {})",
          "                )),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let mut cache = Cache {",
          "        capmatches: Captures {},",
          "        pikevm: wrappers::PikeVMCache {},",
          "        backtrack: wrappers::BoundedBacktrackerCache::none(),",
          "        onepass: wrappers::OnePassCache {},",
          "        hybrid: wrappers::HybridCache {},",
          "        revhybrid: wrappers::ReverseHybridCache {},",
          "    };",
          "    ",
          "    let builder = MockBoundedBacktracker::new();",
          "    ",
          "    cache.reset(&builder);",
          "}"
        ],
        "oracle": [
          "    cache.backtrack.memory_usage() == 0",
          "    cache.reset(&builder);",
          "    assert!(cache.backtrack.0.is_some());",
          "    let engine = cache.backtrack.0.as_ref().unwrap();",
          "    engine.reset(&e.0);",
          "    assert_eq!(engine.memory_usage(), expected_memory_usage);",
          "    assert!(cache.visited.is_reset());"
        ],
        "code": [
          "{",
          "    struct MockBoundedBacktracker {",
          "        engine: Option<BoundedBacktrackerEngine>,",
          "    }",
          "    ",
          "    impl MockBoundedBacktracker {",
          "        fn new() -> Self {",
          "            MockBoundedBacktracker {",
          "                engine: Some(BoundedBacktrackerEngine(",
          "                    Some(backtrack::BoundedBacktracker {})",
          "                )),",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let mut cache = Cache {",
          "        capmatches: Captures {},",
          "        pikevm: wrappers::PikeVMCache {},",
          "        backtrack: wrappers::BoundedBacktrackerCache::none(),",
          "        onepass: wrappers::OnePassCache {},",
          "        hybrid: wrappers::HybridCache {},",
          "        revhybrid: wrappers::ReverseHybridCache {},",
          "    };",
          "    ",
          "    let builder = MockBoundedBacktracker::new();",
          "    ",
          "    cache.reset(&builder);",
          "    cache.backtrack.memory_usage() == 0",
          "    cache.reset(&builder);",
          "    assert!(cache.backtrack.0.is_some());",
          "    let engine = cache.backtrack.0.as_ref().unwrap();",
          "    engine.reset(&e.0);",
          "    assert_eq!(engine.memory_usage(), expected_memory_usage);",
          "    assert!(cache.visited.is_reset());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct MockBoundedBacktracker {",
          "        engine: Option<BoundedBacktrackerEngine>,",
          "    }",
          "    ",
          "    impl MockBoundedBacktracker {",
          "        fn new() -> Self {",
          "            MockBoundedBacktracker {",
          "                engine: None,",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let mut cache = Cache {",
          "        capmatches: Captures {},",
          "        pikevm: wrappers::PikeVMCache {},",
          "        backtrack: wrappers::BoundedBacktrackerCache::none(),",
          "        onepass: wrappers::OnePassCache {},",
          "        hybrid: wrappers::HybridCache {},",
          "        revhybrid: wrappers::ReverseHybridCache {},",
          "    };",
          "    ",
          "    let builder = MockBoundedBacktracker::new();",
          "    ",
          "    cache.reset(&builder);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.memory_usage(), expected_memory_usage);",
          "    assert!(cache.visited.is_empty());",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_none());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());",
          "    assert!(cache.progress.is_none());"
        ],
        "code": [
          "{",
          "    struct MockBoundedBacktracker {",
          "        engine: Option<BoundedBacktrackerEngine>,",
          "    }",
          "    ",
          "    impl MockBoundedBacktracker {",
          "        fn new() -> Self {",
          "            MockBoundedBacktracker {",
          "                engine: None,",
          "            }",
          "        }",
          "    }",
          "    ",
          "    let mut cache = Cache {",
          "        capmatches: Captures {},",
          "        pikevm: wrappers::PikeVMCache {},",
          "        backtrack: wrappers::BoundedBacktrackerCache::none(),",
          "        onepass: wrappers::OnePassCache {},",
          "        hybrid: wrappers::HybridCache {},",
          "        revhybrid: wrappers::ReverseHybridCache {},",
          "    };",
          "    ",
          "    let builder = MockBoundedBacktracker::new();",
          "    ",
          "    cache.reset(&builder);",
          "    assert_eq!(cache.memory_usage(), expected_memory_usage);",
          "    assert!(cache.visited.is_empty());",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_none());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());",
          "    assert!(cache.progress.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]