[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.pats, vec![]);",
          "    assert!(builder.metac.nfa_size_limit().is_some());",
          "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());"
        ],
        "code": [
          "{",
          "    let builder = Builder::default();",
          "    assert_eq!(builder.pats, vec![]);",
          "    assert!(builder.metac.nfa_size_limit().is_some());",
          "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder.pats.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.pats, vec![]);",
          "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());"
        ],
        "code": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder.pats.clone();",
          "    assert_eq!(builder.pats, vec![]);",
          "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder.metac.nfa_size_limit;",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::default();",
          "    assert_eq!(builder.pats, vec![]);",
          "    assert_eq!(builder.metac.nfa_size_limit, Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity, 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());"
        ],
        "code": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder.metac.nfa_size_limit;",
          "    let builder = Builder::default();",
          "    assert_eq!(builder.pats, vec![]);",
          "    assert_eq!(builder.metac.nfa_size_limit, Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity, 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder.metac.hybrid_cache_capacity;",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::default();",
          "    assert!(builder.pats.is_empty());",
          "    assert_eq!(builder.metac.nfa_size_limit, Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity, 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());"
        ],
        "code": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder.metac.hybrid_cache_capacity;",
          "    let builder = Builder::default();",
          "    assert!(builder.pats.is_empty());",
          "    assert_eq!(builder.metac.nfa_size_limit, Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity, 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder.syntaxc.clone();",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::default();",
          "    assert_eq!(builder.pats, vec![]);",
          "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());"
        ],
        "code": [
          "{",
          "    let builder = Builder::default();",
          "    let _ = builder.syntaxc.clone();",
          "    let builder = Builder::default();",
          "    assert_eq!(builder.pats, vec![]);",
          "    assert_eq!(builder.metac.nfa_size_limit(), Some(10 * (1 << 20)));",
          "    assert_eq!(builder.metac.hybrid_cache_capacity(), 2 * (1 << 20));",
          "    assert_eq!(builder.syntaxc, syntax::Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]