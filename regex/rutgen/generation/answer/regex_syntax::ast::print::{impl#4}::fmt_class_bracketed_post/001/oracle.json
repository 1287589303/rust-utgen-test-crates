[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassBracketed { span: Span::new(0, 1), negated: false, kind: ClassSet::Normal };",
          "    ",
          "    writer.fmt_class_bracketed_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"]\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassBracketed { span: Span::new(0, 1), negated: false, kind: ClassSet::Normal };",
          "    ",
          "    writer.fmt_class_bracketed_post(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"]\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassBracketed { span: Span::new(0, 0), negated: false, kind: ClassSet::Empty };",
          "",
          "    writer.fmt_class_bracketed_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"]\");",
          "    assert!(writer.wtr.output.is_empty() == false);",
          "    assert!(writer.wtr.output.len() == 1);",
          "    assert!(writer.wtr.output.contains(\"]\"));",
          "    assert!(writer.fmt_class_bracketed_post(&ast).is_ok());",
          "    assert!(writer.wtr.output.ends_with(\"]\"));",
          "    assert_ne!(writer.wtr.output, \"[\");",
          "    assert_eq!(writer.wtr.output.chars().count(), 1);"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassBracketed { span: Span::new(0, 0), negated: false, kind: ClassSet::Empty };",
          "",
          "    writer.fmt_class_bracketed_post(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"]\");",
          "    assert!(writer.wtr.output.is_empty() == false);",
          "    assert!(writer.wtr.output.len() == 1);",
          "    assert!(writer.wtr.output.contains(\"]\"));",
          "    assert!(writer.fmt_class_bracketed_post(&ast).is_ok());",
          "    assert!(writer.wtr.output.ends_with(\"]\"));",
          "    assert_ne!(writer.wtr.output, \"[\");",
          "    assert_eq!(writer.wtr.output.chars().count(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast1 = ast::ClassBracketed { span: Span::new(0, 1), negated: false, kind: ClassSet::Normal };",
          "    let ast2 = ast::ClassBracketed { span: Span::new(1, 2), negated: true, kind: ClassSet::Normal };",
          "",
          "    writer.fmt_class_bracketed_post(&ast1).unwrap();",
          "    writer.fmt_class_bracketed_post(&ast2).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.wtr.output == \"]\"",
          "    writer.wtr.output == \"][\""
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast1 = ast::ClassBracketed { span: Span::new(0, 1), negated: false, kind: ClassSet::Normal };",
          "    let ast2 = ast::ClassBracketed { span: Span::new(1, 2), negated: true, kind: ClassSet::Normal };",
          "",
          "    writer.fmt_class_bracketed_post(&ast1).unwrap();",
          "    writer.fmt_class_bracketed_post(&ast2).unwrap();",
          "    writer.wtr.output == \"]\"",
          "    writer.wtr.output == \"][\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]