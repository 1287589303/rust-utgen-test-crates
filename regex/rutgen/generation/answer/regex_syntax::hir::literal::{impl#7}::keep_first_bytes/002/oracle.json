[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lit.len(), 3);",
          "    assert!(lit.is_exact());",
          "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(0);",
          "    assert_eq!(lit.len(), 3);",
          "    assert!(lit.is_exact());",
          "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(1);",
          "}"
        ],
        "oracle": [
          "    let lit = Literal::exact(vec![1, 2, 3]);",
          "    assert_eq!(lit.len(), 3);",
          "    lit.keep_first_bytes(1);",
          "    assert_eq!(lit.len(), 1);",
          "    assert_eq!(lit.as_bytes(), vec![1]);",
          "    assert!(lit.is_exact());"
        ],
        "code": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(1);",
          "    let lit = Literal::exact(vec![1, 2, 3]);",
          "    assert_eq!(lit.len(), 3);",
          "    lit.keep_first_bytes(1);",
          "    assert_eq!(lit.len(), 1);",
          "    assert_eq!(lit.as_bytes(), vec![1]);",
          "    assert!(lit.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lit.len(), 2);",
          "    assert_eq!(lit.as_bytes(), &[1, 2]);",
          "    assert!(lit.is_inexact());"
        ],
        "code": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(2);",
          "    assert_eq!(lit.len(), 2);",
          "    assert_eq!(lit.as_bytes(), &[1, 2]);",
          "    assert!(lit.is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lit.as_bytes(), vec![1, 2, 3].as_slice());",
          "    assert!(lit.is_exact());",
          "    assert_eq!(lit.len(), 3);",
          "    assert!(!lit.is_empty());"
        ],
        "code": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(3);",
          "    assert_eq!(lit.as_bytes(), vec![1, 2, 3].as_slice());",
          "    assert!(lit.is_exact());",
          "    assert_eq!(lit.len(), 3);",
          "    assert!(!lit.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3, 4]);",
          "    lit.keep_first_bytes(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
          "    assert!(lit.is_exact() == false);",
          "    assert_eq!(lit.len(), 3);",
          "    assert!(lit.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3, 4]);",
          "    lit.keep_first_bytes(3);",
          "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
          "    assert!(lit.is_exact() == false);",
          "    assert_eq!(lit.len(), 3);",
          "    assert!(lit.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lit.len(), 3);",
          "    assert!(lit.is_exact());",
          "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
          "    ",
          "    let mut lit_inexact = Literal::exact(vec![1, 2, 3, 4, 5]);",
          "    lit_inexact.keep_first_bytes(2);",
          "    assert_eq!(lit_inexact.len(), 2);",
          "    assert!(!lit_inexact.is_exact());",
          "    assert_eq!(lit_inexact.as_bytes(), &[1, 2]);",
          "    ",
          "    let mut lit_empty = Literal::exact(vec![]);",
          "    lit_empty.keep_first_bytes(1);",
          "    assert_eq!(lit_empty.len(), 0);",
          "    assert!(lit_empty.is_exact());"
        ],
        "code": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2, 3]);",
          "    lit.keep_first_bytes(3);",
          "    assert_eq!(lit.len(), 3);",
          "    assert!(lit.is_exact());",
          "    assert_eq!(lit.as_bytes(), &[1, 2, 3]);",
          "    ",
          "    let mut lit_inexact = Literal::exact(vec![1, 2, 3, 4, 5]);",
          "    lit_inexact.keep_first_bytes(2);",
          "    assert_eq!(lit_inexact.len(), 2);",
          "    assert!(!lit_inexact.is_exact());",
          "    assert_eq!(lit_inexact.as_bytes(), &[1, 2]);",
          "    ",
          "    let mut lit_empty = Literal::exact(vec![]);",
          "    lit_empty.keep_first_bytes(1);",
          "    assert_eq!(lit_empty.len(), 0);",
          "    assert!(lit_empty.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2]);",
          "    lit.keep_first_bytes(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lit.as_bytes(), &[1, 2]);",
          "    assert!(lit.is_exact());",
          "    assert_eq!(lit.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut lit = Literal::exact(vec![1, 2]);",
          "    lit.keep_first_bytes(3);",
          "    assert_eq!(lit.as_bytes(), &[1, 2]);",
          "    assert!(lit.is_exact());",
          "    assert_eq!(lit.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lit = Literal::exact(vec![]);",
          "    lit.keep_first_bytes(1);",
          "}"
        ],
        "oracle": [
          "    lit.is_empty() == true",
          "    lit.is_exact() == true",
          "    lit.len() == 0",
          "    lit.as_bytes() == b\"\""
        ],
        "code": [
          "{",
          "    let mut lit = Literal::exact(vec![]);",
          "    lit.keep_first_bytes(1);",
          "    lit.is_empty() == true",
          "    lit.is_exact() == true",
          "    lit.len() == 0",
          "    lit.as_bytes() == b\"\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]