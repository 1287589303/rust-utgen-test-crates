[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal = Literal::exact(vec![1, 2, 3]);",
          "    let len = literal.len();",
          "    literal.keep_first_bytes(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.is_exact(), true);",
          "    assert_eq!(literal.len(), 3);",
          "    assert_eq!(literal.as_bytes(), vec![1, 2, 3].as_slice());",
          "    assert_eq!(literal.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let mut literal = Literal::exact(vec![1, 2, 3]);",
          "    let len = literal.len();",
          "    literal.keep_first_bytes(len);",
          "    assert_eq!(literal.is_exact(), true);",
          "    assert_eq!(literal.len(), 3);",
          "    assert_eq!(literal.as_bytes(), vec![1, 2, 3].as_slice());",
          "    assert_eq!(literal.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal = Literal::exact(vec![1, 2, 3]);",
          "    let len = 0;",
          "    literal.keep_first_bytes(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.as_bytes(), &[1, 2, 3]);",
          "    assert!(literal.is_exact());",
          "    assert_eq!(literal.len(), 3);",
          "    assert!(!literal.is_empty());"
        ],
        "code": [
          "{",
          "    let mut literal = Literal::exact(vec![1, 2, 3]);",
          "    let len = 0;",
          "    literal.keep_first_bytes(len);",
          "    assert_eq!(literal.as_bytes(), &[1, 2, 3]);",
          "    assert!(literal.is_exact());",
          "    assert_eq!(literal.len(), 3);",
          "    assert!(!literal.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut literal = Literal::exact(vec![1, 2, 3]);",
          "    let len = literal.len() + 1;",
          "    literal.keep_first_bytes(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.len(), 3);",
          "    assert!(literal.is_exact());",
          "    assert_eq!(literal.as_bytes(), &[1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let mut literal = Literal::exact(vec![1, 2, 3]);",
          "    let len = literal.len() + 1;",
          "    literal.keep_first_bytes(len);",
          "    assert_eq!(literal.len(), 3);",
          "    assert!(literal.is_exact());",
          "    assert_eq!(literal.as_bytes(), &[1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]