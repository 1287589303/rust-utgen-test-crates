[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[];",
          "    let span = Span { start: 0, end: 0 };",
          "    let input = Input::new(&haystack).span(span);",
          "    let mut sid = LazyStateID::new_unchecked(0);",
          "    let mut mat: Option<HalfMatch> = None;",
          "",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    let mut cache = Cache::default();",
          "",
          "    let result = eoi_fwd(&dfa, &mut cache, &input, &mut sid, &mut mat);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(MatchError::gave_up(0)));",
          "    assert!(mat.is_none());",
          "    assert_eq!(sid.as_usize_unchecked(), 0);",
          "    assert!(cache.trans.is_empty());",
          "    assert_eq!(input.haystack().len(), 0);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[];",
          "    let span = Span { start: 0, end: 0 };",
          "    let input = Input::new(&haystack).span(span);",
          "    let mut sid = LazyStateID::new_unchecked(0);",
          "    let mut mat: Option<HalfMatch> = None;",
          "",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    let mut cache = Cache::default();",
          "",
          "    let result = eoi_fwd(&dfa, &mut cache, &input, &mut sid, &mut mat);",
          "    assert_eq!(result, Err(MatchError::gave_up(0)));",
          "    assert!(mat.is_none());",
          "    assert_eq!(sid.as_usize_unchecked(), 0);",
          "    assert!(cache.trans.is_empty());",
          "    assert_eq!(input.haystack().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 3];",
          "    let span = Span { start: 0, end: 4 };",
          "    let input = Input::new(&haystack).span(span);",
          "    let mut sid = LazyStateID::new_unchecked(1);",
          "    let mut mat: Option<HalfMatch> = None;",
          "",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    let mut cache = Cache::default();",
          "",
          "    let result = eoi_fwd(&dfa, &mut cache, &input, &mut sid, &mut mat);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(MatchError::gave_up(4))));",
          "    assert!(sid.is_unknown());",
          "    assert!(mat.is_none());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[1, 2, 3];",
          "    let span = Span { start: 0, end: 4 };",
          "    let input = Input::new(&haystack).span(span);",
          "    let mut sid = LazyStateID::new_unchecked(1);",
          "    let mut mat: Option<HalfMatch> = None;",
          "",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    let mut cache = Cache::default();",
          "",
          "    let result = eoi_fwd(&dfa, &mut cache, &input, &mut sid, &mut mat);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(MatchError::gave_up(4))));",
          "    assert!(sid.is_unknown());",
          "    assert!(mat.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = &[4];",
          "    let span = Span { start: 0, end: 1 };",
          "    let input = Input::new(&haystack).span(span);",
          "    let mut sid = LazyStateID::new_unchecked(2);",
          "    let mut mat: Option<HalfMatch> = None;",
          "",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    let mut cache = Cache::default();",
          "",
          "    let result = eoi_fwd(&dfa, &mut cache, &input, &mut sid, &mut mat);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), MatchErrorKind::GaveUp);",
          "    assert!(mat.is_none());",
          "    assert_eq!(sid, LazyStateID::to_unknown(&sid));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = &[4];",
          "    let span = Span { start: 0, end: 1 };",
          "    let input = Input::new(&haystack).span(span);",
          "    let mut sid = LazyStateID::new_unchecked(2);",
          "    let mut mat: Option<HalfMatch> = None;",
          "",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: thompson::NFA::default(),",
          "        stride2: 0,",
          "        start_map: StartByteMap::default(),",
          "        classes: ByteClasses::default(),",
          "        quitset: ByteSet::default(),",
          "        cache_capacity: 0,",
          "    };",
          "    let mut cache = Cache::default();",
          "",
          "    let result = eoi_fwd(&dfa, &mut cache, &input, &mut sid, &mut mat);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), MatchErrorKind::GaveUp);",
          "    assert!(mat.is_none());",
          "    assert_eq!(sid, LazyStateID::to_unknown(&sid));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]