[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "        accelerate: Some(true),",
          "        pre: Some(Some(Prefilter::new())),",
          "        minimize: Some(true),",
          "        match_kind: Some(MatchKind::SomeVariant),",
          "        start_kind: Some(StartKind::SomeVariant),",
          "        starts_for_each_pattern: Some(true),",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: Some(true),",
          "        quitset: Some(ByteSet::new()),",
          "        specialize_start_states: Some(true),",
          "        dfa_size_limit: Some(Some(10)),",
          "        determinize_size_limit: Some(Some(20)),",
          "    };",
          "    builder.dense(config);",
          "}"
        ],
        "oracle": [
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "    accelerate: Some(true),",
          "    pre: Some(Some(Prefilter::new())),",
          "    minimize: Some(true),",
          "    match_kind: Some(MatchKind::SomeVariant),",
          "    start_kind: Some(StartKind::SomeVariant),",
          "    starts_for_each_pattern: Some(true),",
          "    byte_classes: Some(true),",
          "    unicode_word_boundary: Some(true),",
          "    quitset: Some(ByteSet::new()),",
          "    specialize_start_states: Some(true),",
          "    dfa_size_limit: Some(Some(10)),",
          "    determinize_size_limit: Some(Some(20)),",
          "    };",
          "    let result = builder.dense(config);",
          "    assert_eq!(result as *const Builder, &builder as *const Builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "        accelerate: Some(true),",
          "        pre: Some(Some(Prefilter::new())),",
          "        minimize: Some(true),",
          "        match_kind: Some(MatchKind::SomeVariant),",
          "        start_kind: Some(StartKind::SomeVariant),",
          "        starts_for_each_pattern: Some(true),",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: Some(true),",
          "        quitset: Some(ByteSet::new()),",
          "        specialize_start_states: Some(true),",
          "        dfa_size_limit: Some(Some(10)),",
          "        determinize_size_limit: Some(Some(20)),",
          "    };",
          "    builder.dense(config);",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "    accelerate: Some(true),",
          "    pre: Some(Some(Prefilter::new())),",
          "    minimize: Some(true),",
          "    match_kind: Some(MatchKind::SomeVariant),",
          "    start_kind: Some(StartKind::SomeVariant),",
          "    starts_for_each_pattern: Some(true),",
          "    byte_classes: Some(true),",
          "    unicode_word_boundary: Some(true),",
          "    quitset: Some(ByteSet::new()),",
          "    specialize_start_states: Some(true),",
          "    dfa_size_limit: Some(Some(10)),",
          "    determinize_size_limit: Some(Some(20)),",
          "    };",
          "    let result = builder.dense(config);",
          "    assert_eq!(result as *const Builder, &builder as *const Builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config::default();",
          "    builder.dense(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.dense(config), &mut builder);",
          "    assert!(builder.dense(config).is::<&mut Builder>());",
          "    assert!(builder.dense(config).ptr_eq(&mut builder));",
          "    assert!(builder.dense(config).as_mut() == Some(&mut builder));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config::default();",
          "    builder.dense(config);",
          "    assert_eq!(builder.dense(config), &mut builder);",
          "    assert!(builder.dense(config).is::<&mut Builder>());",
          "    assert!(builder.dense(config).ptr_eq(&mut builder));",
          "    assert!(builder.dense(config).as_mut() == Some(&mut builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "        accelerate: Some(false),",
          "        pre: None,",
          "        minimize: Some(false),",
          "        match_kind: None,",
          "        start_kind: None,",
          "        starts_for_each_pattern: Some(false),",
          "        byte_classes: None,",
          "        unicode_word_boundary: None,",
          "        quitset: None,",
          "        specialize_start_states: Some(false),",
          "        dfa_size_limit: Some(Some(0)),",
          "        determinize_size_limit: None,",
          "    };",
          "    builder.dense(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.dfa.config.accelerate, Some(false));",
          "    assert_eq!(builder.dfa.config.pre, None);",
          "    assert_eq!(builder.dfa.config.minimize, Some(false));",
          "    assert_eq!(builder.dfa.config.match_kind, None);",
          "    assert_eq!(builder.dfa.config.start_kind, None);",
          "    assert_eq!(builder.dfa.config.starts_for_each_pattern, Some(false));",
          "    assert_eq!(builder.dfa.config.byte_classes, None);",
          "    assert_eq!(builder.dfa.config.unicode_word_boundary, None);",
          "    assert_eq!(builder.dfa.config.quitset, None);",
          "    assert_eq!(builder.dfa.config.specialize_start_states, Some(false));",
          "    assert_eq!(builder.dfa.config.dfa_size_limit, Some(Some(0)));",
          "    assert_eq!(builder.dfa.config.determinize_size_limit, None);",
          "    assert!(std::ptr::eq(builder.dense(config), &mut builder));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "        accelerate: Some(false),",
          "        pre: None,",
          "        minimize: Some(false),",
          "        match_kind: None,",
          "        start_kind: None,",
          "        starts_for_each_pattern: Some(false),",
          "        byte_classes: None,",
          "        unicode_word_boundary: None,",
          "        quitset: None,",
          "        specialize_start_states: Some(false),",
          "        dfa_size_limit: Some(Some(0)),",
          "        determinize_size_limit: None,",
          "    };",
          "    builder.dense(config);",
          "    assert_eq!(builder.dfa.config.accelerate, Some(false));",
          "    assert_eq!(builder.dfa.config.pre, None);",
          "    assert_eq!(builder.dfa.config.minimize, Some(false));",
          "    assert_eq!(builder.dfa.config.match_kind, None);",
          "    assert_eq!(builder.dfa.config.start_kind, None);",
          "    assert_eq!(builder.dfa.config.starts_for_each_pattern, Some(false));",
          "    assert_eq!(builder.dfa.config.byte_classes, None);",
          "    assert_eq!(builder.dfa.config.unicode_word_boundary, None);",
          "    assert_eq!(builder.dfa.config.quitset, None);",
          "    assert_eq!(builder.dfa.config.specialize_start_states, Some(false));",
          "    assert_eq!(builder.dfa.config.dfa_size_limit, Some(Some(0)));",
          "    assert_eq!(builder.dfa.config.determinize_size_limit, None);",
          "    assert!(std::ptr::eq(builder.dense(config), &mut builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config_small_limit = dense::Config {",
          "        accelerate: Some(true),",
          "        pre: None,",
          "        minimize: Some(true),",
          "        match_kind: None,",
          "        start_kind: None,",
          "        starts_for_each_pattern: Some(true),",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: Some(false),",
          "        quitset: None,",
          "        specialize_start_states: Some(false),",
          "        dfa_size_limit: Some(Some(0)),",
          "        determinize_size_limit: None,",
          "    };",
          "    builder.dense(config_small_limit);",
          "",
          "    let config_large_limit = dense::Config {",
          "        accelerate: Some(true),",
          "        pre: Some(Some(Prefilter::new())),",
          "        minimize: Some(true),",
          "        match_kind: Some(MatchKind::SomeVariant),",
          "        start_kind: Some(StartKind::SomeVariant),",
          "        starts_for_each_pattern: Some(true),",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: Some(true),",
          "        quitset: Some(ByteSet::new()),",
          "        specialize_start_states: Some(true),",
          "        dfa_size_limit: Some(Some(100)),",
          "        determinize_size_limit: Some(Some(50)),",
          "    };",
          "    builder.dense(config_large_limit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.dense(config_small_limit), &mut builder);",
          "    assert_eq!(builder.dense(config_large_limit), &mut builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config_small_limit = dense::Config {",
          "        accelerate: Some(true),",
          "        pre: None,",
          "        minimize: Some(true),",
          "        match_kind: None,",
          "        start_kind: None,",
          "        starts_for_each_pattern: Some(true),",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: Some(false),",
          "        quitset: None,",
          "        specialize_start_states: Some(false),",
          "        dfa_size_limit: Some(Some(0)),",
          "        determinize_size_limit: None,",
          "    };",
          "    builder.dense(config_small_limit);",
          "",
          "    let config_large_limit = dense::Config {",
          "        accelerate: Some(true),",
          "        pre: Some(Some(Prefilter::new())),",
          "        minimize: Some(true),",
          "        match_kind: Some(MatchKind::SomeVariant),",
          "        start_kind: Some(StartKind::SomeVariant),",
          "        starts_for_each_pattern: Some(true),",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: Some(true),",
          "        quitset: Some(ByteSet::new()),",
          "        specialize_start_states: Some(true),",
          "        dfa_size_limit: Some(Some(100)),",
          "        determinize_size_limit: Some(Some(50)),",
          "    };",
          "    builder.dense(config_large_limit);",
          "    assert_eq!(builder.dense(config_small_limit), &mut builder);",
          "    assert_eq!(builder.dense(config_large_limit), &mut builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "        accelerate: Some(true),",
          "        pre: Some(Some(Prefilter::new())),",
          "        minimize: Some(true),",
          "        match_kind: Some(MatchKind::SomeStringVariant(\"test\".to_string())),",
          "        start_kind: Some(StartKind::SomeStringVariant(\"test_start\".to_string())),",
          "        starts_for_each_pattern: Some(false),",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: Some(false),",
          "        quitset: None,",
          "        specialize_start_states: Some(true),",
          "        dfa_size_limit: Some(Some(1)),",
          "        determinize_size_limit: None,",
          "    };",
          "    builder.dense(config);",
          "}"
        ],
        "oracle": [
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "    accelerate: Some(true),",
          "    pre: Some(Some(Prefilter::new())),",
          "    minimize: Some(true),",
          "    match_kind: Some(MatchKind::SomeStringVariant(\"test\".to_string())),",
          "    start_kind: Some(StartKind::SomeStringVariant(\"test_start\".to_string())),",
          "    starts_for_each_pattern: Some(false),",
          "    byte_classes: Some(true),",
          "    unicode_word_boundary: Some(false),",
          "    quitset: None,",
          "    specialize_start_states: Some(true),",
          "    dfa_size_limit: Some(Some(1)),",
          "    determinize_size_limit: None,",
          "    };",
          "    let result = builder.dense(config);",
          "    assert_eq!(result, &mut builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "        accelerate: Some(true),",
          "        pre: Some(Some(Prefilter::new())),",
          "        minimize: Some(true),",
          "        match_kind: Some(MatchKind::SomeStringVariant(\"test\".to_string())),",
          "        start_kind: Some(StartKind::SomeStringVariant(\"test_start\".to_string())),",
          "        starts_for_each_pattern: Some(false),",
          "        byte_classes: Some(true),",
          "        unicode_word_boundary: Some(false),",
          "        quitset: None,",
          "        specialize_start_states: Some(true),",
          "        dfa_size_limit: Some(Some(1)),",
          "        determinize_size_limit: None,",
          "    };",
          "    builder.dense(config);",
          "    let mut builder = Builder::new();",
          "    let config = dense::Config {",
          "    accelerate: Some(true),",
          "    pre: Some(Some(Prefilter::new())),",
          "    minimize: Some(true),",
          "    match_kind: Some(MatchKind::SomeStringVariant(\"test\".to_string())),",
          "    start_kind: Some(StartKind::SomeStringVariant(\"test_start\".to_string())),",
          "    starts_for_each_pattern: Some(false),",
          "    byte_classes: Some(true),",
          "    unicode_word_boundary: Some(false),",
          "    quitset: None,",
          "    specialize_start_states: Some(true),",
          "    dfa_size_limit: Some(Some(1)),",
          "    determinize_size_limit: None,",
          "    };",
          "    let result = builder.dense(config);",
          "    assert_eq!(result, &mut builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]