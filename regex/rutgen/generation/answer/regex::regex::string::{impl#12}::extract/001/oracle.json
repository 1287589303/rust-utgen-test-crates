[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();",
          "    let hay = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    let captures = re.captures(hay).unwrap();",
          "    let (full, [year, month, day]) = captures.extract::<3>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(full, \"2010-03-14\");",
          "    assert_eq!(year, \"2010\");",
          "    assert_eq!(month, \"03\");",
          "    assert_eq!(day, \"14\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();",
          "    let hay = \"On 2010-03-14, I became a Tenneessee lamb.\";",
          "    let captures = re.captures(hay).unwrap();",
          "    let (full, [year, month, day]) = captures.extract::<3>();",
          "    assert_eq!(full, \"2010-03-14\");",
          "    assert_eq!(year, \"2010\");",
          "    assert_eq!(month, \"03\");",
          "    assert_eq!(day, \"14\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();",
          "    let hay = \"\";",
          "    let captures = re.captures(hay);",
          "    if let Some(captures) = captures {",
          "        let result = captures.extract::<3>();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.is_some(), false);",
          "    assert!(result.is_none());",
          "    ",
          "    let hay = \"2010-03-14\";",
          "    let captures = re.captures(hay);",
          "    assert_eq!(captures.is_some(), true);",
          "    let (full, [year, month, day]) = captures.unwrap().extract::<3>();",
          "    assert_eq!(full, \"2010-03-14\");",
          "    assert_eq!(year, \"2010\");",
          "    assert_eq!(month, \"03\");",
          "    assert_eq!(day, \"14\");",
          "    ",
          "    let hay = \"Not a date\";",
          "    let captures = re.captures(hay);",
          "    assert_eq!(captures.is_some(), false);",
          "    ",
          "    let hay = \"2021-06-15 and 2022-07-16\";",
          "    let captures_iter = re.captures_iter(hay);",
          "    let mut dates: Vec<(&str, &str, &str)> = vec![];",
          "    for (_, [y, m, d]) in captures_iter.map(|c| c.extract::<3>()) {",
          "    dates.push((y, m, d));",
          "    }",
          "    assert_eq!(dates, vec![(\"2021\", \"06\", \"15\"), (\"2022\", \"07\", \"16\")]);",
          "    ",
          "    let hay = \"Invalid date 2021-20-15\";",
          "    let captures = re.captures(hay);",
          "    assert_eq!(captures.is_some(), false);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();",
          "    let hay = \"\";",
          "    let captures = re.captures(hay);",
          "    if let Some(captures) = captures {",
          "        let result = captures.extract::<3>();",
          "    }",
          "    assert_eq!(captures.is_some(), false);",
          "    assert!(result.is_none());",
          "    ",
          "    let hay = \"2010-03-14\";",
          "    let captures = re.captures(hay);",
          "    assert_eq!(captures.is_some(), true);",
          "    let (full, [year, month, day]) = captures.unwrap().extract::<3>();",
          "    assert_eq!(full, \"2010-03-14\");",
          "    assert_eq!(year, \"2010\");",
          "    assert_eq!(month, \"03\");",
          "    assert_eq!(day, \"14\");",
          "    ",
          "    let hay = \"Not a date\";",
          "    let captures = re.captures(hay);",
          "    assert_eq!(captures.is_some(), false);",
          "    ",
          "    let hay = \"2021-06-15 and 2022-07-16\";",
          "    let captures_iter = re.captures_iter(hay);",
          "    let mut dates: Vec<(&str, &str, &str)> = vec![];",
          "    for (_, [y, m, d]) in captures_iter.map(|c| c.extract::<3>()) {",
          "    dates.push((y, m, d));",
          "    }",
          "    assert_eq!(dates, vec![(\"2021\", \"06\", \"15\"), (\"2022\", \"07\", \"16\")]);",
          "    ",
          "    let hay = \"Invalid date 2021-20-15\";",
          "    let captures = re.captures(hay);",
          "    assert_eq!(captures.is_some(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();",
          "    let hay = \"No date here.\";",
          "    let captures = re.captures(hay);",
          "    if let Some(captures) = captures {",
          "        let result = captures.extract::<3>();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures, None);",
          "    assert_panics!(captures.extract::<3>());",
          "    assert_eq!(captures.len(), 0);",
          "    assert!(captures.get(0).is_none());",
          "    assert!(captures.name(\"year\").is_none());",
          "    assert!(captures.iter().next().is_none());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();",
          "    let hay = \"No date here.\";",
          "    let captures = re.captures(hay);",
          "    if let Some(captures) = captures {",
          "        let result = captures.extract::<3>();",
          "    }",
          "    assert_eq!(captures, None);",
          "    assert_panics!(captures.extract::<3>());",
          "    assert_eq!(captures.len(), 0);",
          "    assert!(captures.get(0).is_none());",
          "    assert!(captures.name(\"year\").is_none());",
          "    assert!(captures.iter().next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"([0-9]{4})-([0-9]{2})\").unwrap();",
          "    let hay = \"2010-03\";",
          "    let captures = re.captures(hay).unwrap();",
          "    let _ = captures.extract::<3>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.extract::<3>(), None);",
          "    assert!(matches!(std::panic::catch_unwind(|| captures.extract::<3>()), Err(_)));",
          "    assert_eq!(captures.len(), 0);",
          "    assert!(captures.static_captures_len.is_some());",
          "    assert!(captures.get(2).is_none());",
          "    assert!(captures.name(\"nonexistent\").is_none());",
          "    assert!(captures.iter().next().is_none());",
          "    assert!(captures.extract::<3>().is_err());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"([0-9]{4})-([0-9]{2})\").unwrap();",
          "    let hay = \"2010-03\";",
          "    let captures = re.captures(hay).unwrap();",
          "    let _ = captures.extract::<3>();",
          "    assert_eq!(captures.extract::<3>(), None);",
          "    assert!(matches!(std::panic::catch_unwind(|| captures.extract::<3>()), Err(_)));",
          "    assert_eq!(captures.len(), 0);",
          "    assert!(captures.static_captures_len.is_some());",
          "    assert!(captures.get(2).is_none());",
          "    assert!(captures.name(\"nonexistent\").is_none());",
          "    assert!(captures.iter().next().is_none());",
          "    assert!(captures.extract::<3>().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]