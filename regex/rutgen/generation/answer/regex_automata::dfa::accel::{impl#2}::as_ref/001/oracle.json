[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels: Accels<&[u32]> = Accels { accels: &[] };",
          "    let result = accels.as_ref();",
          "}"
        ],
        "oracle": [
          "    let expected = Accels { accels: &[] };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let accels: Accels<&[u32]> = Accels { accels: &[] };",
          "    let result = accels.as_ref();",
          "    let expected = Accels { accels: &[] };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels: Accels<&[u32]> = Accels { accels: &[1] };",
          "    let result = accels.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.accels.len(), 1);",
          "    assert_eq!(result.accels[0], 1);",
          "    assert!(std::mem::size_of_val(result.accels) == ACCEL_TY_SIZE);",
          "    assert!(std::ptr::eq(result.accels.as_ptr(), accels.accels.as_ptr()));",
          "    assert!(result.accels.is_ref());"
        ],
        "code": [
          "{",
          "    let accels: Accels<&[u32]> = Accels { accels: &[1] };",
          "    let result = accels.as_ref();",
          "    assert_eq!(result.accels.len(), 1);",
          "    assert_eq!(result.accels[0], 1);",
          "    assert!(std::mem::size_of_val(result.accels) == ACCEL_TY_SIZE);",
          "    assert!(std::ptr::eq(result.accels.as_ptr(), accels.accels.as_ptr()));",
          "    assert!(result.accels.is_ref());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels: Accels<&[u32]> = Accels { accels: &[1, 2, 3] };",
          "    let result = accels.as_ref();",
          "}"
        ],
        "oracle": [
          "    let accels: Accels<&[u32]> = Accels { accels: &[1, 2, 3] };",
          "    let result = accels.as_ref();",
          "    assert_eq!(result.accels, &[1, 2, 3]);",
          "    assert!(std::mem::size_of_val(result) == std::mem::size_of::<AccelTy>() * (3 + 1));",
          "    assert!(result.accels.len() == 3);",
          "    assert!(result.accels[0] == 1);",
          "    assert!(result.accels[1] == 2);",
          "    assert!(result.accels[2] == 3);"
        ],
        "code": [
          "{",
          "    let accels: Accels<&[u32]> = Accels { accels: &[1, 2, 3] };",
          "    let result = accels.as_ref();",
          "    let accels: Accels<&[u32]> = Accels { accels: &[1, 2, 3] };",
          "    let result = accels.as_ref();",
          "    assert_eq!(result.accels, &[1, 2, 3]);",
          "    assert!(std::mem::size_of_val(result) == std::mem::size_of::<AccelTy>() * (3 + 1));",
          "    assert!(result.accels.len() == 3);",
          "    assert!(result.accels[0] == 1);",
          "    assert!(result.accels[1] == 2);",
          "    assert!(result.accels[2] == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels: Accels<&[u32]> = Accels { accels: &[1, 2, 3, 4, 5, 6, 7, 8] };",
          "    let result = accels.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.accels.len(), 8);",
          "    assert_eq!(result.accels[0], 1);",
          "    assert_eq!(result.accels[1], 2);",
          "    assert_eq!(result.accels[2], 3);",
          "    assert_eq!(result.accels[3], 4);",
          "    assert_eq!(result.accels[4], 5);",
          "    assert_eq!(result.accels[5], 6);",
          "    assert_eq!(result.accels[6], 7);",
          "    assert_eq!(result.accels[7], 8);",
          "    assert!(std::ptr::eq(result.accels.as_ptr(), accels.accels.as_ptr()));"
        ],
        "code": [
          "{",
          "    let accels: Accels<&[u32]> = Accels { accels: &[1, 2, 3, 4, 5, 6, 7, 8] };",
          "    let result = accels.as_ref();",
          "    assert_eq!(result.accels.len(), 8);",
          "    assert_eq!(result.accels[0], 1);",
          "    assert_eq!(result.accels[1], 2);",
          "    assert_eq!(result.accels[2], 3);",
          "    assert_eq!(result.accels[3], 4);",
          "    assert_eq!(result.accels[4], 5);",
          "    assert_eq!(result.accels[5], 6);",
          "    assert_eq!(result.accels[6], 7);",
          "    assert_eq!(result.accels[7], 8);",
          "    assert!(std::ptr::eq(result.accels.as_ptr(), accels.accels.as_ptr()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]