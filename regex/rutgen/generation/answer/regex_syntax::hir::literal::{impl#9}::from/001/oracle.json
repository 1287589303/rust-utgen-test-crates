[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '\\u{0000}';",
          "    let _literal = Literal::from(ch);",
          "}"
        ],
        "oracle": [
          "    let ch = '\\u{0000}';",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.bytes, vec![0]);",
          "    assert_eq!(_literal.exact, true);",
          "    assert_eq!(_literal.len(), 1);",
          "    assert!(!_literal.is_empty());",
          "    assert!(_literal.is_exact());"
        ],
        "code": [
          "{",
          "    let ch = '\\u{0000}';",
          "    let _literal = Literal::from(ch);",
          "    let ch = '\\u{0000}';",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.bytes, vec![0]);",
          "    assert_eq!(_literal.exact, true);",
          "    assert_eq!(_literal.len(), 1);",
          "    assert!(!_literal.is_empty());",
          "    assert!(_literal.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = 'a';",
          "    let _literal = Literal::from(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_literal.bytes, b\"a\".to_vec());",
          "    assert!(_literal.exact);",
          "    assert_eq!(_literal.len(), 1);",
          "    assert!(!_literal.is_empty());",
          "    assert!(_literal.is_exact());"
        ],
        "code": [
          "{",
          "    let ch = 'a';",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.bytes, b\"a\".to_vec());",
          "    assert!(_literal.exact);",
          "    assert_eq!(_literal.len(), 1);",
          "    assert!(!_literal.is_empty());",
          "    assert!(_literal.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = 'z';",
          "    let _literal = Literal::from(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_literal.bytes, b\"z\".to_vec());",
          "    assert!(_literal.exact);"
        ],
        "code": [
          "{",
          "    let ch = 'z';",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.bytes, b\"z\".to_vec());",
          "    assert!(_literal.exact);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '5';",
          "    let _literal = Literal::from(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_literal.bytes, b\"5\".to_vec());",
          "    assert_eq!(_literal.exact, true);"
        ],
        "code": [
          "{",
          "    let ch = '5';",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.bytes, b\"5\".to_vec());",
          "    assert_eq!(_literal.exact, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = ' ';",
          "    let _literal = Literal::from(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_literal.bytes, b\" \" as &[_]);",
          "    assert!(_literal.exact);",
          "    assert_eq!(_literal.len(), 1);",
          "    assert!(!_literal.is_empty());",
          "    assert!(_literal.is_exact());"
        ],
        "code": [
          "{",
          "    let ch = ' ';",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.bytes, b\" \" as &[_]);",
          "    assert!(_literal.exact);",
          "    assert_eq!(_literal.len(), 1);",
          "    assert!(!_literal.is_empty());",
          "    assert!(_literal.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '!';",
          "    let _literal = Literal::from(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_literal.bytes, b\"!\");",
          "    assert!(_literal.exact);",
          "    assert_eq!(_literal.len(), 1);",
          "    assert!(_literal.is_empty() == false);",
          "    assert!(_literal.is_exact());"
        ],
        "code": [
          "{",
          "    let ch = '!';",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.bytes, b\"!\");",
          "    assert!(_literal.exact);",
          "    assert_eq!(_literal.len(), 1);",
          "    assert!(_literal.is_empty() == false);",
          "    assert!(_literal.is_exact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '\\u{00E9}'; // é",
          "    let _literal = Literal::from(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_literal.is_exact(), true);",
          "    assert_eq!(_literal.len(), 2); // The length of the UTF-8 encoding for 'é' is 2 bytes.",
          "    assert_eq!(_literal.as_bytes(), b\"\\u{00E9}\"); // Check the underlying bytes.",
          "    assert!(!_literal.is_empty()); // The literal should not be empty."
        ],
        "code": [
          "{",
          "    let ch = '\\u{00E9}'; // é",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.is_exact(), true);",
          "    assert_eq!(_literal.len(), 2); // The length of the UTF-8 encoding for 'é' is 2 bytes.",
          "    assert_eq!(_literal.as_bytes(), b\"\\u{00E9}\"); // Check the underlying bytes.",
          "    assert!(!_literal.is_empty()); // The literal should not be empty.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ch = '\\u{10FFFF}';",
          "    let _literal = Literal::from(ch);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_literal.len(), 4);",
          "    assert_eq!(_literal.as_bytes(), b\"\\xF4\\x8F\\xBF\\xBF\");",
          "    assert!(_literal.is_exact());",
          "    assert!(!_literal.is_empty());",
          "    assert!(!_literal.is_poisonous());"
        ],
        "code": [
          "{",
          "    let ch = '\\u{10FFFF}';",
          "    let _literal = Literal::from(ch);",
          "    assert_eq!(_literal.len(), 4);",
          "    assert_eq!(_literal.as_bytes(), b\"\\xF4\\x8F\\xBF\\xBF\");",
          "    assert!(_literal.is_exact());",
          "    assert!(!_literal.is_empty());",
          "    assert!(!_literal.is_poisonous());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]