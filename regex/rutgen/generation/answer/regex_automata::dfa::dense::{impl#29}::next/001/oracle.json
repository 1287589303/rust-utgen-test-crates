[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let it: &[StateID] = &[];",
          "    let mut iter = StateTransitionIter {",
          "        len: 0,",
          "        it: it.iter().enumerate(),",
          "    };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let it: &[StateID] = &[];",
          "    let mut iter = StateTransitionIter {",
          "        len: 0,",
          "        it: it.iter().enumerate(),",
          "    };",
          "    let result = iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(Default::default());",
          "    let it: &[StateID] = &[state_id];",
          "    let mut iter = StateTransitionIter {",
          "        len: 1,",
          "        it: it.iter().enumerate(),",
          "    };",
          "    let result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (unit, id) = result.unwrap();",
          "    assert_eq!(id, state_id);",
          "    assert_eq!(unit, alphabet::Unit::eoi(0));"
        ],
        "code": [
          "{",
          "    let state_id = StateID(Default::default());",
          "    let it: &[StateID] = &[state_id];",
          "    let mut iter = StateTransitionIter {",
          "        len: 1,",
          "        it: it.iter().enumerate(),",
          "    };",
          "    let result = iter.next();",
          "    assert!(result.is_some());",
          "    let (unit, id) = result.unwrap();",
          "    assert_eq!(id, state_id);",
          "    assert_eq!(unit, alphabet::Unit::eoi(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id_0 = StateID(Default::default());",
          "    let state_id_1 = StateID(Default::default());",
          "    let it: &[StateID] = &[state_id_0, state_id_1];",
          "    let mut iter = StateTransitionIter {",
          "        len: 2,",
          "        it: it.iter().enumerate(),",
          "    };",
          "    let result_0 = iter.next();",
          "    let result_1 = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_0, Some((alphabet::Unit::u8(0), state_id_0)));",
          "    assert_eq!(result_1, Some((alphabet::Unit::eoi(1), state_id_1)));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let state_id_0 = StateID(Default::default());",
          "    let state_id_1 = StateID(Default::default());",
          "    let it: &[StateID] = &[state_id_0, state_id_1];",
          "    let mut iter = StateTransitionIter {",
          "        len: 2,",
          "        it: it.iter().enumerate(),",
          "    };",
          "    let result_0 = iter.next();",
          "    let result_1 = iter.next();",
          "    assert_eq!(result_0, Some((alphabet::Unit::u8(0), state_id_0)));",
          "    assert_eq!(result_1, Some((alphabet::Unit::eoi(1), state_id_1)));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_ids: Vec<StateID> = (0..5).map(|_| StateID(Default::default())).collect();",
          "    let mut iter = StateTransitionIter {",
          "        len: 5,",
          "        it: state_ids.iter().enumerate(),",
          "    };",
          "    for _ in 0..5 {",
          "        let result = iter.next();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next(), Some((alphabet::Unit::u8(0), state_ids[0])));",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::u8(1), state_ids[1])));",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::u8(2), state_ids[2])));",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::u8(3), state_ids[3])));",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::eoi(4), state_ids[4])));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let state_ids: Vec<StateID> = (0..5).map(|_| StateID(Default::default())).collect();",
          "    let mut iter = StateTransitionIter {",
          "        len: 5,",
          "        it: state_ids.iter().enumerate(),",
          "    };",
          "    for _ in 0..5 {",
          "        let result = iter.next();",
          "    }",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::u8(0), state_ids[0])));",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::u8(1), state_ids[1])));",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::u8(2), state_ids[2])));",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::u8(3), state_ids[3])));",
          "    assert_eq!(iter.next(), Some((alphabet::Unit::eoi(4), state_ids[4])));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]