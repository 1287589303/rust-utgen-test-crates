[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pre = Some(Prefilter {",
          "        pre: Arc::new(MockPrefilter),",
          "        is_fast: true,",
          "        max_needle_len: 128,",
          "    });",
          "    ",
          "    let mut config = Config::new();",
          "    config = config",
          "        .utf8_empty(true)",
          "        .nfa_size_limit(Some(1024))",
          "        .which_captures(WhichCaptures::All)",
          "        .hybrid(true)",
          "        .dfa(true);",
          "",
          "    let info = RegexInfo::new(config, &[&mock_hir]);",
          "",
          "    let result = Core::new(info, pre, &[&mock_hir]);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let core = result.unwrap();",
          "    assert_eq!(core.info, info);",
          "    assert_eq!(core.pre, pre);",
          "    assert_eq!(core.nfa, expected_nfa);",
          "    assert!(core.nfarev.is_some());",
          "    assert!(core.pikevm.is_some());",
          "    assert!(core.backtrack.is_some());",
          "    assert!(core.onepass.is_some());",
          "    assert!(core.hybrid.is_some());",
          "    assert!(core.dfa.is_some());"
        ],
        "code": [
          "{",
          "    let pre = Some(Prefilter {",
          "        pre: Arc::new(MockPrefilter),",
          "        is_fast: true,",
          "        max_needle_len: 128,",
          "    });",
          "    ",
          "    let mut config = Config::new();",
          "    config = config",
          "        .utf8_empty(true)",
          "        .nfa_size_limit(Some(1024))",
          "        .which_captures(WhichCaptures::All)",
          "        .hybrid(true)",
          "        .dfa(true);",
          "",
          "    let info = RegexInfo::new(config, &[&mock_hir]);",
          "",
          "    let result = Core::new(info, pre, &[&mock_hir]);",
          "    assert!(result.is_ok());",
          "    let core = result.unwrap();",
          "    assert_eq!(core.info, info);",
          "    assert_eq!(core.pre, pre);",
          "    assert_eq!(core.nfa, expected_nfa);",
          "    assert!(core.nfarev.is_some());",
          "    assert!(core.pikevm.is_some());",
          "    assert!(core.backtrack.is_some());",
          "    assert!(core.onepass.is_some());",
          "    assert!(core.hybrid.is_some());",
          "    assert!(core.dfa.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pre = Some(Prefilter {",
          "        pre: Arc::new(MockPrefilter),",
          "        is_fast: false,",
          "        max_needle_len: 1,",
          "    });",
          "",
          "    let mut config = Config::new();",
          "    config = config",
          "        .utf8_empty(false)",
          "        .nfa_size_limit(Some(512))",
          "        .which_captures(WhichCaptures::All)",
          "        .hybrid(false)",
          "        .dfa(true);",
          "",
          "    let info = RegexInfo::new(config, &[&mock_hir]);",
          "",
          "    let result = Core::new(info.clone(), pre, &[&mock_hir]);",
          "    ",
          "    let pre2 = Some(Prefilter {",
          "        pre: Arc::new(MockPrefilter),",
          "        is_fast: true,",
          "        max_needle_len: 256,",
          "    });",
          "    ",
          "    config = config.hybrid(true);",
          "    let result_hybrid = Core::new(info, pre2, &[&mock_hir]);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(core) if core.info == info && core.pre == pre));",
          "    assert!(result_hybrid.is_ok());",
          "    assert!(matches!(result_hybrid, Ok(core) if core.info == info && core.pre == pre2));",
          "    assert!(core.nfa.is_some());",
          "    assert!(core.nfarev.is_some());",
          "    assert!(core.pikevm.is_some());",
          "    assert!(core.backtrack.is_some());",
          "    assert!(core.onepass.is_some());",
          "    assert!(core.hybrid.is_none());",
          "    assert!(core.dfa.is_some());"
        ],
        "code": [
          "{",
          "    let pre = Some(Prefilter {",
          "        pre: Arc::new(MockPrefilter),",
          "        is_fast: false,",
          "        max_needle_len: 1,",
          "    });",
          "",
          "    let mut config = Config::new();",
          "    config = config",
          "        .utf8_empty(false)",
          "        .nfa_size_limit(Some(512))",
          "        .which_captures(WhichCaptures::All)",
          "        .hybrid(false)",
          "        .dfa(true);",
          "",
          "    let info = RegexInfo::new(config, &[&mock_hir]);",
          "",
          "    let result = Core::new(info.clone(), pre, &[&mock_hir]);",
          "    ",
          "    let pre2 = Some(Prefilter {",
          "        pre: Arc::new(MockPrefilter),",
          "        is_fast: true,",
          "        max_needle_len: 256,",
          "    });",
          "    ",
          "    config = config.hybrid(true);",
          "    let result_hybrid = Core::new(info, pre2, &[&mock_hir]);",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result, Ok(core) if core.info == info && core.pre == pre));",
          "    assert!(result_hybrid.is_ok());",
          "    assert!(matches!(result_hybrid, Ok(core) if core.info == info && core.pre == pre2));",
          "    assert!(core.nfa.is_some());",
          "    assert!(core.nfarev.is_some());",
          "    assert!(core.pikevm.is_some());",
          "    assert!(core.backtrack.is_some());",
          "    assert!(core.onepass.is_some());",
          "    assert!(core.hybrid.is_none());",
          "    assert!(core.dfa.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]