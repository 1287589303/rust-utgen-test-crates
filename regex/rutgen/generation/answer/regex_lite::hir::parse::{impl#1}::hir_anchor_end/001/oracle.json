[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        multi_line: true,",
          "        crlf: true,",
          "        ..Flags::default()",
          "    };",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags,",
          "    };",
          "    let pattern = \".*\";",
          "    ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.hir_anchor_end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), &HirKind::Look(hir::Look::EndCRLF));",
          "    assert!(parser.hir_anchor_end().is_start_anchored());",
          "    assert!(parser.hir_anchor_end().is_match_empty());",
          "    assert_eq!(parser.hir_anchor_end().static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        multi_line: true,",
          "        crlf: true,",
          "        ..Flags::default()",
          "    };",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags,",
          "    };",
          "    let pattern = \".*\";",
          "    ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.hir_anchor_end();",
          "    assert_eq!(_result.kind(), &HirKind::Look(hir::Look::EndCRLF));",
          "    assert!(parser.hir_anchor_end().is_start_anchored());",
          "    assert!(parser.hir_anchor_end().is_match_empty());",
          "    assert_eq!(parser.hir_anchor_end().static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        multi_line: true,",
          "        crlf: false,",
          "        ..Flags::default()",
          "    };",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags,",
          "    };",
          "    let pattern = \".*\";",
          "",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.hir_anchor_end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), HirKind::Look(Look::EndCRLF));",
          "    assert!(parser.flags().multi_line);",
          "    assert!(parser.flags().crlf);",
          "    assert!(matches!(_result, Hir { is_start_anchored: false, is_match_empty: true, .. }));",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        multi_line: true,",
          "        crlf: false,",
          "        ..Flags::default()",
          "    };",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags,",
          "    };",
          "    let pattern = \".*\";",
          "",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.hir_anchor_end();",
          "    assert_eq!(_result.kind(), HirKind::Look(Look::EndCRLF));",
          "    assert!(parser.flags().multi_line);",
          "    assert!(parser.flags().crlf);",
          "    assert!(matches!(_result, Hir { is_start_anchored: false, is_match_empty: true, .. }));",
          "    assert_eq!(_result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]