[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INVALID_ITEM)));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    let hir = Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(Repetition { /* appropriate fields */ }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir {",
          "    kind: HirKind::Repetition(Repetition { /* appropriate fields */ }),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    assert_eq!(_result, Err(Error::new(ERR_CLASS_INVALID_ITEM)));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(Repetition { /* appropriate fields */ }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    let hir = Hir {",
          "    kind: HirKind::Repetition(Repetition { /* appropriate fields */ }),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    assert_eq!(_result, Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Look(Look { /* appropriate fields */ }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Error::new(ERR_CLASS_INVALID_ITEM));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Look(Look { /* appropriate fields */ }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), Error::new(ERR_CLASS_INVALID_ITEM));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture { /* appropriate fields */ }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Capture(Capture { /* appropriate fields */ }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INVALID_ITEM)));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Capture(Capture { /* appropriate fields */ }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    let hir = Hir { kind: HirKind::Capture(Capture { /* appropriate fields */ }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    _result.unwrap_err().msg == ERR_CLASS_INVALID_ITEM"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    _result.unwrap_err().msg == ERR_CLASS_INVALID_ITEM",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Alternation(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INVALID_ITEM)));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Alternation(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    let hir = Hir { kind: HirKind::Alternation(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]