[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(vec![hir::ClassRange { start: 'a', end: 'a' }]));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    assert_eq!(_result, Ok(vec![hir::ClassRange { start: 'a', end: 'a' }]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('1'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(vec![hir::ClassRange { start: '1', end: '1' }]))"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('1'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    assert_eq!(_result, Ok(vec![hir::ClassRange { start: '1', end: '1' }]))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('#'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(vec![hir::ClassRange { start: '#', end: '#' }]));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('#'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _result = into_class_item_ranges(hir);",
          "    assert_eq!(_result, Ok(vec![hir::ClassRange { start: '#', end: '#' }]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]