[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_range = hir::ClassRange { start: 'a', end: 'b' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    let class_range = hir::ClassRange { start: 'a', end: 'b' };",
          "    let hir = Hir { kind: HirKind::Class(hir::Class { ranges: vec![class_range] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Ok(vec![class_range]));"
        ],
        "code": [
          "{",
          "    let class_range = hir::ClassRange { start: 'a', end: 'b' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "    let class_range = hir::ClassRange { start: 'a', end: 'b' };",
          "    let hir = Hir { kind: HirKind::Class(hir::Class { ranges: vec![class_range] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Ok(vec![class_range]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_range1 = hir::ClassRange { start: 'a', end: 'c' };",
          "    let class_range2 = hir::ClassRange { start: 'e', end: 'g' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range1, class_range2] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    let class_range1 = hir::ClassRange { start: 'a', end: 'c' };",
          "    let class_range2 = hir::ClassRange { start: 'e', end: 'g' };",
          "    let hir = Hir { kind: HirKind::Class(hir::Class { ranges: vec![class_range1, class_range2] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Ok(vec![class_range1, class_range2]));"
        ],
        "code": [
          "{",
          "    let class_range1 = hir::ClassRange { start: 'a', end: 'c' };",
          "    let class_range2 = hir::ClassRange { start: 'e', end: 'g' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range1, class_range2] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "    let class_range1 = hir::ClassRange { start: 'a', end: 'c' };",
          "    let class_range2 = hir::ClassRange { start: 'e', end: 'g' };",
          "    let hir = Hir { kind: HirKind::Class(hir::Class { ranges: vec![class_range1, class_range2] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert_eq!(result, Ok(vec![class_range1, class_range2]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_range1 = hir::ClassRange { start: 'a', end: 'd' };",
          "    let class_range2 = hir::ClassRange { start: 'c', end: 'f' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range1, class_range2] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    let class_range1 = hir::ClassRange { start: 'a', end: 'd' };",
          "    let class_range2 = hir::ClassRange { start: 'c', end: 'f' };",
          "    let hir = Hir { kind: HirKind::Class(hir::Class { ranges: vec![class_range1, class_range2] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), vec![class_range1, class_range2]);"
        ],
        "code": [
          "{",
          "    let class_range1 = hir::ClassRange { start: 'a', end: 'd' };",
          "    let class_range2 = hir::ClassRange { start: 'c', end: 'f' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range1, class_range2] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "    let class_range1 = hir::ClassRange { start: 'a', end: 'd' };",
          "    let class_range2 = hir::ClassRange { start: 'c', end: 'f' };",
          "    let hir = Hir { kind: HirKind::Class(hir::Class { ranges: vec![class_range1, class_range2] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_ranges(hir);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), vec![class_range1, class_range2]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_range = hir::ClassRange { start: 'x', end: 'x' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    assert!(into_class_item_ranges(hir).is_ok());",
          "    let result = into_class_item_ranges(hir).unwrap();",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(result[0].start, 'x');",
          "    assert_eq!(result[0].end, 'x');"
        ],
        "code": [
          "{",
          "    let class_range = hir::ClassRange { start: 'x', end: 'x' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "    assert!(into_class_item_ranges(hir).is_ok());",
          "    let result = into_class_item_ranges(hir).unwrap();",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(result[0].start, 'x');",
          "    assert_eq!(result[0].end, 'x');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_range = hir::ClassRange { start: '1', end: '2' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(into_class_item_ranges(Hir { kind: HirKind::Class(hir::Class { ranges: vec![hir::ClassRange { start: '1', end: '2' }] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok(vec![hir::ClassRange { start: '1', end: '2' }]));",
          "    assert!(into_class_item_ranges(Hir { kind: HirKind::Class(hir::Class { ranges: vec![] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }).is_ok());",
          "    assert_eq!(into_class_item_ranges(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "    assert_eq!(into_class_item_ranges(Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "    assert_eq!(into_class_item_ranges(Hir { kind: HirKind::Concat(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Err(Error::new(ERR_CLASS_INVALID_ITEM)));"
        ],
        "code": [
          "{",
          "    let class_range = hir::ClassRange { start: '1', end: '2' };",
          "    let hir = Hir {",
          "        kind: HirKind::Class(hir::Class { ranges: vec![class_range] }),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_ranges(hir);",
          "    assert_eq!(into_class_item_ranges(Hir { kind: HirKind::Class(hir::Class { ranges: vec![hir::ClassRange { start: '1', end: '2' }] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok(vec![hir::ClassRange { start: '1', end: '2' }]));",
          "    assert!(into_class_item_ranges(Hir { kind: HirKind::Class(hir::Class { ranges: vec![] }), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }).is_ok());",
          "    assert_eq!(into_class_item_ranges(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "    assert_eq!(into_class_item_ranges(Hir { kind: HirKind::Empty, is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "    assert_eq!(into_class_item_ranges(Hir { kind: HirKind::Concat(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Err(Error::new(ERR_CLASS_INVALID_ITEM)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]