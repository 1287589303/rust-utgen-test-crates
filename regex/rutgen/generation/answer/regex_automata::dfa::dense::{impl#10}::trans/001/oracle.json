[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(0);",
          "    let tt = TransitionTable {",
          "        table: vec![state_id].into_boxed_slice(),",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8].into_boxed_slice(),",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt,",
          "        st: start_table,",
          "        ms: MatchStates {",
          "            slices: vec![].into_boxed_slice(),",
          "            pattern_ids: vec![].into_boxed_slice(),",
          "            pattern_len: 0,",
          "        },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![].into_boxed_slice() },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    ",
          "    dfa.trans();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.trans(), dfa.tt.table());",
          "    assert!(!dfa.trans().is_empty());",
          "    assert_eq!(dfa.trans().len(), 1);",
          "    assert_eq!(dfa.trans()[0], StateID(0));"
        ],
        "code": [
          "{",
          "    let state_id = StateID(0);",
          "    let tt = TransitionTable {",
          "        table: vec![state_id].into_boxed_slice(),",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8].into_boxed_slice(),",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt,",
          "        st: start_table,",
          "        ms: MatchStates {",
          "            slices: vec![].into_boxed_slice(),",
          "            pattern_ids: vec![].into_boxed_slice(),",
          "            pattern_len: 0,",
          "        },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![].into_boxed_slice() },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    ",
          "    dfa.trans();",
          "    assert_eq!(dfa.trans(), dfa.tt.table());",
          "    assert!(!dfa.trans().is_empty());",
          "    assert_eq!(dfa.trans().len(), 1);",
          "    assert_eq!(dfa.trans()[0], StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_states = 10;",
          "    let state_ids: Vec<StateID> = (0..max_states).map(StateID).collect();",
          "    let tt = TransitionTable {",
          "        table: state_ids.into_boxed_slice(),",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8].into_boxed_slice(),",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt,",
          "        st: start_table,",
          "        ms: MatchStates {",
          "            slices: vec![].into_boxed_slice(),",
          "            pattern_ids: vec![].into_boxed_slice(),",
          "            pattern_len: 0,",
          "        },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![].into_boxed_slice() },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    ",
          "    dfa.trans();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.trans(), dfa.tt.table());",
          "    assert_eq!(dfa.trans().len(), 10);",
          "    assert!(dfa.trans().iter().all(|&id| id.0 < 10));",
          "    assert_eq!(dfa.trans().as_ptr(), dfa.tt.table().as_ptr());",
          "    assert_eq!(dfa.trans().get(0), Some(&StateID(0)));",
          "    assert_eq!(dfa.trans().get(9), Some(&StateID(9)));"
        ],
        "code": [
          "{",
          "    let max_states = 10;",
          "    let state_ids: Vec<StateID> = (0..max_states).map(StateID).collect();",
          "    let tt = TransitionTable {",
          "        table: state_ids.into_boxed_slice(),",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8].into_boxed_slice(),",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt,",
          "        st: start_table,",
          "        ms: MatchStates {",
          "            slices: vec![].into_boxed_slice(),",
          "            pattern_ids: vec![].into_boxed_slice(),",
          "            pattern_len: 0,",
          "        },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![].into_boxed_slice() },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    ",
          "    dfa.trans();",
          "    assert_eq!(dfa.trans(), dfa.tt.table());",
          "    assert_eq!(dfa.trans().len(), 10);",
          "    assert!(dfa.trans().iter().all(|&id| id.0 < 10));",
          "    assert_eq!(dfa.trans().as_ptr(), dfa.tt.table().as_ptr());",
          "    assert_eq!(dfa.trans().get(0), Some(&StateID(0)));",
          "    assert_eq!(dfa.trans().get(9), Some(&StateID(9)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_states = 512;",
          "    let state_ids: Vec<StateID> = (0..max_states).map(StateID).collect();",
          "    let tt = TransitionTable {",
          "        table: state_ids.into_boxed_slice(),",
          "        classes: ByteClasses::default(),",
          "        stride2: 9,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8].into_boxed_slice(),",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt,",
          "        st: start_table,",
          "        ms: MatchStates {",
          "            slices: vec![].into_boxed_slice(),",
          "            pattern_ids: vec![].into_boxed_slice(),",
          "            pattern_len: 0,",
          "        },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![].into_boxed_slice() },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    ",
          "    dfa.trans();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.trans().len(), 512);",
          "    assert_eq!(dfa.trans()[0], StateID(0));",
          "    assert_eq!(dfa.trans()[511], StateID(511));",
          "    assert!(dfa.trans().iter().all(|&state_id| state_id.0 < 512));"
        ],
        "code": [
          "{",
          "    let max_states = 512;",
          "    let state_ids: Vec<StateID> = (0..max_states).map(StateID).collect();",
          "    let tt = TransitionTable {",
          "        table: state_ids.into_boxed_slice(),",
          "        classes: ByteClasses::default(),",
          "        stride2: 9,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0u32; 8].into_boxed_slice(),",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = DFA {",
          "        tt,",
          "        st: start_table,",
          "        ms: MatchStates {",
          "            slices: vec![].into_boxed_slice(),",
          "            pattern_ids: vec![].into_boxed_slice(),",
          "            pattern_len: 0,",
          "        },",
          "        special: Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 },",
          "        accels: Accels { accels: vec![].into_boxed_slice() },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    ",
          "    dfa.trans();",
          "    assert_eq!(dfa.trans().len(), 512);",
          "    assert_eq!(dfa.trans()[0], StateID(0));",
          "    assert_eq!(dfa.trans()[511], StateID(511));",
          "    assert!(dfa.trans().iter().all(|&state_id| state_id.0 < 512));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]