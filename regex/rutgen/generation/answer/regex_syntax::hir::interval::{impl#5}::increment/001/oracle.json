[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let char_value = '\\u{D7FF}';",
          "    let result = char_value.increment();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{E000}');",
          "    let char_value = '\\u{D7FF}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{E000}');",
          "    let char_value = '\\u{D7FE}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{D7FF}');",
          "    let char_value = '\\u{E000}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{E001}');"
        ],
        "code": [
          "{",
          "    let char_value = '\\u{D7FF}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{E000}');",
          "    let char_value = '\\u{D7FF}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{E000}');",
          "    let char_value = '\\u{D7FE}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{D7FF}');",
          "    let char_value = '\\u{E000}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{E001}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let char_value = '\\u{D7FE}';",
          "    let result = char_value.increment();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{D7FF}');",
          "    assert_eq!(char_value.increment(), '\\u{E000}');",
          "    assert_eq!(char::from_u32(u32::from(char_value).checked_add(1).unwrap()).unwrap(), '\\u{D7FF}.increment());"
        ],
        "code": [
          "{",
          "    let char_value = '\\u{D7FE}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{D7FF}');",
          "    assert_eq!(char_value.increment(), '\\u{E000}');",
          "    assert_eq!(char::from_u32(u32::from(char_value).checked_add(1).unwrap()).unwrap(), '\\u{D7FF}.increment());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let char_value = '\\u{00}';",
          "    let result = char_value.increment();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\u{01}'); // Test incrementing from '\\u{00}'",
          "    char_value = '\\u{D7FF}';",
          "    result = char_value.increment();",
          "    assert_eq!(result, '\\u{E000}'); // Test incrementing from '\\u{D7FF}'",
          "    char_value = '\\u{E000}';",
          "    result = char_value.increment();",
          "    assert_eq!(result, '\\u{E001}'); // Test incrementing from '\\u{E000}'",
          "    char_value = '\\u{FFFFFF}';",
          "    result = char_value.increment();",
          "    assert_eq!(result, '\\u{10FFFF}'); // Test incrementing from '\\u{FFFF}' (max character)"
        ],
        "code": [
          "{",
          "    let char_value = '\\u{00}';",
          "    let result = char_value.increment();",
          "    assert_eq!(result, '\\u{01}'); // Test incrementing from '\\u{00}'",
          "    char_value = '\\u{D7FF}';",
          "    result = char_value.increment();",
          "    assert_eq!(result, '\\u{E000}'); // Test incrementing from '\\u{D7FF}'",
          "    char_value = '\\u{E000}';",
          "    result = char_value.increment();",
          "    assert_eq!(result, '\\u{E001}'); // Test incrementing from '\\u{E000}'",
          "    char_value = '\\u{FFFFFF}';",
          "    result = char_value.increment();",
          "    assert_eq!(result, '\\u{10FFFF}'); // Test incrementing from '\\u{FFFF}' (max character)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let char_value = '\\u{7F}';",
          "    let result = char_value.increment();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(char_value.increment(), '\\u{80}');",
          "    let char_value = '\\u{D7FF}';",
          "    assert_eq!(char_value.increment(), '\\u{E000}');",
          "    let char_value = '\\u{E000}';",
          "    assert_eq!(char_value.decrement(), '\\u{D7FF}');"
        ],
        "code": [
          "{",
          "    let char_value = '\\u{7F}';",
          "    let result = char_value.increment();",
          "    assert_eq!(char_value.increment(), '\\u{80}');",
          "    let char_value = '\\u{D7FF}';",
          "    assert_eq!(char_value.increment(), '\\u{E000}');",
          "    let char_value = '\\u{E000}';",
          "    assert_eq!(char_value.decrement(), '\\u{D7FF}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]