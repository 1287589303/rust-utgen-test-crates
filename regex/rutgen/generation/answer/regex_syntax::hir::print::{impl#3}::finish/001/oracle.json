[
  {
    "uses": [
      "use std::fmt::Write as FmtWrite;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StringWriter {",
          "        buffer: String,",
          "    }",
          "",
          "    impl fmt::Write for StringWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = Writer { wtr: StringWriter { buffer: String::new() } };",
          "    let _result = writer.finish();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct StringWriter {",
          "        buffer: String,",
          "    }",
          "",
          "    impl fmt::Write for StringWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = Writer { wtr: StringWriter { buffer: String::new() } };",
          "    let _result = writer.finish();",
          "    assert_eq!(_result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct VecWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl fmt::Write for VecWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.extend_from_slice(s.as_bytes());",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = Writer { wtr: VecWriter { buffer: Vec::new() } };",
          "    let _result = writer.finish();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct VecWriter {",
          "        buffer: Vec<u8>,",
          "    }",
          "",
          "    impl fmt::Write for VecWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.extend_from_slice(s.as_bytes());",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = Writer { wtr: VecWriter { buffer: Vec::new() } };",
          "    let _result = writer.finish();",
          "    assert_eq!(_result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::fmt::Write as FmtWrite;",
          "",
          "    struct FmtBufferWriter {",
          "        buffer: String,",
          "    }",
          "",
          "    impl FmtWrite for FmtBufferWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = Writer { wtr: FmtBufferWriter { buffer: String::new() } };",
          "    let _result = writer.finish();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.finish(), Ok(()));"
        ],
        "code": [
          "{",
          "    use std::fmt::Write as FmtWrite;",
          "",
          "    struct FmtBufferWriter {",
          "        buffer: String,",
          "    }",
          "",
          "    impl FmtWrite for FmtBufferWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let writer = Writer { wtr: FmtBufferWriter { buffer: String::new() } };",
          "    let _result = writer.finish();",
          "    assert_eq!(writer.finish(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]