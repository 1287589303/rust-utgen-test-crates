[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"abcde\";",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(0, 2)), // Offset at 2, not a UTF-8 boundary",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(false);",
          "    ",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.get_match().is_some(), true);",
          "    assert_eq!(input.get_anchored().is_anchored(), true);",
          "    assert_eq!(input.is_char_boundary(state.get_match().unwrap().offset()), false);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"abcde\";",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(0, 2)), // Offset at 2, not a UTF-8 boundary",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(false);",
          "    ",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    assert_eq!(state.get_match().is_some(), true);",
          "    assert_eq!(input.get_anchored().is_anchored(), true);",
          "    assert_eq!(input.is_char_boundary(state.get_match().unwrap().offset()), false);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"test string\";",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(1, 4)), // Offset at 4, not a UTF-8 boundary",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "    ",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = b\"test string\";",
          "    let mut state = OverlappingState {",
          "    mat: Some(HalfMatch::new(1, 4)),",
          "    id: None,",
          "    at: 0,",
          "    next_match_index: Some(0),",
          "    rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "    .anchored(Anchored::Yes)",
          "    .earliest(true);",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"test string\";",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(1, 4)), // Offset at 4, not a UTF-8 boundary",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "    ",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    let haystack: &[u8] = b\"test string\";",
          "    let mut state = OverlappingState {",
          "    mat: Some(HalfMatch::new(1, 4)),",
          "    id: None,",
          "    at: 0,",
          "    next_match_index: Some(0),",
          "    rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "    .anchored(Anchored::Yes)",
          "    .earliest(true);",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(2, 5)), // Offset at 5, not a UTF-8 boundary",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(false);",
          "    ",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "}"
        ],
        "oracle": [
          "    Input::new(b\"hello world\")",
          "    state.get_match() = Some(HalfMatch::new(2, 5))",
          "    input.get_anchored().is_anchored() = true",
          "    input.is_char_boundary(5) = false",
          "    result = Ok(())"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::new(2, 5)), // Offset at 5, not a UTF-8 boundary",
          "        id: None,",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(false);",
          "    ",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    Input::new(b\"hello world\")",
          "    state.get_match() = Some(HalfMatch::new(2, 5))",
          "    input.get_anchored().is_anchored() = true",
          "    input.is_char_boundary(5) = false",
          "    result = Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]