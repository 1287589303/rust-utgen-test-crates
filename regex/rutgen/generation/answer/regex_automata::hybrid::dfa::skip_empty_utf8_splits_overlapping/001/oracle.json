[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"valid_utf8\";",
          "    let match_id = PatternID(0);",
          "    let half_match = HalfMatch::new(match_id, 0); // valid offset",
          "    let state = OverlappingState {",
          "        mat: Some(half_match.clone()),",
          "        id: Some(LazyStateID(0)),",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "    ",
          "    let mut state = state.clone();",
          "    skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(())).unwrap();",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = b\"valid_utf8\";",
          "    let match_id = PatternID(0);",
          "    let half_match = HalfMatch::new(match_id, 0);",
          "    let state = OverlappingState {",
          "    mat: Some(half_match.clone()),",
          "    id: Some(LazyStateID(0)),",
          "    at: 0,",
          "    next_match_index: Some(0),",
          "    rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "    .anchored(Anchored::Yes)",
          "    .earliest(true);",
          "    let mut state = state.clone();",
          "    assert_eq!(skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(())), Ok(()));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"valid_utf8\";",
          "    let match_id = PatternID(0);",
          "    let half_match = HalfMatch::new(match_id, 0); // valid offset",
          "    let state = OverlappingState {",
          "        mat: Some(half_match.clone()),",
          "        id: Some(LazyStateID(0)),",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "    ",
          "    let mut state = state.clone();",
          "    skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(())).unwrap();",
          "    let haystack: &[u8] = b\"valid_utf8\";",
          "    let match_id = PatternID(0);",
          "    let half_match = HalfMatch::new(match_id, 0);",
          "    let state = OverlappingState {",
          "    mat: Some(half_match.clone()),",
          "    id: Some(LazyStateID(0)),",
          "    at: 0,",
          "    next_match_index: Some(0),",
          "    rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "    .anchored(Anchored::Yes)",
          "    .earliest(true);",
          "    let mut state = state.clone();",
          "    assert_eq!(skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(())), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"more_valid_utf8\";",
          "    let match_id = PatternID(1);",
          "    let half_match = HalfMatch::new(match_id, 5); // valid offset",
          "    let state = OverlappingState {",
          "        mat: Some(half_match.clone()),",
          "        id: Some(LazyStateID(1)),",
          "        at: 0,",
          "        next_match_index: Some(1),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Pattern(match_id))",
          "        .earliest(false);",
          "    ",
          "    let mut state = state.clone();",
          "    skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(())).unwrap();",
          "}"
        ],
        "oracle": [
          "    let haystack: &[u8] = b\"valid_utf8\";",
          "    let match_id = PatternID(1);",
          "    let half_match = HalfMatch::new(match_id, 4); // valid offset",
          "    let state = OverlappingState {",
          "    mat: Some(half_match.clone()),",
          "    id: Some(LazyStateID(1)),",
          "    at: 0,",
          "    next_match_index: Some(1),",
          "    rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "    .anchored(Anchored::Pattern(match_id))",
          "    .earliest(false);",
          "    ",
          "    let mut state = state.clone();",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"more_valid_utf8\";",
          "    let match_id = PatternID(1);",
          "    let half_match = HalfMatch::new(match_id, 5); // valid offset",
          "    let state = OverlappingState {",
          "        mat: Some(half_match.clone()),",
          "        id: Some(LazyStateID(1)),",
          "        at: 0,",
          "        next_match_index: Some(1),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Pattern(match_id))",
          "        .earliest(false);",
          "    ",
          "    let mut state = state.clone();",
          "    skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(())).unwrap();",
          "    let haystack: &[u8] = b\"valid_utf8\";",
          "    let match_id = PatternID(1);",
          "    let half_match = HalfMatch::new(match_id, 4); // valid offset",
          "    let state = OverlappingState {",
          "    mat: Some(half_match.clone()),",
          "    id: Some(LazyStateID(1)),",
          "    at: 0,",
          "    next_match_index: Some(1),",
          "    rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "    .anchored(Anchored::Pattern(match_id))",
          "    .earliest(false);",
          "    ",
          "    let mut state = state.clone();",
          "    let result = skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(()));",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"another_valid_utf8\";",
          "    let match_id = PatternID(2);",
          "    let half_match = HalfMatch::new(match_id, 1); // valid offset",
          "    let state = OverlappingState {",
          "        mat: Some(half_match.clone()),",
          "        id: Some(LazyStateID(2)),",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "    ",
          "    let mut state = state.clone();",
          "    skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(())).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.get_match().is_some(), true);",
          "    assert_eq!(input.get_anchored().is_anchored(), true);",
          "    assert_eq!(input.is_char_boundary(half_match.offset()), true);",
          "    assert_eq!(skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok<()>).unwrap(), ());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"another_valid_utf8\";",
          "    let match_id = PatternID(2);",
          "    let half_match = HalfMatch::new(match_id, 1); // valid offset",
          "    let state = OverlappingState {",
          "        mat: Some(half_match.clone()),",
          "        id: Some(LazyStateID(2)),",
          "        at: 0,",
          "        next_match_index: Some(0),",
          "        rev_eoi: false,",
          "    };",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "    ",
          "    let mut state = state.clone();",
          "    skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok(())).unwrap();",
          "    assert_eq!(state.get_match().is_some(), true);",
          "    assert_eq!(input.get_anchored().is_anchored(), true);",
          "    assert_eq!(input.is_char_boundary(half_match.offset()), true);",
          "    assert_eq!(skip_empty_utf8_splits_overlapping(&input, &mut state, |_, _| Ok<()>).unwrap(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]