[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start: &[u8] = &[0, 127, 192];",
          "    let end: &[u8] = &[127, 191, 223];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Utf8Sequence::Three([",
          "    Utf8Range::new(0, 127),",
          "    Utf8Range::new(127, 191),",
          "    Utf8Range::new(192, 223),",
          "    ]));"
        ],
        "code": [
          "{",
          "    let start: &[u8] = &[0, 127, 192];",
          "    let end: &[u8] = &[127, 191, 223];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "    assert_eq!(result, Utf8Sequence::Three([",
          "    Utf8Range::new(0, 127),",
          "    Utf8Range::new(127, 191),",
          "    Utf8Range::new(192, 223),",
          "    ]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start: &[u8] = &[1, 126, 193];",
          "    let end: &[u8] = &[126, 192, 223];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "}"
        ],
        "oracle": [
          "    let start: &[u8] = &[1, 126, 193];",
          "    let end: &[u8] = &[126, 192, 223];",
          "    let expected = Utf8Sequence::Three([",
          "    Utf8Range::new(start[0], end[0]),",
          "    Utf8Range::new(start[1], end[1]),",
          "    Utf8Range::new(start[2], end[2]),",
          "    ]);",
          "    assert_eq!(result, expected);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(result.as_slice(), &[",
          "    Utf8Range::new(start[0], end[0]),",
          "    Utf8Range::new(start[1], end[1]),",
          "    Utf8Range::new(start[2], end[2]),",
          "    ]);",
          "    assert!(result.matches(&[126]));"
        ],
        "code": [
          "{",
          "    let start: &[u8] = &[1, 126, 193];",
          "    let end: &[u8] = &[126, 192, 223];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "    let start: &[u8] = &[1, 126, 193];",
          "    let end: &[u8] = &[126, 192, 223];",
          "    let expected = Utf8Sequence::Three([",
          "    Utf8Range::new(start[0], end[0]),",
          "    Utf8Range::new(start[1], end[1]),",
          "    Utf8Range::new(start[2], end[2]),",
          "    ]);",
          "    assert_eq!(result, expected);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(result.as_slice(), &[",
          "    Utf8Range::new(start[0], end[0]),",
          "    Utf8Range::new(start[1], end[1]),",
          "    Utf8Range::new(start[2], end[2]),",
          "    ]);",
          "    assert!(result.matches(&[126]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start: &[u8] = &[0, 127, 255];",
          "    let end: &[u8] = &[127, 255, 255];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Utf8Sequence::Three([",
          "    Utf8Range::new(0, 127),",
          "    Utf8Range::new(127, 255),",
          "    Utf8Range::new(255, 255),",
          "    ]));"
        ],
        "code": [
          "{",
          "    let start: &[u8] = &[0, 127, 255];",
          "    let end: &[u8] = &[127, 255, 255];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "    assert_eq!(result, Utf8Sequence::Three([",
          "    Utf8Range::new(0, 127),",
          "    Utf8Range::new(127, 255),",
          "    Utf8Range::new(255, 255),",
          "    ]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let start: &[u8] = &[0, 127];",
          "    let end: &[u8] = &[127, 191];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "}"
        ],
        "oracle": [
          "    Utf8Sequence::from_encoded_range(&[0, 127, 255], &[127, 191, 255]) == Utf8Sequence::Three([Utf8Range::new(0, 127), Utf8Range::new(127, 191), Utf8Range::new(255, 255)]);",
          "    ",
          "    Utf8Sequence::from_encoded_range(&[0, 63, 127], &[63, 127, 255]) == Utf8Sequence::Three([Utf8Range::new(0, 63), Utf8Range::new(63, 127), Utf8Range::new(127, 255)]);",
          "    ",
          "    Utf8Sequence::from_encoded_range(&[1, 2, 3], &[4, 5, 6]) == Utf8Sequence::Three([Utf8Range::new(1, 4), Utf8Range::new(2, 5), Utf8Range::new(3, 6)]);",
          "    ",
          "    Utf8Sequence::from_encoded_range(&[10, 20, 30], &[40, 50, 60]) == Utf8Sequence::Three([Utf8Range::new(10, 40), Utf8Range::new(20, 50), Utf8Range::new(30, 60)]);"
        ],
        "code": [
          "{",
          "    let start: &[u8] = &[0, 127];",
          "    let end: &[u8] = &[127, 191];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "    Utf8Sequence::from_encoded_range(&[0, 127, 255], &[127, 191, 255]) == Utf8Sequence::Three([Utf8Range::new(0, 127), Utf8Range::new(127, 191), Utf8Range::new(255, 255)]);",
          "    ",
          "    Utf8Sequence::from_encoded_range(&[0, 63, 127], &[63, 127, 255]) == Utf8Sequence::Three([Utf8Range::new(0, 63), Utf8Range::new(63, 127), Utf8Range::new(127, 255)]);",
          "    ",
          "    Utf8Sequence::from_encoded_range(&[1, 2, 3], &[4, 5, 6]) == Utf8Sequence::Three([Utf8Range::new(1, 4), Utf8Range::new(2, 5), Utf8Range::new(3, 6)]);",
          "    ",
          "    Utf8Sequence::from_encoded_range(&[10, 20, 30], &[40, 50, 60]) == Utf8Sequence::Three([Utf8Range::new(10, 40), Utf8Range::new(20, 50), Utf8Range::new(30, 60)]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]