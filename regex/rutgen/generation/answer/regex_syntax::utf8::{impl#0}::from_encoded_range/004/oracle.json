[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start: &[u8] = &[0x80, 0xC2];",
          "    let end: &[u8] = &[0xBF, 0xDF];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "}"
        ],
        "oracle": [
          "    let start: &[u8] = &[0x80, 0xC2];",
          "    let end: &[u8] = &[0xBF, 0xDF];",
          "    let expected = Utf8Sequence::Two([Utf8Range::new(0x80, 0xBF), Utf8Range::new(0xC2, 0xDF)]);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let start: &[u8] = &[0x80, 0xC2];",
          "    let end: &[u8] = &[0xBF, 0xDF];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "    let start: &[u8] = &[0x80, 0xC2];",
          "    let end: &[u8] = &[0xBF, 0xDF];",
          "    let expected = Utf8Sequence::Two([Utf8Range::new(0x80, 0xBF), Utf8Range::new(0xC2, 0xDF)]);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start: &[u8] = &[0x00, 0x7F];",
          "    let end: &[u8] = &[0x00, 0x7F];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Utf8Sequence::Two([Utf8Range::new(0x00, 0x00), Utf8Range::new(0x7F, 0x7F)]));"
        ],
        "code": [
          "{",
          "    let start: &[u8] = &[0x00, 0x7F];",
          "    let end: &[u8] = &[0x00, 0x7F];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "    assert_eq!(result, Utf8Sequence::Two([Utf8Range::new(0x00, 0x00), Utf8Range::new(0x7F, 0x7F)]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start: &[u8] = &[0xC2, 0x80];",
          "    let end: &[u8] = &[0xDF, 0xBF];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Utf8Sequence::Two([Utf8Range::new(0xC2, 0xDF), Utf8Range::new(0x80, 0xBF)]));"
        ],
        "code": [
          "{",
          "    let start: &[u8] = &[0xC2, 0x80];",
          "    let end: &[u8] = &[0xDF, 0xBF];",
          "    let result = Utf8Sequence::from_encoded_range(start, end);",
          "    assert_eq!(result, Utf8Sequence::Two([Utf8Range::new(0xC2, 0xDF), Utf8Range::new(0x80, 0xBF)]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]