[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAutomaton;",
          "    ",
          "    impl Automaton for DummyAutomaton {",
          "        fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(StateID::default())",
          "        }",
          "        ",
          "        fn is_special_state(&self, _sid: StateID) -> bool { true }",
          "",
          "        fn is_start_state(&self, _sid: StateID) -> bool { true }",
          "",
          "        fn is_accel_state(&self, _sid: StateID) -> bool { false }",
          "",
          "        fn next_state(&self, sid: StateID, _byte: u8) -> StateID {",
          "            sid",
          "        }",
          "",
          "        fn match_pattern(&self, _sid: StateID, _index: usize) -> PatternID {",
          "            PatternID::default()",
          "        }",
          "",
          "        fn match_len(&self, _sid: StateID) -> usize {",
          "            1",
          "        }",
          "    }",
          "",
          "    let haystack = b\"test haystack\";",
          "    let input = Input::new(&haystack).span(Span { start: 0, end: haystack.len() }).anchored(Anchored::No);",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::default()),",
          "        id: None,",
          "        at: input.start(),",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    let dfa = DummyAutomaton;",
          "",
          "    let result = find_overlapping_rev(&dfa, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert!(state.mat.is_some());",
          "    assert_eq!(state.at, input.start());",
          "    assert_eq!(state.next_match_index, Some(1));",
          "    assert!(state.rev_eoi);",
          "    assert!(state.id.is_some());"
        ],
        "code": [
          "{",
          "    struct DummyAutomaton;",
          "    ",
          "    impl Automaton for DummyAutomaton {",
          "        fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(StateID::default())",
          "        }",
          "        ",
          "        fn is_special_state(&self, _sid: StateID) -> bool { true }",
          "",
          "        fn is_start_state(&self, _sid: StateID) -> bool { true }",
          "",
          "        fn is_accel_state(&self, _sid: StateID) -> bool { false }",
          "",
          "        fn next_state(&self, sid: StateID, _byte: u8) -> StateID {",
          "            sid",
          "        }",
          "",
          "        fn match_pattern(&self, _sid: StateID, _index: usize) -> PatternID {",
          "            PatternID::default()",
          "        }",
          "",
          "        fn match_len(&self, _sid: StateID) -> usize {",
          "            1",
          "        }",
          "    }",
          "",
          "    let haystack = b\"test haystack\";",
          "    let input = Input::new(&haystack).span(Span { start: 0, end: haystack.len() }).anchored(Anchored::No);",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::default()),",
          "        id: None,",
          "        at: input.start(),",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    let dfa = DummyAutomaton;",
          "",
          "    let result = find_overlapping_rev(&dfa, &input, &mut state);",
          "    assert!(result.is_ok());",
          "    assert!(state.mat.is_some());",
          "    assert_eq!(state.at, input.start());",
          "    assert_eq!(state.next_match_index, Some(1));",
          "    assert!(state.rev_eoi);",
          "    assert!(state.id.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAutomaton;",
          "    ",
          "    impl Automaton for DummyAutomaton {",
          "        fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(StateID::default())",
          "        }",
          "        ",
          "        fn is_special_state(&self, _sid: StateID) -> bool { true }",
          "",
          "        fn is_start_state(&self, _sid: StateID) -> bool { true }",
          "",
          "        fn is_accel_state(&self, _sid: StateID) -> bool { false }",
          "",
          "        fn next_state(&self, sid: StateID, _byte: u8) -> StateID {",
          "            sid",
          "        }",
          "",
          "        fn match_pattern(&self, _sid: StateID, _index: usize) -> PatternID {",
          "            PatternID::default()",
          "        }",
          "",
          "        fn match_len(&self, _sid: StateID) -> usize {",
          "            2",
          "        }",
          "    }",
          "",
          "    let haystack = b\"another test haystack\";",
          "    let input = Input::new(&haystack).span(Span { start: 0, end: haystack.len() }).anchored(Anchored::No);",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::default()),",
          "        id: None,",
          "        at: input.start(),",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    let dfa = DummyAutomaton;",
          "",
          "    let result = find_overlapping_rev(&dfa, &input, &mut state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.mat.is_some(), true);",
          "    assert_eq!(state.id.is_none(), false);",
          "    assert_eq!(state.at, input.start());",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert_eq!(dfa.match_len(state.id.unwrap()), 2);",
          "    assert_eq!(state.next_match_index.is_none(), true);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct DummyAutomaton;",
          "    ",
          "    impl Automaton for DummyAutomaton {",
          "        fn start_state_reverse(&self, input: &Input<'_>) -> Result<StateID, MatchError> {",
          "            Ok(StateID::default())",
          "        }",
          "        ",
          "        fn is_special_state(&self, _sid: StateID) -> bool { true }",
          "",
          "        fn is_start_state(&self, _sid: StateID) -> bool { true }",
          "",
          "        fn is_accel_state(&self, _sid: StateID) -> bool { false }",
          "",
          "        fn next_state(&self, sid: StateID, _byte: u8) -> StateID {",
          "            sid",
          "        }",
          "",
          "        fn match_pattern(&self, _sid: StateID, _index: usize) -> PatternID {",
          "            PatternID::default()",
          "        }",
          "",
          "        fn match_len(&self, _sid: StateID) -> usize {",
          "            2",
          "        }",
          "    }",
          "",
          "    let haystack = b\"another test haystack\";",
          "    let input = Input::new(&haystack).span(Span { start: 0, end: haystack.len() }).anchored(Anchored::No);",
          "    let mut state = OverlappingState {",
          "        mat: Some(HalfMatch::default()),",
          "        id: None,",
          "        at: input.start(),",
          "        next_match_index: None,",
          "        rev_eoi: false,",
          "    };",
          "    let dfa = DummyAutomaton;",
          "",
          "    let result = find_overlapping_rev(&dfa, &input, &mut state);",
          "    assert_eq!(state.mat.is_some(), true);",
          "    assert_eq!(state.id.is_none(), false);",
          "    assert_eq!(state.at, input.start());",
          "    assert_eq!(state.rev_eoi, false);",
          "    assert_eq!(dfa.match_len(state.id.unwrap()), 2);",
          "    assert_eq!(state.next_match_index.is_none(), true);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]