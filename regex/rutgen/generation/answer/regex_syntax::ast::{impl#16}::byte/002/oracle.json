[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "    literal.byte();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.byte(), None);",
          "    assert_eq!(literal.kind, LiteralKind::Verbatim);",
          "    assert!(matches!(literal.kind, LiteralKind::HexFixed(HexLiteralKind::X)));",
          "    assert!(matches!(literal.kind, _));",
          "    assert!(literal.byte().is_none());"
        ],
        "code": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Verbatim,",
          "        c: 'a',",
          "    };",
          "    literal.byte();",
          "    assert_eq!(literal.byte(), None);",
          "    assert_eq!(literal.kind, LiteralKind::Verbatim);",
          "    assert!(matches!(literal.kind, LiteralKind::HexFixed(HexLiteralKind::X)));",
          "    assert!(matches!(literal.kind, _));",
          "    assert!(literal.byte().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Meta,",
          "        c: '*',",
          "    };",
          "    literal.byte();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.byte(), None);"
        ],
        "code": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Meta,",
          "        c: '*',",
          "    };",
          "    literal.byte();",
          "    assert_eq!(literal.byte(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Superfluous,",
          "        c: '%',",
          "    };",
          "    literal.byte();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.byte(), None);"
        ],
        "code": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Superfluous,",
          "        c: '%',",
          "    };",
          "    literal.byte();",
          "    assert_eq!(literal.byte(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Octal,",
          "        c: '7',",
          "    };",
          "    literal.byte();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.byte(), None);"
        ],
        "code": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Octal,",
          "        c: '7',",
          "    };",
          "    literal.byte();",
          "    assert_eq!(literal.byte(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::HexFixed(HexLiteralKind::Y),",
          "        c: 'y',",
          "    };",
          "    literal.byte();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.byte(), None);"
        ],
        "code": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::HexFixed(HexLiteralKind::Y),",
          "        c: 'y',",
          "    };",
          "    literal.byte();",
          "    assert_eq!(literal.byte(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::HexBrace(HexLiteralKind::X),",
          "        c: 'a',",
          "    };",
          "    literal.byte();",
          "}"
        ],
        "oracle": [
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::HexFixed(HexLiteralKind::X), c: 'a' }; assert_eq!(literal.byte(), Some(97));",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Verbatim, c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Meta, c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Superfluous, c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Octal, c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::HexFixed(HexLiteralKind::Y), c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::HexBrace(HexLiteralKind::Y), c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Special(SpecialLiteralKind::Newline), c: 'a' }; assert_eq!(literal.byte(), None);"
        ],
        "code": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::HexBrace(HexLiteralKind::X),",
          "        c: 'a',",
          "    };",
          "    literal.byte();",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::HexFixed(HexLiteralKind::X), c: 'a' }; assert_eq!(literal.byte(), Some(97));",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Verbatim, c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Meta, c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Superfluous, c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Octal, c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::HexFixed(HexLiteralKind::Y), c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::HexBrace(HexLiteralKind::Y), c: 'a' }; assert_eq!(literal.byte(), None);",
          "    let literal = Literal { span: Span { start: Position::default(), end: Position::default() }, kind: LiteralKind::Special(SpecialLiteralKind::Newline), c: 'a' }; assert_eq!(literal.byte(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Special(SpecialLiteralKind::Newline),",
          "        c: '\\n',",
          "    };",
          "    literal.byte();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.byte(), None);"
        ],
        "code": [
          "{",
          "    let literal = Literal {",
          "        span: Span { start: Position::default(), end: Position::default() },",
          "        kind: LiteralKind::Special(SpecialLiteralKind::Newline),",
          "        c: '\\n',",
          "    };",
          "    literal.byte();",
          "    assert_eq!(literal.byte(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]