[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 4, end: 5 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[ClassBytesRange { start: 1, end: 3 }, ClassBytesRange { start: 4, end: 5 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), None);",
          "    assert_eq!(class_a.maximum_len(), Some(5));",
          "    assert_eq!(class_a.literal(), Some(vec![1, 2, 3, 4, 5]));"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 4, end: 5 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[ClassBytesRange { start: 1, end: 3 }, ClassBytesRange { start: 4, end: 5 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), None);",
          "    assert_eq!(class_a.maximum_len(), Some(5));",
          "    assert_eq!(class_a.literal(), Some(vec![1, 2, 3, 4, 5]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 5 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 3, end: 7 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), vec![ClassBytesRange { start: 1, end: 2 }, ClassBytesRange { start: 6, end: 7 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), Some(1));",
          "    assert_eq!(class_a.maximum_len(), Some(2));",
          "    assert_eq!(class_a.literal(), None);"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 5 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 3, end: 7 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), vec![ClassBytesRange { start: 1, end: 2 }, ClassBytesRange { start: 6, end: 7 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), Some(1));",
          "    assert_eq!(class_a.maximum_len(), Some(2));",
          "    assert_eq!(class_a.literal(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[]);",
          "    assert_eq!(class_b.ranges(), &[ClassBytesRange { start: 1, end: 3 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert!(class_b.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), Some(0));",
          "    assert_eq!(class_a.maximum_len(), Some(0));",
          "    assert_eq!(class_b.minimum_len(), Some(3));",
          "    assert_eq!(class_b.maximum_len(), Some(3));",
          "    assert_eq!(class_a.literal(), None);",
          "    assert_eq!(class_b.literal(), Some(vec![1, 2, 3]));"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[]);",
          "    assert_eq!(class_b.ranges(), &[ClassBytesRange { start: 1, end: 3 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert!(class_b.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), Some(0));",
          "    assert_eq!(class_a.maximum_len(), Some(0));",
          "    assert_eq!(class_b.minimum_len(), Some(3));",
          "    assert_eq!(class_b.maximum_len(), Some(3));",
          "    assert_eq!(class_a.literal(), None);",
          "    assert_eq!(class_b.literal(), Some(vec![1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassBytes::empty();",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 4, end: 5 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert!(class_a.ranges().is_empty());",
          "    assert_eq!(class_b.ranges(), &[ClassBytesRange { start: 4, end: 5 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), Some(0));",
          "    assert_eq!(class_a.maximum_len(), Some(0));",
          "    assert_eq!(class_a.literal(), None);",
          "    assert!(class_a.to_unicode_class().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassBytes::empty();",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 4, end: 5 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "    assert!(class_a.ranges().is_empty());",
          "    assert_eq!(class_b.ranges(), &[ClassBytesRange { start: 4, end: 5 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), Some(0));",
          "    assert_eq!(class_a.maximum_len(), Some(0));",
          "    assert_eq!(class_a.literal(), None);",
          "    assert!(class_a.to_unicode_class().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 4, end: 5 }]);",
          "    let class_b = ClassBytes::empty();",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[ClassBytesRange { start: 4, end: 5 }]);",
          "    assert!(class_b.ranges().is_empty());",
          "    ",
          "    let mut class_c = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    let mut class_d = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 4 }]);",
          "    class_c.symmetric_difference(&class_d);",
          "    assert_eq!(class_c.ranges(), &[ClassBytesRange { start: 1, end: 1 }, ClassBytesRange { start: 4, end: 4 }]);",
          "    ",
          "    let mut class_e = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 2 }]);",
          "    let class_f = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 3 }, ClassBytesRange { start: 4, end: 5 }]);",
          "    class_e.symmetric_difference(&class_f);",
          "    assert_eq!(class_e.ranges(), &[ClassBytesRange { start: 0, end: 2 }, ClassBytesRange { start: 2, end: 3 }, ClassBytesRange { start: 4, end: 5 }]);",
          "    ",
          "    let mut class_g = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    let class_h = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    class_g.symmetric_difference(&class_h);",
          "    assert!(class_g.ranges().is_empty());"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 4, end: 5 }]);",
          "    let class_b = ClassBytes::empty();",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[ClassBytesRange { start: 4, end: 5 }]);",
          "    assert!(class_b.ranges().is_empty());",
          "    ",
          "    let mut class_c = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    let mut class_d = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 4 }]);",
          "    class_c.symmetric_difference(&class_d);",
          "    assert_eq!(class_c.ranges(), &[ClassBytesRange { start: 1, end: 1 }, ClassBytesRange { start: 4, end: 4 }]);",
          "    ",
          "    let mut class_e = ClassBytes::new(vec![ClassBytesRange { start: 0, end: 2 }]);",
          "    let class_f = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 3 }, ClassBytesRange { start: 4, end: 5 }]);",
          "    class_e.symmetric_difference(&class_f);",
          "    assert_eq!(class_e.ranges(), &[ClassBytesRange { start: 0, end: 2 }, ClassBytesRange { start: 2, end: 3 }, ClassBytesRange { start: 4, end: 5 }]);",
          "    ",
          "    let mut class_g = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    let class_h = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 3 }]);",
          "    class_g.symmetric_difference(&class_h);",
          "    assert!(class_g.ranges().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 2 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 2 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), vec![ClassBytesRange { start: 2, end: 2 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), None);",
          "    assert_eq!(class_a.maximum_len(), Some(1));",
          "    assert_eq!(class_a.literal(), Some(vec![2]));",
          "    assert_eq!(class_a.to_unicode_class(), None);",
          "    class_a.push(ClassBytesRange { start: 3, end: 3 });",
          "    assert_eq!(class_a.ranges(), vec![ClassBytesRange { start: 2, end: 2 }, ClassBytesRange { start: 3, end: 3 }]);",
          "    class_b.push(ClassBytesRange { start: 4, end: 4 });",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), vec![ClassBytesRange { start: 3, end: 3 }, ClassBytesRange { start: 4, end: 4 }]);"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 2 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 2 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), vec![ClassBytesRange { start: 2, end: 2 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), None);",
          "    assert_eq!(class_a.maximum_len(), Some(1));",
          "    assert_eq!(class_a.literal(), Some(vec![2]));",
          "    assert_eq!(class_a.to_unicode_class(), None);",
          "    class_a.push(ClassBytesRange { start: 3, end: 3 });",
          "    assert_eq!(class_a.ranges(), vec![ClassBytesRange { start: 2, end: 2 }, ClassBytesRange { start: 3, end: 3 }]);",
          "    class_b.push(ClassBytesRange { start: 4, end: 4 });",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), vec![ClassBytesRange { start: 3, end: 3 }, ClassBytesRange { start: 4, end: 4 }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 2 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 3, end: 3 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[ClassBytesRange { start: 2, end: 2 }, ClassBytesRange { start: 3, end: 3 }]);"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 2 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 3, end: 3 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[ClassBytesRange { start: 2, end: 2 }, ClassBytesRange { start: 3, end: 3 }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 2 }, ClassBytesRange { start: 3, end: 4 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 3 }, ClassBytesRange { start: 5, end: 6 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_a.ranges(), &[ClassBytesRange { start: 1, end: 1 }, ClassBytesRange { start: 4, end: 4 }, ClassBytesRange { start: 5, end: 6 }]);",
          "    assert_eq!(class_b.ranges(), &[ClassBytesRange { start: 2, end: 3 }, ClassBytesRange { start: 5, end: 6 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert!(class_b.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), Some(1));",
          "    assert_eq!(class_a.maximum_len(), Some(2));",
          "    assert_eq!(class_b.minimum_len(), Some(1));",
          "    assert_eq!(class_b.maximum_len(), Some(2));"
        ],
        "code": [
          "{",
          "    let mut class_a = ClassBytes::new(vec![ClassBytesRange { start: 1, end: 2 }, ClassBytesRange { start: 3, end: 4 }]);",
          "    let class_b = ClassBytes::new(vec![ClassBytesRange { start: 2, end: 3 }, ClassBytesRange { start: 5, end: 6 }]);",
          "    class_a.symmetric_difference(&class_b);",
          "    assert_eq!(class_a.ranges(), &[ClassBytesRange { start: 1, end: 1 }, ClassBytesRange { start: 4, end: 4 }, ClassBytesRange { start: 5, end: 6 }]);",
          "    assert_eq!(class_b.ranges(), &[ClassBytesRange { start: 2, end: 3 }, ClassBytesRange { start: 5, end: 6 }]);",
          "    assert!(class_a.is_ascii());",
          "    assert!(class_b.is_ascii());",
          "    assert_eq!(class_a.minimum_len(), Some(1));",
          "    assert_eq!(class_a.maximum_len(), Some(2));",
          "    assert_eq!(class_b.minimum_len(), Some(1));",
          "    assert_eq!(class_b.maximum_len(), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]