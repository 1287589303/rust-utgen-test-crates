[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ClassRange { start: 'a', end: 'c' };",
          "    let result = input.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'C' }));"
        ],
        "code": [
          "{",
          "    let input = ClassRange { start: 'a', end: 'c' };",
          "    let result = input.ascii_case_fold();",
          "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'C' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ClassRange { start: 'A', end: 'C' };",
          "    let result = input.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    let expected = Some(ClassRange { start: 'A', end: 'C' });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = ClassRange { start: 'A', end: 'C' };",
          "    let result = input.ascii_case_fold();",
          "    let expected = Some(ClassRange { start: 'A', end: 'C' });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ClassRange { start: 'b', end: 'y' };",
          "    let result = input.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'B', end: 'Y' }));"
        ],
        "code": [
          "{",
          "    let input = ClassRange { start: 'b', end: 'y' };",
          "    let result = input.ascii_case_fold();",
          "    assert_eq!(result, Some(ClassRange { start: 'B', end: 'Y' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ClassRange { start: 'B', end: 'Y' };",
          "    let result = input.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'b', end: 'y' }));"
        ],
        "code": [
          "{",
          "    let input = ClassRange { start: 'B', end: 'Y' };",
          "    let result = input.ascii_case_fold();",
          "    assert_eq!(result, Some(ClassRange { start: 'b', end: 'y' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ClassRange { start: 'a', end: 'z' };",
          "    let result = input.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    let expected = Some(ClassRange { start: 'A', end: 'Z' });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = ClassRange { start: 'a', end: 'z' };",
          "    let result = input.ascii_case_fold();",
          "    let expected = Some(ClassRange { start: 'A', end: 'Z' });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ClassRange { start: 'A', end: 'Z' };",
          "    let result = input.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));"
        ],
        "code": [
          "{",
          "    let input = ClassRange { start: 'A', end: 'Z' };",
          "    let result = input.ascii_case_fold();",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ClassRange { start: 'A', end: 'z' };",
          "    let result = input.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'Z', end: 'z' }));"
        ],
        "code": [
          "{",
          "    let input = ClassRange { start: 'A', end: 'z' };",
          "    let result = input.ascii_case_fold();",
          "    assert_eq!(result, Some(ClassRange { start: 'Z', end: 'z' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = ClassRange { start: '!', end: '%' };",
          "    let result = input.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'Z' }));"
        ],
        "code": [
          "{",
          "    let input = ClassRange { start: '!', end: '%' };",
          "    let result = input.ascii_case_fold();",
          "    assert_eq!(result, Some(ClassRange { start: 'A', end: 'Z' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]