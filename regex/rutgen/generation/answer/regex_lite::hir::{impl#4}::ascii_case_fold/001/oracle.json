[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassRange { start: '!', end: '`' };",
          "    let result = range.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    let range = ClassRange { start: '!', end: '`' };",
          "    let result = range.ascii_case_fold();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let range = ClassRange { start: '!', end: '`' };",
          "    let result = range.ascii_case_fold();",
          "    let range = ClassRange { start: '!', end: '`' };",
          "    let result = range.ascii_case_fold();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassRange { start: '{', end: '~' };",
          "    let result = range.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    result.unwrap();",
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "    let range = ClassRange { start: '{', end: '~' };",
          "    let empty_range = ClassRange { start: 'A', end: 'A' };",
          "    assert!(empty_range.is_intersection_empty(&range));",
          "    let empty_range_lower = ClassRange { start: 'a', end: 'a' };",
          "    assert!(empty_range_lower.is_intersection_empty(&range));"
        ],
        "code": [
          "{",
          "    let range = ClassRange { start: '{', end: '~' };",
          "    let result = range.ascii_case_fold();",
          "    result.unwrap();",
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "    let range = ClassRange { start: '{', end: '~' };",
          "    let empty_range = ClassRange { start: 'A', end: 'A' };",
          "    assert!(empty_range.is_intersection_empty(&range));",
          "    let empty_range_lower = ClassRange { start: 'a', end: 'a' };",
          "    assert!(empty_range_lower.is_intersection_empty(&range));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]