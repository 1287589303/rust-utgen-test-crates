[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassRange { start: 'A', end: 'Z' };",
          "    let result = range.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));"
        ],
        "code": [
          "{",
          "    let range = ClassRange { start: 'A', end: 'Z' };",
          "    let result = range.ascii_case_fold();",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassRange { start: 'A', end: 'Z' };",
          "    let result = range.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));"
        ],
        "code": [
          "{",
          "    let range = ClassRange { start: 'A', end: 'Z' };",
          "    let result = range.ascii_case_fold();",
          "    assert_eq!(result, Some(ClassRange { start: 'a', end: 'z' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassRange { start: 'A', end: 'Z' };",
          "    let result = range.ascii_case_fold();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let folded_range = result.unwrap();",
          "    assert_eq!(folded_range.start, 'a');",
          "    assert_eq!(folded_range.end, 'z');"
        ],
        "code": [
          "{",
          "    let range = ClassRange { start: 'A', end: 'Z' };",
          "    let result = range.ascii_case_fold();",
          "    assert!(result.is_some());",
          "    let folded_range = result.unwrap();",
          "    assert_eq!(folded_range.start, 'a');",
          "    assert_eq!(folded_range.end, 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]