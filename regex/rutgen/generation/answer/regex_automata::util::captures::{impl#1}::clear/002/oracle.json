[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pattern_id = Some(PatternID(SmallIndex::default()));",
          "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))];",
          "    let mut captures = Captures {",
          "        group_info,",
          "        pid: pattern_id,",
          "        slots,",
          "    };",
          "",
          "    captures.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots(), &[None]);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pattern_id = Some(PatternID(SmallIndex::default()));",
          "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap()))];",
          "    let mut captures = Captures {",
          "        group_info,",
          "        pid: pattern_id,",
          "        slots,",
          "    };",
          "",
          "    captures.clear();",
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots(), &[None]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pattern_id = Some(PatternID(SmallIndex::default()));",
          "    let slots = vec![",
          "        Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())),",
          "        Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())),",
          "        None,",
          "    ];",
          "    let mut captures = Captures {",
          "        group_info,",
          "        pid: pattern_id,",
          "        slots,",
          "    };",
          "",
          "    captures.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots.len(), 3);",
          "    assert!(captures.slots()[0].is_none());",
          "    assert!(captures.slots()[1].is_none());",
          "    assert!(captures.slots()[2].is_none());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pattern_id = Some(PatternID(SmallIndex::default()));",
          "    let slots = vec![",
          "        Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())),",
          "        Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())),",
          "        None,",
          "    ];",
          "    let mut captures = Captures {",
          "        group_info,",
          "        pid: pattern_id,",
          "        slots,",
          "    };",
          "",
          "    captures.clear();",
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots.len(), 3);",
          "    assert!(captures.slots()[0].is_none());",
          "    assert!(captures.slots()[1].is_none());",
          "    assert!(captures.slots()[2].is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pattern_id = Some(PatternID(SmallIndex::default()));",
          "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap()))];",
          "    let mut captures = Captures {",
          "        group_info,",
          "        pid: pattern_id,",
          "        slots,",
          "    };",
          "",
          "    captures.clear();",
          "}"
        ],
        "oracle": [
          "    assert!(captures.pid.is_none());",
          "    assert_eq!(captures.slots(), &[None]);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pattern_id = Some(PatternID(SmallIndex::default()));",
          "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap()))];",
          "    let mut captures = Captures {",
          "        group_info,",
          "        pid: pattern_id,",
          "        slots,",
          "    };",
          "",
          "    captures.clear();",
          "    assert!(captures.pid.is_none());",
          "    assert_eq!(captures.slots(), &[None]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pattern_id = Some(PatternID(SmallIndex::default()));",
          "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())), None];",
          "    let mut captures = Captures {",
          "        group_info,",
          "        pid: pattern_id,",
          "        slots,",
          "    };",
          "    ",
          "    captures.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots, vec![None, None]);",
          "    assert!(!captures.is_match());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let pattern_id = Some(PatternID(SmallIndex::default()));",
          "    let slots = vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())), None];",
          "    let mut captures = Captures {",
          "        group_info,",
          "        pid: pattern_id,",
          "        slots,",
          "    };",
          "    ",
          "    captures.clear();",
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots, vec![None, None]);",
          "    assert!(!captures.is_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]