[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: Vec::new(),",
          "    };",
          "    captures.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert!(captures.slots.is_empty());",
          "    ",
          "    let mut captures_with_slots = Captures {",
          "    group_info: GroupInfo::default(),",
          "    pid: Some(PatternID(SmallIndex::default())),",
          "    slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))],",
          "    };",
          "    captures_with_slots.clear();",
          "    assert_eq!(captures_with_slots.pid, None);",
          "    assert_eq!(captures_with_slots.slots, vec![None]);"
        ],
        "code": [
          "{",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: None,",
          "        slots: Vec::new(),",
          "    };",
          "    captures.clear();",
          "    assert_eq!(captures.pid, None);",
          "    assert!(captures.slots.is_empty());",
          "    ",
          "    let mut captures_with_slots = Captures {",
          "    group_info: GroupInfo::default(),",
          "    pid: Some(PatternID(SmallIndex::default())),",
          "    slots: vec![Some(NonMaxUsize(NonZeroUsize::new(0).unwrap()))],",
          "    };",
          "    captures_with_slots.clear();",
          "    assert_eq!(captures_with_slots.pid, None);",
          "    assert_eq!(captures_with_slots.slots, vec![None]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: Some(PatternID(SmallIndex(1))),",
          "        slots: vec![None, None, None],",
          "    };",
          "    captures.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots, vec![None, None, None]);",
          "    assert!(!captures.is_match());",
          "    assert!(captures.slots().iter().all(|&s| s.is_none()));"
        ],
        "code": [
          "{",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: Some(PatternID(SmallIndex(1))),",
          "        slots: vec![None, None, None],",
          "    };",
          "    captures.clear();",
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots, vec![None, None, None]);",
          "    assert!(!captures.is_match());",
          "    assert!(captures.slots().iter().all(|&s| s.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: Some(PatternID(SmallIndex(2))),",
          "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())), Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()))],",
          "    };",
          "    captures.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots, vec![None, None]);",
          "    assert!(!captures.is_match());"
        ],
        "code": [
          "{",
          "    let mut captures = Captures {",
          "        group_info: GroupInfo::default(),",
          "        pid: Some(PatternID(SmallIndex(2))),",
          "        slots: vec![Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())), Some(NonMaxUsize(NonZeroUsize::new(2).unwrap()))],",
          "    };",
          "    captures.clear();",
          "    assert_eq!(captures.pid, None);",
          "    assert_eq!(captures.slots, vec![None, None]);",
          "    assert!(!captures.is_match());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]