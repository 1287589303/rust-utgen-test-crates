[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let byte_set = ByteSet::empty();",
          "    byte_class_set.add_set(&byte_set);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_class_set.is_empty());",
          "    assert_eq!(byte_class_set.0.bits, ByteSet::empty().bits);"
        ],
        "code": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let byte_set = ByteSet::empty();",
          "    byte_class_set.add_set(&byte_set);",
          "    assert!(byte_class_set.is_empty());",
          "    assert_eq!(byte_class_set.0.bits, ByteSet::empty().bits);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(10);",
          "    byte_class_set.add_set(&byte_set);",
          "}"
        ],
        "oracle": [
          "    byte_class_set.is_empty() == false",
          "    byte_class_set.contains_range(10, 10) == true",
          "    byte_class_set.contains(10) == true",
          "    byte_class_set.byte_classes() == ByteClasses {}"
        ],
        "code": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    byte_set.add(10);",
          "    byte_class_set.add_set(&byte_set);",
          "    byte_class_set.is_empty() == false",
          "    byte_class_set.contains_range(10, 10) == true",
          "    byte_class_set.contains(10) == true",
          "    byte_class_set.byte_classes() == ByteClasses {}",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    ",
          "    byte_set.add(0);",
          "    byte_set.add(1);",
          "    byte_set.add(2);",
          "    byte_set.add(3);",
          "    ",
          "    byte_class_set.add_set(&byte_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_class_set.is_empty(), false);",
          "    assert!(byte_class_set.contains_range(0, 3));",
          "    assert!(!byte_class_set.contains(4));",
          "    assert!(byte_class_set.contains(1));",
          "    assert!(byte_class_set.contains(0));",
          "    assert!(byte_class_set.contains(2));",
          "    assert!(byte_class_set.contains(3));"
        ],
        "code": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    ",
          "    byte_set.add(0);",
          "    byte_set.add(1);",
          "    byte_set.add(2);",
          "    byte_set.add(3);",
          "    ",
          "    byte_class_set.add_set(&byte_set);",
          "    assert_eq!(byte_class_set.is_empty(), false);",
          "    assert!(byte_class_set.contains_range(0, 3));",
          "    assert!(!byte_class_set.contains(4));",
          "    assert!(byte_class_set.contains(1));",
          "    assert!(byte_class_set.contains(0));",
          "    assert!(byte_class_set.contains(2));",
          "    assert!(byte_class_set.contains(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    ",
          "    byte_set.add(0);",
          "    byte_class_set.add_set(&byte_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_class_set.is_empty(), true);",
          "    assert_eq!(byte_set.contains(0), true);",
          "    assert_eq!(byte_set.iter_ranges().count(), 0);"
        ],
        "code": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    ",
          "    byte_set.add(0);",
          "    byte_class_set.add_set(&byte_set);",
          "    assert_eq!(byte_class_set.is_empty(), true);",
          "    assert_eq!(byte_set.contains(0), true);",
          "    assert_eq!(byte_set.iter_ranges().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    ",
          "    byte_set.add(255);",
          "    byte_class_set.add_set(&byte_set);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_class_set.is_empty());",
          "    assert!(byte_set.contains(255));",
          "    assert!(byte_set.iter().next().is_some());",
          "    assert_eq!(byte_set.iter_ranges().count(), 1);",
          "    assert_eq!(byte_set.iter_ranges().next().unwrap(), (255, 255));"
        ],
        "code": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    ",
          "    byte_set.add(255);",
          "    byte_class_set.add_set(&byte_set);",
          "    assert!(byte_class_set.is_empty());",
          "    assert!(byte_set.contains(255));",
          "    assert!(byte_set.iter().next().is_some());",
          "    assert_eq!(byte_set.iter_ranges().count(), 1);",
          "    assert_eq!(byte_set.iter_ranges().next().unwrap(), (255, 255));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    ",
          "    byte_set.add(5);",
          "    byte_set.add(20);",
          "    byte_set.add(35);",
          "    byte_class_set.add_set(&byte_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(byte_class_set.is_empty(), false);",
          "    assert_eq!(byte_set.contains(5), true);",
          "    assert_eq!(byte_set.contains(20), true);",
          "    assert_eq!(byte_set.contains(35), true);",
          "    assert_eq!(byte_class_set.byte_classes().len(), 3);",
          "    assert_eq!(byte_class_set.iter_ranges().count(), 3);",
          "    assert_eq!(byte_class_set.contains_range(5, 5), true);",
          "    assert_eq!(byte_class_set.contains_range(20, 20), true);",
          "    assert_eq!(byte_class_set.contains_range(35, 35), true);",
          "    assert_eq!(byte_class_set.contains_range(6, 19), false);",
          "    assert_eq!(byte_class_set.contains_range(21, 34), false);",
          "    assert_eq!(byte_class_set.contains_range(36, 100), false);"
        ],
        "code": [
          "{",
          "    let mut byte_class_set = ByteClassSet::empty();",
          "    let mut byte_set = ByteSet::empty();",
          "    ",
          "    byte_set.add(5);",
          "    byte_set.add(20);",
          "    byte_set.add(35);",
          "    byte_class_set.add_set(&byte_set);",
          "    assert_eq!(byte_class_set.is_empty(), false);",
          "    assert_eq!(byte_set.contains(5), true);",
          "    assert_eq!(byte_set.contains(20), true);",
          "    assert_eq!(byte_set.contains(35), true);",
          "    assert_eq!(byte_class_set.byte_classes().len(), 3);",
          "    assert_eq!(byte_class_set.iter_ranges().count(), 3);",
          "    assert_eq!(byte_class_set.contains_range(5, 5), true);",
          "    assert_eq!(byte_class_set.contains_range(20, 20), true);",
          "    assert_eq!(byte_class_set.contains_range(35, 35), true);",
          "    assert_eq!(byte_class_set.contains_range(6, 19), false);",
          "    assert_eq!(byte_class_set.contains_range(21, 34), false);",
          "    assert_eq!(byte_class_set.contains_range(36, 100), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]