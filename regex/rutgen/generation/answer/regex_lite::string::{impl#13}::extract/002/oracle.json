[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(r\"([0-9]{4})\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"year\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let pikevm = PikeVM::new(nfa);",
          "    let captures = Captures {",
          "        haystack: \"2010\",",
          "        slots: CaptureLocations(vec![Some(NonMaxUsize::new(0).unwrap())]),",
          "        pikevm: Arc::new(pikevm),",
          "    };",
          "",
          "    let (full, [year]) = captures.extract::<1>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(full, \"2010\");",
          "    assert_eq!(year, \"2010\");"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(r\"([0-9]{4})\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(1),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"year\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let pikevm = PikeVM::new(nfa);",
          "    let captures = Captures {",
          "        haystack: \"2010\",",
          "        slots: CaptureLocations(vec![Some(NonMaxUsize::new(0).unwrap())]),",
          "        pikevm: Arc::new(pikevm),",
          "    };",
          "",
          "    let (full, [year]) = captures.extract::<1>();",
          "    assert_eq!(full, \"2010\");",
          "    assert_eq!(year, \"2010\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(r\"([0-9]{4})-([0-9]{2})\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(2),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"year\")), Some(Arc::from(\"month\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let pikevm = PikeVM::new(nfa);",
          "    let captures = Captures {",
          "        haystack: \"2010-03\",",
          "        slots: CaptureLocations(vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(1).unwrap())]),",
          "        pikevm: Arc::new(pikevm),",
          "    };",
          "",
          "    let (full, [year, month]) = captures.extract::<2>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.extract::<2>(), (\"2010-03\", [\"2010\", \"03\"]));",
          "    let (full, [year, month]) = captures.extract::<2>();",
          "    assert!(matches!(captures.extract::<2>(), (\"2010-03\", [\"2010\", \"03\"]));",
          "    assert_eq!(captures.len(), 2);",
          "    assert!(captured.is_match_empty() == false);",
          "    assert!(captures.iter().next().is_some());",
          "    assert!(captures.get(0).is_some());",
          "    assert!(captures.get(1).is_some());",
          "    assert!(captures.name(\"year\").is_some());",
          "    assert!(captures.name(\"month\").is_some());",
          "    assert!(captures.extract::<3>().is_err());",
          "    assert!(captures.extract::<1>().is_err());"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(r\"([0-9]{4})-([0-9]{2})\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(2),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"year\")), Some(Arc::from(\"month\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let pikevm = PikeVM::new(nfa);",
          "    let captures = Captures {",
          "        haystack: \"2010-03\",",
          "        slots: CaptureLocations(vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(1).unwrap())]),",
          "        pikevm: Arc::new(pikevm),",
          "    };",
          "",
          "    let (full, [year, month]) = captures.extract::<2>();",
          "    assert_eq!(captures.extract::<2>(), (\"2010-03\", [\"2010\", \"03\"]));",
          "    let (full, [year, month]) = captures.extract::<2>();",
          "    assert!(matches!(captures.extract::<2>(), (\"2010-03\", [\"2010\", \"03\"]));",
          "    assert_eq!(captures.len(), 2);",
          "    assert!(captured.is_match_empty() == false);",
          "    assert!(captures.iter().next().is_some());",
          "    assert!(captures.get(0).is_some());",
          "    assert!(captures.get(1).is_some());",
          "    assert!(captures.name(\"year\").is_some());",
          "    assert!(captures.name(\"month\").is_some());",
          "    assert!(captures.extract::<3>().is_err());",
          "    assert!(captures.extract::<1>().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"asked for 3 groups, but must ask for 2\")]"
        ],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(r\"([0-9]{4})-([0-9]{2})\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(2),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"year\")), Some(Arc::from(\"month\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let pikevm = PikeVM::new(nfa);",
          "    let captures = Captures {",
          "        haystack: \"2010-03\",",
          "        slots: CaptureLocations(vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(1).unwrap())]),",
          "        pikevm: Arc::new(pikevm),",
          "    };",
          "",
          "    let (full, [year, month, day]) = captures.extract::<3>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(captures.pikevm.nfa().static_explicit_captures_len(), Some(2));",
          "    #[should_panic(expected = \"number of capture groups can vary in a match\")]",
          "    let (full, [year, month, day]) = captures.extract::<3>();"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(r\"([0-9]{4})-([0-9]{2})\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(2),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"year\")), Some(Arc::from(\"month\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let pikevm = PikeVM::new(nfa);",
          "    let captures = Captures {",
          "        haystack: \"2010-03\",",
          "        slots: CaptureLocations(vec![Some(NonMaxUsize::new(0).unwrap()), Some(NonMaxUsize::new(1).unwrap())]),",
          "        pikevm: Arc::new(pikevm),",
          "    };",
          "",
          "    let (full, [year, month, day]) = captures.extract::<3>();",
          "    assert_eq!(captures.pikevm.nfa().static_explicit_captures_len(), Some(2));",
          "    #[should_panic(expected = \"number of capture groups can vary in a match\")]",
          "    let (full, [year, month, day]) = captures.extract::<3>();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(r\"Hello\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(0),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pikevm = PikeVM::new(nfa);",
          "    let captures = Captures {",
          "        haystack: \"Hello\",",
          "        slots: CaptureLocations(vec![]),",
          "        pikevm: Arc::new(pikevm),",
          "    };",
          "",
          "    let (full, groups): (&str, [&str; 0]) = captures.extract::<0>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(full, \"Hello\");",
          "    assert_eq!(groups.len(), 0);",
          "    assert!(matches!(captures.extract::<1>(), _));",
          "    assert!(matches!(captures.extract::<2>(), _));",
          "    assert!(matches!(captures.extract::<3>(), _));",
          "    assert!(matches!(captures.extract::<4>(), _));"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(r\"Hello\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: Some(0),",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let pikevm = PikeVM::new(nfa);",
          "    let captures = Captures {",
          "        haystack: \"Hello\",",
          "        slots: CaptureLocations(vec![]),",
          "        pikevm: Arc::new(pikevm),",
          "    };",
          "",
          "    let (full, groups): (&str, [&str; 0]) = captures.extract::<0>();",
          "    assert_eq!(full, \"Hello\");",
          "    assert_eq!(groups.len(), 0);",
          "    assert!(matches!(captures.extract::<1>(), _));",
          "    assert!(matches!(captures.extract::<2>(), _));",
          "    assert!(matches!(captures.extract::<3>(), _));",
          "    assert!(matches!(captures.extract::<4>(), _));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]