[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8SuffixMap {",
          "        version: 0,",
          "        capacity: 10,",
          "        map: vec![Utf8SuffixEntry {",
          "            version: 0,",
          "            key: Utf8SuffixKey {}, // Assuming default, replace with appropriate key if needed",
          "            val: StateID::new(1), // Assuming default initialization",
          "        }; 5], // Initialize with 5 entries",
          "    };",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), 10);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.key == Utf8SuffixKey::default()));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::new(0)));"
        ],
        "code": [
          "{",
          "    let mut map = Utf8SuffixMap {",
          "        version: 0,",
          "        capacity: 10,",
          "        map: vec![Utf8SuffixEntry {",
          "            version: 0,",
          "            key: Utf8SuffixKey {}, // Assuming default, replace with appropriate key if needed",
          "            val: StateID::new(1), // Assuming default initialization",
          "        }; 5], // Initialize with 5 entries",
          "    };",
          "    map.clear();",
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), 10);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.key == Utf8SuffixKey::default()));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::new(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = Utf8SuffixMap {",
          "        version: 0,",
          "        capacity: 15,",
          "        map: vec![Utf8SuffixEntry {",
          "            version: 0,",
          "            key: Utf8SuffixKey {}, // Assuming default, replace with appropriate key if needed",
          "            val: StateID::new(2), // Assuming default initialization",
          "        }; 10], // Initialize with 10 entries",
          "    };",
          "    map.clear();",
          "}"
        ],
        "oracle": [
          "    let map = Utf8SuffixMap { version: 0, capacity: 15, map: vec![Utf8SuffixEntry { version: 0, key: Utf8SuffixKey {}, val: StateID::new(2) }; 10] };",
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), 15);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::new(0)));",
          "    assert!(map.map.iter().any(|entry| entry.key == Utf8SuffixKey {}));"
        ],
        "code": [
          "{",
          "    let mut map = Utf8SuffixMap {",
          "        version: 0,",
          "        capacity: 15,",
          "        map: vec![Utf8SuffixEntry {",
          "            version: 0,",
          "            key: Utf8SuffixKey {}, // Assuming default, replace with appropriate key if needed",
          "            val: StateID::new(2), // Assuming default initialization",
          "        }; 10], // Initialize with 10 entries",
          "    };",
          "    map.clear();",
          "    let map = Utf8SuffixMap { version: 0, capacity: 15, map: vec![Utf8SuffixEntry { version: 0, key: Utf8SuffixKey {}, val: StateID::new(2) }; 10] };",
          "    assert_eq!(map.version, 1);",
          "    assert_eq!(map.map.len(), 15);",
          "    assert!(map.map.iter().all(|entry| entry.version == 0));",
          "    assert!(map.map.iter().all(|entry| entry.val == StateID::new(0)));",
          "    assert!(map.map.iter().any(|entry| entry.key == Utf8SuffixKey {}));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]