[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses::singletons();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(classes.alphabet_len(), 256);",
          "    assert!(classes.is_singleton());",
          "    for b in 0..=255 {",
          "    assert_eq!(classes.get(b), b);",
          "    }"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses::singletons();",
          "    assert_eq!(classes.alphabet_len(), 256);",
          "    assert!(classes.is_singleton());",
          "    for b in 0..=255 {",
          "    assert_eq!(classes.get(b), b);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(255, 255);",
          "    let result = classes.get(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ByteClasses::singletons().get(0), 0);",
          "    assert_eq!(ByteClasses::singletons().get(255), 255);",
          "    assert_eq!(ByteClasses::singletons().alphabet_len(), 256);",
          "    assert!(ByteClasses::singletons().is_singleton());",
          "    assert_eq!(ByteClasses::singletons().stride2(), 256);",
          "    assert_eq!(ByteClasses::singletons().elements(0).count(), 1);",
          "    assert_eq!(ByteClasses::singletons().elements(255).count(), 1);",
          "    assert_eq!(ByteClasses::singletons().iter().count(), 256);"
        ],
        "code": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(255, 255);",
          "    let result = classes.get(255);",
          "    assert_eq!(ByteClasses::singletons().get(0), 0);",
          "    assert_eq!(ByteClasses::singletons().get(255), 255);",
          "    assert_eq!(ByteClasses::singletons().alphabet_len(), 256);",
          "    assert!(ByteClasses::singletons().is_singleton());",
          "    assert_eq!(ByteClasses::singletons().stride2(), 256);",
          "    assert_eq!(ByteClasses::singletons().elements(0).count(), 1);",
          "    assert_eq!(ByteClasses::singletons().elements(255).count(), 1);",
          "    assert_eq!(ByteClasses::singletons().iter().count(), 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0, 0);",
          "    let result = classes.get(0);",
          "}"
        ],
        "oracle": [
          "    let result = ByteClasses::singletons();",
          "    assert_eq!(result.get(0), 0);",
          "    assert_eq!(result.get(255), 255);",
          "    assert_eq!(result.alphabet_len(), 256);",
          "    assert!(result.is_singleton());"
        ],
        "code": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0, 0);",
          "    let result = classes.get(0);",
          "    let result = ByteClasses::singletons();",
          "    assert_eq!(result.get(0), 0);",
          "    assert_eq!(result.get(255), 255);",
          "    assert_eq!(result.alphabet_len(), 256);",
          "    assert!(result.is_singleton());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(256, 256);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ByteClasses::singletons().alphabet_len(), 256);",
          "    assert!(ByteClasses::singletons().is_singleton());",
          "    assert_eq!(ByteClasses::singletons().get(0), 0);",
          "    assert_eq!(ByteClasses::singletons().get(255), 255);",
          "    assert_eq!(ByteClasses::singletons().get(256), 0);"
        ],
        "code": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(256, 256);",
          "    assert_eq!(ByteClasses::singletons().alphabet_len(), 256);",
          "    assert!(ByteClasses::singletons().is_singleton());",
          "    assert_eq!(ByteClasses::singletons().get(0), 0);",
          "    assert_eq!(ByteClasses::singletons().get(255), 255);",
          "    assert_eq!(ByteClasses::singletons().get(256), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(-1 as u8, -1 as u8);",
          "}"
        ],
        "oracle": [
          "    assert!(ByteClasses::singletons().alphabet_len() == 256);",
          "    assert!(ByteClasses::singletons().is_singleton() == true);",
          "    assert!(ByteClasses::singletons().get(0) == 0);",
          "    assert!(ByteClasses::singletons().get(255) == 255);",
          "    assert!(ByteClasses::singletons().get(128) == 128);",
          "    assert!(ByteClasses::singletons().elements(0).len() == 1);",
          "    assert!(ByteClasses::singletons().elements(255).len() == 1);",
          "    assert!(ByteClasses::singletons().elements(128).len() == 1);"
        ],
        "code": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(-1 as u8, -1 as u8);",
          "    assert!(ByteClasses::singletons().alphabet_len() == 256);",
          "    assert!(ByteClasses::singletons().is_singleton() == true);",
          "    assert!(ByteClasses::singletons().get(0) == 0);",
          "    assert!(ByteClasses::singletons().get(255) == 255);",
          "    assert!(ByteClasses::singletons().get(128) == 128);",
          "    assert!(ByteClasses::singletons().elements(0).len() == 1);",
          "    assert!(ByteClasses::singletons().elements(255).len() == 1);",
          "    assert!(ByteClasses::singletons().elements(128).len() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]