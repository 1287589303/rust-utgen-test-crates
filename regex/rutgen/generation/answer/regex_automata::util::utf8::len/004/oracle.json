[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 0b1110_1111; // A valid UTF-8 leading byte for 3-byte sequences",
          "    let result = len(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    let byte = 0b1110_1111; // A valid UTF-8 leading byte for 3-byte sequences",
          "    let result = len(byte);",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 0b1000_0000; // An invalid leading byte",
          "    let result = len(byte);",
          "}"
        ],
        "oracle": [
          "    let byte = 0b1110_1111; // Valid leading byte for 3 code units",
          "    let result = len(byte);",
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    let byte = 0b1000_0000; // An invalid leading byte",
          "    let result = len(byte);",
          "    let byte = 0b1110_1111; // Valid leading byte for 3 code units",
          "    let result = len(byte);",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 0b1101_1111 + 1; // Beyond the valid range for leading bytes",
          "    let result = len(byte);",
          "}"
        ],
        "oracle": [
          "    let byte = 0b1000_0000; // This triggers condition on line 104, expecting None",
          "    assert_eq!(len(byte), None);",
          "    ",
          "    let byte = 0b1110_1111; // This triggers condition on line 108, expecting Some(3)",
          "    assert_eq!(len(byte), Some(3));",
          "    ",
          "    let byte = 0b1101_1111 + 1; // Beyond the valid range for leading bytes",
          "    assert_eq!(len(byte), None);"
        ],
        "code": [
          "{",
          "    let byte = 0b1101_1111 + 1; // Beyond the valid range for leading bytes",
          "    let result = len(byte);",
          "    let byte = 0b1000_0000; // This triggers condition on line 104, expecting None",
          "    assert_eq!(len(byte), None);",
          "    ",
          "    let byte = 0b1110_1111; // This triggers condition on line 108, expecting Some(3)",
          "    assert_eq!(len(byte), Some(3));",
          "    ",
          "    let byte = 0b1101_1111 + 1; // Beyond the valid range for leading bytes",
          "    assert_eq!(len(byte), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]