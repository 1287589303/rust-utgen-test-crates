[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = 0b1101_1111; // This tests the case where byte ≤ 0b1101_1111 and matches the conditions",
          "    len(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len(0b1101_1111), Some(2));"
        ],
        "code": [
          "{",
          "    let byte: u8 = 0b1101_1111; // This tests the case where byte ≤ 0b1101_1111 and matches the conditions",
          "    len(byte);",
          "    assert_eq!(len(0b1101_1111), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = 0b1000_0000; // This tests the case where the byte makes byte & 0b1100_0000 == 0b1000_0000 true",
          "    len(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len(0b1000_0000), None);"
        ],
        "code": [
          "{",
          "    let byte: u8 = 0b1000_0000; // This tests the case where the byte makes byte & 0b1100_0000 == 0b1000_0000 true",
          "    len(byte);",
          "    assert_eq!(len(0b1000_0000), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte: u8 = 0b1101_1111; // This tests the highest valid UTF-8 leading byte for two bytes",
          "    len(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len(0b1101_1111), Some(2));"
        ],
        "code": [
          "{",
          "    let byte: u8 = 0b1101_1111; // This tests the highest valid UTF-8 leading byte for two bytes",
          "    len(byte);",
          "    assert_eq!(len(0b1101_1111), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]