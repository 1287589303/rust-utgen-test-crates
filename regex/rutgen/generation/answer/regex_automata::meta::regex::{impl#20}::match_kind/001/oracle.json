[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let updated_config = config.match_kind(MatchKind::All);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(updated_config.match_kind, Some(MatchKind::All));",
          "    assert_ne!(updated_config, config);",
          "    assert_eq!(updated_config.get_match_kind(), MatchKind::All);"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let updated_config = config.match_kind(MatchKind::All);",
          "    assert_eq!(updated_config.match_kind, Some(MatchKind::All));",
          "    assert_ne!(updated_config, config);",
          "    assert_eq!(updated_config.get_match_kind(), MatchKind::All);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new();",
          "    let updated_config = config.match_kind(MatchKind::LeftmostFirst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(updated_config.match_kind, Some(MatchKind::LeftmostFirst));",
          "    assert_eq!(updated_config.utf8_empty, config.utf8_empty);",
          "    assert_eq!(updated_config.auto_prefilter, config.auto_prefilter);",
          "    assert_eq!(updated_config.prefilter, config.prefilter);",
          "    assert_eq!(updated_config.which_captures, config.which_captures);",
          "    assert_eq!(updated_config.nfa_size_limit, config.nfa_size_limit);",
          "    assert_eq!(updated_config.onepass_size_limit, config.onepass_size_limit);",
          "    assert_eq!(updated_config.hybrid_cache_capacity, config.hybrid_cache_capacity);",
          "    assert_eq!(updated_config.dfa_size_limit, config.dfa_size_limit);",
          "    assert_eq!(updated_config.dfa_state_limit, config.dfa_state_limit);",
          "    assert_eq!(updated_config.byte_classes, config.byte_classes);",
          "    assert_eq!(updated_config.line_terminator, config.line_terminator);",
          "    assert_eq!(updated_config.hybrid, config.hybrid);",
          "    assert_eq!(updated_config.dfa, config.dfa);",
          "    assert_eq!(updated_config.onepass, config.onepass);",
          "    assert_eq!(updated_config.backtrack, config.backtrack);"
        ],
        "code": [
          "{",
          "    let config = Config::new();",
          "    let updated_config = config.match_kind(MatchKind::LeftmostFirst);",
          "    assert_eq!(updated_config.match_kind, Some(MatchKind::LeftmostFirst));",
          "    assert_eq!(updated_config.utf8_empty, config.utf8_empty);",
          "    assert_eq!(updated_config.auto_prefilter, config.auto_prefilter);",
          "    assert_eq!(updated_config.prefilter, config.prefilter);",
          "    assert_eq!(updated_config.which_captures, config.which_captures);",
          "    assert_eq!(updated_config.nfa_size_limit, config.nfa_size_limit);",
          "    assert_eq!(updated_config.onepass_size_limit, config.onepass_size_limit);",
          "    assert_eq!(updated_config.hybrid_cache_capacity, config.hybrid_cache_capacity);",
          "    assert_eq!(updated_config.dfa_size_limit, config.dfa_size_limit);",
          "    assert_eq!(updated_config.dfa_state_limit, config.dfa_state_limit);",
          "    assert_eq!(updated_config.byte_classes, config.byte_classes);",
          "    assert_eq!(updated_config.line_terminator, config.line_terminator);",
          "    assert_eq!(updated_config.hybrid, config.hybrid);",
          "    assert_eq!(updated_config.dfa, config.dfa);",
          "    assert_eq!(updated_config.onepass, config.onepass);",
          "    assert_eq!(updated_config.backtrack, config.backtrack);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]