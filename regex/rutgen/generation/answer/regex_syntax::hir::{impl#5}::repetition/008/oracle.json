[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expression = Hir::literal(Box::new(b\"a\".to_vec()));",
          "    let properties = Properties::literal(&sub_expression.kind.as_literal().unwrap());",
          "    ",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(sub_expression),",
          "    };",
          "",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Empty);",
          "    assert_eq!(result.props, Properties::empty());"
        ],
        "code": [
          "{",
          "    let sub_expression = Hir::literal(Box::new(b\"a\".to_vec()));",
          "    let properties = Properties::literal(&sub_expression.kind.as_literal().unwrap());",
          "    ",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(sub_expression),",
          "    };",
          "",
          "    let result = Hir::repetition(rep);",
          "    assert_eq!(result.kind, HirKind::Empty);",
          "    assert_eq!(result.props, Properties::empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expression = Hir::literal(Box::new(b\"b\".to_vec()));",
          "    let properties = Properties::literal(&sub_expression.kind.as_literal().unwrap());",
          "",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(0),",
          "        greedy: false,",
          "        sub: Box::new(sub_expression),",
          "    };",
          "",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Empty);",
          "    assert_eq!(result.props, Properties::empty());",
          "    assert_eq!(result.props.maximum_len(), None);",
          "    assert_eq!(result.props.minimum_len(), None);"
        ],
        "code": [
          "{",
          "    let sub_expression = Hir::literal(Box::new(b\"b\".to_vec()));",
          "    let properties = Properties::literal(&sub_expression.kind.as_literal().unwrap());",
          "",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(0),",
          "        greedy: false,",
          "        sub: Box::new(sub_expression),",
          "    };",
          "",
          "    let result = Hir::repetition(rep);",
          "    assert_eq!(result.kind, HirKind::Empty);",
          "    assert_eq!(result.props, Properties::empty());",
          "    assert_eq!(result.props.maximum_len(), None);",
          "    assert_eq!(result.props.minimum_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub_expression = Hir::class(Class::new(vec!['c' as u32]));",
          "    ",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(sub_expression),",
          "    };",
          "",
          "    let result = Hir::repetition(rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Repetition(rep));",
          "    assert!(result.props.maximum_len().is_none());",
          "    assert_eq!(result.props.minimum_len(), Some(0));",
          "    assert_eq!(result.props.look_set().len(), 0);",
          "    assert_eq!(result.props.static_explicit_captures_len, None);",
          "    assert!(matches!(result.kind, HirKind::Repetition(_)));",
          "    assert!(result.props.is_empty());"
        ],
        "code": [
          "{",
          "    let sub_expression = Hir::class(Class::new(vec!['c' as u32]));",
          "    ",
          "    let rep = Repetition {",
          "        min: 1,",
          "        max: Some(0),",
          "        greedy: true,",
          "        sub: Box::new(sub_expression),",
          "    };",
          "",
          "    let result = Hir::repetition(rep);",
          "    assert_eq!(result.kind, HirKind::Repetition(rep));",
          "    assert!(result.props.maximum_len().is_none());",
          "    assert_eq!(result.props.minimum_len(), Some(0));",
          "    assert_eq!(result.props.look_set().len(), 0);",
          "    assert_eq!(result.props.static_explicit_captures_len, None);",
          "    assert!(matches!(result.kind, HirKind::Repetition(_)));",
          "    assert!(result.props.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]