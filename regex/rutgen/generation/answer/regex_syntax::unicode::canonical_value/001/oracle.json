[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"Letter\", \"L\"),",
          "        (\"Digit\", \"D\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"Letter\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(canonical_value(vals, \"Letter\"), Some(\"L\"));",
          "    assert_eq!(canonical_value(vals, \"Digit\"), Some(\"D\"));",
          "    assert_eq!(canonical_value(vals, \"Whitespace\"), Some(\"W\"));",
          "    assert_eq!(canonical_value(vals, \"Nonexistent\"), None);"
        ],
        "code": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"Letter\", \"L\"),",
          "        (\"Digit\", \"D\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"Letter\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "    assert_eq!(canonical_value(vals, \"Letter\"), Some(\"L\"));",
          "    assert_eq!(canonical_value(vals, \"Digit\"), Some(\"D\"));",
          "    assert_eq!(canonical_value(vals, \"Whitespace\"), Some(\"W\"));",
          "    assert_eq!(canonical_value(vals, \"Nonexistent\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"Letter\", \"L\"),",
          "        (\"Digit\", \"D\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"Digit\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(canonical_value(vals, \"Letter\"), Some(\"L\"));",
          "    assert_eq!(canonical_value(vals, \"Digit\"), Some(\"D\"));",
          "    assert_eq!(canonical_value(vals, \"Whitespace\"), Some(\"W\"));",
          "    assert_eq!(canonical_value(vals, \"Nonexistent\"), None);",
          "    assert_eq!(canonical_value(vals, \"\"), None);",
          "    assert_eq!(canonical_value(vals, \" \"), None);"
        ],
        "code": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"Letter\", \"L\"),",
          "        (\"Digit\", \"D\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"Digit\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "    assert_eq!(canonical_value(vals, \"Letter\"), Some(\"L\"));",
          "    assert_eq!(canonical_value(vals, \"Digit\"), Some(\"D\"));",
          "    assert_eq!(canonical_value(vals, \"Whitespace\"), Some(\"W\"));",
          "    assert_eq!(canonical_value(vals, \"Nonexistent\"), None);",
          "    assert_eq!(canonical_value(vals, \"\"), None);",
          "    assert_eq!(canonical_value(vals, \" \"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"Letter\", \"L\"),",
          "        (\"Digit\", \"D\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"Punctuation\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(canonical_value(vals, \"Letter\"), Some(\"L\"));",
          "    assert_eq!(canonical_value(vals, \"Digit\"), Some(\"D\"));",
          "    assert_eq!(canonical_value(vals, \"Whitespace\"), Some(\"W\"));",
          "    assert_eq!(canonical_value(vals, \"Punctuation\"), None);",
          "    assert_eq!(canonical_value(vals, \"\"), None);",
          "    assert_eq!(canonical_value(vals, \" \"), None);",
          "    assert_eq!(canonical_value(vals, \"Digit \"), None);"
        ],
        "code": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"Letter\", \"L\"),",
          "        (\"Digit\", \"D\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"Punctuation\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "    assert_eq!(canonical_value(vals, \"Letter\"), Some(\"L\"));",
          "    assert_eq!(canonical_value(vals, \"Digit\"), Some(\"D\"));",
          "    assert_eq!(canonical_value(vals, \"Whitespace\"), Some(\"W\"));",
          "    assert_eq!(canonical_value(vals, \"Punctuation\"), None);",
          "    assert_eq!(canonical_value(vals, \"\"), None);",
          "    assert_eq!(canonical_value(vals, \" \"), None);",
          "    assert_eq!(canonical_value(vals, \"Digit \"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"Letter\", \"L\"),",
          "        (\"Digit\", \"D\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(canonical_value(vals, \"\"), None);"
        ],
        "code": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"Letter\", \"L\"),",
          "        (\"Digit\", \"D\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "    assert_eq!(canonical_value(vals, \"\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"\", \"Empty\"),",
          "        (\"Char\", \"C\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"Char\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "}"
        ],
        "oracle": [
          "    _result.unwrap() == \"C\"",
          "    _result.is_some()",
          "    let normalized_value_empty = \"\";",
          "    let _result_empty = canonical_value(vals, normalized_value_empty);",
          "    _result_empty.unwrap() == \"Empty\"",
          "    let normalized_value_whitespace = \"Whitespace\";",
          "    let _result_whitespace = canonical_value(vals, normalized_value_whitespace);",
          "    _result_whitespace.unwrap() == \"W\"",
          "    let normalized_value_nonexistent = \"Nonexistent\";",
          "    let _result_nonexistent = canonical_value(vals, normalized_value_nonexistent);",
          "    _result_nonexistent.is_none()"
        ],
        "code": [
          "{",
          "    let vals: PropertyValues = &[",
          "        (\"\", \"Empty\"),",
          "        (\"Char\", \"C\"),",
          "        (\"Whitespace\", \"W\"),",
          "    ];",
          "    let normalized_value = \"Char\";",
          "    let _result = canonical_value(vals, normalized_value);",
          "    _result.unwrap() == \"C\"",
          "    _result.is_some()",
          "    let normalized_value_empty = \"\";",
          "    let _result_empty = canonical_value(vals, normalized_value_empty);",
          "    _result_empty.unwrap() == \"Empty\"",
          "    let normalized_value_whitespace = \"Whitespace\";",
          "    let _result_whitespace = canonical_value(vals, normalized_value_whitespace);",
          "    _result_whitespace.unwrap() == \"W\"",
          "    let normalized_value_nonexistent = \"Nonexistent\";",
          "    let _result_nonexistent = canonical_value(vals, normalized_value_nonexistent);",
          "    _result_nonexistent.is_none()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]