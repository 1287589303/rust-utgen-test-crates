[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::Start);",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::Start);",
          "    let result = lookset.contains_anchor();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::End);",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);",
          "    lookset.set_insert(Look::Start);",
          "    let result_haystack = lookset.contains_anchor_haystack();",
          "    assert!(result_haystack == true);",
          "    lookset.set_remove(Look::End);",
          "    let result_line = lookset.contains_anchor_line();",
          "    assert!(result_line == true);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::End);",
          "    let result = lookset.contains_anchor();",
          "    assert!(result == true);",
          "    lookset.set_insert(Look::Start);",
          "    let result_haystack = lookset.contains_anchor_haystack();",
          "    assert!(result_haystack == true);",
          "    lookset.set_remove(Look::End);",
          "    let result_line = lookset.contains_anchor_line();",
          "    assert!(result_line == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::Start);",
          "    lookset.set_insert(Look::End);",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    assert!(lookset.contains_anchor_haystack());",
          "    assert!(!lookset.contains_anchor_line());",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::Start);",
          "    lookset.set_insert(Look::End);",
          "    let result = lookset.contains_anchor();",
          "    assert!(lookset.contains_anchor_haystack());",
          "    assert!(!lookset.contains_anchor_line());",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::StartLF);",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::StartLF);",
          "    let result = lookset.contains_anchor();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::EndLF);",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::EndLF);",
          "    let result = lookset.contains_anchor();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::StartLF);",
          "    lookset.set_insert(Look::EndLF);",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    assert!(lookset.contains_anchor_haystack());",
          "    assert!(lookset.contains_anchor_line());",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::StartLF);",
          "    lookset.set_insert(Look::EndLF);",
          "    let result = lookset.contains_anchor();",
          "    assert!(lookset.contains_anchor_haystack());",
          "    assert!(lookset.contains_anchor_line());",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::Start);",
          "    lookset.set_insert(Look::EndLF);",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::empty();",
          "    lookset.set_insert(Look::Start);",
          "    lookset.set_insert(Look::EndLF);",
          "    let result = lookset.contains_anchor();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet::empty();",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    assert!(lookset.contains_anchor_haystack());",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet::empty();",
          "    let result = lookset.contains_anchor();",
          "    assert!(lookset.contains_anchor_haystack());",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut lookset = LookSet::full();",
          "    let result = lookset.contains_anchor();",
          "}"
        ],
        "oracle": [
          "    lookset.insert(Look::Start);",
          "    lookset.insert(Look::End);",
          "    lookset.insert(Look::StartLF);",
          "    lookset.insert(Look::EndLF);",
          "    lookset.insert(Look::StartCRLF);",
          "    lookset.insert(Look::EndCRLF);",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut lookset = LookSet::full();",
          "    let result = lookset.contains_anchor();",
          "    lookset.insert(Look::Start);",
          "    lookset.insert(Look::End);",
          "    lookset.insert(Look::StartLF);",
          "    lookset.insert(Look::EndLF);",
          "    lookset.insert(Look::StartCRLF);",
          "    lookset.insert(Look::EndCRLF);",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]