[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump();",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 1);",
          "    assert_eq!(parser.char(), 'a');",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.peek(), None);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump();",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 1);",
          "    assert_eq!(parser.char(), 'a');",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.peek(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(1);",
          "    let result = parser.bump();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 2);",
          "    assert_eq!(parser.char(), 'c');",
          "    assert_eq!(parser.is_done(), false);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(1);",
          "    let result = parser.bump();",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 2);",
          "    assert_eq!(parser.char(), 'c');",
          "    assert_eq!(parser.is_done(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"こんにちは\"; // \"Hello\" in Japanese",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char(), 'こ');",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.pos(), 3);",
          "    assert_eq!(parser.char(), 'に');",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.pos(), 6);",
          "    assert_eq!(parser.char(), 'ち');",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.pos(), 9);",
          "    assert_eq!(parser.char(), 'ハ');",
          "    assert!(!parser.bump());",
          "    assert_eq!(parser.pos(), 9);",
          "    assert!(parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"こんにちは\"; // \"Hello\" in Japanese",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(0);",
          "    let result = parser.bump();",
          "    assert_eq!(parser.pos(), 0);",
          "    assert_eq!(parser.char(), 'こ');",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.pos(), 3);",
          "    assert_eq!(parser.char(), 'に');",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.pos(), 6);",
          "    assert_eq!(parser.char(), 'ち');",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.pos(), 9);",
          "    assert_eq!(parser.char(), 'ハ');",
          "    assert!(!parser.bump());",
          "    assert_eq!(parser.pos(), 9);",
          "    assert!(parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"😊🚀🌍\"; // Emojis",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(2); // Pointing to the third character (🌍)",
          "    let result = parser.bump();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 4);",
          "    assert_eq!(parser.char(), '🌍');"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"😊🚀🌍\"; // Emojis",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(2); // Pointing to the third character (🌍)",
          "    let result = parser.bump();",
          "    assert_eq!(result, true);",
          "    assert_eq!(parser.pos(), 4);",
          "    assert_eq!(parser.char(), '🌍');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abcde\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(4); // Position at the last character 'e'",
          "    let result = parser.bump();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abcde\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(4);",
          "    assert_eq!(parser.bump(), false);",
          "    assert_eq!(parser.pos(), 4);",
          "    assert_eq!(parser.char.get(), Some('e'));",
          "    assert_eq!(parser.is_done(), true);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abcde\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(4); // Position at the last character 'e'",
          "    let result = parser.bump();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abcde\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(4);",
          "    assert_eq!(parser.bump(), false);",
          "    assert_eq!(parser.pos(), 4);",
          "    assert_eq!(parser.char.get(), Some('e'));",
          "    assert_eq!(parser.is_done(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"test\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(3); // Last valid position",
          "    let result = parser.bump(); // Result should still be true before trying to bump past end",
          "    let final_result = parser.bump(); // Next call should return false",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos(), 3); // Initial position is 3",
          "    assert!(result); // First bump should return true",
          "    assert_eq!(parser.pos(), 3 + \"test\"[3..].len_utf8()); // Position after first bump",
          "    assert!(parser.char().is_some()); // Character should be Some after first bump",
          "    assert!(!final_result); // Second bump should return false",
          "    assert_eq!(parser.pos(), 4); // Final position should be 4 (after second bump)"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"test\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.pos.set(3); // Last valid position",
          "    let result = parser.bump(); // Result should still be true before trying to bump past end",
          "    let final_result = parser.bump(); // Next call should return false",
          "    assert_eq!(parser.pos(), 3); // Initial position is 3",
          "    assert!(result); // First bump should return true",
          "    assert_eq!(parser.pos(), 3 + \"test\"[3..].len_utf8()); // Position after first bump",
          "    assert!(parser.char().is_some()); // Character should be Some after first bump",
          "    assert!(!final_result); // Second bump should return false",
          "    assert_eq!(parser.pos(), 4); // Final position should be 4 (after second bump)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]