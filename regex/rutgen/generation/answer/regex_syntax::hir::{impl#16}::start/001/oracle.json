[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('a', 'z');",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, 'a');"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('a', 'z');",
          "    let start = range.start();",
          "    assert_eq!(start, 'a');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('a', 'a');",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, 'a');"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('a', 'a');",
          "    let start = range.start();",
          "    assert_eq!(start, 'a');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{0001}');",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, '\\u{0000}');"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{0001}');",
          "    let start = range.start();",
          "    assert_eq!(start, '\\u{0000}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{FFFE}', '\\u{FFFF}');",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, '\\u{FFFE}');"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{FFFE}', '\\u{FFFF}');",
          "    let start = range.start();",
          "    assert_eq!(start, '\\u{FFFE}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFF}');",
          "    let start = range.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start, '\\u{0000}');"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFF}');",
          "    let start = range.start();",
          "    assert_eq!(start, '\\u{0000}');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]