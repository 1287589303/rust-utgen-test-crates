[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), haystack.len());",
          "    assert!(!m.is_empty());",
          "    assert_eq!(m.len(), haystack.len());",
          "    assert_eq!(m.range(), 0..haystack.len());",
          "    assert_eq!(m.as_bytes(), b\"hello world\");",
          "    assert_eq!(m.into(), 0..haystack.len());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), haystack.len());",
          "    assert!(!m.is_empty());",
          "    assert_eq!(m.len(), haystack.len());",
          "    assert_eq!(m.range(), 0..haystack.len());",
          "    assert_eq!(m.as_bytes(), b\"hello world\");",
          "    assert_eq!(m.into(), 0..haystack.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 5;",
          "    let end = 5;",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.start, 5);",
          "    assert_eq!(range.end, 5);",
          "    assert_eq!(range, 5..5);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 5;",
          "    let end = 5;",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "    assert_eq!(range.start, 5);",
          "    assert_eq!(range.end, 5);",
          "    assert_eq!(range, 5..5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 0;",
          "    let end = 5;",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.start, 0);",
          "    assert_eq!(range.end, 5);",
          "    assert_eq!(range, core::ops::Range { start: 0, end: 5 });"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 0;",
          "    let end = 5;",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "    assert_eq!(range.start, 0);",
          "    assert_eq!(range.end, 5);",
          "    assert_eq!(range, core::ops::Range { start: 0, end: 5 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), haystack.len());",
          "    assert!(!m.is_empty());",
          "    assert_eq!(m.len(), haystack.len());",
          "    assert_eq!(m.range(), 0..haystack.len());",
          "    assert_eq!(m.as_bytes(), b\"hello world\");"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 0;",
          "    let end = haystack.len();",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(m.end(), haystack.len());",
          "    assert!(!m.is_empty());",
          "    assert_eq!(m.len(), haystack.len());",
          "    assert_eq!(m.range(), 0..haystack.len());",
          "    assert_eq!(m.as_bytes(), b\"hello world\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 6;",
          "    let end = 11;",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), start);",
          "    assert_eq!(m.end(), end);",
          "    assert!(m.is_empty() == false);",
          "    assert_eq!(m.len(), end - start);",
          "    assert_eq!(m.range(), start..end);",
          "    assert_eq!(m.as_bytes(), &haystack[start..end]);"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"hello world\";",
          "    let start = 6;",
          "    let end = 11;",
          "    let m = Match::new(haystack, start, end);",
          "    let range: core::ops::Range<usize> = m.into();",
          "    assert_eq!(m.start(), start);",
          "    assert_eq!(m.end(), end);",
          "    assert!(m.is_empty() == false);",
          "    assert_eq!(m.len(), end - start);",
          "    assert_eq!(m.range(), start..end);",
          "    assert_eq!(m.as_bytes(), &haystack[start..end]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]