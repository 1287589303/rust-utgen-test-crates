[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(DEAD);",
          "    let special = Special::new();",
          "    special.is_dead_state(state_id);",
          "}"
        ],
        "oracle": [
          "    assert!(special.is_dead_state(StateID(DEAD)));"
        ],
        "code": [
          "{",
          "    let state_id = StateID(DEAD);",
          "    let special = Special::new();",
          "    special.is_dead_state(state_id);",
          "    assert!(special.is_dead_state(StateID(DEAD)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(DEAD - 1);",
          "    let special = Special::new();",
          "    special.is_dead_state(state_id);",
          "}"
        ],
        "oracle": [
          "    assert!(special.is_dead_state(StateID(DEAD - 1)) == false);",
          "    assert!(special.is_dead_state(StateID(DEAD)) == true);",
          "    assert!(special.is_dead_state(StateID(DEAD + 1)) == false);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(DEAD - 1);",
          "    let special = Special::new();",
          "    special.is_dead_state(state_id);",
          "    assert!(special.is_dead_state(StateID(DEAD - 1)) == false);",
          "    assert!(special.is_dead_state(StateID(DEAD)) == true);",
          "    assert!(special.is_dead_state(StateID(DEAD + 1)) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(DEAD + 1);",
          "    let special = Special::new();",
          "    special.is_dead_state(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_dead_state(StateID(DEAD)), true);",
          "    assert_eq!(special.is_dead_state(StateID(DEAD - 1)), false);",
          "    assert_eq!(special.is_dead_state(StateID(DEAD + 2)), false);",
          "    assert_eq!(special.is_dead_state(StateID(0)), false);",
          "    assert_eq!(special.is_dead_state(StateID(1)), false);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(DEAD + 1);",
          "    let special = Special::new();",
          "    special.is_dead_state(state_id);",
          "    assert_eq!(special.is_dead_state(StateID(DEAD)), true);",
          "    assert_eq!(special.is_dead_state(StateID(DEAD - 1)), false);",
          "    assert_eq!(special.is_dead_state(StateID(DEAD + 2)), false);",
          "    assert_eq!(special.is_dead_state(StateID(0)), false);",
          "    assert_eq!(special.is_dead_state(StateID(1)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]