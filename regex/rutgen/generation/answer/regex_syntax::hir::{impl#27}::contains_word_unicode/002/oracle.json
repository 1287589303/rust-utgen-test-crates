[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    look_set.set_insert(Look::WordUnicodeNegate);",
          "    let result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    look_set.set_insert(Look::WordUnicodeNegate);",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordStartUnicode as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordStartUnicode as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "    assert_eq!(result, true);",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordEndUnicode as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordEndUnicode as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "    assert_eq!(result, true);",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordStartHalfUnicode as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(result, \"Expected contains_word_unicode to return true.\");",
          "    assert!(!look_set.contains(Look::WordUnicode), \"Expected Look::WordUnicode to be false.\");",
          "    assert!(look_set.contains(Look::WordUnicodeNegate), \"Expected Look::WordUnicodeNegate to be true.\");",
          "    assert!(look_set.contains(Look::WordStartHalfUnicode), \"Expected Look::WordStartHalfUnicode to be true.\");",
          "    assert!(!look_set.contains(Look::WordStartUnicode), \"Expected Look::WordStartUnicode to be false.\");",
          "    assert!(!look_set.contains(Look::WordEndUnicode), \"Expected Look::WordEndUnicode to be false.\");",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode), \"Expected Look::WordEndHalfUnicode to be false.\");"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordStartHalfUnicode as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(result, \"Expected contains_word_unicode to return true.\");",
          "    assert!(!look_set.contains(Look::WordUnicode), \"Expected Look::WordUnicode to be false.\");",
          "    assert!(look_set.contains(Look::WordUnicodeNegate), \"Expected Look::WordUnicodeNegate to be true.\");",
          "    assert!(look_set.contains(Look::WordStartHalfUnicode), \"Expected Look::WordStartHalfUnicode to be true.\");",
          "    assert!(!look_set.contains(Look::WordStartUnicode), \"Expected Look::WordStartUnicode to be false.\");",
          "    assert!(!look_set.contains(Look::WordEndUnicode), \"Expected Look::WordEndUnicode to be false.\");",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode), \"Expected Look::WordEndHalfUnicode to be false.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordEndHalfUnicode as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordEndHalfUnicode as u32 };",
          "    let result = look_set.contains_word_unicode();",
          "    assert_eq!(result, true);",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]