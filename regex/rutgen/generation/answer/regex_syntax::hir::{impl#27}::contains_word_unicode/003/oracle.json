[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    assert!(look_set.contains_word_unicode());",
          "}"
        ],
        "oracle": [
          "    look_set.set_insert(Look::WordStartUnicode); assert!(look_set.contains(Look::WordStartUnicode)); assert!(!look_set.contains(Look::WordUnicode)); assert!(!look_set.contains(Look::WordUnicodeNegate)); assert!(look_set.contains_word_unicode());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    assert!(look_set.contains_word_unicode());",
          "    look_set.set_insert(Look::WordStartUnicode); assert!(look_set.contains(Look::WordStartUnicode)); assert!(!look_set.contains(Look::WordUnicode)); assert!(!look_set.contains(Look::WordUnicodeNegate)); assert!(look_set.contains_word_unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    look_set.set_remove(Look::WordUnicode);",
          "    look_set.set_remove(Look::WordUnicodeNegate);",
          "    look_set.set_remove(Look::WordEndUnicode);",
          "    look_set.set_remove(Look::WordStartHalfUnicode);",
          "    look_set.set_remove(Look::WordEndHalfUnicode);",
          "    assert!(look_set.contains_word_unicode());",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "    assert!(look_set.contains_word_unicode());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    look_set.set_remove(Look::WordUnicode);",
          "    look_set.set_remove(Look::WordUnicodeNegate);",
          "    look_set.set_remove(Look::WordEndUnicode);",
          "    look_set.set_remove(Look::WordStartHalfUnicode);",
          "    look_set.set_remove(Look::WordEndHalfUnicode);",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "    assert!(look_set.contains_word_unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]