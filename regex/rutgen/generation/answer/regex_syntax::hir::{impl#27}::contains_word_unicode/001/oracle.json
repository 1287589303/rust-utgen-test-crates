[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0x00000100 }; // Only WordUnicode",
          "    look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_unicode(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0x00000100 }; // Only WordUnicode",
          "    look_set.contains_word_unicode();",
          "    assert_eq!(look_set.contains_word_unicode(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0x00000200 }; // Only WordUnicodeNegate",
          "    look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0x00000200 }; // Only WordUnicodeNegate",
          "    look_set.contains_word_unicode();",
          "    assert!(look_set.contains_word_unicode());",
          "    assert!(look_set.contains(Look::WordUnicode));",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(!look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0x00000400 }; // Only WordStartUnicode",
          "    look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode()); // Should return true as it contains Look::WordStartUnicode",
          "    let look_set = LookSet { bits: 0x00000000 }; // No flags set",
          "    assert!(!look_set.contains_word_unicode()); // Should return false",
          "    let look_set = LookSet { bits: 0x00000080 }; // Contains Look::WordUnicodeNegate",
          "    assert!(look_set.contains_word_unicode()); // Should return true",
          "    let look_set = LookSet { bits: 0x00001000 }; // Contains Look::WordEndUnicode",
          "    assert!(look_set.contains_word_unicode()); // Should return true",
          "    let look_set = LookSet { bits: 0x00000400 | 0x00000080 | 0x00001000 }; // Contains multiple flags",
          "    assert!(look_set.contains_word_unicode()); // Should return true",
          "    let look_set = LookSet { bits: 0x00000800 }; // Only WordStartHalfUnicode",
          "    assert!(look_set.contains_word_unicode()); // Should return true"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0x00000400 }; // Only WordStartUnicode",
          "    look_set.contains_word_unicode();",
          "    assert!(look_set.contains_word_unicode()); // Should return true as it contains Look::WordStartUnicode",
          "    let look_set = LookSet { bits: 0x00000000 }; // No flags set",
          "    assert!(!look_set.contains_word_unicode()); // Should return false",
          "    let look_set = LookSet { bits: 0x00000080 }; // Contains Look::WordUnicodeNegate",
          "    assert!(look_set.contains_word_unicode()); // Should return true",
          "    let look_set = LookSet { bits: 0x00001000 }; // Contains Look::WordEndUnicode",
          "    assert!(look_set.contains_word_unicode()); // Should return true",
          "    let look_set = LookSet { bits: 0x00000400 | 0x00000080 | 0x00001000 }; // Contains multiple flags",
          "    assert!(look_set.contains_word_unicode()); // Should return true",
          "    let look_set = LookSet { bits: 0x00000800 }; // Only WordStartHalfUnicode",
          "    assert!(look_set.contains_word_unicode()); // Should return true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0x00000800 }; // Only WordEndUnicode",
          "    look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode() == true);",
          "    let look_set = LookSet { bits: 0x00000000 }; // No assertions",
          "    assert!(look_set.contains_word_unicode() == false);",
          "    let look_set = LookSet { bits: 0x00000800 | 0x00000400 }; // WordEndUnicode and WordUnicodeNegate",
          "    assert!(look_set.contains_word_unicode() == true);",
          "    let look_set = LookSet { bits: 0x00001000 }; // Only WordStartUnicode",
          "    assert!(look_set.contains_word_unicode() == true);",
          "    let look_set = LookSet { bits: 0x00002000 }; // Only WordStartHalfUnicode",
          "    assert!(look_set.contains_word_unicode() == true);",
          "    let look_set = LookSet { bits: 0x00003000 }; // WordStartUnicode and WordStartHalfUnicode",
          "    assert!(look_set.contains_word_unicode() == true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0x00000800 }; // Only WordEndUnicode",
          "    look_set.contains_word_unicode();",
          "    assert!(look_set.contains_word_unicode() == true);",
          "    let look_set = LookSet { bits: 0x00000000 }; // No assertions",
          "    assert!(look_set.contains_word_unicode() == false);",
          "    let look_set = LookSet { bits: 0x00000800 | 0x00000400 }; // WordEndUnicode and WordUnicodeNegate",
          "    assert!(look_set.contains_word_unicode() == true);",
          "    let look_set = LookSet { bits: 0x00001000 }; // Only WordStartUnicode",
          "    assert!(look_set.contains_word_unicode() == true);",
          "    let look_set = LookSet { bits: 0x00002000 }; // Only WordStartHalfUnicode",
          "    assert!(look_set.contains_word_unicode() == true);",
          "    let look_set = LookSet { bits: 0x00003000 }; // WordStartUnicode and WordStartHalfUnicode",
          "    assert!(look_set.contains_word_unicode() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0x00001000 }; // Only WordStartHalfUnicode",
          "    look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode() == true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0x00001000 }; // Only WordStartHalfUnicode",
          "    look_set.contains_word_unicode();",
          "    assert!(look_set.contains_word_unicode() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0x00002000 }; // Only WordEndHalfUnicode",
          "    look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode() == (look_set.contains(Look::WordUnicode) || look_set.contains(Look::WordUnicodeNegate) || look_set.contains(Look::WordStartUnicode) || look_set.contains(Look::WordEndUnicode) || look_set.contains(Look::WordStartHalfUnicode) || look_set.contains(Look::WordEndHalfUnicode)));"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0x00002000 }; // Only WordEndHalfUnicode",
          "    look_set.contains_word_unicode();",
          "    assert!(look_set.contains_word_unicode() == (look_set.contains(Look::WordUnicode) || look_set.contains(Look::WordUnicodeNegate) || look_set.contains(Look::WordStartUnicode) || look_set.contains(Look::WordEndUnicode) || look_set.contains(Look::WordStartHalfUnicode) || look_set.contains(Look::WordEndHalfUnicode)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0x00003FF }; // All unicode-related assertions",
          "    look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains_word_unicode() == true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0x00003FF }; // All unicode-related assertions",
          "    look_set.contains_word_unicode();",
          "    assert!(look_set.contains_word_unicode() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]