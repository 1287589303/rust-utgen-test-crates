[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'a' };",
          "    let primitive = Primitive::Literal(literal);",
          "    let result = primitive.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &Span { start: Position(0), end: Position(5) });"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'a' };",
          "    let primitive = Primitive::Literal(literal);",
          "    let result = primitive.span();",
          "    assert_eq!(result, &Span { start: Position(0), end: Position(5) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(3), end: Position(3) };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'b' };",
          "    let primitive = Primitive::Literal(literal);",
          "    let result = primitive.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(3), end: Position(3) };",
          "    let literal = Literal { span, kind: LiteralKind::SomeKind, c: 'b' };",
          "    let primitive = Primitive::Literal(literal);",
          "    let result = primitive.span();",
          "    assert_eq!(result, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]