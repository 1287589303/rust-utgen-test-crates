[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\B\",",
          "    };",
          "    ",
          "    let result = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_pos, end_pos),",
          "    kind: AssertionKind::NotWordBoundary,",
          "    })));"
        ],
        "code": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\B\",",
          "    };",
          "    ",
          "    let result = parser_i.parse_escape();",
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_pos, end_pos),",
          "    kind: AssertionKind::NotWordBoundary,",
          "    })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\P\",",
          "    };",
          "",
          "    let result = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_pos, end_pos),",
          "    kind: AssertionKind::NotWordBoundary,",
          "    })));"
        ],
        "code": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\P\",",
          "    };",
          "",
          "    let result = parser_i.parse_escape();",
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_pos, end_pos),",
          "    kind: AssertionKind::NotWordBoundary,",
          "    })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\w\",",
          "    };",
          "",
          "    let result = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_pos, end_pos),",
          "    kind: AssertionKind::NotWordBoundary,",
          "    })));"
        ],
        "code": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\w\",",
          "    };",
          "",
          "    let result = parser_i.parse_escape();",
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_pos, end_pos),",
          "    kind: AssertionKind::NotWordBoundary,",
          "    })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\d\",",
          "    };",
          "",
          "    let result = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_pos, end_pos),",
          "    kind: AssertionKind::NotWordBoundary,",
          "    })));"
        ],
        "code": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\d\",",
          "    };",
          "",
          "    let result = parser_i.parse_escape();",
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_pos, end_pos),",
          "    kind: AssertionKind::NotWordBoundary,",
          "    })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\x\",",
          "    };",
          "",
          "    let result = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion { span: Span::new(start_pos, end_pos), kind: AssertionKind::NotWordBoundary })));"
        ],
        "code": [
          "{",
          "    let start_pos = Position { offset: 0, line: 1, column: 1 };",
          "    let end_pos = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    let parser = Parser {",
          "        pos: Cell::new(start_pos),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: false,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern: \"\\\\x\",",
          "    };",
          "",
          "    let result = parser_i.parse_escape();",
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion { span: Span::new(start_pos, end_pos), kind: AssertionKind::NotWordBoundary })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]