[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let end_position = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    struct DummyParser {",
          "        pattern: String,",
          "        pos: Cell<Position>,",
          "    }",
          "    ",
          "    impl Borrow<Parser> for DummyParser {",
          "        fn borrow(&self) -> &Parser {",
          "            &Parser {",
          "                pos: Cell::new(start_position),",
          "                capture_index: Cell::new(0),",
          "                nest_limit: 10,",
          "                octal: true,",
          "                initial_ignore_whitespace: false,",
          "                empty_min_range: false,",
          "                ignore_whitespace: Cell::new(false),",
          "                comments: RefCell::new(vec![]),",
          "                stack_group: RefCell::new(vec![]),",
          "                stack_class: RefCell::new(vec![]),",
          "                capture_names: RefCell::new(vec![]),",
          "                scratch: RefCell::new(String::new()),",
          "            }",
          "        }",
          "    }",
          "",
          "    let parser_instance = DummyParser {",
          "        pattern: String::from(\"\\\\>\"),",
          "        pos: Cell::new(start_position),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "        parser: &parser_instance,",
          "        pattern: &parser_instance.pattern,",
          "    };",
          "",
          "    let _result = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_position, end_position),",
          "    kind: AssertionKind::WordBoundaryEndAngle,",
          "    })));"
        ],
        "code": [
          "{",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let end_position = Position { offset: 2, line: 1, column: 3 };",
          "    ",
          "    struct DummyParser {",
          "        pattern: String,",
          "        pos: Cell<Position>,",
          "    }",
          "    ",
          "    impl Borrow<Parser> for DummyParser {",
          "        fn borrow(&self) -> &Parser {",
          "            &Parser {",
          "                pos: Cell::new(start_position),",
          "                capture_index: Cell::new(0),",
          "                nest_limit: 10,",
          "                octal: true,",
          "                initial_ignore_whitespace: false,",
          "                empty_min_range: false,",
          "                ignore_whitespace: Cell::new(false),",
          "                comments: RefCell::new(vec![]),",
          "                stack_group: RefCell::new(vec![]),",
          "                stack_class: RefCell::new(vec![]),",
          "                capture_names: RefCell::new(vec![]),",
          "                scratch: RefCell::new(String::new()),",
          "            }",
          "        }",
          "    }",
          "",
          "    let parser_instance = DummyParser {",
          "        pattern: String::from(\"\\\\>\"),",
          "        pos: Cell::new(start_position),",
          "    };",
          "    ",
          "    let parser_i = ParserI {",
          "        parser: &parser_instance,",
          "        pattern: &parser_instance.pattern,",
          "    };",
          "",
          "    let _result = parser_i.parse_escape();",
          "    assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion {",
          "    span: Span::new(start_position, end_position),",
          "    kind: AssertionKind::WordBoundaryEndAngle,",
          "    })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]