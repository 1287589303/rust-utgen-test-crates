[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\d\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_i.parse_escape(), Ok(Primitive::Perl(ast::ClassPerl { span: any_span, kind: ast::ClassPerlKind::Digit, negated: false })));",
          "    parser.pos.set(Position { offset: 0, line: 1, column: 1 });",
          "    assert!(parser_i.pattern == r\"\\d\");",
          "    parser.bump();",
          "    assert!(parser_i.char() == 'd');",
          "    assert_eq!(parser_i.char(), 'd');",
          "    assert!(parser_i.parser().octal == true);",
          "    assert!(parser_i.stack_group.borrow().is_empty());",
          "    assert!(parser_i.d.is_air(1));",
          "    assert!(parser_i.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\d\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "    assert_eq!(parser_i.parse_escape(), Ok(Primitive::Perl(ast::ClassPerl { span: any_span, kind: ast::ClassPerlKind::Digit, negated: false })));",
          "    parser.pos.set(Position { offset: 0, line: 1, column: 1 });",
          "    assert!(parser_i.pattern == r\"\\d\");",
          "    parser.bump();",
          "    assert!(parser_i.char() == 'd');",
          "    assert_eq!(parser_i.char(), 'd');",
          "    assert!(parser_i.parser().octal == true);",
          "    assert!(parser_i.stack_group.borrow().is_empty());",
          "    assert!(parser_i.d.is_air(1));",
          "    assert!(parser_i.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\s\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_i.parse_escape(), Ok(Primitive::Perl(ast::ClassPerl { span: Span::new(start_position, parser_i.pos()), kind: ast::ClassPerlKind::Space, negated: false })));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\s\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "    assert_eq!(parser_i.parse_escape(), Ok(Primitive::Perl(ast::ClassPerl { span: Span::new(start_position, parser_i.pos()), kind: ast::ClassPerlKind::Space, negated: false })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\w\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    let pattern = r\"\\w\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "    pos: Cell::new(start_position),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 0,",
          "    octal: true,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "    parser: &parser,",
          "    pattern,",
          "    };",
          "    let result = parser_i.parse_escape();",
          "    assert!(result.is_ok());",
          "    if let Ok(Primitive::Perl(cls)) = result {",
          "    assert!(cls.kind == ClassPerlKind::Word);",
          "    assert!(!cls.negated);",
          "    }"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\w\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "    let pattern = r\"\\w\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "    pos: Cell::new(start_position),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 0,",
          "    octal: true,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "    parser: &parser,",
          "    pattern,",
          "    };",
          "    let result = parser_i.parse_escape();",
          "    assert!(result.is_ok());",
          "    if let Ok(Primitive::Perl(cls)) = result {",
          "    assert!(cls.kind == ClassPerlKind::Word);",
          "    assert!(!cls.negated);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\D\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser_i.parse_escape(), Ok(Primitive::Perl(ast::ClassPerl { span: any_span, kind: ast::ClassPerlKind::Digit, negated: true })));"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\D\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "    assert_eq!(parser_i.parse_escape(), Ok(Primitive::Perl(ast::ClassPerl { span: any_span, kind: ast::ClassPerlKind::Digit, negated: true })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = r\"\\S\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*left_val, *right_val);",
          "    assert!(self.bump());",
          "    assert!(!('0'..='7').contains(&c));",
          "    assert!(!('8'..='9').contains(&c));",
          "    assert!('d' == c);",
          "    assert!(matches!(c, 'D' | 'W' | 'w' | 's' | 'S' | 'd'));",
          "    let result = parser_i.parse_escape();",
          "    assert!(result.is_ok());",
          "    match result {",
          "    Ok(Primitive::Perl(cls)) => {}",
          "    _ => panic!(\"Expected Ok(Primitive::Perl(cls)), but got: {:?}\", result),",
          "    }"
        ],
        "code": [
          "{",
          "    let pattern = r\"\\S\";",
          "    let start_position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = Parser {",
          "        pos: Cell::new(start_position),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 0,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "    let _ = parser_i.parse_escape();",
          "    assert_eq!(*left_val, *right_val);",
          "    assert!(self.bump());",
          "    assert!(!('0'..='7').contains(&c));",
          "    assert!(!('8'..='9').contains(&c));",
          "    assert!('d' == c);",
          "    assert!(matches!(c, 'D' | 'W' | 'w' | 's' | 'S' | 'd'));",
          "    let result = parser_i.parse_escape();",
          "    assert!(result.is_ok());",
          "    match result {",
          "    Ok(Primitive::Perl(cls)) => {}",
          "    _ => panic!(\"Expected Ok(Primitive::Perl(cls)), but got: {:?}\", result),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]