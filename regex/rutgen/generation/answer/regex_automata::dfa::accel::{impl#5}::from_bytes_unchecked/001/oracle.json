[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = [0u8, 0u8, 0u8, 0u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bytes, [0u8, 0u8, 0u8, 0u8, 0, 0, 0, 0]);",
          "    let input = [1u8, 2u8, 3u8, 4u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [1u8, 2u8, 3u8, 4u8, 0, 0, 0, 0]);",
          "    let input = [255u8, 254u8, 253u8, 252u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [255u8, 254u8, 253u8, 252u8, 0, 0, 0, 0]);",
          "    let input = [10u8, 20u8, 30u8, 40u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [10u8, 20u8, 30u8, 40u8, 0, 0, 0, 0]);",
          "    let input = [100u8, 200u8, 255u8, 128u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [100u8, 200u8, 255u8, 128u8, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let input = [0u8, 0u8, 0u8, 0u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [0u8, 0u8, 0u8, 0u8, 0, 0, 0, 0]);",
          "    let input = [1u8, 2u8, 3u8, 4u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [1u8, 2u8, 3u8, 4u8, 0, 0, 0, 0]);",
          "    let input = [255u8, 254u8, 253u8, 252u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [255u8, 254u8, 253u8, 252u8, 0, 0, 0, 0]);",
          "    let input = [10u8, 20u8, 30u8, 40u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [10u8, 20u8, 30u8, 40u8, 0, 0, 0, 0]);",
          "    let input = [100u8, 200u8, 255u8, 128u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [100u8, 200u8, 255u8, 128u8, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = [255u8, 255u8, 255u8, 255u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "}"
        ],
        "oracle": [
          "    let input = [255u8, 255u8, 255u8, 255u8];",
          "    let expected = Accel { bytes: [255, 255, 255, 255, 0, 0, 0, 0] };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input = [255u8, 255u8, 255u8, 255u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    let input = [255u8, 255u8, 255u8, 255u8];",
          "    let expected = Accel { bytes: [255, 255, 255, 255, 0, 0, 0, 0] };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = [1u8, 128u8, 255u8, 0u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bytes, [1u8, 128u8, 255u8, 0u8, 0u8, 0u8, 0u8, 0u8]);"
        ],
        "code": [
          "{",
          "    let input = [1u8, 128u8, 255u8, 0u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [1u8, 128u8, 255u8, 0u8, 0u8, 0u8, 0u8, 0u8]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = [0u8, 255u8, 128u8, 64u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.bytes, [0u8, 255u8, 128u8, 64u8, 0u8, 0u8, 0u8, 0u8]);"
        ],
        "code": [
          "{",
          "    let input = [0u8, 255u8, 128u8, 64u8];",
          "    let result = Accel::from_bytes_unchecked(input);",
          "    assert_eq!(result.bytes, [0u8, 255u8, 128u8, 64u8, 0u8, 0u8, 0u8, 0u8]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]