[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let pattern_set = [true, false, false, true];",
          "        let iter = PatternSetIter {",
          "            it: pattern_set.iter().enumerate(),",
          "        };",
          "        let mut iter = iter.clone();",
          "        let _result = iter.next_back(); // should return Some(PatternID::new_unchecked(3))",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(PatternID::new_unchecked(3)));"
        ],
        "code": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let pattern_set = [true, false, false, true];",
          "        let iter = PatternSetIter {",
          "            it: pattern_set.iter().enumerate(),",
          "        };",
          "        let mut iter = iter.clone();",
          "        let _result = iter.next_back(); // should return Some(PatternID::new_unchecked(3))",
          "    }",
          "    assert_eq!(_result, Some(PatternID::new_unchecked(3)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let pattern_set = [false, true, false, false];",
          "        let iter = PatternSetIter {",
          "            it: pattern_set.iter().enumerate(),",
          "        };",
          "        let mut iter = iter.clone();",
          "        let _result = iter.next_back(); // should return Some(PatternID::new_unchecked(1))",
          "    }",
          "}"
        ],
        "oracle": [
          "    let pattern_set = [false, true, false, false];",
          "    let iter = PatternSetIter { it: pattern_set.iter().enumerate() };",
          "    let mut iter = iter.clone();",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(PatternID::new_unchecked(1)));"
        ],
        "code": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let pattern_set = [false, true, false, false];",
          "        let iter = PatternSetIter {",
          "            it: pattern_set.iter().enumerate(),",
          "        };",
          "        let mut iter = iter.clone();",
          "        let _result = iter.next_back(); // should return Some(PatternID::new_unchecked(1))",
          "    }",
          "    let pattern_set = [false, true, false, false];",
          "    let iter = PatternSetIter { it: pattern_set.iter().enumerate() };",
          "    let mut iter = iter.clone();",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(PatternID::new_unchecked(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let pattern_set = [true, true, false];",
          "        let iter = PatternSetIter {",
          "            it: pattern_set.iter().enumerate(),",
          "        };",
          "        let mut iter = iter.clone();",
          "        let _result = iter.next_back(); // should return Some(PatternID::new_unchecked(1))",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(PatternID::new_unchecked(1)));"
        ],
        "code": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let pattern_set = [true, true, false];",
          "        let iter = PatternSetIter {",
          "            it: pattern_set.iter().enumerate(),",
          "        };",
          "        let mut iter = iter.clone();",
          "        let _result = iter.next_back(); // should return Some(PatternID::new_unchecked(1))",
          "    }",
          "    assert_eq!(_result, Some(PatternID::new_unchecked(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let pattern_set = [false, false, true];",
          "        let iter = PatternSetIter {",
          "            it: pattern_set.iter().enumerate(),",
          "        };",
          "        let mut iter = iter.clone();",
          "        let _result = iter.next_back(); // should return Some(PatternID::new_unchecked(2))",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(PatternID::new_unchecked(2)));"
        ],
        "code": [
          "{",
          "    #[cfg(feature = \"alloc\")]",
          "    {",
          "        let pattern_set = [false, false, true];",
          "        let iter = PatternSetIter {",
          "            it: pattern_set.iter().enumerate(),",
          "        };",
          "        let mut iter = iter.clone();",
          "        let _result = iter.next_back(); // should return Some(PatternID::new_unchecked(2))",
          "    }",
          "    assert_eq!(_result, Some(PatternID::new_unchecked(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]