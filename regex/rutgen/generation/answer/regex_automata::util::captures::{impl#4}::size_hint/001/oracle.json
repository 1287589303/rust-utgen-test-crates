[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let names: Vec<Option<Arc<str>>> = vec![];",
          "    let iter = GroupInfoPatternNames { it: names.iter() };",
          "    let caps = Captures {",
          "        group_info: GroupInfo {},",
          "        pid: None,",
          "        slots: vec![],",
          "    };",
          "    let captures_iter = CapturesPatternIter { caps: &caps, names: iter.enumerate() };",
          "    let hint = captures_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (0, Some(0)));"
        ],
        "code": [
          "{",
          "    let names: Vec<Option<Arc<str>>> = vec![];",
          "    let iter = GroupInfoPatternNames { it: names.iter() };",
          "    let caps = Captures {",
          "        group_info: GroupInfo {},",
          "        pid: None,",
          "        slots: vec![],",
          "    };",
          "    let captures_iter = CapturesPatternIter { caps: &caps, names: iter.enumerate() };",
          "    let hint = captures_iter.size_hint();",
          "    assert_eq!(hint, (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let names: Vec<Option<Arc<str>>> = vec![Some(Arc::from(\"name1\"))];",
          "    let iter = GroupInfoPatternNames { it: names.iter() };",
          "    let caps = Captures {",
          "        group_info: GroupInfo {},",
          "        pid: None,",
          "        slots: vec![],",
          "    };",
          "    let captures_iter = CapturesPatternIter { caps: &caps, names: iter.enumerate() };",
          "    let hint = captures_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (1, Some(1)));"
        ],
        "code": [
          "{",
          "    let names: Vec<Option<Arc<str>>> = vec![Some(Arc::from(\"name1\"))];",
          "    let iter = GroupInfoPatternNames { it: names.iter() };",
          "    let caps = Captures {",
          "        group_info: GroupInfo {},",
          "        pid: None,",
          "        slots: vec![],",
          "    };",
          "    let captures_iter = CapturesPatternIter { caps: &caps, names: iter.enumerate() };",
          "    let hint = captures_iter.size_hint();",
          "    assert_eq!(hint, (1, Some(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let names: Vec<Option<Arc<str>>> = vec![Some(Arc::from(\"name1\")), Some(Arc::from(\"name2\")), None];",
          "    let iter = GroupInfoPatternNames { it: names.iter() };",
          "    let caps = Captures {",
          "        group_info: GroupInfo {},",
          "        pid: None,",
          "        slots: vec![],",
          "    };",
          "    let captures_iter = CapturesPatternIter { caps: &caps, names: iter.enumerate() };",
          "    let hint = captures_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (3, Some(3)));"
        ],
        "code": [
          "{",
          "    let names: Vec<Option<Arc<str>>> = vec![Some(Arc::from(\"name1\")), Some(Arc::from(\"name2\")), None];",
          "    let iter = GroupInfoPatternNames { it: names.iter() };",
          "    let caps = Captures {",
          "        group_info: GroupInfo {},",
          "        pid: None,",
          "        slots: vec![],",
          "    };",
          "    let captures_iter = CapturesPatternIter { caps: &caps, names: iter.enumerate() };",
          "    let hint = captures_iter.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let names: Vec<Option<Arc<str>>> = (0..1000).map(|i| Some(Arc::from(format!(\"name{}\", i)))).collect();",
          "    let iter = GroupInfoPatternNames { it: names.iter() };",
          "    let caps = Captures {",
          "        group_info: GroupInfo {},",
          "        pid: None,",
          "        slots: vec![],",
          "    };",
          "    let captures_iter = CapturesPatternIter { caps: &caps, names: iter.enumerate() };",
          "    let hint = captures_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint.0, 1000);",
          "    assert_eq!(hint.1, Some(1000));"
        ],
        "code": [
          "{",
          "    let names: Vec<Option<Arc<str>>> = (0..1000).map(|i| Some(Arc::from(format!(\"name{}\", i)))).collect();",
          "    let iter = GroupInfoPatternNames { it: names.iter() };",
          "    let caps = Captures {",
          "        group_info: GroupInfo {},",
          "        pid: None,",
          "        slots: vec![],",
          "    };",
          "    let captures_iter = CapturesPatternIter { caps: &caps, names: iter.enumerate() };",
          "    let hint = captures_iter.size_hint();",
          "    assert_eq!(hint.0, 1000);",
          "    assert_eq!(hint.1, Some(1000));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]