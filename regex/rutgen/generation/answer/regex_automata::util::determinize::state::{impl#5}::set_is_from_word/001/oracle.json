[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![0]);",
          "    state_builder.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder.0[0], 4);"
        ],
        "code": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![0]);",
          "    state_builder.set_is_from_word();",
          "    assert_eq!(state_builder.0[0], 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![1]);",
          "    state_builder.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));"
        ],
        "code": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![1]);",
          "    state_builder.set_is_from_word();",
          "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![2]);",
          "    state_builder.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));"
        ],
        "code": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![2]);",
          "    state_builder.set_is_from_word();",
          "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![0, 1, 2, 3]);",
          "    state_builder.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder.0[0] & (1 << 2) != 0, true);"
        ],
        "code": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![0, 1, 2, 3]);",
          "    state_builder.set_is_from_word();",
          "    assert_eq!(state_builder.0[0] & (1 << 2) != 0, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![255]);",
          "    state_builder.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder.0[0] & (1 << 2), 1 << 2);"
        ],
        "code": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![255]);",
          "    state_builder.set_is_from_word();",
          "    assert_eq!(state_builder.0[0] & (1 << 2), 1 << 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![128, 255]);",
          "    state_builder.set_is_from_word();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));"
        ],
        "code": [
          "{",
          "    let mut state_builder = StateBuilderMatches(vec![128, 255]);",
          "    state_builder.set_is_from_word();",
          "    assert_eq!(state_builder.0[0] & (1 << 2), (1 << 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]