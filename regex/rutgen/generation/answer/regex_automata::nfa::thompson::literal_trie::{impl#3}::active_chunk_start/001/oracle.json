[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        chunks: Vec::new(),",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "}"
        ],
        "oracle": [
          "    let state = State { chunks: Vec::new(), ..Default::default() }; assert_eq!(state.active_chunk_start(), 0);",
          "    let state = State { chunks: vec![(0, 5)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 5);",
          "    let state = State { chunks: vec![(1, 3), (4, 6)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 6);",
          "    let state = State { chunks: vec![(0, 2), (3, 8)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 8);",
          "    let state = State { chunks: vec![(10, 15)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 15);",
          "    let state = State { chunks: vec![(5, 10), (12, 14)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 14);",
          "    let state = State { chunks: vec![(0, 1), (2, 3), (4, 5)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 5);",
          "    let state = State { chunks: vec![(0, 0)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 0);"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        chunks: Vec::new(),",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "    let state = State { chunks: Vec::new(), ..Default::default() }; assert_eq!(state.active_chunk_start(), 0);",
          "    let state = State { chunks: vec![(0, 5)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 5);",
          "    let state = State { chunks: vec![(1, 3), (4, 6)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 6);",
          "    let state = State { chunks: vec![(0, 2), (3, 8)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 8);",
          "    let state = State { chunks: vec![(10, 15)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 15);",
          "    let state = State { chunks: vec![(5, 10), (12, 14)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 14);",
          "    let state = State { chunks: vec![(0, 1), (2, 3), (4, 5)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 5);",
          "    let state = State { chunks: vec![(0, 0)], ..Default::default() }; assert_eq!(state.active_chunk_start(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, 10)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.active_chunk_start(), 10);"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, 10)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "    assert_eq!(state.active_chunk_start(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, 5), (5, 15), (15, 20)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.active_chunk_start(), 20);"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, 5), (5, 15), (15, 20)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "    assert_eq!(state.active_chunk_start(), 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, 0)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.active_chunk_start(), 0);",
          "    assert_eq!(state.chunks.len(), 1);",
          "    assert_eq!(state.chunks[0], (0, 0));"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, 0)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "    assert_eq!(state.active_chunk_start(), 0);",
          "    assert_eq!(state.chunks.len(), 1);",
          "    assert_eq!(state.chunks[0], (0, 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, 5), (5, 0)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.active_chunk_start(), 0);",
          "    assert_eq!(state.chunks.len(), 2);",
          "    assert_eq!(state.chunks[0], (0, 5));",
          "    assert_eq!(state.chunks[1], (5, 0));",
          "    assert_eq!(state.chunks.iter().map(|&(_, end)| end).last(), Some(0));",
          "    assert!(state.is_leaf() == false);"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, 5), (5, 0)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "    assert_eq!(state.active_chunk_start(), 0);",
          "    assert_eq!(state.chunks.len(), 2);",
          "    assert_eq!(state.chunks[0], (0, 5));",
          "    assert_eq!(state.chunks[1], (5, 0));",
          "    assert_eq!(state.chunks.iter().map(|&(_, end)| end).last(), Some(0));",
          "    assert!(state.is_leaf() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, usize::MAX as usize), (1, 20)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.active_chunk_start(), 20);"
        ],
        "code": [
          "{",
          "    let state = State {",
          "        chunks: vec![(0, usize::MAX as usize), (1, 20)],",
          "        ..Default::default()",
          "    };",
          "    let _ = state.active_chunk_start();",
          "    assert_eq!(state.active_chunk_start(), 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]