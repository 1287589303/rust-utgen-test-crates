[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for b in 48..=57 {",
          "        let _ = is_word_byte(b);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(48), true); // '0'",
          "    assert_eq!(is_word_byte(49), true); // '1'",
          "    assert_eq!(is_word_byte(50), true); // '2'",
          "    assert_eq!(is_word_byte(51), true); // '3'",
          "    assert_eq!(is_word_byte(52), true); // '4'",
          "    assert_eq!(is_word_byte(53), true); // '5'",
          "    assert_eq!(is_word_byte(54), true); // '6'",
          "    assert_eq!(is_word_byte(55), true); // '7'",
          "    assert_eq!(is_word_byte(56), true); // '8'",
          "    assert_eq!(is_word_byte(57), true); // '9'"
        ],
        "code": [
          "{",
          "    for b in 48..=57 {",
          "        let _ = is_word_byte(b);",
          "    }",
          "    assert_eq!(is_word_byte(48), true); // '0'",
          "    assert_eq!(is_word_byte(49), true); // '1'",
          "    assert_eq!(is_word_byte(50), true); // '2'",
          "    assert_eq!(is_word_byte(51), true); // '3'",
          "    assert_eq!(is_word_byte(52), true); // '4'",
          "    assert_eq!(is_word_byte(53), true); // '5'",
          "    assert_eq!(is_word_byte(54), true); // '6'",
          "    assert_eq!(is_word_byte(55), true); // '7'",
          "    assert_eq!(is_word_byte(56), true); // '8'",
          "    assert_eq!(is_word_byte(57), true); // '9'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for b in 65..=90 {",
          "        let _ = is_word_byte(b);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'B'), true);",
          "    assert_eq!(is_word_byte(b'C'), true);",
          "    assert_eq!(is_word_byte(b'D'), true);",
          "    assert_eq!(is_word_byte(b'E'), true);",
          "    assert_eq!(is_word_byte(b'F'), true);",
          "    assert_eq!(is_word_byte(b'G'), true);",
          "    assert_eq!(is_word_byte(b'H'), true);",
          "    assert_eq!(is_word_byte(b'I'), true);",
          "    assert_eq!(is_word_byte(b'J'), true);",
          "    assert_eq!(is_word_byte(b'K'), true);",
          "    assert_eq!(is_word_byte(b'L'), true);",
          "    assert_eq!(is_word_byte(b'M'), true);",
          "    assert_eq!(is_word_byte(b'N'), true);",
          "    assert_eq!(is_word_byte(b'O'), true);",
          "    assert_eq!(is_word_byte(b'P'), true);",
          "    assert_eq!(is_word_byte(b'Q'), true);",
          "    assert_eq!(is_word_byte(b'R'), true);",
          "    assert_eq!(is_word_byte(b'S'), true);",
          "    assert_eq!(is_word_byte(b'T'), true);",
          "    assert_eq!(is_word_byte(b'U'), true);",
          "    assert_eq!(is_word_byte(b'V'), true);",
          "    assert_eq!(is_word_byte(b'W'), true);",
          "    assert_eq!(is_word_byte(b'X'), true);",
          "    assert_eq!(is_word_byte(b'Y'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    for b in 65..=90 {",
          "        let _ = is_word_byte(b);",
          "    }",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'B'), true);",
          "    assert_eq!(is_word_byte(b'C'), true);",
          "    assert_eq!(is_word_byte(b'D'), true);",
          "    assert_eq!(is_word_byte(b'E'), true);",
          "    assert_eq!(is_word_byte(b'F'), true);",
          "    assert_eq!(is_word_byte(b'G'), true);",
          "    assert_eq!(is_word_byte(b'H'), true);",
          "    assert_eq!(is_word_byte(b'I'), true);",
          "    assert_eq!(is_word_byte(b'J'), true);",
          "    assert_eq!(is_word_byte(b'K'), true);",
          "    assert_eq!(is_word_byte(b'L'), true);",
          "    assert_eq!(is_word_byte(b'M'), true);",
          "    assert_eq!(is_word_byte(b'N'), true);",
          "    assert_eq!(is_word_byte(b'O'), true);",
          "    assert_eq!(is_word_byte(b'P'), true);",
          "    assert_eq!(is_word_byte(b'Q'), true);",
          "    assert_eq!(is_word_byte(b'R'), true);",
          "    assert_eq!(is_word_byte(b'S'), true);",
          "    assert_eq!(is_word_byte(b'T'), true);",
          "    assert_eq!(is_word_byte(b'U'), true);",
          "    assert_eq!(is_word_byte(b'V'), true);",
          "    assert_eq!(is_word_byte(b'W'), true);",
          "    assert_eq!(is_word_byte(b'X'), true);",
          "    assert_eq!(is_word_byte(b'Y'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for b in 97..=122 {",
          "        let _ = is_word_byte(b);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(97), true);  // 'a'",
          "    assert_eq!(is_word_byte(98), true);  // 'b'",
          "    assert_eq!(is_word_byte(99), true);  // 'c'",
          "    assert_eq!(is_word_byte(100), true); // 'd'",
          "    assert_eq!(is_word_byte(101), true); // 'e'",
          "    assert_eq!(is_word_byte(102), true); // 'f'",
          "    assert_eq!(is_word_byte(103), true); // 'g'",
          "    assert_eq!(is_word_byte(104), true); // 'h'",
          "    assert_eq!(is_word_byte(105), true); // 'i'",
          "    assert_eq!(is_word_byte(106), true); // 'j'",
          "    assert_eq!(is_word_byte(107), true); // 'k'",
          "    assert_eq!(is_word_byte(108), true); // 'l'",
          "    assert_eq!(is_word_byte(109), true); // 'm'",
          "    assert_eq!(is_word_byte(110), true); // 'n'",
          "    assert_eq!(is_word_byte(111), true); // 'o'",
          "    assert_eq!(is_word_byte(112), true); // 'p'",
          "    assert_eq!(is_word_byte(113), true); // 'q'",
          "    assert_eq!(is_word_byte(114), true); // 'r'",
          "    assert_eq!(is_word_byte(115), true); // 's'",
          "    assert_eq!(is_word_byte(116), true); // 't'",
          "    assert_eq!(is_word_byte(117), true); // 'u'",
          "    assert_eq!(is_word_byte(118), true); // 'v'",
          "    assert_eq!(is_word_byte(119), true); // 'w'",
          "    assert_eq!(is_word_byte(120), true); // 'x'",
          "    assert_eq!(is_word_byte(121), true); // 'y'",
          "    assert_eq!(is_word_byte(122), true); // 'z'"
        ],
        "code": [
          "{",
          "    for b in 97..=122 {",
          "        let _ = is_word_byte(b);",
          "    }",
          "    assert_eq!(is_word_byte(97), true);  // 'a'",
          "    assert_eq!(is_word_byte(98), true);  // 'b'",
          "    assert_eq!(is_word_byte(99), true);  // 'c'",
          "    assert_eq!(is_word_byte(100), true); // 'd'",
          "    assert_eq!(is_word_byte(101), true); // 'e'",
          "    assert_eq!(is_word_byte(102), true); // 'f'",
          "    assert_eq!(is_word_byte(103), true); // 'g'",
          "    assert_eq!(is_word_byte(104), true); // 'h'",
          "    assert_eq!(is_word_byte(105), true); // 'i'",
          "    assert_eq!(is_word_byte(106), true); // 'j'",
          "    assert_eq!(is_word_byte(107), true); // 'k'",
          "    assert_eq!(is_word_byte(108), true); // 'l'",
          "    assert_eq!(is_word_byte(109), true); // 'm'",
          "    assert_eq!(is_word_byte(110), true); // 'n'",
          "    assert_eq!(is_word_byte(111), true); // 'o'",
          "    assert_eq!(is_word_byte(112), true); // 'p'",
          "    assert_eq!(is_word_byte(113), true); // 'q'",
          "    assert_eq!(is_word_byte(114), true); // 'r'",
          "    assert_eq!(is_word_byte(115), true); // 's'",
          "    assert_eq!(is_word_byte(116), true); // 't'",
          "    assert_eq!(is_word_byte(117), true); // 'u'",
          "    assert_eq!(is_word_byte(118), true); // 'v'",
          "    assert_eq!(is_word_byte(119), true); // 'w'",
          "    assert_eq!(is_word_byte(120), true); // 'x'",
          "    assert_eq!(is_word_byte(121), true); // 'y'",
          "    assert_eq!(is_word_byte(122), true); // 'z'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = is_word_byte(b'_');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b'{'), false);",
          "    assert_eq!(is_word_byte(b'}'), false);",
          "    assert_eq!(is_word_byte(b'â‚¬'), false);",
          "    assert_eq!(is_word_byte(b'~'), false);"
        ],
        "code": [
          "{",
          "    let _ = is_word_byte(b'_');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b'{'), false);",
          "    assert_eq!(is_word_byte(b'}'), false);",
          "    assert_eq!(is_word_byte(b'â‚¬'), false);",
          "    assert_eq!(is_word_byte(b'~'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _ = is_word_byte(0);",
          "    let _ = is_word_byte(47);",
          "    let _ = is_word_byte(58);",
          "    let _ = is_word_byte(64);",
          "    let _ = is_word_byte(91);",
          "    let _ = is_word_byte(96);",
          "    let _ = is_word_byte(123);",
          "    let _ = is_word_byte(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(0), false);",
          "    assert_eq!(is_word_byte(47), false);",
          "    assert_eq!(is_word_byte(58), false);",
          "    assert_eq!(is_word_byte(64), false);",
          "    assert_eq!(is_word_byte(91), false);",
          "    assert_eq!(is_word_byte(96), false);",
          "    assert_eq!(is_word_byte(123), false);",
          "    assert_eq!(is_word_byte(255), false);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);"
        ],
        "code": [
          "{",
          "    let _ = is_word_byte(0);",
          "    let _ = is_word_byte(47);",
          "    let _ = is_word_byte(58);",
          "    let _ = is_word_byte(64);",
          "    let _ = is_word_byte(91);",
          "    let _ = is_word_byte(96);",
          "    let _ = is_word_byte(123);",
          "    let _ = is_word_byte(255);",
          "    assert_eq!(is_word_byte(0), false);",
          "    assert_eq!(is_word_byte(47), false);",
          "    assert_eq!(is_word_byte(58), false);",
          "    assert_eq!(is_word_byte(64), false);",
          "    assert_eq!(is_word_byte(91), false);",
          "    assert_eq!(is_word_byte(96), false);",
          "    assert_eq!(is_word_byte(123), false);",
          "    assert_eq!(is_word_byte(255), false);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]