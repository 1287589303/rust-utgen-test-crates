[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [&[u8]; 3] = [&[b'a'], &[b'b'], &[b'c']];",
          "    let result = Memchr3::new(MatchKind::All, &needles);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let memchr3 = result.unwrap();",
          "    assert_eq!(memchr3, Memchr3(b'a', b'b', b'c'));"
        ],
        "code": [
          "{",
          "    let needles: [&[u8]; 3] = [&[b'a'], &[b'b'], &[b'c']];",
          "    let result = Memchr3::new(MatchKind::All, &needles);",
          "    assert!(result.is_some());",
          "    let memchr3 = result.unwrap();",
          "    assert_eq!(memchr3, Memchr3(b'a', b'b', b'c'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [&[u8]; 3] = [&[b'x'], &[b'y'], &[b'z']];",
          "    let result = Memchr3::new(MatchKind::LeftmostFirst, &needles);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap(), Memchr3(b'x', b'y', b'z'));"
        ],
        "code": [
          "{",
          "    let needles: [&[u8]; 3] = [&[b'x'], &[b'y'], &[b'z']];",
          "    let result = Memchr3::new(MatchKind::LeftmostFirst, &needles);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap(), Memchr3(b'x', b'y', b'z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [&[u8]; 3] = [&[b'A'], &[b'B'], &[b'C']];",
          "    let result = Memchr3::new(MatchKind::All, &needles);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let memchr = result.unwrap();",
          "    assert_eq!(memchr.0, b'A');",
          "    assert_eq!(memchr.1, b'B');",
          "    assert_eq!(memchr.2, b'C');"
        ],
        "code": [
          "{",
          "    let needles: [&[u8]; 3] = [&[b'A'], &[b'B'], &[b'C']];",
          "    let result = Memchr3::new(MatchKind::All, &needles);",
          "    assert!(result.is_some());",
          "    let memchr = result.unwrap();",
          "    assert_eq!(memchr.0, b'A');",
          "    assert_eq!(memchr.1, b'B');",
          "    assert_eq!(memchr.2, b'C');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]