[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('A', 'A');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('A', 'A');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(ranges.is_empty());",
          "    assert_eq!(range.start(), 'A');",
          "    assert_eq!(range.end(), 'A');",
          "    assert_eq!(range.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('A', 'A');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('A', 'A');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(ranges.is_empty());",
          "    assert_eq!(range.start(), 'A');",
          "    assert_eq!(range.end(), 'A');",
          "    assert_eq!(range.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('z', 'z');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('a', 'b');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert!(result.is_ok());",
          "    assert!(ranges.is_empty());",
          "    ",
          "    let range = ClassUnicodeRange::new('x', 'y');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert!(result.is_ok());",
          "    assert!(ranges.is_empty());",
          "    ",
          "    let range = ClassUnicodeRange::new('A', 'Z');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert!(result.is_ok());",
          "    assert!(ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('z', 'z');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('a', 'b');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert!(result.is_ok());",
          "    assert!(ranges.is_empty());",
          "    ",
          "    let range = ClassUnicodeRange::new('x', 'y');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert!(result.is_ok());",
          "    assert!(ranges.is_empty());",
          "    ",
          "    let range = ClassUnicodeRange::new('A', 'Z');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert!(result.is_ok());",
          "    assert!(ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('A', 'B');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('A', 'B');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('A', 'B');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('A', 'B');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('\\u{0300}', '\\u{0300}');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('\\u{0300}', '\\u{0300}');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('\\u{0300}', '\\u{0300}');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    let mut ranges = Vec::new();",
          "    let range = ClassUnicodeRange::new('\\u{0300}', '\\u{0300}');",
          "    let result = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]