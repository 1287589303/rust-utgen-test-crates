[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{E000}', '\\u{E000}');",
          "    interval.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{E000}', '\\u{E000}');",
          "    assert_eq!(interval.case_fold_simple(&mut ranges), Err(unicode::CaseFoldError(())));",
          "    assert!(ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{E000}', '\\u{E000}');",
          "    interval.case_fold_simple(&mut ranges);",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{E000}', '\\u{E000}');",
          "    assert_eq!(interval.case_fold_simple(&mut ranges), Err(unicode::CaseFoldError(())));",
          "    assert!(ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{D7FF}', '\\u{E000}');",
          "    interval.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(ranges.is_empty());",
          "    assert!(interval.case_fold_simple(&mut ranges).is_err());",
          "    assert!(interval.case_fold_simple(&mut ranges).unwrap_err().is_none());",
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(ranges.capacity(), 0);",
          "    assert!(matches!(interval.case_fold_simple(&mut ranges), Err(unicode::CaseFoldError(_))));"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{D7FF}', '\\u{E000}');",
          "    interval.case_fold_simple(&mut ranges);",
          "    assert!(ranges.is_empty());",
          "    assert!(interval.case_fold_simple(&mut ranges).is_err());",
          "    assert!(interval.case_fold_simple(&mut ranges).unwrap_err().is_none());",
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(ranges.capacity(), 0);",
          "    assert!(matches!(interval.case_fold_simple(&mut ranges), Err(unicode::CaseFoldError(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{FFFF}', '\\u{D7FF}');",
          "    interval.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{FFFF}', '\\u{D7FF}');",
          "    assert!(interval.case_fold_simple(&mut ranges).is_err());",
          "    assert!(ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{FFFF}', '\\u{D7FF}');",
          "    interval.case_fold_simple(&mut ranges);",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{FFFF}', '\\u{D7FF}');",
          "    assert!(interval.case_fold_simple(&mut ranges).is_err());",
          "    assert!(ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{0000}', '\\u{D7FF}');",
          "    interval.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(ranges.is_empty());",
          "    assert!(interval.case_fold_simple(&mut ranges).is_err());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{0000}', '\\u{D7FF}');",
          "    interval.case_fold_simple(&mut ranges);",
          "    assert!(ranges.is_empty());",
          "    assert!(interval.case_fold_simple(&mut ranges).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{FFFE}', '\\u{FFFF}');",
          "    interval.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ranges.len(), 0);",
          "    assert!(matches!(interval.case_fold_simple(&mut ranges), Err(unicode::CaseFoldError(_))));",
          "    assert_eq!(ranges.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{FFFE}', '\\u{FFFF}');",
          "    interval.case_fold_simple(&mut ranges);",
          "    assert_eq!(ranges.len(), 0);",
          "    assert!(matches!(interval.case_fold_simple(&mut ranges), Err(unicode::CaseFoldError(_))));",
          "    assert_eq!(ranges.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{0000}', '\\u{0000}');",
          "    interval.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(ranges.is_empty());",
          "    assert!(interval.case_fold_simple(&mut ranges).is_ok());",
          "    assert_eq!(ranges.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let interval = ClassUnicodeRange::new('\\u{0000}', '\\u{0000}');",
          "    interval.case_fold_simple(&mut ranges);",
          "    assert!(ranges.is_empty());",
          "    assert!(interval.case_fold_simple(&mut ranges).is_ok());",
          "    assert_eq!(ranges.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]