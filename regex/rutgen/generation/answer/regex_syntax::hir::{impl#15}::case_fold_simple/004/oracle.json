[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'a';",
          "    let end_char = 'a';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unicode::SimpleCaseFolder::new().is_ok(), true);",
          "    let range = ClassUnicodeRange::new('a', 'a');",
          "    let result = range.case_fold_simple(&mut Vec::new());",
          "    assert_eq!(result, Ok(()));",
          "    let ranges: Vec<ClassUnicodeRange> = Vec::new();",
          "    let expected_ranges: Vec<ClassUnicodeRange> = Vec::new();",
          "    assert_eq!(ranges, expected_ranges);",
          "    assert!(ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'a';",
          "    let end_char = 'a';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(unicode::SimpleCaseFolder::new().is_ok(), true);",
          "    let range = ClassUnicodeRange::new('a', 'a');",
          "    let result = range.case_fold_simple(&mut Vec::new());",
          "    assert_eq!(result, Ok(()));",
          "    let ranges: Vec<ClassUnicodeRange> = Vec::new();",
          "    let expected_ranges: Vec<ClassUnicodeRange> = Vec::new();",
          "    assert_eq!(ranges, expected_ranges);",
          "    assert!(ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'a';",
          "    let end_char = 'z';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
          "    assert!(ranges.is_empty());",
          "    assert!(unicode::SimpleCaseFolder::new().is_ok());",
          "    assert!(unicode::SimpleCaseFolder::new().unwrap().overlaps('a', 'z'));",
          "    assert!(!('a'..='z').filter_map(char::from_u32).is_empty());"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'a';",
          "    let end_char = 'z';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(range.case_fold_simple(&mut ranges), Ok(()));",
          "    assert!(ranges.is_empty());",
          "    assert!(unicode::SimpleCaseFolder::new().is_ok());",
          "    assert!(unicode::SimpleCaseFolder::new().unwrap().overlaps('a', 'z'));",
          "    assert!(!('a'..='z').filter_map(char::from_u32).is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'A';",
          "    let end_char = 'A';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(ranges, vec![]);",
          "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
          "    assert!(ranges.is_empty());",
          "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(())));",
          "    assert_eq!(range.start(), 'A');",
          "    assert_eq!(range.end(), 'A');",
          "    assert_eq!(range.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'A';",
          "    let end_char = 'A';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(ranges, vec![]);",
          "    assert!(range.case_fold_simple(&mut ranges).is_ok());",
          "    assert!(ranges.is_empty());",
          "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(())));",
          "    assert_eq!(range.start(), 'A');",
          "    assert_eq!(range.end(), 'A');",
          "    assert_eq!(range.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'A';",
          "    let end_char = 'Z';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert!(ranges.is_empty());",
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(range.start(), start_char);",
          "    assert_eq!(range.end(), end_char);",
          "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(())));"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'A';",
          "    let end_char = 'Z';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "    assert!(ranges.is_empty());",
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(range.start(), start_char);",
          "    assert_eq!(range.end(), end_char);",
          "    assert!(matches!(range.case_fold_simple(&mut ranges), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'A';",
          "    let end_char = 'C';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(ClassUnicodeRange::new('A', 'C').case_fold_simple(&mut ranges), Ok(()));",
          "    assert!(ranges.is_empty());",
          "    assert!(ranges.iter().all(|range| range.start() >= 'A' && range.end() <= 'C'));",
          "    assert!(unicode::SimpleCaseFolder::new().is_ok());",
          "    assert!(unicode::SimpleCaseFolder::new().unwrap().overlaps('A', 'C'));"
        ],
        "code": [
          "{",
          "    let mut ranges = Vec::new();",
          "    let start_char = 'A';",
          "    let end_char = 'C';",
          "    let range = ClassUnicodeRange::new(start_char, end_char);",
          "    let _ = range.case_fold_simple(&mut ranges);",
          "    assert_eq!(ranges.len(), 0);",
          "    assert_eq!(ClassUnicodeRange::new('A', 'C').case_fold_simple(&mut ranges), Ok(()));",
          "    assert!(ranges.is_empty());",
          "    assert!(ranges.iter().all(|range| range.start() >= 'A' && range.end() <= 'C'));",
          "    assert!(unicode::SimpleCaseFolder::new().is_ok());",
          "    assert!(unicode::SimpleCaseFolder::new().unwrap().overlaps('A', 'C'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]