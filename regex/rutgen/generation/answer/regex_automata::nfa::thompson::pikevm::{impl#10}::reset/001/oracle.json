[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::never_match();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slot_table.slots_per_state, 0);",
          "    assert_eq!(slot_table.slots_for_captures, 0);",
          "    assert!(slot_table.table.is_empty());",
          "    assert_eq!(slot_table.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::never_match();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "    assert_eq!(slot_table.slots_per_state, 0);",
          "    assert_eq!(slot_table.slots_for_captures, 0);",
          "    assert!(slot_table.table.is_empty());",
          "    assert_eq!(slot_table.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len().checked_mul(2).unwrap()));",
          "    let len = nfa.states().len().checked_mul(slot_table.slots_per_state).and_then(|x| x.checked_add(slot_table.slots_for_captures)).expect(\"slot table length doesn't overflow\");",
          "    assert_eq!(slot_table.table.len(), len);",
          "    assert!(slot_table.table.iter().all(|&slot| slot.is_none()));"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(\"a\").unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len().checked_mul(2).unwrap()));",
          "    let len = nfa.states().len().checked_mul(slot_table.slots_per_state).and_then(|x| x.checked_add(slot_table.slots_for_captures)).expect(\"slot table length doesn't overflow\");",
          "    assert_eq!(slot_table.table.len(), len);",
          "    assert!(slot_table.table.iter().all(|&slot| slot.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = vec![\"a\", \"b\", \"c\"];",
          "    let nfa = NFA::new_many(&patterns).unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "}"
        ],
        "oracle": [
          "    assert!(slot_table.slots_per_state > 0);",
          "    assert!(slot_table.slots_for_captures >= slot_table.slots_per_state);",
          "    assert!(slot_table.table.len() > 0);",
          "    assert_eq!(slot_table.table.len(), nfa.states().len() * slot_table.slots_per_state + slot_table.slots_for_captures);",
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len() * 2));",
          "    assert!(slot_table.table.iter().all(|x| x.is_none()));"
        ],
        "code": [
          "{",
          "    let patterns = vec![\"a\", \"b\", \"c\"];",
          "    let nfa = NFA::new_many(&patterns).unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "    assert!(slot_table.slots_per_state > 0);",
          "    assert!(slot_table.slots_for_captures >= slot_table.slots_per_state);",
          "    assert!(slot_table.table.len() > 0);",
          "    assert_eq!(slot_table.table.len(), nfa.states().len() * slot_table.slots_per_state + slot_table.slots_for_captures);",
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len() * 2));",
          "    assert!(slot_table.table.iter().all(|x| x.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len().checked_mul(2).unwrap()));",
          "    let expected_len = nfa.states().len().checked_mul(slot_table.slots_per_state).and_then(|x| x.checked_add(slot_table.slots_for_captures)).expect(\"slot table length doesn't overflow\");",
          "    assert_eq!(slot_table.table.len(), expected_len);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(\"(a)\").unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len().checked_mul(2).unwrap()));",
          "    let expected_len = nfa.states().len().checked_mul(slot_table.slots_per_state).and_then(|x| x.checked_add(slot_table.slots_for_captures)).expect(\"slot table length doesn't overflow\");",
          "    assert_eq!(slot_table.table.len(), expected_len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(\"(a)|(b)\").unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "}"
        ],
        "oracle": [
          "    slot_table.slots_per_state == nfa.group_info().slot_len()",
          "    slot_table.slots_for_captures == core::cmp::max(slot_table.slots_per_state, nfa.pattern_len().checked_mul(2).unwrap())",
          "    slot_table.table.len() == nfa.states().len() * slot_table.slots_per_state + slot_table.slots_for_captures",
          "    slot_table.table.iter().all(|entry| entry.is_none())"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(\"(a)|(b)\").unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "    slot_table.slots_per_state == nfa.group_info().slot_len()",
          "    slot_table.slots_for_captures == core::cmp::max(slot_table.slots_per_state, nfa.pattern_len().checked_mul(2).unwrap())",
          "    slot_table.table.len() == nfa.states().len() * slot_table.slots_per_state + slot_table.slots_for_captures",
          "    slot_table.table.iter().all(|entry| entry.is_none())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::always_match();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len().checked_mul(2).unwrap()));",
          "    assert!(slot_table.table.len() > 0);",
          "    assert!(slot_table.table.iter().all(|&x| x.is_none()));"
        ],
        "code": [
          "{",
          "    let nfa = NFA::always_match();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len().checked_mul(2).unwrap()));",
          "    assert!(slot_table.table.len() > 0);",
          "    assert!(slot_table.table.iter().all(|&x| x.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut patterns = Vec::with_capacity(1000);",
          "    for i in 0..1000 {",
          "        patterns.push(format!(\"pattern{}\", i));",
          "    }",
          "    let nfa = NFA::new_many(&patterns).unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert!(slot_table.slots_for_captures >= slot_table.slots_per_state);",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len() * 2));",
          "    assert_eq!(slot_table.table.len(), nfa.states().len() * slot_table.slots_per_state + slot_table.slots_for_captures);",
          "    assert!(slot_table.table.iter().all(|&slot| slot.is_none()));"
        ],
        "code": [
          "{",
          "    let mut patterns = Vec::with_capacity(1000);",
          "    for i in 0..1000 {",
          "        patterns.push(format!(\"pattern{}\", i));",
          "    }",
          "    let nfa = NFA::new_many(&patterns).unwrap();",
          "    let pikevm = PikeVM { config: Config::default(), nfa: nfa.clone() };",
          "    let mut slot_table = SlotTable::new();",
          "    slot_table.reset(&pikevm);",
          "    assert_eq!(slot_table.slots_per_state, nfa.group_info().slot_len());",
          "    assert!(slot_table.slots_for_captures >= slot_table.slots_per_state);",
          "    assert_eq!(slot_table.slots_for_captures, core::cmp::max(slot_table.slots_per_state, nfa.pattern_len() * 2));",
          "    assert_eq!(slot_table.table.len(), nfa.states().len() * slot_table.slots_per_state + slot_table.slots_for_captures);",
          "    assert!(slot_table.table.iter().all(|&slot| slot.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]