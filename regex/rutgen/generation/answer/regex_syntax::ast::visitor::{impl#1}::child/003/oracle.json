[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = ast::Ast::Literal(Box::new(Literal::new('a')));",
          "    let group = ast::Group {",
          "        span: Span::new(0, 1),",
          "        kind: GroupKind::Capturing,",
          "        ast: Box::new(literal),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    let literal = ast::Ast::Literal(Box::new(Literal::new('a')));",
          "    let group = ast::Group {",
          "    span: Span::new(0, 1),",
          "    kind: GroupKind::Capturing,",
          "    ast: Box::new(literal),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    assert_eq!(frame.child(), &group.ast);"
        ],
        "code": [
          "{",
          "    let literal = ast::Ast::Literal(Box::new(Literal::new('a')));",
          "    let group = ast::Group {",
          "        span: Span::new(0, 1),",
          "        kind: GroupKind::Capturing,",
          "        ast: Box::new(literal),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    let _child = frame.child();",
          "    let literal = ast::Ast::Literal(Box::new(Literal::new('a')));",
          "    let group = ast::Group {",
          "    span: Span::new(0, 1),",
          "    kind: GroupKind::Capturing,",
          "    ast: Box::new(literal),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    assert_eq!(frame.child(), &group.ast);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literals = vec![",
          "        ast::Ast::Literal(Box::new(Literal::new('a'))),",
          "        ast::Ast::Literal(Box::new(Literal::new('b'))),",
          "    ];",
          "    let concat = ast::Ast::Concat(Box::new(Concat::new(literals)));",
          "    ",
          "    let group = ast::Group {",
          "        span: Span::new(0, 2),",
          "        kind: GroupKind::Capturing,",
          "        ast: Box::new(concat),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    _frame.child();_ = &frame_child;",
          "    assert_eq!(frame_child, &group.ast);",
          "    assert!(matches!(frame_child, ast::Ast::Concat(_)));",
          "    assert_eq!(frame_child.span(), Span::new(0, 2));",
          "    assert_eq!(frame_child.kind(), GroupKind::Capturing);",
          "    assert!(frame_child.ast.is_some());"
        ],
        "code": [
          "{",
          "    let literals = vec![",
          "        ast::Ast::Literal(Box::new(Literal::new('a'))),",
          "        ast::Ast::Literal(Box::new(Literal::new('b'))),",
          "    ];",
          "    let concat = ast::Ast::Concat(Box::new(Concat::new(literals)));",
          "    ",
          "    let group = ast::Group {",
          "        span: Span::new(0, 2),",
          "        kind: GroupKind::Capturing,",
          "        ast: Box::new(concat),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    let _child = frame.child();",
          "    _frame.child();_ = &frame_child;",
          "    assert_eq!(frame_child, &group.ast);",
          "    assert!(matches!(frame_child, ast::Ast::Concat(_)));",
          "    assert_eq!(frame_child.span(), Span::new(0, 2));",
          "    assert_eq!(frame_child.kind(), GroupKind::Capturing);",
          "    assert!(frame_child.ast.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alt = ast::Ast::Alternation(Box::new(Alternation::new(vec![",
          "        ast::Ast::Literal(Box::new(Literal::new('a'))),",
          "        ast::Ast::Literal(Box::new(Literal::new('b'))),",
          "    ])));",
          "    ",
          "    let group = ast::Group {",
          "        span: Span::new(0, 2),",
          "        kind: GroupKind::Capturing,",
          "        ast: Box::new(alt),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    let alt = ast::Ast::Alternation(Box::new(Alternation::new(vec![ ast::Ast::Literal(Box::new(Literal::new('a'))), ast::Ast::Literal(Box::new(Literal::new('b'))), ])));",
          "    let group = ast::Group { span: Span::new(0, 2), kind: GroupKind::Capturing, ast: Box::new(alt), };",
          "    let frame = Frame::Group(&group);",
          "    let child_ast = frame.child();",
          "    assert_eq!(child_ast, &group.ast);",
          "    assert!(matches!(child_ast, ast::Ast::Alternation(_)));"
        ],
        "code": [
          "{",
          "    let alt = ast::Ast::Alternation(Box::new(Alternation::new(vec![",
          "        ast::Ast::Literal(Box::new(Literal::new('a'))),",
          "        ast::Ast::Literal(Box::new(Literal::new('b'))),",
          "    ])));",
          "    ",
          "    let group = ast::Group {",
          "        span: Span::new(0, 2),",
          "        kind: GroupKind::Capturing,",
          "        ast: Box::new(alt),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    let _child = frame.child();",
          "    let alt = ast::Ast::Alternation(Box::new(Alternation::new(vec![ ast::Ast::Literal(Box::new(Literal::new('a'))), ast::Ast::Literal(Box::new(Literal::new('b'))), ])));",
          "    let group = ast::Group { span: Span::new(0, 2), kind: GroupKind::Capturing, ast: Box::new(alt), };",
          "    let frame = Frame::Group(&group);",
          "    let child_ast = frame.child();",
          "    assert_eq!(child_ast, &group.ast);",
          "    assert!(matches!(child_ast, ast::Ast::Alternation(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition = ast::Ast::Repetition(Box::new(ast::Repetition {",
          "        min: 1,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(ast::Ast::Literal(Box::new(Literal::new('a')))),",
          "    }));",
          "    ",
          "    let group = ast::Group {",
          "        span: Span::new(0, 3),",
          "        kind: GroupKind::Capturing,",
          "        ast: Box::new(repetition),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    let _child = frame.child();",
          "}"
        ],
        "oracle": [
          "    let repetition = ast::Ast::Repetition(Box::new(ast::Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(ast::Ast::Literal(Box::new(Literal::new('a')))) }));",
          "    let group = ast::Group { span: Span::new(0, 3), kind: GroupKind::Capturing, ast: Box::new(repetition) };",
          "    let frame = Frame::Group(&group);",
          "    let child = frame.child();",
          "    assert_eq!(child, &group.ast);"
        ],
        "code": [
          "{",
          "    let repetition = ast::Ast::Repetition(Box::new(ast::Repetition {",
          "        min: 1,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(ast::Ast::Literal(Box::new(Literal::new('a')))),",
          "    }));",
          "    ",
          "    let group = ast::Group {",
          "        span: Span::new(0, 3),",
          "        kind: GroupKind::Capturing,",
          "        ast: Box::new(repetition),",
          "    };",
          "    let frame = Frame::Group(&group);",
          "    let _child = frame.child();",
          "    let repetition = ast::Ast::Repetition(Box::new(ast::Repetition { min: 1, max: Some(2), greedy: true, sub: Box::new(ast::Ast::Literal(Box::new(Literal::new('a')))) }));",
          "    let group = ast::Group { span: Span::new(0, 3), kind: GroupKind::Capturing, ast: Box::new(repetition) };",
          "    let frame = Frame::Group(&group);",
          "    let child = frame.child();",
          "    assert_eq!(child, &group.ast);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]