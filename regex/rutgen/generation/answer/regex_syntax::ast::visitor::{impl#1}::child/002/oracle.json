[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let head = Ast::Literal(Box::new(Literal { value: 'a' }));",
          "    let tail = vec![Ast::Literal(Box::new(Literal { value: 'b' }))];",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    let result = frame.child();",
          "}"
        ],
        "oracle": [
          "    let head = Ast::Literal(Box::new(Literal { value: 'a' }));",
          "    let tail = vec![Ast::Literal(Box::new(Literal { value: 'b' }))];",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    assert_eq!(frame.child(), &head);"
        ],
        "code": [
          "{",
          "    let head = Ast::Literal(Box::new(Literal { value: 'a' }));",
          "    let tail = vec![Ast::Literal(Box::new(Literal { value: 'b' }))];",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    let result = frame.child();",
          "    let head = Ast::Literal(Box::new(Literal { value: 'a' }));",
          "    let tail = vec![Ast::Literal(Box::new(Literal { value: 'b' }))];",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    assert_eq!(frame.child(), &head);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let head = Ast::Dot(Box::new(Span { /* initialization */ }));",
          "    let tail: Vec<Ast> = Vec::new();",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    let result = frame.child();",
          "}"
        ],
        "oracle": [
          "    let head = Ast::Dot(Box::new(Span { /* initialization */ }));",
          "    let tail: Vec<Ast> = Vec::new();",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    assert_eq!(result, &head);"
        ],
        "code": [
          "{",
          "    let head = Ast::Dot(Box::new(Span { /* initialization */ }));",
          "    let tail: Vec<Ast> = Vec::new();",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    let result = frame.child();",
          "    let head = Ast::Dot(Box::new(Span { /* initialization */ }));",
          "    let tail: Vec<Ast> = Vec::new();",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    assert_eq!(result, &head);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let head = Ast::ClassBracketed(Box::new(ClassBracketed { /* initialization */ }));",
          "    let tail = vec![",
          "        Ast::ClassUnicode(Box::new(ClassUnicode { /* initialization */ })),",
          "        Ast::Assertion(Box::new(Assertion { /* initialization */ })),",
          "    ];",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    let result = frame.child();",
          "}"
        ],
        "oracle": [
          "    let head = Ast::ClassBracketed(Box::new(ClassBracketed { /* initialization */ }));",
          "    let tail = vec![",
          "    Ast::ClassUnicode(Box::new(ClassUnicode { /* initialization */ })),",
          "    Ast::Assertion(Box::new(Assertion { /* initialization */ })),",
          "    ];",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    assert_eq!(frame.child(), &head);"
        ],
        "code": [
          "{",
          "    let head = Ast::ClassBracketed(Box::new(ClassBracketed { /* initialization */ }));",
          "    let tail = vec![",
          "        Ast::ClassUnicode(Box::new(ClassUnicode { /* initialization */ })),",
          "        Ast::Assertion(Box::new(Assertion { /* initialization */ })),",
          "    ];",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    let result = frame.child();",
          "    let head = Ast::ClassBracketed(Box::new(ClassBracketed { /* initialization */ }));",
          "    let tail = vec![",
          "    Ast::ClassUnicode(Box::new(ClassUnicode { /* initialization */ })),",
          "    Ast::Assertion(Box::new(Assertion { /* initialization */ })),",
          "    ];",
          "    let frame = Frame::Concat { head: &head, tail: &tail };",
          "    assert_eq!(frame.child(), &head);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]