[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Ast::Literal(Box::new(Literal::new('a')));",
          "    let frame = Frame::Alternation {",
          "        head: &literal,",
          "        tail: &[],",
          "    };",
          "    let _ = frame.child();",
          "}"
        ],
        "oracle": [
          "    let literal = Ast::Literal(Box::new(Literal::new('a')));",
          "    let frame = Frame::Alternation {",
          "    head: &literal,",
          "    tail: &[],",
          "    };",
          "    assert_eq!(frame.child(), &literal);"
        ],
        "code": [
          "{",
          "    let literal = Ast::Literal(Box::new(Literal::new('a')));",
          "    let frame = Frame::Alternation {",
          "        head: &literal,",
          "        tail: &[],",
          "    };",
          "    let _ = frame.child();",
          "    let literal = Ast::Literal(Box::new(Literal::new('a')));",
          "    let frame = Frame::Alternation {",
          "    head: &literal,",
          "    tail: &[],",
          "    };",
          "    assert_eq!(frame.child(), &literal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_ast = Ast::Group(Box::new(Group {",
          "        span: Span::default(),",
          "        kind: GroupKind::Capture(1),",
          "        ast: Box::new(Ast::Literal(Box::new(Literal::new('b')))),",
          "    }));",
          "    let frame = Frame::Alternation {",
          "        head: &group_ast,",
          "        tail: &[],",
          "    };",
          "    let _ = frame.child();",
          "}"
        ],
        "oracle": [
          "    let group_ast = Ast::Group(Box::new(Group {",
          "    span: Span::default(),",
          "    kind: GroupKind::Capture(1),",
          "    ast: Box::new(Ast::Literal(Box::new(Literal::new('b')))),",
          "    }));",
          "    let frame = Frame::Alternation {",
          "    head: &group_ast,",
          "    tail: &[],",
          "    };",
          "    assert_eq!(frame.child(), &group_ast);"
        ],
        "code": [
          "{",
          "    let group_ast = Ast::Group(Box::new(Group {",
          "        span: Span::default(),",
          "        kind: GroupKind::Capture(1),",
          "        ast: Box::new(Ast::Literal(Box::new(Literal::new('b')))),",
          "    }));",
          "    let frame = Frame::Alternation {",
          "        head: &group_ast,",
          "        tail: &[],",
          "    };",
          "    let _ = frame.child();",
          "    let group_ast = Ast::Group(Box::new(Group {",
          "    span: Span::default(),",
          "    kind: GroupKind::Capture(1),",
          "    ast: Box::new(Ast::Literal(Box::new(Literal::new('b')))),",
          "    }));",
          "    let frame = Frame::Alternation {",
          "    head: &group_ast,",
          "    tail: &[],",
          "    };",
          "    assert_eq!(frame.child(), &group_ast);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition_ast = Ast::Repetition(Box::new(Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(Ast::Literal(Box::new(Literal::new('c')))),",
          "    }));",
          "    let frame = Frame::Alternation {",
          "        head: &repetition_ast,",
          "        tail: &[],",
          "    };",
          "    let _ = frame.child();",
          "}"
        ],
        "oracle": [
          "    let repetition_ast = Ast::Repetition(Box::new(Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Ast::Literal(Box::new(Literal::new('c')))), }));",
          "    let frame = Frame::Alternation { head: &repetition_ast, tail: &[], };",
          "    assert_eq!(frame.child(), &repetition_ast);"
        ],
        "code": [
          "{",
          "    let repetition_ast = Ast::Repetition(Box::new(Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(Ast::Literal(Box::new(Literal::new('c')))),",
          "    }));",
          "    let frame = Frame::Alternation {",
          "        head: &repetition_ast,",
          "        tail: &[],",
          "    };",
          "    let _ = frame.child();",
          "    let repetition_ast = Ast::Repetition(Box::new(Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Ast::Literal(Box::new(Literal::new('c')))), }));",
          "    let frame = Frame::Alternation { head: &repetition_ast, tail: &[], };",
          "    assert_eq!(frame.child(), &repetition_ast);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let concat_ast = Ast::Concat(Box::new(Concat {",
          "        nodes: vec![",
          "            Ast::Literal(Box::new(Literal::new('d'))),",
          "            Ast::Literal(Box::new(Literal::new('e'))),",
          "        ],",
          "    }));",
          "    let frame = Frame::Alternation {",
          "        head: &concat_ast,",
          "        tail: &[],",
          "    };",
          "    let _ = frame.child();",
          "}"
        ],
        "oracle": [
          "    let concat_ast = Ast::Concat(Box::new(Concat { nodes: vec![Ast::Literal(Box::new(Literal::new('d'))), Ast::Literal(Box::new(Literal::new('e')))] }));",
          "    let frame = Frame::Alternation { head: &concat_ast, tail: &[] };",
          "    assert_eq!(frame.child(), &concat_ast);"
        ],
        "code": [
          "{",
          "    let concat_ast = Ast::Concat(Box::new(Concat {",
          "        nodes: vec![",
          "            Ast::Literal(Box::new(Literal::new('d'))),",
          "            Ast::Literal(Box::new(Literal::new('e'))),",
          "        ],",
          "    }));",
          "    let frame = Frame::Alternation {",
          "        head: &concat_ast,",
          "        tail: &[],",
          "    };",
          "    let _ = frame.child();",
          "    let concat_ast = Ast::Concat(Box::new(Concat { nodes: vec![Ast::Literal(Box::new(Literal::new('d'))), Ast::Literal(Box::new(Literal::new('e')))] }));",
          "    let frame = Frame::Alternation { head: &concat_ast, tail: &[] };",
          "    assert_eq!(frame.child(), &concat_ast);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]