[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: true,",
          "        sub: Box::new(Ast::Literal(Box::new(Literal::new('a')))),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _result = frame.child();",
          "}"
        ],
        "oracle": [
          "    let repetition = Repetition { min: 0, max: Some(5), greedy: true, sub: Box::new(Ast::Literal(Box::new(Literal::new('a')))) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let result = frame.child();",
          "    assert_eq!(result, &Ast::Literal(Box::new(Literal::new('a'))));",
          "    ",
          "    let repetition_empty = Repetition { min: 1, max: Some(10), greedy: false, sub: Box::new(Ast::Literal(Box::new(Literal::new('b')))) };",
          "    let frame_empty = Frame::Repetition(&repetition_empty);",
          "    let result_empty = frame_empty.child();",
          "    assert_eq!(result_empty, &Ast::Literal(Box::new(Literal::new('b'))));"
        ],
        "code": [
          "{",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: true,",
          "        sub: Box::new(Ast::Literal(Box::new(Literal::new('a')))),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _result = frame.child();",
          "    let repetition = Repetition { min: 0, max: Some(5), greedy: true, sub: Box::new(Ast::Literal(Box::new(Literal::new('a')))) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let result = frame.child();",
          "    assert_eq!(result, &Ast::Literal(Box::new(Literal::new('a'))));",
          "    ",
          "    let repetition_empty = Repetition { min: 1, max: Some(10), greedy: false, sub: Box::new(Ast::Literal(Box::new(Literal::new('b')))) };",
          "    let frame_empty = Frame::Repetition(&repetition_empty);",
          "    let result_empty = frame_empty.child();",
          "    assert_eq!(result_empty, &Ast::Literal(Box::new(Literal::new('b'))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: false,",
          "        sub: Box::new(Ast::Literal(Box::new(Literal::new('b')))),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _result = frame.child();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, &Ast::Literal(Box::new(Literal::new('b'))));"
        ],
        "code": [
          "{",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(3),",
          "        greedy: false,",
          "        sub: Box::new(Ast::Literal(Box::new(Literal::new('b')))),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _result = frame.child();",
          "    assert_eq!(_result, &Ast::Literal(Box::new(Literal::new('b'))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition = Repetition {",
          "        min: 2,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Ast::Literal(Box::new(Literal::new('c')))),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _result = frame.child();",
          "}"
        ],
        "oracle": [
          "    let repetition = Repetition { min: 2, max: None, greedy: true, sub: Box::new(Ast::Literal(Box::new(Literal::new('c')))) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let result = frame.child();",
          "    assert_eq!(result, &repetition.sub);",
          "    assert!(matches!(frame, Frame::Repetition(_)));"
        ],
        "code": [
          "{",
          "    let repetition = Repetition {",
          "        min: 2,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Ast::Literal(Box::new(Literal::new('c')))),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _result = frame.child();",
          "    let repetition = Repetition { min: 2, max: None, greedy: true, sub: Box::new(Ast::Literal(Box::new(Literal::new('c')))) };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let result = frame.child();",
          "    assert_eq!(result, &repetition.sub);",
          "    assert!(matches!(frame, Frame::Repetition(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(10),",
          "        greedy: false,",
          "        sub: Box::new(Ast::Concat(Box::new(Concat::new(vec![",
          "            Ast::Literal(Box::new(Literal::new('d'))),",
          "            Ast::Literal(Box::new(Literal::new('e'))),",
          "        ])))),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _result = frame.child();",
          "}"
        ],
        "oracle": [
          "    let repetition = Repetition { min: 0, max: Some(10), greedy: false, sub: Box::new(Ast::Concat(Box::new(Concat::new(vec![Ast::Literal(Box::new(Literal::new('d'))), Ast::Literal(Box::new(Literal::new('e')))])))));",
          "    let frame = Frame::Repetition(&repetition);",
          "    let result = frame.child();",
          "    assert_eq!(result, &repetition.sub);"
        ],
        "code": [
          "{",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(10),",
          "        greedy: false,",
          "        sub: Box::new(Ast::Concat(Box::new(Concat::new(vec![",
          "            Ast::Literal(Box::new(Literal::new('d'))),",
          "            Ast::Literal(Box::new(Literal::new('e'))),",
          "        ])))),",
          "    };",
          "    let frame = Frame::Repetition(&repetition);",
          "    let _result = frame.child();",
          "    let repetition = Repetition { min: 0, max: Some(10), greedy: false, sub: Box::new(Ast::Concat(Box::new(Concat::new(vec![Ast::Literal(Box::new(Literal::new('d'))), Ast::Literal(Box::new(Literal::new('e')))])))));",
          "    let frame = Frame::Repetition(&repetition);",
          "    let result = frame.child();",
          "    assert_eq!(result, &repetition.sub);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]