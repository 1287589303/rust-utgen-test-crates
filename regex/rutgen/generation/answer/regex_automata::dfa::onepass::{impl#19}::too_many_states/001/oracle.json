[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_too_many_states_out_of_bounds() {",
      "    let limit = 18_446_744_073_709_551_616;",
      "    let _result = BuildError::too_many_states(limit);",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = 0;",
          "    let _result = BuildError::too_many_states(limit);",
          "}"
        ],
        "oracle": [
          "    BuildError::too_many_states(18_446_744_073_709_551_616); // expected panic",
          "    BuildError::too_many_states(0); // expected: BuildError { kind: BuildErrorKind::TooManyStates { limit: 0 } }"
        ],
        "code": [
          "{",
          "    let limit = 0;",
          "    let _result = BuildError::too_many_states(limit);",
          "    BuildError::too_many_states(18_446_744_073_709_551_616); // expected panic",
          "    BuildError::too_many_states(0); // expected: BuildError { kind: BuildErrorKind::TooManyStates { limit: 0 } }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = 1;",
          "    let _result = BuildError::too_many_states(limit);",
          "}"
        ],
        "oracle": [
          "    let limit = 1;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "    ",
          "    let limit = 10;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "    ",
          "    let limit = 100;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "    ",
          "    let limit = 1_000;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "    ",
          "    let limit = 18_446_744_073_709_551_615;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });"
        ],
        "code": [
          "{",
          "    let limit = 1;",
          "    let _result = BuildError::too_many_states(limit);",
          "    let limit = 1;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "    ",
          "    let limit = 10;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "    ",
          "    let limit = 100;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "    ",
          "    let limit = 1_000;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "    ",
          "    let limit = 18_446_744_073_709_551_615;",
          "    let result = BuildError::too_many_states(limit);",
          "    assert_eq!(result, BuildError { kind: BuildErrorKind::TooManyStates { limit } });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = 1_000;",
          "    let _result = BuildError::too_many_states(limit);",
          "}"
        ],
        "oracle": [
          "    BuildError { kind: BuildErrorKind::TooManyStates { limit: 18_446_744_073_709_551_616 } }",
          "    BuildError { kind: BuildErrorKind::TooManyStates { limit: 1_000 } }"
        ],
        "code": [
          "{",
          "    let limit = 1_000;",
          "    let _result = BuildError::too_many_states(limit);",
          "    BuildError { kind: BuildErrorKind::TooManyStates { limit: 18_446_744_073_709_551_616 } }",
          "    BuildError { kind: BuildErrorKind::TooManyStates { limit: 1_000 } }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = 10_000;",
          "    let _result = BuildError::too_many_states(limit);",
          "}"
        ],
        "oracle": [
          "    let limit_out_of_bounds = 18_446_744_073_709_551_616;",
          "    let expected_error_out_of_bounds = BuildError { kind: BuildErrorKind::TooManyStates { limit: limit_out_of_bounds } };",
          "    assert_eq!(BuildError::too_many_states(limit_out_of_bounds), expected_error_out_of_bounds);",
          "    ",
          "    let limit_within_bounds = 10_000;",
          "    let expected_error_within_bounds = BuildError { kind: BuildErrorKind::TooManyStates { limit: limit_within_bounds } };",
          "    assert_eq!(BuildError::too_many_states(limit_within_bounds), expected_error_within_bounds);"
        ],
        "code": [
          "{",
          "    let limit = 10_000;",
          "    let _result = BuildError::too_many_states(limit);",
          "    let limit_out_of_bounds = 18_446_744_073_709_551_616;",
          "    let expected_error_out_of_bounds = BuildError { kind: BuildErrorKind::TooManyStates { limit: limit_out_of_bounds } };",
          "    assert_eq!(BuildError::too_many_states(limit_out_of_bounds), expected_error_out_of_bounds);",
          "    ",
          "    let limit_within_bounds = 10_000;",
          "    let expected_error_within_bounds = BuildError { kind: BuildErrorKind::TooManyStates { limit: limit_within_bounds } };",
          "    assert_eq!(BuildError::too_many_states(limit_within_bounds), expected_error_within_bounds);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = 18_446_744_073_709_551_615;",
          "    let _result = BuildError::too_many_states(limit);",
          "}"
        ],
        "oracle": [
          "    let limit_out_of_bounds = 18_446_744_073_709_551_616;",
          "    let error_out_of_bounds = BuildError::too_many_states(limit_out_of_bounds);",
          "    assert_eq!(error_out_of_bounds.kind, BuildErrorKind::TooManyStates { limit: limit_out_of_bounds });",
          "    ",
          "    let limit_within_bounds = 18_446_744_073_709_551_615;",
          "    let error_within_bounds = BuildError::too_many_states(limit_within_bounds);",
          "    assert_eq!(error_within_bounds.kind, BuildErrorKind::TooManyStates { limit: limit_within_bounds });"
        ],
        "code": [
          "{",
          "    let limit = 18_446_744_073_709_551_615;",
          "    let _result = BuildError::too_many_states(limit);",
          "    let limit_out_of_bounds = 18_446_744_073_709_551_616;",
          "    let error_out_of_bounds = BuildError::too_many_states(limit_out_of_bounds);",
          "    assert_eq!(error_out_of_bounds.kind, BuildErrorKind::TooManyStates { limit: limit_out_of_bounds });",
          "    ",
          "    let limit_within_bounds = 18_446_744_073_709_551_615;",
          "    let error_within_bounds = BuildError::too_many_states(limit_within_bounds);",
          "    assert_eq!(error_within_bounds.kind, BuildErrorKind::TooManyStates { limit: limit_within_bounds });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]