[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = Vec::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, b\"&&\");"
        ],
        "code": [
          "{",
          "    let mut output = Vec::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    assert_eq!(output, b\"&&\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = Vec::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let ast = ast::ClassSetBinaryOpKind::Difference;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap(); // Expected output to be \"--\"",
          "    assert_eq!(output, b\"--\");"
        ],
        "code": [
          "{",
          "    let mut output = Vec::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let ast = ast::ClassSetBinaryOpKind::Difference;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap(); // Expected output to be \"--\"",
          "    assert_eq!(output, b\"--\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = Vec::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap() == Ok(\"~~\".to_string())"
        ],
        "code": [
          "{",
          "    let mut output = Vec::new();",
          "    let mut writer = Writer { wtr: &mut output };",
          "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap() == Ok(\"~~\".to_string())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]