[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
          "",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::Intersection).unwrap();",
          "    assert_eq!(writer.wtr.output, \"&&\");",
          "    writer.wtr.output.clear();",
          "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::Difference).unwrap();",
          "    assert_eq!(writer.wtr.output, \"--\");",
          "    writer.wtr.output.clear();",
          "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::SymmetricDifference).unwrap();",
          "    assert_eq!(writer.wtr.output, \"~~\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
          "",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::Intersection).unwrap();",
          "    assert_eq!(writer.wtr.output, \"&&\");",
          "    writer.wtr.output.clear();",
          "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::Difference).unwrap();",
          "    assert_eq!(writer.wtr.output, \"--\");",
          "    writer.wtr.output.clear();",
          "    writer.fmt_class_set_binary_op_kind(&ast::ClassSetBinaryOpKind::SymmetricDifference).unwrap();",
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::Difference;",
          "",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"--\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::Difference;",
          "",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"--\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"&&\");",
          "    let ast = ast::ClassSetBinaryOpKind::Difference;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"--\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"&&\");",
          "    let ast = ast::ClassSetBinaryOpKind::Difference;",
          "    writer.fmt_class_set_binary_op_kind(&ast).unwrap();",
          "    assert_eq!(writer.wtr.output, \"--\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]