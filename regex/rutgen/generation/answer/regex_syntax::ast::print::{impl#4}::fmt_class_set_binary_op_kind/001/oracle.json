[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
          "",
          "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "    assert!(_result.is_ok());"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::Intersection;",
          "",
          "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "    assert!(_result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::Difference;",
          "",
          "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "    assert!(result.is_ok());",
          "    let ast_diff = ast::ClassSetBinaryOpKind::Difference;",
          "    let _result_diff = writer.fmt_class_set_binary_op_kind(&ast_diff);",
          "    assert_eq!(writer.wtr.output, \"--\");",
          "    let ast_intersection = ast::ClassSetBinaryOpKind::Intersection;",
          "    let _result_intersection = writer.fmt_class_set_binary_op_kind(&ast_intersection);",
          "    assert_eq!(writer.wtr.output, \"&&\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::Difference;",
          "",
          "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "    assert!(result.is_ok());",
          "    let ast_diff = ast::ClassSetBinaryOpKind::Difference;",
          "    let _result_diff = writer.fmt_class_set_binary_op_kind(&ast_diff);",
          "    assert_eq!(writer.wtr.output, \"--\");",
          "    let ast_intersection = ast::ClassSetBinaryOpKind::Intersection;",
          "    let _result_intersection = writer.fmt_class_set_binary_op_kind(&ast_intersection);",
          "    assert_eq!(writer.wtr.output, \"&&\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "",
          "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "    assert!(_result.is_ok());"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: MockWriter { output: String::new() } };",
          "    let ast = ast::ClassSetBinaryOpKind::SymmetricDifference;",
          "",
          "    let _result = writer.fmt_class_set_binary_op_kind(&ast);",
          "    assert_eq!(writer.wtr.output, \"~~\");",
          "    assert!(_result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]