[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(1)), alt2: StateID(SmallIndex(2)) };",
          "    state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(1)), alt2: StateID(SmallIndex(2)) };",
          "    state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(1)) };",
          "    state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(2)), alt2: StateID(SmallIndex(3)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: StateID(SmallIndex(4)), pattern_id: PatternID(SmallIndex(5)), group_index: SmallIndex(0), slot: SmallIndex(1) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(6)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(7)) } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(1)) };",
          "    state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(2)), alt2: StateID(SmallIndex(3)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: StateID(SmallIndex(4)), pattern_id: PatternID(SmallIndex(5)), group_index: SmallIndex(0), slot: SmallIndex(1) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(6)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(7)) } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Capture { ",
          "        next: StateID(SmallIndex(1)), ",
          "        pattern_id: PatternID(SmallIndex(2)), ",
          "        group_index: SmallIndex(0), ",
          "        slot: SmallIndex(1) ",
          "    };",
          "    state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(3)), alt2: StateID(SmallIndex(4)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(5)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture {",
          "    next: StateID(SmallIndex(6)),",
          "    pattern_id: PatternID(SmallIndex(7)),",
          "    group_index: SmallIndex(0),",
          "    slot: SmallIndex(1)",
          "    }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(8)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(9)) } }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail; assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Capture { ",
          "        next: StateID(SmallIndex(1)), ",
          "        pattern_id: PatternID(SmallIndex(2)), ",
          "        group_index: SmallIndex(0), ",
          "        slot: SmallIndex(1) ",
          "    };",
          "    state.memory_usage();",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(3)), alt2: StateID(SmallIndex(4)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(5)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture {",
          "    next: StateID(SmallIndex(6)),",
          "    pattern_id: PatternID(SmallIndex(7)),",
          "    group_index: SmallIndex(0),",
          "    slot: SmallIndex(1)",
          "    }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(8)) }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(9)) } }; assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail; assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Look { ",
          "        look: Look::Start, ",
          "        next: StateID(SmallIndex(1)) ",
          "    };",
          "    state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(1)), alt2: StateID(SmallIndex(2)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: StateID(SmallIndex(1)), pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(1)) } };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Look { ",
          "        look: Look::Start, ",
          "        next: StateID(SmallIndex(1)) ",
          "    };",
          "    state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(1)), alt2: StateID(SmallIndex(2)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: StateID(SmallIndex(1)), pattern_id: PatternID(SmallIndex(1)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(1)) } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition {",
          "            start: 10,",
          "            end: 20,",
          "            next: StateID(SmallIndex(1)),",
          "        },",
          "    };",
          "    state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    state.memory_usage() == 0  // Precondition for State::ByteRange",
          "    let state = State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(1)),",
          "    alt2: StateID(SmallIndex(2)),",
          "    };",
          "    state.memory_usage() == 0  // Precondition for State::BinaryUnion",
          "    let state = State::Match {",
          "    pattern_id: PatternID(SmallIndex(1)),",
          "    };",
          "    state.memory_usage() == 0  // Precondition for State::Match",
          "    let state = State::Capture {",
          "    next: StateID(SmallIndex(1)),",
          "    pattern_id: PatternID(SmallIndex(2)),",
          "    group_index: SmallIndex(0),",
          "    slot: SmallIndex(1),",
          "    };",
          "    state.memory_usage() == 0  // Precondition for State::Capture",
          "    let state = State::Look {",
          "    look: Look::Start,",
          "    next: StateID(SmallIndex(1)),",
          "    };",
          "    state.memory_usage() == 0  // Precondition for State::Look",
          "    let state = State::Fail;",
          "    state.memory_usage() == 0  // Precondition for State::Fail"
        ],
        "code": [
          "{",
          "    let state = State::ByteRange {",
          "        trans: Transition {",
          "            start: 10,",
          "            end: 20,",
          "            next: StateID(SmallIndex(1)),",
          "        },",
          "    };",
          "    state.memory_usage();",
          "    state.memory_usage() == 0  // Precondition for State::ByteRange",
          "    let state = State::BinaryUnion {",
          "    alt1: StateID(SmallIndex(1)),",
          "    alt2: StateID(SmallIndex(2)),",
          "    };",
          "    state.memory_usage() == 0  // Precondition for State::BinaryUnion",
          "    let state = State::Match {",
          "    pattern_id: PatternID(SmallIndex(1)),",
          "    };",
          "    state.memory_usage() == 0  // Precondition for State::Match",
          "    let state = State::Capture {",
          "    next: StateID(SmallIndex(1)),",
          "    pattern_id: PatternID(SmallIndex(2)),",
          "    group_index: SmallIndex(0),",
          "    slot: SmallIndex(1),",
          "    };",
          "    state.memory_usage() == 0  // Precondition for State::Capture",
          "    let state = State::Look {",
          "    look: Look::Start,",
          "    next: StateID(SmallIndex(1)),",
          "    };",
          "    state.memory_usage() == 0  // Precondition for State::Look",
          "    let state = State::Fail;",
          "    state.memory_usage() == 0  // Precondition for State::Fail",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    state.memory_usage() == 0",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(1)) };",
          "    state.memory_usage() == 0",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(2)) };",
          "    state.memory_usage() == 0",
          "    let state = State::Capture { next: StateID(SmallIndex(3)), pattern_id: PatternID(SmallIndex(4)), group_index: SmallIndex(5), slot: SmallIndex(6) };",
          "    state.memory_usage() == 0",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(7)) };",
          "    state.memory_usage() == 0",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(8)) } };",
          "    state.memory_usage() == 0"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    state.memory_usage();",
          "    state.memory_usage() == 0",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(1)) };",
          "    state.memory_usage() == 0",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(2)) };",
          "    state.memory_usage() == 0",
          "    let state = State::Capture { next: StateID(SmallIndex(3)), pattern_id: PatternID(SmallIndex(4)), group_index: SmallIndex(5), slot: SmallIndex(6) };",
          "    state.memory_usage() == 0",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(7)) };",
          "    state.memory_usage() == 0",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(8)) } };",
          "    state.memory_usage() == 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]