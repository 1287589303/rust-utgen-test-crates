[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(SmallIndex(1));",
          "    let state = State::Union {",
          "        alternates: Box::new([state_id]),",
          "    };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 1 * mem::size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state_id = StateID(SmallIndex(1));",
          "    let state = State::Union {",
          "        alternates: Box::new([state_id]),",
          "    };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 1 * mem::size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_ids: Box<[StateID]> = Box::new([",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(2)),",
          "        StateID(SmallIndex(3)),",
          "    ]);",
          "    let state = State::Union { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state_ids: Box<[StateID]> = Box::new([StateID(SmallIndex(1)), StateID(SmallIndex(2)), StateID(SmallIndex(3))]);",
          "    let state = State::Union { alternates: state_ids };",
          "    assert_eq!(state.memory_usage(), 3 * mem::size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state_ids: Box<[StateID]> = Box::new([",
          "        StateID(SmallIndex(1)),",
          "        StateID(SmallIndex(2)),",
          "        StateID(SmallIndex(3)),",
          "    ]);",
          "    let state = State::Union { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "    let state_ids: Box<[StateID]> = Box::new([StateID(SmallIndex(1)), StateID(SmallIndex(2)), StateID(SmallIndex(3))]);",
          "    let state = State::Union { alternates: state_ids };",
          "    assert_eq!(state.memory_usage(), 3 * mem::size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_ids: Box<[StateID]> = (0..256).map(|i| StateID(SmallIndex(i))).collect();",
          "    let state = State::Union { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state_ids: Box<[StateID]> = (0..256).map(|i| StateID(SmallIndex(i))).collect();",
          "    let state = State::Union { alternates: state_ids };",
          "    assert_eq!(state.memory_usage(), 256 * mem::size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let state_ids: Box<[StateID]> = (0..256).map(|i| StateID(SmallIndex(i))).collect();",
          "    let state = State::Union { alternates: state_ids };",
          "    let _ = state.memory_usage();",
          "    let state_ids: Box<[StateID]> = (0..256).map(|i| StateID(SmallIndex(i))).collect();",
          "    let state = State::Union { alternates: state_ids };",
          "    assert_eq!(state.memory_usage(), 256 * mem::size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]