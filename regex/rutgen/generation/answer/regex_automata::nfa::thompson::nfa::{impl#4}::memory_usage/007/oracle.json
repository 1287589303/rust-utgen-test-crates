[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions: Box<[StateID]> = (0..256).map(|_| StateID(SmallIndex::default())).collect();",
          "    let state = State::Dense(DenseTransitions { transitions });",
          "    let _usage = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_usage, 256 * mem::size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let transitions: Box<[StateID]> = (0..256).map(|_| StateID(SmallIndex::default())).collect();",
          "    let state = State::Dense(DenseTransitions { transitions });",
          "    let _usage = state.memory_usage();",
          "    assert_eq!(_usage, 256 * mem::size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions: Box<[StateID]> = (0..256).map(|i| StateID(SmallIndex(SmallIndex(i as u32)))).collect();",
          "    let state = State::Dense(DenseTransitions { transitions });",
          "    let _usage = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let transitions: Box<[StateID]> = (0..256).map(|i| StateID(SmallIndex(SmallIndex(i as u32)))).collect();",
          "    let state = State::Dense(DenseTransitions { transitions });",
          "    assert_eq!(state.memory_usage(), 256 * mem::size_of::<StateID>());"
        ],
        "code": [
          "{",
          "    let transitions: Box<[StateID]> = (0..256).map(|i| StateID(SmallIndex(SmallIndex(i as u32)))).collect();",
          "    let state = State::Dense(DenseTransitions { transitions });",
          "    let _usage = state.memory_usage();",
          "    let transitions: Box<[StateID]> = (0..256).map(|i| StateID(SmallIndex(SmallIndex(i as u32)))).collect();",
          "    let state = State::Dense(DenseTransitions { transitions });",
          "    assert_eq!(state.memory_usage(), 256 * mem::size_of::<StateID>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]