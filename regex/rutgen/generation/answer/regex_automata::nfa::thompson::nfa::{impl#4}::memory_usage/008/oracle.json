[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = SparseTransitions {",
          "        transitions: Box::new([Transition { start: 0, end: 10, next: StateID(SmallIndex(1)) }]),",
          "    };",
          "    let state = State::Sparse(transitions);",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 1 * mem::size_of::<Transition>());"
        ],
        "code": [
          "{",
          "    let transitions = SparseTransitions {",
          "        transitions: Box::new([Transition { start: 0, end: 10, next: StateID(SmallIndex(1)) }]),",
          "    };",
          "    let state = State::Sparse(transitions);",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 1 * mem::size_of::<Transition>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = SparseTransitions {",
          "        transitions: Box::new([",
          "            Transition { start: 0, end: 10, next: StateID(SmallIndex(1)) },",
          "            Transition { start: 11, end: 20, next: StateID(SmallIndex(2)) },",
          "            Transition { start: 21, end: 30, next: StateID(SmallIndex(3)) },",
          "        ]),",
          "    };",
          "    let state = State::Sparse(transitions);",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 3 * mem::size_of::<Transition>());"
        ],
        "code": [
          "{",
          "    let transitions = SparseTransitions {",
          "        transitions: Box::new([",
          "            Transition { start: 0, end: 10, next: StateID(SmallIndex(1)) },",
          "            Transition { start: 11, end: 20, next: StateID(SmallIndex(2)) },",
          "            Transition { start: 21, end: 30, next: StateID(SmallIndex(3)) },",
          "        ]),",
          "    };",
          "    let state = State::Sparse(transitions);",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 3 * mem::size_of::<Transition>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = SparseTransitions {",
          "        transitions: Box::new((0..256).map(|i| Transition { start: i as u8, end: (i + 10) as u8, next: StateID(SmallIndex(i as u32)) }).collect::<Vec<_>>().into_boxed_slice()),",
          "    };",
          "    let state = State::Sparse(transitions);",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let transitions = SparseTransitions { transitions: Box::new((0..256).map(|i| Transition { start: i as u8, end: (i + 10) as u8, next: StateID(SmallIndex(i as u32)) }).collect::<Vec<_>>().into_boxed_slice()) };",
          "    let state = State::Sparse(transitions);",
          "    let expected_memory_usage = state.transitions.len() * mem::size_of::<Transition>();",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);"
        ],
        "code": [
          "{",
          "    let transitions = SparseTransitions {",
          "        transitions: Box::new((0..256).map(|i| Transition { start: i as u8, end: (i + 10) as u8, next: StateID(SmallIndex(i as u32)) }).collect::<Vec<_>>().into_boxed_slice()),",
          "    };",
          "    let state = State::Sparse(transitions);",
          "    let _ = state.memory_usage();",
          "    let transitions = SparseTransitions { transitions: Box::new((0..256).map(|i| Transition { start: i as u8, end: (i + 10) as u8, next: StateID(SmallIndex(i as u32)) }).collect::<Vec<_>>().into_boxed_slice()) };",
          "    let state = State::Sparse(transitions);",
          "    let expected_memory_usage = state.transitions.len() * mem::size_of::<Transition>();",
          "    assert_eq!(state.memory_usage(), expected_memory_usage);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]