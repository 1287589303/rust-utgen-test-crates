[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(0)) }};",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: StateID(SmallIndex(2)), pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(1)), alt2: StateID(SmallIndex(2)) };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state = State::Fail;",
          "    let _ = state.memory_usage();",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(0)) }};",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: StateID(SmallIndex(2)), pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(1)), alt2: StateID(SmallIndex(2)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition { start: 0, end: 0, next: StateID(SmallIndex(0)) };",
          "    let state = State::ByteRange { trans: transition };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: StateID(SmallIndex(0)), pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let transition = Transition { start: 0, end: 0, next: StateID(SmallIndex(0)) };",
          "    let state = State::ByteRange { trans: transition };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(1)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: StateID(SmallIndex(0)), pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: StateID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(SmallIndex(0));",
          "    let look = Look::Start;",
          "    let state = State::Look { look, next: state_id };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0); // State::Fail should return 0 for memory usage",
          "    let state = State::BinaryUnion { alt1: state_id, alt2: state_id };",
          "    assert_eq!(state.memory_usage(), 0); // State::BinaryUnion should return 0 for memory usage",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0); // State::Match should return 0 for memory usage",
          "    let state = State::Capture { next: state_id, pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0); // State::Capture should return 0 for memory usage",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: state_id } };",
          "    assert_eq!(state.memory_usage(), 0); // State::ByteRange should return 0 for memory usage",
          "    let state = State::Look { look: Look::Start, next: state_id };",
          "    assert_eq!(state.memory_usage(), 0); // State::Look should return 0 for memory usage"
        ],
        "code": [
          "{",
          "    let state_id = StateID(SmallIndex(0));",
          "    let look = Look::Start;",
          "    let state = State::Look { look, next: state_id };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0); // State::Fail should return 0 for memory usage",
          "    let state = State::BinaryUnion { alt1: state_id, alt2: state_id };",
          "    assert_eq!(state.memory_usage(), 0); // State::BinaryUnion should return 0 for memory usage",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0); // State::Match should return 0 for memory usage",
          "    let state = State::Capture { next: state_id, pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0); // State::Capture should return 0 for memory usage",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: state_id } };",
          "    assert_eq!(state.memory_usage(), 0); // State::ByteRange should return 0 for memory usage",
          "    let state = State::Look { look: Look::Start, next: state_id };",
          "    assert_eq!(state.memory_usage(), 0); // State::Look should return 0 for memory usage",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id1 = StateID(SmallIndex(1));",
          "    let state_id2 = StateID(SmallIndex(2));",
          "    let state = State::BinaryUnion { alt1: state_id1, alt2: state_id2 };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: state_id1, pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: state_id1 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: state_id1 } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state_id1 = StateID(SmallIndex(1));",
          "    let state_id2 = StateID(SmallIndex(2));",
          "    let state = State::BinaryUnion { alt1: state_id1, alt2: state_id2 };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Capture { next: state_id1, pattern_id: PatternID(SmallIndex(0)), group_index: SmallIndex(0), slot: SmallIndex(0) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Look { look: Look::Start, next: state_id1 };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Match { pattern_id: PatternID(SmallIndex(0)) };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::ByteRange { trans: Transition { start: 0, end: 255, next: state_id1 } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id = StateID(SmallIndex(3));",
          "    let pattern_id = PatternID(SmallIndex(1));",
          "    let group_index = SmallIndex(0);",
          "    let slot = SmallIndex(0);",
          "    let state = State::Capture { next: state_id, pattern_id, group_index, slot };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Match { pattern_id };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::BinaryUnion { alt1: state_id, alt2: state_id };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Look { look: Look::Start, next: state_id };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: state_id } };",
          "    assert_eq!(state.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let state_id = StateID(SmallIndex(3));",
          "    let pattern_id = PatternID(SmallIndex(1));",
          "    let group_index = SmallIndex(0);",
          "    let slot = SmallIndex(0);",
          "    let state = State::Capture { next: state_id, pattern_id, group_index, slot };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Fail;",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Match { pattern_id };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::BinaryUnion { alt1: state_id, alt2: state_id };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::Look { look: Look::Start, next: state_id };",
          "    assert_eq!(state.memory_usage(), 0);",
          "    ",
          "    let state = State::ByteRange { trans: Transition { start: b'a', end: b'z', next: state_id } };",
          "    assert_eq!(state.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID(SmallIndex(2));",
          "    let state = State::Match { pattern_id };",
          "    let _ = state.memory_usage();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(State::Fail.memory_usage(), 0);",
          "    assert_eq!(State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(1)) }.memory_usage(), 0);",
          "    assert_eq!(State::Match { pattern_id: PatternID(SmallIndex(3)) }.memory_usage(), 0);",
          "    assert_eq!(State::Capture { next: StateID(SmallIndex(1)), pattern_id: PatternID(SmallIndex(2)), group_index: SmallIndex(0), slot: SmallIndex(1) }.memory_usage(), 0);",
          "    assert_eq!(State::Look { look: Look::Start, next: StateID(SmallIndex(1)) }.memory_usage(), 0);",
          "    assert_eq!(State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(1)) } }.memory_usage(), 0);"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID(SmallIndex(2));",
          "    let state = State::Match { pattern_id };",
          "    let _ = state.memory_usage();",
          "    assert_eq!(State::Fail.memory_usage(), 0);",
          "    assert_eq!(State::BinaryUnion { alt1: StateID(SmallIndex(0)), alt2: StateID(SmallIndex(1)) }.memory_usage(), 0);",
          "    assert_eq!(State::Match { pattern_id: PatternID(SmallIndex(3)) }.memory_usage(), 0);",
          "    assert_eq!(State::Capture { next: StateID(SmallIndex(1)), pattern_id: PatternID(SmallIndex(2)), group_index: SmallIndex(0), slot: SmallIndex(1) }.memory_usage(), 0);",
          "    assert_eq!(State::Look { look: Look::Start, next: StateID(SmallIndex(1)) }.memory_usage(), 0);",
          "    assert_eq!(State::ByteRange { trans: Transition { start: 0, end: 255, next: StateID(SmallIndex(1)) } }.memory_usage(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]