[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' }, ",
          "        ClassRange { start: 'd', end: 'f' }",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'f' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' }, ",
          "        ClassRange { start: 'd', end: 'f' }",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'f' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'm', end: 'n' }, ",
          "        ClassRange { start: 'a', end: 'b' }, ",
          "        ClassRange { start: 'c', end: 'e' }",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert!(!class.is_canonical());",
          "    assert!(class.ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'm', end: 'n' }, ",
          "        ClassRange { start: 'a', end: 'b' }, ",
          "        ClassRange { start: 'c', end: 'e' }",
          "    ]);",
          "    class.canonicalize();",
          "    assert!(!class.is_canonical());",
          "    assert!(class.ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'x', end: 'y' }, ",
          "        ClassRange { start: 'y', end: 'z' }",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'x', end: 'y' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'y', end: 'z' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'x', end: 'y' }, ",
          "        ClassRange { start: 'y', end: 'z' }",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'x', end: 'y' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'y', end: 'z' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'h', end: 'l' }, ",
          "        ClassRange { start: 'j', end: 'n' }",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 0);",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'h', end: 'l' }, ",
          "        ClassRange { start: 'j', end: 'n' }",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 0);",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]