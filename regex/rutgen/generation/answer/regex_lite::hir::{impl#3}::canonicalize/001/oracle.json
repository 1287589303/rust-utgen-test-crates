[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'b' }]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![ClassRange { start: 'a', end: 'b' }]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: 'd' },",
          "        ClassRange { start: 'e', end: 'f' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: 'd' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'e', end: 'f' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: 'd' },",
          "        ClassRange { start: 'e', end: 'f' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: 'd' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'e', end: 'f' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'b', end: 'c' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'b', end: 'c' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'b', end: 'c' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'b', end: 'c' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'd', end: 'f' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert!(class.is_canonical());",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'f' });"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'd', end: 'f' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert!(class.is_canonical());",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'f' });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: 'd' },",
          "        ClassRange { start: 'e', end: 'f' },",
          "    ]);",
          "    class.ranges.reverse();",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: 'd' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'e', end: 'f' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'c', end: 'd' },",
          "        ClassRange { start: 'e', end: 'f' },",
          "    ]);",
          "    class.ranges.reverse();",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'c', end: 'd' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'e', end: 'f' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]