[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'd' },",
          "        ClassRange { start: 'c', end: 'f' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    class.is_canonical() == false",
          "    class.ranges.is_empty() == false",
          "    class.ranges.len() > drain_end",
          "    oldi in 0..drain_end",
          "    let Some(union) = last.union(&rest[oldi]) == true",
          "    oldi in 0..drain_end == false"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'd' },",
          "        ClassRange { start: 'c', end: 'f' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.canonicalize();",
          "    class.is_canonical() == false",
          "    class.ranges.is_empty() == false",
          "    class.ranges.len() > drain_end",
          "    oldi in 0..drain_end",
          "    let Some(union) = last.union(&rest[oldi]) == true",
          "    oldi in 0..drain_end == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'd' },",
          "        ClassRange { start: 'b', end: 'e' },",
          "        ClassRange { start: 'f', end: 'h' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert!(!class.is_canonical());",
          "    assert!(!class.ranges.is_empty());",
          "    assert_eq!(class.ranges.len(), 4);",
          "    assert!(class.ranges.len() > 4);",
          "    assert!(class.ranges[3].union(&class.ranges[0]).is_some());",
          "    assert!(class.ranges[0].start == 'a' && class.ranges[0].end == 'd');",
          "    assert!(class.ranges[1].start == 'b' && class.ranges[1].end == 'e');",
          "    assert!(class.ranges[2].start == 'f' && class.ranges[2].end == 'h');",
          "    assert!(class.ranges[3].start == 'g' && class.ranges[3].end == 'j');",
          "    assert_eq!(class.ranges.len(), 5);",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'd' },",
          "        ClassRange { start: 'b', end: 'e' },",
          "        ClassRange { start: 'f', end: 'h' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert!(!class.is_canonical());",
          "    assert!(!class.ranges.is_empty());",
          "    assert_eq!(class.ranges.len(), 4);",
          "    assert!(class.ranges.len() > 4);",
          "    assert!(class.ranges[3].union(&class.ranges[0]).is_some());",
          "    assert!(class.ranges[0].start == 'a' && class.ranges[0].end == 'd');",
          "    assert!(class.ranges[1].start == 'b' && class.ranges[1].end == 'e');",
          "    assert!(class.ranges[2].start == 'f' && class.ranges[2].end == 'h');",
          "    assert!(class.ranges[3].start == 'g' && class.ranges[3].end == 'j');",
          "    assert_eq!(class.ranges.len(), 5);",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'b', end: 'c' },",
          "        ClassRange { start: 'd', end: 'g' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert!(class.is_canonical() == false);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'g' });",
          "    assert!(class.ranges[0].is_contiguous(&class.ranges[1]));",
          "    assert!(class.ranges.len() > 2);",
          "    assert!(class.ranges[0].union(&class.ranges[1]).is_some());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'b', end: 'c' },",
          "        ClassRange { start: 'd', end: 'g' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert!(class.is_canonical() == false);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'c' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'g' });",
          "    assert!(class.ranges[0].is_contiguous(&class.ranges[1]));",
          "    assert!(class.ranges.len() > 2);",
          "    assert!(class.ranges[0].union(&class.ranges[1]).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'c', end: 'e' },",
          "        ClassRange { start: 'e', end: 'f' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'f' });",
          "    assert!(class.is_canonical());",
          "    assert!(class.ranges[0].is_contiguous(&class.ranges[1]));",
          "    assert!(!class.ranges.is_empty());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'c', end: 'e' },",
          "        ClassRange { start: 'e', end: 'f' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'f' });",
          "    assert!(class.is_canonical());",
          "    assert!(class.ranges[0].is_contiguous(&class.ranges[1]));",
          "    assert!(!class.ranges.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'x', end: 'z' },",
          "        ClassRange { start: 'y', end: 'a' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'x', end: 'z' });",
          "    assert!(class.is_canonical() == false);",
          "    class.canonicalize();",
          "    assert!(class.is_canonical() == true);",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'x', end: 'z' });",
          "    assert!(class.ranges.is_empty() == false);",
          "    assert!(class.ranges[0].start < class.ranges[0].end);"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'x', end: 'z' },",
          "        ClassRange { start: 'y', end: 'a' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'x', end: 'z' });",
          "    assert!(class.is_canonical() == false);",
          "    class.canonicalize();",
          "    assert!(class.is_canonical() == true);",
          "    assert_eq!(class.ranges.len(), 1);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'x', end: 'z' });",
          "    assert!(class.ranges.is_empty() == false);",
          "    assert!(class.ranges[0].start < class.ranges[0].end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]