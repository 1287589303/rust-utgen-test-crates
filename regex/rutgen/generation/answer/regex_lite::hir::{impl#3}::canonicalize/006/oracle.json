[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'd', end: 'e' },",
          "        ClassRange { start: 'g', end: 'h' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'e' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'g', end: 'h' });",
          "    class.canonicalize();",
          "    assert!(class.is_canonical());",
          "    assert_eq!(class.ranges.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'd', end: 'e' },",
          "        ClassRange { start: 'g', end: 'h' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'e' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'g', end: 'h' });",
          "    class.canonicalize();",
          "    assert!(class.is_canonical());",
          "    assert_eq!(class.ranges.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'b', end: 'f' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'f' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'g', end: 'j' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'c' },",
          "        ClassRange { start: 'b', end: 'f' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 2);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'f' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'g', end: 'j' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: '0', end: '9' },",
          "        ClassRange { start: 'A', end: 'Z' },",
          "        ClassRange { start: 'a', end: 'z' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '0', end: '9' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'A', end: 'Z' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'a', end: 'z' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: '0', end: '9' },",
          "        ClassRange { start: 'A', end: 'Z' },",
          "        ClassRange { start: 'a', end: 'z' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '0', end: '9' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'A', end: 'Z' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'a', end: 'z' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'd', end: 'e' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'e' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'g', end: 'j' });",
          "    assert!(class.is_canonical());"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: 'a', end: 'b' },",
          "        ClassRange { start: 'd', end: 'e' },",
          "        ClassRange { start: 'g', end: 'j' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: 'a', end: 'b' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: 'd', end: 'e' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: 'g', end: 'j' });",
          "    assert!(class.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: '!', end: '@' },",
          "        ClassRange { start: '#', end: '$' },",
          "        ClassRange { start: '%', end: '&' },",
          "    ]);",
          "    class.canonicalize();",
          "}"
        ],
        "oracle": [
          "    assert!(!class.is_canonical());",
          "    assert!(!class.ranges.is_empty());",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '!', end: '@' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: '#', end: '$' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: '%', end: '&' });"
        ],
        "code": [
          "{",
          "    let mut class = Class::new(vec![",
          "        ClassRange { start: '!', end: '@' },",
          "        ClassRange { start: '#', end: '$' },",
          "        ClassRange { start: '%', end: '&' },",
          "    ]);",
          "    class.canonicalize();",
          "    assert!(!class.is_canonical());",
          "    assert!(!class.ranges.is_empty());",
          "    assert_eq!(class.ranges.len(), 3);",
          "    assert_eq!(class.ranges[0], ClassRange { start: '!', end: '@' });",
          "    assert_eq!(class.ranges[1], ClassRange { start: '#', end: '$' });",
          "    assert_eq!(class.ranges[2], ClassRange { start: '%', end: '&' });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]