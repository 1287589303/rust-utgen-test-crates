[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class {",
          "        ranges: vec![],",
          "    };",
          "    let result = Hir::class(class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let class = Class {",
          "        ranges: vec![],",
          "    };",
          "    let result = Hir::class(class);",
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class {",
          "        ranges: vec![ClassRange { start: 'a', end: 'a' }],",
          "    };",
          "    let result = Hir::class(class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'a' }] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let class = Class {",
          "        ranges: vec![ClassRange { start: 'a', end: 'a' }],",
          "    };",
          "    let result = Hir::class(class);",
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'a' }] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class {",
          "        ranges: vec![",
          "            ClassRange { start: 'a', end: 'c' },",
          "            ClassRange { start: 'e', end: 'g' },",
          "        ],",
          "    };",
          "    let result = Hir::class(class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'c' }, ClassRange { start: 'e', end: 'g' }] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let class = Class {",
          "        ranges: vec![",
          "            ClassRange { start: 'a', end: 'c' },",
          "            ClassRange { start: 'e', end: 'g' },",
          "        ],",
          "    };",
          "    let result = Hir::class(class);",
          "    assert_eq!(result.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'c' }, ClassRange { start: 'e', end: 'g' }] }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class {",
          "        ranges: vec![",
          "            ClassRange { start: 'a', end: 'd' },",
          "            ClassRange { start: 'c', end: 'f' },",
          "        ],",
          "    };",
          "    let result = Hir::class(class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'd' }, ClassRange { start: 'c', end: 'f' }] }));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, false);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let class = Class {",
          "        ranges: vec![",
          "            ClassRange { start: 'a', end: 'd' },",
          "            ClassRange { start: 'c', end: 'f' },",
          "        ],",
          "    };",
          "    let result = Hir::class(class);",
          "    assert_eq!(result.kind, HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'd' }, ClassRange { start: 'c', end: 'f' }] }));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, false);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class = Class {",
          "        ranges: vec![",
          "            ClassRange { start: 'a', end: 'b' },",
          "            ClassRange { start: 'd', end: 'e' },",
          "        ],",
          "    };",
          "    let result = Hir::class(class);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Class(Class {",
          "    ranges: vec![",
          "    ClassRange { start: 'a', end: 'b' },",
          "    ClassRange { start: 'd', end: 'e' }",
          "    ]",
          "    }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let class = Class {",
          "        ranges: vec![",
          "            ClassRange { start: 'a', end: 'b' },",
          "            ClassRange { start: 'd', end: 'e' },",
          "        ],",
          "    };",
          "    let result = Hir::class(class);",
          "    assert_eq!(result.kind(), &HirKind::Class(Class {",
          "    ranges: vec![",
          "    ClassRange { start: 'a', end: 'b' },",
          "    ClassRange { start: 'd', end: 'e' }",
          "    ]",
          "    }));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]