[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![1])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let transl_iterator = TranslatorI::new(&translator, \"test_pattern\");",
          "    transl_iterator.push_byte(0);",
          "}"
        ],
        "oracle": [
          "    let Some(HirFrame::Literal(ref mut literal)) = transl_iterator.trans().stack.borrow_mut().last_mut() at line 722 is true;",
          "    assert_eq!(literal, &mut vec![1, 0]);",
          "    let Some(HirFrame::Literal(ref mut literal)) = transl_iterator.trans().stack.borrow_mut().last_mut() at line 722 is true;",
          "    assert!(!transl_iterator.trans().stack.borrow().is_empty());",
          "    assert_eq!(transl_iterator.trans().stack.borrow().len(), 1);"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![1])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let transl_iterator = TranslatorI::new(&translator, \"test_pattern\");",
          "    transl_iterator.push_byte(0);",
          "    let Some(HirFrame::Literal(ref mut literal)) = transl_iterator.trans().stack.borrow_mut().last_mut() at line 722 is true;",
          "    assert_eq!(literal, &mut vec![1, 0]);",
          "    let Some(HirFrame::Literal(ref mut literal)) = transl_iterator.trans().stack.borrow_mut().last_mut() at line 722 is true;",
          "    assert!(!transl_iterator.trans().stack.borrow().is_empty());",
          "    assert_eq!(transl_iterator.trans().stack.borrow().len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![255])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let transl_iterator = TranslatorI::new(&translator, \"test_pattern\");",
          "    transl_iterator.push_byte(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.stack.borrow()[0], HirFrame::Literal(ref literal) if literal == &vec![255, 255]));",
          "    assert_eq!(transl_iterator.trans().stack.borrow()[0], HirFrame::Literal(vec![255, 255]));",
          "    assert!(transl_iterator.trans().stack.borrow().last().is_some());",
          "    assert!(matches!(transl_iterator.trans().stack.borrow().last().unwrap(), HirFrame::Literal(_)));"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![255])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let transl_iterator = TranslatorI::new(&translator, \"test_pattern\");",
          "    transl_iterator.push_byte(255);",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.stack.borrow()[0], HirFrame::Literal(ref literal) if literal == &vec![255, 255]));",
          "    assert_eq!(transl_iterator.trans().stack.borrow()[0], HirFrame::Literal(vec![255, 255]));",
          "    assert!(transl_iterator.trans().stack.borrow().last().is_some());",
          "    assert!(matches!(transl_iterator.trans().stack.borrow().last().unwrap(), HirFrame::Literal(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![128])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let transl_iterator = TranslatorI::new(&translator, \"test_pattern\");",
          "    transl_iterator.push_byte(100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert_eq!(if let HirFrame::Literal(ref literal) = translator.stack.borrow()[0] { literal } else { &vec![] }, &vec![128, 100]);",
          "    assert_eq!(translator.flags.get(), Flags::default());",
          "    assert!(translator.utf8);",
          "    assert_eq!(translator.line_terminator, b'\\n');"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![128])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let transl_iterator = TranslatorI::new(&translator, \"test_pattern\");",
          "    transl_iterator.push_byte(100);",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert_eq!(if let HirFrame::Literal(ref literal) = translator.stack.borrow()[0] { literal } else { &vec![] }, &vec![128, 100]);",
          "    assert_eq!(translator.flags.get(), Flags::default());",
          "    assert!(translator.utf8);",
          "    assert_eq!(translator.line_terminator, b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]