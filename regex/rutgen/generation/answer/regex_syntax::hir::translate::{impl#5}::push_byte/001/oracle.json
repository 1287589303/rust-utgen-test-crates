[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![100])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_byte(200);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert_eq!(if let HirFrame::Literal(ref literal) = translator.stack.borrow()[0] { literal.len() } else { 0 }, 2);",
          "    assert_eq!(if let HirFrame::Literal(ref literal) = translator.stack.borrow()[0] { literal[1] } else { 0 }, 200);"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![100])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_byte(200);",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert_eq!(if let HirFrame::Literal(ref literal) = translator.stack.borrow()[0] { literal.len() } else { 0 }, 2);",
          "    assert_eq!(if let HirFrame::Literal(ref literal) = translator.stack.borrow()[0] { literal[1] } else { 0 }, 200);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![0])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_byte(0);",
          "}"
        ],
        "oracle": [
          "    let mut stack = translator.stack.borrow_mut();",
          "    assert_eq!(stack.len(), 1);",
          "    assert!(matches!(stack.last(), Some(HirFrame::Literal(ref literal)) if literal == &vec![0, 0]));"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![0])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_byte(0);",
          "    let mut stack = translator.stack.borrow_mut();",
          "    assert_eq!(stack.len(), 1);",
          "    assert!(matches!(stack.last(), Some(HirFrame::Literal(ref literal)) if literal == &vec![0, 0]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![255])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_byte(255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.stack.borrow().last(), Some(HirFrame::Literal(ref literal)) if literal == &vec![255, 255]));",
          "    assert_eq!(translator_i.trans().stack.borrow().len(), 1);",
          "    assert!(matches!(translator_i.trans().stack.borrow().last(), Some(HirFrame::Literal(ref literal)) if literal == &vec![255, 255]));"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![HirFrame::Literal(vec![255])]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    translator_i.push_byte(255);",
          "    assert_eq!(translator.stack.borrow().len(), 1);",
          "    assert!(matches!(translator.stack.borrow().last(), Some(HirFrame::Literal(ref literal)) if literal == &vec![255, 255]));",
          "    assert_eq!(translator_i.trans().stack.borrow().len(), 1);",
          "    assert!(matches!(translator_i.trans().stack.borrow().last(), Some(HirFrame::Literal(ref literal)) if literal == &vec![255, 255]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]