[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder {",
          "        config: Config::default(),",
          "        pattern_id: None,",
          "        states: vec![],",
          "        start_pattern: vec![StateID(0)],",
          "        captures: vec![vec![None]],",
          "        memory_states: 0,",
          "        utf8: true,",
          "        reverse: false,",
          "        look_matcher: LookMatcher::default(),",
          "        size_limit: None,",
          "    };",
          "    ",
          "    let uncompiled_node = vec![Utf8Node::default(), Utf8Node::default()];",
          "    let state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: uncompiled_node,",
          "    };",
          "",
          "    let target = StateID(1);",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    compiler.target = target;",
          "",
          "    // Simulate compile_from being OK",
          "    compiler.compile_from(0).unwrap();",
          "",
          "    // Simulate pop_root returning a valid node",
          "    let node = compiler.pop_root();",
          "",
          "    // Simulate compile returning an error",
          "    let result = compiler.compile(node);",
          "    // Note: we are simulating that this compile would return an error condition",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    assert!(compiler.compile_from(0).is_ok());",
          "    assert_eq!(compiler.state.uncompiled.len(), 1);",
          "    assert!(compiler.state.uncompiled[0].last.is_none());",
          "    assert!(compiler.state.compiled.hash(&node) == compiler.state.compiled.hash(&node));",
          "    assert!(compiler.compile(node).is_err());",
          "    assert!(matches!(compiler.finish(), Err(BuildError { kind: _ })));",
          "    assert_eq!(compiler.target, StateID(1));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder {",
          "        config: Config::default(),",
          "        pattern_id: None,",
          "        states: vec![],",
          "        start_pattern: vec![StateID(0)],",
          "        captures: vec![vec![None]],",
          "        memory_states: 0,",
          "        utf8: true,",
          "        reverse: false,",
          "        look_matcher: LookMatcher::default(),",
          "        size_limit: None,",
          "    };",
          "    ",
          "    let uncompiled_node = vec![Utf8Node::default(), Utf8Node::default()];",
          "    let state = Utf8State {",
          "        compiled: Utf8BoundedMap::default(),",
          "        uncompiled: uncompiled_node,",
          "    };",
          "",
          "    let target = StateID(1);",
          "    ",
          "    let mut compiler = Utf8Compiler::new(&mut builder, &mut state).unwrap();",
          "    compiler.target = target;",
          "",
          "    // Simulate compile_from being OK",
          "    compiler.compile_from(0).unwrap();",
          "",
          "    // Simulate pop_root returning a valid node",
          "    let node = compiler.pop_root();",
          "",
          "    // Simulate compile returning an error",
          "    let result = compiler.compile(node);",
          "    // Note: we are simulating that this compile would return an error condition",
          "    assert!(result.is_err());",
          "    assert!(compiler.compile_from(0).is_ok());",
          "    assert_eq!(compiler.state.uncompiled.len(), 1);",
          "    assert!(compiler.state.uncompiled[0].last.is_none());",
          "    assert!(compiler.state.compiled.hash(&node) == compiler.state.compiled.hash(&node));",
          "    assert!(compiler.compile(node).is_err());",
          "    assert!(matches!(compiler.finish(), Err(BuildError { kind: _ })));",
          "    assert_eq!(compiler.target, StateID(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]