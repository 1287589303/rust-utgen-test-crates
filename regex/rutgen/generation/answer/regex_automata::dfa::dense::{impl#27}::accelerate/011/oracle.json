[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let transition_id1 = StateID(SmallIndex(1));",
          "    let transition_id2 = StateID(SmallIndex(2));",
          "    let transitions = &[transition_id1, transition_id2];",
          "",
          "    let state = TestState {",
          "        id: StateID(SmallIndex(0)),",
          "        transitions,",
          "    };",
          "",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(1, 0);",
          "    byte_classes.set(2, 1);  ",
          "",
          "    let result = state.accelerate(&byte_classes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some(), \"Expected Some(accel), got None\");",
          "    let accel = result.unwrap();",
          "    assert!(accel.len() > 0, \"Expected accelerator to have at least one byte\");",
          "    assert!(accel.contains(1), \"Expected accelerator to contain byte 1\");",
          "    assert!(accel.contains(2), \"Expected accelerator to contain byte 2\");"
        ],
        "code": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let transition_id1 = StateID(SmallIndex(1));",
          "    let transition_id2 = StateID(SmallIndex(2));",
          "    let transitions = &[transition_id1, transition_id2];",
          "",
          "    let state = TestState {",
          "        id: StateID(SmallIndex(0)),",
          "        transitions,",
          "    };",
          "",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(1, 0);",
          "    byte_classes.set(2, 1);  ",
          "",
          "    let result = state.accelerate(&byte_classes);",
          "    assert!(result.is_some(), \"Expected Some(accel), got None\");",
          "    let accel = result.unwrap();",
          "    assert!(accel.len() > 0, \"Expected accelerator to have at least one byte\");",
          "    assert!(accel.contains(1), \"Expected accelerator to contain byte 1\");",
          "    assert!(accel.contains(2), \"Expected accelerator to contain byte 2\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let transition_id1 = StateID(SmallIndex(1));",
          "    let transition_id2 = StateID(SmallIndex(3));",
          "    let transitions = &[transition_id1, transition_id2];",
          "",
          "    let state = TestState {",
          "        id: StateID(SmallIndex(0)),",
          "        transitions,",
          "    };",
          "",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(1, 0); ",
          "    byte_classes.set(3, 1);  ",
          "",
          "    let result = state.accelerate(&byte_classes);",
          "}"
        ],
        "oracle": [
          "    let transition_id1 = StateID(SmallIndex(1));",
          "    let transition_id2 = StateID(SmallIndex(3));",
          "    let transitions = &[transition_id1, transition_id2];",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(1, 0);",
          "    byte_classes.set(3, 1);",
          "    let result = state.accelerate(&byte_classes);",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap().len() > 0);"
        ],
        "code": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let transition_id1 = StateID(SmallIndex(1));",
          "    let transition_id2 = StateID(SmallIndex(3));",
          "    let transitions = &[transition_id1, transition_id2];",
          "",
          "    let state = TestState {",
          "        id: StateID(SmallIndex(0)),",
          "        transitions,",
          "    };",
          "",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(1, 0); ",
          "    byte_classes.set(3, 1);  ",
          "",
          "    let result = state.accelerate(&byte_classes);",
          "    let transition_id1 = StateID(SmallIndex(1));",
          "    let transition_id2 = StateID(SmallIndex(3));",
          "    let transitions = &[transition_id1, transition_id2];",
          "    let mut byte_classes = ByteClasses::empty();",
          "    byte_classes.set(1, 0);",
          "    byte_classes.set(3, 1);",
          "    let result = state.accelerate(&byte_classes);",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap().len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let transition_id1 = StateID(SmallIndex(2));",
          "    let transitions = &[transition_id1];",
          "",
          "    let state = TestState {",
          "        id: StateID(SmallIndex(1)),",
          "        transitions,",
          "    };",
          "",
          "    let byte_classes = ByteClasses::empty();  // No classes added",
          "",
          "    let result = state.accelerate(&byte_classes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    struct TestState<'a> {",
          "        id: StateID,",
          "        transitions: &'a [StateID],",
          "    }",
          "",
          "    let transition_id1 = StateID(SmallIndex(2));",
          "    let transitions = &[transition_id1];",
          "",
          "    let state = TestState {",
          "        id: StateID(SmallIndex(1)),",
          "        transitions,",
          "    };",
          "",
          "    let byte_classes = ByteClasses::empty();  // No classes added",
          "",
          "    let result = state.accelerate(&byte_classes);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]