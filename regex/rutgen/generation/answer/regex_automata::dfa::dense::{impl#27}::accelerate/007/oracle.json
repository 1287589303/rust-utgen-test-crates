[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![StateID(1), StateID(2), StateID(3)];",
          "    let state = State {",
          "        id: StateID(0),",
          "        stride2: 4,",
          "        transitions: &transitions,",
          "    };",
          "",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0u8, 0u8);",
          "    classes.set(1u8, 0u8);",
          "    classes.set(2u8, 0u8);",
          "    ",
          "    // Adding one transition with class and id that does not match self.id()",
          "    let result = state.accelerate(&classes);",
          "}"
        ],
        "oracle": [
          "    let transitions = vec![StateID(1), StateID(2), StateID(3)];",
          "    let state = State {",
          "    id: StateID(0),",
          "    stride2: 4,",
          "    transitions: &transitions,",
          "    };",
          "    ",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0u8, 0u8);",
          "    classes.set(1u8, 0u8);",
          "    classes.set(2u8, 0u8);",
          "    ",
          "    let result = state.accelerate(&classes);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let transitions = vec![StateID(1), StateID(2), StateID(3)];",
          "    let state = State {",
          "        id: StateID(0),",
          "        stride2: 4,",
          "        transitions: &transitions,",
          "    };",
          "",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0u8, 0u8);",
          "    classes.set(1u8, 0u8);",
          "    classes.set(2u8, 0u8);",
          "    ",
          "    // Adding one transition with class and id that does not match self.id()",
          "    let result = state.accelerate(&classes);",
          "    let transitions = vec![StateID(1), StateID(2), StateID(3)];",
          "    let state = State {",
          "    id: StateID(0),",
          "    stride2: 4,",
          "    transitions: &transitions,",
          "    };",
          "    ",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0u8, 0u8);",
          "    classes.set(1u8, 0u8);",
          "    classes.set(2u8, 0u8);",
          "    ",
          "    let result = state.accelerate(&classes);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![StateID(1), StateID(2), StateID(3)];",
          "    let state = State {",
          "        id: StateID(0),",
          "        stride2: 4,",
          "        transitions: &transitions,",
          "    };",
          "",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0u8, 0u8);",
          "    classes.set(1u8, 0u8);",
          "    classes.set(2u8, 0u8);",
          "    ",
          "    let result = state.accelerate(&classes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let transitions = vec![StateID(1), StateID(2), StateID(3)];",
          "    let state = State {",
          "        id: StateID(0),",
          "        stride2: 4,",
          "        transitions: &transitions,",
          "    };",
          "",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0u8, 0u8);",
          "    classes.set(1u8, 0u8);",
          "    classes.set(2u8, 0u8);",
          "    ",
          "    let result = state.accelerate(&classes);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transitions = vec![StateID(1), StateID(2), StateID(4)];",
          "    let state = State {",
          "        id: StateID(0),",
          "        stride2: 4,",
          "        transitions: &transitions,",
          "    };",
          "",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0u8, 1u8);",
          "    classes.set(1u8, 1u8);",
          "    classes.set(2u8, 1u8);",
          "    ",
          "    let result = state.accelerate(&classes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let transitions = vec![StateID(1), StateID(2), StateID(4)];",
          "    let state = State {",
          "        id: StateID(0),",
          "        stride2: 4,",
          "        transitions: &transitions,",
          "    };",
          "",
          "    let mut classes = ByteClasses::empty();",
          "    classes.set(0u8, 1u8);",
          "    classes.set(1u8, 1u8);",
          "    classes.set(2u8, 1u8);",
          "    ",
          "    let result = state.accelerate(&classes);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]