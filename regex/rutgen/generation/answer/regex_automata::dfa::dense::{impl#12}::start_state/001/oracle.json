[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        quitset: ByteSet,",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    let quitset = ByteSet::empty();",
          "    let st = StartTable {",
          "        table: vec![StateID(0), StateID(1)],",
          "        kind: StartKind::both(),",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = TestDFA { quitset, st };",
          "",
          "    let config = start::Config::new().look_behind(Some(0));",
          "    let _ = dfa.start_state(&config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.quitset.is_empty(), true);",
          "    assert_eq!(config.get_look_behind(), Some(0));",
          "    assert!(dfa.start_state(&config).is_ok());",
          "    assert_eq!(dfa.start_state(&config).unwrap(), dfa.st.start(Start::Text).unwrap());",
          "    assert_eq!(dfa.st.start(Start::Text).unwrap(), StateID(0));",
          "    assert!(dfa.start_state(&config).unwrap() != StateID(1));",
          "    assert!(dfa.start_state(&config).is_err() == false);",
          "    assert!(dfa.st.start(State::WordByte).is_ok());",
          "    assert!(dfa.st.start(State::LineLF).is_ok());",
          "    assert!(dfa.st.start(State::LineCR).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        quitset: ByteSet,",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    let quitset = ByteSet::empty();",
          "    let st = StartTable {",
          "        table: vec![StateID(0), StateID(1)],",
          "        kind: StartKind::both(),",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = TestDFA { quitset, st };",
          "",
          "    let config = start::Config::new().look_behind(Some(0));",
          "    let _ = dfa.start_state(&config);",
          "    assert_eq!(dfa.quitset.is_empty(), true);",
          "    assert_eq!(config.get_look_behind(), Some(0));",
          "    assert!(dfa.start_state(&config).is_ok());",
          "    assert_eq!(dfa.start_state(&config).unwrap(), dfa.st.start(Start::Text).unwrap());",
          "    assert_eq!(dfa.st.start(Start::Text).unwrap(), StateID(0));",
          "    assert!(dfa.start_state(&config).unwrap() != StateID(1));",
          "    assert!(dfa.start_state(&config).is_err() == false);",
          "    assert!(dfa.st.start(State::WordByte).is_ok());",
          "    assert!(dfa.st.start(State::LineLF).is_ok());",
          "    assert!(dfa.st.start(State::LineCR).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        quitset: ByteSet,",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    let quitset = ByteSet::empty();",
          "    let st = StartTable {",
          "        table: vec![StateID(0), StateID(1)],",
          "        kind: StartKind::both(),",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = TestDFA { quitset, st };",
          "",
          "    let config = start::Config::new().look_behind(Some(127));",
          "    let _ = dfa.start_state(&config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.start_state(&config), Ok(StateID(0)));",
          "    assert_eq!(dfa.st.start(State::Text, Start::Text), Ok(StateID(0)));",
          "    assert_eq!(dfa.quitset.is_empty(), true);",
          "    assert_eq!(dfa.st.start_map.get(127), Start::Text);",
          "    assert!(matches!(dfa.start_state(&config), Ok(_)));"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        quitset: ByteSet,",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    let quitset = ByteSet::empty();",
          "    let st = StartTable {",
          "        table: vec![StateID(0), StateID(1)],",
          "        kind: StartKind::both(),",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = TestDFA { quitset, st };",
          "",
          "    let config = start::Config::new().look_behind(Some(127));",
          "    let _ = dfa.start_state(&config);",
          "    assert_eq!(dfa.start_state(&config), Ok(StateID(0)));",
          "    assert_eq!(dfa.st.start(State::Text, Start::Text), Ok(StateID(0)));",
          "    assert_eq!(dfa.quitset.is_empty(), true);",
          "    assert_eq!(dfa.st.start_map.get(127), Start::Text);",
          "    assert!(matches!(dfa.start_state(&config), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDFA {",
          "        quitset: ByteSet,",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    let quitset = ByteSet::empty();",
          "    let st = StartTable {",
          "        table: vec![StateID(0), StateID(1)],",
          "        kind: StartKind::both(),",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = TestDFA { quitset, st };",
          "",
          "    let config = start::Config::new().look_behind(Some(255));",
          "    let _ = dfa.start_state(&config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.quitset.is_empty(), true);",
          "    assert!(matches!(dfa.start_state(&config), Err(StartError::Quit { byte: 255 })));"
        ],
        "code": [
          "{",
          "    struct TestDFA {",
          "        quitset: ByteSet,",
          "        st: StartTable<Vec<u32>>,",
          "    }",
          "",
          "    let quitset = ByteSet::empty();",
          "    let st = StartTable {",
          "        table: vec![StateID(0), StateID(1)],",
          "        kind: StartKind::both(),",
          "        start_map: StartByteMap::new(),",
          "        stride: 1,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let dfa = TestDFA { quitset, st };",
          "",
          "    let config = start::Config::new().look_behind(Some(255));",
          "    let _ = dfa.start_state(&config);",
          "    assert_eq!(dfa.quitset.is_empty(), true);",
          "    assert!(matches!(dfa.start_state(&config), Err(StartError::Quit { byte: 255 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]