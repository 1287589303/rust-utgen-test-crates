[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false };",
          "    let tt = TransitionTable { table: vec![0], classes: ByteClasses::default(), stride2: 1 };",
          "    let st = StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(0), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let ms = MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 };",
          "    let special = Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 };",
          "    let accels = Accels { accels: vec![] };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA { tt, st, ms, special, accels, pre: None, quitset, flags };",
          "    ",
          "    let len = dfa.write_to_len();",
          "}"
        ],
        "oracle": [
          "    let expected_label_len = wire::write_label_len(LABEL);",
          "    let expected_endianness_check_len = wire::write_endianness_check_len();",
          "    let expected_version_len = wire::write_version_len();",
          "    let expected_size_of_u32 = size_of::<u32>();",
          "    let expected_flags_len = dfa.flags.write_to_len();",
          "    let expected_tt_len = dfa.tt.write_to_len();",
          "    let expected_st_len = dfa.st.write_to_len();",
          "    let expected_ms_len = dfa.ms.write_to_len();",
          "    let expected_special_len = dfa.special.write_to_len();",
          "    let expected_accels_len = dfa.accels.write_to_len();",
          "    let expected_quitset_len = dfa.quitset.write_to_len();",
          "    ",
          "    let expected_len = expected_label_len",
          "    + expected_endianness_check_len",
          "    + expected_version_len",
          "    + expected_size_of_u32",
          "    + expected_flags_len",
          "    + expected_tt_len",
          "    + expected_st_len",
          "    + expected_ms_len",
          "    + expected_special_len",
          "    + expected_accels_len",
          "    + expected_quitset_len;",
          "    ",
          "    assert_eq!(len, expected_len);"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false };",
          "    let tt = TransitionTable { table: vec![0], classes: ByteClasses::default(), stride2: 1 };",
          "    let st = StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(0), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let ms = MatchStates { slices: vec![], pattern_ids: vec![], pattern_len: 0 };",
          "    let special = Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 };",
          "    let accels = Accels { accels: vec![] };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA { tt, st, ms, special, accels, pre: None, quitset, flags };",
          "    ",
          "    let len = dfa.write_to_len();",
          "    let expected_label_len = wire::write_label_len(LABEL);",
          "    let expected_endianness_check_len = wire::write_endianness_check_len();",
          "    let expected_version_len = wire::write_version_len();",
          "    let expected_size_of_u32 = size_of::<u32>();",
          "    let expected_flags_len = dfa.flags.write_to_len();",
          "    let expected_tt_len = dfa.tt.write_to_len();",
          "    let expected_st_len = dfa.st.write_to_len();",
          "    let expected_ms_len = dfa.ms.write_to_len();",
          "    let expected_special_len = dfa.special.write_to_len();",
          "    let expected_accels_len = dfa.accels.write_to_len();",
          "    let expected_quitset_len = dfa.quitset.write_to_len();",
          "    ",
          "    let expected_len = expected_label_len",
          "    + expected_endianness_check_len",
          "    + expected_version_len",
          "    + expected_size_of_u32",
          "    + expected_flags_len",
          "    + expected_tt_len",
          "    + expected_st_len",
          "    + expected_ms_len",
          "    + expected_special_len",
          "    + expected_accels_len",
          "    + expected_quitset_len;",
          "    ",
          "    assert_eq!(len, expected_len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: true };",
          "    let tt = TransitionTable { table: vec![1, 2, 3], classes: ByteClasses::default(), stride2: 2 };",
          "    let st = StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: Some(1), universal_start_anchored: Some(2) };",
          "    let ms = MatchStates { slices: vec![0, 1], pattern_ids: vec![0], pattern_len: 1 };",
          "    let special = Special { max: 10, quit_id: 5, min_match: 0, max_match: 3, min_accel: 6, max_accel: 9, min_start: 0, max_start: 3 };",
          "    let accels = Accels { accels: vec![1, 2] };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA { tt, st, ms, special, accels, pre: None, quitset, flags };",
          "",
          "    let len = dfa.write_to_len();",
          "}"
        ],
        "oracle": [
          "    let expected_label_len = wire::write_label_len(LABEL);",
          "    let expected_endianness_len = wire::write_endianness_check_len();",
          "    let expected_version_len = wire::write_version_len();",
          "    let expected_unused_size = size_of::<u32>();",
          "    let expected_flags_len = dfa.flags.write_to_len();",
          "    let expected_tt_len = dfa.tt.write_to_len();",
          "    let expected_st_len = dfa.st.write_to_len();",
          "    let expected_ms_len = dfa.ms.write_to_len();",
          "    let expected_special_len = dfa.special.write_to_len();",
          "    let expected_accels_len = dfa.accels.write_to_len();",
          "    let expected_quitset_len = dfa.quitset.write_to_len();",
          "    ",
          "    let expected_len = expected_label_len + expected_endianness_len + expected_version_len + expected_unused_size + expected_flags_len + expected_tt_len + expected_st_len + expected_ms_len + expected_special_len + expected_accels_len + expected_quitset_len;",
          "    ",
          "    assert_eq!(len, expected_len);"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: true };",
          "    let tt = TransitionTable { table: vec![1, 2, 3], classes: ByteClasses::default(), stride2: 2 };",
          "    let st = StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: Some(1), universal_start_anchored: Some(2) };",
          "    let ms = MatchStates { slices: vec![0, 1], pattern_ids: vec![0], pattern_len: 1 };",
          "    let special = Special { max: 10, quit_id: 5, min_match: 0, max_match: 3, min_accel: 6, max_accel: 9, min_start: 0, max_start: 3 };",
          "    let accels = Accels { accels: vec![1, 2] };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA { tt, st, ms, special, accels, pre: None, quitset, flags };",
          "",
          "    let len = dfa.write_to_len();",
          "    let expected_label_len = wire::write_label_len(LABEL);",
          "    let expected_endianness_len = wire::write_endianness_check_len();",
          "    let expected_version_len = wire::write_version_len();",
          "    let expected_unused_size = size_of::<u32>();",
          "    let expected_flags_len = dfa.flags.write_to_len();",
          "    let expected_tt_len = dfa.tt.write_to_len();",
          "    let expected_st_len = dfa.st.write_to_len();",
          "    let expected_ms_len = dfa.ms.write_to_len();",
          "    let expected_special_len = dfa.special.write_to_len();",
          "    let expected_accels_len = dfa.accels.write_to_len();",
          "    let expected_quitset_len = dfa.quitset.write_to_len();",
          "    ",
          "    let expected_len = expected_label_len + expected_endianness_len + expected_version_len + expected_unused_size + expected_flags_len + expected_tt_len + expected_st_len + expected_ms_len + expected_special_len + expected_accels_len + expected_quitset_len;",
          "    ",
          "    assert_eq!(len, expected_len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false };",
          "    let tt = TransitionTable { table: vec![0; 1024], classes: ByteClasses::default(), stride2: 5 };",
          "    let st = StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
          "    let ms = MatchStates { slices: vec![0], pattern_ids: vec![], pattern_len: 0 };",
          "    let special = Special { max: 10, quit_id: 5, min_match: 0, max_match: 3, min_accel: 6, max_accel: 9, min_start: 0, max_start: 99 };",
          "    let accels = Accels { accels: vec![1] };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA { tt, st, ms, special, accels, pre: None, quitset, flags };",
          "    ",
          "    let len = dfa.write_to_len();",
          "}"
        ],
        "oracle": [
          "    let expected_len = wire::write_label_len(LABEL)",
          "    + wire::write_endianness_check_len()",
          "    + wire::write_version_len()",
          "    + std::mem::size_of::<u32>()",
          "    + dfa.flags.write_to_len()",
          "    + dfa.tt.write_to_len()",
          "    + dfa.st.write_to_len()",
          "    + dfa.ms.write_to_len()",
          "    + dfa.special.write_to_len()",
          "    + dfa.accels.write_to_len()",
          "    + dfa.quitset.write_to_len();",
          "    assert_eq!(len, expected_len);"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: false, is_always_start_anchored: false };",
          "    let tt = TransitionTable { table: vec![0; 1024], classes: ByteClasses::default(), stride2: 5 };",
          "    let st = StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None };",
          "    let ms = MatchStates { slices: vec![0], pattern_ids: vec![], pattern_len: 0 };",
          "    let special = Special { max: 10, quit_id: 5, min_match: 0, max_match: 3, min_accel: 6, max_accel: 9, min_start: 0, max_start: 99 };",
          "    let accels = Accels { accels: vec![1] };",
          "    let quitset = ByteSet::empty();",
          "    ",
          "    let dfa = DFA { tt, st, ms, special, accels, pre: None, quitset, flags };",
          "    ",
          "    let len = dfa.write_to_len();",
          "    let expected_len = wire::write_label_len(LABEL)",
          "    + wire::write_endianness_check_len()",
          "    + wire::write_version_len()",
          "    + std::mem::size_of::<u32>()",
          "    + dfa.flags.write_to_len()",
          "    + dfa.tt.write_to_len()",
          "    + dfa.st.write_to_len()",
          "    + dfa.ms.write_to_len()",
          "    + dfa.special.write_to_len()",
          "    + dfa.accels.write_to_len()",
          "    + dfa.quitset.write_to_len();",
          "    assert_eq!(len, expected_len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut quitset = ByteSet::empty();",
          "    quitset.add(5);",
          "    ",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false };",
          "    let tt = TransitionTable { table: vec![0; 32], classes: ByteClasses::default(), stride2: 3 };",
          "    let st = StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: Some(2), universal_start_anchored: Some(1) };",
          "    let ms = MatchStates { slices: vec![0], pattern_ids: vec![0], pattern_len: 1};",
          "    let special = Special { max: 20, quit_id: 5, min_match: 0, max_match: 3, min_accel: 6, max_accel: 9, min_start: 0, max_start: 99 };",
          "    let accels = Accels { accels: vec![1, 2] };",
          "    ",
          "    let dfa = DFA { tt, st, ms, special, accels, pre: None, quitset, flags };",
          "    ",
          "    let len = dfa.write_to_len();",
          "}"
        ],
        "oracle": [
          "    let expected_length = wire::write_label_len(LABEL)",
          "    + wire::write_endianness_check_len()",
          "    + wire::write_version_len()",
          "    + std::mem::size_of::<u32>()",
          "    + dfa.flags.write_to_len()",
          "    + dfa.tt.write_to_len()",
          "    + dfa.st.write_to_len()",
          "    + dfa.ms.write_to_len()",
          "    + dfa.special.write_to_len()",
          "    + dfa.accels.write_to_len()",
          "    + dfa.quitset.write_to_len();",
          "    assert_eq!(len, expected_length);"
        ],
        "code": [
          "{",
          "    let mut quitset = ByteSet::empty();",
          "    quitset.add(5);",
          "    ",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false };",
          "    let tt = TransitionTable { table: vec![0; 32], classes: ByteClasses::default(), stride2: 3 };",
          "    let st = StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 1, pattern_len: Some(1), universal_start_unanchored: Some(2), universal_start_anchored: Some(1) };",
          "    let ms = MatchStates { slices: vec![0], pattern_ids: vec![0], pattern_len: 1};",
          "    let special = Special { max: 20, quit_id: 5, min_match: 0, max_match: 3, min_accel: 6, max_accel: 9, min_start: 0, max_start: 99 };",
          "    let accels = Accels { accels: vec![1, 2] };",
          "    ",
          "    let dfa = DFA { tt, st, ms, special, accels, pre: None, quitset, flags };",
          "    ",
          "    let len = dfa.write_to_len();",
          "    let expected_length = wire::write_label_len(LABEL)",
          "    + wire::write_endianness_check_len()",
          "    + wire::write_version_len()",
          "    + std::mem::size_of::<u32>()",
          "    + dfa.flags.write_to_len()",
          "    + dfa.tt.write_to_len()",
          "    + dfa.st.write_to_len()",
          "    + dfa.ms.write_to_len()",
          "    + dfa.special.write_to_len()",
          "    + dfa.accels.write_to_len()",
          "    + dfa.quitset.write_to_len();",
          "    assert_eq!(len, expected_length);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]