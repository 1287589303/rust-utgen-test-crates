[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [0b1000_0000];",
          "    let i = 0;",
          "    let _ = is_boundary(&bytes, i);",
          "}"
        ],
        "oracle": [
          "    let bytes = [0b1000_0000]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1100_0000]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1111_1111]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1000_0001]; let i = 0; assert_eq!(is_boundary(&bytes, i), false);",
          "    let bytes = [0b1000_0000, 0b1010_0000]; let i = 1; assert_eq!(is_boundary(&bytes, i), false);",
          "    let bytes = [0b1100_0001]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1110_0000]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1100_0000, 0b1010_0000]; let i = 1; assert_eq!(is_boundary(&bytes, i), false);",
          "    let bytes = [0b1111_1110]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b0111_1111]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);"
        ],
        "code": [
          "{",
          "    let bytes = [0b1000_0000];",
          "    let i = 0;",
          "    let _ = is_boundary(&bytes, i);",
          "    let bytes = [0b1000_0000]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1100_0000]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1111_1111]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1000_0001]; let i = 0; assert_eq!(is_boundary(&bytes, i), false);",
          "    let bytes = [0b1000_0000, 0b1010_0000]; let i = 1; assert_eq!(is_boundary(&bytes, i), false);",
          "    let bytes = [0b1100_0001]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1110_0000]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b1100_0000, 0b1010_0000]; let i = 1; assert_eq!(is_boundary(&bytes, i), false);",
          "    let bytes = [0b1111_1110]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "    let bytes = [0b0111_1111]; let i = 0; assert_eq!(is_boundary(&bytes, i), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [0b1100_0001];",
          "    let i = 0;",
          "    let _ = is_boundary(&bytes, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_boundary(&[0b1100_0001], 0), true);"
        ],
        "code": [
          "{",
          "    let bytes = [0b1100_0001];",
          "    let i = 0;",
          "    let _ = is_boundary(&bytes, i);",
          "    assert_eq!(is_boundary(&[0b1100_0001], 0), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [0b1100_0000];",
          "    let i = 0;",
          "    let _ = is_boundary(&bytes, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_boundary(&[0b1100_0000], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0001], 0), true);",
          "    assert_eq!(is_boundary(&[0b1111_1111], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0000, 0b0010_0000], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0001, 0b0010_0000], 0), true);",
          "    assert_eq!(is_boundary(&[0b1111_1111, 0b0000_0000], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0000, 0b1100_0010], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0001, 0b1100_0010], 0), true);",
          "    assert_eq!(is_boundary(&[0b1111_1111, 0b1100_0010], 0), true);"
        ],
        "code": [
          "{",
          "    let bytes = [0b1100_0000];",
          "    let i = 0;",
          "    let _ = is_boundary(&bytes, i);",
          "    assert_eq!(is_boundary(&[0b1100_0000], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0001], 0), true);",
          "    assert_eq!(is_boundary(&[0b1111_1111], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0000, 0b0010_0000], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0001, 0b0010_0000], 0), true);",
          "    assert_eq!(is_boundary(&[0b1111_1111, 0b0000_0000], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0000, 0b1100_0010], 0), true);",
          "    assert_eq!(is_boundary(&[0b1100_0001, 0b1100_0010], 0), true);",
          "    assert_eq!(is_boundary(&[0b1111_1111, 0b1100_0010], 0), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [0b1111_1111];",
          "    let i = 0;",
          "    let _ = is_boundary(&bytes, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_boundary(&[0b1111_1111], 0), true);"
        ],
        "code": [
          "{",
          "    let bytes = [0b1111_1111];",
          "    let i = 0;",
          "    let _ = is_boundary(&bytes, i);",
          "    assert_eq!(is_boundary(&[0b1111_1111], 0), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111];",
          "    let i = 1;",
          "    let _ = is_boundary(&bytes, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 1), true);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0000, 0b1111_1111], 1), false);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0011], 1), false);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1101_0001], 1), true);",
          "    assert_eq!(is_boundary(&[0b1100_0000, 0b1111_1111], 0), false);"
        ],
        "code": [
          "{",
          "    let bytes = [0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111];",
          "    let i = 1;",
          "    let _ = is_boundary(&bytes, i);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 1), true);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0000, 0b1111_1111], 1), false);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0011], 1), false);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1101_0001], 1), true);",
          "    assert_eq!(is_boundary(&[0b1100_0000, 0b1111_1111], 0), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111];",
          "    let i = 2;",
          "    let _ = is_boundary(&bytes, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 2), true);"
        ],
        "code": [
          "{",
          "    let bytes = [0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111];",
          "    let i = 2;",
          "    let _ = is_boundary(&bytes, i);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = [0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111];",
          "    let i = 3;",
          "    let _ = is_boundary(&bytes, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 0), false);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 1), true);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 2), true);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 3), true);"
        ],
        "code": [
          "{",
          "    let bytes = [0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111];",
          "    let i = 3;",
          "    let _ = is_boundary(&bytes, i);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 0), false);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 1), true);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 2), true);",
          "    assert_eq!(is_boundary(&[0b1000_0000, 0b1100_0001, 0b1100_0000, 0b1111_1111], 3), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]