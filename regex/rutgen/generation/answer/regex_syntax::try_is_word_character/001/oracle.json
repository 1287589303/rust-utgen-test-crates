[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inputs = vec!['A', 'z', 'a', 'Z', 'Ω', 'ж'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(try_is_word_character('A'), Ok(true));",
          "    assert_eq!(try_is_word_character('z'), Ok(true));",
          "    assert_eq!(try_is_word_character('a'), Ok(true));",
          "    assert_eq!(try_is_word_character('Z'), Ok(true));",
          "    assert_eq!(try_is_word_character('Ω'), Ok(true));",
          "    assert_eq!(try_is_word_character('ж'), Ok(true));",
          "    assert_eq!(try_is_word_character('1'), Ok(false));",
          "    assert_eq!(try_is_word_character(' '), Ok(false));",
          "    assert_eq!(try_is_word_character('-'), Ok(false));",
          "    assert_eq!(try_is_word_character('\\n'), Ok(false));"
        ],
        "code": [
          "{",
          "    let inputs = vec!['A', 'z', 'a', 'Z', 'Ω', 'ж'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "    assert_eq!(try_is_word_character('A'), Ok(true));",
          "    assert_eq!(try_is_word_character('z'), Ok(true));",
          "    assert_eq!(try_is_word_character('a'), Ok(true));",
          "    assert_eq!(try_is_word_character('Z'), Ok(true));",
          "    assert_eq!(try_is_word_character('Ω'), Ok(true));",
          "    assert_eq!(try_is_word_character('ж'), Ok(true));",
          "    assert_eq!(try_is_word_character('1'), Ok(false));",
          "    assert_eq!(try_is_word_character(' '), Ok(false));",
          "    assert_eq!(try_is_word_character('-'), Ok(false));",
          "    assert_eq!(try_is_word_character('\\n'), Ok(false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inputs = vec!['\\u{200C}', '\\u{200D}'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(try_is_word_character('\\u{200C}').is_ok());",
          "    assert_eq!(try_is_word_character('\\u{200C}').unwrap(), true);",
          "    assert!(try_is_word_character('\\u{200D}').is_ok());",
          "    assert_eq!(try_is_word_character('\\u{200D}').unwrap(), true);"
        ],
        "code": [
          "{",
          "    let inputs = vec!['\\u{200C}', '\\u{200D}'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "    assert!(try_is_word_character('\\u{200C}').is_ok());",
          "    assert_eq!(try_is_word_character('\\u{200C}').unwrap(), true);",
          "    assert!(try_is_word_character('\\u{200D}').is_ok());",
          "    assert_eq!(try_is_word_character('\\u{200D}').unwrap(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inputs = vec!['0', '5', '9', '3'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(try_is_word_character('0'), Ok(true));",
          "    assert_eq!(try_is_word_character('5'), Ok(true));",
          "    assert_eq!(try_is_word_character('9'), Ok(true));",
          "    assert_eq!(try_is_word_character('3'), Ok(true));"
        ],
        "code": [
          "{",
          "    let inputs = vec!['0', '5', '9', '3'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "    assert_eq!(try_is_word_character('0'), Ok(true));",
          "    assert_eq!(try_is_word_character('5'), Ok(true));",
          "    assert_eq!(try_is_word_character('9'), Ok(true));",
          "    assert_eq!(try_is_word_character('3'), Ok(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inputs = vec!['\\u{0300}', '\\u{0321}', '\\u{036F}', '\\u{FE2E}'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(try_is_word_character('\\u{0300}').is_ok(), true);",
          "    assert_eq!(try_is_word_character('\\u{0321}').is_ok(), true);",
          "    assert_eq!(try_is_word_character('\\u{036F}').is_ok(), true);",
          "    assert_eq!(try_is_word_character('\\u{FE2E}').is_ok(), true);"
        ],
        "code": [
          "{",
          "    let inputs = vec!['\\u{0300}', '\\u{0321}', '\\u{036F}', '\\u{FE2E}'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "    assert_eq!(try_is_word_character('\\u{0300}').is_ok(), true);",
          "    assert_eq!(try_is_word_character('\\u{0321}').is_ok(), true);",
          "    assert_eq!(try_is_word_character('\\u{036F}').is_ok(), true);",
          "    assert_eq!(try_is_word_character('\\u{FE2E}').is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inputs = vec!['_', '\\u{203F}'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(try_is_word_character('_'), Ok(true));",
          "    assert_eq!(try_is_word_character('\\u{203F}'), Ok(true));",
          "    assert!(try_is_word_character('𝔸').is_ok());",
          "    assert!(try_is_word_character('\\u{200D}').is_ok());",
          "    assert!(try_is_word_character('1').is_ok());",
          "    assert_eq!(try_is_word_character(' '), Ok(false));",
          "    assert_eq!(try_is_word_character('!'), Ok(false));",
          "    assert!(try_is_word_character('\\u{00A0}').is_ok());",
          "    assert!(try_is_word_character('م').is_ok());",
          "    assert!(try_is_word_character('и').is_ok());",
          "    assert!(try_is_word_character('ʻ').is_ok());",
          "    assert!(try_is_word_character('한').is_ok());",
          "    assert_eq!(try_is_word_character('\\u{FFFF}'), Ok(false));",
          "    assert_eq!(try_is_word_character('\\u{0}'), Ok(false));",
          "    assert_eq!(try_is_word_character('A'), Ok(true));"
        ],
        "code": [
          "{",
          "    let inputs = vec!['_', '\\u{203F}'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "    assert_eq!(try_is_word_character('_'), Ok(true));",
          "    assert_eq!(try_is_word_character('\\u{203F}'), Ok(true));",
          "    assert!(try_is_word_character('𝔸').is_ok());",
          "    assert!(try_is_word_character('\\u{200D}').is_ok());",
          "    assert!(try_is_word_character('1').is_ok());",
          "    assert_eq!(try_is_word_character(' '), Ok(false));",
          "    assert_eq!(try_is_word_character('!'), Ok(false));",
          "    assert!(try_is_word_character('\\u{00A0}').is_ok());",
          "    assert!(try_is_word_character('م').is_ok());",
          "    assert!(try_is_word_character('и').is_ok());",
          "    assert!(try_is_word_character('ʻ').is_ok());",
          "    assert!(try_is_word_character('한').is_ok());",
          "    assert_eq!(try_is_word_character('\\u{FFFF}'), Ok(false));",
          "    assert_eq!(try_is_word_character('\\u{0}'), Ok(false));",
          "    assert_eq!(try_is_word_character('A'), Ok(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inputs = vec!['?', '@', '{', '!', '0', 'A'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let result_0 = try_is_word_character('?'); assert!(result_0.is_ok() == false);",
          "    let result_1 = try_is_word_character('@'); assert!(result_1.is_ok() == false);",
          "    let result_2 = try_is_word_character('{'); assert!(result_2.is_ok() == false);",
          "    let result_3 = try_is_word_character('!'); assert!(result_3.is_ok() == false);",
          "    let result_4 = try_is_word_character('0'); assert!(result_4.is_ok() == false);",
          "    let result_5 = try_is_word_character('A'); assert!(result_5.is_ok() == true);"
        ],
        "code": [
          "{",
          "    let inputs = vec!['?', '@', '{', '!', '0', 'A'];",
          "    for &c in &inputs {",
          "        let _ = try_is_word_character(c);",
          "    }",
          "    let result_0 = try_is_word_character('?'); assert!(result_0.is_ok() == false);",
          "    let result_1 = try_is_word_character('@'); assert!(result_1.is_ok() == false);",
          "    let result_2 = try_is_word_character('{'); assert!(result_2.is_ok() == false);",
          "    let result_3 = try_is_word_character('!'); assert!(result_3.is_ok() == false);",
          "    let result_4 = try_is_word_character('0'); assert!(result_4.is_ok() == false);",
          "    let result_5 = try_is_word_character('A'); assert!(result_5.is_ok() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let inputs = vec!['A'];",
          "    for &c in &inputs {",
          "        let _ = is_word_character(c);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_character('A').is_ok());",
          "    assert_eq!(is_word_character('A').unwrap(), true);"
        ],
        "code": [
          "{",
          "    let inputs = vec!['A'];",
          "    for &c in &inputs {",
          "        let _ = is_word_character(c);",
          "    }",
          "    assert!(is_word_character('A').is_ok());",
          "    assert_eq!(is_word_character('A').unwrap(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]