[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 | Look::WordEndUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 | Look::WordStartHalfUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 | Look::WordEndHalfUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 | Look::WordUnicodeNegate as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: 0 }; assert_eq!(lookset.contains_word_unicode(), false);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 | Look::WordEndUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 | Look::WordStartHalfUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 | Look::WordEndHalfUnicode as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 | Look::WordUnicodeNegate as u32 }; assert_eq!(lookset.contains_word_unicode(), true);",
          "    let lookset = LookSet { bits: 0 }; assert_eq!(lookset.contains_word_unicode(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.contains_word_unicode(), true);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "    assert_eq!(lookset.contains_word_unicode(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: (Look::WordUnicode as u32) | (Look::WordUnicodeNegate as u32) }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: (Look::WordStartUnicode as u32) | (Look::WordEndUnicode as u32) }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: (Look::WordStartHalfUnicode as u32) | (Look::WordEndHalfUnicode as u32) }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: 0 }; assert!(!lookset.contains_word_unicode());"
        ],
        "code": [
          "{",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: (Look::WordUnicode as u32) | (Look::WordUnicodeNegate as u32) }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: (Look::WordStartUnicode as u32) | (Look::WordEndUnicode as u32) }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: (Look::WordStartHalfUnicode as u32) | (Look::WordEndHalfUnicode as u32) }; assert!(lookset.contains_word_unicode());",
          "    let lookset = LookSet { bits: 0 }; assert!(!lookset.contains_word_unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 | Look::WordEndUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordEndUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: 0 }; assert!(lookset.contains_word_unicode() == false);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 | Look::WordEndUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordEndUnicode as u32 }; assert!(lookset.contains_word_unicode() == true);",
          "    let lookset = LookSet { bits: 0 }; assert!(lookset.contains_word_unicode() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(lookset.contains(Look::WordUnicode) || lookset.contains(Look::WordUnicodeNegate) || lookset.contains(Look::WordStartUnicode) || lookset.contains(Look::WordEndUnicode) || lookset.contains(Look::WordStartHalfUnicode) || lookset.contains(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "    assert!(lookset.contains(Look::WordUnicode) || lookset.contains(Look::WordUnicodeNegate) || lookset.contains(Look::WordStartUnicode) || lookset.contains(Look::WordEndUnicode) || lookset.contains(Look::WordStartHalfUnicode) || lookset.contains(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 | Look::WordEndHalfUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordStartUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: 0 };",
          "    assert!(!lookset.contains_word_unicode());"
        ],
        "code": [
          "{",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 };",
          "    let _result = lookset.contains_word_unicode();",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordStartUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordEndUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordStartHalfUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordEndHalfUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordUnicode as u32 | Look::WordEndHalfUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: Look::WordUnicodeNegate as u32 | Look::WordStartUnicode as u32 };",
          "    assert!(lookset.contains_word_unicode());",
          "    ",
          "    let lookset = LookSet { bits: 0 };",
          "    assert!(!lookset.contains_word_unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lookset = LookSet { bits: (Look::WordUnicode as u32) | (Look::WordStartUnicode as u32) | (Look::WordEndHalfUnicode as u32) };",
          "    let _result = lookset.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lookset.contains(Look::WordUnicode), true);",
          "    assert_eq!(lookset.contains(Look::WordUnicodeNegate), false);",
          "    assert_eq!(lookset.contains(Look::WordStartUnicode), true);",
          "    assert_eq!(lookset.contains(Look::WordEndUnicode), false);",
          "    assert_eq!(lookset.contains(Look::WordStartHalfUnicode), false);",
          "    assert_eq!(lookset.contains(Look::WordEndHalfUnicode), true);",
          "    assert_eq!(_result, true);"
        ],
        "code": [
          "{",
          "    let lookset = LookSet { bits: (Look::WordUnicode as u32) | (Look::WordStartUnicode as u32) | (Look::WordEndHalfUnicode as u32) };",
          "    let _result = lookset.contains_word_unicode();",
          "    assert_eq!(lookset.contains(Look::WordUnicode), true);",
          "    assert_eq!(lookset.contains(Look::WordUnicodeNegate), false);",
          "    assert_eq!(lookset.contains(Look::WordStartUnicode), true);",
          "    assert_eq!(lookset.contains(Look::WordEndUnicode), false);",
          "    assert_eq!(lookset.contains(Look::WordStartHalfUnicode), false);",
          "    assert_eq!(lookset.contains(Look::WordEndHalfUnicode), true);",
          "    assert_eq!(_result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]