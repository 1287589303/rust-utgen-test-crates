[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 13, // Only Look::WordEndUnicode is set",
          "    };",
          "    let _result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: 1 << 13 }; // Only Look::WordEndUnicode is set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(result); // expected true since Look::WordEndUnicode is set",
          "    ",
          "    let look_set = LookSet { bits: 0 }; // No flags set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(!result); // expected false since no flags are set",
          "    ",
          "    let look_set = LookSet { bits: (1 << 1) | (1 << 6) }; // Look::End and Look::WordAscii are set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(!result); // expected false since no Unicode boundaries are set",
          "    ",
          "    let look_set = LookSet { bits: (1 << 5) | (1 << 8) }; // Look::EndCRLF and Look::WordUnicode are set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(result); // expected true since Look::WordUnicode is set",
          "    ",
          "    let look_set = LookSet { bits: (1 << 4) | (1 << 12) }; // Look::StartCRLF and Look::WordStartUnicode are set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(result); // expected true since Look::WordStartUnicode is set"
        ],
        "code": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 13, // Only Look::WordEndUnicode is set",
          "    };",
          "    let _result = look_set.contains_word_unicode();",
          "    let look_set = LookSet { bits: 1 << 13 }; // Only Look::WordEndUnicode is set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(result); // expected true since Look::WordEndUnicode is set",
          "    ",
          "    let look_set = LookSet { bits: 0 }; // No flags set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(!result); // expected false since no flags are set",
          "    ",
          "    let look_set = LookSet { bits: (1 << 1) | (1 << 6) }; // Look::End and Look::WordAscii are set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(!result); // expected false since no Unicode boundaries are set",
          "    ",
          "    let look_set = LookSet { bits: (1 << 5) | (1 << 8) }; // Look::EndCRLF and Look::WordUnicode are set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(result); // expected true since Look::WordUnicode is set",
          "    ",
          "    let look_set = LookSet { bits: (1 << 4) | (1 << 12) }; // Look::StartCRLF and Look::WordStartUnicode are set",
          "    let result = look_set.contains_word_unicode();",
          "    assert!(result); // expected true since Look::WordStartUnicode is set",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 13, // Only Look::WordEndUnicode is set",
          "    };",
          "    let _result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(!_result);",
          "    assert!(look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 13, // Only Look::WordEndUnicode is set",
          "    };",
          "    let _result = look_set.contains_word_unicode();",
          "    assert!(!_result);",
          "    assert!(look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.contains(Look::WordStartUnicode));",
          "    assert!(look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 13, // Only Look::WordEndUnicode is set",
          "    };",
          "    let _result = look_set.contains_word_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains_word_unicode(), true);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet {",
          "        bits: 1 << 13, // Only Look::WordEndUnicode is set",
          "    };",
          "    let _result = look_set.contains_word_unicode();",
          "    assert_eq!(look_set.contains_word_unicode(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]