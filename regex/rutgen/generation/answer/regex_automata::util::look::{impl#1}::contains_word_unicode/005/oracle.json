[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 << 14 }; // only Look::WordStartHalfUnicode is set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::WordStartHalfUnicode)); // Ensure WordStartHalfUnicode is set",
          "    assert!(!look_set.contains(Look::WordUnicode)); // Ensure WordUnicode is not set",
          "    assert!(!look_set.contains(Look::WordUnicodeNegate)); // Ensure WordUnicodeNegate is not set",
          "    assert!(!look_set.contains(Look::WordStartUnicode)); // Ensure WordStartUnicode is not set",
          "    assert!(!look_set.contains(Look::WordEndUnicode)); // Ensure WordEndUnicode is not set",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode)); // Ensure WordEndHalfUnicode is not set",
          "    assert_eq!(result, true); // Expect result to be true"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 << 14 }; // only Look::WordStartHalfUnicode is set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    assert!(look_set.contains(Look::WordStartHalfUnicode)); // Ensure WordStartHalfUnicode is set",
          "    assert!(!look_set.contains(Look::WordUnicode)); // Ensure WordUnicode is not set",
          "    assert!(!look_set.contains(Look::WordUnicodeNegate)); // Ensure WordUnicodeNegate is not set",
          "    assert!(!look_set.contains(Look::WordStartUnicode)); // Ensure WordStartUnicode is not set",
          "    assert!(!look_set.contains(Look::WordEndUnicode)); // Ensure WordEndUnicode is not set",
          "    assert!(!look_set.contains(Look::WordEndHalfUnicode)); // Ensure WordEndHalfUnicode is not set",
          "    assert_eq!(result, true); // Expect result to be true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 << 14 }; // only Look::WordStartHalfUnicode is set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: 0 }; // no Look flags set",
          "    let result = look_set.contains_word_unicode(); // should return false",
          "    ",
          "    let look_set = LookSet { bits: 1 << 7 }; // only Look::WordAsciiNegate is set",
          "    let result = look_set.contains_word_unicode(); // should return false",
          "    ",
          "    let look_set = LookSet { bits: 1 << 12 }; // only Look::WordStartUnicode is set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    ",
          "    let look_set = LookSet { bits: 1 << 15 }; // only Look::WordEndHalfAscii is set",
          "    let result = look_set.contains_word_unicode(); // should return false",
          "    ",
          "    let look_set = LookSet { bits: (1 << 14) | (1 << 17) }; // Look::WordStartHalfUnicode and Look::WordEndHalfUnicode are set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    ",
          "    let look_set = LookSet { bits: (1 << 8) }; // only Look::WordUnicode is set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    ",
          "    let look_set = LookSet { bits: (1 << 9) | (1 << 10) }; // Look::WordUnicodeNegate and Look::WordStartAscii are set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    ",
          "    let look_set = LookSet { bits: (1 << 1) | (1 << 6) }; // Look::End and Look::WordAscii are set",
          "    let result = look_set.contains_word_unicode(); // should return false",
          "    ",
          "    let look_set = LookSet { bits: (1 << 2) | (1 << 14) }; // Look::StartLF and Look::WordStartHalfUnicode are set",
          "    let result = look_set.contains_word_unicode(); // should return true"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 << 14 }; // only Look::WordStartHalfUnicode is set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    let look_set = LookSet { bits: 0 }; // no Look flags set",
          "    let result = look_set.contains_word_unicode(); // should return false",
          "    ",
          "    let look_set = LookSet { bits: 1 << 7 }; // only Look::WordAsciiNegate is set",
          "    let result = look_set.contains_word_unicode(); // should return false",
          "    ",
          "    let look_set = LookSet { bits: 1 << 12 }; // only Look::WordStartUnicode is set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    ",
          "    let look_set = LookSet { bits: 1 << 15 }; // only Look::WordEndHalfAscii is set",
          "    let result = look_set.contains_word_unicode(); // should return false",
          "    ",
          "    let look_set = LookSet { bits: (1 << 14) | (1 << 17) }; // Look::WordStartHalfUnicode and Look::WordEndHalfUnicode are set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    ",
          "    let look_set = LookSet { bits: (1 << 8) }; // only Look::WordUnicode is set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    ",
          "    let look_set = LookSet { bits: (1 << 9) | (1 << 10) }; // Look::WordUnicodeNegate and Look::WordStartAscii are set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "    ",
          "    let look_set = LookSet { bits: (1 << 1) | (1 << 6) }; // Look::End and Look::WordAscii are set",
          "    let result = look_set.contains_word_unicode(); // should return false",
          "    ",
          "    let look_set = LookSet { bits: (1 << 2) | (1 << 14) }; // Look::StartLF and Look::WordStartHalfUnicode are set",
          "    let result = look_set.contains_word_unicode(); // should return true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]