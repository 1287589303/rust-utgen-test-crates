[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 0;",
          "    let result = value.low_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    let value: u64 = 255;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 255);",
          "    let value: u64 = 256;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 0);",
          "    let value: u64 = 1;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 1);",
          "    let value: u64 = 127;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 127);",
          "    let value: u64 = 128;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 128);"
        ],
        "code": [
          "{",
          "    let value: u64 = 0;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 0);",
          "    let value: u64 = 255;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 255);",
          "    let value: u64 = 256;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 0);",
          "    let value: u64 = 1;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 1);",
          "    let value: u64 = 127;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 127);",
          "    let value: u64 = 128;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 128);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 1;",
          "    let result = value.low_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let value: u64 = 1;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 255;",
          "    let result = value.low_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 255);"
        ],
        "code": [
          "{",
          "    let value: u64 = 255;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 128;",
          "    let result = value.low_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 128);",
          "    assert_eq!(result, (value & 0xFF) as u8);",
          "    assert_eq!(result, value.low_u8());",
          "    assert_eq!(result, 0x80);",
          "    assert_eq!(result, value as u8);",
          "    assert_eq!(result as u64, value & 0xFF);"
        ],
        "code": [
          "{",
          "    let value: u64 = 128;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 128);",
          "    assert_eq!(result, (value & 0xFF) as u8);",
          "    assert_eq!(result, value.low_u8());",
          "    assert_eq!(result, 0x80);",
          "    assert_eq!(result, value as u8);",
          "    assert_eq!(result as u64, value & 0xFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 255;",
          "    let result = value.low_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 255);"
        ],
        "code": [
          "{",
          "    let value: u64 = 255;",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 256; // This is out of u8 range, intended for validation",
          "    let result = value.low_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert_eq!(result, (value & 0xFF) as u8);",
          "    assert_eq!(result, (256 as u8));",
          "    assert_eq!(result, u8::try_from(value).unwrap_or(0));",
          "    assert_eq!(result, value.low_u8());",
          "    assert!(result == 0);"
        ],
        "code": [
          "{",
          "    let value: u64 = 256; // This is out of u8 range, intended for validation",
          "    let result = value.low_u8();",
          "    assert_eq!(result, 0);",
          "    assert_eq!(result, (value & 0xFF) as u8);",
          "    assert_eq!(result, (256 as u8));",
          "    assert_eq!(result, u8::try_from(value).unwrap_or(0));",
          "    assert_eq!(result, value.low_u8());",
          "    assert!(result == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]