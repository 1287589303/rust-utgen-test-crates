[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let slots = Slots(0);",
          "    let mut f = core::fmt::Formatter::new();",
          "    slots.fmt(&mut f).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slots.fmt(&mut f).is_err(), true);",
          "    assert_eq!(f.buffer().is_empty(), true);",
          "    assert_eq!(f.error().is_none(), true);",
          "    assert_eq!(slots.fmt(&mut f).err().is_some(), true);"
        ],
        "code": [
          "{",
          "    let slots = Slots(0);",
          "    let mut f = core::fmt::Formatter::new();",
          "    slots.fmt(&mut f).unwrap();",
          "    assert_eq!(slots.fmt(&mut f).is_err(), true);",
          "    assert_eq!(f.buffer().is_empty(), true);",
          "    assert_eq!(f.error().is_none(), true);",
          "    assert_eq!(slots.fmt(&mut f).err().is_some(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let slots = Slots(u32::MAX);",
          "    let mut f = core::fmt::Formatter::new();",
          "    slots.fmt(&mut f).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slots.fmt(&mut f), Err(_));"
        ],
        "code": [
          "{",
          "    let slots = Slots(u32::MAX);",
          "    let mut f = core::fmt::Formatter::new();",
          "    slots.fmt(&mut f).unwrap();",
          "    assert_eq!(slots.fmt(&mut f), Err(_));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let slots = Slots(1);",
          "    let mut f = core::fmt::Formatter::new();",
          "    slots.fmt(&mut f).unwrap();",
          "}"
        ],
        "oracle": [
          "    let slots = Slots(1);",
          "    let mut f = core::fmt::Formatter::new();",
          "    assert!(slots.fmt(&mut f).is_err());",
          "    let slots_empty = Slots(0);",
          "    assert_eq!(slots_empty.fmt(&mut f), Ok(()));",
          "    let slots_full = Slots(u32::MAX);",
          "    assert!(slots_full.fmt(&mut f).is_err());",
          "    let slots_with_gaps = Slots(0b1010);",
          "    assert!(slots_with_gaps.fmt(&mut f).is_ok());",
          "    let slots_all_set = Slots(0b1111_1111_1111_1111_1111_1111_1111_1111);",
          "    assert!(slots_all_set.fmt(&mut f).is_err());",
          "    let slots_single_set = Slots(0b0000_0000_0000_0000_0000_0000_0000_0001);",
          "    assert!(slots_single_set.fmt(&mut f).is_ok());"
        ],
        "code": [
          "{",
          "    let slots = Slots(1);",
          "    let mut f = core::fmt::Formatter::new();",
          "    slots.fmt(&mut f).unwrap();",
          "    let slots = Slots(1);",
          "    let mut f = core::fmt::Formatter::new();",
          "    assert!(slots.fmt(&mut f).is_err());",
          "    let slots_empty = Slots(0);",
          "    assert_eq!(slots_empty.fmt(&mut f), Ok(()));",
          "    let slots_full = Slots(u32::MAX);",
          "    assert!(slots_full.fmt(&mut f).is_err());",
          "    let slots_with_gaps = Slots(0b1010);",
          "    assert!(slots_with_gaps.fmt(&mut f).is_ok());",
          "    let slots_all_set = Slots(0b1111_1111_1111_1111_1111_1111_1111_1111);",
          "    assert!(slots_all_set.fmt(&mut f).is_err());",
          "    let slots_single_set = Slots(0b0000_0000_0000_0000_0000_0000_0000_0001);",
          "    assert!(slots_single_set.fmt(&mut f).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let slots = Slots(0b00001111);",
          "    let mut f = core::fmt::Formatter::new();",
          "    slots.fmt(&mut f).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slots.fmt(&mut f).is_err(), true);",
          "    assert_eq!(slots.fmt(&mut f).unwrap_err().kind(), std::fmt::Error);",
          "    assert_eq!(slots.fmt(&mut f).is_ok(), false);",
          "    assert_panics!(|| { slots.fmt(&mut f).unwrap(); });",
          "    assert!(slots.is_empty());"
        ],
        "code": [
          "{",
          "    let slots = Slots(0b00001111);",
          "    let mut f = core::fmt::Formatter::new();",
          "    slots.fmt(&mut f).unwrap();",
          "    assert_eq!(slots.fmt(&mut f).is_err(), true);",
          "    assert_eq!(slots.fmt(&mut f).unwrap_err().kind(), std::fmt::Error);",
          "    assert_eq!(slots.fmt(&mut f).is_ok(), false);",
          "    assert_panics!(|| { slots.fmt(&mut f).unwrap(); });",
          "    assert!(slots.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]