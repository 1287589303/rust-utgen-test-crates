[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "",
          "    let class_bytes = hir::ClassBytes::new(vec![]);",
          "",
          "    let result = compiler.c_byte_class(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.end, compiler.add_empty().unwrap());",
          "    assert!(thompson_ref.start == compiler.add_sparse(vec![]).unwrap());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "",
          "    let class_bytes = hir::ClassBytes::new(vec![]);",
          "",
          "    let result = compiler.c_byte_class(&class_bytes);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.end, compiler.add_empty().unwrap());",
          "    assert!(thompson_ref.start == compiler.add_sparse(vec![]).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "",
          "    let class_bytes = hir::ClassBytes::new(vec![(b'a', b'a')]);",
          "",
          "    let result = compiler.c_byte_class(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    let result = compiler.c_byte_class(&class_bytes);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, self.add_sparse(trans).unwrap());",
          "    assert_eq!(thompson_ref.end, self.add_empty().unwrap());",
          "    assert!(cls.ranges().is_empty());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "",
          "    let class_bytes = hir::ClassBytes::new(vec![(b'a', b'a')]);",
          "",
          "    let result = compiler.c_byte_class(&class_bytes);",
          "    let result = compiler.c_byte_class(&class_bytes);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, self.add_sparse(trans).unwrap());",
          "    assert_eq!(thompson_ref.end, self.add_empty().unwrap());",
          "    assert!(cls.ranges().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "",
          "    let class_bytes = hir::ClassBytes::new(vec![",
          "        (b'a', b'a'),",
          "        (b'b', b'b'),",
          "        (b'c', b'c'),",
          "    ]);",
          "",
          "    let result = compiler.c_byte_class(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.end, compiler.add_empty().unwrap());",
          "    assert_eq!(thompson_ref.start, compiler.add_sparse(vec![]).unwrap());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::default(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "",
          "    let class_bytes = hir::ClassBytes::new(vec![",
          "        (b'a', b'a'),",
          "        (b'b', b'b'),",
          "        (b'c', b'c'),",
          "    ]);",
          "",
          "    let result = compiler.c_byte_class(&class_bytes);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.end, compiler.add_empty().unwrap());",
          "    assert_eq!(thompson_ref.start, compiler.add_sparse(vec![]).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]