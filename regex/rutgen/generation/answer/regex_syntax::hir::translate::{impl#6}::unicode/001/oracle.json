[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        unicode: None,",
          "        ..Default::default()",
          "    };",
          "    let _result = flags.unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, true);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        unicode: None,",
          "        ..Default::default()",
          "    };",
          "    let _result = flags.unicode();",
          "    assert_eq!(_result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        unicode: Some(true),",
          "        ..Default::default()",
          "    };",
          "    let _result = flags.unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(flags.unicode(), true);",
          "    let flags = Flags { unicode: Some(false), ..Default::default() };",
          "    assert_eq!(flags.unicode(), false);",
          "    let flags = Flags { unicode: None, ..Default::default() };",
          "    assert_eq!(flags.unicode(), true);",
          "    let flags = Flags { unicode: Some(true), multi_line: Some(true), ..Default::default() };",
          "    assert_eq!(flags.unicode(), true);",
          "    let flags = Flags { unicode: Some(false), case_insensitive: Some(true), ..Default::default() };",
          "    assert_eq!(flags.unicode(), false);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        unicode: Some(true),",
          "        ..Default::default()",
          "    };",
          "    let _result = flags.unicode();",
          "    assert_eq!(flags.unicode(), true);",
          "    let flags = Flags { unicode: Some(false), ..Default::default() };",
          "    assert_eq!(flags.unicode(), false);",
          "    let flags = Flags { unicode: None, ..Default::default() };",
          "    assert_eq!(flags.unicode(), true);",
          "    let flags = Flags { unicode: Some(true), multi_line: Some(true), ..Default::default() };",
          "    assert_eq!(flags.unicode(), true);",
          "    let flags = Flags { unicode: Some(false), case_insensitive: Some(true), ..Default::default() };",
          "    assert_eq!(flags.unicode(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        unicode: Some(false),",
          "        ..Default::default()",
          "    };",
          "    let _result = flags.unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, false);",
          "    assert!(flags.unicode.is_some());",
          "    assert!(flags.unicode.unwrap() == false);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        unicode: Some(false),",
          "        ..Default::default()",
          "    };",
          "    let _result = flags.unicode();",
          "    assert_eq!(_result, false);",
          "    assert!(flags.unicode.is_some());",
          "    assert!(flags.unicode.unwrap() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]