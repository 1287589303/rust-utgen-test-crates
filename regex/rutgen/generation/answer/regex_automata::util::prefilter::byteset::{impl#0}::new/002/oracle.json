[
  {
    "uses": [
      "use crate::util::prefilter::ByteSet;",
      "use crate::util::prefilter::MatchKind;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::prefilter::{ByteSet, MatchKind};",
          "",
          "    let needles = [&[b'a'], &[b'Z']];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let byte_set = result.unwrap();",
          "    assert_eq!(byte_set.0, [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,"
        ],
        "code": [
          "{",
          "    use crate::util::prefilter::{ByteSet, MatchKind};",
          "",
          "    let needles = [&[b'a'], &[b'Z']];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert!(result.is_some());",
          "    let byte_set = result.unwrap();",
          "    assert_eq!(byte_set.0, [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::prefilter::{ByteSet, MatchKind};",
          "",
          "    let needles: &[&[u8]] = &[];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let needles: &[&[u8]] = &[b\"a\"];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert!(result.is_some());",
          "    let byte_set = result.unwrap();",
          "    assert_eq!(byte_set.0[97], true);",
          "    let needles: &[&[u8]] = &[b\"a\", b\"b\"];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert!(result.is_some());",
          "    let byte_set = result.unwrap();",
          "    assert_eq!(byte_set.0[97], true);",
          "    assert_eq!(byte_set.0[98], true);",
          "    let needles: &[&[u8]] = &[b\"abc\"];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    use crate::util::prefilter::{ByteSet, MatchKind};",
          "",
          "    let needles: &[&[u8]] = &[];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert_eq!(result, None);",
          "    let needles: &[&[u8]] = &[b\"a\"];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert!(result.is_some());",
          "    let byte_set = result.unwrap();",
          "    assert_eq!(byte_set.0[97], true);",
          "    let needles: &[&[u8]] = &[b\"a\", b\"b\"];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert!(result.is_some());",
          "    let byte_set = result.unwrap();",
          "    assert_eq!(byte_set.0[97], true);",
          "    assert_eq!(byte_set.0[98], true);",
          "    let needles: &[&[u8]] = &[b\"abc\"];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::util::prefilter::{ByteSet, MatchKind};",
          "",
          "    let needles = [&[b'a'], &[b'Z'], &[b'\\0'], &[b'1']];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let byte_set = result.unwrap();",
          "    assert_eq!(byte_set.0[usize::from(b'a')], true);",
          "    assert_eq!(byte_set.0[usize::from(b'Z')], true);",
          "    assert_eq!(byte_set.0[usize::from(b'\\0')], true);",
          "    assert_eq!(byte_set.0[usize::from(b'1')], true);",
          "    assert_eq!(byte_set.0.iter().filter(|&&b| b).count(), needles.len());"
        ],
        "code": [
          "{",
          "    use crate::util::prefilter::{ByteSet, MatchKind};",
          "",
          "    let needles = [&[b'a'], &[b'Z'], &[b'\\0'], &[b'1']];",
          "    let result = ByteSet::new(MatchKind::All, &needles);",
          "    assert!(result.is_some());",
          "    let byte_set = result.unwrap();",
          "    assert_eq!(byte_set.0[usize::from(b'a')], true);",
          "    assert_eq!(byte_set.0[usize::from(b'Z')], true);",
          "    assert_eq!(byte_set.0[usize::from(b'\\0')], true);",
          "    assert_eq!(byte_set.0[usize::from(b'1')], true);",
          "    assert_eq!(byte_set.0.iter().filter(|&&b| b).count(), needles.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]