[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let intervals: Vec<ClassUnicodeRange> = vec![];",
          "    let iter = IntervalSetIter(intervals.iter());",
          "    let mut class_unicode_iter = ClassUnicodeIter(iter);",
          "    let result = class_unicode_iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let intervals: Vec<ClassUnicodeRange> = vec![];",
          "    let iter = IntervalSetIter(intervals.iter());",
          "    let mut class_unicode_iter = ClassUnicodeIter(iter);",
          "    let result = class_unicode_iter.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let intervals: Vec<ClassUnicodeRange> = vec![ClassUnicodeRange { start: 'a', end: 'a' }];",
          "    let iter = IntervalSetIter(intervals.iter());",
          "    let mut class_unicode_iter = ClassUnicodeIter(iter);",
          "    let result = class_unicode_iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&ClassUnicodeRange { start: 'a', end: 'a' }));",
          "    assert_eq!(class_unicode_iter.next(), None);",
          "    let intervals_empty: Vec<ClassUnicodeRange> = vec![];",
          "    let iter_empty = IntervalSetIter(intervals_empty.iter());",
          "    let mut class_unicode_iter_empty = ClassUnicodeIter(iter_empty);",
          "    let result_empty = class_unicode_iter_empty.next();",
          "    assert_eq!(result_empty, None);"
        ],
        "code": [
          "{",
          "    let intervals: Vec<ClassUnicodeRange> = vec![ClassUnicodeRange { start: 'a', end: 'a' }];",
          "    let iter = IntervalSetIter(intervals.iter());",
          "    let mut class_unicode_iter = ClassUnicodeIter(iter);",
          "    let result = class_unicode_iter.next();",
          "    assert_eq!(result, Some(&ClassUnicodeRange { start: 'a', end: 'a' }));",
          "    assert_eq!(class_unicode_iter.next(), None);",
          "    let intervals_empty: Vec<ClassUnicodeRange> = vec![];",
          "    let iter_empty = IntervalSetIter(intervals_empty.iter());",
          "    let mut class_unicode_iter_empty = ClassUnicodeIter(iter_empty);",
          "    let result_empty = class_unicode_iter_empty.next();",
          "    assert_eq!(result_empty, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let intervals: Vec<ClassUnicodeRange> = vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "        ClassUnicodeRange { start: 'c', end: 'd' }",
          "    ];",
          "    let iter = IntervalSetIter(intervals.iter());",
          "    let mut class_unicode_iter = ClassUnicodeIter(iter);",
          "    let result1 = class_unicode_iter.next();",
          "    let result2 = class_unicode_iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result1, Some(&ClassUnicodeRange { start: 'a', end: 'b' }));",
          "    assert_eq!(result2, Some(&ClassUnicodeRange { start: 'c', end: 'd' }));",
          "    assert_eq!(class_unicode_iter.next(), None);"
        ],
        "code": [
          "{",
          "    let intervals: Vec<ClassUnicodeRange> = vec![",
          "        ClassUnicodeRange { start: 'a', end: 'b' },",
          "        ClassUnicodeRange { start: 'c', end: 'd' }",
          "    ];",
          "    let iter = IntervalSetIter(intervals.iter());",
          "    let mut class_unicode_iter = ClassUnicodeIter(iter);",
          "    let result1 = class_unicode_iter.next();",
          "    let result2 = class_unicode_iter.next();",
          "    assert_eq!(result1, Some(&ClassUnicodeRange { start: 'a', end: 'b' }));",
          "    assert_eq!(result2, Some(&ClassUnicodeRange { start: 'c', end: 'd' }));",
          "    assert_eq!(class_unicode_iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let intervals: Vec<ClassUnicodeRange> = vec![",
          "        ClassUnicodeRange { start: 'e', end: 'f' }",
          "    ];",
          "    let iter = IntervalSetIter(intervals.iter());",
          "    let mut class_unicode_iter = ClassUnicodeIter(iter);",
          "    let result1 = class_unicode_iter.next();",
          "    let result2 = class_unicode_iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result1, Some(&ClassUnicodeRange { start: 'e', end: 'f' }));",
          "    assert_eq!(result2, None);"
        ],
        "code": [
          "{",
          "    let intervals: Vec<ClassUnicodeRange> = vec![",
          "        ClassUnicodeRange { start: 'e', end: 'f' }",
          "    ];",
          "    let iter = IntervalSetIter(intervals.iter());",
          "    let mut class_unicode_iter = ClassUnicodeIter(iter);",
          "    let result1 = class_unicode_iter.next();",
          "    let result2 = class_unicode_iter.next();",
          "    assert_eq!(result1, Some(&ClassUnicodeRange { start: 'e', end: 'f' }));",
          "    assert_eq!(result2, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]