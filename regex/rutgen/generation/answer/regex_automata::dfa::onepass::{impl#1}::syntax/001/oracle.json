[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: false,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "    case_insensitive: true,",
          "    multi_line: false,",
          "    dot_matches_new_line: false,",
          "    crlf: false,",
          "    line_terminator: 10,",
          "    unicode: false,",
          "    utf8: false,",
          "    ..Default::default()",
          "    };",
          "    let returned_builder = builder.syntax(config);",
          "    assert_eq!(returned_builder, &mut builder);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: false,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "    case_insensitive: true,",
          "    multi_line: false,",
          "    dot_matches_new_line: false,",
          "    crlf: false,",
          "    line_terminator: 10,",
          "    unicode: false,",
          "    utf8: false,",
          "    ..Default::default()",
          "    };",
          "    let returned_builder = builder.syntax(config);",
          "    assert_eq!(returned_builder, &mut builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: true,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: false,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    builder.syntax(config).is::<&mut Builder>();"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: true,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: false,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    builder.syntax(config).is::<&mut Builder>();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: true,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: false,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config { case_insensitive: false, multi_line: false, dot_matches_new_line: true, crlf: false, line_terminator: 10, unicode: false, utf8: false, ..Default::default() };",
          "    let result = builder.syntax(config);",
          "    assert_eq!(result, &mut builder);",
          "    assert!(result.thompson.config.case_insensitive == false);",
          "    assert!(result.thompson.config.multi_line == false);",
          "    assert!(result.thompson.config.dot_matches_new_line == true);",
          "    assert!(result.thompson.config.crlf == false);",
          "    assert!(result.thompson.config.line_terminator == 10);",
          "    assert!(result.thompson.config.unicode == false);",
          "    assert!(result.thompson.config.utf8 == false);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: true,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: false,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config { case_insensitive: false, multi_line: false, dot_matches_new_line: true, crlf: false, line_terminator: 10, unicode: false, utf8: false, ..Default::default() };",
          "    let result = builder.syntax(config);",
          "    assert_eq!(result, &mut builder);",
          "    assert!(result.thompson.config.case_insensitive == false);",
          "    assert!(result.thompson.config.multi_line == false);",
          "    assert!(result.thompson.config.dot_matches_new_line == true);",
          "    assert!(result.thompson.config.crlf == false);",
          "    assert!(result.thompson.config.line_terminator == 10);",
          "    assert!(result.thompson.config.unicode == false);",
          "    assert!(result.thompson.config.utf8 == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: true,",
          "        line_terminator: 13,",
          "        unicode: false,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    builder.syntax(config);",
          "    assert!(std::ptr::eq(builder.syntax(config), &builder));",
          "    assert_eq!(builder.thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.thompson.config.multi_line, false);",
          "    assert_eq!(builder.thompson.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.thompson.config.crlf, true);",
          "    assert_eq!(builder.thompson.config.line_terminator, 13);",
          "    assert_eq!(builder.thompson.config.unicode, false);",
          "    assert_eq!(builder.thompson.config.utf8, false);"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: true,",
          "        line_terminator: 13,",
          "        unicode: false,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    builder.syntax(config);",
          "    assert!(std::ptr::eq(builder.syntax(config), &builder));",
          "    assert_eq!(builder.thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.thompson.config.multi_line, false);",
          "    assert_eq!(builder.thompson.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.thompson.config.crlf, true);",
          "    assert_eq!(builder.thompson.config.line_terminator, 13);",
          "    assert_eq!(builder.thompson.config.unicode, false);",
          "    assert_eq!(builder.thompson.config.utf8, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: true,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert!(builder.syntax(config).is::<&mut Builder>());",
          "    assert_eq!(builder.thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.thompson.config.multi_line, false);",
          "    assert_eq!(builder.thompson.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.thompson.config.crlf, false);",
          "    assert_eq!(builder.thompson.config.line_terminator, 10);",
          "    assert_eq!(builder.thompson.config.unicode, true);",
          "    assert_eq!(builder.thompson.config.utf8, false);",
          "    assert!(builder.thompson.syntax(config).is::<&mut Builder>());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: true,",
          "        utf8: false,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    assert!(builder.syntax(config).is::<&mut Builder>());",
          "    assert_eq!(builder.thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.thompson.config.multi_line, false);",
          "    assert_eq!(builder.thompson.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.thompson.config.crlf, false);",
          "    assert_eq!(builder.thompson.config.line_terminator, 10);",
          "    assert_eq!(builder.thompson.config.unicode, true);",
          "    assert_eq!(builder.thompson.config.utf8, false);",
          "    assert!(builder.thompson.syntax(config).is::<&mut Builder>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: false,",
          "        utf8: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.thompson.config.multi_line, false);",
          "    assert_eq!(builder.thompson.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.thompson.config.crlf, false);",
          "    assert_eq!(builder.thompson.config.line_terminator, 10);",
          "    assert_eq!(builder.thompson.config.unicode, false);",
          "    assert_eq!(builder.thompson.config.utf8, true);",
          "    assert!(std::ptr::eq(builder.syntax(config), &mut builder));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: false,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        crlf: false,",
          "        line_terminator: 10,",
          "        unicode: false,",
          "        utf8: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    assert_eq!(builder.thompson.config.case_insensitive, false);",
          "    assert_eq!(builder.thompson.config.multi_line, false);",
          "    assert_eq!(builder.thompson.config.dot_matches_new_line, false);",
          "    assert_eq!(builder.thompson.config.crlf, false);",
          "    assert_eq!(builder.thompson.config.line_terminator, 10);",
          "    assert_eq!(builder.thompson.config.unicode, false);",
          "    assert_eq!(builder.thompson.config.utf8, true);",
          "    assert!(std::ptr::eq(builder.syntax(config), &mut builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        multi_line: true,",
          "        dot_matches_new_line: true,",
          "        crlf: true,",
          "        line_terminator: 255,",
          "        unicode: true,",
          "        utf8: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "    case_insensitive: true,",
          "    multi_line: true,",
          "    dot_matches_new_line: true,",
          "    crlf: true,",
          "    line_terminator: 255,",
          "    unicode: true,",
          "    utf8: true,",
          "    ..Default::default()",
          "    };",
          "    let result = builder.syntax(config);",
          "    assert!(std::ptr::eq(result, &builder));"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "        case_insensitive: true,",
          "        multi_line: true,",
          "        dot_matches_new_line: true,",
          "        crlf: true,",
          "        line_terminator: 255,",
          "        unicode: true,",
          "        utf8: true,",
          "        ..Default::default()",
          "    };",
          "    builder.syntax(config);",
          "    let builder = Builder::new();",
          "    let config = crate::util::syntax::Config {",
          "    case_insensitive: true,",
          "    multi_line: true,",
          "    dot_matches_new_line: true,",
          "    crlf: true,",
          "    line_terminator: 255,",
          "    unicode: true,",
          "    utf8: true,",
          "    ..Default::default()",
          "    };",
          "    let result = builder.syntax(config);",
          "    assert!(std::ptr::eq(result, &builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]