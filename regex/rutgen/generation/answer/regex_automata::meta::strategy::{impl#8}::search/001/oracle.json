[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"test haystack\";",
          "    let pattern_id = PatternID(0);",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .span(0..haystack.len());",
          "",
          "    let mut cache = Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "",
          "    let reverse_suffix = ReverseSuffix { core, pre: Prefilter::default() };",
          "",
          "    let _ = reverse_suffix.search(&mut cache, &input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(reverse_suffix.search(&mut cache, &input).is_some(), true);",
          "    let match_result = reverse_suffix.search(&mut cache, &input).unwrap();",
          "    assert_eq!(match_result.pattern(), pattern_id);",
          "    assert!(match_result.offset().start() < match_result.offset().end());",
          "    assert!(match_result.offset().end() <= input.end());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"test haystack\";",
          "    let pattern_id = PatternID(0);",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Yes)",
          "        .span(0..haystack.len());",
          "",
          "    let mut cache = Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "",
          "    let reverse_suffix = ReverseSuffix { core, pre: Prefilter::default() };",
          "",
          "    let _ = reverse_suffix.search(&mut cache, &input);",
          "    assert_eq!(reverse_suffix.search(&mut cache, &input).is_some(), true);",
          "    let match_result = reverse_suffix.search(&mut cache, &input).unwrap();",
          "    assert_eq!(match_result.pattern(), pattern_id);",
          "    assert!(match_result.offset().start() < match_result.offset().end());",
          "    assert!(match_result.offset().end() <= input.end());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack: &[u8] = b\"another test haystack\";",
          "    let pattern_id = PatternID(1);",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Pattern(pattern_id))",
          "        .span(0..haystack.len());",
          "",
          "    let mut cache = Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "",
          "    let reverse_suffix = ReverseSuffix { core, pre: Prefilter::default() };",
          "",
          "    let _ = reverse_suffix.search(&mut cache, &input);",
          "}"
        ],
        "oracle": [
          "    assert!(input.get_anchored().is_anchored());",
          "    let result = reverse_suffix.search(&mut cache, &input);",
          "    assert!(result.is_some());",
          "    if let Some(match_result) = result {",
          "    assert_eq!(match_result.pattern(), pattern_id);",
          "    assert!(match_result.span.start <= match_result.span.end);",
          "    }",
          "    let cached = cache.capmatches;",
          "    assert!(cached.matches.len() == 1);",
          "    assert_eq!(cached.get_match(), Some(match_result));",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());"
        ],
        "code": [
          "{",
          "    let haystack: &[u8] = b\"another test haystack\";",
          "    let pattern_id = PatternID(1);",
          "    let input = Input::new(haystack)",
          "        .anchored(Anchored::Pattern(pattern_id))",
          "        .span(0..haystack.len());",
          "",
          "    let mut cache = Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "",
          "    let reverse_suffix = ReverseSuffix { core, pre: Prefilter::default() };",
          "",
          "    let _ = reverse_suffix.search(&mut cache, &input);",
          "    assert!(input.get_anchored().is_anchored());",
          "    let result = reverse_suffix.search(&mut cache, &input);",
          "    assert!(result.is_some());",
          "    if let Some(match_result) = result {",
          "    assert_eq!(match_result.pattern(), pattern_id);",
          "    assert!(match_result.span.start <= match_result.span.end);",
          "    }",
          "    let cached = cache.capmatches;",
          "    assert!(cached.matches.len() == 1);",
          "    assert_eq!(cached.get_match(), Some(match_result));",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]