[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[derive(Clone, Debug, Default, PartialEq, PartialOrd, Eq, Ord)]",
      "struct TestInterval {",
      "    lower: u32,",
      "    upper: u32,",
      "}",
      "",
      "impl TestInterval {",
      "    fn new(lower: u32, upper: u32) -> Self {",
      "        Self { lower, upper }",
      "    }",
      "}",
      "",
      "impl super::Interval for TestInterval {",
      "    type Bound = u32;",
      "",
      "    fn lower(&self) -> Self::Bound {",
      "        self.lower",
      "    }",
      "",
      "    fn upper(&self) -> Self::Bound {",
      "        self.upper",
      "    }",
      "",
      "    fn set_lower(&mut self, bound: Self::Bound) {",
      "        self.lower = bound;",
      "    }",
      "",
      "    fn set_upper(&mut self, bound: Self::Bound) {",
      "        self.upper = bound;",
      "    }",
      "",
      "    fn case_fold_simple(&self, _intervals: &mut Vec<Self>) -> Result<(), unicode::CaseFoldError> {",
      "        Ok(())",
      "    }",
      "",
      "    fn is_contiguous(&self, other: &Self) -> bool {",
      "        self.upper < other.lower || self.lower > other.upper",
      "    }",
      "",
      "    fn is_intersection_empty(&self, other: &Self) -> bool {",
      "        self.lower > other.upper || self.upper < other.lower",
      "    }",
      "",
      "    fn is_subset(&self, other: &Self) -> bool {",
      "        self.lower >= other.lower && self.upper <= other.upper",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let interval1 = TestInterval::new(1, 2);",
          "    let interval2 = TestInterval::new(3, 4);",
          "    let intervals = vec![interval1, interval2];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "}"
        ],
        "oracle": [
          "    let interval1 = TestInterval::new(1, 2);",
          "    let interval2 = TestInterval::new(2, 3);",
          "    let intervals = vec![interval1, interval2];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "    ",
          "    let interval3 = TestInterval::new(1, 3);",
          "    let interval4 = TestInterval::new(4, 5);",
          "    let intervals2 = vec![interval3, interval4];",
          "    let interval_set2 = super::IntervalSet::<TestInterval> { ranges: intervals2, folded: false };",
          "    assert!(interval_set2.is_canonical());",
          "    ",
          "    let interval5 = TestInterval::new(1, 3);",
          "    let interval6 = TestInterval::new(3, 2);",
          "    let intervals3 = vec![interval5, interval6];",
          "    let interval_set3 = super::IntervalSet::<TestInterval> { ranges: intervals3, folded: false };",
          "    assert!(!interval_set3.is_canonical());",
          "    ",
          "    let interval7 = TestInterval::new(1, 5);",
          "    let interval8 = TestInterval::new(6, 10);",
          "    let intervals4 = vec![interval7, interval8];",
          "    let interval_set4 = super::IntervalSet::<TestInterval> { ranges: intervals4, folded: false };",
          "    assert!(interval_set4.is_canonical());",
          "    ",
          "    let interval9 = TestInterval::new(1, 4);",
          "    let interval10 = TestInterval::new(2, 3);",
          "    let intervals5 = vec![interval9, interval10];",
          "    let interval_set5 = super::IntervalSet::<TestInterval> { ranges: intervals5, folded: false };",
          "    assert!(!interval_set5.is_canonical());"
        ],
        "code": [
          "{",
          "    let interval1 = TestInterval::new(1, 2);",
          "    let interval2 = TestInterval::new(3, 4);",
          "    let intervals = vec![interval1, interval2];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "    let interval1 = TestInterval::new(1, 2);",
          "    let interval2 = TestInterval::new(2, 3);",
          "    let intervals = vec![interval1, interval2];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "    ",
          "    let interval3 = TestInterval::new(1, 3);",
          "    let interval4 = TestInterval::new(4, 5);",
          "    let intervals2 = vec![interval3, interval4];",
          "    let interval_set2 = super::IntervalSet::<TestInterval> { ranges: intervals2, folded: false };",
          "    assert!(interval_set2.is_canonical());",
          "    ",
          "    let interval5 = TestInterval::new(1, 3);",
          "    let interval6 = TestInterval::new(3, 2);",
          "    let intervals3 = vec![interval5, interval6];",
          "    let interval_set3 = super::IntervalSet::<TestInterval> { ranges: intervals3, folded: false };",
          "    assert!(!interval_set3.is_canonical());",
          "    ",
          "    let interval7 = TestInterval::new(1, 5);",
          "    let interval8 = TestInterval::new(6, 10);",
          "    let intervals4 = vec![interval7, interval8];",
          "    let interval_set4 = super::IntervalSet::<TestInterval> { ranges: intervals4, folded: false };",
          "    assert!(interval_set4.is_canonical());",
          "    ",
          "    let interval9 = TestInterval::new(1, 4);",
          "    let interval10 = TestInterval::new(2, 3);",
          "    let intervals5 = vec![interval9, interval10];",
          "    let interval_set5 = super::IntervalSet::<TestInterval> { ranges: intervals5, folded: false };",
          "    assert!(!interval_set5.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let interval1 = TestInterval::new(10, 15);",
          "    let interval2 = TestInterval::new(20, 25);",
          "    let intervals = vec![interval1, interval2];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(interval_set.is_canonical(), true);",
          "    let interval3 = TestInterval::new(15, 20);",
          "    let intervals = vec![interval1, interval2, interval3];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "    let interval4 = TestInterval::new(12, 18);",
          "    let intervals = vec![interval1, interval2, interval4];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(!interval_set.is_canonical());",
          "    let interval5 = TestInterval::new(18, 22);",
          "    let intervals = vec![interval1, interval5];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());"
        ],
        "code": [
          "{",
          "    let interval1 = TestInterval::new(10, 15);",
          "    let interval2 = TestInterval::new(20, 25);",
          "    let intervals = vec![interval1, interval2];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "    assert_eq!(interval_set.is_canonical(), true);",
          "    let interval3 = TestInterval::new(15, 20);",
          "    let intervals = vec![interval1, interval2, interval3];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "    let interval4 = TestInterval::new(12, 18);",
          "    let intervals = vec![interval1, interval2, interval4];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(!interval_set.is_canonical());",
          "    let interval5 = TestInterval::new(18, 22);",
          "    let intervals = vec![interval1, interval5];",
          "    let interval_set = super::IntervalSet::<TestInterval> { ranges: intervals, folded: false };",
          "    assert!(interval_set.is_canonical());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]