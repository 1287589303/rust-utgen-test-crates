[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char('a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"a\");",
          "    assert!(writer.wtr.output.len() == 1);",
          "    assert!(writer.wtr.output.contains('a'));",
          "    assert!(!writer.wtr.output.contains('\\\\'));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char('a');",
          "    assert_eq!(writer.wtr.output, \"a\");",
          "    assert!(writer.wtr.output.len() == 1);",
          "    assert!(writer.wtr.output.contains('a'));",
          "    assert!(!writer.wtr.output.contains('\\\\'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char('1');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"1\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char('1');",
          "    assert_eq!(writer.wtr.output, \"1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char(' ');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \" \");",
          "    assert_eq!(writer.wtr.output.len(), 1);",
          "    assert!(writer.wtr.output.chars().all(|c| !is_meta_character(c)));",
          "    assert!(writer.wtr.output.contains(' '));"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char(' ');",
          "    assert_eq!(writer.wtr.output, \" \");",
          "    assert_eq!(writer.wtr.output.len(), 1);",
          "    assert!(writer.wtr.output.chars().all(|c| !is_meta_character(c)));",
          "    assert!(writer.wtr.output.contains(' '));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char('Z');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.wtr.output, \"Z\");",
          "    assert!(writer.wtr.output.len() == 1);",
          "    assert!(writer.wtr.output.contains('Z'));",
          "    assert!(writer.wtr.output.chars().all(|c| !is_meta_character(c)));",
          "    assert!(writer.wtr.output != \"\\\\\" );"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char('Z');",
          "    assert_eq!(writer.wtr.output, \"Z\");",
          "    assert!(writer.wtr.output.len() == 1);",
          "    assert!(writer.wtr.output.contains('Z'));",
          "    assert!(writer.wtr.output.chars().all(|c| !is_meta_character(c)));",
          "    assert!(writer.wtr.output != \"\\\\\" );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char('©');",
          "}"
        ],
        "oracle": [
          "    assert!(writer.wtr.output.is_empty());",
          "    assert_eq!(writer.wtr.output, \"©\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = Writer { wtr: TestWriter { output: String::new() } };",
          "    let _ = writer.write_literal_char('©');",
          "    assert!(writer.wtr.output.is_empty());",
          "    assert_eq!(writer.wtr.output, \"©\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]