[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_data: [u8; 1] = [42];",
          "    let transitions = Transitions {",
          "        sparse: &sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 1,",
          "    };",
          "    let _ = transitions.sparse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transitions.sparse(), &sparse_data);"
        ],
        "code": [
          "{",
          "    let sparse_data: [u8; 1] = [42];",
          "    let transitions = Transitions {",
          "        sparse: &sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 1,",
          "        pattern_len: 1,",
          "    };",
          "    let _ = transitions.sparse();",
          "    assert_eq!(transitions.sparse(), &sparse_data);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_data: [u8; 5] = [10, 20, 30, 40, 50];",
          "    let transitions = Transitions {",
          "        sparse: &sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 5,",
          "        pattern_len: 5,",
          "    };",
          "    let _ = transitions.sparse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transitions.sparse(), &sparse_data);"
        ],
        "code": [
          "{",
          "    let sparse_data: [u8; 5] = [10, 20, 30, 40, 50];",
          "    let transitions = Transitions {",
          "        sparse: &sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 5,",
          "        pattern_len: 5,",
          "    };",
          "    let _ = transitions.sparse();",
          "    assert_eq!(transitions.sparse(), &sparse_data);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sparse_data: [u8; 256] = [0; 256]; // All zeros",
          "    let transitions = Transitions {",
          "        sparse: &sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 256,",
          "        pattern_len: 256,",
          "    };",
          "    let _ = transitions.sparse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transitions.sparse(), &sparse_data);"
        ],
        "code": [
          "{",
          "    let sparse_data: [u8; 256] = [0; 256]; // All zeros",
          "    let transitions = Transitions {",
          "        sparse: &sparse_data,",
          "        classes: ByteClasses([0; 256]),",
          "        state_len: 256,",
          "        pattern_len: 256,",
          "    };",
          "    let _ = transitions.sparse();",
          "    assert_eq!(transitions.sparse(), &sparse_data);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]