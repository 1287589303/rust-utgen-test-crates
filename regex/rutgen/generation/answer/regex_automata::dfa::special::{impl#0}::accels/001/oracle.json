[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(1),",
          "        min_start: StateID(3),",
          "        max_start: StateID(6),",
          "    };",
          "    special.accels();",
          "}"
        ],
        "oracle": [
          "    assert!(special.accels() == true);",
          "    special.min_accel = StateID(DEAD);",
          "    assert!(special.accels() == false);",
          "    special.min_accel = StateID(1);",
          "    assert!(special.accels() == true);",
          "    special.min_accel = StateID(0);",
          "    assert!(special.accels() == true);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(1),",
          "        min_start: StateID(3),",
          "        max_start: StateID(6),",
          "    };",
          "    special.accels();",
          "    assert!(special.accels() == true);",
          "    special.min_accel = StateID(DEAD);",
          "    assert!(special.accels() == false);",
          "    special.min_accel = StateID(1);",
          "    assert!(special.accels() == true);",
          "    special.min_accel = StateID(0);",
          "    assert!(special.accels() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(1),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(3),",
          "        max_start: StateID(6),",
          "    };",
          "    special.accels();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.accels(), true);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(1),",
          "        max_accel: StateID(3),",
          "        min_start: StateID(3),",
          "        max_start: StateID(6),",
          "    };",
          "    special.accels();",
          "    assert_eq!(special.accels(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: DEAD,",
          "        max_accel: StateID(3),",
          "        min_start: StateID(3),",
          "        max_start: StateID(6),",
          "    };",
          "    special.accels();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.accels(), false);  // min_accel is DEAD",
          "    ",
          "    let special_with_accel = Special {",
          "    max: StateID(10),",
          "    quit_id: StateID(5),",
          "    min_match: StateID(2),",
          "    max_match: StateID(4),",
          "    min_accel: StateID(1),  // valid accel state",
          "    max_accel: StateID(3),",
          "    min_start: StateID(3),",
          "    max_start: StateID(6),",
          "    };",
          "    assert_eq!(special_with_accel.accels(), true);  // min_accel is not DEAD"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: DEAD,",
          "        max_accel: StateID(3),",
          "        min_start: StateID(3),",
          "        max_start: StateID(6),",
          "    };",
          "    special.accels();",
          "    assert_eq!(special.accels(), false);  // min_accel is DEAD",
          "    ",
          "    let special_with_accel = Special {",
          "    max: StateID(10),",
          "    quit_id: StateID(5),",
          "    min_match: StateID(2),",
          "    max_match: StateID(4),",
          "    min_accel: StateID(1),  // valid accel state",
          "    max_accel: StateID(3),",
          "    min_start: StateID(3),",
          "    max_start: StateID(6),",
          "    };",
          "    assert_eq!(special_with_accel.accels(), true);  // min_accel is not DEAD",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(1),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(3),",
          "        max_start: StateID(6),",
          "    };",
          "    special.accels();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.accels(), true);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(5),",
          "        min_match: StateID(2),",
          "        max_match: StateID(4),",
          "        min_accel: StateID(1),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(3),",
          "        max_start: StateID(6),",
          "    };",
          "    special.accels();",
          "    assert_eq!(special.accels(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]