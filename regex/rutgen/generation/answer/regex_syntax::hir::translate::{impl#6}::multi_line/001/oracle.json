[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        multi_line: Some(true),",
          "        ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let flags = Flags { multi_line: Some(false), ..Flags::default() };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, false);",
          "    let flags = Flags { multi_line: None, ..Flags::default() };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        multi_line: Some(true),",
          "        ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, true);",
          "    let flags = Flags { multi_line: Some(false), ..Flags::default() };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, false);",
          "    let flags = Flags { multi_line: None, ..Flags::default() };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        multi_line: Some(false),",
          "        ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    ",
          "    let flags = Flags {",
          "    multi_line: Some(true),",
          "    ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, true);",
          "    ",
          "    let flags = Flags {",
          "    multi_line: None,",
          "    ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        multi_line: Some(false),",
          "        ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, false);",
          "    ",
          "    let flags = Flags {",
          "    multi_line: Some(true),",
          "    ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, true);",
          "    ",
          "    let flags = Flags {",
          "    multi_line: None,",
          "    ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags {",
          "        multi_line: None,",
          "        ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let flags = Flags {",
          "        multi_line: None,",
          "        ..Flags::default()",
          "    };",
          "    let result = flags.multi_line();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]