[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner::default())),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let hybrid = ReverseHybrid::new(&core.info, &core.nfa);",
          "    ",
          "    let strategy = ReverseInner { ",
          "        core, ",
          "        preinner: Prefilter::default(), ",
          "        nfarev: NFA(Arc::new(Inner::default())), ",
          "        hybrid, ",
          "        dfa: wrappers::ReverseDFA::default() ",
          "    };",
          "    ",
          "    let _cache = strategy.create_cache();",
          "}"
        ],
        "oracle": [
          "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA(Arc::new(Inner::default())), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
          "    let hybrid = ReverseHybrid::new(&core.info, &core.nfa);",
          "    let strategy = ReverseInner { core, preinner: Prefilter::default(), nfarev: NFA(Arc::new(Inner::default())), hybrid, dfa: wrappers::ReverseDFA::default() };",
          "    let cache = strategy.create_cache();",
          "    assert_eq!(cache.revhybrid, strategy.hybrid.create_cache());",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_none());"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner::default())),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let hybrid = ReverseHybrid::new(&core.info, &core.nfa);",
          "    ",
          "    let strategy = ReverseInner { ",
          "        core, ",
          "        preinner: Prefilter::default(), ",
          "        nfarev: NFA(Arc::new(Inner::default())), ",
          "        hybrid, ",
          "        dfa: wrappers::ReverseDFA::default() ",
          "    };",
          "    ",
          "    let _cache = strategy.create_cache();",
          "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA(Arc::new(Inner::default())), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
          "    let hybrid = ReverseHybrid::new(&core.info, &core.nfa);",
          "    let strategy = ReverseInner { core, preinner: Prefilter::default(), nfarev: NFA(Arc::new(Inner::default())), hybrid, dfa: wrappers::ReverseDFA::default() };",
          "    let cache = strategy.create_cache();",
          "    assert_eq!(cache.revhybrid, strategy.hybrid.create_cache());",
          "    assert!(cache.capmatches.is_empty());",
          "    assert!(cache.pikevm.is_empty());",
          "    assert!(cache.backtrack.is_empty());",
          "    assert!(cache.onepass.is_empty());",
          "    assert!(cache.hybrid.is_empty());",
          "    assert!(cache.revhybrid.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner::default())),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "",
          "    let hybrid = ReverseHybrid::none();",
          "    ",
          "    let strategy = ReverseInner { ",
          "        core, ",
          "        preinner: Prefilter::default(), ",
          "        nfarev: NFA(Arc::new(Inner::default())), ",
          "        hybrid, ",
          "        dfa: wrappers::ReverseDFA::default() ",
          "    };",
          "    ",
          "    let _cache = strategy.create_cache();",
          "}"
        ],
        "oracle": [
          "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA(Arc::new(Inner::default())), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default(), };",
          "    let hybrid = ReverseHybrid::none();",
          "    let strategy = ReverseInner { core, preinner: Prefilter::default(), nfarev: NFA(Arc::new(Inner::default())), hybrid, dfa: wrappers::ReverseDFA::default() };",
          "    let cache = strategy.create_cache();",
          "    assert!(cache.revhybrid.is_some());",
          "    assert_eq!(cache.pikevm, wrappers::PikeVMCache::default());",
          "    assert_eq!(cache.backtrack, wrappers::BoundedBacktrackerCache::default());",
          "    assert_eq!(cache.onepass, wrappers::OnePassCache::default());",
          "    assert_eq!(cache.hybrid, wrappers::HybridCache::default());",
          "    assert_eq!(cache.capmatches, Captures::default());"
        ],
        "code": [
          "{",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA(Arc::new(Inner::default())),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "",
          "    let hybrid = ReverseHybrid::none();",
          "    ",
          "    let strategy = ReverseInner { ",
          "        core, ",
          "        preinner: Prefilter::default(), ",
          "        nfarev: NFA(Arc::new(Inner::default())), ",
          "        hybrid, ",
          "        dfa: wrappers::ReverseDFA::default() ",
          "    };",
          "    ",
          "    let _cache = strategy.create_cache();",
          "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA(Arc::new(Inner::default())), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default(), };",
          "    let hybrid = ReverseHybrid::none();",
          "    let strategy = ReverseInner { core, preinner: Prefilter::default(), nfarev: NFA(Arc::new(Inner::default())), hybrid, dfa: wrappers::ReverseDFA::default() };",
          "    let cache = strategy.create_cache();",
          "    assert!(cache.revhybrid.is_some());",
          "    assert_eq!(cache.pikevm, wrappers::PikeVMCache::default());",
          "    assert_eq!(cache.backtrack, wrappers::BoundedBacktrackerCache::default());",
          "    assert_eq!(cache.onepass, wrappers::OnePassCache::default());",
          "    assert_eq!(cache.hybrid, wrappers::HybridCache::default());",
          "    assert_eq!(cache.capmatches, Captures::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]