[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![0; 256],",
          "            classes: ByteClasses::default(),",
          "            stride2: 8,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(1),",
          "            universal_start_unanchored: Some(0),",
          "            universal_start_anchored: Some(1),",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![(0, 1)],",
          "            pattern_ids: vec![0],",
          "            pattern_len: 1,",
          "        },",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 9,",
          "            min_match: 8,",
          "            max_match: 9,",
          "            min_accel: 6,",
          "            max_accel: 7,",
          "            min_start: 0,",
          "            max_start: 10,",
          "        },",
          "        accels: Accels {",
          "            accels: vec![0u8; 4],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.to_sparse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.to_sparse().is_ok(), true);",
          "    assert_eq!(dfa.to_sparse().unwrap().write_to_len(), expected_sparse_dfa_length);",
          "    assert_eq!(dfa.to_sparse().unwrap().to_bytes_little_endian().0.len(), expected_byte_length);",
          "    assert!(dfa.to_sparse().unwrap().to_bytes_big_endian().1 > 0);",
          "    assert!(dfa.to_sparse().unwrap().to_bytes_native_endian().0.len() > 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![0; 256],",
          "            classes: ByteClasses::default(),",
          "            stride2: 8,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(1),",
          "            universal_start_unanchored: Some(0),",
          "            universal_start_anchored: Some(1),",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![(0, 1)],",
          "            pattern_ids: vec![0],",
          "            pattern_len: 1,",
          "        },",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 9,",
          "            min_match: 8,",
          "            max_match: 9,",
          "            min_accel: 6,",
          "            max_accel: 7,",
          "            min_start: 0,",
          "            max_start: 10,",
          "        },",
          "        accels: Accels {",
          "            accels: vec![0u8; 4],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.to_sparse();",
          "    assert_eq!(dfa.to_sparse().is_ok(), true);",
          "    assert_eq!(dfa.to_sparse().unwrap().write_to_len(), expected_sparse_dfa_length);",
          "    assert_eq!(dfa.to_sparse().unwrap().to_bytes_little_endian().0.len(), expected_byte_length);",
          "    assert!(dfa.to_sparse().unwrap().to_bytes_big_endian().1 > 0);",
          "    assert!(dfa.to_sparse().unwrap().to_bytes_native_endian().0.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![0; 256],",
          "            classes: ByteClasses::default(),",
          "            stride2: 8,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(1),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![(0, 1)],",
          "            pattern_ids: vec![0],",
          "            pattern_len: 1,",
          "        },",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 9,",
          "            min_match: 8,",
          "            max_match: 9,",
          "            min_accel: 6,",
          "            max_accel: 7,",
          "            min_start: 0,",
          "            max_start: 10,",
          "        },",
          "        accels: Accels {",
          "            accels: vec![0u8; 4],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.to_sparse();",
          "}"
        ],
        "oracle": [
          "    let dfa = DFA { tt: TransitionTable { table: vec![0; 256], classes: ByteClasses::default(), stride2: 8 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 4, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, ms: MatchStates { slices: vec![(0, 1)], pattern_ids: vec![0], pattern_len: 1 }, special: Special { max: 10, quit_id: 9, min_match: 8, max_match: 9, min_accel: 6, max_accel: 7, min_start: 0, max_start: 10 }, accels: Accels { accels: vec![0u8; 4] }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false } };",
          "    let result = dfa.to_sparse(); assert!(result.is_err());",
          "    let expected_error_kind = BuildErrorKind::StateIDTooSmall; assert_eq!(result.err().unwrap().kind, expected_error_kind);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![0; 256],",
          "            classes: ByteClasses::default(),",
          "            stride2: 8,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(1),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![(0, 1)],",
          "            pattern_ids: vec![0],",
          "            pattern_len: 1,",
          "        },",
          "        special: Special {",
          "            max: 10,",
          "            quit_id: 9,",
          "            min_match: 8,",
          "            max_match: 9,",
          "            min_accel: 6,",
          "            max_accel: 7,",
          "            min_start: 0,",
          "            max_start: 10,",
          "        },",
          "        accels: Accels {",
          "            accels: vec![0u8; 4],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.to_sparse();",
          "    let dfa = DFA { tt: TransitionTable { table: vec![0; 256], classes: ByteClasses::default(), stride2: 8 }, st: StartTable { table: vec![0; 8], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 4, pattern_len: Some(1), universal_start_unanchored: None, universal_start_anchored: None }, ms: MatchStates { slices: vec![(0, 1)], pattern_ids: vec![0], pattern_len: 1 }, special: Special { max: 10, quit_id: 9, min_match: 8, max_match: 9, min_accel: 6, max_accel: 7, min_start: 0, max_start: 10 }, accels: Accels { accels: vec![0u8; 4] }, pre: None, quitset: ByteSet([false; 256]), flags: Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false } };",
          "    let result = dfa.to_sparse(); assert!(result.is_err());",
          "    let expected_error_kind = BuildErrorKind::StateIDTooSmall; assert_eq!(result.err().unwrap().kind, expected_error_kind);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![],",
          "            classes: ByteClasses::default(),",
          "            stride2: 1,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special {",
          "            max: 0,",
          "            quit_id: 0,",
          "            min_match: 0,",
          "            max_match: 0,",
          "            min_accel: 0,",
          "            max_accel: 0,",
          "            min_start: 0,",
          "            max_start: 0,",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.to_sparse();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.to_sparse().is_ok(), true);",
          "    assert!(dfa.to_sparse().unwrap().is_empty());",
          "    let dfa_non_empty = DFA {",
          "    tt: TransitionTable {",
          "    table: vec![1, 2, 3],",
          "    classes: ByteClasses::default(),",
          "    stride2: 2,",
          "    },",
          "    st: StartTable {",
          "    table: vec![0; 8],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap::default(),",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: Some(0),",
          "    universal_start_anchored: Some(0),",
          "    },",
          "    ms: MatchStates {",
          "    slices: vec![0],",
          "    pattern_ids: vec![1],",
          "    pattern_len: 1,",
          "    },",
          "    special: Special {",
          "    max: 1,",
          "    quit_id: 2,",
          "    min_match: 0,",
          "    max_match: 1,",
          "    min_accel: 2,",
          "    max_accel: 3,",
          "    min_start: 4,",
          "    max_start: 5,",
          "    },",
          "    accels: Accels {",
          "    accels: vec![0, 1, 2],",
          "    },",
          "    pre: None,",
          "    quitset: ByteSet([true; 256]),",
          "    flags: Flags {",
          "    has_empty: true,",
          "    is_utf8: true,",
          "    is_always_start_anchored: true,",
          "    },",
          "    };",
          "    assert!(dfa_non_empty.to_sparse().is_ok());",
          "    assert_ne!(dfa_non_empty.to_sparse().unwrap().len(), 0);",
          "    assert!(dfa_non_empty.to_sparse().unwrap().try_search_fwd(&Input::new(\"foo12345\")).is_ok());",
          "    assert!(dfa_non_empty.to_sparse().unwrap().try_search_rev(&Input::new(\"54321oof\")).is_ok());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![],",
          "            classes: ByteClasses::default(),",
          "            stride2: 1,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 0,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 0,",
          "        },",
          "        special: Special {",
          "            max: 0,",
          "            quit_id: 0,",
          "            min_match: 0,",
          "            max_match: 0,",
          "            min_accel: 0,",
          "            max_accel: 0,",
          "            min_start: 0,",
          "            max_start: 0,",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let _ = dfa.to_sparse();",
          "    assert_eq!(dfa.to_sparse().is_ok(), true);",
          "    assert!(dfa.to_sparse().unwrap().is_empty());",
          "    let dfa_non_empty = DFA {",
          "    tt: TransitionTable {",
          "    table: vec![1, 2, 3],",
          "    classes: ByteClasses::default(),",
          "    stride2: 2,",
          "    },",
          "    st: StartTable {",
          "    table: vec![0; 8],",
          "    kind: StartKind::Both,",
          "    start_map: StartByteMap::default(),",
          "    stride: 1,",
          "    pattern_len: Some(1),",
          "    universal_start_unanchored: Some(0),",
          "    universal_start_anchored: Some(0),",
          "    },",
          "    ms: MatchStates {",
          "    slices: vec![0],",
          "    pattern_ids: vec![1],",
          "    pattern_len: 1,",
          "    },",
          "    special: Special {",
          "    max: 1,",
          "    quit_id: 2,",
          "    min_match: 0,",
          "    max_match: 1,",
          "    min_accel: 2,",
          "    max_accel: 3,",
          "    min_start: 4,",
          "    max_start: 5,",
          "    },",
          "    accels: Accels {",
          "    accels: vec![0, 1, 2],",
          "    },",
          "    pre: None,",
          "    quitset: ByteSet([true; 256]),",
          "    flags: Flags {",
          "    has_empty: true,",
          "    is_utf8: true,",
          "    is_always_start_anchored: true,",
          "    },",
          "    };",
          "    assert!(dfa_non_empty.to_sparse().is_ok());",
          "    assert_ne!(dfa_non_empty.to_sparse().unwrap().len(), 0);",
          "    assert!(dfa_non_empty.to_sparse().unwrap().try_search_fwd(&Input::new(\"foo12345\")).is_ok());",
          "    assert!(dfa_non_empty.to_sparse().unwrap().try_search_rev(&Input::new(\"54321oof\")).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]