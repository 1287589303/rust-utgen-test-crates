[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        stride2: 2,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let match_states = MatchStates {",
          "        slices: vec![0, 1],",
          "        pattern_ids: vec![0, 1],",
          "        pattern_len: 2,",
          "    };",
          "    let special = Special {",
          "        max: 5,",
          "        quit_id: 0,",
          "        min_match: 0,",
          "        max_match: 3,",
          "        min_accel: 0,",
          "        max_accel: 4,",
          "        min_start: 0,",
          "        max_start: 5,",
          "    };",
          "    let accels = Accels {",
          "        accels: vec![0, 1, 2],",
          "    };",
          "    let pre = Some(Prefilter {",
          "        pre: Arc::new(MyPrefilterImplementation),",
          "        is_fast: true,",
          "        max_needle_len: 100,",
          "    });",
          "    let quitset = ByteSet::default();",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: true,",
          "        is_always_start_anchored: false,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: start_table,",
          "        ms: match_states,",
          "        special,",
          "        accels,",
          "        pre,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let owned_dfa = dfa.to_owned();",
          "}"
        ],
        "oracle": [
          "    let expected_transition_table = TransitionTable { table: vec![0, 1, 2, 3], classes: ByteClasses::default(), stride2: 2, };",
          "    let expected_start_table = StartTable { table: vec![0, 1, 2, 3, 4, 5, 6, 7], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 4, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None, };",
          "    let expected_match_states = MatchStates { slices: vec![0, 1], pattern_ids: vec![0, 1], pattern_len: 2, };",
          "    let expected_special = Special { max: 5, quit_id: 0, min_match: 0, max_match: 3, min_accel: 0, max_accel: 4, min_start: 0, max_start: 5, };",
          "    let expected_accels = Accels { accels: vec![0, 1, 2], };",
          "    let expected_pre = Some(Prefilter { pre: Arc::new(MyPrefilterImplementation), is_fast: true, max_needle_len: 100, });",
          "    let expected_quitset = ByteSet::default();",
          "    let expected_flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false, };",
          "    ",
          "    assert_eq!(owned_dfa.tt, expected_transition_table);",
          "    assert_eq!(owned_dfa.st, expected_start_table);",
          "    assert_eq!(owned_dfa.ms, expected_match_states);",
          "    assert_eq!(owned_dfa.special, expected_special);",
          "    assert_eq!(owned_dfa.accels, expected_accels);",
          "    assert_eq!(owned_dfa.pre, expected_pre);",
          "    assert_eq!(owned_dfa.quitset, expected_quitset);",
          "    assert_eq!(owned_dfa.flags, expected_flags);"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        stride2: 2,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap::default(),",
          "        stride: 4,",
          "        pattern_len: Some(2),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let match_states = MatchStates {",
          "        slices: vec![0, 1],",
          "        pattern_ids: vec![0, 1],",
          "        pattern_len: 2,",
          "    };",
          "    let special = Special {",
          "        max: 5,",
          "        quit_id: 0,",
          "        min_match: 0,",
          "        max_match: 3,",
          "        min_accel: 0,",
          "        max_accel: 4,",
          "        min_start: 0,",
          "        max_start: 5,",
          "    };",
          "    let accels = Accels {",
          "        accels: vec![0, 1, 2],",
          "    };",
          "    let pre = Some(Prefilter {",
          "        pre: Arc::new(MyPrefilterImplementation),",
          "        is_fast: true,",
          "        max_needle_len: 100,",
          "    });",
          "    let quitset = ByteSet::default();",
          "    let flags = Flags {",
          "        has_empty: true,",
          "        is_utf8: true,",
          "        is_always_start_anchored: false,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: start_table,",
          "        ms: match_states,",
          "        special,",
          "        accels,",
          "        pre,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let owned_dfa = dfa.to_owned();",
          "    let expected_transition_table = TransitionTable { table: vec![0, 1, 2, 3], classes: ByteClasses::default(), stride2: 2, };",
          "    let expected_start_table = StartTable { table: vec![0, 1, 2, 3, 4, 5, 6, 7], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 4, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None, };",
          "    let expected_match_states = MatchStates { slices: vec![0, 1], pattern_ids: vec![0, 1], pattern_len: 2, };",
          "    let expected_special = Special { max: 5, quit_id: 0, min_match: 0, max_match: 3, min_accel: 0, max_accel: 4, min_start: 0, max_start: 5, };",
          "    let expected_accels = Accels { accels: vec![0, 1, 2], };",
          "    let expected_pre = Some(Prefilter { pre: Arc::new(MyPrefilterImplementation), is_fast: true, max_needle_len: 100, });",
          "    let expected_quitset = ByteSet::default();",
          "    let expected_flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false, };",
          "    ",
          "    assert_eq!(owned_dfa.tt, expected_transition_table);",
          "    assert_eq!(owned_dfa.st, expected_start_table);",
          "    assert_eq!(owned_dfa.ms, expected_match_states);",
          "    assert_eq!(owned_dfa.special, expected_special);",
          "    assert_eq!(owned_dfa.accels, expected_accels);",
          "    assert_eq!(owned_dfa.pre, expected_pre);",
          "    assert_eq!(owned_dfa.quitset, expected_quitset);",
          "    assert_eq!(owned_dfa.flags, expected_flags);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        stride2: 3,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap::default(),",
          "        stride: 2,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let match_states = MatchStates {",
          "        slices: vec![0],",
          "        pattern_ids: vec![0],",
          "        pattern_len: 1,",
          "    };",
          "    let special = Special {",
          "        max: 2,",
          "        quit_id: 0,",
          "        min_match: 1,",
          "        max_match: 1,",
          "        min_accel: 0,",
          "        max_accel: 1,",
          "        min_start: 0,",
          "        max_start: 2,",
          "    };",
          "    let accels = Accels {",
          "        accels: vec![0],",
          "    };",
          "    let pre: Option<Prefilter> = None;",
          "    let quitset = ByteSet::default();",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: true,",
          "        is_always_start_anchored: true,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: start_table,",
          "        ms: match_states,",
          "        special,",
          "        accels,",
          "        pre,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let owned_dfa = dfa.to_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(owned_dfa.tt.table, vec![0, 1, 2, 3]);",
          "    assert_eq!(owned_dfa.tt.classes, ByteClasses::default());",
          "    assert_eq!(owned_dfa.tt.stride2, 3);",
          "    assert_eq!(owned_dfa.st.table, vec![0, 1, 2, 3, 4, 5, 6, 7]);",
          "    assert_eq!(owned_dfa.st.kind, StartKind::Unanchored);",
          "    assert_eq!(owned_dfa.st.start_map, StartByteMap::default());",
          "    assert_eq!(owned_dfa.st.stride, 2);",
          "    assert_eq!(owned_dfa.st.pattern_len, Some(1));",
          "    assert_eq!(owned_dfa.st.universal_start_unanchored, None);",
          "    assert_eq!(owned_dfa.st.universal_start_anchored, None);",
          "    assert_eq!(owned_dfa.ms.slices, vec![0]);",
          "    assert_eq!(owned_dfa.ms.pattern_ids, vec![0]);",
          "    assert_eq!(owned_dfa.ms.pattern_len, 1);",
          "    assert_eq!(owned_dfa.special, special);",
          "    assert_eq!(owned_dfa.accels.accels, vec![0]);",
          "    assert!(owned_dfa.pre.is_none());",
          "    assert_eq!(owned_dfa.quitset, ByteSet::default());",
          "    assert_eq!(owned_dfa.flags, flags);"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        stride2: 3,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0, 1, 2, 3, 4, 5, 6, 7],",
          "        kind: StartKind::Unanchored,",
          "        start_map: StartByteMap::default(),",
          "        stride: 2,",
          "        pattern_len: Some(1),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let match_states = MatchStates {",
          "        slices: vec![0],",
          "        pattern_ids: vec![0],",
          "        pattern_len: 1,",
          "    };",
          "    let special = Special {",
          "        max: 2,",
          "        quit_id: 0,",
          "        min_match: 1,",
          "        max_match: 1,",
          "        min_accel: 0,",
          "        max_accel: 1,",
          "        min_start: 0,",
          "        max_start: 2,",
          "    };",
          "    let accels = Accels {",
          "        accels: vec![0],",
          "    };",
          "    let pre: Option<Prefilter> = None;",
          "    let quitset = ByteSet::default();",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: true,",
          "        is_always_start_anchored: true,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: start_table,",
          "        ms: match_states,",
          "        special,",
          "        accels,",
          "        pre,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let owned_dfa = dfa.to_owned();",
          "    assert_eq!(owned_dfa.tt.table, vec![0, 1, 2, 3]);",
          "    assert_eq!(owned_dfa.tt.classes, ByteClasses::default());",
          "    assert_eq!(owned_dfa.tt.stride2, 3);",
          "    assert_eq!(owned_dfa.st.table, vec![0, 1, 2, 3, 4, 5, 6, 7]);",
          "    assert_eq!(owned_dfa.st.kind, StartKind::Unanchored);",
          "    assert_eq!(owned_dfa.st.start_map, StartByteMap::default());",
          "    assert_eq!(owned_dfa.st.stride, 2);",
          "    assert_eq!(owned_dfa.st.pattern_len, Some(1));",
          "    assert_eq!(owned_dfa.st.universal_start_unanchored, None);",
          "    assert_eq!(owned_dfa.st.universal_start_anchored, None);",
          "    assert_eq!(owned_dfa.ms.slices, vec![0]);",
          "    assert_eq!(owned_dfa.ms.pattern_ids, vec![0]);",
          "    assert_eq!(owned_dfa.ms.pattern_len, 1);",
          "    assert_eq!(owned_dfa.special, special);",
          "    assert_eq!(owned_dfa.accels.accels, vec![0]);",
          "    assert!(owned_dfa.pre.is_none());",
          "    assert_eq!(owned_dfa.quitset, ByteSet::default());",
          "    assert_eq!(owned_dfa.flags, flags);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0, 1, 2, 3],",
          "        kind: StartKind::Anchored,",
          "        start_map: StartByteMap::default(),",
          "        stride: 2,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let match_states = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![],",
          "        pattern_len: 0,",
          "    };",
          "    let special = Special {",
          "        max: 1,",
          "        quit_id: 0,",
          "        min_match: 1,",
          "        max_match: 1,",
          "        min_accel: 0,",
          "        max_accel: 1,",
          "        min_start: 0,",
          "        max_start: 1,",
          "    };",
          "    let accels = Accels {",
          "        accels: vec![],",
          "    };",
          "    let pre: Option<Prefilter> = None;",
          "    let quitset = ByteSet::default();",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: start_table,",
          "        ms: match_states,",
          "        special,",
          "        accels,",
          "        pre,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let owned_dfa = dfa.to_owned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(owned_dfa.tt.table, vec![0, 1]);",
          "    assert_eq!(owned_dfa.tt.classes, ByteClasses::default());",
          "    assert_eq!(owned_dfa.tt.stride2, 1);",
          "    assert_eq!(owned_dfa.st.table, vec![0, 1, 2, 3]);",
          "    assert_eq!(owned_dfa.st.kind, StartKind::Anchored);",
          "    assert_eq!(owned_dfa.st.start_map, StartByteMap::default());",
          "    assert_eq!(owned_dfa.st.stride, 2);",
          "    assert_eq!(owned_dfa.st.pattern_len, Some(0));",
          "    assert_eq!(owned_dfa.st.universal_start_unanchored, None);",
          "    assert_eq!(owned_dfa.st.universal_start_anchored, None);",
          "    assert_eq!(owned_dfa.ms.slices, vec![]);",
          "    assert_eq!(owned_dfa.ms.pattern_ids, vec![]);",
          "    assert_eq!(owned_dfa.ms.pattern_len, 0);",
          "    assert_eq!(owned_dfa.special.max, 1);",
          "    assert_eq!(owned_dfa.special.quit_id, 0);",
          "    assert_eq!(owned_dfa.special.min_match, 1);",
          "    assert_eq!(owned_dfa.special.max_match, 1);",
          "    assert_eq!(owned_dfa.special.min_accel, 0);",
          "    assert_eq!(owned_dfa.special.max_accel, 1);",
          "    assert_eq!(owned_dfa.special.min_start, 0);",
          "    assert_eq!(owned_dfa.special.max_start, 1);",
          "    assert_eq!(owned_dfa.accels.accels, vec![]);",
          "    assert_eq!(owned_dfa.pre, None);",
          "    assert_eq!(owned_dfa.quitset, ByteSet::default());",
          "    assert_eq!(owned_dfa.flags.has_empty, false);",
          "    assert_eq!(owned_dfa.flags.is_utf8, false);",
          "    assert_eq!(owned_dfa.flags.is_always_start_anchored, false);"
        ],
        "code": [
          "{",
          "    let transition_table = TransitionTable {",
          "        table: vec![0, 1],",
          "        classes: ByteClasses::default(),",
          "        stride2: 1,",
          "    };",
          "    let start_table = StartTable {",
          "        table: vec![0, 1, 2, 3],",
          "        kind: StartKind::Anchored,",
          "        start_map: StartByteMap::default(),",
          "        stride: 2,",
          "        pattern_len: Some(0),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let match_states = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![],",
          "        pattern_len: 0,",
          "    };",
          "    let special = Special {",
          "        max: 1,",
          "        quit_id: 0,",
          "        min_match: 1,",
          "        max_match: 1,",
          "        min_accel: 0,",
          "        max_accel: 1,",
          "        min_start: 0,",
          "        max_start: 1,",
          "    };",
          "    let accels = Accels {",
          "        accels: vec![],",
          "    };",
          "    let pre: Option<Prefilter> = None;",
          "    let quitset = ByteSet::default();",
          "    let flags = Flags {",
          "        has_empty: false,",
          "        is_utf8: false,",
          "        is_always_start_anchored: false,",
          "    };",
          "",
          "    let dfa = DFA {",
          "        tt: transition_table,",
          "        st: start_table,",
          "        ms: match_states,",
          "        special,",
          "        accels,",
          "        pre,",
          "        quitset,",
          "        flags,",
          "    };",
          "",
          "    let owned_dfa = dfa.to_owned();",
          "    assert_eq!(owned_dfa.tt.table, vec![0, 1]);",
          "    assert_eq!(owned_dfa.tt.classes, ByteClasses::default());",
          "    assert_eq!(owned_dfa.tt.stride2, 1);",
          "    assert_eq!(owned_dfa.st.table, vec![0, 1, 2, 3]);",
          "    assert_eq!(owned_dfa.st.kind, StartKind::Anchored);",
          "    assert_eq!(owned_dfa.st.start_map, StartByteMap::default());",
          "    assert_eq!(owned_dfa.st.stride, 2);",
          "    assert_eq!(owned_dfa.st.pattern_len, Some(0));",
          "    assert_eq!(owned_dfa.st.universal_start_unanchored, None);",
          "    assert_eq!(owned_dfa.st.universal_start_anchored, None);",
          "    assert_eq!(owned_dfa.ms.slices, vec![]);",
          "    assert_eq!(owned_dfa.ms.pattern_ids, vec![]);",
          "    assert_eq!(owned_dfa.ms.pattern_len, 0);",
          "    assert_eq!(owned_dfa.special.max, 1);",
          "    assert_eq!(owned_dfa.special.quit_id, 0);",
          "    assert_eq!(owned_dfa.special.min_match, 1);",
          "    assert_eq!(owned_dfa.special.max_match, 1);",
          "    assert_eq!(owned_dfa.special.min_accel, 0);",
          "    assert_eq!(owned_dfa.special.max_accel, 1);",
          "    assert_eq!(owned_dfa.special.min_start, 0);",
          "    assert_eq!(owned_dfa.special.max_start, 1);",
          "    assert_eq!(owned_dfa.accels.accels, vec![]);",
          "    assert_eq!(owned_dfa.pre, None);",
          "    assert_eq!(owned_dfa.quitset, ByteSet::default());",
          "    assert_eq!(owned_dfa.flags.has_empty, false);",
          "    assert_eq!(owned_dfa.flags.is_utf8, false);",
          "    assert_eq!(owned_dfa.flags.is_always_start_anchored, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]