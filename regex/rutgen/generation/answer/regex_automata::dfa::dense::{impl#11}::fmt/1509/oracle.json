[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![],",
          "            classes: ByteClasses::default(),",
          "            stride2: 1,",
          "        },",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::NonWordByte,",
          "            start_map: StartByteMap::default(),",
          "            stride: 1,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![0u32; 0],",
          "            pattern_ids: Vec::new(),",
          "            pattern_len: 2,",
          "        },",
          "        special: Special {",
          "            max: StateID::default(),",
          "            quit_id: StateID::default(),",
          "            min_match: StateID::default(),",
          "            max_match: StateID::default(),",
          "            min_accel: StateID::default(),",
          "            max_accel: StateID::default(),",
          "            min_start: StateID::default(),",
          "            max_start: StateID::default(),",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "",
          "    let mut f = fmt::Formatter::new();",
          "    dfa.fmt(&mut f).unwrap();",
          "}"
        ],
        "oracle": [
          "    writeln!(f, \"dense::DFA(\")?;",
          "    assert!(dfa.states().count() == 0);",
          "    writeln!(f, \"\")?;",
          "    assert!(dfa.starts().count() == 0);",
          "    assert!(dfa.pattern_len() > 1);",
          "    writeln!(f, \"\")?;",
          "    for i in 0..dfa.ms.len() {",
          "    let id = dfa.ms.match_state_id(&dfa, i);",
          "    if !f.alternate() {",
          "    assert_eq!(write!(f, \"MATCH({:06?}): \", id), Ok(()));",
          "    }",
          "    for (i, &pid) in dfa.ms.pattern_id_slice(i).iter().enumerate() {",
          "    assert!(i > 0);",
          "    assert_eq!(write!(f, \", \"), Ok(()));",
          "    assert_eq!(write!(f, \"{:?}\", pid), Err(_));",
          "    }",
          "    }"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![],",
          "            classes: ByteClasses::default(),",
          "            stride2: 1,",
          "        },",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::NonWordByte,",
          "            start_map: StartByteMap::default(),",
          "            stride: 1,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![0u32; 0],",
          "            pattern_ids: Vec::new(),",
          "            pattern_len: 2,",
          "        },",
          "        special: Special {",
          "            max: StateID::default(),",
          "            quit_id: StateID::default(),",
          "            min_match: StateID::default(),",
          "            max_match: StateID::default(),",
          "            min_accel: StateID::default(),",
          "            max_accel: StateID::default(),",
          "            min_start: StateID::default(),",
          "            max_start: StateID::default(),",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "",
          "    let mut f = fmt::Formatter::new();",
          "    dfa.fmt(&mut f).unwrap();",
          "    writeln!(f, \"dense::DFA(\")?;",
          "    assert!(dfa.states().count() == 0);",
          "    writeln!(f, \"\")?;",
          "    assert!(dfa.starts().count() == 0);",
          "    assert!(dfa.pattern_len() > 1);",
          "    writeln!(f, \"\")?;",
          "    for i in 0..dfa.ms.len() {",
          "    let id = dfa.ms.match_state_id(&dfa, i);",
          "    if !f.alternate() {",
          "    assert_eq!(write!(f, \"MATCH({:06?}): \", id), Ok(()));",
          "    }",
          "    for (i, &pid) in dfa.ms.pattern_id_slice(i).iter().enumerate() {",
          "    assert!(i > 0);",
          "    assert_eq!(write!(f, \", \"), Ok(()));",
          "    assert_eq!(write!(f, \"{:?}\", pid), Err(_));",
          "    }",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![],",
          "            classes: ByteClasses::default(),",
          "            stride2: 1,",
          "        },",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::NonWordByte,",
          "            start_map: StartByteMap::default(),",
          "            stride: 1,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 2,",
          "        },",
          "        special: Special {",
          "            max: StateID::default(),",
          "            quit_id: StateID::default(),",
          "            min_match: StateID::default(),",
          "            max_match: StateID::default(),",
          "            min_accel: StateID::default(),",
          "            max_accel: StateID::default(),",
          "            min_start: StateID::default(),",
          "            max_start: StateID::default(),",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "",
          "    let f = fmt::Formatter::new();",
          "    let result = dfa.fmt(&mut f);",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    assert!(writeln!(f, \"dense::DFA(\").is_ok());",
          "    assert!(self.states().is_empty());",
          "    assert!(writeln!(f, \"\").is_ok());",
          "    assert!(self.starts().enumerate().is_empty());",
          "    assert!(self.pattern_len() > 1);",
          "    assert!(writeln!(f, \"\").is_ok());",
          "    assert!(i < self.ms.len());",
          "    assert!(!f.alternate());",
          "    assert!(write!(f, \"MATCH({:06?}): \", id).is_ok());",
          "    assert!(!self.ms.pattern_id_slice(i).is_empty());",
          "    assert!(i > 0);",
          "    assert!(write!(f, \", \").is_ok());",
          "    assert!(write!(f, \"{:?}\", pid).is_err());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: TransitionTable {",
          "            table: vec![],",
          "            classes: ByteClasses::default(),",
          "            stride2: 1,",
          "        },",
          "        st: StartTable {",
          "            table: vec![],",
          "            kind: StartKind::NonWordByte,",
          "            start_map: StartByteMap::default(),",
          "            stride: 1,",
          "            pattern_len: None,",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        ms: MatchStates {",
          "            slices: vec![],",
          "            pattern_ids: vec![],",
          "            pattern_len: 2,",
          "        },",
          "        special: Special {",
          "            max: StateID::default(),",
          "            quit_id: StateID::default(),",
          "            min_match: StateID::default(),",
          "            max_match: StateID::default(),",
          "            min_accel: StateID::default(),",
          "            max_accel: StateID::default(),",
          "            min_start: StateID::default(),",
          "            max_start: StateID::default(),",
          "        },",
          "        accels: Accels {",
          "            accels: vec![],",
          "        },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags {",
          "            has_empty: false,",
          "            is_utf8: false,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "",
          "    let f = fmt::Formatter::new();",
          "    let result = dfa.fmt(&mut f);",
          "    assert!(result.is_err());",
          "    assert!(writeln!(f, \"dense::DFA(\").is_ok());",
          "    assert!(self.states().is_empty());",
          "    assert!(writeln!(f, \"\").is_ok());",
          "    assert!(self.starts().enumerate().is_empty());",
          "    assert!(self.pattern_len() > 1);",
          "    assert!(writeln!(f, \"\").is_ok());",
          "    assert!(i < self.ms.len());",
          "    assert!(!f.alternate());",
          "    assert!(write!(f, \"MATCH({:06?}): \", id).is_ok());",
          "    assert!(!self.ms.pattern_id_slice(i).is_empty());",
          "    assert!(i > 0);",
          "    assert!(write!(f, \", \").is_ok());",
          "    assert!(write!(f, \"{:?}\", pid).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]