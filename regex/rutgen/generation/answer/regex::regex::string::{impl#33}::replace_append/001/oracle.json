[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut source = String::from(\"foo\");",
          "    let mut destination = String::new();",
          "    let captures = Captures {",
          "        haystack: \"foo\",",
          "        caps: captures::Captures::new(vec![1]), // Dummy initialization",
          "        static_captures_len: Some(1),",
          "    };",
          "    source.replace_append(&captures, &mut destination);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(destination, \"foo\");",
          "    assert_eq!(source, \"foo\");",
          "    assert!(!destination.is_empty());",
          "    assert_eq!(captures.haystack, \"foo\");",
          "    assert_eq!(captures.static_captures_len, Some(1));",
          "    assert_eq!(captures.caps.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut source = String::from(\"foo\");",
          "    let mut destination = String::new();",
          "    let captures = Captures {",
          "        haystack: \"foo\",",
          "        caps: captures::Captures::new(vec![1]), // Dummy initialization",
          "        static_captures_len: Some(1),",
          "    };",
          "    source.replace_append(&captures, &mut destination);",
          "    assert_eq!(destination, \"foo\");",
          "    assert_eq!(source, \"foo\");",
          "    assert!(!destination.is_empty());",
          "    assert_eq!(captures.haystack, \"foo\");",
          "    assert_eq!(captures.static_captures_len, Some(1));",
          "    assert_eq!(captures.caps.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut source = String::from(\"bar\");",
          "    let mut destination = String::new();",
          "    let captures = Captures {",
          "        haystack: \"bar\",",
          "        caps: captures::Captures::new(vec![0]), // Dummy initialization",
          "        static_captures_len: Some(0),",
          "    };",
          "    source.replace_append(&captures, &mut destination);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(destination, \"bar\");",
          "    assert_eq!(source, \"bar\");",
          "    assert!(captures.haystack == \"bar\");",
          "    assert!(captures.static_captures_len.is_some());",
          "    assert!(captures.caps.len() == 1);"
        ],
        "code": [
          "{",
          "    let mut source = String::from(\"bar\");",
          "    let mut destination = String::new();",
          "    let captures = Captures {",
          "        haystack: \"bar\",",
          "        caps: captures::Captures::new(vec![0]), // Dummy initialization",
          "        static_captures_len: Some(0),",
          "    };",
          "    source.replace_append(&captures, &mut destination);",
          "    assert_eq!(destination, \"bar\");",
          "    assert_eq!(source, \"bar\");",
          "    assert!(captures.haystack == \"bar\");",
          "    assert!(captures.static_captures_len.is_some());",
          "    assert!(captures.caps.len() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut source = String::from(\"baz\");",
          "    let mut destination = String::from(\"previous content\");",
          "    let captures = Captures {",
          "        haystack: \"baz\",",
          "        caps: captures::Captures::new(vec![1]), // Dummy initialization",
          "        static_captures_len: Some(1),",
          "    };",
          "    source.replace_append(&captures, &mut destination);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(destination, \"previous contentbaz\");",
          "    assert_eq!(source, \"baz\");",
          "    assert!(captures.haystack == \"baz\");",
          "    assert!(captures.static_captures_len.is_some());",
          "    assert!(captures.caps.len() == 1);",
          "    assert!(captures.caps.get(0).is_some());"
        ],
        "code": [
          "{",
          "    let mut source = String::from(\"baz\");",
          "    let mut destination = String::from(\"previous content\");",
          "    let captures = Captures {",
          "        haystack: \"baz\",",
          "        caps: captures::Captures::new(vec![1]), // Dummy initialization",
          "        static_captures_len: Some(1),",
          "    };",
          "    source.replace_append(&captures, &mut destination);",
          "    assert_eq!(destination, \"previous contentbaz\");",
          "    assert_eq!(source, \"baz\");",
          "    assert!(captures.haystack == \"baz\");",
          "    assert!(captures.static_captures_len.is_some());",
          "    assert!(captures.caps.len() == 1);",
          "    assert!(captures.caps.get(0).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut source = String::from(\"qux\");",
          "    let mut destination = String::new();",
          "    let captures = Captures {",
          "        haystack: \"qux\",",
          "        caps: captures::Captures::new(vec![0]), // Dummy initialization",
          "        static_captures_len: Some(0),",
          "    };",
          "    source.replace_append(&captures, &mut destination);",
          "}"
        ],
        "oracle": [
          "    let mut source = String::from(\"qux\");",
          "    let mut destination = String::new();",
          "    assert_eq!(destination, \"\");",
          "    let captures = Captures { haystack: \"qux\", caps: captures::Captures::new(vec![0]), static_captures_len: Some(0) };",
          "    source.replace_append(&captures, &mut destination);",
          "    assert_eq!(destination, \"qux\");"
        ],
        "code": [
          "{",
          "    let mut source = String::from(\"qux\");",
          "    let mut destination = String::new();",
          "    let captures = Captures {",
          "        haystack: \"qux\",",
          "        caps: captures::Captures::new(vec![0]), // Dummy initialization",
          "        static_captures_len: Some(0),",
          "    };",
          "    source.replace_append(&captures, &mut destination);",
          "    let mut source = String::from(\"qux\");",
          "    let mut destination = String::new();",
          "    assert_eq!(destination, \"\");",
          "    let captures = Captures { haystack: \"qux\", caps: captures::Captures::new(vec![0]), static_captures_len: Some(0) };",
          "    source.replace_append(&captures, &mut destination);",
          "    assert_eq!(destination, \"qux\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]