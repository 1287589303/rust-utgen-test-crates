[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let version: u32 = 1;",
          "    let mut dst: [u8; 2] = [0; 2]; // Length is less than 4",
          "    let result = write_version::<NE>(version, &mut dst);",
          "}"
        ],
        "oracle": [
          "    let version: u32 = 1;",
          "    let mut dst: [u8; 2] = [0; 2];",
          "    let result = write_version::<NE>(version, &mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), SerializeError::buffer_too_small(\"version number\"));"
        ],
        "code": [
          "{",
          "    let version: u32 = 1;",
          "    let mut dst: [u8; 2] = [0; 2]; // Length is less than 4",
          "    let result = write_version::<NE>(version, &mut dst);",
          "    let version: u32 = 1;",
          "    let mut dst: [u8; 2] = [0; 2];",
          "    let result = write_version::<NE>(version, &mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), SerializeError::buffer_too_small(\"version number\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let version: u32 = 2;",
          "    let mut dst: [u8; 0] = []; // Length is less than 4",
          "    let result = write_version::<NE>(version, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().what, \"version number\");"
        ],
        "code": [
          "{",
          "    let version: u32 = 2;",
          "    let mut dst: [u8; 0] = []; // Length is less than 4",
          "    let result = write_version::<NE>(version, &mut dst);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().what, \"version number\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let version: u32 = 3;",
          "    let mut dst: [u8; 3] = [0; 3]; // Length is less than 4",
          "    let result = write_version::<NE>(version, &mut dst);",
          "}"
        ],
        "oracle": [
          "    let version: u32 = 3;",
          "    let mut dst: [u8; 3] = [0; 3];",
          "    let result = write_version::<NE>(version, &mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"version number\")));"
        ],
        "code": [
          "{",
          "    let version: u32 = 3;",
          "    let mut dst: [u8; 3] = [0; 3]; // Length is less than 4",
          "    let result = write_version::<NE>(version, &mut dst);",
          "    let version: u32 = 3;",
          "    let mut dst: [u8; 3] = [0; 3];",
          "    let result = write_version::<NE>(version, &mut dst);",
          "    assert_eq!(result, Err(SerializeError::buffer_too_small(\"version number\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]