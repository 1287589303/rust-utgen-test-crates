[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LittleEndian;",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_le_bytes());",
          "        }",
          "    }",
          "",
          "    let version: u32 = 0; // test with the minimum valid version number",
          "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
          "    let result = write_version::<LittleEndian>(version, &mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(buffer, 0u32.to_le_bytes());",
          "    assert!(buffer.len() == 4);"
        ],
        "code": [
          "{",
          "    struct LittleEndian;",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_le_bytes());",
          "        }",
          "    }",
          "",
          "    let version: u32 = 0; // test with the minimum valid version number",
          "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
          "    let result = write_version::<LittleEndian>(version, &mut buffer);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(buffer, 0u32.to_le_bytes());",
          "    assert!(buffer.len() == 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LittleEndian;",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_le_bytes());",
          "        }",
          "    }",
          "",
          "    let version: u32 = u32::MAX; // test with the maximum valid version number",
          "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
          "    let result = write_version::<LittleEndian>(version, &mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(buffer, version.to_le_bytes());"
        ],
        "code": [
          "{",
          "    struct LittleEndian;",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_le_bytes());",
          "        }",
          "    }",
          "",
          "    let version: u32 = u32::MAX; // test with the maximum valid version number",
          "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
          "    let result = write_version::<LittleEndian>(version, &mut buffer);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(buffer, version.to_le_bytes());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LittleEndian;",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_le_bytes());",
          "        }",
          "    }",
          "",
          "    let version: u32 = 1_000_000; // test with a mid-range version number",
          "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
          "    let result = write_version::<LittleEndian>(version, &mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(buffer, 1_000_000u32.to_le_bytes());"
        ],
        "code": [
          "{",
          "    struct LittleEndian;",
          "    impl Endian for LittleEndian {",
          "        fn write_u32(value: u32, dst: &mut [u8]) {",
          "            dst.copy_from_slice(&value.to_le_bytes());",
          "        }",
          "    }",
          "",
          "    let version: u32 = 1_000_000; // test with a mid-range version number",
          "    let mut buffer = [0u8; 4]; // buffer size equals size_of::<u32>()",
          "    let result = write_version::<LittleEndian>(version, &mut buffer);",
          "    assert_eq!(result, Ok(4));",
          "    assert_eq!(buffer, 1_000_000u32.to_le_bytes());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]