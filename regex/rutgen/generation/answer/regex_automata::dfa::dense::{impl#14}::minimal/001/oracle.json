[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses::empty();",
          "    let tt = TransitionTable::minimal(classes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tt.table.len(), 0);",
          "    assert_eq!(tt.classes, ByteClasses::empty());",
          "    assert_eq!(tt.stride2, 1);",
          "    assert_eq!(tt.table.capacity(), 0);",
          "    assert_eq!(tt.table.len(), 0);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses::empty();",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert_eq!(tt.classes, ByteClasses::empty());",
          "    assert_eq!(tt.stride2, 1);",
          "    assert_eq!(tt.table.capacity(), 0);",
          "    assert_eq!(tt.table.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses::singletons();",
          "    let tt = TransitionTable::minimal(classes);",
          "}"
        ],
        "oracle": [
          "    let classes = ByteClasses::singletons();",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert_eq!(tt.stride2, 1);",
          "    assert!(tt.classes.is_singleton());",
          "    assert_eq!(tt.classes.alphabet_len(), 256);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses::singletons();",
          "    let tt = TransitionTable::minimal(classes);",
          "    let classes = ByteClasses::singletons();",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert_eq!(tt.stride2, 1);",
          "    assert!(tt.classes.is_singleton());",
          "    assert_eq!(tt.classes.alphabet_len(), 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    for i in 0..256 {",
          "        classes.set(i as u8, 0); // Set all bytes to class 0",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "}"
        ],
        "oracle": [
          "    let mut classes = ByteClasses::empty();",
          "    assert_eq!(classes.alphabet_len(), 0);",
          "    for i in 0..256 {",
          "    assert_eq!(classes.get(i as u8), 0);",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.stride2, 1);",
          "    assert_eq!(tt.classes.alphabet_len(), 1);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert_eq!(tt.classes.get(0), 0);",
          "    assert_eq!(tt.classes.stride2(), 1);",
          "    assert_eq!(tt.table.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    for i in 0..256 {",
          "        classes.set(i as u8, 0); // Set all bytes to class 0",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "    let mut classes = ByteClasses::empty();",
          "    assert_eq!(classes.alphabet_len(), 0);",
          "    for i in 0..256 {",
          "    assert_eq!(classes.get(i as u8), 0);",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.stride2, 1);",
          "    assert_eq!(tt.classes.alphabet_len(), 1);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert_eq!(tt.classes.get(0), 0);",
          "    assert_eq!(tt.classes.stride2(), 1);",
          "    assert_eq!(tt.table.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    for i in 0..128 {",
          "        classes.set(i as u8, 0); // Set first half of bytes to class 0",
          "    }",
          "    for i in 128..256 {",
          "        classes.set(i as u8, 1); // Set second half of bytes to class 1",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "}"
        ],
        "oracle": [
          "    let classes = ByteClasses::empty();",
          "    for i in 0..128 { classes.set(i as u8, 0); }",
          "    for i in 128..256 { classes.set(i as u8, 1); }",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.stride2, 1);",
          "    assert_eq!(tt.classes.get(0), 0);",
          "    assert_eq!(tt.classes.get(127), 0);",
          "    assert_eq!(tt.classes.get(128), 1);",
          "    assert_eq!(tt.classes.get(255), 1);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert_eq!(tt.add_empty_state().is_ok(), true);",
          "    assert_eq!(tt.add_empty_state().is_ok(), true);"
        ],
        "code": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    for i in 0..128 {",
          "        classes.set(i as u8, 0); // Set first half of bytes to class 0",
          "    }",
          "    for i in 128..256 {",
          "        classes.set(i as u8, 1); // Set second half of bytes to class 1",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "    let classes = ByteClasses::empty();",
          "    for i in 0..128 { classes.set(i as u8, 0); }",
          "    for i in 128..256 { classes.set(i as u8, 1); }",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.stride2, 1);",
          "    assert_eq!(tt.classes.get(0), 0);",
          "    assert_eq!(tt.classes.get(127), 0);",
          "    assert_eq!(tt.classes.get(128), 1);",
          "    assert_eq!(tt.classes.get(255), 1);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert_eq!(tt.add_empty_state().is_ok(), true);",
          "    assert_eq!(tt.add_empty_state().is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    for i in 0..256 {",
          "        classes.set(i as u8, (i % 2) as u8); // Set bytes to alternating classes 0 and 1",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "}"
        ],
        "oracle": [
          "    let mut classes = ByteClasses::empty();",
          "    for i in 0..256 {",
          "    classes.set(i as u8, (i % 2) as u8);",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.stride2, 1);",
          "    assert_eq!(tt.classes.alphabet_len(), 256);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert!(tt.add_empty_state().is_ok());",
          "    assert!(tt.add_empty_state().is_ok());"
        ],
        "code": [
          "{",
          "    let mut classes = ByteClasses::empty();",
          "    for i in 0..256 {",
          "        classes.set(i as u8, (i % 2) as u8); // Set bytes to alternating classes 0 and 1",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "    let mut classes = ByteClasses::empty();",
          "    for i in 0..256 {",
          "    classes.set(i as u8, (i % 2) as u8);",
          "    }",
          "    let tt = TransitionTable::minimal(classes);",
          "    assert_eq!(tt.stride2, 1);",
          "    assert_eq!(tt.classes.alphabet_len(), 256);",
          "    assert_eq!(tt.table.len(), 0);",
          "    assert!(tt.add_empty_state().is_ok());",
          "    assert!(tt.add_empty_state().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]