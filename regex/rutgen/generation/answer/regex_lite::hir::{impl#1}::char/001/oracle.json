[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::char('\\0');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Char('\\0'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::char('\\0');",
          "    assert_eq!(result.kind(), &HirKind::Char('\\0'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::char('\\u{7F}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Char('\\u{7F}'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::char('\\u{7F}');",
          "    assert_eq!(result.kind, HirKind::Char('\\u{7F}'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::char('\\u{D7FF}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Char('\\u{D7FF}'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::char('\\u{D7FF}');",
          "    assert_eq!(result.kind(), &HirKind::Char('\\u{D7FF}'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::char('\\u{E000}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Char('\\u{E000}'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::char('\\u{E000}');",
          "    assert_eq!(result.kind(), &HirKind::Char('\\u{E000}'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::char('\\u{10FFFF}');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Char('\\u{10FFFF}'));",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.is_match_empty(), false);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::char('\\u{10FFFF}');",
          "    assert_eq!(result.kind(), &HirKind::Char('\\u{10FFFF}'));",
          "    assert_eq!(result.is_start_anchored(), false);",
          "    assert_eq!(result.is_match_empty(), false);",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::char('a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Char('a'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::char('a');",
          "    assert_eq!(result.kind(), &HirKind::Char('a'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::char('ä¸­');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &HirKind::Char('ä¸­'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let result = Hir::char('ä¸­');",
          "    assert_eq!(result.kind(), &HirKind::Char('ä¸­'));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(!result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::char('ðŸ˜Š');",
          "}"
        ],
        "oracle": [
          "    let expected = Hir {",
          "    kind: HirKind::Char('ðŸ˜Š'),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(0),",
          "    };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let result = Hir::char('ðŸ˜Š');",
          "    let expected = Hir {",
          "    kind: HirKind::Char('ðŸ˜Š'),",
          "    is_start_anchored: false,",
          "    is_match_empty: false,",
          "    static_explicit_captures_len: Some(0),",
          "    };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]