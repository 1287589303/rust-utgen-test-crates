[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    assert!(!look_set.contains_anchor_crlf());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::StartCRLF), false);",
          "    assert_eq!(look_set.contains(Look::EndCRLF), false);",
          "    assert_eq!(look_set.contains_anchor_crlf(), false);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet { bits: 0 };",
          "    assert!(!look_set.contains_anchor_crlf());",
          "    assert_eq!(look_set.contains(Look::StartCRLF), false);",
          "    assert_eq!(look_set.contains(Look::EndCRLF), false);",
          "    assert_eq!(look_set.contains_anchor_crlf(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::StartCRLF as u32 };",
          "    assert!(!look_set.contains_anchor_crlf());",
          "}"
        ],
        "oracle": [
          "    let look_set = LookSet { bits: 0 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::EndCRLF as u32 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::Start as u32 | Look::End as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::WordStartAscii as u32 | Look::WordEndAscii as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::StartLF as u32 | Look::EndLF as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::WordAscii as u32 }; assert!(!look_set.contains_anchor_crlf());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::StartCRLF as u32 };",
          "    assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: 0 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::EndCRLF as u32 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::Start as u32 | Look::End as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::WordStartAscii as u32 | Look::WordEndAscii as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::StartLF as u32 | Look::EndLF as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::WordAscii as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: Look::EndCRLF as u32 };",
          "    assert!(look_set.contains_anchor_crlf());",
          "}"
        ],
        "oracle": [
          "    look_set.contains_anchor_crlf() => true",
          "    let look_set = LookSet { bits: Look::StartCRLF as u32 | Look::EndCRLF as u32 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: 0 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::StartCRLF as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::EndCRLF as u32 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::StartCRLF as u32 | Look::End as u32 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::End as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::Start as u32 | Look::End as u32 }; assert!(!look_set.contains_anchor_crlf());"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: Look::EndCRLF as u32 };",
          "    assert!(look_set.contains_anchor_crlf());",
          "    look_set.contains_anchor_crlf() => true",
          "    let look_set = LookSet { bits: Look::StartCRLF as u32 | Look::EndCRLF as u32 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: 0 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::StartCRLF as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::EndCRLF as u32 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::StartCRLF as u32 | Look::End as u32 }; assert!(look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::End as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "    let look_set = LookSet { bits: Look::Start as u32 | Look::End as u32 }; assert!(!look_set.contains_anchor_crlf());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 0xFFFFFFFF };",
          "    look_set.bits &= !(Look::StartCRLF as u32);",
          "    assert!(!look_set.contains_anchor_crlf());",
          "}"
        ],
        "oracle": [
          "    look_set.bits = 0xFFFFFFFF;",
          "    look_set.bits &= !(Look::StartCRLF as u32);",
          "    assert_eq!(look_set.contains_anchor_crlf(), false);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 0xFFFFFFFF };",
          "    look_set.bits &= !(Look::StartCRLF as u32);",
          "    assert!(!look_set.contains_anchor_crlf());",
          "    look_set.bits = 0xFFFFFFFF;",
          "    look_set.bits &= !(Look::StartCRLF as u32);",
          "    assert_eq!(look_set.contains_anchor_crlf(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]