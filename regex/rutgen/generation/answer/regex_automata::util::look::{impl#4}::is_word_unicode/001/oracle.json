[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\";",
          "    let at: usize = 0;",
          "    let _ = matcher.is_word_unicode(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_unicode(haystack, at), Err(UnicodeWordBoundaryError(())));"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"\";",
          "    let at: usize = 0;",
          "    let _ = matcher.is_word_unicode(haystack, at);",
          "    assert_eq!(matcher.is_word_unicode(haystack, at), Err(UnicodeWordBoundaryError(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello\";",
          "    let at: usize = 3;",
          "    let _ = matcher.is_word_unicode(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello\";",
          "    let at: usize = 3;",
          "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
          "    assert_eq!(matcher.is_word_unicode(haystack, at).unwrap_err(), UnicodeWordBoundaryError(()));",
          "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len()).is_ok(), true);",
          "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len() + 1).is_err(), true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello\";",
          "    let at: usize = 3;",
          "    let _ = matcher.is_word_unicode(haystack, at);",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"hello\";",
          "    let at: usize = 3;",
          "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
          "    assert_eq!(matcher.is_word_unicode(haystack, at).unwrap_err(), UnicodeWordBoundaryError(()));",
          "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len()).is_ok(), true);",
          "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len() + 1).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"world\";",
          "    let at: usize = haystack.len();",
          "    let _ = matcher.is_word_unicode(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"world\";",
          "    let at: usize = haystack.len();",
          "    let _ = matcher.is_word_unicode(haystack, at);",
          "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"word\";",
          "    let at: usize = 1;",
          "    let _ = matcher.is_word_unicode(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
          "    assert_eq!(matcher.is_word_unicode(haystack, at).unwrap_err().0, ());",
          "    assert!(matcher.is_word_unicode(haystack, at).is_err());",
          "    assert!(matcher.is_word_unicode(haystack, at).unwrap_err() == UnicodeWordBoundaryError(()));",
          "    assert!(matcher.is_word_unicode(haystack, 0).is_ok());",
          "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len()).is_ok(), true);",
          "    assert_eq!(matcher.is_word_unicode(haystack, 5).is_err(), true);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = b\"word\";",
          "    let at: usize = 1;",
          "    let _ = matcher.is_word_unicode(haystack, at);",
          "    assert_eq!(matcher.is_word_unicode(haystack, at).is_err(), true);",
          "    assert_eq!(matcher.is_word_unicode(haystack, at).unwrap_err().0, ());",
          "    assert!(matcher.is_word_unicode(haystack, at).is_err());",
          "    assert!(matcher.is_word_unicode(haystack, at).unwrap_err() == UnicodeWordBoundaryError(()));",
          "    assert!(matcher.is_word_unicode(haystack, 0).is_ok());",
          "    assert_eq!(matcher.is_word_unicode(haystack, haystack.len()).is_ok(), true);",
          "    assert_eq!(matcher.is_word_unicode(haystack, 5).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]