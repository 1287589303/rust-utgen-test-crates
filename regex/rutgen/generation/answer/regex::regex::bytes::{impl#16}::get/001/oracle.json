[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Bruce Springsteen\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\w+)\\s+(?P<last>\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "    ",
          "    let _ = locs.get(0);",
          "    let _ = locs.get(1);",
          "    let _ = locs.get(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(locs.get(0), Some((0, 17)));",
          "    assert_eq!(locs.get(1), Some((0, 5)));",
          "    assert_eq!(locs.get(2), Some((6, 17)));",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(4), None);"
        ],
        "code": [
          "{",
          "    let haystack = b\"Bruce Springsteen\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\w+)\\s+(?P<last>\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "    ",
          "    let _ = locs.get(0);",
          "    let _ = locs.get(1);",
          "    let _ = locs.get(2);",
          "    assert_eq!(locs.get(0), Some((0, 17)));",
          "    assert_eq!(locs.get(1), Some((0, 5)));",
          "    assert_eq!(locs.get(2), Some((6, 17)));",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(4), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Bruce Springsteen\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\w+)\\s+(?P<last>\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "",
          "    let _ = locs.get(3);",
          "    let _ = locs.get(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(locs.get(0), Some((0, 17)));",
          "    assert_eq!(locs.get(1), Some((0, 5)));",
          "    assert_eq!(locs.get(2), Some((6, 17)));",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(4), None);"
        ],
        "code": [
          "{",
          "    let haystack = b\"Bruce Springsteen\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\w+)\\s+(?P<last>\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "",
          "    let _ = locs.get(3);",
          "    let _ = locs.get(4);",
          "    assert_eq!(locs.get(0), Some((0, 17)));",
          "    assert_eq!(locs.get(1), Some((0, 5)));",
          "    assert_eq!(locs.get(2), Some((6, 17)));",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(4), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\w+)\\s+(?P<last>\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "",
          "    let _ = locs.get(0);",
          "    let _ = locs.get(1);",
          "    let _ = locs.get(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, locs.get(0));",
          "    assert_eq!(None, locs.get(1));",
          "    assert_eq!(None, locs.get(2));"
        ],
        "code": [
          "{",
          "    let haystack = b\"\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\w+)\\s+(?P<last>\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "",
          "    let _ = locs.get(0);",
          "    let _ = locs.get(1);",
          "    let _ = locs.get(2);",
          "    assert_eq!(None, locs.get(0));",
          "    assert_eq!(None, locs.get(1));",
          "    assert_eq!(None, locs.get(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"This has no matches\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\d+)\\s+(?P<last>\\d+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "",
          "    let _ = locs.get(0);",
          "    let _ = locs.get(1);",
          "    let _ = locs.get(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(None, locs.get(0));",
          "    assert_eq!(None, locs.get(1));",
          "    assert_eq!(None, locs.get(2));"
        ],
        "code": [
          "{",
          "    let haystack = b\"This has no matches\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\d+)\\s+(?P<last>\\d+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "",
          "    let _ = locs.get(0);",
          "    let _ = locs.get(1);",
          "    let _ = locs.get(2);",
          "    assert_eq!(None, locs.get(0));",
          "    assert_eq!(None, locs.get(1));",
          "    assert_eq!(None, locs.get(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"Bruce Springsteen\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\w+)\\s+(?P<last>\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "",
          "    let _ = locs.get(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(locs.get(0), Some((0, 17)));",
          "    assert_eq!(locs.get(1), Some((0, 5)));",
          "    assert_eq!(locs.get(2), Some((6, 17)));",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(usize::MAX), None);"
        ],
        "code": [
          "{",
          "    let haystack = b\"Bruce Springsteen\";",
          "    let re = regex::bytes::Regex::new(r\"(?P<first>\\w+)\\s+(?P<last>\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    re.captures_read(&mut locs, haystack).unwrap();",
          "",
          "    let _ = locs.get(usize::MAX);",
          "    assert_eq!(locs.get(0), Some((0, 17)));",
          "    assert_eq!(locs.get(1), Some((0, 5)));",
          "    assert_eq!(locs.get(2), Some((6, 17)));",
          "    assert_eq!(locs.get(3), None);",
          "    assert_eq!(locs.get(usize::MAX), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]