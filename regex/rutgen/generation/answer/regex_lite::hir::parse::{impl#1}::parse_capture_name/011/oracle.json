[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<capture>\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('c')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_capture_name(), Ok(\"capture\"));",
          "    assert!(parser.capture_names.borrow().contains(&String::from(\"capture\")));",
          "    assert_eq!(parser.pos.get(), 9);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert!(parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<capture>\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('c')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "    assert_eq!(parser.parse_capture_name(), Ok(\"capture\"));",
          "    assert!(parser.capture_names.borrow().contains(&String::from(\"capture\")));",
          "    assert_eq!(parser.pos.get(), 9);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert!(parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<ca#pture>\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('c')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_INVALID_GROUP_NAME);",
          "    ",
          "    parser.pos.set(1);",
          "    parser.char.set(Some('>'));",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.ok().unwrap(), \"capture\");",
          "    ",
          "    parser.pos.set(1);",
          "    parser.char.set(Some('c'));",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.ok().unwrap(), \"ca\");",
          "    ",
          "    parser.pos.set(1);",
          "    parser.char.set(Some('.'));",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_INVALID_GROUP_NAME);",
          "    ",
          "    parser.pos.set(1);",
          "    parser.char.set(Some('c'));",
          "    parser.bump();",
          "    parser.char.set(Some('>'));",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_EMPTY_GROUP_NAME);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<ca#pture>\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('c')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_INVALID_GROUP_NAME);",
          "    ",
          "    parser.pos.set(1);",
          "    parser.char.set(Some('>'));",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.ok().unwrap(), \"capture\");",
          "    ",
          "    parser.pos.set(1);",
          "    parser.char.set(Some('c'));",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.ok().unwrap(), \"ca\");",
          "    ",
          "    parser.pos.set(1);",
          "    parser.char.set(Some('.'));",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_INVALID_GROUP_NAME);",
          "    ",
          "    parser.pos.set(1);",
          "    parser.char.set(Some('c'));",
          "    parser.bump();",
          "    parser.char.set(Some('>'));",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_EMPTY_GROUP_NAME);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<>\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('>')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert_eq!(parser.pos.get(), 2);",
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.capture_index.get(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<>\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('>')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert_eq!(parser.pos.get(), 2);",
          "    assert!(parser.is_done());",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<capture\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('c')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.char(), Some('c'));",
          "    assert!(is_capture_char(parser.char().unwrap(), parser.pos().get() == 1));",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.char(), Some('>'));",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.pattern(), \"<capture\");",
          "    assert!(parser.add_capture_name(\"<capture\").is_ok());",
          "    assert_eq!(parser.parse_capture_name(), Err(Error::new(ERR_UNCLOSED_GROUP_NAME)));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<capture\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('c')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.char(), Some('c'));",
          "    assert!(is_capture_char(parser.char().unwrap(), parser.pos().get() == 1));",
          "    assert!(parser.bump());",
          "    assert_eq!(parser.char(), Some('>'));",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.pattern(), \"<capture\");",
          "    assert!(parser.add_capture_name(\"<capture\").is_ok());",
          "    assert_eq!(parser.parse_capture_name(), Err(Error::new(ERR_UNCLOSED_GROUP_NAME)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<capture_1>\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('c')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), 16);",
          "    assert_eq!(parser.capture_names.borrow().len(), 1);",
          "    assert_eq!(parser.capture_names.borrow()[0], \"capture_1\");",
          "    assert_eq!(parser.is_done(), false);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "    let pattern = \"<capture_1>\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(1),",
          "        char: Cell::new(Some('c')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_capture_name();",
          "    assert_eq!(parser.pos.get(), 16);",
          "    assert_eq!(parser.capture_names.borrow().len(), 1);",
          "    assert_eq!(parser.capture_names.borrow()[0], \"capture_1\");",
          "    assert_eq!(parser.is_done(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]