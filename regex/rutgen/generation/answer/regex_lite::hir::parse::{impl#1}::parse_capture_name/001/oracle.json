[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 1,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, \"expected capture group name, but got end of pattern\");"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 1,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, \"expected capture group name, but got end of pattern\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 1,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_MISSING_GROUP_NAME);"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 1,",
          "        flags: Flags::default(),",
          "    };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_capture_name();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_MISSING_GROUP_NAME);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]