[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"<validName>\";",
          "",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('>')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.char(), Some('>'));",
          "    assert_eq!(is_capture_char(parser.char().unwrap(), parser.pos() == 0), true);",
          "    assert_eq!(parser.bump(), false);",
          "    assert_eq!(parser.is_done(), true);",
          "    assert_eq!(parser.parse_capture_name(), Err(Error::new(ERR_UNCLOSED_GROUP_NAME)));"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"<validName>\";",
          "",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('>')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.parse_capture_name();",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.char(), Some('>'));",
          "    assert_eq!(is_capture_char(parser.char().unwrap(), parser.pos() == 0), true);",
          "    assert_eq!(parser.bump(), false);",
          "    assert_eq!(parser.is_done(), true);",
          "    assert_eq!(parser.parse_capture_name(), Err(Error::new(ERR_UNCLOSED_GROUP_NAME)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"<>\";",
          "",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('>')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.parse_capture_name();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(parser.parse_capture_name(), Err(Error { msg: ERR_UNCLOSED_GROUP_NAME })));"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config { nest_limit: 10, flags };",
          "    let pattern = \"<>\";",
          "",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('>')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.parse_capture_name();",
          "    assert!(matches!(parser.parse_capture_name(), Err(Error { msg: ERR_UNCLOSED_GROUP_NAME })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]