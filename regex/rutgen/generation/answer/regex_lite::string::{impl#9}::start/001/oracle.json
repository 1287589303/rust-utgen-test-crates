[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"test\";",
          "    let m = Match::new(haystack, 0, 4);",
          "    m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), 0);",
          "    let m = Match::new(haystack, 1, 4);",
          "    assert_eq!(m.start(), 1);",
          "    let m = Match::new(haystack, 2, 4);",
          "    assert_eq!(m.start(), 2);",
          "    let m = Match::new(haystack, 0, 0);",
          "    assert_eq!(m.start(), 0);",
          "    let m = Match::new(haystack, 4, 4);",
          "    assert_eq!(m.start(), 4);"
        ],
        "code": [
          "{",
          "    let haystack = \"test\";",
          "    let m = Match::new(haystack, 0, 4);",
          "    m.start();",
          "    assert_eq!(m.start(), 0);",
          "    let m = Match::new(haystack, 1, 4);",
          "    assert_eq!(m.start(), 1);",
          "    let m = Match::new(haystack, 2, 4);",
          "    assert_eq!(m.start(), 2);",
          "    let m = Match::new(haystack, 0, 0);",
          "    assert_eq!(m.start(), 0);",
          "    let m = Match::new(haystack, 4, 4);",
          "    assert_eq!(m.start(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"test\";",
          "    let m = Match::new(haystack, 2, 4);",
          "    m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), 2);"
        ],
        "code": [
          "{",
          "    let haystack = \"test\";",
          "    let m = Match::new(haystack, 2, 4);",
          "    m.start();",
          "    assert_eq!(m.start(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"test\";",
          "    let m = Match::new(haystack, 4, 4);",
          "    m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), 4);"
        ],
        "code": [
          "{",
          "    let haystack = \"test\";",
          "    let m = Match::new(haystack, 4, 4);",
          "    m.start();",
          "    assert_eq!(m.start(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"test string\";",
          "    let m = Match::new(haystack, 10, 10);",
          "    m.start();",
          "}"
        ],
        "oracle": [
          "    let haystack = \"test string\";",
          "    let m = Match::new(haystack, 10, 10);",
          "    assert_eq!(m.start(), 10);",
          "    let m = Match::new(haystack, 0, 5);",
          "    assert_eq!(m.start(), 0);",
          "    let m = Match::new(haystack, 5, 10);",
          "    assert_eq!(m.start(), 5);",
          "    let m = Match::new(haystack, 3, 3);",
          "    assert_eq!(m.start(), 3);",
          "    let m = Match::new(haystack, 10, 15);",
          "    assert_eq!(m.start(), 10);",
          "    let m = Match::new(haystack, 1, 1);",
          "    assert_eq!(m.start(), 1);",
          "    let m = Match::new(haystack, 6, 9);",
          "    assert_eq!(m.start(), 6);"
        ],
        "code": [
          "{",
          "    let haystack = \"test string\";",
          "    let m = Match::new(haystack, 10, 10);",
          "    m.start();",
          "    let haystack = \"test string\";",
          "    let m = Match::new(haystack, 10, 10);",
          "    assert_eq!(m.start(), 10);",
          "    let m = Match::new(haystack, 0, 5);",
          "    assert_eq!(m.start(), 0);",
          "    let m = Match::new(haystack, 5, 10);",
          "    assert_eq!(m.start(), 5);",
          "    let m = Match::new(haystack, 3, 3);",
          "    assert_eq!(m.start(), 3);",
          "    let m = Match::new(haystack, 10, 15);",
          "    assert_eq!(m.start(), 10);",
          "    let m = Match::new(haystack, 1, 1);",
          "    assert_eq!(m.start(), 1);",
          "    let m = Match::new(haystack, 6, 9);",
          "    assert_eq!(m.start(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"hello\";",
          "    let m = Match::new(haystack, 0, 5);",
          "    m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(Match::new(\"world\", 2, 5).start(), 2);",
          "    assert_eq!(Match::new(\"regex\", 3, 5).start(), 3);",
          "    assert_eq!(Match::new(\"testing\", 0, 7).start(), 0);",
          "    assert_eq!(Match::new(\"abc\", 1, 3).start(), 1);",
          "    assert_eq!(Match::new(\"xyz\", 0, 1).start(), 0);",
          "    assert_eq!(Match::new(\"match\", 1, 4).start(), 1);",
          "    assert_eq!(Match::new(\"zt\", 0, 2).start(), 0);",
          "    assert_eq!(Match::new(\"\", 0, 0).start(), 0);",
          "    assert_eq!(Match::new(\"boundary\", 7, 8).start(), 7);"
        ],
        "code": [
          "{",
          "    let haystack = \"hello\";",
          "    let m = Match::new(haystack, 0, 5);",
          "    m.start();",
          "    assert_eq!(m.start(), 0);",
          "    assert_eq!(Match::new(\"world\", 2, 5).start(), 2);",
          "    assert_eq!(Match::new(\"regex\", 3, 5).start(), 3);",
          "    assert_eq!(Match::new(\"testing\", 0, 7).start(), 0);",
          "    assert_eq!(Match::new(\"abc\", 1, 3).start(), 1);",
          "    assert_eq!(Match::new(\"xyz\", 0, 1).start(), 0);",
          "    assert_eq!(Match::new(\"match\", 1, 4).start(), 1);",
          "    assert_eq!(Match::new(\"zt\", 0, 2).start(), 0);",
          "    assert_eq!(Match::new(\"\", 0, 0).start(), 0);",
          "    assert_eq!(Match::new(\"boundary\", 7, 8).start(), 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = \"sample\";",
          "    let m = Match::new(haystack, 6, 6);",
          "    m.start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(m.start(), 6);"
        ],
        "code": [
          "{",
          "    let haystack = \"sample\";",
          "    let m = Match::new(haystack, 6, 6);",
          "    m.start();",
          "    assert_eq!(m.start(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]