[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = vec![\"abc\", \"def\", \"ghi\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "",
          "    let _ = set_matches_iter.next_back(); // Should return Some(index) for last pattern",
          "    let _ = set_matches_iter.next_back(); // Should return Some(index) for second pattern",
          "    let _ = set_matches_iter.next_back(); // Should return Some(index) for first pattern",
          "    let _ = set_matches_iter.next_back(); // Should return None for exhausted iterator",
          "}"
        ],
        "oracle": [
          "    let patterns = vec![\"abc\", \"def\", \"ghi\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "    ",
          "    assert_eq!(set_matches_iter.next_back(), Some(2)); // Last pattern index",
          "    assert_eq!(set_matches_iter.next_back(), Some(1)); // Second pattern index",
          "    assert_eq!(set_matches_iter.next_back(), Some(0)); // First pattern index",
          "    assert_eq!(set_matches_iter.next_back(), None);    // Iterator exhausted"
        ],
        "code": [
          "{",
          "    let patterns = vec![\"abc\", \"def\", \"ghi\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "",
          "    let _ = set_matches_iter.next_back(); // Should return Some(index) for last pattern",
          "    let _ = set_matches_iter.next_back(); // Should return Some(index) for second pattern",
          "    let _ = set_matches_iter.next_back(); // Should return Some(index) for first pattern",
          "    let _ = set_matches_iter.next_back(); // Should return None for exhausted iterator",
          "    let patterns = vec![\"abc\", \"def\", \"ghi\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "    ",
          "    assert_eq!(set_matches_iter.next_back(), Some(2)); // Last pattern index",
          "    assert_eq!(set_matches_iter.next_back(), Some(1)); // Second pattern index",
          "    assert_eq!(set_matches_iter.next_back(), Some(0)); // First pattern index",
          "    assert_eq!(set_matches_iter.next_back(), None);    // Iterator exhausted",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = vec![\"abc\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "",
          "    let _ = set_matches_iter.next_back(); // Should return Some(0) for first pattern",
          "    let _ = set_matches_iter.next_back(); // Should return None for exhausted iterator",
          "}"
        ],
        "oracle": [
          "    let patterns = vec![\"abc\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "    ",
          "    assert_eq!(set_matches_iter.next_back(), Some(0)); // First call should return Some(0)",
          "    assert_eq!(set_matches_iter.next_back(), None); // Second call should return None after exhaustion"
        ],
        "code": [
          "{",
          "    let patterns = vec![\"abc\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "",
          "    let _ = set_matches_iter.next_back(); // Should return Some(0) for first pattern",
          "    let _ = set_matches_iter.next_back(); // Should return None for exhausted iterator",
          "    let patterns = vec![\"abc\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "    ",
          "    assert_eq!(set_matches_iter.next_back(), Some(0)); // First call should return Some(0)",
          "    assert_eq!(set_matches_iter.next_back(), None); // Second call should return None after exhaustion",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let patterns = vec![\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "",
          "    let _ = set_matches_iter.next_back(); // Should return Some(4) for last pattern \"mno\"",
          "    let _ = set_matches_iter.next_back(); // Should return Some(3) for \"jkl\"",
          "    let _ = set_matches_iter.next_back(); // Should return Some(2) for \"ghi\"",
          "    let _ = set_matches_iter.next_back(); // Should return Some(1) for \"def\"",
          "    let _ = set_matches_iter.next_back(); // Should return Some(0) for \"abc\"",
          "    let _ = set_matches_iter.next_back(); // Should return None for exhausted iterator",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_matches_iter.next_back(), Some(4)); // Test for pattern \"mno\"",
          "    assert_eq!(set_matches_iter.next_back(), Some(3)); // Test for pattern \"jkl\"",
          "    assert_eq!(set_matches_iter.next_back(), Some(2)); // Test for pattern \"ghi\"",
          "    assert_eq!(set_matches_iter.next_back(), Some(1)); // Test for pattern \"def\"",
          "    assert_eq!(set_matches_iter.next_back(), Some(0)); // Test for pattern \"abc\"",
          "    assert_eq!(set_matches_iter.next_back(), None); // Test for exhausted iterator"
        ],
        "code": [
          "{",
          "    let patterns = vec![\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"];",
          "    let regex_set_builder = RegexSetBuilder::new();",
          "    let pattern_set = regex_set_builder.add_patterns(&patterns).build().unwrap();",
          "    let pattern_set_iter = pattern_set.iter();",
          "    let mut set_matches_iter = SetMatchesIter(pattern_set_iter);",
          "",
          "    let _ = set_matches_iter.next_back(); // Should return Some(4) for last pattern \"mno\"",
          "    let _ = set_matches_iter.next_back(); // Should return Some(3) for \"jkl\"",
          "    let _ = set_matches_iter.next_back(); // Should return Some(2) for \"ghi\"",
          "    let _ = set_matches_iter.next_back(); // Should return Some(1) for \"def\"",
          "    let _ = set_matches_iter.next_back(); // Should return Some(0) for \"abc\"",
          "    let _ = set_matches_iter.next_back(); // Should return None for exhausted iterator",
          "    assert_eq!(set_matches_iter.next_back(), Some(4)); // Test for pattern \"mno\"",
          "    assert_eq!(set_matches_iter.next_back(), Some(3)); // Test for pattern \"jkl\"",
          "    assert_eq!(set_matches_iter.next_back(), Some(2)); // Test for pattern \"ghi\"",
          "    assert_eq!(set_matches_iter.next_back(), Some(1)); // Test for pattern \"def\"",
          "    assert_eq!(set_matches_iter.next_back(), Some(0)); // Test for pattern \"abc\"",
          "    assert_eq!(set_matches_iter.next_back(), None); // Test for exhausted iterator",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]