[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(0, None);",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::new(),",
          "    config: Config::default(),",
          "    builder: RefCell::new(builder),",
          "    utf8_state: RefCell::new(Utf8State::default()),",
          "    trie_state: RefCell::new(RangeTrie::default()),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(0, None);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_eq!(state_id, StateID::ZERO);",
          "    ",
          "    let result_with_name = compiler.add_capture_start(1, Some(\"test_capture\"));",
          "    assert!(result_with_name.is_ok());",
          "    let state_id_with_name = result_with_name.unwrap();",
          "    assert_ne!(state_id_with_name, StateID::ZERO);",
          "    ",
          "    let result_invalid_index = compiler.add_capture_start(u32::MAX, Some(\"invalid_capture\"));",
          "    assert!(result_invalid_index.is_err());",
          "    ",
          "    let result_negative_index = compiler.add_capture_start(u32::MAX - 1, None);",
          "    assert!(result_negative_index.is_ok());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(0, None);",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::new(),",
          "    config: Config::default(),",
          "    builder: RefCell::new(builder),",
          "    utf8_state: RefCell::new(Utf8State::default()),",
          "    trie_state: RefCell::new(RangeTrie::default()),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(0, None);",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert_eq!(state_id, StateID::ZERO);",
          "    ",
          "    let result_with_name = compiler.add_capture_start(1, Some(\"test_capture\"));",
          "    assert!(result_with_name.is_ok());",
          "    let state_id_with_name = result_with_name.unwrap();",
          "    assert_ne!(state_id_with_name, StateID::ZERO);",
          "    ",
          "    let result_invalid_index = compiler.add_capture_start(u32::MAX, Some(\"invalid_capture\"));",
          "    assert!(result_invalid_index.is_err());",
          "    ",
          "    let result_negative_index = compiler.add_capture_start(u32::MAX - 1, None);",
          "    assert!(result_negative_index.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(0, Some(\"valid_name\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert!(state_id == StateID::ZERO);",
          "    ",
          "    let result_none = compiler.add_capture_start(0, None);",
          "    assert!(result_none.is_ok());",
          "    let state_id_none = result_none.unwrap();",
          "    assert!(state_id_none == StateID::ZERO);",
          "    ",
          "    let result_invalid = compiler.add_capture_start(1, Some(\"another_name\"));",
          "    assert!(result_invalid.is_err());",
          "    if let Err(error) = result_invalid {",
          "    assert!(matches!(error.kind, BuildErrorKind::InvalidCaptureIndex));",
          "    }"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(0, Some(\"valid_name\"));",
          "    assert!(result.is_ok());",
          "    let state_id = result.unwrap();",
          "    assert!(state_id == StateID::ZERO);",
          "    ",
          "    let result_none = compiler.add_capture_start(0, None);",
          "    assert!(result_none.is_ok());",
          "    let state_id_none = result_none.unwrap();",
          "    assert!(state_id_none == StateID::ZERO);",
          "    ",
          "    let result_invalid = compiler.add_capture_start(1, Some(\"another_name\"));",
          "    assert!(result_invalid.is_err());",
          "    if let Err(error) = result_invalid {",
          "    assert!(matches!(error.kind, BuildErrorKind::InvalidCaptureIndex));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(4294967295, None);",
          "}"
        ],
        "oracle": [
          "    let expected_result = Err(BuildError::invalid_capture_index(4294967295));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(4294967295, None);",
          "    let expected_result = Err(BuildError::invalid_capture_index(4294967295));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(4294967295, Some(\"another_name\"));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::InvalidCaptureIndex);"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(builder),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![] }),",
          "    };",
          "    let result = compiler.add_capture_start(4294967295, Some(\"another_name\"));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, BuildErrorKind::InvalidCaptureIndex);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]