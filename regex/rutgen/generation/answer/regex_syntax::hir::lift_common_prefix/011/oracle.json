[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"foo\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"bar\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"foo\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"baz\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    ",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"bar\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    }, Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"baz\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    }];",
          "    assert!(hirs.len() > 1);",
          "    assert_matches!(hirs[0].kind(), HirKind::Concat(ref xs));",
          "    assert_matches!(hirs[1].kind(), HirKind::Concat(ref xs));",
          "    assert!(!prefix.is_empty());",
          "    assert!(hirs.iter().skip(1).count() == 1);",
          "    assert_eq!(*left_val, *right_val);"
        ],
        "code": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"foo\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"bar\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"foo\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"baz\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    ",
          "    let _ = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"bar\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    }, Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"baz\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    }];",
          "    assert!(hirs.len() > 1);",
          "    assert_matches!(hirs[0].kind(), HirKind::Concat(ref xs));",
          "    assert_matches!(hirs[1].kind(), HirKind::Concat(ref xs));",
          "    assert!(!prefix.is_empty());",
          "    assert!(hirs.iter().skip(1).count() == 1);",
          "    assert_eq!(*left_val, *right_val);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"world\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "                    props: Properties::default(),",
          "                }",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    ",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"world\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "    props: Properties::default(),",
          "    }",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    ",
          "    assert_eq!(lift_common_prefix(hirs).is_ok(), true);",
          "    assert_eq!(lift_common_prefix(hirs).unwrap().kind(), &HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Alternation(vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"world\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ]));",
          "    assert_ne!(lift_common_prefix(hirs).unwrap().kind().len(), 0);"
        ],
        "code": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"world\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "                    props: Properties::default(),",
          "                }",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    ",
          "    let _ = lift_common_prefix(hirs);",
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"world\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "    props: Properties::default(),",
          "    }",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    ",
          "    assert_eq!(lift_common_prefix(hirs).is_ok(), true);",
          "    assert_eq!(lift_common_prefix(hirs).unwrap().kind(), &HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"hello\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Alternation(vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::new(\"world\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ]));",
          "    assert_ne!(lift_common_prefix(hirs).unwrap().kind().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]