[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs: Vec<Hir> = vec![];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs: Vec<Hir> = vec![];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal::new(\"foo\")), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class::new(vec!['a', 'b'])), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Look(Look::new()), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Repetition(Repetition::new()), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Capture(Capture::new()), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Empty, props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Alternation(vec![Hir::new_concat(vec![])]), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Concat(vec![]), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Concat(vec![Hir::new_literal(\"foo\")]), props: Properties::new() },",
          "    Hir { kind: HirKind::Concat(vec![Hir::new_literal(\"bar\")]), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));"
        ],
        "code": [
          "{",
          "    let hirs: Vec<Hir> = vec![];",
          "    let _ = lift_common_prefix(hirs);",
          "    let hirs: Vec<Hir> = vec![];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Literal(Literal::new(\"foo\")), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Class(Class::new(vec!['a', 'b'])), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Look(Look::new()), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Repetition(Repetition::new()), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Capture(Capture::new()), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Empty, props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Alternation(vec![Hir::new_concat(vec![])]), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Concat(vec![]), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "    ",
          "    let hirs: Vec<Hir> = vec![Hir { kind: HirKind::Concat(vec![Hir::new_literal(\"foo\")]), props: Properties::new() },",
          "    Hir { kind: HirKind::Concat(vec![Hir::new_literal(\"bar\")]), props: Properties::new() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![Hir { kind: HirKind::Empty, props: Properties {} }];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Empty, props: Properties {} }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));"
        ],
        "code": [
          "{",
          "    let hirs = vec![Hir { kind: HirKind::Empty, props: Properties {} }];",
          "    let _ = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Empty, props: Properties {} }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties {} }];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties {} }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));"
        ],
        "code": [
          "{",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties {} }];",
          "    let _ = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal::from(\"a\")), props: Properties {} }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let h1 = Hir { kind: HirKind::Concat(vec![]), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let h1 = Hir { kind: HirKind::Concat(vec![]), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Literal(Literal::from(\"foo\")), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    ",
          "    let h1 = Hir { kind: HirKind::Class(Class::new(vec![])), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    ",
          "    let h1 = Hir { kind: HirKind::Empty, props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    ",
          "    let h1 = Hir { kind: HirKind::Look(Look::new()), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    ",
          "    let h1 = Hir { kind: HirKind::Capture(Capture::new()), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));"
        ],
        "code": [
          "{",
          "    let h1 = Hir { kind: HirKind::Concat(vec![]), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    let _ = lift_common_prefix(hirs);",
          "    let h1 = Hir { kind: HirKind::Concat(vec![]), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Literal(Literal::from(\"foo\")), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    ",
          "    let h1 = Hir { kind: HirKind::Class(Class::new(vec![])), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    ",
          "    let h1 = Hir { kind: HirKind::Empty, props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    ",
          "    let h1 = Hir { kind: HirKind::Look(Look::new()), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    ",
          "    let h1 = Hir { kind: HirKind::Capture(Capture::new()), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![h1.clone()]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let h1 = Hir { kind: HirKind::Literal(Literal::from(\"abc\")), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"xyz\")), props: Properties {} }]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let h1 = Hir { kind: HirKind::Literal(Literal::from(\"abc\")), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"xyz\")), props: Properties {} }]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));"
        ],
        "code": [
          "{",
          "    let h1 = Hir { kind: HirKind::Literal(Literal::from(\"abc\")), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"xyz\")), props: Properties {} }]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    let _ = lift_common_prefix(hirs);",
          "    let h1 = Hir { kind: HirKind::Literal(Literal::from(\"abc\")), props: Properties {} };",
          "    let h2 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"xyz\")), props: Properties {} }]), props: Properties {} };",
          "    let hirs = vec![h1, h2];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]