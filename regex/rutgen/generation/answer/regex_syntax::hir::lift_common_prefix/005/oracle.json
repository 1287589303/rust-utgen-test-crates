[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"def\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"xyz\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::from(\"def\")), props: Properties::default(), },]), props: Properties::default(), }, Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::from(\"xyz\")), props: Properties::default(), },]), props: Properties::default(), },];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().len(), 2);"
        ],
        "code": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"def\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"xyz\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _ = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::from(\"def\")), props: Properties::default(), },]), props: Properties::default(), }, Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::from(\"xyz\")), props: Properties::default(), },]), props: Properties::default(), },];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"hello\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"world\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"hello\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"rust\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foofoo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"bar\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foofoobar\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"baz\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());",
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());",
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"bar\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"baz\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"hello\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"world\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"hello\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"rust\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _ = lift_common_prefix(hirs);",
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foofoo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"bar\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foofoobar\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"baz\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());",
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());",
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"bar\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"baz\")),",
          "    props: Properties::default(),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"123\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"456\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"123\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"789\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    assert!(hirs.len() > 1);",
          "    assert!(matches!(hirs[0].kind(), HirKind::Concat(_)));",
          "    assert!(matches!(hirs[1].kind(), HirKind::Concat(_)));",
          "    assert!(!prefix.is_empty());",
          "    assert!(hirs.iter().skip(1).next().is_some());",
          "    assert!(matches!(hirs[1].kind(), HirKind::Concat(_)));",
          "    assert!(prefix.is_empty());"
        ],
        "code": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"123\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"456\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"123\")),",
          "                    props: Properties::default(),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"789\")),",
          "                    props: Properties::default(),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _ = lift_common_prefix(hirs);",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "    assert!(hirs.len() > 1);",
          "    assert!(matches!(hirs[0].kind(), HirKind::Concat(_)));",
          "    assert!(matches!(hirs[1].kind(), HirKind::Concat(_)));",
          "    assert!(!prefix.is_empty());",
          "    assert!(hirs.iter().skip(1).next().is_some());",
          "    assert!(matches!(hirs[1].kind(), HirKind::Concat(_)));",
          "    assert!(prefix.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]