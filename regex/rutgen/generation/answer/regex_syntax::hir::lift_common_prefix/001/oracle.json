[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Literal(Literal::new(\"test\".to_string())),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal::new(\"test\".to_string())), props: Properties::default() }];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));"
        ],
        "code": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Literal(Literal::new(\"test\".to_string())),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Literal(Literal::new(\"test\".to_string())), props: Properties::default() }];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Class(Class::new(vec!['a', 'b', 'c'])),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(hirs));"
        ],
        "code": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Class(Class::new(vec!['a', 'b', 'c'])),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Look(Look::new()),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Look(Look::new()), props: Properties::default() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));"
        ],
        "code": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Look(Look::new()),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Look(Look::new()), props: Properties::default() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Repetition(Repetition::new()),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Repetition(Repetition::new()), props: Properties::default() }];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));"
        ],
        "code": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Repetition(Repetition::new()),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Repetition(Repetition::new()), props: Properties::default() }];",
          "    assert_eq!(lift_common_prefix(hirs), Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Capture(Capture::new()),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Capture(Capture::new()), props: Properties::default() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));"
        ],
        "code": [
          "{",
          "    let hirs = vec![Hir {",
          "        kind: HirKind::Capture(Capture::new()),",
          "        props: Properties::default(),",
          "    }];",
          "    let result = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Capture(Capture::new()), props: Properties::default() }];",
          "    let result = lift_common_prefix(hirs);",
          "    assert_eq!(result, Err(hirs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]