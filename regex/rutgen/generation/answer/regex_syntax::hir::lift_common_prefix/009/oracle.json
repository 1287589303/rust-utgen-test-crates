[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir_1 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"foo\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"bar\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir_2 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"foo\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"baz\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hirs = vec![hir_1, hir_2];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lift_common_prefix(vec![]), Err(vec![]));",
          "    assert_eq!(lift_common_prefix(vec![hir_1.clone()]), Err(vec![hir_1.clone()]));",
          "    let hir_empty = Hir { kind: HirKind::Concat(vec![]), props: Properties::default() };",
          "    assert_eq!(lift_common_prefix(vec![hir_empty.clone()]), Err(vec![hir_empty.clone()]));",
          "    assert!(lift_common_prefix(vec![hir_1.clone(), hir_2.clone()]).is_ok());",
          "    assert!(lift_common_prefix(vec![hir_1.clone(), hir_1.clone()]).is_ok());",
          "    assert!(lift_common_prefix(vec![",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"a\")), props: Properties::default() }]), props: Properties::default() },",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"b\")), props: Properties::default() }]), props: Properties::default() },",
          "    ]).is_err());",
          "    assert!(matches!(lift_common_prefix(vec![hir_1.clone(), hir_2.clone()]), Ok(ref res) if res.kind() == &HirKind::Concat(_)));",
          "    let result = lift_common_prefix(vec![hir_1.clone(), hir_2.clone()]).unwrap();",
          "    assert_eq!(result.kind(), &HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"foo\")), props: Properties::default() }]));"
        ],
        "code": [
          "{",
          "    let hir_1 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"foo\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"bar\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir_2 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"foo\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"baz\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hirs = vec![hir_1, hir_2];",
          "    let _ = lift_common_prefix(hirs);",
          "    assert_eq!(lift_common_prefix(vec![]), Err(vec![]));",
          "    assert_eq!(lift_common_prefix(vec![hir_1.clone()]), Err(vec![hir_1.clone()]));",
          "    let hir_empty = Hir { kind: HirKind::Concat(vec![]), props: Properties::default() };",
          "    assert_eq!(lift_common_prefix(vec![hir_empty.clone()]), Err(vec![hir_empty.clone()]));",
          "    assert!(lift_common_prefix(vec![hir_1.clone(), hir_2.clone()]).is_ok());",
          "    assert!(lift_common_prefix(vec![hir_1.clone(), hir_1.clone()]).is_ok());",
          "    assert!(lift_common_prefix(vec![",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"a\")), props: Properties::default() }]), props: Properties::default() },",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"b\")), props: Properties::default() }]), props: Properties::default() },",
          "    ]).is_err());",
          "    assert!(matches!(lift_common_prefix(vec![hir_1.clone(), hir_2.clone()]), Ok(ref res) if res.kind() == &HirKind::Concat(_)));",
          "    let result = lift_common_prefix(vec![hir_1.clone(), hir_2.clone()]).unwrap();",
          "    assert_eq!(result.kind(), &HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"foo\")), props: Properties::default() }]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir_1 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"abc\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"def\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir_2 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"abc\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"xyz\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir_3 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"abc\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"ghijkl\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hirs = vec![hir_1, hir_2, hir_3];",
          "    let _ = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hir_1 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::new(\"def\")), props: Properties::default(), }, ]), props: Properties::default(), };",
          "    let hir_2 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::new(\"xyz\")), props: Properties::default(), }, ]), props: Properties::default(), };",
          "    let hir_3 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::new(\"ghijkl\")), props: Properties::default(), }, ]), props: Properties::default(), };",
          "    let hirs = vec![hir_1, hir_2, hir_3];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_ok());",
          "    if let Ok(hir) = result { assert_eq!(hir.kind(), &HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Alternation(vec![",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"def\")), props: Properties::default(), },]), props: Properties::default(), },",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"xyz\")), props: Properties::default(), },]), props: Properties::default(), },",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"ghijkl\")), props: Properties::default(), },]), props: Properties::default(), },",
          "    ]), props: Properties::default(), }]), props: Properties::default(), }); }"
        ],
        "code": [
          "{",
          "    let hir_1 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"abc\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"def\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir_2 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"abc\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"xyz\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hir_3 = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"abc\")),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"ghijkl\")),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hirs = vec![hir_1, hir_2, hir_3];",
          "    let _ = lift_common_prefix(hirs);",
          "    let hir_1 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::new(\"def\")), props: Properties::default(), }, ]), props: Properties::default(), };",
          "    let hir_2 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::new(\"xyz\")), props: Properties::default(), }, ]), props: Properties::default(), };",
          "    let hir_3 = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::new(\"ghijkl\")), props: Properties::default(), }, ]), props: Properties::default(), };",
          "    let hirs = vec![hir_1, hir_2, hir_3];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_ok());",
          "    if let Ok(hir) = result { assert_eq!(hir.kind(), &HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default(), }, Hir { kind: HirKind::Alternation(vec![",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"def\")), props: Properties::default(), },]), props: Properties::default(), },",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"xyz\")), props: Properties::default(), },]), props: Properties::default(), },",
          "    Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"ghijkl\")), props: Properties::default(), },]), props: Properties::default(), },",
          "    ]), props: Properties::default(), }]), props: Properties::default(), }); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]