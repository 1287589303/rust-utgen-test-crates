[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let first_hir = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"foo\".to_string())),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"bar\".to_string())),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let second_hir = Hir {",
          "        kind: HirKind::Look(Look { /* fields */ }),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hirs = vec![first_hir, second_hir];",
          "",
          "    let _result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let first_hir = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"foo\".to_string())), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::new(\"bar\".to_string())), props: Properties::default(), },]), props: Properties::default(), };",
          "    let second_hir = Hir { kind: HirKind::Look(Look { /* fields */ }), props: Properties::default(), };",
          "    let hirs = vec![first_hir, second_hir];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let first_hir = Hir {",
          "        kind: HirKind::Concat(vec![",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"foo\".to_string())),",
          "                props: Properties::default(),",
          "            },",
          "            Hir {",
          "                kind: HirKind::Literal(Literal::new(\"bar\".to_string())),",
          "                props: Properties::default(),",
          "            },",
          "        ]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let second_hir = Hir {",
          "        kind: HirKind::Look(Look { /* fields */ }),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let hirs = vec![first_hir, second_hir];",
          "",
          "    let _result = lift_common_prefix(hirs);",
          "    let first_hir = Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::new(\"foo\".to_string())), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::new(\"bar\".to_string())), props: Properties::default(), },]), props: Properties::default(), };",
          "    let second_hir = Hir { kind: HirKind::Look(Look { /* fields */ }), props: Properties::default(), };",
          "    let hirs = vec![first_hir, second_hir];",
          "    let result = lift_common_prefix(hirs);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]