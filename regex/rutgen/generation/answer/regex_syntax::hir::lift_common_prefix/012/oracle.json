[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"bar\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"baz\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), }, Hir { kind: HirKind::Literal(Literal::from(\"bar\")), },]), props: Properties::default(), }, Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), }, Hir { kind: HirKind::Literal(Literal::from(\"baz\")), },]), props: Properties::default(), },];",
          "    assert!(lift_common_prefix(hirs).is_ok());",
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), }, Hir { kind: HirKind::Literal(Literal::from(\"baz\")), },]), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::from(\"foobar\")), props: Properties::default(), },];",
          "    assert!(lift_common_prefix(hirs).is_err());",
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), },]), props: Properties::default(), },];",
          "    assert!(lift_common_prefix(hirs).is_err());",
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![]), props: Properties::default(), }, Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), },]), props: Properties::default(), },];",
          "    assert!(lift_common_prefix(hirs).is_err());"
        ],
        "code": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"bar\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"foo\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"baz\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _result = lift_common_prefix(hirs);",
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), }, Hir { kind: HirKind::Literal(Literal::from(\"bar\")), },]), props: Properties::default(), }, Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), }, Hir { kind: HirKind::Literal(Literal::from(\"baz\")), },]), props: Properties::default(), },];",
          "    assert!(lift_common_prefix(hirs).is_ok());",
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), }, Hir { kind: HirKind::Literal(Literal::from(\"baz\")), },]), props: Properties::default(), }, Hir { kind: HirKind::Literal(Literal::from(\"foobar\")), props: Properties::default(), },];",
          "    assert!(lift_common_prefix(hirs).is_err());",
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), },]), props: Properties::default(), },];",
          "    assert!(lift_common_prefix(hirs).is_err());",
          "    let hirs = vec![Hir { kind: HirKind::Concat(vec![]), props: Properties::default(), }, Hir { kind: HirKind::Concat(vec![Hir { kind: HirKind::Literal(Literal::from(\"foo\")), },]), props: Properties::default(), },];",
          "    assert!(lift_common_prefix(hirs).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"def\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"xyz\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    assert!(lift_common_prefix(vec![]).is_err());",
          "    assert!(lift_common_prefix(vec![Hir::default()]).is_err());",
          "    let input_hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"def\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"xyz\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    let result = lift_common_prefix(input_hirs).unwrap();",
          "    assert!(matches!(result.kind(), HirKind::Concat(_)));",
          "    assert_eq!(result.properties(), &Properties::default());"
        ],
        "code": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"def\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"xyz\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _result = lift_common_prefix(hirs);",
          "    assert!(lift_common_prefix(vec![]).is_err());",
          "    assert!(lift_common_prefix(vec![Hir::default()]).is_err());",
          "    let input_hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"def\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"abc\")),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"xyz\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    let result = lift_common_prefix(input_hirs).unwrap();",
          "    assert!(matches!(result.kind(), HirKind::Concat(_)));",
          "    assert_eq!(result.properties(), &Properties::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"test\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"suite\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"test\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"cases\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _result = lift_common_prefix(hirs);",
          "}"
        ],
        "oracle": [
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"test\")),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"suite\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"test\")),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"cases\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    assert!(lift_common_prefix(hirs).is_ok());",
          "    let hirs_empty = vec![Hir::empty()];",
          "    assert_eq!(lift_common_prefix(hirs_empty), Err(hirs_empty));",
          "    let hirs_single = vec![Hir {",
          "    kind: HirKind::Literal(Literal::from(\"single\")),",
          "    props: Properties::default(),",
          "    }];",
          "    assert_eq!(lift_common_prefix(hirs_single), Err(hirs_single));",
          "    let hirs_empty_prefix = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    assert_eq!(lift_common_prefix(hirs_empty_prefix), Err(hirs_empty_prefix));"
        ],
        "code": [
          "{",
          "    let hirs = vec![",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"test\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"suite\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Concat(vec![",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"test\")),",
          "                },",
          "                Hir {",
          "                    kind: HirKind::Literal(Literal::from(\"cases\")),",
          "                },",
          "            ]),",
          "            props: Properties::default(),",
          "        },",
          "    ];",
          "    let _result = lift_common_prefix(hirs);",
          "    let hirs = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"test\")),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"suite\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"test\")),",
          "    },",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"cases\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    assert!(lift_common_prefix(hirs).is_ok());",
          "    let hirs_empty = vec![Hir::empty()];",
          "    assert_eq!(lift_common_prefix(hirs_empty), Err(hirs_empty));",
          "    let hirs_single = vec![Hir {",
          "    kind: HirKind::Literal(Literal::from(\"single\")),",
          "    props: Properties::default(),",
          "    }];",
          "    assert_eq!(lift_common_prefix(hirs_single), Err(hirs_single));",
          "    let hirs_empty_prefix = vec![",
          "    Hir {",
          "    kind: HirKind::Concat(vec![",
          "    Hir {",
          "    kind: HirKind::Literal(Literal::from(\"\")),",
          "    },",
          "    ]),",
          "    props: Properties::default(),",
          "    },",
          "    ];",
          "    assert_eq!(lift_common_prefix(hirs_empty_prefix), Err(hirs_empty_prefix));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]