[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { reverse: Some(false), ..Default::default() },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let exprs = vec![",
          "        hir::Hir::literal(hir::Literal::new(b\"test1\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"test2\")),",
          "    ];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "}"
        ],
        "oracle": [
          "    assert!(compiler.c_alt_slice(&exprs).is_ok());",
          "    let literal_count = exprs.iter().filter(|e| matches!(*e.kind(), hir::HirKind::Literal(hir::Literal(_)))).count();",
          "    assert!(literal_count > 1);",
          "    assert!(literal_count == exprs.len());",
          "    assert!(!compiler.is_reverse());",
          "    for expr in &exprs {",
          "    assert!(matches!(*expr.kind(), hir::HirKind::Literal(hir::Literal(_))));",
          "    }",
          "    for expr in &exprs {",
          "    let literal = match *expr.kind() {",
          "    hir::HirKind::Literal(hir::Literal(ref bytes)) => bytes,",
          "    _ => panic!(\"Unexpected HirKind\"),",
          "    };",
          "    assert!(trie.add(literal).is_ok());",
          "    }",
          "    assert!(trie.compile(&mut compiler.builder.borrow_mut()).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { reverse: Some(false), ..Default::default() },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let exprs = vec![",
          "        hir::Hir::literal(hir::Literal::new(b\"test1\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"test2\")),",
          "    ];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "    assert!(compiler.c_alt_slice(&exprs).is_ok());",
          "    let literal_count = exprs.iter().filter(|e| matches!(*e.kind(), hir::HirKind::Literal(hir::Literal(_)))).count();",
          "    assert!(literal_count > 1);",
          "    assert!(literal_count == exprs.len());",
          "    assert!(!compiler.is_reverse());",
          "    for expr in &exprs {",
          "    assert!(matches!(*expr.kind(), hir::HirKind::Literal(hir::Literal(_))));",
          "    }",
          "    for expr in &exprs {",
          "    let literal = match *expr.kind() {",
          "    hir::HirKind::Literal(hir::Literal(ref bytes)) => bytes,",
          "    _ => panic!(\"Unexpected HirKind\"),",
          "    };",
          "    assert!(trie.add(literal).is_ok());",
          "    }",
          "    assert!(trie.compile(&mut compiler.builder.borrow_mut()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { reverse: Some(false), ..Default::default() },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let exprs = vec![",
          "        hir::Hir::literal(hir::Literal::new(b\"same\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"same\")),",
          "    ];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: Some(false), ..Default::default() }, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    ",
          "    let exprs = vec![hir::Hir::literal(hir::Literal::new(b\"same\")), hir::Hir::literal(hir::Literal::new(b\"same\"))];",
          "    ",
          "    assert!(compiler.c_alt_slice(&exprs).is_ok());",
          "    ",
          "    let literal_count = exprs.iter().filter(|e| matches!(*e.kind(), hir::HirKind::Literal(hir::Literal(_)))).count();",
          "    assert!(literal_count > 1);",
          "    assert_eq!(literal_count, exprs.len());",
          "    ",
          "    assert!(!compiler.is_reverse());",
          "    ",
          "    for expr in exprs.iter() {",
          "    assert!(matches!(*expr.kind(), hir::HirKind::Literal(hir::Literal(ref bytes))));",
          "    }",
          "    ",
          "    for expr in exprs.iter() {",
          "    let literal = match *expr.kind() {",
          "    hir::HirKind::Literal(hir::Literal(ref bytes)) => bytes,",
          "    _ => unreachable!(),",
          "    };",
          "    assert!(trie.add(literal).is_ok());",
          "    }"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { reverse: Some(false), ..Default::default() },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let exprs = vec![",
          "        hir::Hir::literal(hir::Literal::new(b\"same\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"same\")),",
          "    ];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: Some(false), ..Default::default() }, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()) };",
          "    ",
          "    let exprs = vec![hir::Hir::literal(hir::Literal::new(b\"same\")), hir::Hir::literal(hir::Literal::new(b\"same\"))];",
          "    ",
          "    assert!(compiler.c_alt_slice(&exprs).is_ok());",
          "    ",
          "    let literal_count = exprs.iter().filter(|e| matches!(*e.kind(), hir::HirKind::Literal(hir::Literal(_)))).count();",
          "    assert!(literal_count > 1);",
          "    assert_eq!(literal_count, exprs.len());",
          "    ",
          "    assert!(!compiler.is_reverse());",
          "    ",
          "    for expr in exprs.iter() {",
          "    assert!(matches!(*expr.kind(), hir::HirKind::Literal(hir::Literal(ref bytes))));",
          "    }",
          "    ",
          "    for expr in exprs.iter() {",
          "    let literal = match *expr.kind() {",
          "    hir::HirKind::Literal(hir::Literal(ref bytes)) => bytes,",
          "    _ => unreachable!(),",
          "    };",
          "    assert!(trie.add(literal).is_ok());",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { reverse: Some(false), ..Default::default() },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let exprs = vec![",
          "        hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"literal2\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"literal3\")),",
          "    ];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "}"
        ],
        "oracle": [
          "    let exprs = vec![",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    ];",
          "    ",
          "    let exprs = vec![",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    ];",
          "    ",
          "    let exprs = vec![",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal2\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal2\")),",
          "    ];",
          "    ",
          "    let exprs = vec![",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal2\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal3\")),",
          "    ];",
          "    ",
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::new(),",
          "    config: Config { reverse: Some(true), ..Default::default() },",
          "    builder: RefCell::new(Builder::default()),",
          "    utf8_state: RefCell::new(Utf8State::default()),",
          "    trie_state: RefCell::new(RangeTrie::default()),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    ",
          "    let _ = compiler.c_alt_slice(&exprs);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { reverse: Some(false), ..Default::default() },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let exprs = vec![",
          "        hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"literal2\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"literal3\")),",
          "    ];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "    let exprs = vec![",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    ];",
          "    ",
          "    let exprs = vec![",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    ];",
          "    ",
          "    let exprs = vec![",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal2\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal2\")),",
          "    ];",
          "    ",
          "    let exprs = vec![",
          "    hir::Hir::literal(hir::Literal::new(b\"literal1\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal2\")),",
          "    hir::Hir::literal(hir::Literal::new(b\"literal3\")),",
          "    ];",
          "    ",
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::new(),",
          "    config: Config { reverse: Some(true), ..Default::default() },",
          "    builder: RefCell::new(Builder::default()),",
          "    utf8_state: RefCell::new(Utf8State::default()),",
          "    trie_state: RefCell::new(RangeTrie::default()),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "    ",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { reverse: Some(false), ..Default::default() },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let exprs = vec![",
          "        hir::Hir::literal(hir::Literal::new(b\"first\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"second\")),",
          "    ];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: Some(false), ..Default::default() }, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let exprs = vec![hir::Hir::literal(hir::Literal::new(b\"first\")), hir::Hir::literal(hir::Literal::new(b\"second\")), ];",
          "    let literal_count = exprs.iter().filter(|e| matches!(*e.kind(), hir::HirKind::Literal(hir::Literal(_)))).count();",
          "    assert!(literal_count > 1);",
          "    assert!(literal_count == exprs.len());",
          "    assert_eq!(compiler.is_reverse(), false);",
          "    for expr in exprs.iter() { assert!(matches!(*expr.kind(), hir::HirKind::Literal(hir::Literal(ref bytes))) ); }",
          "    let literal = match *expr.kind() { hir::HirKind::Literal(hir::Literal(ref bytes)) => bytes, _ => unreachable!(), };",
          "    assert!(trie.add(literal).is_ok());",
          "    for expr in exprs.iter() { assert!(!matches!(*expr.kind(), hir::HirKind::Literal(hir::Literal(ref bytes))) ); }"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config { reverse: Some(false), ..Default::default() },",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State::default()),",
          "        trie_state: RefCell::new(RangeTrie::default()),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap::default()),",
          "    };",
          "",
          "    let exprs = vec![",
          "        hir::Hir::literal(hir::Literal::new(b\"first\")),",
          "        hir::Hir::literal(hir::Literal::new(b\"second\")),",
          "    ];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config { reverse: Some(false), ..Default::default() }, builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State::default()), trie_state: RefCell::new(RangeTrie::default()), utf8_suffix: RefCell::new(Utf8SuffixMap::default()), };",
          "    let exprs = vec![hir::Hir::literal(hir::Literal::new(b\"first\")), hir::Hir::literal(hir::Literal::new(b\"second\")), ];",
          "    let literal_count = exprs.iter().filter(|e| matches!(*e.kind(), hir::HirKind::Literal(hir::Literal(_)))).count();",
          "    assert!(literal_count > 1);",
          "    assert!(literal_count == exprs.len());",
          "    assert_eq!(compiler.is_reverse(), false);",
          "    for expr in exprs.iter() { assert!(matches!(*expr.kind(), hir::HirKind::Literal(hir::Literal(ref bytes))) ); }",
          "    let literal = match *expr.kind() { hir::HirKind::Literal(hir::Literal(ref bytes)) => bytes, _ => unreachable!(), };",
          "    assert!(trie.add(literal).is_ok());",
          "    for expr in exprs.iter() { assert!(!matches!(*expr.kind(), hir::HirKind::Literal(hir::Literal(ref bytes))) ); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]