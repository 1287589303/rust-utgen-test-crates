[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie {",
          "            states: vec![],",
          "            free: vec![],",
          "            iter_stack: RefCell::new(vec![]),",
          "            iter_ranges: RefCell::new(vec![]),",
          "            dupe_stack: vec![],",
          "            insert_stack: vec![],",
          "        }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "    ",
          "    let literal_hir = hir::Hir::literal(hir::Literal(vec![b'a']));",
          "    let exprs = vec![literal_hir];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::new(),",
          "    config: Config::default(),",
          "    builder: RefCell::new(Builder::default()),",
          "    utf8_state: RefCell::new(Utf8State {",
          "    compiled: Utf8BoundedMap::default(),",
          "    uncompiled: vec![],",
          "    }),",
          "    trie_state: RefCell::new(RangeTrie {",
          "    states: vec![],",
          "    free: vec![],",
          "    iter_stack: RefCell::new(vec![]),",
          "    iter_ranges: RefCell::new(vec![]),",
          "    dupe_stack: vec![],",
          "    insert_stack: vec![],",
          "    }),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "    version: 0,",
          "    capacity: 0,",
          "    map: vec![],",
          "    }),",
          "    };",
          "    ",
          "    let literal_hir = hir::Hir::literal(hir::Literal(vec![b'a']));",
          "    let exprs = vec![literal_hir];",
          "    ",
          "    let result = compiler.c_alt_slice(&exprs);",
          "    assert!(result.is_ok());",
          "    ",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_id);",
          "    assert_eq!(thompson_ref.end, expected_end_id);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie {",
          "            states: vec![],",
          "            free: vec![],",
          "            iter_stack: RefCell::new(vec![]),",
          "            iter_ranges: RefCell::new(vec![]),",
          "            dupe_stack: vec![],",
          "            insert_stack: vec![],",
          "        }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "    ",
          "    let literal_hir = hir::Hir::literal(hir::Literal(vec![b'a']));",
          "    let exprs = vec![literal_hir];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "    let compiler = Compiler {",
          "    parser: ParserBuilder::new(),",
          "    config: Config::default(),",
          "    builder: RefCell::new(Builder::default()),",
          "    utf8_state: RefCell::new(Utf8State {",
          "    compiled: Utf8BoundedMap::default(),",
          "    uncompiled: vec![],",
          "    }),",
          "    trie_state: RefCell::new(RangeTrie {",
          "    states: vec![],",
          "    free: vec![],",
          "    iter_stack: RefCell::new(vec![]),",
          "    iter_ranges: RefCell::new(vec![]),",
          "    dupe_stack: vec![],",
          "    insert_stack: vec![],",
          "    }),",
          "    utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "    version: 0,",
          "    capacity: 0,",
          "    map: vec![],",
          "    }),",
          "    };",
          "    ",
          "    let literal_hir = hir::Hir::literal(hir::Literal(vec![b'a']));",
          "    let exprs = vec![literal_hir];",
          "    ",
          "    let result = compiler.c_alt_slice(&exprs);",
          "    assert!(result.is_ok());",
          "    ",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_start_id);",
          "    assert_eq!(thompson_ref.end, expected_end_id);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie {",
          "            states: vec![],",
          "            free: vec![],",
          "            iter_stack: RefCell::new(vec![]),",
          "            iter_ranges: RefCell::new(vec![]),",
          "            dupe_stack: vec![],",
          "            insert_stack: vec![],",
          "        }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "",
          "    let exprs: Vec<Hir> = vec![];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "}"
        ],
        "oracle": [
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State { compiled: Utf8BoundedMap::default(), uncompiled: vec![], }), trie_state: RefCell::new(RangeTrie { states: vec![], free: vec![], iter_stack: RefCell::new(vec![]), iter_ranges: RefCell::new(vec![]), dupe_stack: vec![], insert_stack: vec![], }), utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![], }), }; let exprs: Vec<Hir> = vec![Hir::literal(b'x')]; let result = compiler.c_alt_slice(&exprs); assert!(result.is_ok()); assert_eq!(result.unwrap().start, expected_start_id); assert_eq!(result.unwrap().end, expected_end_id);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder::default()),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: vec![],",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie {",
          "            states: vec![],",
          "            free: vec![],",
          "            iter_stack: RefCell::new(vec![]),",
          "            iter_ranges: RefCell::new(vec![]),",
          "            dupe_stack: vec![],",
          "            insert_stack: vec![],",
          "        }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: vec![],",
          "        }),",
          "    };",
          "",
          "    let exprs: Vec<Hir> = vec![];",
          "",
          "    let _ = compiler.c_alt_slice(&exprs);",
          "    let compiler = Compiler { parser: ParserBuilder::new(), config: Config::default(), builder: RefCell::new(Builder::default()), utf8_state: RefCell::new(Utf8State { compiled: Utf8BoundedMap::default(), uncompiled: vec![], }), trie_state: RefCell::new(RangeTrie { states: vec![], free: vec![], iter_stack: RefCell::new(vec![]), iter_ranges: RefCell::new(vec![]), dupe_stack: vec![], insert_stack: vec![], }), utf8_suffix: RefCell::new(Utf8SuffixMap { version: 0, capacity: 0, map: vec![], }), }; let exprs: Vec<Hir> = vec![Hir::literal(b'x')]; let result = compiler.c_alt_slice(&exprs); assert!(result.is_ok()); assert_eq!(result.unwrap().start, expected_start_id); assert_eq!(result.unwrap().end, expected_end_id);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]