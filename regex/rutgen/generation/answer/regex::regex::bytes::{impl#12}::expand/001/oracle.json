[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=$year, month=$month, day=$day\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, b\"year=2010, month=03, day=14\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"day=$day, month=$month, year=$year\", &mut dst);",
          "    assert_eq!(dst, b\"day=14, month=03, year=2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$$invalid$ref\", &mut dst);",
          "    assert_eq!(dst, b\"$invalid\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${wrong}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"Just a test: $$\", &mut dst);",
          "    assert_eq!(dst, b\"Just a test: $\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"Invalid reference $9\", &mut dst);",
          "    assert_eq!(dst, b\"Invalid reference \");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"Reference with suffix: $monthSuffix\", &mut dst);",
          "    assert_eq!(dst, b\"Reference with suffix: 03Suffix\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"Multiple references: ${day}_${month}_${year}\", &mut dst);",
          "    assert_eq!(dst, b\"Multiple references: 14_03_2010\");"
        ],
        "code": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=$year, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, b\"year=2010, month=03, day=14\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"day=$day, month=$month, year=$year\", &mut dst);",
          "    assert_eq!(dst, b\"day=14, month=03, year=2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$$invalid$ref\", &mut dst);",
          "    assert_eq!(dst, b\"$invalid\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${wrong}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"Just a test: $$\", &mut dst);",
          "    assert_eq!(dst, b\"Just a test: $\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"Invalid reference $9\", &mut dst);",
          "    assert_eq!(dst, b\"Invalid reference \");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"Reference with suffix: $monthSuffix\", &mut dst);",
          "    assert_eq!(dst, b\"Reference with suffix: 03Suffix\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"Multiple references: ${day}_${month}_${year}\", &mut dst);",
          "    assert_eq!(dst, b\"Multiple references: 14_03_2010\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=${year}, month=${month}, day=${day}\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, b\"year=2010, month=03, day=14\");",
          "    ",
          "    let mut dst_empty = Vec::new();",
          "    caps.expand(b\"no_capture_reference\", &mut dst_empty);",
          "    assert_eq!(dst_empty, b\"\");",
          "    ",
          "    let mut dst_with_literal = Vec::new();",
          "    caps.expand(b\"$$year=${year}\", &mut dst_with_literal);",
          "    assert_eq!(dst_with_literal, b\"$year=2010\");",
          "    ",
          "    let mut dst_invalid_ref = Vec::new();",
          "    caps.expand(b\"invalid=${unknown}\", &mut dst_invalid_ref);",
          "    assert_eq!(dst_invalid_ref, b\"invalid=\");"
        ],
        "code": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=${year}, month=${month}, day=${day}\", &mut dst);",
          "    assert_eq!(dst, b\"year=2010, month=03, day=14\");",
          "    ",
          "    let mut dst_empty = Vec::new();",
          "    caps.expand(b\"no_capture_reference\", &mut dst_empty);",
          "    assert_eq!(dst_empty, b\"\");",
          "    ",
          "    let mut dst_with_literal = Vec::new();",
          "    caps.expand(b\"$$year=${year}\", &mut dst_with_literal);",
          "    assert_eq!(dst_with_literal, b\"$year=2010\");",
          "    ",
          "    let mut dst_invalid_ref = Vec::new();",
          "    caps.expand(b\"invalid=${unknown}\", &mut dst_invalid_ref);",
          "    assert_eq!(dst_invalid_ref, b\"invalid=\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=$99, month=$invalid, day=${invalid}\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, b\"year=, month=, day=\");",
          "    dst.clear();",
          "    caps.expand(b\"year=$year, month=$month, day=${day}\", &mut dst);",
          "    assert_eq!(dst, b\"year=, month=, day=14\");",
          "    dst.clear();",
          "    caps.expand(b\"$$year=$year\", &mut dst);",
          "    assert_eq!(dst, b\"$year=14\");",
          "    dst.clear();",
          "    caps.expand(b\"day=$1\", &mut dst);",
          "    assert_eq!(dst, b\"day=14\");",
          "    dst.clear();",
          "    caps.expand(b\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    dst.clear();",
          "    caps.expand(b\"$$$\", &mut dst);",
          "    assert_eq!(dst, b\"$$$\");",
          "    dst.clear();",
          "    caps.expand(b\"$1a\", &mut dst);",
          "    assert_eq!(dst, b\"a\");",
          "    dst.clear();",
          "    caps.expand(b\"${1}a\", &mut dst);",
          "    assert_eq!(dst, b\"14a\");"
        ],
        "code": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=$99, month=$invalid, day=${invalid}\", &mut dst);",
          "    assert_eq!(dst, b\"year=, month=, day=\");",
          "    dst.clear();",
          "    caps.expand(b\"year=$year, month=$month, day=${day}\", &mut dst);",
          "    assert_eq!(dst, b\"year=, month=, day=14\");",
          "    dst.clear();",
          "    caps.expand(b\"$$year=$year\", &mut dst);",
          "    assert_eq!(dst, b\"$year=14\");",
          "    dst.clear();",
          "    caps.expand(b\"day=$1\", &mut dst);",
          "    assert_eq!(dst, b\"day=14\");",
          "    dst.clear();",
          "    caps.expand(b\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    dst.clear();",
          "    caps.expand(b\"$$$\", &mut dst);",
          "    assert_eq!(dst, b\"$$$\");",
          "    dst.clear();",
          "    caps.expand(b\"$1a\", &mut dst);",
          "    assert_eq!(dst, b\"a\");",
          "    dst.clear();",
          "    caps.expand(b\"${1}a\", &mut dst);",
          "    assert_eq!(dst, b\"14a\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$0$1$2\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, b\"$0$1$2\");",
          "    caps.expand(b\"year=${year}, month=${month}, day=${day}\", &mut dst);",
          "    assert_eq!(dst, b\"year=, month=, day=\");",
          "    caps.expand(b\"day=$day today!\", &mut dst);",
          "    assert_eq!(dst, b\"day=14 today!\");",
          "    caps.expand(b\"$$\", &mut dst);",
          "    assert_eq!(dst, b\"$\");",
          "    caps.expand(b\"$1$2\", &mut dst);",
          "    assert_eq!(dst, b\"14-03\");",
          "    caps.expand(b\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, b\"\");"
        ],
        "code": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$0$1$2\", &mut dst);",
          "    assert_eq!(dst, b\"$0$1$2\");",
          "    caps.expand(b\"year=${year}, month=${month}, day=${day}\", &mut dst);",
          "    assert_eq!(dst, b\"year=, month=, day=\");",
          "    caps.expand(b\"day=$day today!\", &mut dst);",
          "    assert_eq!(dst, b\"day=14 today!\");",
          "    caps.expand(b\"$$\", &mut dst);",
          "    assert_eq!(dst, b\"$\");",
          "    caps.expand(b\"$1$2\", &mut dst);",
          "    assert_eq!(dst, b\"14-03\");",
          "    caps.expand(b\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$$\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, b\"$\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$nonexistent\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=$year\", &mut dst);",
          "    assert_eq!(dst, b\"year=2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"month=${month} is the month\", &mut dst);",
          "    assert_eq!(dst, b\"month=03 is the month\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"date is ${day}-${month}-${year}\", &mut dst);",
          "    assert_eq!(dst, b\"date is 14-03-2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$1\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$day$month$year\", &mut dst);",
          "    assert_eq!(dst, b\"20100314\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$$$day\", &mut dst);",
          "    assert_eq!(dst, b\"$2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, b\"\");"
        ],
        "code": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$$\", &mut dst);",
          "    assert_eq!(dst, b\"$\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$nonexistent\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=$year\", &mut dst);",
          "    assert_eq!(dst, b\"year=2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"month=${month} is the month\", &mut dst);",
          "    assert_eq!(dst, b\"month=03 is the month\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"date is ${day}-${month}-${year}\", &mut dst);",
          "    assert_eq!(dst, b\"date is 14-03-2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$1\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$day$month$year\", &mut dst);",
          "    assert_eq!(dst, b\"20100314\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$$$day\", &mut dst);",
          "    assert_eq!(dst, b\"$2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=$year, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, b\"year=2010, month=03, day=14\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${day}-${month}-${year}\", &mut dst);",
          "    assert_eq!(dst, b\"14-03-2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$1-$2-$3\", &mut dst);",
          "    assert_eq!(dst, b\"14-03-2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$$$\", &mut dst);",
          "    assert_eq!(dst, b\"$\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$foo\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${day}\", &mut dst);",
          "    assert_eq!(dst, b\"14\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$1a\", &mut dst);",
          "    assert_eq!(dst, b\"1a\");"
        ],
        "code": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"year=$year, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, b\"year=2010, month=03, day=14\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${day}-${month}-${year}\", &mut dst);",
          "    assert_eq!(dst, b\"14-03-2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$1-$2-$3\", &mut dst);",
          "    assert_eq!(dst, b\"14-03-2010\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$$$\", &mut dst);",
          "    assert_eq!(dst, b\"$\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$foo\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${foo[bar].baz}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"${day}\", &mut dst);",
          "    assert_eq!(dst, b\"14\");",
          "    ",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"$1a\", &mut dst);",
          "    assert_eq!(dst, b\"1a\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"x\", &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, b\"\");",
          "    caps.expand(b\"$$\", &mut dst);",
          "    assert_eq!(dst, b\"$\");",
          "    caps.expand(b\"day=$day\", &mut dst);",
          "    assert_eq!(dst, b\"day=\");",
          "    caps.expand(b\"year=$year, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, b\"year=, month=, day=\");",
          "    caps.expand(b\"${year}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    caps.expand(b\"${1}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    caps.expand(b\"${day} $$ ${month} $$ ${year}\", &mut dst);",
          "    assert_eq!(dst, b\"  \");"
        ],
        "code": [
          "{",
          "    let hay: &[u8] = b\"On 14-03-2010, I became a Tenneessee lamb.\";",
          "    let re = regex::bytes::Regex::new(",
          "        r\"(?<day>[0-9]{2})-(?<month>[0-9]{2})-(?<year>[0-9]{4})\",",
          "    ).unwrap();",
          "    let caps = re.captures(hay).unwrap();",
          "",
          "    let mut dst = Vec::new();",
          "    caps.expand(b\"x\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    caps.expand(b\"$$\", &mut dst);",
          "    assert_eq!(dst, b\"$\");",
          "    caps.expand(b\"day=$day\", &mut dst);",
          "    assert_eq!(dst, b\"day=\");",
          "    caps.expand(b\"year=$year, month=$month, day=$day\", &mut dst);",
          "    assert_eq!(dst, b\"year=, month=, day=\");",
          "    caps.expand(b\"${year}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    caps.expand(b\"${1}\", &mut dst);",
          "    assert_eq!(dst, b\"\");",
          "    caps.expand(b\"${day} $$ ${month} $$ ${year}\", &mut dst);",
          "    assert_eq!(dst, b\"  \");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]