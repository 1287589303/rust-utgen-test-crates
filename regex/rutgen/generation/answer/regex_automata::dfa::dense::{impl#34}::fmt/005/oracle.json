[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = StateID::LIMIT;",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit },",
          "    };",
          "    ",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let limit = StateID::LIMIT;",
          "    let error = BuildError { kind: BuildErrorKind::TooManyStates { limit }, };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let result = error.fmt(&mut buffer);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(buffer.contains(\"number of DFA states exceeds limit of\"));",
          "    assert!(buffer.contains(&limit.to_string()));"
        ],
        "code": [
          "{",
          "    let limit = StateID::LIMIT;",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit },",
          "    };",
          "    ",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    let limit = StateID::LIMIT;",
          "    let error = BuildError { kind: BuildErrorKind::TooManyStates { limit }, };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let result = error.fmt(&mut buffer);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(buffer.contains(\"number of DFA states exceeds limit of\"));",
          "    assert!(buffer.contains(&limit.to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = StateID::LIMIT - 1;",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit },",
          "    };",
          "    ",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"number of DFA states exceeds limit of {}\", StateID::LIMIT,)",
          "    write!(f, \"compiling DFA with start states exceeds pattern pattern limit of {}\", limit,)",
          "    write!(f, \"compiling DFA with total patterns in all match states exceeds limit of {}\", PatternID::LIMIT,)"
        ],
        "code": [
          "{",
          "    let limit = StateID::LIMIT - 1;",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit },",
          "    };",
          "    ",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    write!(f, \"number of DFA states exceeds limit of {}\", StateID::LIMIT,)",
          "    write!(f, \"compiling DFA with start states exceeds pattern pattern limit of {}\", limit,)",
          "    write!(f, \"compiling DFA with total patterns in all match states exceeds limit of {}\", PatternID::LIMIT,)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let limit = StateID::LIMIT + 1;",
          "    // Note: this should panic or give an invalid case, so we use #[should_panic].",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit },",
          "    };",
          "    ",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.kind(), &BuildErrorKind::TooManyStates { limit });",
          "    assert!(buffer.to_string().contains(\"number of DFA states exceeds limit of\"));",
          "    assert!(buffer.to_string().contains(&limit.to_string()));"
        ],
        "code": [
          "{",
          "    let limit = StateID::LIMIT + 1;",
          "    // Note: this should panic or give an invalid case, so we use #[should_panic].",
          "    let error = BuildError {",
          "        kind: BuildErrorKind::TooManyStates { limit },",
          "    };",
          "    ",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    assert_eq!(error.kind(), &BuildErrorKind::TooManyStates { limit });",
          "    assert!(buffer.to_string().contains(\"number of DFA states exceeds limit of\"));",
          "    assert!(buffer.to_string().contains(&limit.to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]