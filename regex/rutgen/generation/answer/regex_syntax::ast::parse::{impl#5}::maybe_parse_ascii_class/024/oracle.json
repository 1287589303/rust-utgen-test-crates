[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestParser {",
          "        parser: Parser,",
          "        pattern: &'static str,",
          "    }",
          "",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let start = pos;",
          "    let ascii_class = ClassAscii {",
          "        span: Span::new(start, pos),",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: true,",
          "    };",
          "    ",
          "    let test_parser = TestParser { ",
          "        parser: Parser {",
          "            pos: Cell::new(pos),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"[[:^alpha:]]\",",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &test_parser.parser,",
          "        pattern: test_parser.pattern,",
          "    };",
          "",
          "    let _result = parser_i.maybe_parse_ascii_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '[');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), ':');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), '^');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'a');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'l');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'p');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'h');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'a');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), ':');",
          "    assert_eq!(self.is_eof(), false);",
          "    assert_eq!(self.bump_if(\":]\"), true);",
          "    assert!(matches!(ast::ClassAsciiKind::from_name(\"alpha\"), Some(ClassAsciiKind::Alpha)));",
          "    assert_eq!(_result, Some(ast::ClassAscii {",
          "    span: Span::new(start, pos),",
          "    kind: ClassAsciiKind::Alpha,",
          "    negated: true,",
          "    }));"
        ],
        "code": [
          "{",
          "    struct TestParser {",
          "        parser: Parser,",
          "        pattern: &'static str,",
          "    }",
          "",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let start = pos;",
          "    let ascii_class = ClassAscii {",
          "        span: Span::new(start, pos),",
          "        kind: ClassAsciiKind::Alpha,",
          "        negated: true,",
          "    };",
          "    ",
          "    let test_parser = TestParser { ",
          "        parser: Parser {",
          "            pos: Cell::new(pos),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"[[:^alpha:]]\",",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &test_parser.parser,",
          "        pattern: test_parser.pattern,",
          "    };",
          "",
          "    let _result = parser_i.maybe_parse_ascii_class();",
          "    assert_eq!(self.char(), '[');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), ':');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), '^');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'a');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'l');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'p');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'h');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), 'a');",
          "    assert_eq!(self.bump(), true);",
          "    assert_eq!(self.char(), ':');",
          "    assert_eq!(self.is_eof(), false);",
          "    assert_eq!(self.bump_if(\":]\"), true);",
          "    assert!(matches!(ast::ClassAsciiKind::from_name(\"alpha\"), Some(ClassAsciiKind::Alpha)));",
          "    assert_eq!(_result, Some(ast::ClassAscii {",
          "    span: Span::new(start, pos),",
          "    kind: ClassAsciiKind::Alpha,",
          "    negated: true,",
          "    }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestParser {",
          "        parser: Parser,",
          "        pattern: &'static str,",
          "    }",
          "",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let start = pos;",
          "    let ascii_class = ClassAscii {",
          "        span: Span::new(start, pos),",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: false,",
          "    };",
          "    ",
          "    let test_parser = TestParser { ",
          "        parser: Parser {",
          "            pos: Cell::new(pos),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"[[:digit:]]\",",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &test_parser.parser,",
          "        pattern: test_parser.pattern,",
          "    };",
          "",
          "    let _result = parser_i.maybe_parse_ascii_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '[');",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), ':');",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), '^');",
          "    assert!(self.bump());",
          "    assert!(self.char() != ':');",
          "    assert!(!self.is_eof());",
          "    assert!(self.bump_if(\":]\"));",
          "    let name = \"digit\";",
          "    assert!(ast::ClassAsciiKind::from_name(name).is_some());",
          "    let result = parser_i.maybe_parse_ascii_class();",
          "    assert!(result.is_some());",
          "    let ascii_class = result.unwrap();",
          "    assert_eq!(ascii_class.span, Span::new(start, parser_i.pos()));",
          "    assert_eq!(ascii_class.kind, ClassAsciiKind::Digit);",
          "    assert!(!ascii_class.negated);"
        ],
        "code": [
          "{",
          "    struct TestParser {",
          "        parser: Parser,",
          "        pattern: &'static str,",
          "    }",
          "",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let start = pos;",
          "    let ascii_class = ClassAscii {",
          "        span: Span::new(start, pos),",
          "        kind: ClassAsciiKind::Digit,",
          "        negated: false,",
          "    };",
          "    ",
          "    let test_parser = TestParser { ",
          "        parser: Parser {",
          "            pos: Cell::new(pos),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"[[:digit:]]\",",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &test_parser.parser,",
          "        pattern: test_parser.pattern,",
          "    };",
          "",
          "    let _result = parser_i.maybe_parse_ascii_class();",
          "    assert_eq!(self.char(), '[');",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), ':');",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), '^');",
          "    assert!(self.bump());",
          "    assert!(self.char() != ':');",
          "    assert!(!self.is_eof());",
          "    assert!(self.bump_if(\":]\"));",
          "    let name = \"digit\";",
          "    assert!(ast::ClassAsciiKind::from_name(name).is_some());",
          "    let result = parser_i.maybe_parse_ascii_class();",
          "    assert!(result.is_some());",
          "    let ascii_class = result.unwrap();",
          "    assert_eq!(ascii_class.span, Span::new(start, parser_i.pos()));",
          "    assert_eq!(ascii_class.kind, ClassAsciiKind::Digit);",
          "    assert!(!ascii_class.negated);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestParser {",
          "        parser: Parser,",
          "        pattern: &'static str,",
          "    }",
          "",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let start = pos;",
          "",
          "    let test_parser = TestParser { ",
          "        parser: Parser {",
          "            pos: Cell::new(pos),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"[[:]]\",",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &test_parser.parser,",
          "        pattern: test_parser.pattern,",
          "    };",
          "",
          "    let _result = parser_i.maybe_parse_ascii_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '[');",
          "    let start = self.pos();",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), ':');",
          "    assert!(self.bump());",
          "    assert!(self.char() == '^');",
          "    assert!(self.bump());",
          "    let name_start = self.offset();",
          "    while self.char() != ':' { assert!(self.bump()); }",
          "    assert!(!self.is_eof());",
          "    let name = &self.pattern()[name_start..self.offset()];",
          "    assert!(self.bump_if(\":]\"));",
          "    assert!(ast::ClassAsciiKind::from_name(name).is_some());",
          "    let result = parser_i.maybe_parse_ascii_class();",
          "    assert!(result.is_some());",
          "    let class_ascii = result.unwrap();",
          "    assert_eq!(class_ascii.span, Span::new(start, self.pos()));",
          "    assert_eq!(class_ascii.kind, ast::ClassAsciiKind::from_name(name).unwrap());",
          "    assert!(class_ascii.negated);"
        ],
        "code": [
          "{",
          "    struct TestParser {",
          "        parser: Parser,",
          "        pattern: &'static str,",
          "    }",
          "",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let start = pos;",
          "",
          "    let test_parser = TestParser { ",
          "        parser: Parser {",
          "            pos: Cell::new(pos),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"[[:]]\",",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &test_parser.parser,",
          "        pattern: test_parser.pattern,",
          "    };",
          "",
          "    let _result = parser_i.maybe_parse_ascii_class();",
          "    assert_eq!(self.char(), '[');",
          "    let start = self.pos();",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), ':');",
          "    assert!(self.bump());",
          "    assert!(self.char() == '^');",
          "    assert!(self.bump());",
          "    let name_start = self.offset();",
          "    while self.char() != ':' { assert!(self.bump()); }",
          "    assert!(!self.is_eof());",
          "    let name = &self.pattern()[name_start..self.offset()];",
          "    assert!(self.bump_if(\":]\"));",
          "    assert!(ast::ClassAsciiKind::from_name(name).is_some());",
          "    let result = parser_i.maybe_parse_ascii_class();",
          "    assert!(result.is_some());",
          "    let class_ascii = result.unwrap();",
          "    assert_eq!(class_ascii.span, Span::new(start, self.pos()));",
          "    assert_eq!(class_ascii.kind, ast::ClassAsciiKind::from_name(name).unwrap());",
          "    assert!(class_ascii.negated);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestParser {",
          "        parser: Parser,",
          "        pattern: &'static str,",
          "    }",
          "",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let start = pos;",
          "",
          "    let test_parser = TestParser { ",
          "        parser: Parser {",
          "            pos: Cell::new(pos),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"[[:invalid:]]\",",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &test_parser.parser,",
          "        pattern: test_parser.pattern,",
          "    };",
          "",
          "    let _result = parser_i.maybe_parse_ascii_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*left_val, *right_val);",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), ':');",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), '^');",
          "    assert_eq!(self.char(), ':');",
          "    assert!(!self.is_eof());",
          "    assert!(self.bump_if(\":]\"));",
          "    assert!(matches!(ast::ClassAsciiKind::from_name(name), Some(kind)));",
          "    let expected = Some(ast::ClassAscii {",
          "    span: Span::new(start, self.pos()),",
          "    kind,",
          "    negated,",
          "    });",
          "    assert_eq!(_result, expected);"
        ],
        "code": [
          "{",
          "    struct TestParser {",
          "        parser: Parser,",
          "        pattern: &'static str,",
          "    }",
          "",
          "    let pos = Position { offset: 0, line: 1, column: 1 };",
          "    let start = pos;",
          "",
          "    let test_parser = TestParser { ",
          "        parser: Parser {",
          "            pos: Cell::new(pos),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 0,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"[[:invalid:]]\",",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &test_parser.parser,",
          "        pattern: test_parser.pattern,",
          "    };",
          "",
          "    let _result = parser_i.maybe_parse_ascii_class();",
          "    assert_eq!(*left_val, *right_val);",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), ':');",
          "    assert!(self.bump());",
          "    assert_eq!(self.char(), '^');",
          "    assert_eq!(self.char(), ':');",
          "    assert!(!self.is_eof());",
          "    assert!(self.bump_if(\":]\"));",
          "    assert!(matches!(ast::ClassAsciiKind::from_name(name), Some(kind)));",
          "    let expected = Some(ast::ClassAscii {",
          "    span: Span::new(start, self.pos()),",
          "    kind,",
          "    negated,",
          "    });",
          "    assert_eq!(_result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]