[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::inexact(&[]);",
          "}"
        ],
        "oracle": [
          "    let literal = Literal::inexact(&[]); assert_eq!(literal.bytes, vec![]); assert_eq!(literal.exact, false);",
          "    let literal = Literal::inexact(\"test\"); assert_eq!(literal.bytes, b\"test\".to_vec()); assert_eq!(literal.exact, false);",
          "    let literal = Literal::inexact(vec![1, 2, 3]); assert_eq!(literal.bytes, vec![1, 2, 3]); assert_eq!(literal.exact, false);",
          "    let literal = Literal::inexact(\"hello world\"); assert_eq!(literal.bytes, b\"hello world\".to_vec()); assert_eq!(literal.exact, false);",
          "    let literal = Literal::inexact(\"\".to_string()); assert_eq!(literal.bytes, b\"\".to_vec()); assert_eq!(literal.exact, false);"
        ],
        "code": [
          "{",
          "    let literal = Literal::inexact(&[]);",
          "    let literal = Literal::inexact(&[]); assert_eq!(literal.bytes, vec![]); assert_eq!(literal.exact, false);",
          "    let literal = Literal::inexact(\"test\"); assert_eq!(literal.bytes, b\"test\".to_vec()); assert_eq!(literal.exact, false);",
          "    let literal = Literal::inexact(vec![1, 2, 3]); assert_eq!(literal.bytes, vec![1, 2, 3]); assert_eq!(literal.exact, false);",
          "    let literal = Literal::inexact(\"hello world\"); assert_eq!(literal.bytes, b\"hello world\".to_vec()); assert_eq!(literal.exact, false);",
          "    let literal = Literal::inexact(\"\".to_string()); assert_eq!(literal.bytes, b\"\".to_vec()); assert_eq!(literal.exact, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::inexact(vec![0]);",
          "}"
        ],
        "oracle": [
          "    let literal = Literal::inexact(vec![0]);",
          "    assert_eq!(literal.bytes, vec![0]);",
          "    assert_eq!(literal.exact, false);"
        ],
        "code": [
          "{",
          "    let literal = Literal::inexact(vec![0]);",
          "    let literal = Literal::inexact(vec![0]);",
          "    assert_eq!(literal.bytes, vec![0]);",
          "    assert_eq!(literal.exact, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal = Literal::inexact(vec![1, 2, 3]);",
          "}"
        ],
        "oracle": [
          "    let literal = Literal::inexact(vec![1, 2, 3]);",
          "    assert_eq!(literal.bytes, vec![1, 2, 3]);",
          "    assert_eq!(literal.exact, false);"
        ],
        "code": [
          "{",
          "    let literal = Literal::inexact(vec![1, 2, 3]);",
          "    let literal = Literal::inexact(vec![1, 2, 3]);",
          "    assert_eq!(literal.bytes, vec![1, 2, 3]);",
          "    assert_eq!(literal.exact, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let large_bytes = (0..255).collect::<Vec<u8>>();",
          "    let literal = Literal::inexact(large_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.bytes.len(), 255);",
          "    assert_eq!(literal.is_exact(), false);",
          "    assert!(literal.bytes.iter().copied().eq((0..255)));",
          "    assert!(literal.bytes.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let large_bytes = (0..255).collect::<Vec<u8>>();",
          "    let literal = Literal::inexact(large_bytes);",
          "    assert_eq!(literal.bytes.len(), 255);",
          "    assert_eq!(literal.is_exact(), false);",
          "    assert!(literal.bytes.iter().copied().eq((0..255)));",
          "    assert!(literal.bytes.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal1 = Literal::inexact(vec![255]);",
          "    let literal2 = Literal::inexact(vec![0, 255, 127]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal1.bytes, vec![255]);",
          "    assert!(!literal1.exact);",
          "    assert_eq!(literal2.bytes, vec![0, 255, 127]);",
          "    assert!(!literal2.exact);"
        ],
        "code": [
          "{",
          "    let literal1 = Literal::inexact(vec![255]);",
          "    let literal2 = Literal::inexact(vec![0, 255, 127]);",
          "    assert_eq!(literal1.bytes, vec![255]);",
          "    assert!(!literal1.exact);",
          "    assert_eq!(literal2.bytes, vec![0, 255, 127]);",
          "    assert!(!literal2.exact);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]