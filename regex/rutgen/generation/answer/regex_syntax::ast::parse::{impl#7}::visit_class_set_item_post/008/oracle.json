[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Empty(Span { start: 0, end: 0 });",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "}"
        ],
        "oracle": [
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span { start: 0, end: 0 });",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode { /* fields */ });",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal { /* fields */ });",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii { /* fields */ });",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange { /* fields */ });",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl { /* fields */ });",
          "    ",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_empty), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_unicode), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_literal), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_ascii), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_range), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_perl), Ok(()));"
        ],
        "code": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Empty(Span { start: 0, end: 0 });",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span { start: 0, end: 0 });",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode { /* fields */ });",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal { /* fields */ });",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii { /* fields */ });",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange { /* fields */ });",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl { /* fields */ });",
          "    ",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_empty), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_unicode), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_literal), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_ascii), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_range), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_perl), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Literal(Literal::from('a'));",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "}"
        ],
        "oracle": [
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::new(0, 1));",
          "    let parser_empty = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_empty = NestLimiter::new(&parser_empty);",
          "    let result_empty = limiter_empty.visit_class_set_item_post(&ast_item_empty);",
          "    assert_eq!(result_empty, Ok(()));",
          "    ",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode::new());",
          "    let parser_unicode = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_unicode = NestLimiter::new(&parser_unicode);",
          "    let result_unicode = limiter_unicode.visit_class_set_item_post(&ast_item_unicode);",
          "    assert_eq!(result_unicode, Ok(()));",
          "    ",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::from('a'));",
          "    let parser_literal = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_literal = NestLimiter::new(&parser_literal);",
          "    let result_literal = limiter_literal.visit_class_set_item_post(&ast_item_literal);",
          "    assert_eq!(result_literal, Ok(()));",
          "    ",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii::new());",
          "    let parser_ascii = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_ascii = NestLimiter::new(&parser_ascii);",
          "    let result_ascii = limiter_ascii.visit_class_set_item_post(&ast_item_ascii);",
          "    assert_eq!(result_ascii, Ok(()));",
          "    ",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::new('a', 'b'));",
          "    let parser_range = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_range = NestLimiter::new(&parser_range);",
          "    let result_range = limiter_range.visit_class_set_item_post(&ast_item_range);",
          "    assert_eq!(result_range, Ok(()));",
          "    ",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl::new());",
          "    let parser_perl = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_perl = NestLimiter::new(&parser_perl);",
          "    let result_perl = limiter_perl.visit_class_set_item_post(&ast_item_perl);",
          "    assert_eq!(result_perl, Ok(()));"
        ],
        "code": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Literal(Literal::from('a'));",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::new(0, 1));",
          "    let parser_empty = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_empty = NestLimiter::new(&parser_empty);",
          "    let result_empty = limiter_empty.visit_class_set_item_post(&ast_item_empty);",
          "    assert_eq!(result_empty, Ok(()));",
          "    ",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode::new());",
          "    let parser_unicode = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_unicode = NestLimiter::new(&parser_unicode);",
          "    let result_unicode = limiter_unicode.visit_class_set_item_post(&ast_item_unicode);",
          "    assert_eq!(result_unicode, Ok(()));",
          "    ",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::from('a'));",
          "    let parser_literal = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_literal = NestLimiter::new(&parser_literal);",
          "    let result_literal = limiter_literal.visit_class_set_item_post(&ast_item_literal);",
          "    assert_eq!(result_literal, Ok(()));",
          "    ",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii::new());",
          "    let parser_ascii = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_ascii = NestLimiter::new(&parser_ascii);",
          "    let result_ascii = limiter_ascii.visit_class_set_item_post(&ast_item_ascii);",
          "    assert_eq!(result_ascii, Ok(()));",
          "    ",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::new('a', 'b'));",
          "    let parser_range = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_range = NestLimiter::new(&parser_range);",
          "    let result_range = limiter_range.visit_class_set_item_post(&ast_item_range);",
          "    assert_eq!(result_range, Ok(()));",
          "    ",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl::new());",
          "    let parser_perl = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter_perl = NestLimiter::new(&parser_perl);",
          "    let result_perl = limiter_perl.visit_class_set_item_post(&ast_item_perl);",
          "    assert_eq!(result_perl, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "}"
        ],
        "oracle": [
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::new());",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::new('a'));",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii::new());",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode::new());",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl::new());",
          "    let ast_item_bracketed = ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::new()));",
          "    let ast_item_union = ast::ClassSetItem::Union(ClassSetUnion::new());",
          "    ",
          "    let parser_empty = ParserI { parser: ParserStub, pattern: \"empty\" };",
          "    let mut limiter_empty = NestLimiter::new(&parser_empty);",
          "    let result_empty = limiter_empty.visit_class_set_item_post(&ast_item_empty);",
          "    assert_eq!(result_empty, Ok(()));",
          "    ",
          "    let parser_literal = ParserI { parser: ParserStub, pattern: \"literal\" };",
          "    let mut limiter_literal = NestLimiter::new(&parser_literal);",
          "    let result_literal = limiter_literal.visit_class_set_item_post(&ast_item_literal);",
          "    assert_eq!(result_literal, Ok(()));",
          "    ",
          "    let parser_range = ParserI { parser: ParserStub, pattern: \"range\" };",
          "    let mut limiter_range = NestLimiter::new(&parser_range);",
          "    let result_range = limiter_range.visit_class_set_item_post(&ast_item_range);",
          "    assert_eq!(result_range, Ok(()));",
          "    ",
          "    let parser_ascii = ParserI { parser: ParserStub, pattern: \"ascii\" };",
          "    let mut limiter_ascii = NestLimiter::new(&parser_ascii);",
          "    let result_ascii = limiter_ascii.visit_class_set_item_post(&ast_item_ascii);",
          "    assert_eq!(result_ascii, Ok(()));",
          "    ",
          "    let parser_unicode = ParserI { parser: ParserStub, pattern: \"unicode\" };",
          "    let mut limiter_unicode = NestLimiter::new(&parser_unicode);",
          "    let result_unicode = limiter_unicode.visit_class_set_item_post(&ast_item_unicode);",
          "    assert_eq!(result_unicode, Ok(()));",
          "    ",
          "    let parser_perl = ParserI { parser: ParserStub, pattern: \"perl\" };",
          "    let mut limiter_perl = NestLimiter::new(&parser_perl);",
          "    let result_perl = limiter_perl.visit_class_set_item_post(&ast_item_perl);",
          "    assert_eq!(result_perl, Ok(()));",
          "    ",
          "    let parser_bracketed = ParserI { parser: ParserStub, pattern: \"bracketed\" };",
          "    let mut limiter_bracketed = NestLimiter::new(&parser_bracketed);",
          "    let result_bracketed = limiter_bracketed.visit_class_set_item_post(&ast_item_bracketed);",
          "    assert_eq!(result_bracketed, Ok(()));",
          "    limiter_bracketed.decrement_depth();",
          "    ",
          "    let parser_union = ParserI { parser: ParserStub, pattern: \"union\" };",
          "    let mut limiter_union = NestLimiter::new(&parser_union);",
          "    let result_union = limiter_union.visit_class_set_item_post(&ast_item_union);",
          "    assert_eq!(result_union, Ok(()));",
          "    limiter_union.decrement_depth();"
        ],
        "code": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::new());",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::new('a'));",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii::new());",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode::new());",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl::new());",
          "    let ast_item_bracketed = ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::new()));",
          "    let ast_item_union = ast::ClassSetItem::Union(ClassSetUnion::new());",
          "    ",
          "    let parser_empty = ParserI { parser: ParserStub, pattern: \"empty\" };",
          "    let mut limiter_empty = NestLimiter::new(&parser_empty);",
          "    let result_empty = limiter_empty.visit_class_set_item_post(&ast_item_empty);",
          "    assert_eq!(result_empty, Ok(()));",
          "    ",
          "    let parser_literal = ParserI { parser: ParserStub, pattern: \"literal\" };",
          "    let mut limiter_literal = NestLimiter::new(&parser_literal);",
          "    let result_literal = limiter_literal.visit_class_set_item_post(&ast_item_literal);",
          "    assert_eq!(result_literal, Ok(()));",
          "    ",
          "    let parser_range = ParserI { parser: ParserStub, pattern: \"range\" };",
          "    let mut limiter_range = NestLimiter::new(&parser_range);",
          "    let result_range = limiter_range.visit_class_set_item_post(&ast_item_range);",
          "    assert_eq!(result_range, Ok(()));",
          "    ",
          "    let parser_ascii = ParserI { parser: ParserStub, pattern: \"ascii\" };",
          "    let mut limiter_ascii = NestLimiter::new(&parser_ascii);",
          "    let result_ascii = limiter_ascii.visit_class_set_item_post(&ast_item_ascii);",
          "    assert_eq!(result_ascii, Ok(()));",
          "    ",
          "    let parser_unicode = ParserI { parser: ParserStub, pattern: \"unicode\" };",
          "    let mut limiter_unicode = NestLimiter::new(&parser_unicode);",
          "    let result_unicode = limiter_unicode.visit_class_set_item_post(&ast_item_unicode);",
          "    assert_eq!(result_unicode, Ok(()));",
          "    ",
          "    let parser_perl = ParserI { parser: ParserStub, pattern: \"perl\" };",
          "    let mut limiter_perl = NestLimiter::new(&parser_perl);",
          "    let result_perl = limiter_perl.visit_class_set_item_post(&ast_item_perl);",
          "    assert_eq!(result_perl, Ok(()));",
          "    ",
          "    let parser_bracketed = ParserI { parser: ParserStub, pattern: \"bracketed\" };",
          "    let mut limiter_bracketed = NestLimiter::new(&parser_bracketed);",
          "    let result_bracketed = limiter_bracketed.visit_class_set_item_post(&ast_item_bracketed);",
          "    assert_eq!(result_bracketed, Ok(()));",
          "    limiter_bracketed.decrement_depth();",
          "    ",
          "    let parser_union = ParserI { parser: ParserStub, pattern: \"union\" };",
          "    let mut limiter_union = NestLimiter::new(&parser_union);",
          "    let result_union = limiter_union.visit_class_set_item_post(&ast_item_union);",
          "    assert_eq!(result_union, Ok(()));",
          "    limiter_union.decrement_depth();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Ascii(ClassAscii);",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "}"
        ],
        "oracle": [
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::new(0, 1));",
          "    let result_empty = limiter.visit_class_set_item_post(&ast_item_empty);",
          "    assert_eq!(result_empty, Ok(()));",
          "    ",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::new('a'));",
          "    let result_literal = limiter.visit_class_set_item_post(&ast_item_literal);",
          "    assert_eq!(result_literal, Ok(()));",
          "    ",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let result_range = limiter.visit_class_set_item_post(&ast_item_range);",
          "    assert_eq!(result_range, Ok(()));",
          "    ",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii);",
          "    let result_ascii = limiter.visit_class_set_item_post(&ast_item_ascii);",
          "    assert_eq!(result_ascii, Ok(()));",
          "    ",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode);",
          "    let result_unicode = limiter.visit_class_set_item_post(&ast_item_unicode);",
          "    assert_eq!(result_unicode, Ok(()));",
          "    ",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl);",
          "    let result_perl = limiter.visit_class_set_item_post(&ast_item_perl);",
          "    assert_eq!(result_perl, Ok(()));",
          "    ",
          "    let ast_item_bracketed = ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::new()));",
          "    let result_bracketed = limiter.visit_class_set_item_post(&ast_item_bracketed);",
          "    assert!(result_bracketed.is_ok());",
          "    ",
          "    let ast_item_union = ast::ClassSetItem::Union(ClassSetUnion::new());",
          "    let result_union = limiter.visit_class_set_item_post(&ast_item_union);",
          "    assert!(result_union.is_ok());"
        ],
        "code": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Ascii(ClassAscii);",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::new(0, 1));",
          "    let result_empty = limiter.visit_class_set_item_post(&ast_item_empty);",
          "    assert_eq!(result_empty, Ok(()));",
          "    ",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::new('a'));",
          "    let result_literal = limiter.visit_class_set_item_post(&ast_item_literal);",
          "    assert_eq!(result_literal, Ok(()));",
          "    ",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let result_range = limiter.visit_class_set_item_post(&ast_item_range);",
          "    assert_eq!(result_range, Ok(()));",
          "    ",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii);",
          "    let result_ascii = limiter.visit_class_set_item_post(&ast_item_ascii);",
          "    assert_eq!(result_ascii, Ok(()));",
          "    ",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode);",
          "    let result_unicode = limiter.visit_class_set_item_post(&ast_item_unicode);",
          "    assert_eq!(result_unicode, Ok(()));",
          "    ",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl);",
          "    let result_perl = limiter.visit_class_set_item_post(&ast_item_perl);",
          "    assert_eq!(result_perl, Ok(()));",
          "    ",
          "    let ast_item_bracketed = ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::new()));",
          "    let result_bracketed = limiter.visit_class_set_item_post(&ast_item_bracketed);",
          "    assert!(result_bracketed.is_ok());",
          "    ",
          "    let ast_item_union = ast::ClassSetItem::Union(ClassSetUnion::new());",
          "    let result_union = limiter.visit_class_set_item_post(&ast_item_union);",
          "    assert!(result_union.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Unicode(ClassUnicode);",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "}"
        ],
        "oracle": [
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::default());",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode);",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::default());",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii::default());",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::default());",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl::default());",
          "    let ast_item_bracketed = ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::default()));",
          "    let ast_item_union = ast::ClassSetItem::Union(ClassSetUnion::default());",
          "    ",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_empty), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_unicode), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_literal), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_ascii), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_range), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_perl), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_bracketed), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_union), Ok(()));"
        ],
        "code": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Unicode(ClassUnicode);",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::default());",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode);",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::default());",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii::default());",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::default());",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl::default());",
          "    let ast_item_bracketed = ast::ClassSetItem::Bracketed(Box::new(ClassBracketed::default()));",
          "    let ast_item_union = ast::ClassSetItem::Union(ClassSetUnion::default());",
          "    ",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_empty), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_unicode), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_literal), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_ascii), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_range), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_perl), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_bracketed), Ok(()));",
          "    assert_eq!(limiter.visit_class_set_item_post(&ast_item_union), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Perl(ClassPerl);",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "}"
        ],
        "oracle": [
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::new(0, 1));",
          "    let result_empty = limiter.visit_class_set_item_post(&ast_item_empty);",
          "    assert_eq!(result_empty, Ok(()));",
          "    ",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode);",
          "    let result_unicode = limiter.visit_class_set_item_post(&ast_item_unicode);",
          "    assert_eq!(result_unicode, Ok(()));",
          "    ",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::new('a'));",
          "    let result_literal = limiter.visit_class_set_item_post(&ast_item_literal);",
          "    assert_eq!(result_literal, Ok(()));",
          "    ",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii);",
          "    let result_ascii = limiter.visit_class_set_item_post(&ast_item_ascii);",
          "    assert_eq!(result_ascii, Ok(()));",
          "    ",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let result_range = limiter.visit_class_set_item_post(&ast_item_range);",
          "    assert_eq!(result_range, Ok(()));",
          "    ",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl);",
          "    let result_perl = limiter.visit_class_set_item_post(&ast_item_perl);",
          "    assert_eq!(result_perl, Ok(()));"
        ],
        "code": [
          "{",
          "    struct ParserStub;",
          "",
          "    let ast_item = ast::ClassSetItem::Perl(ClassPerl);",
          "    let parser = ParserI { parser: ParserStub, pattern: \"test\" };",
          "    let mut limiter = NestLimiter::new(&parser);",
          "    ",
          "    let _ = limiter.visit_class_set_item_post(&ast_item);",
          "    let ast_item_empty = ast::ClassSetItem::Empty(Span::new(0, 1));",
          "    let result_empty = limiter.visit_class_set_item_post(&ast_item_empty);",
          "    assert_eq!(result_empty, Ok(()));",
          "    ",
          "    let ast_item_unicode = ast::ClassSetItem::Unicode(ClassUnicode);",
          "    let result_unicode = limiter.visit_class_set_item_post(&ast_item_unicode);",
          "    assert_eq!(result_unicode, Ok(()));",
          "    ",
          "    let ast_item_literal = ast::ClassSetItem::Literal(Literal::new('a'));",
          "    let result_literal = limiter.visit_class_set_item_post(&ast_item_literal);",
          "    assert_eq!(result_literal, Ok(()));",
          "    ",
          "    let ast_item_ascii = ast::ClassSetItem::Ascii(ClassAscii);",
          "    let result_ascii = limiter.visit_class_set_item_post(&ast_item_ascii);",
          "    assert_eq!(result_ascii, Ok(()));",
          "    ",
          "    let ast_item_range = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let result_range = limiter.visit_class_set_item_post(&ast_item_range);",
          "    assert_eq!(result_range, Ok(()));",
          "    ",
          "    let ast_item_perl = ast::ClassSetItem::Perl(ClassPerl);",
          "    let result_perl = limiter.visit_class_set_item_post(&ast_item_perl);",
          "    assert_eq!(result_perl, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]