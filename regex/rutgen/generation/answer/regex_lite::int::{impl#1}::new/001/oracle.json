[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = NonMaxUsize::new(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
          "    let result = NonMaxUsize::new(usize::MAX);",
          "    assert_eq!(result, None);",
          "    let result = NonMaxUsize::new(1);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())));",
          "    let result = NonMaxUsize::new(usize::MAX - 1);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap())));"
        ],
        "code": [
          "{",
          "    let result = NonMaxUsize::new(0);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(1).unwrap())));",
          "    let result = NonMaxUsize::new(usize::MAX);",
          "    assert_eq!(result, None);",
          "    let result = NonMaxUsize::new(1);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(2).unwrap())));",
          "    let result = NonMaxUsize::new(usize::MAX - 1);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = NonMaxUsize::new(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(NonMaxUsize::new(1).unwrap()));",
          "    let result = NonMaxUsize::new(0);",
          "    assert_eq!(result, Some(NonMaxUsize::new(0).unwrap()));",
          "    let result = NonMaxUsize::new(usize::MAX);",
          "    assert_eq!(result, None);",
          "    let result = NonMaxUsize::new(usize::MAX - 1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().get(), usize::MAX - 1 + 1);"
        ],
        "code": [
          "{",
          "    let result = NonMaxUsize::new(1);",
          "    assert_eq!(result, Some(NonMaxUsize::new(1).unwrap()));",
          "    let result = NonMaxUsize::new(0);",
          "    assert_eq!(result, Some(NonMaxUsize::new(0).unwrap()));",
          "    let result = NonMaxUsize::new(usize::MAX);",
          "    assert_eq!(result, None);",
          "    let result = NonMaxUsize::new(usize::MAX - 1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().get(), usize::MAX - 1 + 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = NonMaxUsize::new(usize::MAX - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap())));",
          "    assert!(NonMaxUsize::new(usize::MAX).is_none());",
          "    assert!(NonMaxUsize::new(0).is_some());",
          "    assert_eq!(NonMaxUsize::new(1).unwrap().get(), 1);",
          "    assert_eq!(NonMaxUsize::new(usize::MAX - 2).unwrap().get(), usize::MAX - 1);",
          "    assert!(NonMaxUsize::new(2).is_some());"
        ],
        "code": [
          "{",
          "    let result = NonMaxUsize::new(usize::MAX - 1);",
          "    assert_eq!(result, Some(NonMaxUsize(NonZeroUsize::new(usize::MAX).unwrap())));",
          "    assert!(NonMaxUsize::new(usize::MAX).is_none());",
          "    assert!(NonMaxUsize::new(0).is_some());",
          "    assert_eq!(NonMaxUsize::new(1).unwrap().get(), 1);",
          "    assert_eq!(NonMaxUsize::new(usize::MAX - 2).unwrap().get(), usize::MAX - 1);",
          "    assert!(NonMaxUsize::new(2).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = NonMaxUsize::new(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = NonMaxUsize::new(usize::MAX);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]