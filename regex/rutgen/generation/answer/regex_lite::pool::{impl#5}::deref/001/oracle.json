[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cache_pool_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let value = Some(Box::new(pikevm::Cache::new()));",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: cache_pool_fn,",
          "    };",
          "    let guard = PoolGuard { pool: &pool, value };",
          "    let _result: &pikevm::Cache = guard.deref();",
          "}"
        ],
        "oracle": [
          "    assert!(guard.value.is_some());",
          "    assert_eq!(*guard.deref(), *guard.value.as_ref().unwrap());",
          "    assert_eq!(std::any::TypeId::of::<pikevm::Cache>(), std::any::TypeId::of_val(guard.deref()));",
          "    assert!(!guard.value.is_none());",
          "    assert!(guard.deref() as *const _ != std::ptr::null());",
          "    assert!(guard.deref() as *const _ == guard.value.as_ref().unwrap().as_ref() as *const _);"
        ],
        "code": [
          "{",
          "    let cache_pool_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let value = Some(Box::new(pikevm::Cache::new()));",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: cache_pool_fn,",
          "    };",
          "    let guard = PoolGuard { pool: &pool, value };",
          "    let _result: &pikevm::Cache = guard.deref();",
          "    assert!(guard.value.is_some());",
          "    assert_eq!(*guard.deref(), *guard.value.as_ref().unwrap());",
          "    assert_eq!(std::any::TypeId::of::<pikevm::Cache>(), std::any::TypeId::of_val(guard.deref()));",
          "    assert!(!guard.value.is_none());",
          "    assert!(guard.deref() as *const _ != std::ptr::null());",
          "    assert!(guard.deref() as *const _ == guard.value.as_ref().unwrap().as_ref() as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let cache_pool_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: cache_pool_fn,",
          "    };",
          "    let guard = PoolGuard { pool: &pool, value: None };",
          "    let _result: &pikevm::Cache = guard.deref();",
          "}"
        ],
        "oracle": [
          "    let cache_pool_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "    stack: Mutex::new(vec![]),",
          "    create: cache_pool_fn,",
          "    };",
          "    let guard = PoolGuard { pool: &pool, value: None };",
          "    assert!(std::panic::catch_unwind(|| { let _result: &pikevm::Cache = guard.deref(); }).is_err());"
        ],
        "code": [
          "{",
          "    let cache_pool_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "        stack: Mutex::new(vec![]),",
          "        create: cache_pool_fn,",
          "    };",
          "    let guard = PoolGuard { pool: &pool, value: None };",
          "    let _result: &pikevm::Cache = guard.deref();",
          "    let cache_pool_fn: CachePoolFn = Box::new(|| pikevm::Cache::new());",
          "    let pool = Pool {",
          "    stack: Mutex::new(vec![]),",
          "    create: cache_pool_fn,",
          "    };",
          "    let guard = PoolGuard { pool: &pool, value: None };",
          "    assert!(std::panic::catch_unwind(|| { let _result: &pikevm::Cache = guard.deref(); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]