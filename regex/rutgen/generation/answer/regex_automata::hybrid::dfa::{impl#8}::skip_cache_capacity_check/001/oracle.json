[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().skip_cache_capacity_check(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.skip_cache_capacity_check, Some(true));",
          "    assert_eq!(config.get_cache_capacity(), 0);",
          "    assert!(config.get_minimum_cache_clear_count().is_none());",
          "    assert!(config.get_minimum_bytes_per_state().is_none());",
          "    assert!(config.get_quit_set_from_nfa(&nfa).is_ok());"
        ],
        "code": [
          "{",
          "    let config = Config::new().skip_cache_capacity_check(true);",
          "    assert_eq!(config.skip_cache_capacity_check, Some(true));",
          "    assert_eq!(config.get_cache_capacity(), 0);",
          "    assert!(config.get_minimum_cache_clear_count().is_none());",
          "    assert!(config.get_minimum_bytes_per_state().is_none());",
          "    assert!(config.get_quit_set_from_nfa(&nfa).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().skip_cache_capacity_check(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.skip_cache_capacity_check, Some(false));",
          "    let config_with_true = Config::new().skip_cache_capacity_check(true);",
          "    assert_eq!(config_with_true.skip_cache_capacity_check, Some(true));",
          "    let config_after_setting_false = config_with_true.skip_cache_capacity_check(false);",
          "    assert_eq!(config_after_setting_false.skip_cache_capacity_check, Some(false));",
          "    let config_after_setting_false_again = config.skip_cache_capacity_check(false);",
          "    assert_eq!(config_after_setting_false_again.skip_cache_capacity_check, Some(false));",
          "    let config_after_setting_true_again = config_after_setting_false.skip_cache_capacity_check(true);",
          "    assert_eq!(config_after_setting_true_again.skip_cache_capacity_check, Some(true));"
        ],
        "code": [
          "{",
          "    let config = Config::new().skip_cache_capacity_check(false);",
          "    assert_eq!(config.skip_cache_capacity_check, Some(false));",
          "    let config_with_true = Config::new().skip_cache_capacity_check(true);",
          "    assert_eq!(config_with_true.skip_cache_capacity_check, Some(true));",
          "    let config_after_setting_false = config_with_true.skip_cache_capacity_check(false);",
          "    assert_eq!(config_after_setting_false.skip_cache_capacity_check, Some(false));",
          "    let config_after_setting_false_again = config.skip_cache_capacity_check(false);",
          "    assert_eq!(config_after_setting_false_again.skip_cache_capacity_check, Some(false));",
          "    let config_after_setting_true_again = config_after_setting_false.skip_cache_capacity_check(true);",
          "    assert_eq!(config_after_setting_true_again.skip_cache_capacity_check, Some(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]