[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_matches_at_with_out_of_bounds_start() {",
      "    let set = RegexSet::new([r\"foo\"]).unwrap();",
      "    let hay = b\"foo\";",
      "    let _matches: SetMatches = set.matches_at(hay, 4);",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"foo\", r\"bar\", r\"baz\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "}"
        ],
        "oracle": [
          "    assert!(set.matches_at(hay, 4).0.is_empty());",
          "    assert_eq!(matches.0.len(), 2);",
          "    assert_eq!(matches.0.contains(&0), true);",
          "    assert_eq!(matches.0.contains(&1), true);",
          "    assert_eq!(matches.0.contains(&2), false);"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"foo\", r\"bar\", r\"baz\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    assert!(set.matches_at(hay, 4).0.is_empty());",
          "    assert_eq!(matches.0.len(), 2);",
          "    assert_eq!(matches.0.contains(&0), true);",
          "    assert_eq!(matches.0.contains(&1), true);",
          "    assert_eq!(matches.0.contains(&2), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let matches: SetMatches = set.matches_at(hay, 3);",
          "}"
        ],
        "oracle": [
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let _matches: SetMatches = set.matches_at(hay, 4);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let matches: SetMatches = set.matches_at(hay, 3);",
          "    let set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: Vec<_> = set.matches(&hay[3..]).into_iter().collect();",
          "    assert_eq!(matches, vec![0, 1]);",
          "    let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();",
          "    assert_eq!(matches, vec![]);"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let matches: SetMatches = set.matches_at(hay, 3);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let _matches: SetMatches = set.matches_at(hay, 4);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let matches: SetMatches = set.matches_at(hay, 3);",
          "    let set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: Vec<_> = set.matches(&hay[3..]).into_iter().collect();",
          "    assert_eq!(matches, vec![0, 1]);",
          "    let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();",
          "    assert_eq!(matches, vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"baz\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 2);",
          "}"
        ],
        "oracle": [
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let _matches: SetMatches = set.matches_at(hay, 4);",
          "    let set = RegexSet::new([r\"baz\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 2);",
          "    let set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();",
          "    assert_eq!(matches, vec![]);",
          "    let set = RegexSet::new([r\"baz\", r\"bar\"]).unwrap();",
          "    let hay = b\"foobaz\";",
          "    let matches: Vec<_> = set.matches_at(hay, 4).into_iter().collect();",
          "    assert_eq!(matches, vec![0]);",
          "    let set = RegexSet::new([r\"foo\", r\"bar\"]).unwrap();",
          "    let hay = b\"barfoo\";",
          "    let matches: Vec<_> = set.matches_at(hay, 0).into_iter().collect();",
          "    assert_eq!(matches, vec![1]);",
          "    let set = RegexSet::new([r\"abc\", r\"def\"]).unwrap();",
          "    let hay = b\"defabc\";",
          "    let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();",
          "    assert_eq!(matches, vec![0]);",
          "    let set = RegexSet::new([r\"\\Afoo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let matches: Vec<_> = set.matches_at(hay, 0).into_iter().collect();",
          "    assert_eq!(matches, vec![0]);"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"baz\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 2);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let _matches: SetMatches = set.matches_at(hay, 4);",
          "    let set = RegexSet::new([r\"baz\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 2);",
          "    let set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();",
          "    assert_eq!(matches, vec![]);",
          "    let set = RegexSet::new([r\"baz\", r\"bar\"]).unwrap();",
          "    let hay = b\"foobaz\";",
          "    let matches: Vec<_> = set.matches_at(hay, 4).into_iter().collect();",
          "    assert_eq!(matches, vec![0]);",
          "    let set = RegexSet::new([r\"foo\", r\"bar\"]).unwrap();",
          "    let hay = b\"barfoo\";",
          "    let matches: Vec<_> = set.matches_at(hay, 0).into_iter().collect();",
          "    assert_eq!(matches, vec![1]);",
          "    let set = RegexSet::new([r\"abc\", r\"def\"]).unwrap();",
          "    let hay = b\"defabc\";",
          "    let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();",
          "    assert_eq!(matches, vec![0]);",
          "    let set = RegexSet::new([r\"\\Afoo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let matches: Vec<_> = set.matches_at(hay, 0).into_iter().collect();",
          "    assert_eq!(matches, vec![0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay: &[u8] = b\"\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "}"
        ],
        "oracle": [
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let _matches: SetMatches = set.matches_at(hay, 4);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay: &[u8] = b\"\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    let set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: Vec<_> = set.matches(&hay[3..]).into_iter().collect();",
          "    assert_eq!(matches, vec![0, 1]);",
          "    let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();",
          "    assert_eq!(matches, vec![]);"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay: &[u8] = b\"\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let _matches: SetMatches = set.matches_at(hay, 4);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay: &[u8] = b\"\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    let set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: Vec<_> = set.matches(&hay[3..]).into_iter().collect();",
          "    assert_eq!(matches, vec![0, 1]);",
          "    let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();",
          "    assert_eq!(matches, vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"foobar\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "}"
        ],
        "oracle": [
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let _matches: SetMatches = set.matches_at(hay, 3);",
          "    let set = RegexSet::new([r\"foobar\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 1);",
          "    let set = RegexSet::new([r\"\\bfoo\\b\", r\"(?m)^foo$\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    let set = RegexSet::new([r\"\\Afoo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"\";",
          "    let _matches: SetMatches = set.matches_at(hay, 0);"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"foobar\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let _matches: SetMatches = set.matches_at(hay, 3);",
          "    let set = RegexSet::new([r\"foobar\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 1);",
          "    let set = RegexSet::new([r\"\\bfoo\\b\", r\"(?m)^foo$\"]).unwrap();",
          "    let hay = b\"foobar\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    let set = RegexSet::new([r\"\\Afoo\"]).unwrap();",
          "    let hay = b\"foo\";",
          "    let matches: SetMatches = set.matches_at(hay, 0);",
          "    let set = RegexSet::new([r\"foo\"]).unwrap();",
          "    let hay = b\"\";",
          "    let _matches: SetMatches = set.matches_at(hay, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]