[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "}"
        ],
        "oracle": [
          "    assert!(state_builder_empty.0.is_empty());",
          "    assert_eq!(std::mem::size_of::<StateBuilderEmpty>(), std::mem::size_of::<(Vec<u8>)>());",
          "    assert!(std::any::TypeId::of::<StateBuilderEmpty>() == std::any::TypeId::of::<StateBuilderEmpty>());",
          "    assert!(state_builder_empty.capacity() == 0);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    assert!(state_builder_empty.0.is_empty());",
          "    assert_eq!(std::mem::size_of::<StateBuilderEmpty>(), std::mem::size_of::<(Vec<u8>)>());",
          "    assert!(std::any::TypeId::of::<StateBuilderEmpty>() == std::any::TypeId::of::<StateBuilderEmpty>());",
          "    assert!(state_builder_empty.capacity() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    let capacity = state_builder_empty.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state_builder_empty, StateBuilderEmpty(alloc::vec![]));",
          "    assert_eq!(capacity, 0);"
        ],
        "code": [
          "{",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    let capacity = state_builder_empty.capacity();",
          "    assert_eq!(state_builder_empty, StateBuilderEmpty(alloc::vec![]));",
          "    assert_eq!(capacity, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut state_builder_empty = StateBuilderEmpty::new();",
          "    state_builder_empty.clear();",
          "}"
        ],
        "oracle": [
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    assert_eq!(state_builder_empty, StateBuilderEmpty(alloc::vec![]));",
          "    assert!(state_builder_empty.0.is_empty());",
          "    assert_eq!(state_builder_empty.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut state_builder_empty = StateBuilderEmpty::new();",
          "    state_builder_empty.clear();",
          "    let state_builder_empty = StateBuilderEmpty::new();",
          "    assert_eq!(state_builder_empty, StateBuilderEmpty(alloc::vec![]));",
          "    assert!(state_builder_empty.0.is_empty());",
          "    assert_eq!(state_builder_empty.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]