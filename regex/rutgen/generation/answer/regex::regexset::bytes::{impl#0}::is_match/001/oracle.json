[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();",
          "    let haystack = b\"hello\";",
          "    set.is_match(haystack);",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_match(b\"hello\"));",
          "    assert!(set.is_match(b\"123\"));",
          "    assert!(!set.is_match(b\"☃\"));",
          "    assert!(set.is_match(b\"world\"));",
          "    assert!(!set.is_match(b\"\"));",
          "    assert!(set.is_match(b\"hello123\"));",
          "    assert!(!set.is_match(b\"hello!@#\"));",
          "    assert!(set.is_match(b\"test1234\"));",
          "    assert!(set.is_match(b\"abc123\"));",
          "    assert!(!set.is_match(b\"space here\"));"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();",
          "    let haystack = b\"hello\";",
          "    set.is_match(haystack);",
          "    assert!(set.is_match(b\"hello\"));",
          "    assert!(set.is_match(b\"123\"));",
          "    assert!(!set.is_match(b\"☃\"));",
          "    assert!(set.is_match(b\"world\"));",
          "    assert!(!set.is_match(b\"\"));",
          "    assert!(set.is_match(b\"hello123\"));",
          "    assert!(!set.is_match(b\"hello!@#\"));",
          "    assert!(set.is_match(b\"test1234\"));",
          "    assert!(set.is_match(b\"abc123\"));",
          "    assert!(!set.is_match(b\"space here\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();",
          "    let haystack = \"你好\".as_bytes();",
          "    set.is_match(haystack);",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_match(b\"foo\"));",
          "    assert!(!set.is_match(\"☃\".as_bytes()));",
          "    assert!(!set.is_match(b\"\"));",
          "    assert!(set.is_match(b\"123\"));",
          "    assert!(set.is_match(b\"abc\"));",
          "    assert!(!set.is_match(b\"!!!\"));",
          "    assert!(set.is_match(b\"hello 123\"));",
          "    assert!(!set.is_match(b\"你好\"));",
          "    assert!(set.is_match(b\"word123\"));",
          "    assert!(set.is_match(b\"test 1\"));"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();",
          "    let haystack = \"你好\".as_bytes();",
          "    set.is_match(haystack);",
          "    assert!(set.is_match(b\"foo\"));",
          "    assert!(!set.is_match(\"☃\".as_bytes()));",
          "    assert!(!set.is_match(b\"\"));",
          "    assert!(set.is_match(b\"123\"));",
          "    assert!(set.is_match(b\"abc\"));",
          "    assert!(!set.is_match(b\"!!!\"));",
          "    assert!(set.is_match(b\"hello 123\"));",
          "    assert!(!set.is_match(b\"你好\"));",
          "    assert!(set.is_match(b\"word123\"));",
          "    assert!(set.is_match(b\"test 1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();",
          "    let haystack: &[u8] = b\"\";",
          "    set.is_match(haystack);",
          "}"
        ],
        "oracle": [
          "    assert!(!set.is_match(b\"\"));",
          "    assert!(set.is_match(b\"foo\"));",
          "    assert!(!set.is_match(b\"☃\"));",
          "    assert!(set.is_match(b\"123\"));",
          "    assert!(set.is_match(b\"test123\"));",
          "    assert!(!set.is_match(b\"@#$%\"));",
          "    assert!(set.is_match(b\"word! 456\"));",
          "    assert!(!set.is_match(b\"\"));"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();",
          "    let haystack: &[u8] = b\"\";",
          "    set.is_match(haystack);",
          "    assert!(!set.is_match(b\"\"));",
          "    assert!(set.is_match(b\"foo\"));",
          "    assert!(!set.is_match(b\"☃\"));",
          "    assert!(set.is_match(b\"123\"));",
          "    assert!(set.is_match(b\"test123\"));",
          "    assert!(!set.is_match(b\"@#$%\"));",
          "    assert!(set.is_match(b\"word! 456\"));",
          "    assert!(!set.is_match(b\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\", r\"[!@#$%^&*()]\"]).unwrap();",
          "    let haystack = b\"hello!\";",
          "    set.is_match(haystack);",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_match(b\"hello!\"));",
          "    assert!(set.is_match(b\"hello123\"));",
          "    assert!(set.is_match(b\"some-text!\"));",
          "    assert!(!set.is_match(b\"\"));",
          "    assert!(!set.is_match(b\"no_special_chars\"));",
          "    assert!(!set.is_match(\"☃\".as_bytes()));",
          "    assert!(set.is_match(b\"!!*\"));",
          "    assert!(set.is_match(b\"123\"));",
          "    assert!(!set.is_match(b\"##\"));",
          "    assert!(set.is_match(b\"abc!def\"));"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\", r\"[!@#$%^&*()]\"]).unwrap();",
          "    let haystack = b\"hello!\";",
          "    set.is_match(haystack);",
          "    assert!(set.is_match(b\"hello!\"));",
          "    assert!(set.is_match(b\"hello123\"));",
          "    assert!(set.is_match(b\"some-text!\"));",
          "    assert!(!set.is_match(b\"\"));",
          "    assert!(!set.is_match(b\"no_special_chars\"));",
          "    assert!(!set.is_match(\"☃\".as_bytes()));",
          "    assert!(set.is_match(b\"!!*\"));",
          "    assert!(set.is_match(b\"123\"));",
          "    assert!(!set.is_match(b\"##\"));",
          "    assert!(set.is_match(b\"abc!def\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"\\d+\"]).unwrap();",
          "    let haystack = b\"hello\";",
          "    set.is_match(haystack);",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_match(b\"hello\") == false);",
          "    assert!(set.is_match(b\"123\") == true);",
          "    assert!(set.is_match(b\"abc123\") == true);",
          "    assert!(set.is_match(b\"hello123\") == true);",
          "    assert!(set.is_match(b\"\") == false);",
          "    assert!(set.is_match(b\"   \") == false);",
          "    assert!(set.is_match(b\"456\") == true);",
          "    assert!(set.is_match(b\"$%^\") == false);",
          "    assert!(set.is_match(b\"789a\") == true);"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"\\d+\"]).unwrap();",
          "    let haystack = b\"hello\";",
          "    set.is_match(haystack);",
          "    assert!(set.is_match(b\"hello\") == false);",
          "    assert!(set.is_match(b\"123\") == true);",
          "    assert!(set.is_match(b\"abc123\") == true);",
          "    assert!(set.is_match(b\"hello123\") == true);",
          "    assert!(set.is_match(b\"\") == false);",
          "    assert!(set.is_match(b\"   \") == false);",
          "    assert!(set.is_match(b\"456\") == true);",
          "    assert!(set.is_match(b\"$%^\") == false);",
          "    assert!(set.is_match(b\"789a\") == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\"]).unwrap();",
          "    let haystack = b\"\";",
          "    set.is_match(haystack);",
          "    ",
          "    let haystack_full = b\"A\".repeat(1000);",
          "    set.is_match(&haystack_full);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.is_match(b\"\"), false);",
          "    assert_eq!(set.is_match(b\"A\"), true);",
          "    assert_eq!(set.is_match(b\"123\"), true);",
          "    assert_eq!(set.is_match(b\"foo\"), true);",
          "    assert_eq!(set.is_match(b\"☃\".as_bytes()), false);",
          "    assert_eq!(set.is_match(b\"A\".repeat(1000).as_slice()), true);",
          "    assert_eq!(set.is_match(b\"   \"), false);",
          "    assert_eq!(set.is_match(b\"hello world\"), true);",
          "    assert_eq!(set.is_match(b\"!!@#\"), false);"
        ],
        "code": [
          "{",
          "    let set = RegexSet::new([r\"\\w+\"]).unwrap();",
          "    let haystack = b\"\";",
          "    set.is_match(haystack);",
          "    ",
          "    let haystack_full = b\"A\".repeat(1000);",
          "    set.is_match(&haystack_full);",
          "    assert_eq!(set.is_match(b\"\"), false);",
          "    assert_eq!(set.is_match(b\"A\"), true);",
          "    assert_eq!(set.is_match(b\"123\"), true);",
          "    assert_eq!(set.is_match(b\"foo\"), true);",
          "    assert_eq!(set.is_match(b\"☃\".as_bytes()), false);",
          "    assert_eq!(set.is_match(b\"A\".repeat(1000).as_slice()), true);",
          "    assert_eq!(set.is_match(b\"   \"), false);",
          "    assert_eq!(set.is_match(b\"hello world\"), true);",
          "    assert_eq!(set.is_match(b\"!!@#\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]