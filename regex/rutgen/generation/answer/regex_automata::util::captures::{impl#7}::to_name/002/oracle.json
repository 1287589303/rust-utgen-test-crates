[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(SmallIndex::new(0));",
          "    let group_index = 5;",
          "",
          "    let group_info = GroupInfo(GroupInfoInner {",
          "        index_to_name: vec![",
          "            vec![Some(Arc::from(\"foo\")), Some(Arc::from(\"bar\"))],",
          "            vec![Some(Arc::from(\"baz\"))],",
          "        ],",
          "        ..Default::default()",
          "    });",
          "",
          "    let result = group_info.to_name(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let pid = PatternID(SmallIndex::new(0));",
          "    let group_index = 5;",
          "",
          "    let group_info = GroupInfo(GroupInfoInner {",
          "        index_to_name: vec![",
          "            vec![Some(Arc::from(\"foo\")), Some(Arc::from(\"bar\"))],",
          "            vec![Some(Arc::from(\"baz\"))],",
          "        ],",
          "        ..Default::default()",
          "    });",
          "",
          "    let result = group_info.to_name(pid, group_index);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(SmallIndex::new(1));",
          "    let group_index = 1;",
          "",
          "    let group_info = GroupInfo(GroupInfoInner {",
          "        index_to_name: vec![",
          "            vec![Some(Arc::from(\"foo\"))],",
          "            vec![Some(Arc::from(\"baz\")), None],",
          "        ],",
          "        ..Default::default()",
          "    });",
          "",
          "    let result = group_info.to_name(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let pid = PatternID(SmallIndex::new(1));",
          "    let group_index = 1;",
          "",
          "    let group_info = GroupInfo(GroupInfoInner {",
          "        index_to_name: vec![",
          "            vec![Some(Arc::from(\"foo\"))],",
          "            vec![Some(Arc::from(\"baz\")), None],",
          "        ],",
          "        ..Default::default()",
          "    });",
          "",
          "    let result = group_info.to_name(pid, group_index);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pid = PatternID(SmallIndex::new(0));",
          "    let group_index = 2;",
          "",
          "    let group_info = GroupInfo(GroupInfoInner {",
          "        index_to_name: vec![",
          "            vec![Some(Arc::from(\"foo\")), Some(Arc::from(\"bar\"))],",
          "        ],",
          "        ..Default::default()",
          "    });",
          "",
          "    let result = group_info.to_name(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let pid = PatternID(SmallIndex::new(0));",
          "    let group_index = 2;",
          "",
          "    let group_info = GroupInfo(GroupInfoInner {",
          "        index_to_name: vec![",
          "            vec![Some(Arc::from(\"foo\")), Some(Arc::from(\"bar\"))],",
          "        ],",
          "        ..Default::default()",
          "    });",
          "",
          "    let result = group_info.to_name(pid, group_index);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]