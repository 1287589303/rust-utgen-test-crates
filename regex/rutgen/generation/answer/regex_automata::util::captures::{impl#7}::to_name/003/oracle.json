[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        vec![Some(Arc::from(\"foo\")), Some(Arc::from(\"bar\"))],",
          "        vec![None, Some(Arc::from(\"baz\")), Some(Arc::from(\"qux\"))],",
          "    ]).unwrap();",
          "",
          "    let pid = PatternID::must(0);",
          "    let group_index = 1;",
          "",
          "    group_info.to_name(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"bar\"));",
          "    ",
          "    let pid1 = PatternID::must(1);",
          "    let group_index1 = 2;",
          "    assert_eq!(group_info.to_name(pid1, group_index1), Some(\"baz\"));",
          "    ",
          "    let group_index2 = 0;",
          "    assert_eq!(group_info.to_name(pid1, group_index2), None);",
          "    ",
          "    let invalid_group_index = 3;",
          "    assert_eq!(group_info.to_name(pid, invalid_group_index), None);",
          "    ",
          "    let invalid_pid = PatternID::must(2);",
          "    let group_index3 = 1;",
          "    assert_eq!(group_info.to_name(invalid_pid, group_index3), None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        vec![Some(Arc::from(\"foo\")), Some(Arc::from(\"bar\"))],",
          "        vec![None, Some(Arc::from(\"baz\")), Some(Arc::from(\"qux\"))],",
          "    ]).unwrap();",
          "",
          "    let pid = PatternID::must(0);",
          "    let group_index = 1;",
          "",
          "    group_info.to_name(pid, group_index);",
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"bar\"));",
          "    ",
          "    let pid1 = PatternID::must(1);",
          "    let group_index1 = 2;",
          "    assert_eq!(group_info.to_name(pid1, group_index1), Some(\"baz\"));",
          "    ",
          "    let group_index2 = 0;",
          "    assert_eq!(group_info.to_name(pid1, group_index2), None);",
          "    ",
          "    let invalid_group_index = 3;",
          "    assert_eq!(group_info.to_name(pid, invalid_group_index), None);",
          "    ",
          "    let invalid_pid = PatternID::must(2);",
          "    let group_index3 = 1;",
          "    assert_eq!(group_info.to_name(invalid_pid, group_index3), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "",
          "    let pid = PatternID::must(0);",
          "    let group_index = 0;",
          "",
          "    group_info.to_name(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "    let group_info_with_names = GroupInfo::new(vec![Some(\"foo\"), Some(\"bar\")]).unwrap();",
          "    let pid = PatternID::must(0);",
          "    let group_index = 0;",
          "    assert_eq!(group_info_with_names.to_name(pid, group_index), Some(\"foo\"));",
          "    let group_index = 1;",
          "    assert_eq!(group_info_with_names.to_name(pid, group_index), Some(\"bar\"));",
          "    let group_index = 2;",
          "    assert_eq!(group_info_with_names.to_name(pid, group_index), None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::empty();",
          "",
          "    let pid = PatternID::must(0);",
          "    let group_index = 0;",
          "",
          "    group_info.to_name(pid, group_index);",
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "    let group_info_with_names = GroupInfo::new(vec![Some(\"foo\"), Some(\"bar\")]).unwrap();",
          "    let pid = PatternID::must(0);",
          "    let group_index = 0;",
          "    assert_eq!(group_info_with_names.to_name(pid, group_index), Some(\"foo\"));",
          "    let group_index = 1;",
          "    assert_eq!(group_info_with_names.to_name(pid, group_index), Some(\"bar\"));",
          "    let group_index = 2;",
          "    assert_eq!(group_info_with_names.to_name(pid, group_index), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        vec![Some(Arc::from(\"foo\"))],",
          "    ]).unwrap();",
          "",
          "    let pid = PatternID::must(0);",
          "    let group_index = 1;",
          "",
          "    group_info.to_name(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"foo\"));",
          "    assert_eq!(group_info.to_name(pid, group_index + 1), None);",
          "    assert_eq!(group_info.to_name(pid, group_index - 1), None);",
          "    assert_eq!(group_info.to_name(PatternID::must(1), group_index), None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        vec![Some(Arc::from(\"foo\"))],",
          "    ]).unwrap();",
          "",
          "    let pid = PatternID::must(0);",
          "    let group_index = 1;",
          "",
          "    group_info.to_name(pid, group_index);",
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"foo\"));",
          "    assert_eq!(group_info.to_name(pid, group_index + 1), None);",
          "    assert_eq!(group_info.to_name(pid, group_index - 1), None);",
          "    assert_eq!(group_info.to_name(PatternID::must(1), group_index), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        vec![None, Some(Arc::from(\"foo\")), None],",
          "        vec![Some(Arc::from(\"bar\")), Some(Arc::from(\"baz\"))],",
          "    ]).unwrap();",
          "",
          "    let pid = PatternID::must(1);",
          "    let group_index = 0;",
          "",
          "    group_info.to_name(pid, group_index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "    group_index = 1;",
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"bar\"));",
          "    group_index = 2;",
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"baz\"));",
          "    pid = PatternID::must(0);",
          "    group_index = 0;",
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "    group_index = 1;",
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"foo\"));",
          "    group_index = 2;",
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "    group_index = 3;",
          "    assert_eq!(group_info.to_name(pid, group_index), None);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::new(vec![",
          "        vec![None, Some(Arc::from(\"foo\")), None],",
          "        vec![Some(Arc::from(\"bar\")), Some(Arc::from(\"baz\"))],",
          "    ]).unwrap();",
          "",
          "    let pid = PatternID::must(1);",
          "    let group_index = 0;",
          "",
          "    group_info.to_name(pid, group_index);",
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "    group_index = 1;",
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"bar\"));",
          "    group_index = 2;",
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"baz\"));",
          "    pid = PatternID::must(0);",
          "    group_index = 0;",
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "    group_index = 1;",
          "    assert_eq!(group_info.to_name(pid, group_index), Some(\"foo\"));",
          "    group_index = 2;",
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "    group_index = 3;",
          "    assert_eq!(group_info.to_name(pid, group_index), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]