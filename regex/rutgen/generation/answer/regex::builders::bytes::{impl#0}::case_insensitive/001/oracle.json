[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(\"foo(?-i:bar)quux\")",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FoObarQuUx\");",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "    let re_case_sensitive = RegexBuilder::new(\"foo(bar)quux\")",
          "    .case_insensitive(false)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re_case_sensitive.is_match(b\"foobarquux\"));",
          "    assert!(!re_case_sensitive.is_match(b\"FoObARquux\"));",
          "    let re_default = RegexBuilder::new(\"foo(?-i:bar)quux\")",
          "    .build()",
          "    .unwrap();",
          "    assert!(re_default.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re_default.is_match(b\"fooBARquux\"));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(\"foo(?-i:bar)quux\")",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FoObarQuUx\");",
          "    assert!(re.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "    let re_case_sensitive = RegexBuilder::new(\"foo(bar)quux\")",
          "    .case_insensitive(false)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re_case_sensitive.is_match(b\"foobarquux\"));",
          "    assert!(!re_case_sensitive.is_match(b\"FoObARquux\"));",
          "    let re_default = RegexBuilder::new(\"foo(?-i:bar)quux\")",
          "    .build()",
          "    .unwrap();",
          "    assert!(re_default.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re_default.is_match(b\"fooBARquux\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(\"foo(?-i:bar)quux\")",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"fooBARquux\");",
          "}"
        ],
        "oracle": [
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "    let re_case_insensitive = RegexBuilder::new(\"foo(?-i:bar)quux\").case_insensitive(true).build().unwrap();",
          "    assert!(re_case_insensitive.is_match(b\"FoObarQuUx\"));",
          "    let re_case_sensitive = RegexBuilder::new(\"foo(?-i:bar)quux\").case_insensitive(false).build().unwrap();",
          "    assert!(!re_case_sensitive.is_match(b\"FoObARquux\"));",
          "    let re_default = RegexBuilder::new(\"foo(?-i:bar)quux\").build().unwrap();",
          "    assert!(!re_default.is_match(b\"FoObARquux\"));",
          "    assert!(re_default.is_match(b\"foobarquux\"));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(\"foo(?-i:bar)quux\")",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"fooBARquux\");",
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "    let re_case_insensitive = RegexBuilder::new(\"foo(?-i:bar)quux\").case_insensitive(true).build().unwrap();",
          "    assert!(re_case_insensitive.is_match(b\"FoObarQuUx\"));",
          "    let re_case_sensitive = RegexBuilder::new(\"foo(?-i:bar)quux\").case_insensitive(false).build().unwrap();",
          "    assert!(!re_case_sensitive.is_match(b\"FoObARquux\"));",
          "    let re_default = RegexBuilder::new(\"foo(?-i:bar)quux\").build().unwrap();",
          "    assert!(!re_default.is_match(b\"FoObARquux\"));",
          "    assert!(re_default.is_match(b\"foobarquux\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(\"foo\")",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOO\");",
          "}"
        ],
        "oracle": [
          "    assert!(re.is_match(b\"FOO\"));",
          "    assert!(!re.is_match(b\"bar\"));",
          "    assert!(RegexBuilder::new(\"test\").case_insensitive(true).build().is_ok());",
          "    assert!(RegexBuilder::new(\"foo(?-i:bar)quux\").case_insensitive(true).build().is_ok());",
          "    assert!(!RegexBuilder::new(\"foo(?-i:bar)quux\").case_insensitive(true).build().unwrap().is_match(b\"fooBARquux\"));",
          "    assert!(RegexBuilder::new(\"foo\").case_insensitive(false).build().unwrap().is_match(b\"foo\"));",
          "    assert!(!RegexBuilder::new(\"FOO\").case_insensitive(false).build().unwrap().is_match(b\"foo\"));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(\"foo\")",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOO\");",
          "    assert!(re.is_match(b\"FOO\"));",
          "    assert!(!re.is_match(b\"bar\"));",
          "    assert!(RegexBuilder::new(\"test\").case_insensitive(true).build().is_ok());",
          "    assert!(RegexBuilder::new(\"foo(?-i:bar)quux\").case_insensitive(true).build().is_ok());",
          "    assert!(!RegexBuilder::new(\"foo(?-i:bar)quux\").case_insensitive(true).build().unwrap().is_match(b\"fooBARquux\"));",
          "    assert!(RegexBuilder::new(\"foo\").case_insensitive(false).build().unwrap().is_match(b\"foo\"));",
          "    assert!(!RegexBuilder::new(\"FOO\").case_insensitive(false).build().unwrap().is_match(b\"foo\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(\"(?i:foo)bar\")",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOObar\");",
          "}"
        ],
        "oracle": [
          "    let re = RegexBuilder::new(\"(?i:foo)bar\").case_insensitive(true).build().unwrap();",
          "    assert!(re.is_match(b\"FOObar\"));",
          "    assert!(!re.is_match(b\"fooBAR\"));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(\"(?i:foo)bar\")",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOObar\");",
          "    let re = RegexBuilder::new(\"(?i:foo)bar\").case_insensitive(true).build().unwrap();",
          "    assert!(re.is_match(b\"FOObar\"));",
          "    assert!(!re.is_match(b\"fooBAR\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(\"foo\")",
          "        .size_limit(100)",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOO\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(RegexBuilder::new(\"foo\").case_insensitive(true), RegexBuilder);",
          "    assert_eq!(RegexBuilder::new(\"foo\").case_insensitive(false), RegexBuilder);",
          "    assert!(RegexBuilder::new(\"foo\").case_insensitive(true).build().is_ok());",
          "    assert!(RegexBuilder::new(\"foo\").case_insensitive(false).build().is_ok());",
          "    assert!(RegexBuilder::new(\"foo\").case_insensitive(true).build().unwrap().is_match(b\"FOO\"));",
          "    assert!(!RegexBuilder::new(\"foo\").case_insensitive(false).build().unwrap().is_match(b\"FOO\"));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(\"foo\")",
          "        .size_limit(100)",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOO\");",
          "    assert_eq!(RegexBuilder::new(\"foo\").case_insensitive(true), RegexBuilder);",
          "    assert_eq!(RegexBuilder::new(\"foo\").case_insensitive(false), RegexBuilder);",
          "    assert!(RegexBuilder::new(\"foo\").case_insensitive(true).build().is_ok());",
          "    assert!(RegexBuilder::new(\"foo\").case_insensitive(false).build().is_ok());",
          "    assert!(RegexBuilder::new(\"foo\").case_insensitive(true).build().unwrap().is_match(b\"FOO\"));",
          "    assert!(!RegexBuilder::new(\"foo\").case_insensitive(false).build().unwrap().is_match(b\"FOO\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(\"foo\")",
          "        .dfa_size_limit(100)",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"foo\");",
          "}"
        ],
        "oracle": [
          "    let re = RegexBuilder::new(\"foo\")",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re.is_match(b\"FoO\"));",
          "    ",
          "    let re = RegexBuilder::new(\"foo(?-i:bar)quux\")",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "    ",
          "    let re = RegexBuilder::new(\"foo(?i:bar)quux\")",
          "    .case_insensitive(false)",
          "    .build()",
          "    .unwrap();",
          "    assert!(!re.is_match(b\"FoObarQuUx\"));",
          "    assert!(re.is_match(b\"foobarquux\"));",
          "    ",
          "    let re = RegexBuilder::new(\"FOO\")",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re.is_match(b\"foo\"));",
          "    ",
          "    let re = RegexBuilder::new(\"foo(?-i:BAR)\")",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(!re.is_match(b\"foobarBAR\"));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(\"foo\")",
          "        .dfa_size_limit(100)",
          "        .case_insensitive(false)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"foo\");",
          "    let re = RegexBuilder::new(\"foo\")",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re.is_match(b\"FoO\"));",
          "    ",
          "    let re = RegexBuilder::new(\"foo(?-i:bar)quux\")",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re.is_match(b\"fooBARquux\"));",
          "    ",
          "    let re = RegexBuilder::new(\"foo(?i:bar)quux\")",
          "    .case_insensitive(false)",
          "    .build()",
          "    .unwrap();",
          "    assert!(!re.is_match(b\"FoObarQuUx\"));",
          "    assert!(re.is_match(b\"foobarquux\"));",
          "    ",
          "    let re = RegexBuilder::new(\"FOO\")",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(re.is_match(b\"foo\"));",
          "    ",
          "    let re = RegexBuilder::new(\"foo(?-i:BAR)\")",
          "    .case_insensitive(true)",
          "    .build()",
          "    .unwrap();",
          "    assert!(!re.is_match(b\"foobarBAR\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(\"foo\")",
          "        .line_terminator(10)",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOO\");",
          "}"
        ],
        "oracle": [
          "    let re_case_insensitive = RegexBuilder::new(\"foo\").case_insensitive(true).build().is_ok();",
          "    let re_case_sensitive = RegexBuilder::new(\"foo(?-i:bar)\").case_insensitive(true).build().unwrap();",
          "    assert!(re_case_sensitive.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re_case_sensitive.is_match(b\"fooBARquux\"));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(\"foo\")",
          "        .line_terminator(10)",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOO\");",
          "    let re_case_insensitive = RegexBuilder::new(\"foo\").case_insensitive(true).build().is_ok();",
          "    let re_case_sensitive = RegexBuilder::new(\"foo(?-i:bar)\").case_insensitive(true).build().unwrap();",
          "    assert!(re_case_sensitive.is_match(b\"FoObarQuUx\"));",
          "    assert!(!re_case_sensitive.is_match(b\"fooBARquux\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(\"(foo(bar)?)\")",
          "        .nest_limit(2)",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOOBAR\");",
          "}"
        ],
        "oracle": [
          "    let re = RegexBuilder::new(\"(foo(bar)?)\").case_insensitive(true).build().unwrap();",
          "    assert_eq!(re.is_match(b\"FOOBAR\"), true);",
          "    let re2 = RegexBuilder::new(\"(foo(bar)?)\").case_insensitive(false).build().unwrap();",
          "    assert_eq!(re2.is_match(b\"FOOBAR\"), false);",
          "    let re3 = RegexBuilder::new(\"(foo(bar)?)\").nest_limit(1).case_insensitive(true).build().unwrap();",
          "    assert_eq!(re3.is_match(b\"FOOBAR\"), true);",
          "    let re4 = RegexBuilder::new(\"(foo(bar)?)\").nest_limit(0).case_insensitive(true).build().unwrap();",
          "    assert_eq!(re4.is_match(b\"FOOBAR\"), false);",
          "    let re5 = RegexBuilder::new(\"(foo(bar)?)\").case_insensitive(true).nest_limit(2).build().unwrap();",
          "    assert_eq!(re5.is_match(b\"foobar\"), true);"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(\"(foo(bar)?)\")",
          "        .nest_limit(2)",
          "        .case_insensitive(true)",
          "        .build()",
          "        .unwrap();",
          "    re.is_match(b\"FOOBAR\");",
          "    let re = RegexBuilder::new(\"(foo(bar)?)\").case_insensitive(true).build().unwrap();",
          "    assert_eq!(re.is_match(b\"FOOBAR\"), true);",
          "    let re2 = RegexBuilder::new(\"(foo(bar)?)\").case_insensitive(false).build().unwrap();",
          "    assert_eq!(re2.is_match(b\"FOOBAR\"), false);",
          "    let re3 = RegexBuilder::new(\"(foo(bar)?)\").nest_limit(1).case_insensitive(true).build().unwrap();",
          "    assert_eq!(re3.is_match(b\"FOOBAR\"), true);",
          "    let re4 = RegexBuilder::new(\"(foo(bar)?)\").nest_limit(0).case_insensitive(true).build().unwrap();",
          "    assert_eq!(re4.is_match(b\"FOOBAR\"), false);",
          "    let re5 = RegexBuilder::new(\"(foo(bar)?)\").case_insensitive(true).nest_limit(2).build().unwrap();",
          "    assert_eq!(re5.is_match(b\"foobar\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]