[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unit = Unit(UnitKind::U8(0));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = unit.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"0\");",
          "    assert!(formatter.is_empty());",
          "    assert!(matches!(unit.0, UnitKind::U8(0)));",
          "    assert_eq!(format!(\"{:?}\", unit), \"0\");",
          "    assert!(unit.0 == UnitKind::U8(0));"
        ],
        "code": [
          "{",
          "    let unit = Unit(UnitKind::U8(0));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = unit.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"0\");",
          "    assert!(formatter.is_empty());",
          "    assert!(matches!(unit.0, UnitKind::U8(0)));",
          "    assert_eq!(format!(\"{:?}\", unit), \"0\");",
          "    assert!(unit.0 == UnitKind::U8(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unit = Unit(UnitKind::U8(128));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = unit.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"DebugByte(128)\");",
          "    assert_eq!(unit.0, UnitKind::U8(128));",
          "    assert!(formatter.is_empty());"
        ],
        "code": [
          "{",
          "    let unit = Unit(UnitKind::U8(128));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = unit.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"DebugByte(128)\");",
          "    assert_eq!(unit.0, UnitKind::U8(128));",
          "    assert!(formatter.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let unit = Unit(UnitKind::U8(255));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = unit.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", DebugByte(255)), \"DebugByte(255)\");",
          "    assert!(unit.fmt(&mut formatter).is_ok());"
        ],
        "code": [
          "{",
          "    let unit = Unit(UnitKind::U8(255));",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = unit.fmt(&mut formatter);",
          "    assert_eq!(format!(\"{:?}\", DebugByte(255)), \"DebugByte(255)\");",
          "    assert!(unit.fmt(&mut formatter).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]