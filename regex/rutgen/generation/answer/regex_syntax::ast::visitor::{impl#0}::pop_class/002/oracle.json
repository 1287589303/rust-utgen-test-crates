[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAst;",
          "",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::default(),",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "    };",
          "",
          "    let rhs = ClassSet::Item(ClassSetItem::Literal(Literal::default()));",
          "",
          "    let induct = ClassFrame::BinaryLHS {",
          "        op: &op,",
          "        lhs: &ClassSet::Item(ClassSetItem::Literal(Literal::default())),",
          "        rhs: &rhs,",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "",
          "    let result = visitor.pop_class(induct);",
          "}"
        ],
        "oracle": [
          "    let op = ClassSetBinaryOp { span: Span::default(), kind: ClassSetBinaryOpKind::default(), lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))), rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))), };",
          "    let rhs = ClassSet::Item(ClassSetItem::Literal(Literal::default()));",
          "    let induct = ClassFrame::BinaryLHS { op: &op, lhs: &ClassSet::Item(ClassSetItem::Literal(Literal::default())), rhs: &rhs, };",
          "    let expected = Some(ClassFrame::BinaryRHS { op: &op, rhs: &rhs });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    struct TestAst;",
          "",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::default(),",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "    };",
          "",
          "    let rhs = ClassSet::Item(ClassSetItem::Literal(Literal::default()));",
          "",
          "    let induct = ClassFrame::BinaryLHS {",
          "        op: &op,",
          "        lhs: &ClassSet::Item(ClassSetItem::Literal(Literal::default())),",
          "        rhs: &rhs,",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "",
          "    let result = visitor.pop_class(induct);",
          "    let op = ClassSetBinaryOp { span: Span::default(), kind: ClassSetBinaryOpKind::default(), lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))), rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))), };",
          "    let rhs = ClassSet::Item(ClassSetItem::Literal(Literal::default()));",
          "    let induct = ClassFrame::BinaryLHS { op: &op, lhs: &ClassSet::Item(ClassSetItem::Literal(Literal::default())), rhs: &rhs, };",
          "    let expected = Some(ClassFrame::BinaryRHS { op: &op, rhs: &rhs });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAst;",
          "",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::default(),",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "    };",
          "",
          "    let induct = ClassFrame::BinaryLHS {",
          "        op: &op,",
          "        lhs: &ClassSet::Item(ClassSetItem::Literal(Literal::default())),",
          "        rhs: &ClassSet::Item(ClassSetItem::Empty(Span::default())),",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "",
          "    let result = visitor.pop_class(induct);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(ClassFrame::BinaryRHS { op: &op, rhs: &ClassSet::Item(ClassSetItem::Empty(Span::default())) }));"
        ],
        "code": [
          "{",
          "    struct TestAst;",
          "",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::default(),",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "    };",
          "",
          "    let induct = ClassFrame::BinaryLHS {",
          "        op: &op,",
          "        lhs: &ClassSet::Item(ClassSetItem::Literal(Literal::default())),",
          "        rhs: &ClassSet::Item(ClassSetItem::Empty(Span::default())),",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "",
          "    let result = visitor.pop_class(induct);",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(ClassFrame::BinaryRHS { op: &op, rhs: &ClassSet::Item(ClassSetItem::Empty(Span::default())) }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAst;",
          "",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::DifferentOperation,",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "    };",
          "",
          "    let rhs = ClassSet::Item(ClassSetItem::Literal(Literal::default()));",
          "",
          "    let induct = ClassFrame::BinaryLHS {",
          "        op: &op,",
          "        lhs: &ClassSet::Item(ClassSetItem::Literal(Literal::default())),",
          "        rhs: &rhs,",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "",
          "    let result = visitor.pop_class(induct);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassFrame::BinaryRHS { op: &op, rhs }));"
        ],
        "code": [
          "{",
          "    struct TestAst;",
          "",
          "    let op = ClassSetBinaryOp {",
          "        span: Span::default(),",
          "        kind: ClassSetBinaryOpKind::DifferentOperation,",
          "        lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::default()))),",
          "    };",
          "",
          "    let rhs = ClassSet::Item(ClassSetItem::Literal(Literal::default()));",
          "",
          "    let induct = ClassFrame::BinaryLHS {",
          "        op: &op,",
          "        lhs: &ClassSet::Item(ClassSetItem::Literal(Literal::default())),",
          "        rhs: &rhs,",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "",
          "    let result = visitor.pop_class(induct);",
          "    assert_eq!(result, Some(ClassFrame::BinaryRHS { op: &op, rhs }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]