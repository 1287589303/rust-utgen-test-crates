[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &ClassSetBinaryOp {",
          "            span: Span::new(0, 1),",
          "            kind: ClassSetBinaryOpKind::Union,",
          "            lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::new('a')))),",
          "            rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::new('b')))),",
          "        },",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "    let result = visitor.pop_class(frame);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &ClassSetBinaryOp {",
          "            span: Span::new(0, 1),",
          "            kind: ClassSetBinaryOpKind::Union,",
          "            lhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::new('a')))),",
          "            rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::new('b')))),",
          "        },",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "    let result = visitor.pop_class(frame);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &ClassSetBinaryOp {",
          "            span: Span::new(1, 2),",
          "            kind: ClassSetBinaryOpKind::Intersection,",
          "            lhs: Box::new(ClassSet::Item(ClassSetItem::Range(ClassSetRange::new('a', 'z')))),",
          "            rhs: Box::new(ClassSet::Item(ClassSetItem::Bracketed(Box::new(ClassBracketed::new())))),",
          "        },",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "    let result = visitor.pop_class(frame);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &ClassSetBinaryOp {",
          "            span: Span::new(1, 2),",
          "            kind: ClassSetBinaryOpKind::Intersection,",
          "            lhs: Box::new(ClassSet::Item(ClassSetItem::Range(ClassSetRange::new('a', 'z')))),",
          "            rhs: Box::new(ClassSet::Item(ClassSetItem::Bracketed(Box::new(ClassBracketed::new())))),",
          "        },",
          "    };",
          "",
          "    let visitor = HeapVisitor::new();",
          "    let result = visitor.pop_class(frame);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]