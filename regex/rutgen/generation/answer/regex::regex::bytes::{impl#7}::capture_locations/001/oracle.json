[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    assert!(locs.0.len() > 0);",
          "    assert_eq!(re.captures_len(), locs.0.len());",
          "    assert!(locs.0.is_empty() || locs.0.get(0).is_some());",
          "    assert_eq!(locs.0.get(0), None);",
          "    assert_eq!(re.static_captures_len().is_some(), true);",
          "    assert_eq!(locs.0.capacity(), re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();",
          "    let locs = re.capture_locations();",
          "    assert!(locs.0.len() > 0);",
          "    assert_eq!(re.captures_len(), locs.0.len());",
          "    assert!(locs.0.is_empty() || locs.0.get(0).is_some());",
          "    assert_eq!(locs.0.get(0), None);",
          "    assert_eq!(re.static_captures_len().is_some(), true);",
          "    assert_eq!(locs.0.capacity(), re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(.)\").unwrap();",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(locs, CaptureLocations(re.meta.create_captures()));",
          "    assert!(locs.0.len() > 0);",
          "    assert_eq!(locs.0.get(0), None);",
          "    assert_eq!(locs.0.get(1), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(.)\").unwrap();",
          "    let locs = re.capture_locations();",
          "    assert_eq!(locs, CaptureLocations(re.meta.create_captures()));",
          "    assert!(locs.0.len() > 0);",
          "    assert_eq!(locs.0.get(0), None);",
          "    assert_eq!(locs.0.get(1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(\\w)\").unwrap();",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::mem::size_of_val(&locs), std::mem::size_of::<CaptureLocations>());",
          "    assert!(matches!(locs, CaptureLocations(_)));",
          "    assert!(locs.0.is_empty());",
          "    assert_eq!(locs.0.len(), 0);",
          "    assert!(re.capture_locations().0.is_empty());",
          "    assert_ne!(locs.0, re.capture_locations().0);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(\\w)\").unwrap();",
          "    let locs = re.capture_locations();",
          "    assert_eq!(std::mem::size_of_val(&locs), std::mem::size_of::<CaptureLocations>());",
          "    assert!(matches!(locs, CaptureLocations(_)));",
          "    assert!(locs.0.is_empty());",
          "    assert_eq!(locs.0.len(), 0);",
          "    assert!(re.capture_locations().0.is_empty());",
          "    assert_ne!(locs.0, re.capture_locations().0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(.)(.)(\\w{1,100})\").unwrap();",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    assert!(locs.captures.len() == expected_length);",
          "    assert!(locs.get(0).is_none());",
          "    assert!(locs.get(1).is_none());",
          "    assert!(locs.get(2).is_none());",
          "    assert!(locs.get(3).is_none());",
          "    assert!(locs.get(4).is_none());",
          "    assert_eq!(re.captures_len(), expected_captures_length);",
          "    assert_eq!(re.static_captures_len(), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(.)(.)(\\w{1,100})\").unwrap();",
          "    let locs = re.capture_locations();",
          "    assert!(locs.captures.len() == expected_length);",
          "    assert!(locs.get(0).is_none());",
          "    assert!(locs.get(1).is_none());",
          "    assert!(locs.get(2).is_none());",
          "    assert!(locs.get(3).is_none());",
          "    assert!(locs.get(4).is_none());",
          "    assert_eq!(re.captures_len(), expected_captures_length);",
          "    assert_eq!(re.static_captures_len(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]