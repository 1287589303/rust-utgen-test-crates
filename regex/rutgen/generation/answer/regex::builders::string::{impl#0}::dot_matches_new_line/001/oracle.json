[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "    let hay = \"foo\\nbar\";",
          "    let _ = re.find(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.builder.pats.len(), 1);",
          "    assert!(re.builder.metac.dot_matches_new_line);",
          "    assert_eq!(re.builder.pats[0], r\"foo.bar\");",
          "    assert_eq!(hay, \"foo\\nbar\");",
          "    assert!(re.find(hay).is_some());",
          "    assert_eq!(re.find(hay).map(|m| m.as_str()), Some(\"foo\\nbar\"));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "    let hay = \"foo\\nbar\";",
          "    let _ = re.find(hay);",
          "    assert_eq!(re.builder.pats.len(), 1);",
          "    assert!(re.builder.metac.dot_matches_new_line);",
          "    assert_eq!(re.builder.pats[0], r\"foo.bar\");",
          "    assert_eq!(hay, \"foo\\nbar\");",
          "    assert!(re.find(hay).is_some());",
          "    assert_eq!(re.find(hay).map(|m| m.as_str()), Some(\"foo\\nbar\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "        .dot_matches_new_line(false)",
          "        .build()",
          "        .unwrap();",
          "    let hay = \"foo\\nbar\";",
          "    let _ = re.find(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.dot_matches_new_line(false), &mut RegexBuilder);",
          "    assert!(re.find(hay).is_none());"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "        .dot_matches_new_line(false)",
          "        .build()",
          "        .unwrap();",
          "    let hay = \"foo\\nbar\";",
          "    let _ = re.find(hay);",
          "    assert_eq!(re.dot_matches_new_line(false), &mut RegexBuilder);",
          "    assert!(re.find(hay).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "    let hay = \"foobar\";",
          "    let _ = re.find(hay);",
          "}"
        ],
        "oracle": [
          "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(true).build().unwrap();",
          "    let hay = \"foo\\nbar\";",
          "    assert_eq!(Some(\"foo\\nbar\"), re.find(hay).map(|m| m.as_str()));",
          "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(false).build().unwrap();",
          "    let hay = \"foo\\nbar\";",
          "    assert_eq!(None, re.find(hay));",
          "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(true).build().unwrap();",
          "    let hay = \"fooxbar\";",
          "    assert_eq!(Some(\"fooxbar\"), re.find(hay).map(|m| m.as_str()));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "    let hay = \"foobar\";",
          "    let _ = re.find(hay);",
          "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(true).build().unwrap();",
          "    let hay = \"foo\\nbar\";",
          "    assert_eq!(Some(\"foo\\nbar\"), re.find(hay).map(|m| m.as_str()));",
          "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(false).build().unwrap();",
          "    let hay = \"foo\\nbar\";",
          "    assert_eq!(None, re.find(hay));",
          "    let re = RegexBuilder::new(r\"foo.bar\").dot_matches_new_line(true).build().unwrap();",
          "    let hay = \"fooxbar\";",
          "    assert_eq!(Some(\"fooxbar\"), re.find(hay).map(|m| m.as_str()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "        .case_insensitive(true)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "    let hay = \"FOO\\nBAR\";",
          "    let _ = re.find(hay);",
          "}"
        ],
        "oracle": [
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "    .case_insensitive(true)",
          "    .multi_line(true)",
          "    .dot_matches_new_line(true)",
          "    .build()",
          "    .unwrap();",
          "    assert_eq!(Some(\"FOO\\nBAR\"), re.find(\"FOO\\nBAR\").map(|m| m.as_str()));"
        ],
        "code": [
          "{",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "        .case_insensitive(true)",
          "        .multi_line(true)",
          "        .dot_matches_new_line(true)",
          "        .build()",
          "        .unwrap();",
          "    let hay = \"FOO\\nBAR\";",
          "    let _ = re.find(hay);",
          "    let re = RegexBuilder::new(r\"foo.bar\")",
          "    .case_insensitive(true)",
          "    .multi_line(true)",
          "    .dot_matches_new_line(true)",
          "    .build()",
          "    .unwrap();",
          "    assert_eq!(Some(\"FOO\\nBAR\"), re.find(\"FOO\\nBAR\").map(|m| m.as_str()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]