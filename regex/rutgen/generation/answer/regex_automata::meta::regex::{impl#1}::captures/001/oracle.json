[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"^([0-9]{4})-([0-9]{2})-([0-9]{2})$\").unwrap();",
          "    let mut caps = Captures {",
          "        group_info: GroupInfo::new(),",
          "        pid: Some(PatternID::new(0)),",
          "        slots: vec![None; 6],",
          "    };",
          "    re.captures(\"2010-03-14\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert!(caps.is_match());",
          "    assert_eq!(Some(Span::from(0..4)), caps.get_group(1));",
          "    assert_eq!(Some(Span::from(5..7)), caps.get_group(2));",
          "    assert_eq!(Some(Span::from(8..10)), caps.get_group(3));",
          "    assert_eq!(caps.pid, Some(PatternID::new(0)));",
          "    assert!(caps.slots.len() > 0);",
          "    assert!(caps.slots.iter().all(|&s| s.is_none()));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"^([0-9]{4})-([0-9]{2})-([0-9]{2})$\").unwrap();",
          "    let mut caps = Captures {",
          "        group_info: GroupInfo::new(),",
          "        pid: Some(PatternID::new(0)),",
          "        slots: vec![None; 6],",
          "    };",
          "    re.captures(\"2010-03-14\", &mut caps);",
          "    assert!(caps.is_match());",
          "    assert_eq!(Some(Span::from(0..4)), caps.get_group(1));",
          "    assert_eq!(Some(Span::from(5..7)), caps.get_group(2));",
          "    assert_eq!(Some(Span::from(8..10)), caps.get_group(3));",
          "    assert_eq!(caps.pid, Some(PatternID::new(0)));",
          "    assert!(caps.slots.len() > 0);",
          "    assert!(caps.slots.iter().all(|&s| s.is_none()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"^([0-9]{4})-([0-9]{2})-([0-9]{2})$\").unwrap();",
          "    let mut caps = Captures {",
          "        group_info: GroupInfo::new(),",
          "        pid: Some(PatternID::new(1)),",
          "        slots: vec![None; 6],",
          "    };",
          "    re.captures(\"0000-00-00\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert!(!caps.is_match());",
          "    assert_eq!(caps.get_group(1), None);",
          "    assert_eq!(caps.get_group(2), None);",
          "    assert_eq!(caps.get_group(3), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"^([0-9]{4})-([0-9]{2})-([0-9]{2})$\").unwrap();",
          "    let mut caps = Captures {",
          "        group_info: GroupInfo::new(),",
          "        pid: Some(PatternID::new(1)),",
          "        slots: vec![None; 6],",
          "    };",
          "    re.captures(\"0000-00-00\", &mut caps);",
          "    assert!(!caps.is_match());",
          "    assert_eq!(caps.get_group(1), None);",
          "    assert_eq!(caps.get_group(2), None);",
          "    assert_eq!(caps.get_group(3), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"^([0-9]{4})-([0-9]{2})-([0-9]{2})$\").unwrap();",
          "    let mut caps = Captures {",
          "        group_info: GroupInfo::new(),",
          "        pid: None,",
          "        slots: vec![None; 6],",
          "    };",
          "    re.captures(\"2010/03/14\", &mut caps);",
          "}"
        ],
        "oracle": [
          "    assert!(!caps.is_match());",
          "    assert_eq!(caps.pid, None);",
          "    assert_eq!(caps.slots, vec![None; 6]);",
          "    assert_eq!(caps.get_group(1), None);",
          "    assert_eq!(caps.get_group(2), None);",
          "    assert_eq!(caps.get_group(3), None);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"^([0-9]{4})-([0-9]{2})-([0-9]{2})$\").unwrap();",
          "    let mut caps = Captures {",
          "        group_info: GroupInfo::new(),",
          "        pid: None,",
          "        slots: vec![None; 6],",
          "    };",
          "    re.captures(\"2010/03/14\", &mut caps);",
          "    assert!(!caps.is_match());",
          "    assert_eq!(caps.pid, None);",
          "    assert_eq!(caps.slots, vec![None; 6]);",
          "    assert_eq!(caps.get_group(1), None);",
          "    assert_eq!(caps.get_group(2), None);",
          "    assert_eq!(caps.get_group(3), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]