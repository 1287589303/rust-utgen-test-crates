[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pattern_set = PatternSet::new(5);",
          "    pattern_set.insert(PatternID::new(0)).unwrap();",
          "    pattern_set.insert(PatternID::new(1)).unwrap();",
          "    pattern_set.insert(PatternID::new(2)).unwrap();",
          "    pattern_set.insert(PatternID::new(3)).unwrap();",
          "    pattern_set.insert(PatternID::new(4)).unwrap();",
          "    ",
          "    pattern_set.clear();",
          "    pattern_set.len(); // This call is made to check state after clear",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pattern_set.len(), 0);",
          "    assert!(pattern_set.is_empty());",
          "    for i in 0..5 { assert!(!pattern_set.contains(PatternID::new(i))); }",
          "    assert_eq!(pattern_set.capacity(), 5);",
          "    assert!(!pattern_set.is_full());"
        ],
        "code": [
          "{",
          "    let mut pattern_set = PatternSet::new(5);",
          "    pattern_set.insert(PatternID::new(0)).unwrap();",
          "    pattern_set.insert(PatternID::new(1)).unwrap();",
          "    pattern_set.insert(PatternID::new(2)).unwrap();",
          "    pattern_set.insert(PatternID::new(3)).unwrap();",
          "    pattern_set.insert(PatternID::new(4)).unwrap();",
          "    ",
          "    pattern_set.clear();",
          "    pattern_set.len(); // This call is made to check state after clear",
          "    assert_eq!(pattern_set.len(), 0);",
          "    assert!(pattern_set.is_empty());",
          "    for i in 0..5 { assert!(!pattern_set.contains(PatternID::new(i))); }",
          "    assert_eq!(pattern_set.capacity(), 5);",
          "    assert!(!pattern_set.is_full());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pattern_set = PatternSet::new(10);",
          "    for i in 0..10 {",
          "        pattern_set.insert(PatternID::new(i)).unwrap();",
          "    }",
          "",
          "    pattern_set.clear();",
          "    pattern_set.len(); // This call is made to check state after clear",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pattern_set.len(), 0);",
          "    assert!(pattern_set.is_empty());",
          "    for i in 0..10 {",
          "    assert!(!pattern_set.contains(PatternID::new(i)));",
          "    }"
        ],
        "code": [
          "{",
          "    let mut pattern_set = PatternSet::new(10);",
          "    for i in 0..10 {",
          "        pattern_set.insert(PatternID::new(i)).unwrap();",
          "    }",
          "",
          "    pattern_set.clear();",
          "    pattern_set.len(); // This call is made to check state after clear",
          "    assert_eq!(pattern_set.len(), 0);",
          "    assert!(pattern_set.is_empty());",
          "    for i in 0..10 {",
          "    assert!(!pattern_set.contains(PatternID::new(i)));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pattern_set = PatternSet::new(3);",
          "    pattern_set.insert(PatternID::new(0)).unwrap();",
          "    pattern_set.insert(PatternID::new(1)).unwrap();",
          "",
          "    pattern_set.try_insert(PatternID::new(2)).unwrap(); // Assuming insert was successful",
          "    pattern_set.clear();",
          "    pattern_set.len(); // This call is made to check state after clear",
          "}"
        ],
        "oracle": [
          "    pattern_set.len() == 0",
          "    pattern_set.is_empty() == true",
          "    pattern_set.contains(PatternID::new(0)) == false",
          "    pattern_set.contains(PatternID::new(1)) == false",
          "    pattern_set.contains(PatternID::new(2)) == false"
        ],
        "code": [
          "{",
          "    let mut pattern_set = PatternSet::new(3);",
          "    pattern_set.insert(PatternID::new(0)).unwrap();",
          "    pattern_set.insert(PatternID::new(1)).unwrap();",
          "",
          "    pattern_set.try_insert(PatternID::new(2)).unwrap(); // Assuming insert was successful",
          "    pattern_set.clear();",
          "    pattern_set.len(); // This call is made to check state after clear",
          "    pattern_set.len() == 0",
          "    pattern_set.is_empty() == true",
          "    pattern_set.contains(PatternID::new(0)) == false",
          "    pattern_set.contains(PatternID::new(1)) == false",
          "    pattern_set.contains(PatternID::new(2)) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]