[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"uFF\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(0),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    parser.parse_hex();",
          "}"
        ],
        "oracle": [
          "    assert!(parser.char() == 'u');",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.char() != '{');",
          "    let result = parser.parse_hex();",
          "    assert!(result.is_ok());",
          "    let literal = result.unwrap();",
          "    assert_eq!(literal.c, '\\u{FF}');",
          "    assert_eq!(literal.kind, ast::HexLiteralKind::UnicodeShort);",
          "    assert!(literal.span.start > 0);",
          "    assert!(literal.span.end > literal.span.start);"
        ],
        "code": [
          "{",
          "    let pattern = \"uFF\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(0),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    parser.parse_hex();",
          "    assert!(parser.char() == 'u');",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.char() != '{');",
          "    let result = parser.parse_hex();",
          "    assert!(result.is_ok());",
          "    let literal = result.unwrap();",
          "    assert_eq!(literal.c, '\\u{FF}');",
          "    assert_eq!(literal.kind, ast::HexLiteralKind::UnicodeShort);",
          "    assert!(literal.span.start > 0);",
          "    assert!(literal.span.end > literal.span.start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"u 10\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(0),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    parser.parse_hex();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), 'u');",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_ne!(parser.char(), '{');",
          "    assert!(matches!(parser.parse_hex(), Err(ast::ErrorKind::EscapeUnexpectedEof)));",
          "    assert_eq!(parser.scratch.borrow().len(), 0);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(matches!(parser.parse_hex(), Err(ast::ErrorKind::EscapeHexInvalid)));"
        ],
        "code": [
          "{",
          "    let pattern = \"u 10\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(0),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    parser.parse_hex();",
          "    assert_eq!(parser.char(), 'u');",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_ne!(parser.char(), '{');",
          "    assert!(matches!(parser.parse_hex(), Err(ast::ErrorKind::EscapeUnexpectedEof)));",
          "    assert_eq!(parser.scratch.borrow().len(), 0);",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert!(matches!(parser.parse_hex(), Err(ast::ErrorKind::EscapeHexInvalid)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"u    21\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(0),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    parser.parse_hex();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), 'u');",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_ne!(parser.char(), '{');",
          "    assert_matches!(parser.parse_hex(), Ok(ast::Literal { kind: ast::HexLiteralKind::UnicodeShort, .. }));",
          "    assert!(parser.scratch.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let pattern = \"u    21\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(0),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    parser.parse_hex();",
          "    assert_eq!(parser.char(), 'u');",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_ne!(parser.char(), '{');",
          "    assert_matches!(parser.parse_hex(), Ok(ast::Literal { kind: ast::HexLiteralKind::UnicodeShort, .. }));",
          "    assert!(parser.scratch.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]