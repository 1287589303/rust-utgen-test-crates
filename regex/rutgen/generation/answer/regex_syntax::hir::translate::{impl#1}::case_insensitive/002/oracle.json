[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.case_insensitive(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.case_insensitive, None);",
          "    assert!(std::ptr::eq(result, &builder));",
          "    assert!(result.is::<&mut TranslatorBuilder>());",
          "    assert!(result.flags.multi_line.is_none());",
          "    assert!(result.flags.dot_matches_new_line.is_none());",
          "    assert!(result.flags.crlf.is_none());",
          "    assert!(result.flags.swap_greed.is_none());",
          "    assert!(result.flags.unicode.is_none());"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.case_insensitive(false);",
          "    assert_eq!(result.flags.case_insensitive, None);",
          "    assert!(std::ptr::eq(result, &builder));",
          "    assert!(result.is::<&mut TranslatorBuilder>());",
          "    assert!(result.flags.multi_line.is_none());",
          "    assert!(result.flags.dot_matches_new_line.is_none());",
          "    assert!(result.flags.crlf.is_none());",
          "    assert!(result.flags.swap_greed.is_none());",
          "    assert!(result.flags.unicode.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.case_insensitive(false).case_insensitive(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.flags.case_insensitive, None);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.case_insensitive(false).case_insensitive(false);",
          "    assert_eq!(result.flags.case_insensitive, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.case_insensitive(false)",
          "        .case_insensitive(true)",
          "        .case_insensitive(false);",
          "}"
        ],
        "oracle": [
          "    let builder = TranslatorBuilder::new();",
          "    let result = builder.case_insensitive(false);",
          "    assert_eq!(result.flags.case_insensitive, None);",
          "    let result = result.case_insensitive(true);",
          "    assert_eq!(result.flags.case_insensitive, Some(true));",
          "    let result = result.case_insensitive(false);",
          "    assert_eq!(result.flags.case_insensitive, None);"
        ],
        "code": [
          "{",
          "    let mut builder = TranslatorBuilder::new();",
          "    let result = builder.case_insensitive(false)",
          "        .case_insensitive(true)",
          "        .case_insensitive(false);",
          "    let builder = TranslatorBuilder::new();",
          "    let result = builder.case_insensitive(false);",
          "    assert_eq!(result.flags.case_insensitive, None);",
          "    let result = result.case_insensitive(true);",
          "    assert_eq!(result.flags.case_insensitive, Some(true));",
          "    let result = result.case_insensitive(false);",
          "    assert_eq!(result.flags.case_insensitive, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]