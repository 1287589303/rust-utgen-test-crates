[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl TestHir {",
          "        fn properties(&self) -> &Properties {",
          "            &self.props",
          "        }",
          "    }",
          "",
          "    let hir1 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(2),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let hir2 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(3),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let concat_hirs = vec![hir1, hir2];",
          "",
          "    let _result = Properties::concat(&concat_hirs);",
          "}"
        ],
        "oracle": [
          "    let concat_hirs = vec![hir1, hir2];",
          "    let result = Properties::concat(&concat_hirs);",
          "    assert_eq!(result.minimum_len, Some(2));",
          "    assert_eq!(result.maximum_len, Some(5));",
          "    assert!(result.utf8);",
          "    assert!(result.literal);",
          "    assert!(result.alternation_literal);",
          "    assert_eq!(result.explicit_captures_len, 0);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "    assert_eq!(result.look_set.len(), 0);",
          "    assert_eq!(result.look_set_prefix.len(), std::u32::MAX);",
          "    assert_eq!(result.look_set_suffix.len(), std::u32::MAX);",
          "    assert_eq!(result.look_set_prefix_any.len(), 0);",
          "    assert_eq!(result.look_set_suffix_any.len(), 0);"
        ],
        "code": [
          "{",
          "    struct TestHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl TestHir {",
          "        fn properties(&self) -> &Properties {",
          "            &self.props",
          "        }",
          "    }",
          "",
          "    let hir1 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(2),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let hir2 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(3),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let concat_hirs = vec![hir1, hir2];",
          "",
          "    let _result = Properties::concat(&concat_hirs);",
          "    let concat_hirs = vec![hir1, hir2];",
          "    let result = Properties::concat(&concat_hirs);",
          "    assert_eq!(result.minimum_len, Some(2));",
          "    assert_eq!(result.maximum_len, Some(5));",
          "    assert!(result.utf8);",
          "    assert!(result.literal);",
          "    assert!(result.alternation_literal);",
          "    assert_eq!(result.explicit_captures_len, 0);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "    assert_eq!(result.look_set.len(), 0);",
          "    assert_eq!(result.look_set_prefix.len(), std::u32::MAX);",
          "    assert_eq!(result.look_set_suffix.len(), std::u32::MAX);",
          "    assert_eq!(result.look_set_prefix_any.len(), 0);",
          "    assert_eq!(result.look_set_suffix_any.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl TestHir {",
          "        fn properties(&self) -> &Properties {",
          "            &self.props",
          "        }",
          "    }",
          "",
          "    let hir1 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(2),",
          "            maximum_len: Some(4),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let hir2 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(5),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let hir3 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(2),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let concat_hirs = vec![hir1, hir2, hir3];",
          "",
          "    let _result = Properties::concat(&concat_hirs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.minimum_len, Some(4));",
          "    assert_eq!(_result.maximum_len, Some(11));",
          "    assert!(_result.look_set.is_empty());",
          "    assert!(!_result.look_set_prefix.is_empty());",
          "    assert!(!_result.look_set_suffix.is_empty());",
          "    assert!(_result.look_set_prefix_any.is_empty());",
          "    assert!(_result.look_set_suffix_any.is_empty());",
          "    assert!(_result.utf8);",
          "    assert_eq!(_result.explicit_captures_len, 0);",
          "    assert_eq!(_result.static_explicit_captures_len, Some(0));",
          "    assert!(_result.literal);",
          "    assert!(_result.alternation_literal);"
        ],
        "code": [
          "{",
          "    struct TestHir {",
          "        props: Properties,",
          "    }",
          "",
          "    impl TestHir {",
          "        fn properties(&self) -> &Properties {",
          "            &self.props",
          "        }",
          "    }",
          "",
          "    let hir1 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(2),",
          "            maximum_len: Some(4),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let hir2 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(5),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let hir3 = TestHir {",
          "        props: Properties(Box::new(PropertiesI {",
          "            minimum_len: Some(1),",
          "            maximum_len: Some(2),",
          "            look_set: LookSet::empty(),",
          "            look_set_prefix: LookSet::full(),",
          "            look_set_suffix: LookSet::full(),",
          "            look_set_prefix_any: LookSet::empty(),",
          "            look_set_suffix_any: LookSet::empty(),",
          "            utf8: true,",
          "            explicit_captures_len: 0,",
          "            static_explicit_captures_len: Some(0),",
          "            literal: true,",
          "            alternation_literal: true,",
          "        })),",
          "    };",
          "",
          "    let concat_hirs = vec![hir1, hir2, hir3];",
          "",
          "    let _result = Properties::concat(&concat_hirs);",
          "    assert_eq!(_result.minimum_len, Some(4));",
          "    assert_eq!(_result.maximum_len, Some(11));",
          "    assert!(_result.look_set.is_empty());",
          "    assert!(!_result.look_set_prefix.is_empty());",
          "    assert!(!_result.look_set_suffix.is_empty());",
          "    assert!(_result.look_set_prefix_any.is_empty());",
          "    assert!(_result.look_set_suffix_any.is_empty());",
          "    assert!(_result.utf8);",
          "    assert_eq!(_result.explicit_captures_len, 0);",
          "    assert_eq!(_result.static_explicit_captures_len, Some(0));",
          "    assert!(_result.literal);",
          "    assert!(_result.alternation_literal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]