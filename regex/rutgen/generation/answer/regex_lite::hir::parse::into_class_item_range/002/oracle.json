[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(into_class_item_range(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok('a'));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('a'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    assert_eq!(into_class_item_range(Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok('a'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('Z'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Char('Z'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('Z'));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('Z'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    let hir = Hir { kind: HirKind::Char('Z'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('0'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('a'));",
          "    let hir = Hir { kind: HirKind::Char('1'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('1'));",
          "    let hir = Hir { kind: HirKind::Char('!'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('!'));",
          "    let hir = Hir { kind: HirKind::Char('Z'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('Z'));",
          "    let hir = Hir { kind: HirKind::Char(' '), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok(' '));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('0'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    let hir = Hir { kind: HirKind::Char('a'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('a'));",
          "    let hir = Hir { kind: HirKind::Char('1'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('1'));",
          "    let hir = Hir { kind: HirKind::Char('!'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('!'));",
          "    let hir = Hir { kind: HirKind::Char('Z'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('Z'));",
          "    let hir = Hir { kind: HirKind::Char(' '), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok(' '));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('@'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(into_class_item_range(Hir { kind: HirKind::Char('@'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok('@'));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('@'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    assert_eq!(into_class_item_range(Hir { kind: HirKind::Char('@'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }), Ok('@'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('#'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Char('#'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('#'));"
        ],
        "code": [
          "{",
          "    let hir = Hir {",
          "        kind: HirKind::Char('#'),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    let hir = Hir { kind: HirKind::Char('#'), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None }; assert_eq!(into_class_item_range(hir), Ok('#'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]