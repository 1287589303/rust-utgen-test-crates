[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidHirKind;",
          "    let hir = Hir {",
          "        kind: HirKind::Group(Box::new(InvalidHirKind)),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Group(Box::new(InvalidHirKind)), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_range(hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)));"
        ],
        "code": [
          "{",
          "    struct InvalidHirKind;",
          "    let hir = Hir {",
          "        kind: HirKind::Group(Box::new(InvalidHirKind)),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    let hir = Hir { kind: HirKind::Group(Box::new(InvalidHirKind)), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_range(hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidHirKind;",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Concat(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_range(hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::new(ERR_CLASS_INVALID_RANGE_ITEM));"
        ],
        "code": [
          "{",
          "    struct InvalidHirKind;",
          "    let hir = Hir {",
          "        kind: HirKind::Concat(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    let hir = Hir { kind: HirKind::Concat(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_range(hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::new(ERR_CLASS_INVALID_RANGE_ITEM));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidHirKind;",
          "    let hir = Hir {",
          "        kind: HirKind::Alt(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Alt(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    assert_eq!(into_class_item_range(hir), Err(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)));"
        ],
        "code": [
          "{",
          "    struct InvalidHirKind;",
          "    let hir = Hir {",
          "        kind: HirKind::Alt(vec![]),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    let hir = Hir { kind: HirKind::Alt(vec![]), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    assert_eq!(into_class_item_range(hir), Err(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InvalidHirKind;",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(Box::new(InvalidHirKind), None, None),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "}"
        ],
        "oracle": [
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(InvalidHirKind), None, None), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_range(hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::new(ERR_CLASS_INVALID_RANGE_ITEM));"
        ],
        "code": [
          "{",
          "    struct InvalidHirKind;",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(Box::new(InvalidHirKind), None, None),",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "    };",
          "    let _ = into_class_item_range(hir);",
          "    let hir = Hir { kind: HirKind::Repetition(Box::new(InvalidHirKind), None, None), is_start_anchored: false, is_match_empty: false, static_explicit_captures_len: None };",
          "    let result = into_class_item_range(hir);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::new(ERR_CLASS_INVALID_RANGE_ITEM));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]