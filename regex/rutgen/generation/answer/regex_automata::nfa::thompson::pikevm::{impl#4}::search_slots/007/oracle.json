[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::never_match();",
          "    let config = Config { ",
          "        utf8: Some(true), ",
          "        ..Default::default() ",
          "    };",
          "    let pike_vm = PikeVM { ",
          "        config, ",
          "        nfa ",
          "    };",
          "    ",
          "    let mut cache = Cache { ",
          "        stack: vec![], ",
          "        curr: ActiveStates::default(), ",
          "        next: ActiveStates::default() ",
          "    };",
          "    ",
          "    let input = Input { ",
          "        haystack: b\"test\", ",
          "        span: Span::full(), ",
          "        anchored: Anchored::None, ",
          "        earliest: true ",
          "    };",
          "",
          "    let min = pike_vm.get_nfa().group_info().implicit_slot_len();",
          "    let mut slots = vec![None; min];",
          "",
          "    let result = pike_vm.search_slots(&mut cache, &input, &mut slots);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert!(slots.iter().all(|&slot| slot.is_none()));",
          "    assert!(!pike_vm.get_nfa().has_empty());",
          "    assert!(pike_vm.get_nfa().is_utf8());",
          "    assert_eq!(slots.len(), min);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::never_match();",
          "    let config = Config { ",
          "        utf8: Some(true), ",
          "        ..Default::default() ",
          "    };",
          "    let pike_vm = PikeVM { ",
          "        config, ",
          "        nfa ",
          "    };",
          "    ",
          "    let mut cache = Cache { ",
          "        stack: vec![], ",
          "        curr: ActiveStates::default(), ",
          "        next: ActiveStates::default() ",
          "    };",
          "    ",
          "    let input = Input { ",
          "        haystack: b\"test\", ",
          "        span: Span::full(), ",
          "        anchored: Anchored::None, ",
          "        earliest: true ",
          "    };",
          "",
          "    let min = pike_vm.get_nfa().group_info().implicit_slot_len();",
          "    let mut slots = vec![None; min];",
          "",
          "    let result = pike_vm.search_slots(&mut cache, &input, &mut slots);",
          "    assert_eq!(result, None);",
          "    assert!(slots.iter().all(|&slot| slot.is_none()));",
          "    assert!(!pike_vm.get_nfa().has_empty());",
          "    assert!(pike_vm.get_nfa().is_utf8());",
          "    assert_eq!(slots.len(), min);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]