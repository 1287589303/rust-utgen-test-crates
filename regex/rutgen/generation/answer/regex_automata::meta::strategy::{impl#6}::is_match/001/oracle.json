[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cache = &mut Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "  ",
          "    let input = Input::new(b\"test input\")",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "",
          "    let core = Core::new(RegexInfo::default(), None, &[]).unwrap();",
          "    let strategy = ReverseAnchored { core };",
          "  ",
          "    strategy.is_match(cache, &input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(strategy.is_match(cache, &input), core.is_match(cache, &input));"
        ],
        "code": [
          "{",
          "    let cache = &mut Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "  ",
          "    let input = Input::new(b\"test input\")",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "",
          "    let core = Core::new(RegexInfo::default(), None, &[]).unwrap();",
          "    let strategy = ReverseAnchored { core };",
          "  ",
          "    strategy.is_match(cache, &input);",
          "    assert_eq!(strategy.is_match(cache, &input), core.is_match(cache, &input));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID::default();",
          "    let cache = &mut Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let input = Input::new(b\"test input\")",
          "        .anchored(Anchored::Pattern(pattern_id))",
          "        .earliest(false);",
          "    ",
          "    let core = Core::new(RegexInfo::default(), None, &[]).unwrap();",
          "    let strategy = ReverseAnchored { core };",
          "",
          "    strategy.is_match(cache, &input);",
          "}"
        ],
        "oracle": [
          "    let pattern_id = PatternID::default();",
          "    let cache = &mut Cache {",
          "    capmatches: Captures::default(),",
          "    pikevm: wrappers::PikeVMCache::default(),",
          "    backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "    onepass: wrappers::OnePassCache::default(),",
          "    hybrid: wrappers::HybridCache::default(),",
          "    revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "    let input = Input::new(b\"test input\")",
          "    .anchored(Anchored::Pattern(pattern_id))",
          "    .earliest(false);",
          "    let core = Core::new(RegexInfo::default(), None, &[]).unwrap();",
          "    let strategy = ReverseAnchored { core };",
          "    assert!(strategy.is_match(cache, &input));"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID::default();",
          "    let cache = &mut Cache {",
          "        capmatches: Captures::default(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "",
          "    let input = Input::new(b\"test input\")",
          "        .anchored(Anchored::Pattern(pattern_id))",
          "        .earliest(false);",
          "    ",
          "    let core = Core::new(RegexInfo::default(), None, &[]).unwrap();",
          "    let strategy = ReverseAnchored { core };",
          "",
          "    strategy.is_match(cache, &input);",
          "    let pattern_id = PatternID::default();",
          "    let cache = &mut Cache {",
          "    capmatches: Captures::default(),",
          "    pikevm: wrappers::PikeVMCache::default(),",
          "    backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "    onepass: wrappers::OnePassCache::default(),",
          "    hybrid: wrappers::HybridCache::default(),",
          "    revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "    let input = Input::new(b\"test input\")",
          "    .anchored(Anchored::Pattern(pattern_id))",
          "    .earliest(false);",
          "    let core = Core::new(RegexInfo::default(), None, &[]).unwrap();",
          "    let strategy = ReverseAnchored { core };",
          "    assert!(strategy.is_match(cache, &input));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]