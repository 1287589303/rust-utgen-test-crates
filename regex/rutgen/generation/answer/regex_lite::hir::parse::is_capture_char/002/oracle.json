[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '_';",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert!(is_capture_char('_', true));",
          "    assert_eq!(is_capture_char('_', true), true);",
          "    assert_eq!(is_capture_char('A', true), true);",
          "    assert_eq!(is_capture_char('z', true), true);",
          "    assert_eq!(is_capture_char('1', true), false);",
          "    assert_eq!(is_capture_char('.', true), false);",
          "    assert_eq!(is_capture_char('[', true), false);",
          "    assert!(!is_capture_char('_', false));",
          "    assert!(is_capture_char('A', false));",
          "    assert!(is_capture_char('0', false));",
          "    assert!(!is_capture_char('.', false));",
          "    assert!(!is_capture_char('[', false));",
          "    assert!(is_capture_char('1', false));",
          "    assert!(is_capture_char('a', false));",
          "    assert!(!is_capture_char('-', true));"
        ],
        "code": [
          "{",
          "    let c = '_';",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "    assert!(is_capture_char('_', true));",
          "    assert_eq!(is_capture_char('_', true), true);",
          "    assert_eq!(is_capture_char('A', true), true);",
          "    assert_eq!(is_capture_char('z', true), true);",
          "    assert_eq!(is_capture_char('1', true), false);",
          "    assert_eq!(is_capture_char('.', true), false);",
          "    assert_eq!(is_capture_char('[', true), false);",
          "    assert!(!is_capture_char('_', false));",
          "    assert!(is_capture_char('A', false));",
          "    assert!(is_capture_char('0', false));",
          "    assert!(!is_capture_char('.', false));",
          "    assert!(!is_capture_char('[', false));",
          "    assert!(is_capture_char('1', false));",
          "    assert!(is_capture_char('a', false));",
          "    assert!(!is_capture_char('-', true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'A';",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', true), true);",
          "    assert_eq!(is_capture_char('A', true), true);",
          "    assert_eq!(is_capture_char('Z', true), true);",
          "    assert_eq!(is_capture_char('1', true), false);",
          "    assert_eq!(is_capture_char('.', true), false);",
          "    assert_eq!(is_capture_char('[', true), false);",
          "    assert_eq!(is_capture_char(']', true), false);",
          "    assert_eq!(is_capture_char('a', true), true);",
          "    assert_eq!(is_capture_char('b', true), true);",
          "    assert_eq!(is_capture_char('0', true), false);"
        ],
        "code": [
          "{",
          "    let c = 'A';",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', true), true);",
          "    assert_eq!(is_capture_char('A', true), true);",
          "    assert_eq!(is_capture_char('Z', true), true);",
          "    assert_eq!(is_capture_char('1', true), false);",
          "    assert_eq!(is_capture_char('.', true), false);",
          "    assert_eq!(is_capture_char('[', true), false);",
          "    assert_eq!(is_capture_char(']', true), false);",
          "    assert_eq!(is_capture_char('a', true), true);",
          "    assert_eq!(is_capture_char('b', true), true);",
          "    assert_eq!(is_capture_char('0', true), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'z';",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert!(is_capture_char('_', true));",
          "    assert!(is_capture_char('A', true));",
          "    assert!(!is_capture_char('1', true));",
          "    assert!(!is_capture_char('.', true));",
          "    assert!(!is_capture_char('[', true));",
          "    assert!(!is_capture_char(']', true));",
          "    assert!(!is_capture_char(' ', true));",
          "    assert!(is_capture_char('_', false));",
          "    assert!(is_capture_char('A', false));",
          "    assert!(is_capture_char('1', false));",
          "    assert!(is_capture_char('.', false));",
          "    assert!(is_capture_char('[', false));",
          "    assert!(is_capture_char(']', false));",
          "    assert!(!is_capture_char(' ', false));"
        ],
        "code": [
          "{",
          "    let c = 'z';",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "    assert!(is_capture_char('_', true));",
          "    assert!(is_capture_char('A', true));",
          "    assert!(!is_capture_char('1', true));",
          "    assert!(!is_capture_char('.', true));",
          "    assert!(!is_capture_char('[', true));",
          "    assert!(!is_capture_char(']', true));",
          "    assert!(!is_capture_char(' ', true));",
          "    assert!(is_capture_char('_', false));",
          "    assert!(is_capture_char('A', false));",
          "    assert!(is_capture_char('1', false));",
          "    assert!(is_capture_char('.', false));",
          "    assert!(is_capture_char('[', false));",
          "    assert!(is_capture_char(']', false));",
          "    assert!(!is_capture_char(' ', false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '1';",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', true), true);"
        ],
        "code": [
          "{",
          "    let c = '1';",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', true), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '!'; ",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', true), true);",
          "    assert_eq!(is_capture_char('a', true), true);",
          "    assert_eq!(is_capture_char('Z', true), true);",
          "    assert_eq!(is_capture_char('0', true), false);",
          "    assert_eq!(is_capture_char('.', true), false);",
          "    assert_eq!(is_capture_char('[', true), false);",
          "    assert_eq!(is_capture_char(']', true), false);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('b', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('!', true), false);",
          "    assert_eq!(is_capture_char('-', true), false);",
          "    assert_eq!(is_capture_char(' ', true), false);"
        ],
        "code": [
          "{",
          "    let c = '!'; ",
          "    let first = true;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', true), true);",
          "    assert_eq!(is_capture_char('a', true), true);",
          "    assert_eq!(is_capture_char('Z', true), true);",
          "    assert_eq!(is_capture_char('0', true), false);",
          "    assert_eq!(is_capture_char('.', true), false);",
          "    assert_eq!(is_capture_char('[', true), false);",
          "    assert_eq!(is_capture_char(']', true), false);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('b', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('!', true), false);",
          "    assert_eq!(is_capture_char('-', true), false);",
          "    assert_eq!(is_capture_char(' ', true), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]