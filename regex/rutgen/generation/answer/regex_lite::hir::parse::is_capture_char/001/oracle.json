[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_inputs = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '=', '+', '{', '}', '|', ':', ';', '\"', '\\'', '<', '>', ',', '.', '?', '/', '\\\\'];",
          "    for &c in &test_inputs {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(!is_capture_char('0', true));",
          "    assert!(!is_capture_char('1', true));",
          "    assert!(!is_capture_char('2', true));",
          "    assert!(!is_capture_char('3', true));",
          "    assert!(!is_capture_char('4', true));",
          "    assert!(!is_capture_char('5', true));",
          "    assert!(!is_capture_char('6', true));",
          "    assert!(!is_capture_char('7', true));",
          "    assert!(!is_capture_char('8', true));",
          "    assert!(!is_capture_char('9', true));",
          "    assert!(!is_capture_char('!', true));",
          "    assert!(!is_capture_char('@', true));",
          "    assert!(!is_capture_char('#', true));",
          "    assert!(!is_capture_char('$', true));",
          "    assert!(!is_capture_char('%', true));",
          "    assert!(!is_capture_char('^', true));",
          "    assert!(!is_capture_char('&', true));",
          "    assert!(!is_capture_char('*', true));",
          "    assert!(!is_capture_char('(', true));",
          "    assert!(!is_capture_char(')', true));",
          "    assert!(!is_capture_char('-', true));",
          "    assert!(!is_capture_char('=', true));",
          "    assert!(!is_capture_char('+', true));",
          "    assert!(!is_capture_char('{', true));",
          "    assert!(!is_capture_char('}', true));",
          "    assert!(!is_capture_char('|', true));",
          "    assert!(!is_capture_char(':', true));",
          "    assert!(!is_capture_char(';', true));",
          "    assert!(!is_capture_char('\"', true));",
          "    assert!(!is_capture_char('\\'', true));",
          "    assert!(!is_capture_char('<', true));",
          "    assert!(!is_capture_char('>', true));",
          "    assert!(!is_capture_char(',', true));",
          "    assert!(!is_capture_char('.', true));",
          "    assert!(!is_capture_char('?', true));",
          "    assert!(!is_capture_char('/', true));",
          "    assert!(!is_capture_char('\\\\', true));"
        ],
        "code": [
          "{",
          "    let test_inputs = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '=', '+', '{', '}', '|', ':', ';', '\"', '\\'', '<', '>', ',', '.', '?', '/', '\\\\'];",
          "    for &c in &test_inputs {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "    assert!(!is_capture_char('0', true));",
          "    assert!(!is_capture_char('1', true));",
          "    assert!(!is_capture_char('2', true));",
          "    assert!(!is_capture_char('3', true));",
          "    assert!(!is_capture_char('4', true));",
          "    assert!(!is_capture_char('5', true));",
          "    assert!(!is_capture_char('6', true));",
          "    assert!(!is_capture_char('7', true));",
          "    assert!(!is_capture_char('8', true));",
          "    assert!(!is_capture_char('9', true));",
          "    assert!(!is_capture_char('!', true));",
          "    assert!(!is_capture_char('@', true));",
          "    assert!(!is_capture_char('#', true));",
          "    assert!(!is_capture_char('$', true));",
          "    assert!(!is_capture_char('%', true));",
          "    assert!(!is_capture_char('^', true));",
          "    assert!(!is_capture_char('&', true));",
          "    assert!(!is_capture_char('*', true));",
          "    assert!(!is_capture_char('(', true));",
          "    assert!(!is_capture_char(')', true));",
          "    assert!(!is_capture_char('-', true));",
          "    assert!(!is_capture_char('=', true));",
          "    assert!(!is_capture_char('+', true));",
          "    assert!(!is_capture_char('{', true));",
          "    assert!(!is_capture_char('}', true));",
          "    assert!(!is_capture_char('|', true));",
          "    assert!(!is_capture_char(':', true));",
          "    assert!(!is_capture_char(';', true));",
          "    assert!(!is_capture_char('\"', true));",
          "    assert!(!is_capture_char('\\'', true));",
          "    assert!(!is_capture_char('<', true));",
          "    assert!(!is_capture_char('>', true));",
          "    assert!(!is_capture_char(',', true));",
          "    assert!(!is_capture_char('.', true));",
          "    assert!(!is_capture_char('?', true));",
          "    assert!(!is_capture_char('/', true));",
          "    assert!(!is_capture_char('\\\\', true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special_chars = vec!['`', '~', ' ', '\\t', '\\n'];",
          "    for &c in &special_chars {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('`', true), false);",
          "    assert_eq!(is_capture_char('~', true), false);",
          "    assert_eq!(is_capture_char(' ', true), false);",
          "    assert_eq!(is_capture_char('\\t', true), false);",
          "    assert_eq!(is_capture_char('\\n', true), false);"
        ],
        "code": [
          "{",
          "    let special_chars = vec!['`', '~', ' ', '\\t', '\\n'];",
          "    for &c in &special_chars {",
          "        let result = is_capture_char(c, true);",
          "    }",
          "    assert_eq!(is_capture_char('`', true), false);",
          "    assert_eq!(is_capture_char('~', true), false);",
          "    assert_eq!(is_capture_char(' ', true), false);",
          "    assert_eq!(is_capture_char('\\t', true), false);",
          "    assert_eq!(is_capture_char('\\n', true), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]