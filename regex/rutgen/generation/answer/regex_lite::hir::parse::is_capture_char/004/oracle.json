[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphanumeric_chars = ['a', '1', 'Z', '9'];",
          "    for &c in &alphanumeric_chars {",
          "        let result = is_capture_char(c, false);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('Z', false), true);",
          "    assert_eq!(is_capture_char('9', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char(' ', false), false);"
        ],
        "code": [
          "{",
          "    let alphanumeric_chars = ['a', '1', 'Z', '9'];",
          "    for &c in &alphanumeric_chars {",
          "        let result = is_capture_char(c, false);",
          "    }",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('Z', false), true);",
          "    assert_eq!(is_capture_char('9', false), true);",
          "    assert_eq!(is_capture_char('.', false), false);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char(' ', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '_';",
          "    let result = is_capture_char(c, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);  // Check that '_' is a valid capture character",
          "    assert!(result == (c == '_' || c == '.' || c == '[' || c == ']' || c.is_alphanumeric()));  // Validate against expected return conditions"
        ],
        "code": [
          "{",
          "    let c = '_';",
          "    let result = is_capture_char(c, false);",
          "    assert_eq!(result, true);  // Check that '_' is a valid capture character",
          "    assert!(result == (c == '_' || c == '.' || c == '[' || c == ']' || c.is_alphanumeric()));  // Validate against expected return conditions",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '[';",
          "    let result = is_capture_char(c, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let c = '[';",
          "    let result = is_capture_char(c, false);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = ']';",
          "    let result = is_capture_char(c, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let c = ']';",
          "    let result = is_capture_char(c, false);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]