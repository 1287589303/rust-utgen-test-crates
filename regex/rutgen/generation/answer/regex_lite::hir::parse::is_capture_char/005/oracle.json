[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('_', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), false);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('?', false), false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), false);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('?', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('.', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);  // Check '.' is valid for capture group name",
          "    result = is_capture_char('_', false);",
          "    assert_eq!(result, true);  // Check '_' is valid for capture group name",
          "    result = is_capture_char('[', false);",
          "    assert_eq!(result, false); // Check '[' is invalid for capture group name",
          "    result = is_capture_char('a', false);",
          "    assert_eq!(result, true);  // Check alphanumeric 'a' is valid for capture group name",
          "    result = is_capture_char('!', false);",
          "    assert_eq!(result, false); // Check '!' is invalid for capture group name"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);  // Check '.' is valid for capture group name",
          "    result = is_capture_char('_', false);",
          "    assert_eq!(result, true);  // Check '_' is valid for capture group name",
          "    result = is_capture_char('[', false);",
          "    assert_eq!(result, false); // Check '[' is invalid for capture group name",
          "    result = is_capture_char('a', false);",
          "    assert_eq!(result, true);  // Check alphanumeric 'a' is valid for capture group name",
          "    result = is_capture_char('!', false);",
          "    assert_eq!(result, false); // Check '!' is invalid for capture group name",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result_a = is_capture_char('a', false);",
          "    let result_b = is_capture_char('Z', false);",
          "    let result_c = is_capture_char('9', false);",
          "}"
        ],
        "oracle": [
          "    assert!(is_capture_char('_', false)); // precondition: c == '_' is true",
          "    assert!(is_capture_char('.', false)); // precondition: c == '.' is true",
          "    assert!(!is_capture_char('[', false)); // precondition: c == '[' is false",
          "    assert!(is_capture_char('0', false)); // checks alphanumeric, should return true",
          "    assert!(is_capture_char('A', false)); // checks alphanumeric, should return true",
          "    assert!(!is_capture_char('!', false)); // tests invalid character, should return false",
          "    assert!(!is_capture_char('/', false)); // tests invalid character, should return false"
        ],
        "code": [
          "{",
          "    let result_a = is_capture_char('a', false);",
          "    let result_b = is_capture_char('Z', false);",
          "    let result_c = is_capture_char('9', false);",
          "    assert!(is_capture_char('_', false)); // precondition: c == '_' is true",
          "    assert!(is_capture_char('.', false)); // precondition: c == '.' is true",
          "    assert!(!is_capture_char('[', false)); // precondition: c == '[' is false",
          "    assert!(is_capture_char('0', false)); // checks alphanumeric, should return true",
          "    assert!(is_capture_char('A', false)); // checks alphanumeric, should return true",
          "    assert!(!is_capture_char('!', false)); // tests invalid character, should return false",
          "    assert!(!is_capture_char('/', false)); // tests invalid character, should return false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('[', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('@', false);",
          "}"
        ],
        "oracle": [
          "    let result = is_capture_char('_', false); assert!(result == true);",
          "    let result = is_capture_char('.', false); assert!(result == true);",
          "    let result = is_capture_char('[', false); assert!(result == false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('@', false);",
          "    let result = is_capture_char('_', false); assert!(result == true);",
          "    let result = is_capture_char('.', false); assert!(result == true);",
          "    let result = is_capture_char('[', false); assert!(result == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]