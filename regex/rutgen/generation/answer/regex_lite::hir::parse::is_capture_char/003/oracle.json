[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('@', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('@', false), false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('@', false);",
          "    assert_eq!(is_capture_char('@', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('#', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('#', false);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('%', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(result == ('_' == '_' || '.' == '.' || '[' == '[' || ']' == ']' || '%'.is_alphanumeric()));"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('%', false);",
          "    assert_eq!(result, false);",
          "    assert!(result == ('_' == '_' || '.' == '.' || '[' == '[' || ']' == ']' || '%'.is_alphanumeric()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('^', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('^', false);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('&', false);",
          "}"
        ],
        "oracle": [
          "    let result = is_capture_char('&', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char(':', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('!', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char(' ', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('#', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('3', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('a', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('Z', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('4', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('&', false);",
          "    let result = is_capture_char('&', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char(':', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('!', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char(' ', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('#', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('3', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('a', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('Z', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('4', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('[', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('*', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('*', false);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('(', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_eq!(result, false);",
          "    assert_eq!(result, is_capture_char('(', false));",
          "    assert_eq!(result, is_capture_char('A', false));",
          "    assert_eq!(result, is_capture_char('1', false));",
          "    assert_eq!(result, is_capture_char('.', false));",
          "    assert_eq!(result, is_capture_char(']', false));",
          "    assert_eq!(result, is_capture_char('[', false));",
          "    assert_eq!(result, is_capture_char('_', false));",
          "    assert_eq!(result, is_capture_char(' ', false));",
          "    assert_eq!(result, is_capture_char('!', false));"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('(', false);",
          "    assert_eq!(result, false);",
          "    assert_eq!(result, false);",
          "    assert_eq!(result, is_capture_char('(', false));",
          "    assert_eq!(result, is_capture_char('A', false));",
          "    assert_eq!(result, is_capture_char('1', false));",
          "    assert_eq!(result, is_capture_char('.', false));",
          "    assert_eq!(result, is_capture_char(']', false));",
          "    assert_eq!(result, is_capture_char('[', false));",
          "    assert_eq!(result, is_capture_char('_', false));",
          "    assert_eq!(result, is_capture_char(' ', false));",
          "    assert_eq!(result, is_capture_char('!', false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char(')', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char(')', false);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('+', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('-', false), false);",
          "    assert_eq!(is_capture_char('?', false), false);",
          "    assert_eq!(is_capture_char(' ', false), false);",
          "    assert_eq!(is_capture_char('%', false), false);",
          "    assert_eq!(is_capture_char('A', false), true);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('+', false);",
          "    assert_eq!(result, false);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), true);",
          "    assert_eq!(is_capture_char('-', false), false);",
          "    assert_eq!(is_capture_char('?', false), false);",
          "    assert_eq!(is_capture_char(' ', false), false);",
          "    assert_eq!(is_capture_char('%', false), false);",
          "    assert_eq!(is_capture_char('A', false), true);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_capture_char('=', false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('1', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('a', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_capture_char('=', false);",
          "    assert_eq!(result, false);",
          "    let result = is_capture_char('1', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('.', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char(']', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('a', false);",
          "    assert_eq!(result, true);",
          "    let result = is_capture_char('_', false);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]