[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '_';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);"
        ],
        "code": [
          "{",
          "    let c = '_';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '.';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "    assert_eq!(is_capture_char(' ', false), false);"
        ],
        "code": [
          "{",
          "    let c = '.';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('!', false), false);",
          "    assert_eq!(is_capture_char(' ', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '[';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('$', false), false);"
        ],
        "code": [
          "{",
          "    let c = '[';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('a', false), true);",
          "    assert_eq!(is_capture_char('1', false), true);",
          "    assert_eq!(is_capture_char('$', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = ']';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);"
        ],
        "code": [
          "{",
          "    let c = ']';",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a'; // Change this to any alphanumeric character",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('1', false), true); // Test with an alphanumeric character",
          "    assert_eq!(is_capture_char('A', false), true); // Test with an alphabetic character",
          "    assert_eq!(is_capture_char('!', false), false); // Test with a non-capture character"
        ],
        "code": [
          "{",
          "    let c = 'a'; // Change this to any alphanumeric character",
          "    let first = false;",
          "    is_capture_char(c, first);",
          "    assert_eq!(is_capture_char('_', false), true);",
          "    assert_eq!(is_capture_char('.', false), true);",
          "    assert_eq!(is_capture_char('[', false), true);",
          "    assert_eq!(is_capture_char(']', false), false);",
          "    assert_eq!(is_capture_char('1', false), true); // Test with an alphanumeric character",
          "    assert_eq!(is_capture_char('A', false), true); // Test with an alphabetic character",
          "    assert_eq!(is_capture_char('!', false), false); // Test with a non-capture character",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]