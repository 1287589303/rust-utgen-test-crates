[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels_vec: Vec<u32> = vec![1, 2, 3, 4];",
          "    let accels = Accels { accels: accels_vec };",
          "    let iter = accels.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.accels.accels.as_ref(), &vec![1, 2, 3, 4][..]);",
          "    assert_eq!(iter.i, 0);",
          "    assert!(iter.accels.len() == 4);",
          "    assert!(iter.accels.iter().i == 0);",
          "    assert!(iter.accels.iter().accels.accels.len() == 4);",
          "    assert_eq!(iter.accels.get(0), Some(1));",
          "    assert!(iter.accels.validate().is_ok());"
        ],
        "code": [
          "{",
          "    let accels_vec: Vec<u32> = vec![1, 2, 3, 4];",
          "    let accels = Accels { accels: accels_vec };",
          "    let iter = accels.iter();",
          "    assert_eq!(iter.accels.accels.as_ref(), &vec![1, 2, 3, 4][..]);",
          "    assert_eq!(iter.i, 0);",
          "    assert!(iter.accels.len() == 4);",
          "    assert!(iter.accels.iter().i == 0);",
          "    assert!(iter.accels.iter().accels.accels.len() == 4);",
          "    assert_eq!(iter.accels.get(0), Some(1));",
          "    assert!(iter.accels.validate().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels_array: [u32; 1] = [5];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "}"
        ],
        "oracle": [
          "    let accels_array: [u32; 1] = [5];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "    assert_eq!(iter.accels, &accels);",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let accels_array: [u32; 1] = [5];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "    let accels_array: [u32; 1] = [5];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "    assert_eq!(iter.accels, &accels);",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels_array: [u32; 8] = [6, 7, 8, 9, 10, 11, 12, 13];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.accels.accels, accels_array.as_ref());",
          "    assert_eq!(iter.i, 0);"
        ],
        "code": [
          "{",
          "    let accels_array: [u32; 8] = [6, 7, 8, 9, 10, 11, 12, 13];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "    assert_eq!(iter.accels.accels, accels_array.as_ref());",
          "    assert_eq!(iter.i, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let accels_array: [u32; 2] = [14, 15];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "}"
        ],
        "oracle": [
          "    let accels_array: [u32; 2] = [14, 15];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "    assert_eq!(iter.i, 0);",
          "    assert_eq!(iter.accels.accels.as_ref(), accels_array.as_ref());"
        ],
        "code": [
          "{",
          "    let accels_array: [u32; 2] = [14, 15];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "    let accels_array: [u32; 2] = [14, 15];",
          "    let accels = Accels { accels: accels_array.as_ref() };",
          "    let iter = accels.iter();",
          "    assert_eq!(iter.i, 0);",
          "    assert_eq!(iter.accels.accels.as_ref(), accels_array.as_ref());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]