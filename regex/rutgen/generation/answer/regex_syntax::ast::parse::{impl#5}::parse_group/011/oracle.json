[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span_start = Position { offset: 0, line: 1, column: 1 };",
          "    let span_end = Position { offset: 10, line: 1, column: 11 };",
          "    let open_span = Span::new(span_start, span_end);",
          "    let flags = ast::Flags {",
          "        span: open_span,",
          "        items: vec![ast::FlagsItem {",
          "            span: Span::new(Position { offset: 1, line: 1, column: 2 }, Position { offset: 2, line: 1, column: 3 }),",
          "            kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreCase),",
          "        }],",
          "    };",
          "    ",
          "    let parser = ParserI {",
          "        parser: Box::new(Parser {",
          "            pos: Cell::new(Position { offset: 3, line: 1, column: 4 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        }),",
          "        pattern: \"(\",",
          "    };",
          "    ",
          "    let result = parser.parse_group();",
          "    ",
          "    let expected_result = Ok(Either::Left(ast::SetFlags {",
          "        span: Span { end: Position { offset: 3, line: 1, column: 4 }, ..open_span },",
          "        flags,",
          "    }));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '(');",
          "    assert!(!self.is_lookaround_prefix());",
          "    assert!(!self.bump_if(\"?P<\"));",
          "    assert!(!self.bump_if(\"?<\"));",
          "    assert!(self.bump_if(\"?\"));",
          "    assert!(!self.is_eof());",
          "    assert!(self.parse_flags().is_ok());",
          "    assert_ne!(self.char(), ')');",
          "    assert!(!flags.items.is_empty());",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let span_start = Position { offset: 0, line: 1, column: 1 };",
          "    let span_end = Position { offset: 10, line: 1, column: 11 };",
          "    let open_span = Span::new(span_start, span_end);",
          "    let flags = ast::Flags {",
          "        span: open_span,",
          "        items: vec![ast::FlagsItem {",
          "            span: Span::new(Position { offset: 1, line: 1, column: 2 }, Position { offset: 2, line: 1, column: 3 }),",
          "            kind: ast::FlagsItemKind::Flag(ast::Flag::IgnoreCase),",
          "        }],",
          "    };",
          "    ",
          "    let parser = ParserI {",
          "        parser: Box::new(Parser {",
          "            pos: Cell::new(Position { offset: 3, line: 1, column: 4 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        }),",
          "        pattern: \"(\",",
          "    };",
          "    ",
          "    let result = parser.parse_group();",
          "    ",
          "    let expected_result = Ok(Either::Left(ast::SetFlags {",
          "        span: Span { end: Position { offset: 3, line: 1, column: 4 }, ..open_span },",
          "        flags,",
          "    }));",
          "    assert_eq!(self.char(), '(');",
          "    assert!(!self.is_lookaround_prefix());",
          "    assert!(!self.bump_if(\"?P<\"));",
          "    assert!(!self.bump_if(\"?<\"));",
          "    assert!(self.bump_if(\"?\"));",
          "    assert!(!self.is_eof());",
          "    assert!(self.parse_flags().is_ok());",
          "    assert_ne!(self.char(), ')');",
          "    assert!(!flags.items.is_empty());",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]