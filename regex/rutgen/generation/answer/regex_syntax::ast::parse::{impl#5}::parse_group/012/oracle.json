[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"(?i)\";",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span = Span::new(position, position);",
          "    let flags_item = ast::FlagsItem {",
          "        span: span.clone(),",
          "        kind: ast::FlagsItemKind::Flag('i'),",
          "    };",
          "    let flags = ast::Flags {",
          "        span: span.clone(),",
          "        items: vec![flags_item],",
          "    };",
          "    let group = ast::Group {",
          "        span: span.clone(),",
          "        kind: ast::GroupKind::NonCapturing(flags.clone()),",
          "        ast: Box::new(Ast::empty(span.clone())),",
          "    };",
          "",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(position),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(Vec::new()),",
          "            stack_group: RefCell::new(Vec::new()),",
          "            stack_class: RefCell::new(Vec::new()),",
          "            capture_names: RefCell::new(Vec::new()),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "",
          "    let _result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Either::Right(group)));",
          "    assert_eq!(parser.parser.pos.get(), Position { offset: 5, line: 1, column: 6 });",
          "    assert!(!parser.is_lookaround_prefix());",
          "    assert!(!_result.is_err());",
          "    assert!(self.bump_if(\"?\") == true);",
          "    assert!(!_result.is_err());",
          "    assert!(!parser.is_eof());",
          "    assert!(flags.items.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let pattern = \"(?i)\";",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span = Span::new(position, position);",
          "    let flags_item = ast::FlagsItem {",
          "        span: span.clone(),",
          "        kind: ast::FlagsItemKind::Flag('i'),",
          "    };",
          "    let flags = ast::Flags {",
          "        span: span.clone(),",
          "        items: vec![flags_item],",
          "    };",
          "    let group = ast::Group {",
          "        span: span.clone(),",
          "        kind: ast::GroupKind::NonCapturing(flags.clone()),",
          "        ast: Box::new(Ast::empty(span.clone())),",
          "    };",
          "",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(position),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(Vec::new()),",
          "            stack_group: RefCell::new(Vec::new()),",
          "            stack_class: RefCell::new(Vec::new()),",
          "            capture_names: RefCell::new(Vec::new()),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "",
          "    let _result = parser.parse_group();",
          "    assert_eq!(_result, Ok(Either::Right(group)));",
          "    assert_eq!(parser.parser.pos.get(), Position { offset: 5, line: 1, column: 6 });",
          "    assert!(!parser.is_lookaround_prefix());",
          "    assert!(!_result.is_err());",
          "    assert!(self.bump_if(\"?\") == true);",
          "    assert!(!_result.is_err());",
          "    assert!(!parser.is_eof());",
          "    assert!(flags.items.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"(?i:abc)\";",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span = Span::new(position, position);",
          "    ",
          "    let flags_item = ast::FlagsItem {",
          "        span: span.clone(),",
          "        kind: ast::FlagsItemKind::Flag('i'),",
          "    };",
          "    let flags = ast::Flags {",
          "        span: span.clone(),",
          "        items: vec![flags_item],",
          "    };",
          "",
          "    let group = ast::Group {",
          "        span: span.clone(),",
          "        kind: ast::GroupKind::NonCapturing(flags.clone()),",
          "        ast: Box::new(Ast::empty(span.clone())),",
          "    };",
          "",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(position),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(Vec::new()),",
          "            stack_group: RefCell::new(Vec::new()),",
          "            stack_class: RefCell::new(Vec::new()),",
          "            capture_names: RefCell::new(Vec::new()),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "",
          "    let _result = parser.parse_group();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(Either::Right(group)));"
        ],
        "code": [
          "{",
          "    let pattern = \"(?i:abc)\";",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let span = Span::new(position, position);",
          "    ",
          "    let flags_item = ast::FlagsItem {",
          "        span: span.clone(),",
          "        kind: ast::FlagsItemKind::Flag('i'),",
          "    };",
          "    let flags = ast::Flags {",
          "        span: span.clone(),",
          "        items: vec![flags_item],",
          "    };",
          "",
          "    let group = ast::Group {",
          "        span: span.clone(),",
          "        kind: ast::GroupKind::NonCapturing(flags.clone()),",
          "        ast: Box::new(Ast::empty(span.clone())),",
          "    };",
          "",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(position),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(Vec::new()),",
          "            stack_group: RefCell::new(Vec::new()),",
          "            stack_class: RefCell::new(Vec::new()),",
          "            capture_names: RefCell::new(Vec::new()),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "",
          "    let _result = parser.parse_group();",
          "    assert_eq!(_result, Ok(Either::Right(group)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]