[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = LazyStateIDError { attempted: 0 };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.to_string(), \"failed to create LazyStateID from 0, which exceeds <MAX_VALUE>\");",
          "    assert!(buffer.to_string().contains(\"failed to create LazyStateID from\"));",
          "    assert!(buffer.to_string().contains(\"which exceeds\"));",
          "    assert!(buffer.to_string().contains(&error.attempted().to_string()));",
          "    assert!(buffer.to_string().contains(&LazyStateID::MAX.to_string()));"
        ],
        "code": [
          "{",
          "    let error = LazyStateIDError { attempted: 0 };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    assert_eq!(buffer.to_string(), \"failed to create LazyStateID from 0, which exceeds <MAX_VALUE>\");",
          "    assert!(buffer.to_string().contains(\"failed to create LazyStateID from\"));",
          "    assert!(buffer.to_string().contains(\"which exceeds\"));",
          "    assert!(buffer.to_string().contains(&error.attempted().to_string()));",
          "    assert!(buffer.to_string().contains(&LazyStateID::MAX.to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = LazyStateIDError { attempted: LazyStateID::MAX };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let error = LazyStateIDError { attempted: LazyStateID::MAX };",
          "    let result = error.fmt(&mut buffer);",
          "    assert_eq!(result, core::fmt::Result::Ok);",
          "    assert_eq!(buffer.to_string(), \"failed to create LazyStateID from 18446744073709551615, which exceeds 18446744073709551615\");"
        ],
        "code": [
          "{",
          "    let error = LazyStateIDError { attempted: LazyStateID::MAX };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    let error = LazyStateIDError { attempted: LazyStateID::MAX };",
          "    let result = error.fmt(&mut buffer);",
          "    assert_eq!(result, core::fmt::Result::Ok);",
          "    assert_eq!(buffer.to_string(), \"failed to create LazyStateID from 18446744073709551615, which exceeds 18446744073709551615\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = LazyStateIDError { attempted: LazyStateID::MAX + 1 };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.attempted(), LazyStateID::MAX + 1);",
          "    assert_eq!(buffer.to_string(), format!(\"failed to create LazyStateID from {:?}, which exceeds {:?}\", error.attempted(), LazyStateID::MAX));",
          "    assert!(buffer.is_empty() == false);",
          "    assert!(buffer.len() > 0);"
        ],
        "code": [
          "{",
          "    let error = LazyStateIDError { attempted: LazyStateID::MAX + 1 };",
          "    let mut buffer = core::fmt::Formatter::new();",
          "    let _ = error.fmt(&mut buffer);",
          "    assert_eq!(error.attempted(), LazyStateID::MAX + 1);",
          "    assert_eq!(buffer.to_string(), format!(\"failed to create LazyStateID from {:?}, which exceeds {:?}\", error.attempted(), LazyStateID::MAX));",
          "    assert!(buffer.is_empty() == false);",
          "    assert!(buffer.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]