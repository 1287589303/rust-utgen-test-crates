[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index: u32 = SmallIndex::MAX.as_u32() + 1;",
          "    let result = SmallIndex::try_from(index);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().attempted, u64::from(index));"
        ],
        "code": [
          "{",
          "    let index: u32 = SmallIndex::MAX.as_u32() + 1;",
          "    let result = SmallIndex::try_from(index);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().attempted, u64::from(index));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index: u32 = SmallIndex::MAX.as_u32() + 1000;",
          "    let result = SmallIndex::try_from(index);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().attempted, u64::from(index));"
        ],
        "code": [
          "{",
          "    let index: u32 = SmallIndex::MAX.as_u32() + 1000;",
          "    let result = SmallIndex::try_from(index);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().attempted, u64::from(index));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index: u32 = u32::MAX;",
          "    let result = SmallIndex::try_from(index);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().attempted, u64::from(u32::MAX));"
        ],
        "code": [
          "{",
          "    let index: u32 = u32::MAX;",
          "    let result = SmallIndex::try_from(index);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().attempted, u64::from(u32::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]