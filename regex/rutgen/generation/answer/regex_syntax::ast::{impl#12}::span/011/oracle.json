[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let _ = ast.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 0, end: 0 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    assert_eq!(ast.span(), &set_flags.span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let _ = ast.span();",
          "    let span = Span { start: 0, end: 0 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    assert_eq!(ast.span(), &set_flags.span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 5, end: 5 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let _ = ast.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ast.span(), &set_flags.span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 5, end: 5 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let _ = ast.span();",
          "    assert_eq!(ast.span(), &set_flags.span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 2, end: 10 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let _ = ast.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: 2, end: 10 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    assert_eq!(ast.span(), &span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 2, end: 10 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let _ = ast.span();",
          "    let span = Span { start: 2, end: 10 };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    assert_eq!(ast.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: u32::MAX - 1, end: u32::MAX };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let _ = ast.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: u32::MAX - 1, end: u32::MAX };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let result_span = ast.span();",
          "    assert_eq!(result_span, &span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: u32::MAX - 1, end: u32::MAX };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let _ = ast.span();",
          "    let span = Span { start: u32::MAX - 1, end: u32::MAX };",
          "    let set_flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::Flags(Box::new(set_flags));",
          "    let result_span = ast.span();",
          "    assert_eq!(result_span, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]