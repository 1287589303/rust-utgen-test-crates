[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(10),",
          "    };",
          "    let class_perl = ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Digit,",
          "        negated: false,",
          "    };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let _ = ast.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ast.span(), &span);"
        ],
        "code": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(10),",
          "    };",
          "    let class_perl = ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Digit,",
          "        negated: false,",
          "    };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let _ = ast.span();",
          "    assert_eq!(ast.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span {",
          "        start: Position(5),",
          "        end: Position(15),",
          "    };",
          "    let class_perl = ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Word,",
          "        negated: true,",
          "    };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let _ = ast.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(5), end: Position(15) };",
          "    let class_perl = ClassPerl { span: span.clone(), kind: ClassPerlKind::Word, negated: true };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    assert_eq!(ast.span(), &span);"
        ],
        "code": [
          "{",
          "    let span = Span {",
          "        start: Position(5),",
          "        end: Position(15),",
          "    };",
          "    let class_perl = ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Word,",
          "        negated: true,",
          "    };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let _ = ast.span();",
          "    let span = Span { start: Position(5), end: Position(15) };",
          "    let class_perl = ClassPerl { span: span.clone(), kind: ClassPerlKind::Word, negated: true };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    assert_eq!(ast.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(1),",
          "    };",
          "    let class_perl = ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Word,",
          "        negated: false,",
          "    };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let _ = ast.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_perl = ClassPerl { span: span.clone(), kind: ClassPerlKind::Word, negated: false };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    assert_eq!(ast.span(), &span);"
        ],
        "code": [
          "{",
          "    let span = Span {",
          "        start: Position(0),",
          "        end: Position(1),",
          "    };",
          "    let class_perl = ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Word,",
          "        negated: false,",
          "    };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let _ = ast.span();",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_perl = ClassPerl { span: span.clone(), kind: ClassPerlKind::Word, negated: false };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    assert_eq!(ast.span(), &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span {",
          "        start: Position(100),",
          "        end: Position(200),",
          "    };",
          "    let class_perl = ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Space,",
          "        negated: false,",
          "    };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let _ = ast.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(100), end: Position(200) };",
          "    let class_perl = ClassPerl { span: span.clone(), kind: ClassPerlKind::Space, negated: false };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let result = ast.span();",
          "    assert_eq!(result, &span);"
        ],
        "code": [
          "{",
          "    let span = Span {",
          "        start: Position(100),",
          "        end: Position(200),",
          "    };",
          "    let class_perl = ClassPerl {",
          "        span: span.clone(),",
          "        kind: ClassPerlKind::Space,",
          "        negated: false,",
          "    };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let _ = ast.span();",
          "    let span = Span { start: Position(100), end: Position(200) };",
          "    let class_perl = ClassPerl { span: span.clone(), kind: ClassPerlKind::Space, negated: false };",
          "    let ast = Ast::ClassPerl(Box::new(class_perl));",
          "    let result = ast.span();",
          "    assert_eq!(result, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]