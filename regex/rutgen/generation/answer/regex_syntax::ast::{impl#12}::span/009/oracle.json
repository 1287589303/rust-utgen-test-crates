[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::dot(span.clone());",
          "    let returned_span = ast.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_span, &span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::dot(span.clone());",
          "    let returned_span = ast.span();",
          "    assert_eq!(returned_span, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let ast = Ast::dot(span.clone());",
          "    let returned_span = ast.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_span, &span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let ast = Ast::dot(span.clone());",
          "    let returned_span = ast.span();",
          "    assert_eq!(returned_span, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1000) };",
          "    let ast = Ast::dot(span.clone());",
          "    let returned_span = ast.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_span, &span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1000) };",
          "    let ast = Ast::dot(span.clone());",
          "    let returned_span = ast.span();",
          "    assert_eq!(returned_span, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(5), end: Position(5) };",
          "    let ast = Ast::dot(span.clone());",
          "    let returned_span = ast.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(returned_span, &span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(5), end: Position(5) };",
          "    let ast = Ast::dot(span.clone());",
          "    let returned_span = ast.span();",
          "    assert_eq!(returned_span, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]