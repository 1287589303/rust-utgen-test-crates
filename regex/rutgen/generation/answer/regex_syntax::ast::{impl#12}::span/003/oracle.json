[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let group = Group { span: span.clone(), kind: GroupKind::NonCapturing, ast: Box::new(Ast::Empty(Box::new(span.clone()))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let group = Group { span: span.clone(), kind: GroupKind::NonCapturing, ast: Box::new(Ast::Empty(Box::new(span.clone()))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span();",
          "    assert_eq!(result, &span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let group = Group { span: span.clone(), kind: GroupKind::Capturing, ast: Box::new(Ast::Dot(Box::new(span.clone()))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(0) }; assert_eq!(result, &span);",
          "    let group = Group { span: span.clone(), kind: GroupKind::Capturing, ast: Box::new(Ast::Dot(Box::new(span.clone()))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span(); assert_eq!(result, &span);",
          "    let group = Group { span: Span { start: Position(1), end: Position(1) }, kind: GroupKind::NonCapturing, ast: Box::new(Ast::Empty(Box::new(span.clone()))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span(); assert_eq!(result, &span);",
          "    let group = Group { span: Span { start: Position(2), end: Position(3) }, kind: GroupKind::Capturing, ast: Box::new(Ast::Literal(Box::new(Literal(vec![b'a'])))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span(); assert_eq!(result, &Span { start: Position(2), end: Position(3) });",
          "    let group = Group { span: Span { start: Position(4), end: Position(5) }, kind: GroupKind::Capturing, ast: Box::new(Ast::Repetition(Box::new(Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Ast::ClassPerl(Box::new(ClassPerl { span: span.clone(), kind: ClassPerlKind::Digit, negated: false }))) }))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span(); assert_eq!(result, &Span { start: Position(4), end: Position(5) });"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(0) };",
          "    let group = Group { span: span.clone(), kind: GroupKind::Capturing, ast: Box::new(Ast::Dot(Box::new(span.clone()))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span();",
          "    let span = Span { start: Position(0), end: Position(0) }; assert_eq!(result, &span);",
          "    let group = Group { span: span.clone(), kind: GroupKind::Capturing, ast: Box::new(Ast::Dot(Box::new(span.clone()))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span(); assert_eq!(result, &span);",
          "    let group = Group { span: Span { start: Position(1), end: Position(1) }, kind: GroupKind::NonCapturing, ast: Box::new(Ast::Empty(Box::new(span.clone()))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span(); assert_eq!(result, &span);",
          "    let group = Group { span: Span { start: Position(2), end: Position(3) }, kind: GroupKind::Capturing, ast: Box::new(Ast::Literal(Box::new(Literal(vec![b'a'])))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span(); assert_eq!(result, &Span { start: Position(2), end: Position(3) });",
          "    let group = Group { span: Span { start: Position(4), end: Position(5) }, kind: GroupKind::Capturing, ast: Box::new(Ast::Repetition(Box::new(Repetition { min: 1, max: Some(3), greedy: true, sub: Box::new(Ast::ClassPerl(Box::new(ClassPerl { span: span.clone(), kind: ClassPerlKind::Digit, negated: false }))) }))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span(); assert_eq!(result, &Span { start: Position(4), end: Position(5) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(u32::MAX - 5), end: Position(u32::MAX) };",
          "    let group = Group { span: span.clone(), kind: GroupKind::Capturing, ast: Box::new(Ast::ClassPerl(Box::new(ClassPerl { span: span.clone(), kind: ClassPerlKind::Digit, negated: false }))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span();",
          "}"
        ],
        "oracle": [
          "    let expected_span = &span;",
          "    assert_eq!(result, expected_span);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(u32::MAX - 5), end: Position(u32::MAX) };",
          "    let group = Group { span: span.clone(), kind: GroupKind::Capturing, ast: Box::new(Ast::ClassPerl(Box::new(ClassPerl { span: span.clone(), kind: ClassPerlKind::Digit, negated: false }))) };",
          "    let ast = Ast::Group(Box::new(group));",
          "    let result = ast.span();",
          "    let expected_span = &span;",
          "    assert_eq!(result, expected_span);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]