[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(0); // minimum value",
          "    transition.state_id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.state_id().0.as_usize(), 0);",
          "    ",
          "    let transition = Transition(Transition::STATE_ID_LIMIT - 1); // maximum valid value",
          "    assert_eq!(transition.state_id().0.as_usize(), Transition::STATE_ID_LIMIT - 1 >> Transition::STATE_ID_SHIFT);",
          "    ",
          "    let transition = Transition(1 << Transition::STATE_ID_SHIFT); // should test overflow handling",
          "    assert_eq!(transition.state_id().0.as_usize(), 1);",
          "    ",
          "    let transition = Transition(Transition::STATE_ID_LIMIT); // testing boundary condition",
          "    assert!(transition.state_id().0.as_usize() < Transition::STATE_ID_LIMIT);",
          "    ",
          "    let transition = Transition(DEAD); // testing transition in a dead state",
          "    assert!(transition.is_dead());"
        ],
        "code": [
          "{",
          "    let transition = Transition(0); // minimum value",
          "    transition.state_id();",
          "    assert_eq!(transition.state_id().0.as_usize(), 0);",
          "    ",
          "    let transition = Transition(Transition::STATE_ID_LIMIT - 1); // maximum valid value",
          "    assert_eq!(transition.state_id().0.as_usize(), Transition::STATE_ID_LIMIT - 1 >> Transition::STATE_ID_SHIFT);",
          "    ",
          "    let transition = Transition(1 << Transition::STATE_ID_SHIFT); // should test overflow handling",
          "    assert_eq!(transition.state_id().0.as_usize(), 1);",
          "    ",
          "    let transition = Transition(Transition::STATE_ID_LIMIT); // testing boundary condition",
          "    assert!(transition.state_id().0.as_usize() < Transition::STATE_ID_LIMIT);",
          "    ",
          "    let transition = Transition(DEAD); // testing transition in a dead state",
          "    assert!(transition.is_dead());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(1 << Transition::STATE_ID_BITS / 2); // middle value",
          "    transition.state_id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.state_id().0.as_usize(), 1);",
          "    assert!(transition.state_id().0 <= Transition::STATE_ID_LIMIT as usize);",
          "    assert!(transition.state_id().0 >= 0);",
          "    assert!(transition.state_id().0 == StateID::new_unchecked(1));"
        ],
        "code": [
          "{",
          "    let transition = Transition(1 << Transition::STATE_ID_BITS / 2); // middle value",
          "    transition.state_id();",
          "    assert_eq!(transition.state_id().0.as_usize(), 1);",
          "    assert!(transition.state_id().0 <= Transition::STATE_ID_LIMIT as usize);",
          "    assert!(transition.state_id().0 >= 0);",
          "    assert!(transition.state_id().0 == StateID::new_unchecked(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition((1 << Transition::STATE_ID_BITS) - 1); // maximum value",
          "    transition.state_id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.state_id().0.as_usize(), (1 << Transition::STATE_ID_BITS) - 1 >> Transition::STATE_ID_SHIFT);",
          "    assert!(transition.state_id().0 <= Transition::STATE_ID_LIMIT);",
          "    assert!(transition.state_id().0 >= 0);",
          "    assert!(transition.is_dead() == false);",
          "    assert!(transition.match_wins() == false);"
        ],
        "code": [
          "{",
          "    let transition = Transition((1 << Transition::STATE_ID_BITS) - 1); // maximum value",
          "    transition.state_id();",
          "    assert_eq!(transition.state_id().0.as_usize(), (1 << Transition::STATE_ID_BITS) - 1 >> Transition::STATE_ID_SHIFT);",
          "    assert!(transition.state_id().0 <= Transition::STATE_ID_LIMIT);",
          "    assert!(transition.state_id().0 >= 0);",
          "    assert!(transition.is_dead() == false);",
          "    assert!(transition.match_wins() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let transition = Transition(DEAD); // assuming DEAD is a constant representing a dead state",
          "    transition.state_id();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.state_id(), StateID::new_unchecked(0));"
        ],
        "code": [
          "{",
          "    let transition = Transition(DEAD); // assuming DEAD is a constant representing a dead state",
          "    transition.state_id();",
          "    assert_eq!(transition.state_id(), StateID::new_unchecked(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]