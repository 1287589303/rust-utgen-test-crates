[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::MAX;",
          "    let result = LazyStateID::new(id);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX));"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::MAX;",
          "    let result = LazyStateID::new(id);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::MAX - 1; // testing within the valid range",
          "    let result = LazyStateID::new(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(LazyStateID::new_unchecked(id)));"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::MAX - 1; // testing within the valid range",
          "    let result = LazyStateID::new(id);",
          "    assert_eq!(result, Ok(LazyStateID::new_unchecked(id)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = 0;",
          "    let result = LazyStateID::new(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(LazyStateID::new_unchecked(0)));",
          "    let id = LazyStateID::MAX;",
          "    let result = LazyStateID::new(id);",
          "    assert_eq!(result, Ok(LazyStateID::new_unchecked(LazyStateID::MAX)));"
        ],
        "code": [
          "{",
          "    let id = 0;",
          "    let result = LazyStateID::new(id);",
          "    assert_eq!(result, Ok(LazyStateID::new_unchecked(0)));",
          "    let id = LazyStateID::MAX;",
          "    let result = LazyStateID::new(id);",
          "    assert_eq!(result, Ok(LazyStateID::new_unchecked(LazyStateID::MAX)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let id = LazyStateID::MAX + 1; // testing just over the valid range",
          "    let result = LazyStateID::new(id);",
          "}"
        ],
        "oracle": [
          "    assert!(LazyStateID::new(LazyStateID::MAX).is_ok());",
          "    assert_eq!(LazyStateID::new(LazyStateID::MAX).unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX));",
          "    let error = LazyStateID::new(LazyStateID::MAX + 1).err().unwrap();",
          "    assert_eq!(error.attempted, (LazyStateID::MAX + 1) as u64);",
          "    assert!(LazyStateID::new(0).is_ok());",
          "    assert_eq!(LazyStateID::new(0).unwrap(), LazyStateID::new_unchecked(0));",
          "    assert!(LazyStateID::new(LazyStateID::MAX - 1).is_ok());",
          "    assert_eq!(LazyStateID::new(LazyStateID::MAX - 1).unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX - 1));"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::MAX + 1; // testing just over the valid range",
          "    let result = LazyStateID::new(id);",
          "    assert!(LazyStateID::new(LazyStateID::MAX).is_ok());",
          "    assert_eq!(LazyStateID::new(LazyStateID::MAX).unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX));",
          "    let error = LazyStateID::new(LazyStateID::MAX + 1).err().unwrap();",
          "    assert_eq!(error.attempted, (LazyStateID::MAX + 1) as u64);",
          "    assert!(LazyStateID::new(0).is_ok());",
          "    assert_eq!(LazyStateID::new(0).unwrap(), LazyStateID::new_unchecked(0));",
          "    assert!(LazyStateID::new(LazyStateID::MAX - 1).is_ok());",
          "    assert_eq!(LazyStateID::new(LazyStateID::MAX - 1).unwrap(), LazyStateID::new_unchecked(LazyStateID::MAX - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]