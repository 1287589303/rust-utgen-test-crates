[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::MAX + 1;",
          "    let _result = LazyStateID::new(id);",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().attempted, u64::try_from(LazyStateID::MAX + 1).unwrap());"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::MAX + 1;",
          "    let _result = LazyStateID::new(id);",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err().attempted, u64::try_from(LazyStateID::MAX + 1).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = LazyStateID::MAX + 1000;",
          "    let _result = LazyStateID::new(id);",
          "}"
        ],
        "oracle": [
          "    let id = LazyStateID::MAX + 1000;",
          "    let result = LazyStateID::new(id);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e.attempted, id as u64);",
          "    }"
        ],
        "code": [
          "{",
          "    let id = LazyStateID::MAX + 1000;",
          "    let _result = LazyStateID::new(id);",
          "    let id = LazyStateID::MAX + 1000;",
          "    let result = LazyStateID::new(id);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e.attempted, id as u64);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let id = u64::MAX as usize;",
          "    let _result = LazyStateID::new(id);",
          "}"
        ],
        "oracle": [
          "    let id = u64::MAX as usize;",
          "    let result = LazyStateID::new(id);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e.attempted, u64::MAX);",
          "    }"
        ],
        "code": [
          "{",
          "    let id = u64::MAX as usize;",
          "    let _result = LazyStateID::new(id);",
          "    let id = u64::MAX as usize;",
          "    let result = LazyStateID::new(id);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e.attempted, u64::MAX);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]