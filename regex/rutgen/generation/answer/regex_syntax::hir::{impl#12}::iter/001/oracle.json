[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_unicode = ClassUnicode::empty();",
          "    let _iter = class_unicode.iter();",
          "}"
        ],
        "oracle": [
          "    let class_unicode = ClassUnicode::empty();",
          "    let iter = class_unicode.iter();",
          "    assert_eq!(iter, ClassUnicodeIter(vec![].iter()));",
          "    assert!(iter.0.as_slice().is_empty());",
          "    assert_eq!(iter.0.len(), 0);"
        ],
        "code": [
          "{",
          "    let class_unicode = ClassUnicode::empty();",
          "    let _iter = class_unicode.iter();",
          "    let class_unicode = ClassUnicode::empty();",
          "    let iter = class_unicode.iter();",
          "    assert_eq!(iter, ClassUnicodeIter(vec![].iter()));",
          "    assert!(iter.0.as_slice().is_empty());",
          "    assert_eq!(iter.0.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'c' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _iter = class_unicode.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter, ClassUnicodeIter(class_unicode.set.iter()));",
          "    assert!(class_unicode.iter().next().is_some());",
          "    assert_eq!(class_unicode.iter().count(), 1);",
          "    assert_eq!(class_unicode.iter().next().unwrap(), ClassUnicodeRange { start: 'a', end: 'c' });"
        ],
        "code": [
          "{",
          "    let range = ClassUnicodeRange { start: 'a', end: 'c' };",
          "    let class_unicode = ClassUnicode::new(vec![range]);",
          "    let _iter = class_unicode.iter();",
          "    assert_eq!(_iter, ClassUnicodeIter(class_unicode.set.iter()));",
          "    assert!(class_unicode.iter().next().is_some());",
          "    assert_eq!(class_unicode.iter().count(), 1);",
          "    assert_eq!(class_unicode.iter().next().unwrap(), ClassUnicodeRange { start: 'a', end: 'c' });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range1 = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let range2 = ClassUnicodeRange { start: 'd', end: 'e' };",
          "    let class_unicode = ClassUnicode::new(vec![range1, range2]);",
          "    let _iter = class_unicode.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter, ClassUnicodeIter(vec![range1, range2].iter()));"
        ],
        "code": [
          "{",
          "    let range1 = ClassUnicodeRange { start: 'a', end: 'b' };",
          "    let range2 = ClassUnicodeRange { start: 'd', end: 'e' };",
          "    let class_unicode = ClassUnicode::new(vec![range1, range2]);",
          "    let _iter = class_unicode.iter();",
          "    assert_eq!(_iter, ClassUnicodeIter(vec![range1, range2].iter()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]