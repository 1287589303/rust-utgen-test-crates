[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: u8 = b'_';",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), false);",
          "    assert_eq!(is_word_byte(b'9'), false);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'_';",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), false);",
          "    assert_eq!(is_word_byte(b'9'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: u8 = b'A';",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), false);",
          "    assert_eq!(is_word_byte(b'z'), false);",
          "    assert_eq!(is_word_byte(b'1'), false);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'A';",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), false);",
          "    assert_eq!(is_word_byte(b'z'), false);",
          "    assert_eq!(is_word_byte(b'1'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: u8 = b'Z';",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'Z';",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let c: u8 = b'!';",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b' '), false);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'!';",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let c: u8 = b'@';",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b' '), false);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'@';",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let c: u8 = b'a' - 1;",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a' - 1), false);",
          "    assert_eq!(is_word_byte(b'9' + 1), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'a' - 1;",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a' - 1), false);",
          "    assert_eq!(is_word_byte(b'9' + 1), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let c: u8 = b'9' + 1;",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "    assert!(!is_word_byte(b'9'));"
        ],
        "code": [
          "{",
          "    let c: u8 = b'9' + 1;",
          "    is_word_byte(c);",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "    assert!(!is_word_byte(b'9'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]