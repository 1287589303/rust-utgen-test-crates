[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: u8 = b'/'; // not matching b'_'",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'/'), false);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'/'; // not matching b'_'",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'/'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: u8 = b'!'; // not in b'0'..=b'9'",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b '!'), false);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'!'; // not in b'0'..=b'9'",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b '!'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: u8 = b'`'; // not in b'a'..=b'z'",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'`'), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'\\n'), false);",
          "    assert_eq!(is_word_byte(b'.'), false);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'`'; // not in b'a'..=b'z'",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'`'), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'\\n'), false);",
          "    assert_eq!(is_word_byte(b'.'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: u8 = b'{'; // not in b'A'..=b'Z'",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert!(!is_word_byte(b'{'));"
        ],
        "code": [
          "{",
          "    let c: u8 = b'{'; // not in b'A'..=b'Z'",
          "    is_word_byte(c);",
          "    assert!(!is_word_byte(b'{'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: u8 = b'~'; // not matching any in the specified ranges",
          "    is_word_byte(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'~'), false);"
        ],
        "code": [
          "{",
          "    let c: u8 = b'~'; // not matching any in the specified ranges",
          "    is_word_byte(c);",
          "    assert_eq!(is_word_byte(b'~'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]