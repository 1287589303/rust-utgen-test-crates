[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'_';",
          "    is_word_byte(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'1'), false);",
          "    assert_eq!(is_word_byte(b'!'), false);"
        ],
        "code": [
          "{",
          "    let input = b'_';",
          "    is_word_byte(input);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'1'), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'a';",
          "    is_word_byte(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'B'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);"
        ],
        "code": [
          "{",
          "    let input = b'a';",
          "    is_word_byte(input);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'B'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'@'), false);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'!'), false);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'z';",
          "    is_word_byte(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'`'), false);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'-'), false);"
        ],
        "code": [
          "{",
          "    let input = b'z';",
          "    is_word_byte(input);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'`'), false);",
          "    assert_eq!(is_word_byte(b' '), false);",
          "    assert_eq!(is_word_byte(b'-'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'A';",
          "    is_word_byte(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), false);"
        ],
        "code": [
          "{",
          "    let input = b'A';",
          "    is_word_byte(input);",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b'Z';",
          "    is_word_byte(input);",
          "}"
        ],
        "oracle": [
          "    is_word_byte(b'Z') == true",
          "    is_word_byte(b'_') == true",
          "    is_word_byte(b'a') == true",
          "    is_word_byte(b'b') == true",
          "    is_word_byte(b'0') == false",
          "    is_word_byte(b'#') == false",
          "    is_word_byte(b' ') == false",
          "    is_word_byte(b'z') == true"
        ],
        "code": [
          "{",
          "    let input = b'Z';",
          "    is_word_byte(input);",
          "    is_word_byte(b'Z') == true",
          "    is_word_byte(b'_') == true",
          "    is_word_byte(b'a') == true",
          "    is_word_byte(b'b') == true",
          "    is_word_byte(b'0') == false",
          "    is_word_byte(b'#') == false",
          "    is_word_byte(b' ') == false",
          "    is_word_byte(b'z') == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]