[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'_');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'0');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'5');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'0');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'5');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'0');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'0');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'1');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'9');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'1');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'9');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'2');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_') == true);",
          "    assert!(is_word_byte(b'0') == true);",
          "    assert!(is_word_byte(b'5') == true);",
          "    assert!(is_word_byte(b'a') == true);",
          "    assert!(is_word_byte(b'z') == true);",
          "    assert!(is_word_byte(b'A') == true);",
          "    assert!(is_word_byte(b'Z') == true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'2');",
          "    assert!(is_word_byte(b'_') == true);",
          "    assert!(is_word_byte(b'0') == true);",
          "    assert!(is_word_byte(b'5') == true);",
          "    assert!(is_word_byte(b'a') == true);",
          "    assert!(is_word_byte(b'z') == true);",
          "    assert!(is_word_byte(b'A') == true);",
          "    assert!(is_word_byte(b'Z') == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'3');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'9');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'3');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'9');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'4');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'__');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'4');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'__');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'5');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'5');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'6');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'6');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'7');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'9');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'7');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'9');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'8');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'5');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'8');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'5');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'9');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'0');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'5');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'9');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'0');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'5');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'b');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'b');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'c');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'c');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'd');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'd');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'e');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'e');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'f');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'f');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'g');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'g');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'h');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'h');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'i');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'i');",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'j');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'3'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'j');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'3'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'k');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'k');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'l');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'l');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'm');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'm');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'n');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'5'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'n');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'5'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'o');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'o');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'p');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_') == true);",
          "    assert!(is_word_byte(b'0') == true);",
          "    assert!(is_word_byte(b'9') == true);",
          "    assert!(is_word_byte(b'a') == true);",
          "    assert!(is_word_byte(b'z') == true);",
          "    assert!(is_word_byte(b'A') == true);",
          "    assert!(is_word_byte(b'Z') == true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'p');",
          "    assert!(is_word_byte(b'_') == true);",
          "    assert!(is_word_byte(b'0') == true);",
          "    assert!(is_word_byte(b'9') == true);",
          "    assert!(is_word_byte(b'a') == true);",
          "    assert!(is_word_byte(b'z') == true);",
          "    assert!(is_word_byte(b'A') == true);",
          "    assert!(is_word_byte(b'Z') == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'q');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'q');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'r');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'r');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b's');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b's');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b't');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b't');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'u');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'u');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'v');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'v');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'w');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'w');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'x');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'x');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'y');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'y');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'z');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'0');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'z');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'A');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'0');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'A');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'5'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'A');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'5'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'B');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'B');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'C');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'C');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'D');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'D');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'E');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'E');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'F');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'F');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'G');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'G');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'H');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'H');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'I');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'I');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'J');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'J');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'K');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'5'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'K');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'5'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'L');",
          "}"
        ],
        "oracle": [
          "    let result = is_word_byte(b'_'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'0'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'9'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'a'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'z'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'A'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z'); assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'L');",
          "    let result = is_word_byte(b'_'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'0'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'9'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'a'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'z'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'A'); assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z'); assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'M');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'M');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'N');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'N');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'O');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'O');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'P');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'P');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'Q');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'5');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'Q');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'_');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'5');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'a');",
          "    assert_eq!(result, true);",
          "    let result = is_word_byte(b'Z');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'R');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_') == true);",
          "    assert!(is_word_byte(b'0') == true);",
          "    assert!(is_word_byte(b'9') == true);",
          "    assert!(is_word_byte(b'a') == true);",
          "    assert!(is_word_byte(b'z') == true);",
          "    assert!(is_word_byte(b'A') == true);",
          "    assert!(is_word_byte(b'Z') == true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'R');",
          "    assert!(is_word_byte(b'_') == true);",
          "    assert!(is_word_byte(b'0') == true);",
          "    assert!(is_word_byte(b'9') == true);",
          "    assert!(is_word_byte(b'a') == true);",
          "    assert!(is_word_byte(b'z') == true);",
          "    assert!(is_word_byte(b'A') == true);",
          "    assert!(is_word_byte(b'Z') == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'S');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'S');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'T');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'T');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'U');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'U');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'V');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'V');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'9'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'A'));",
          "    assert!(is_word_byte(b'Z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'W');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'W');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'5'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'X');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'X');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'Y');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'Y');",
          "    assert_eq!(is_word_byte(b'_'), true);",
          "    assert_eq!(is_word_byte(b'0'), true);",
          "    assert_eq!(is_word_byte(b'9'), true);",
          "    assert_eq!(is_word_byte(b'a'), true);",
          "    assert_eq!(is_word_byte(b'z'), true);",
          "    assert_eq!(is_word_byte(b'A'), true);",
          "    assert_eq!(is_word_byte(b'Z'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = is_word_byte(b'Z');",
          "}"
        ],
        "oracle": [
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'5'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'Z'));",
          "    assert!(is_word_byte(b'A'));"
        ],
        "code": [
          "{",
          "    let result = is_word_byte(b'Z');",
          "    assert!(is_word_byte(b'_'));",
          "    assert!(is_word_byte(b'0'));",
          "    assert!(is_word_byte(b'5'));",
          "    assert!(is_word_byte(b'a'));",
          "    assert!(is_word_byte(b'z'));",
          "    assert!(is_word_byte(b'Z'));",
          "    assert!(is_word_byte(b'A'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]