[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let class_set_item = ast::ClassSetItem { /* initialize properties */ };",
          "    let class_bracketed = ast::ClassBracketed { span, negated: true, /* other properties */ };",
          "",
          "    let flags = Flags { unicode: Some(true), ..Flags::default() };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"some_pattern\");",
          "    let ast = Ast::ClassBracketed(Box::new(class_bracketed));",
          "",
          "    visitor.visit_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&ast).unwrap().expect(\"Expected Ok(())\");",
          "    assert!(self.trans().stack.borrow().last().is_some());",
          "    let frame = self.trans().stack.borrow().last().unwrap();",
          "    assert!(matches!(frame, HirFrame::Expr(_)));",
          "    let expr = match frame { HirFrame::Expr(expr) => expr, _ => panic!(\"Expected HirFrame::Expr\") };",
          "    assert_eq!(expr.kind, HirKind::Class(_));",
          "    assert!(self.flags().unicode());",
          "    assert!(self.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls).is_ok());"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(5) };",
          "    let class_set_item = ast::ClassSetItem { /* initialize properties */ };",
          "    let class_bracketed = ast::ClassBracketed { span, negated: true, /* other properties */ };",
          "",
          "    let flags = Flags { unicode: Some(true), ..Flags::default() };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"some_pattern\");",
          "    let ast = Ast::ClassBracketed(Box::new(class_bracketed));",
          "",
          "    visitor.visit_post(&ast).unwrap();",
          "    visitor.visit_post(&ast).unwrap().expect(\"Expected Ok(())\");",
          "    assert!(self.trans().stack.borrow().last().is_some());",
          "    let frame = self.trans().stack.borrow().last().unwrap();",
          "    assert!(matches!(frame, HirFrame::Expr(_)));",
          "    let expr = match frame { HirFrame::Expr(expr) => expr, _ => panic!(\"Expected HirFrame::Expr\") };",
          "    assert_eq!(expr.kind, HirKind::Class(_));",
          "    assert!(self.flags().unicode());",
          "    assert!(self.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(10), end: Position(15) };",
          "    let class_set_item = ast::ClassSetItem { /* initialize properties */ };",
          "    let class_bracketed = ast::ClassBracketed { span, negated: true, /* other properties */ };",
          "",
          "    let flags = Flags { unicode: Some(true), ..Flags::default() };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"another_pattern\");",
          "    let ast = Ast::ClassBracketed(Box::new(class_bracketed));",
          "",
          "    visitor.visit_post(&ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&ast).unwrap() == Ok(())",
          "    self.push(HirFrame::Expr(hir::Class::Unicode(cls))) in visit_post",
          "    self.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls) == Ok(()) in visit_post",
          "    self.flags().unicode() == true in visit_post",
          "    let mut cls = self.pop().unwrap().unwrap_class_unicode() in visit_post"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(10), end: Position(15) };",
          "    let class_set_item = ast::ClassSetItem { /* initialize properties */ };",
          "    let class_bracketed = ast::ClassBracketed { span, negated: true, /* other properties */ };",
          "",
          "    let flags = Flags { unicode: Some(true), ..Flags::default() };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"another_pattern\");",
          "    let ast = Ast::ClassBracketed(Box::new(class_bracketed));",
          "",
          "    visitor.visit_post(&ast).unwrap();",
          "    visitor.visit_post(&ast).unwrap() == Ok(())",
          "    self.push(HirFrame::Expr(hir::Class::Unicode(cls))) in visit_post",
          "    self.unicode_fold_and_negate(&ast.span, ast.negated, &mut cls) == Ok(()) in visit_post",
          "    self.flags().unicode() == true in visit_post",
          "    let mut cls = self.pop().unwrap().unwrap_class_unicode() in visit_post",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]