[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let pattern = Ast::Assertion(ast::Assertion {",
          "        span: Span { start: Position { byte: 0 }, end: Position { byte: 1 } },",
          "        kind: ast::AssertionKind::StartLine,",
          "    });",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let _ = visitor.visit_post(&pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.visit_post(&pattern), Err(Error::Parse(ast::Error)));",
          "    assert!(visitor.trans.stack.borrow().is_empty());",
          "    assert_eq!(visitor.trans.flags.get().unicode, Some(true));",
          "    assert_eq!(visitor.trans.utf8, true);",
          "    assert_eq!(visitor.trans.line_terminator, b'\\n');"
        ],
        "code": [
          "{",
          "    let pattern = Ast::Assertion(ast::Assertion {",
          "        span: Span { start: Position { byte: 0 }, end: Position { byte: 1 } },",
          "        kind: ast::AssertionKind::StartLine,",
          "    });",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let _ = visitor.visit_post(&pattern);",
          "    assert_eq!(visitor.visit_post(&pattern), Err(Error::Parse(ast::Error)));",
          "    assert!(visitor.trans.stack.borrow().is_empty());",
          "    assert_eq!(visitor.trans.flags.get().unicode, Some(true));",
          "    assert_eq!(visitor.trans.utf8, true);",
          "    assert_eq!(visitor.trans.line_terminator, b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let pattern = Ast::Assertion(ast::Assertion {",
          "        span: Span { start: Position { byte: 2 }, end: Position { byte: 3 } },",
          "        kind: ast::AssertionKind::EndLine,",
          "    });",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(false), ..Flags::default() }),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let _ = visitor.visit_post(&pattern);",
          "}"
        ],
        "oracle": [
          "    assert!(visitor.hir_assertion(&x).is_err());",
          "    assert!(visitor.hir_dot(**span).is_err());",
          "    assert!(visitor.hir_capture(&x, expr).is_err());",
          "    assert!(visitor.hir_unicode_class(&x).is_err());"
        ],
        "code": [
          "{",
          "    let pattern = Ast::Assertion(ast::Assertion {",
          "        span: Span { start: Position { byte: 2 }, end: Position { byte: 3 } },",
          "        kind: ast::AssertionKind::EndLine,",
          "    });",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(false), ..Flags::default() }),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let _ = visitor.visit_post(&pattern);",
          "    assert!(visitor.hir_assertion(&x).is_err());",
          "    assert!(visitor.hir_dot(**span).is_err());",
          "    assert!(visitor.hir_capture(&x, expr).is_err());",
          "    assert!(visitor.hir_unicode_class(&x).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let pattern = Ast::Assertion(ast::Assertion {",
          "        span: Span { start: Position { byte: 4 }, end: Position { byte: 5 } },",
          "        kind: ast::AssertionKind::WordBoundary,",
          "    });",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\r',",
          "    };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let _ = visitor.visit_post(&pattern);",
          "}"
        ],
        "oracle": [
          "    assert!(visitor.visit_post(&pattern).is_err());",
          "    assert_eq!(translator.stack.borrow().len(), 0);",
          "    assert!(visitor.trans().flags.get().unicode());",
          "    assert!(visitor.trans().utf8);",
          "    assert_eq!(visitor.trans().line_terminator, b'\\r');"
        ],
        "code": [
          "{",
          "    let pattern = Ast::Assertion(ast::Assertion {",
          "        span: Span { start: Position { byte: 4 }, end: Position { byte: 5 } },",
          "        kind: ast::AssertionKind::WordBoundary,",
          "    });",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(true), ..Flags::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\r',",
          "    };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let _ = visitor.visit_post(&pattern);",
          "    assert!(visitor.visit_post(&pattern).is_err());",
          "    assert_eq!(translator.stack.borrow().len(), 0);",
          "    assert!(visitor.trans().flags.get().unicode());",
          "    assert!(visitor.trans().utf8);",
          "    assert_eq!(visitor.trans().line_terminator, b'\\r');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let pattern = Ast::Assertion(ast::Assertion {",
          "        span: Span { start: Position { byte: 6 }, end: Position { byte: 7 } },",
          "        kind: ast::AssertionKind::NotWordBoundary,",
          "    });",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(false), ..Flags::default() }),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let _ = visitor.visit_post(&pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.pop().unwrap().unwrap_expr(), Hir::fail());",
          "    assert!(visitor.trans().flags.get().unicode().is_none());",
          "    assert_eq!(visitor.trans().flags.get().case_insensitive(), false);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::Expr(Hir::class(Class::Unicode(_))))));",
          "    assert!(visitor.pop_alt_expr().is_none());",
          "    assert!(visitor.pop_concat_expr().is_none());",
          "    assert!(visitor.pop().unwrap().unwrap_repetition().is_none());",
          "    assert!(visitor.pop().unwrap().unwrap_group().is_none());",
          "    assert!(visitor.trans().stack.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let pattern = Ast::Assertion(ast::Assertion {",
          "        span: Span { start: Position { byte: 6 }, end: Position { byte: 7 } },",
          "        kind: ast::AssertionKind::NotWordBoundary,",
          "    });",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(false), ..Flags::default() }),",
          "        utf8: false,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let mut visitor = TranslatorI::new(&translator, \"\");",
          "    let _ = visitor.visit_post(&pattern);",
          "    assert_eq!(visitor.pop().unwrap().unwrap_expr(), Hir::fail());",
          "    assert!(visitor.trans().flags.get().unicode().is_none());",
          "    assert_eq!(visitor.trans().flags.get().case_insensitive(), false);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::Expr(Hir::class(Class::Unicode(_))))));",
          "    assert!(visitor.pop_alt_expr().is_none());",
          "    assert!(visitor.pop_concat_expr().is_none());",
          "    assert!(visitor.pop().unwrap().unwrap_repetition().is_none());",
          "    assert!(visitor.pop().unwrap().unwrap_group().is_none());",
          "    assert!(visitor.trans().stack.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]