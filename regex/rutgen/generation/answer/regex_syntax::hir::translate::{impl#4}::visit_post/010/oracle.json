[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(false), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position(0), end: Position(10) };",
          "    let class_set_item = ast::ClassSetItem { /* initialize fields */ };",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ast::ClassSet::Normal(vec![class_set_item]),",
          "    };",
          "",
          "    let mut translator_i = TranslatorI::new(&translator, \"(?i)\");",
          "    translator_i.push(HirFrame::ClassBytes(hir::ClassBytes { /* initialize fields */ }));",
          "",
          "    let ast = Ast::ClassBracketed(Box::new(class_bracketed));",
          "    let _ = translator_i.visit_post(&ast);",
          "",
          "    // Additional code can be added here to check behaviors, if needed.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator_i.trans().stack.borrow().len(), 2);",
          "    assert!(matches!(translator_i.pop().unwrap(), HirFrame::Expr(_)));",
          "    let expr = translator_i.pop().unwrap();",
          "    assert!(matches!(expr, HirFrame::Expr(Hir { kind: HirKind::Class(Class::Bytes(_)), .. })));",
          "    assert_eq!(translator_i.flags().unicode(), false);",
          "    assert_eq!(expr.unwrap_class_bytes().set.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(false), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position(0), end: Position(10) };",
          "    let class_set_item = ast::ClassSetItem { /* initialize fields */ };",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ast::ClassSet::Normal(vec![class_set_item]),",
          "    };",
          "",
          "    let mut translator_i = TranslatorI::new(&translator, \"(?i)\");",
          "    translator_i.push(HirFrame::ClassBytes(hir::ClassBytes { /* initialize fields */ }));",
          "",
          "    let ast = Ast::ClassBracketed(Box::new(class_bracketed));",
          "    let _ = translator_i.visit_post(&ast);",
          "",
          "    // Additional code can be added here to check behaviors, if needed.",
          "    assert_eq!(translator_i.trans().stack.borrow().len(), 2);",
          "    assert!(matches!(translator_i.pop().unwrap(), HirFrame::Expr(_)));",
          "    let expr = translator_i.pop().unwrap();",
          "    assert!(matches!(expr, HirFrame::Expr(Hir { kind: HirKind::Class(Class::Bytes(_)), .. })));",
          "    assert_eq!(translator_i.flags().unicode(), false);",
          "    assert_eq!(expr.unwrap_class_bytes().set.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(false), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position(0), end: Position(10) };",
          "    let class_set_item = ast::ClassSetItem { /* initialize fields */ };",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ast::ClassSet::Normal(vec![class_set_item]),",
          "    };",
          "",
          "    let mut translator_i = TranslatorI::new(&translator, \"(?i)\");",
          "    translator_i.push(HirFrame::ClassBytes(hir::ClassBytes { /* initialize fields */ }));",
          "",
          "    let ast = Ast::ClassBracketed(Box::new(class_bracketed));",
          "    let _ = translator_i.visit_post(&ast);",
          "",
          "    // Additional code can be added here to check behaviors, if needed.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator_i.trans().stack.borrow().len(), 1);",
          "    assert!(matches!(translator_i.pop().unwrap(), HirFrame::Expr(Hir { kind: HirKind::Class(Class::Bytes(_)), .. })));",
          "    assert!(translator_i.trans().flags.get().unicode().is_false());",
          "    assert!(translator_i.trans().flags.get().case_insensitive().is_false());",
          "    assert!(translator_i.trans().flags.get().multi_line().is_false());",
          "    assert!(translator_i.trans().flags.get().dot_matches_new_line().is_false());",
          "    assert!(translator_i.trans().flags.get().crlf().is_false());",
          "    assert!(translator_i.pop().is_none());"
        ],
        "code": [
          "{",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags { unicode: Some(false), ..Default::default() }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: Position(0), end: Position(10) };",
          "    let class_set_item = ast::ClassSetItem { /* initialize fields */ };",
          "    let class_bracketed = ast::ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ast::ClassSet::Normal(vec![class_set_item]),",
          "    };",
          "",
          "    let mut translator_i = TranslatorI::new(&translator, \"(?i)\");",
          "    translator_i.push(HirFrame::ClassBytes(hir::ClassBytes { /* initialize fields */ }));",
          "",
          "    let ast = Ast::ClassBracketed(Box::new(class_bracketed));",
          "    let _ = translator_i.visit_post(&ast);",
          "",
          "    // Additional code can be added here to check behaviors, if needed.",
          "    assert_eq!(translator_i.trans().stack.borrow().len(), 1);",
          "    assert!(matches!(translator_i.pop().unwrap(), HirFrame::Expr(Hir { kind: HirKind::Class(Class::Bytes(_)), .. })));",
          "    assert!(translator_i.trans().flags.get().unicode().is_false());",
          "    assert!(translator_i.trans().flags.get().case_insensitive().is_false());",
          "    assert!(translator_i.trans().flags.get().multi_line().is_false());",
          "    assert!(translator_i.trans().flags.get().dot_matches_new_line().is_false());",
          "    assert!(translator_i.trans().flags.get().crlf().is_false());",
          "    assert!(translator_i.pop().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]