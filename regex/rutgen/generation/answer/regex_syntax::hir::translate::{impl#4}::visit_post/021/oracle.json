[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags::default()), ",
          "        utf8: true, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let pattern = \".\";",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let ast = Ast::Dot(Box::new(span));",
          "    let mut visitor = TranslatorI::new(&translator, pattern);",
          "    let result = visitor.visit_post(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(translator.stack.borrow().is_empty());",
          "    assert_eq!(visitor.trans().flags.get(), Flags::default());",
          "    assert!(visitor.trans().stack.borrow().is_empty());",
          "    assert!(matches!(*ast, Ast::Dot(ref span) if span.start == Position::default() && span.end == Position::default()));",
          "    assert!(visitor.pop().is_none());"
        ],
        "code": [
          "{",
          "    let translator = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags::default()), ",
          "        utf8: true, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let pattern = \".\";",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let ast = Ast::Dot(Box::new(span));",
          "    let mut visitor = TranslatorI::new(&translator, pattern);",
          "    let result = visitor.visit_post(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(translator.stack.borrow().is_empty());",
          "    assert_eq!(visitor.trans().flags.get(), Flags::default());",
          "    assert!(visitor.trans().stack.borrow().is_empty());",
          "    assert!(matches!(*ast, Ast::Dot(ref span) if span.start == Position::default() && span.end == Position::default()));",
          "    assert!(visitor.pop().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { ",
          "            dot_matches_new_line: Some(true), ",
          "            ..Flags::default() ",
          "        }), ",
          "        utf8: true, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let pattern = \".\";",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let ast = Ast::Dot(Box::new(span));",
          "    let mut visitor = TranslatorI::new(&translator, pattern);",
          "    let result = visitor.visit_post(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(!visitor.trans().stack.borrow().is_empty());",
          "    assert_matches!(visitor.trans().stack.borrow().last().unwrap(), HirFrame::Expr(_));",
          "    assert_matches!(visitor.trans().stack.borrow().last().unwrap(), HirFrame::Expr(ref hir) if matches!(hir.kind, HirKind::Dot(_)));"
        ],
        "code": [
          "{",
          "    let translator = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { ",
          "            dot_matches_new_line: Some(true), ",
          "            ..Flags::default() ",
          "        }), ",
          "        utf8: true, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let pattern = \".\";",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let ast = Ast::Dot(Box::new(span));",
          "    let mut visitor = TranslatorI::new(&translator, pattern);",
          "    let result = visitor.visit_post(&ast);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(!visitor.trans().stack.borrow().is_empty());",
          "    assert_matches!(visitor.trans().stack.borrow().last().unwrap(), HirFrame::Expr(_));",
          "    assert_matches!(visitor.trans().stack.borrow().last().unwrap(), HirFrame::Expr(ref hir) if matches!(hir.kind, HirKind::Dot(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let translator = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { ",
          "            dot_matches_new_line: Some(false), ",
          "            ..Flags::default() ",
          "        }), ",
          "        utf8: true, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let pattern = \".\";",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let ast = Ast::Dot(Box::new(span));",
          "    let mut visitor = TranslatorI::new(&translator, pattern);",
          "    let result = visitor.visit_post(&ast);",
          "}"
        ],
        "oracle": [
          "    self.push(HirFrame::Expr(self.hir_dot(**span)?));",
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(()));",
          "    assert!(visitor.trans().stack.borrow().len() > 0);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::Expr(_))));",
          "    assert!(!visitor.trans().stack.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let translator = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { ",
          "            dot_matches_new_line: Some(false), ",
          "            ..Flags::default() ",
          "        }), ",
          "        utf8: true, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let pattern = \".\";",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let ast = Ast::Dot(Box::new(span));",
          "    let mut visitor = TranslatorI::new(&translator, pattern);",
          "    let result = visitor.visit_post(&ast);",
          "    self.push(HirFrame::Expr(self.hir_dot(**span)?));",
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(()));",
          "    assert!(visitor.trans().stack.borrow().len() > 0);",
          "    assert!(matches!(visitor.trans().stack.borrow().last(), Some(HirFrame::Expr(_))));",
          "    assert!(!visitor.trans().stack.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]