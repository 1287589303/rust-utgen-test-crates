[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: 0, end: 10 };",
          "    let empty_ast = Ast::Concat(Box::new(vec![",
          "        Ast::Literal(Box::new(Literal {",
          "            span,",
          "            kind: LiteralKind::Unicode('a'),",
          "            c: 'a',",
          "        })),",
          "        Ast::Empty(Box::new(span.clone())),",
          "        Ast::Empty(Box::new(span.clone())),",
          "    ]));",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"test_pattern\");",
          "    visitor.visit_post(&empty_ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&empty_ast).unwrap();",
          "    assert_eq!(visitor.pop_concat_expr().is_some(), true);",
          "    assert_eq!(visitor.pop_concat_expr().unwrap().kind(), HirKind::Empty);",
          "    assert_eq!(visitor.pop_concat_expr().unwrap().kind(), HirKind::Empty);",
          "    assert_eq!(visitor.finish().is_ok(), true);"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: 0, end: 10 };",
          "    let empty_ast = Ast::Concat(Box::new(vec![",
          "        Ast::Literal(Box::new(Literal {",
          "            span,",
          "            kind: LiteralKind::Unicode('a'),",
          "            c: 'a',",
          "        })),",
          "        Ast::Empty(Box::new(span.clone())),",
          "        Ast::Empty(Box::new(span.clone())),",
          "    ]));",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"test_pattern\");",
          "    visitor.visit_post(&empty_ast).unwrap();",
          "    visitor.visit_post(&empty_ast).unwrap();",
          "    assert_eq!(visitor.pop_concat_expr().is_some(), true);",
          "    assert_eq!(visitor.pop_concat_expr().unwrap().kind(), HirKind::Empty);",
          "    assert_eq!(visitor.pop_concat_expr().unwrap().kind(), HirKind::Empty);",
          "    assert_eq!(visitor.finish().is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: 0, end: 10 };",
          "    let empty_ast = Ast::Concat(Box::new(vec![",
          "        Ast::Empty(Box::new(span.clone())),",
          "        Ast::Empty(Box::new(span.clone())),",
          "        Ast::Literal(Box::new(Literal {",
          "            span,",
          "            kind: LiteralKind::Unicode('b'),",
          "            c: 'b',",
          "        })),",
          "        Ast::Empty(Box::new(span.clone())),",
          "    ]));",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"test_pattern\");",
          "    visitor.visit_post(&empty_ast).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(visitor.trans().stack.borrow().len(), 1);",
          "    assert!(matches!(visitor.trans().stack.borrow().last().unwrap(), HirFrame::Expr(Hir::kind(HirKind::Concat(_)))));",
          "    assert!(matches!(visitor.pop_concat_expr().unwrap().kind(), HirKind::Empty));",
          "    assert!(matches!(visitor.pop_concat_expr().unwrap().kind(), HirKind::Empty));",
          "    assert!(visitor.pop_concat_expr().is_none());",
          "    assert_eq!(visitor.finish().unwrap(), Ok(()));"
        ],
        "code": [
          "{",
          "    let mut translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags::default()),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "",
          "    let span = Span { start: 0, end: 10 };",
          "    let empty_ast = Ast::Concat(Box::new(vec![",
          "        Ast::Empty(Box::new(span.clone())),",
          "        Ast::Empty(Box::new(span.clone())),",
          "        Ast::Literal(Box::new(Literal {",
          "            span,",
          "            kind: LiteralKind::Unicode('b'),",
          "            c: 'b',",
          "        })),",
          "        Ast::Empty(Box::new(span.clone())),",
          "    ]));",
          "",
          "    let mut visitor = TranslatorI::new(&translator, \"test_pattern\");",
          "    visitor.visit_post(&empty_ast).unwrap();",
          "    assert_eq!(visitor.trans().stack.borrow().len(), 1);",
          "    assert!(matches!(visitor.trans().stack.borrow().last().unwrap(), HirFrame::Expr(Hir::kind(HirKind::Concat(_)))));",
          "    assert!(matches!(visitor.pop_concat_expr().unwrap().kind(), HirKind::Empty));",
          "    assert!(matches!(visitor.pop_concat_expr().unwrap().kind(), HirKind::Empty));",
          "    assert!(visitor.pop_concat_expr().is_none());",
          "    assert_eq!(visitor.finish().unwrap(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]