[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = max_scalar_value(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);"
        ],
        "code": [
          "{",
          "    let result = max_scalar_value(1);",
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = max_scalar_value(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(max_scalar_value(1), 0x007F);",
          "    assert_eq!(max_scalar_value(2), 0x07FF);",
          "    assert_eq!(max_scalar_value(3), 0xFFFF);",
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
          "    assert_panics!(max_scalar_value(0));",
          "    assert_panics!(max_scalar_value(5));"
        ],
        "code": [
          "{",
          "    let result = max_scalar_value(2);",
          "    assert_eq!(max_scalar_value(1), 0x007F);",
          "    assert_eq!(max_scalar_value(2), 0x07FF);",
          "    assert_eq!(max_scalar_value(3), 0xFFFF);",
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
          "    assert_panics!(max_scalar_value(0));",
          "    assert_panics!(max_scalar_value(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = max_scalar_value(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);"
        ],
        "code": [
          "{",
          "    let result = max_scalar_value(3);",
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = max_scalar_value(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0x0010_FFFF);"
        ],
        "code": [
          "{",
          "    let result = max_scalar_value(4);",
          "    assert_eq!(result, 0x0010_FFFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = max_scalar_value(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(max_scalar_value(1), 0x007F);",
          "    assert_eq!(max_scalar_value(2), 0x07FF);",
          "    assert_eq!(max_scalar_value(3), 0xFFFF);",
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
          "    let result = std::panic::catch_unwind(|| max_scalar_value(5));",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = max_scalar_value(0);",
          "    assert_eq!(max_scalar_value(1), 0x007F);",
          "    assert_eq!(max_scalar_value(2), 0x07FF);",
          "    assert_eq!(max_scalar_value(3), 0xFFFF);",
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
          "    let result = std::panic::catch_unwind(|| max_scalar_value(5));",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = max_scalar_value(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(max_scalar_value(1), 0x007F);",
          "    assert_eq!(max_scalar_value(2), 0x07FF);",
          "    assert_eq!(max_scalar_value(3), 0xFFFF);",
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
          "    panic::catch_unwind(|| { max_scalar_value(5) }).unwrap_err();"
        ],
        "code": [
          "{",
          "    let result = max_scalar_value(5);",
          "    assert_eq!(max_scalar_value(1), 0x007F);",
          "    assert_eq!(max_scalar_value(2), 0x07FF);",
          "    assert_eq!(max_scalar_value(3), 0xFFFF);",
          "    assert_eq!(max_scalar_value(4), 0x0010_FFFF);",
          "    panic::catch_unwind(|| { max_scalar_value(5) }).unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]