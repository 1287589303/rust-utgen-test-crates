[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let literal_frame = HirFrame::Literal(vec![b'a', b'b', b'c']);",
          "    literal_frame.unwrap_class_unicode();",
          "}"
        ],
        "oracle": [
          "    panic!(\"tried to unwrap Unicode class from HirFrame, got: {:?}\", literal_frame);"
        ],
        "code": [
          "{",
          "    let literal_frame = HirFrame::Literal(vec![b'a', b'b', b'c']);",
          "    literal_frame.unwrap_class_unicode();",
          "    panic!(\"tried to unwrap Unicode class from HirFrame, got: {:?}\", literal_frame);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let class_bytes_frame = HirFrame::ClassBytes(hir::ClassBytes { set: IntervalSet::new() });",
          "    class_bytes_frame.unwrap_class_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes_frame.unwrap_class_unicode(), panic!(\"tried to unwrap Unicode class from HirFrame, got: {:?}\", class_bytes_frame));"
        ],
        "code": [
          "{",
          "    let class_bytes_frame = HirFrame::ClassBytes(hir::ClassBytes { set: IntervalSet::new() });",
          "    class_bytes_frame.unwrap_class_unicode();",
          "    assert_eq!(class_bytes_frame.unwrap_class_unicode(), panic!(\"tried to unwrap Unicode class from HirFrame, got: {:?}\", class_bytes_frame));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repetition_frame = HirFrame::Repetition;",
          "    repetition_frame.unwrap_class_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| repetition_frame.unwrap_class_unicode()).is_err(), true);"
        ],
        "code": [
          "{",
          "    let repetition_frame = HirFrame::Repetition;",
          "    repetition_frame.unwrap_class_unicode();",
          "    assert_eq!(std::panic::catch_unwind(|| repetition_frame.unwrap_class_unicode()).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_frame = HirFrame::Group { old_flags: Flags::default() };",
          "    group_frame.unwrap_class_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| group_frame.unwrap_class_unicode()).is_err(), true);"
        ],
        "code": [
          "{",
          "    let group_frame = HirFrame::Group { old_flags: Flags::default() };",
          "    group_frame.unwrap_class_unicode();",
          "    assert_eq!(std::panic::catch_unwind(|| group_frame.unwrap_class_unicode()).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let concat_frame = HirFrame::Concat;",
          "    concat_frame.unwrap_class_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| { let concat_frame = HirFrame::Concat; concat_frame.unwrap_class_unicode(); }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let concat_frame = HirFrame::Concat;",
          "    concat_frame.unwrap_class_unicode();",
          "    assert_eq!(std::panic::catch_unwind(|| { let concat_frame = HirFrame::Concat; concat_frame.unwrap_class_unicode(); }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alternation_frame = HirFrame::Alternation;",
          "    alternation_frame.unwrap_class_unicode();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let alternation_frame = HirFrame::Alternation;",
          "    alternation_frame.unwrap_class_unicode();",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let alternation_frame = HirFrame::Alternation;",
          "    alternation_frame.unwrap_class_unicode();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let alternation_frame = HirFrame::Alternation;",
          "    alternation_frame.unwrap_class_unicode();",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alternation_branch_frame = HirFrame::AlternationBranch;",
          "    alternation_branch_frame.unwrap_class_unicode();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let alternation_branch_frame = HirFrame::AlternationBranch;",
          "    alternation_branch_frame.unwrap_class_unicode();",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let alternation_branch_frame = HirFrame::AlternationBranch;",
          "    alternation_branch_frame.unwrap_class_unicode();",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let alternation_branch_frame = HirFrame::AlternationBranch;",
          "    alternation_branch_frame.unwrap_class_unicode();",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]