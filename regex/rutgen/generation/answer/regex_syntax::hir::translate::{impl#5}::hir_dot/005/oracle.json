[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \".*\";",
          "    let span = Span { start: Position(0), end: Position(2) };",
          "    ",
          "    struct TestVisitor {",
          "        trans: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut flags = Flags {",
          "        case_insensitive: None,",
          "        multi_line: None,",
          "        dot_matches_new_line: Some(false),",
          "        swap_greed: None,",
          "        unicode: Some(true),",
          "        crlf: None,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\xFF',",
          "    };",
          "",
          "    let translator_i = TranslatorI {",
          "        trans: &translator,",
          "        pattern,",
          "    };",
          "",
          "    let result = translator_i.hir_dot(span);",
          "    let error = result.err().unwrap();",
          "    assert_eq!(error.kind, ErrorKind::InvalidLineTerminator);",
          "}"
        ],
        "oracle": [
          "    let pattern = \".*\";",
          "    let span = Span { start: Position(0), end: Position(2) };",
          "    let mut flags = Flags { case_insensitive: None, multi_line: None, dot_matches_new_line: Some(false), swap_greed: None, unicode: Some(true), crlf: None };",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(flags), utf8: true, line_terminator: b'\\xFF' };",
          "    let translator_i = TranslatorI { trans: &translator, pattern };",
          "    let result = translator_i.hir_dot(span);",
          "    assert!(result.is_err());",
          "    let error = result.err().unwrap();",
          "    assert_eq!(error.kind, ErrorKind::InvalidLineTerminator);"
        ],
        "code": [
          "{",
          "    let pattern = \".*\";",
          "    let span = Span { start: Position(0), end: Position(2) };",
          "    ",
          "    struct TestVisitor {",
          "        trans: Translator,",
          "    }",
          "",
          "    impl Visitor for TestVisitor {",
          "        type Output = ();",
          "        type Err = Error;",
          "",
          "        fn finish(self) -> Result<Self::Output, Self::Err> {",
          "            Ok(())",
          "        }",
          "",
          "        fn start(&mut self) {}",
          "    }",
          "",
          "    let mut flags = Flags {",
          "        case_insensitive: None,",
          "        multi_line: None,",
          "        dot_matches_new_line: Some(false),",
          "        swap_greed: None,",
          "        unicode: Some(true),",
          "        crlf: None,",
          "    };",
          "",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(flags),",
          "        utf8: true,",
          "        line_terminator: b'\\xFF',",
          "    };",
          "",
          "    let translator_i = TranslatorI {",
          "        trans: &translator,",
          "        pattern,",
          "    };",
          "",
          "    let result = translator_i.hir_dot(span);",
          "    let error = result.err().unwrap();",
          "    assert_eq!(error.kind, ErrorKind::InvalidLineTerminator);",
          "    let pattern = \".*\";",
          "    let span = Span { start: Position(0), end: Position(2) };",
          "    let mut flags = Flags { case_insensitive: None, multi_line: None, dot_matches_new_line: Some(false), swap_greed: None, unicode: Some(true), crlf: None };",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(flags), utf8: true, line_terminator: b'\\xFF' };",
          "    let translator_i = TranslatorI { trans: &translator, pattern };",
          "    let result = translator_i.hir_dot(span);",
          "    assert!(result.is_err());",
          "    let error = result.err().unwrap();",
          "    assert_eq!(error.kind, ErrorKind::InvalidLineTerminator);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]