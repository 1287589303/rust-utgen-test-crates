[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::new(0), end: Position::new(1) };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_i.hir_dot(span);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(translator_i.hir_dot(span), Err(translator_i.error(span, ErrorKind::InvalidUtf8)));"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::new(0), end: Position::new(1) };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\n',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_i.hir_dot(span);",
          "    assert_eq!(translator_i.hir_dot(span), Err(translator_i.error(span, ErrorKind::InvalidUtf8)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::new(0), end: Position::new(1) };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\r',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_i.hir_dot(span);",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position::new(0), end: Position::new(1) };",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(Flags { unicode: Some(false), ..Default::default() }), utf8: true, line_terminator: b'\\r' };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    let result = translator_i.hir_dot(span);",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(error) => assert_eq!(error.kind, ErrorKind::InvalidUtf8),",
          "    _ => unreachable!(),",
          "    }"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::new(0), end: Position::new(1) };",
          "    let translator = Translator {",
          "        stack: RefCell::new(vec![]),",
          "        flags: Cell::new(Flags {",
          "            unicode: Some(false),",
          "            ..Default::default()",
          "        }),",
          "        utf8: true,",
          "        line_terminator: b'\\r',",
          "    };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "",
          "    let _ = translator_i.hir_dot(span);",
          "    let span = Span { start: Position::new(0), end: Position::new(1) };",
          "    let translator = Translator { stack: RefCell::new(vec![]), flags: Cell::new(Flags { unicode: Some(false), ..Default::default() }), utf8: true, line_terminator: b'\\r' };",
          "    let translator_i = TranslatorI::new(&translator, \"test\");",
          "    let result = translator_i.hir_dot(span);",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(error) => assert_eq!(error.kind, ErrorKind::InvalidUtf8),",
          "    _ => unreachable!(),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]