[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set = LookSet::empty();",
          "    set.contains_anchor_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_anchor_crlf(), false);"
        ],
        "code": [
          "{",
          "    let set = LookSet::empty();",
          "    set.contains_anchor_crlf();",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::EndCRLF);",
          "    set.contains_anchor_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_anchor_crlf(), true);"
        ],
        "code": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::EndCRLF);",
          "    set.contains_anchor_crlf();",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::EndCRLF);",
          "    set.set_insert(Look::WordAscii);",
          "    set.contains_anchor_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);"
        ],
        "code": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::EndCRLF);",
          "    set.set_insert(Look::WordAscii);",
          "    set.contains_anchor_crlf();",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::EndCRLF);",
          "    set.set_insert(Look::StartLF);",
          "    set.contains_anchor_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    set.set_insert(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);"
        ],
        "code": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::EndCRLF);",
          "    set.set_insert(Look::StartLF);",
          "    set.contains_anchor_crlf();",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    set.set_insert(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::WordStartAscii);",
          "    set.contains_anchor_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);"
        ],
        "code": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::WordStartAscii);",
          "    set.contains_anchor_crlf();",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::Start);",
          "    set.set_insert(Look::End);",
          "    set.contains_anchor_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    set.set_insert(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);"
        ],
        "code": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::Start);",
          "    set.set_insert(Look::End);",
          "    set.contains_anchor_crlf();",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    set.set_insert(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::EndCRLF);",
          "    set.set_insert(Look::WordEndAscii);",
          "    set.set_insert(Look::WordStartHalfAscii);",
          "    set.set_insert(Look::WordEndHalfAscii);",
          "    set.contains_anchor_crlf();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_remove(Look::WordEndAscii);",
          "    set.set_remove(Look::WordStartHalfAscii);",
          "    set.set_remove(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);"
        ],
        "code": [
          "{",
          "    let mut set = LookSet::default();",
          "    set.set_insert(Look::EndCRLF);",
          "    set.set_insert(Look::WordEndAscii);",
          "    set.set_insert(Look::WordStartHalfAscii);",
          "    set.set_insert(Look::WordEndHalfAscii);",
          "    set.contains_anchor_crlf();",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "    set.set_remove(Look::EndCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_remove(Look::WordEndAscii);",
          "    set.set_remove(Look::WordStartHalfAscii);",
          "    set.set_remove(Look::WordEndHalfAscii);",
          "    assert_eq!(set.contains_anchor_crlf(), false);",
          "    set.set_insert(Look::StartCRLF);",
          "    assert_eq!(set.contains_anchor_crlf(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]