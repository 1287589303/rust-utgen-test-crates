[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(0);",
          "    let result = index.as_i32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize());",
          "    let result = index.as_i32();",
          "    assert_eq!(result, core::i32::MAX as i32 - 1);",
          "    let index = SmallIndex::new_unchecked(1);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 1);",
          "    let index = SmallIndex::new_unchecked(2);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 2);",
          "    let index = SmallIndex::new_unchecked(100);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 100);",
          "    let index = SmallIndex::new_unchecked(4294967295);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(0);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 0);",
          "    let index = SmallIndex::new_unchecked(SmallIndex::MAX.as_usize());",
          "    let result = index.as_i32();",
          "    assert_eq!(result, core::i32::MAX as i32 - 1);",
          "    let index = SmallIndex::new_unchecked(1);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 1);",
          "    let index = SmallIndex::new_unchecked(2);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 2);",
          "    let index = SmallIndex::new_unchecked(100);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 100);",
          "    let index = SmallIndex::new_unchecked(4294967295);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(1);",
          "    let result = index.as_i32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert_eq!(SmallIndex::ZERO.as_i32(), 0);",
          "    assert_eq!(SmallIndex::MAX.as_i32(), core::i32::MAX as i32 - 1);",
          "    assert_eq!(SmallIndex::new_unchecked(10).as_i32(), 10);",
          "    assert_eq!(SmallIndex::new_unchecked(0).as_i32(), 0);",
          "    assert_eq!(SmallIndex::new_unchecked(2147483646).as_i32(), 2147483646);",
          "    assert_eq!(SmallIndex::new_unchecked(2147483647 - 1).as_i32(), 2147483647 - 1);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(1);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, 1);",
          "    assert_eq!(SmallIndex::ZERO.as_i32(), 0);",
          "    assert_eq!(SmallIndex::MAX.as_i32(), core::i32::MAX as i32 - 1);",
          "    assert_eq!(SmallIndex::new_unchecked(10).as_i32(), 10);",
          "    assert_eq!(SmallIndex::new_unchecked(0).as_i32(), 0);",
          "    assert_eq!(SmallIndex::new_unchecked(2147483646).as_i32(), 2147483646);",
          "    assert_eq!(SmallIndex::new_unchecked(2147483647 - 1).as_i32(), 2147483647 - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(core::i32::MAX as usize);",
          "    let result = index.as_i32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, core::i32::MAX);",
          "    assert!(result >= core::i32::MIN);",
          "    assert!(result <= core::i32::MAX);",
          "    assert!(result == index.as_i32());",
          "    assert_eq!(SmallIndex::ZERO.as_i32(), 0);",
          "    assert_eq!(SmallIndex::new_unchecked(1).as_i32(), 1);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(core::i32::MAX as usize);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, core::i32::MAX);",
          "    assert!(result >= core::i32::MIN);",
          "    assert!(result <= core::i32::MAX);",
          "    assert!(result == index.as_i32());",
          "    assert_eq!(SmallIndex::ZERO.as_i32(), 0);",
          "    assert_eq!(SmallIndex::new_unchecked(1).as_i32(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = SmallIndex::new_unchecked(core::i32::MAX as usize - 1);",
          "    let result = index.as_i32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, core::i32::MAX as i32);"
        ],
        "code": [
          "{",
          "    let index = SmallIndex::new_unchecked(core::i32::MAX as usize - 1);",
          "    let result = index.as_i32();",
          "    assert_eq!(result, core::i32::MAX as i32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]