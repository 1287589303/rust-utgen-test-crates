[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_set = StateSet::empty();",
          "    let other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(dest_set.is_empty());"
        ],
        "code": [
          "{",
          "    let self_set = StateSet::empty();",
          "    let other_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert!(dest_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(StateID(1));",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(dest_set.len(), 0);",
          "    assert!(self_set.is_empty());",
          "    assert!(!other_set.is_empty());"
        ],
        "code": [
          "{",
          "    let self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(StateID(1));",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(dest_set.len(), 0);",
          "    assert!(self_set.is_empty());",
          "    assert!(!other_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(StateID(1));",
          "    other_set.add(StateID(2));",
          "    other_set.add(StateID(3));",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(dest_set.is_empty());"
        ],
        "code": [
          "{",
          "    let self_set = StateSet::empty();",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(StateID(1));",
          "    other_set.add(StateID(2));",
          "    other_set.add(StateID(3));",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert!(dest_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]