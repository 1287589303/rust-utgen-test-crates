[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = StateSet::empty();",
          "    let mut set_b = StateSet::empty();",
          "    let mut result_set = StateSet::empty();",
          "",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "",
          "    set_a.add(state_id_1);",
          "    set_a.add(state_id_2);",
          "",
          "    set_b.add(state_id_2);",
          "    set_b.add(state_id_3);",
          "",
          "    set_a.intersection(&set_b, &mut result_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_set.len(), 1);",
          "    assert!(result_set.ids.borrow().contains(&StateID(SmallIndex(2))));",
          "    assert!(!result_set.ids.borrow().contains(&StateID(SmallIndex(1))));",
          "    assert!(!result_set.ids.borrow().contains(&StateID(SmallIndex(3))));"
        ],
        "code": [
          "{",
          "    let mut set_a = StateSet::empty();",
          "    let mut set_b = StateSet::empty();",
          "    let mut result_set = StateSet::empty();",
          "",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "",
          "    set_a.add(state_id_1);",
          "    set_a.add(state_id_2);",
          "",
          "    set_b.add(state_id_2);",
          "    set_b.add(state_id_3);",
          "",
          "    set_a.intersection(&set_b, &mut result_set);",
          "    assert_eq!(result_set.len(), 1);",
          "    assert!(result_set.ids.borrow().contains(&StateID(SmallIndex(2))));",
          "    assert!(!result_set.ids.borrow().contains(&StateID(SmallIndex(1))));",
          "    assert!(!result_set.ids.borrow().contains(&StateID(SmallIndex(3))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = StateSet::empty();",
          "    let mut set_b = StateSet::empty();",
          "    let mut result_set = StateSet::empty();",
          "",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "    let state_id_4 = StateID(SmallIndex(4));",
          "",
          "    set_a.add(state_id_1);",
          "    set_a.add(state_id_2);",
          "    set_a.add(state_id_3);",
          "",
          "    set_b.add(state_id_2);",
          "    set_b.add(state_id_3);",
          "    set_b.add(state_id_4);",
          "",
          "    set_a.intersection(&set_b, &mut result_set);",
          "}"
        ],
        "oracle": [
          "    let mut set_a = StateSet::empty();",
          "    let mut set_b = StateSet::empty();",
          "    let mut result_set = StateSet::empty();",
          "    ",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "    let state_id_4 = StateID(SmallIndex(4));",
          "    ",
          "    set_a.add(state_id_1);",
          "    set_a.add(state_id_2);",
          "    set_a.add(state_id_3);",
          "    ",
          "    set_b.add(state_id_2);",
          "    set_b.add(state_id_3);",
          "    set_b.add(state_id_4);",
          "    ",
          "    set_a.intersection(&set_b, &mut result_set);",
          "    assert!(!result_set.is_empty());",
          "    assert_eq!(result_set.len(), 2);",
          "    assert!(result_set.ids.borrow().contains(&state_id_2));",
          "    assert!(result_set.ids.borrow().contains(&state_id_3));",
          "    assert!(!result_set.ids.borrow().contains(&state_id_1));",
          "    assert!(!result_set.ids.borrow().contains(&state_id_4));"
        ],
        "code": [
          "{",
          "    let mut set_a = StateSet::empty();",
          "    let mut set_b = StateSet::empty();",
          "    let mut result_set = StateSet::empty();",
          "",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "    let state_id_4 = StateID(SmallIndex(4));",
          "",
          "    set_a.add(state_id_1);",
          "    set_a.add(state_id_2);",
          "    set_a.add(state_id_3);",
          "",
          "    set_b.add(state_id_2);",
          "    set_b.add(state_id_3);",
          "    set_b.add(state_id_4);",
          "",
          "    set_a.intersection(&set_b, &mut result_set);",
          "    let mut set_a = StateSet::empty();",
          "    let mut set_b = StateSet::empty();",
          "    let mut result_set = StateSet::empty();",
          "    ",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "    let state_id_3 = StateID(SmallIndex(3));",
          "    let state_id_4 = StateID(SmallIndex(4));",
          "    ",
          "    set_a.add(state_id_1);",
          "    set_a.add(state_id_2);",
          "    set_a.add(state_id_3);",
          "    ",
          "    set_b.add(state_id_2);",
          "    set_b.add(state_id_3);",
          "    set_b.add(state_id_4);",
          "    ",
          "    set_a.intersection(&set_b, &mut result_set);",
          "    assert!(!result_set.is_empty());",
          "    assert_eq!(result_set.len(), 2);",
          "    assert!(result_set.ids.borrow().contains(&state_id_2));",
          "    assert!(result_set.ids.borrow().contains(&state_id_3));",
          "    assert!(!result_set.ids.borrow().contains(&state_id_1));",
          "    assert!(!result_set.ids.borrow().contains(&state_id_4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set_a = StateSet::empty();",
          "    let mut set_b = StateSet::empty();",
          "    let mut result_set = StateSet::empty();",
          "",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "",
          "    set_a.add(state_id_1);",
          "    set_a.add(state_id_2);",
          "",
          "    set_b.add(state_id_1);",
          "    set_b.add(state_id_2);",
          "",
          "    set_a.intersection(&set_b, &mut result_set);",
          "}"
        ],
        "oracle": [
          "    assert!(!set_a.is_empty());",
          "    assert!(!set_b.is_empty());",
          "    assert_eq!(result_set.len(), 2);",
          "    assert!(result_set.ids.borrow().contains(&state_id_1));",
          "    assert!(result_set.ids.borrow().contains(&state_id_2));",
          "    assert_eq!(result_set.min(), state_id_1);"
        ],
        "code": [
          "{",
          "    let mut set_a = StateSet::empty();",
          "    let mut set_b = StateSet::empty();",
          "    let mut result_set = StateSet::empty();",
          "",
          "    let state_id_1 = StateID(SmallIndex(1));",
          "    let state_id_2 = StateID(SmallIndex(2));",
          "",
          "    set_a.add(state_id_1);",
          "    set_a.add(state_id_2);",
          "",
          "    set_b.add(state_id_1);",
          "    set_b.add(state_id_2);",
          "",
          "    set_a.intersection(&set_b, &mut result_set);",
          "    assert!(!set_a.is_empty());",
          "    assert!(!set_b.is_empty());",
          "    assert_eq!(result_set.len(), 2);",
          "    assert!(result_set.ids.borrow().contains(&state_id_1));",
          "    assert!(result_set.ids.borrow().contains(&state_id_2));",
          "    assert_eq!(result_set.min(), state_id_1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]