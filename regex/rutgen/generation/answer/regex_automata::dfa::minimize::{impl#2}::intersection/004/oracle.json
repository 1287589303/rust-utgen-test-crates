[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(1), StateID(2)])),",
          "    };",
          "    let other_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(2), StateID(3)])),",
          "    };",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    let mut self_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(1), StateID(2)])) };",
          "    let other_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(2), StateID(3)])) };",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(2)));"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(1), StateID(2)])),",
          "    };",
          "    let other_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(2), StateID(3)])),",
          "    };",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    let mut self_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(1), StateID(2)])) };",
          "    let other_set = StateSet { ids: Rc::new(RefCell::new(vec![StateID(2), StateID(3)])) };",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(1), StateID(2)])),",
          "    };",
          "    let other_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(3), StateID(4)])),",
          "    };",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    self_set.ids.borrow().contains(&StateID(1)) == true",
          "    self_set.ids.borrow().contains(&StateID(2)) == true",
          "    other_set.ids.borrow().contains(&StateID(3)) == true",
          "    other_set.ids.borrow().contains(&StateID(4)) == true",
          "    dest_set.len() == 0",
          "    dest_set.is_empty() == true",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    dest_set.ids.borrow().is_empty() == true"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(1), StateID(2)])),",
          "    };",
          "    let other_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(3), StateID(4)])),",
          "    };",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    self_set.ids.borrow().contains(&StateID(1)) == true",
          "    self_set.ids.borrow().contains(&StateID(2)) == true",
          "    other_set.ids.borrow().contains(&StateID(3)) == true",
          "    other_set.ids.borrow().contains(&StateID(4)) == true",
          "    dest_set.len() == 0",
          "    dest_set.is_empty() == true",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    dest_set.ids.borrow().is_empty() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(1), StateID(2), StateID(2)])),",
          "    };",
          "    let other_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(2), StateID(2), StateID(3)])),",
          "    };",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(2)));",
          "    assert!(!dest_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(1), StateID(2), StateID(2)])),",
          "    };",
          "    let other_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(2), StateID(2), StateID(3)])),",
          "    };",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(2)));",
          "    assert!(!dest_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(1), StateID(3)])),",
          "    };",
          "    let other_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(3), StateID(4)])),",
          "    };",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(4)));",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(self_set.ids.borrow().len() == 2);",
          "    assert!(other_set.ids.borrow().len() == 2);",
          "    assert!(dest_set.len() > 0);",
          "    assert!(self_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(self_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(other_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(other_set.ids.borrow().contains(&StateID(4)));"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(1), StateID(3)])),",
          "    };",
          "    let other_set = StateSet {",
          "        ids: Rc::new(RefCell::new(vec![StateID(3), StateID(4)])),",
          "    };",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 1);",
          "    assert!(dest_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(!dest_set.ids.borrow().contains(&StateID(4)));",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert!(dest_set.is_empty() == false);",
          "    assert!(self_set.ids.borrow().len() == 2);",
          "    assert!(other_set.ids.borrow().len() == 2);",
          "    assert!(dest_set.len() > 0);",
          "    assert!(self_set.ids.borrow().contains(&StateID(1)));",
          "    assert!(self_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(other_set.ids.borrow().contains(&StateID(3)));",
          "    assert!(other_set.ids.borrow().contains(&StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]