[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    for i in 1..=100 {",
          "        self_set.add(StateID(i));",
          "    }",
          "",
          "    let other_set = StateSet::empty();",
          "",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(dest_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    for i in 1..=100 {",
          "        self_set.add(StateID(i));",
          "    }",
          "",
          "    let other_set = StateSet::empty();",
          "",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(dest_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.add(StateID(1));",
          "",
          "    let other_set = StateSet::empty();",
          "",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(self_set.len(), 1);",
          "    assert!(self_set.deep_clone().is_empty() == false);",
          "    assert!(other_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "    ",
          "    self_set.add(StateID(1));",
          "",
          "    let other_set = StateSet::empty();",
          "",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert!(dest_set.is_empty());",
          "    assert_eq!(self_set.len(), 1);",
          "    assert!(self_set.deep_clone().is_empty() == false);",
          "    assert!(other_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(42));",
          "",
          "    let other_set = StateSet::empty();",
          "",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest_set.len(), 0);",
          "    assert!(dest_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut self_set = StateSet::empty();",
          "    let mut dest_set = StateSet::empty();",
          "",
          "    self_set.add(StateID(42));",
          "",
          "    let other_set = StateSet::empty();",
          "",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert_eq!(dest_set.len(), 0);",
          "    assert!(dest_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]