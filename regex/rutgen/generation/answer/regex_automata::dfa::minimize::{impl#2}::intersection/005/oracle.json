[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id1 = StateID(1);",
          "    let state_id2 = StateID(2);",
          "    let state_id3 = StateID(3);",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id1);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id1);",
          "    other_set.add(state_id2);",
          "    other_set.add(state_id3);",
          "    ",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    dest_set.len() == 1",
          "    dest_set.is_empty() == false",
          "    dest_set.iter(|id| assert_eq!(id, state_id1));"
        ],
        "code": [
          "{",
          "    let state_id1 = StateID(1);",
          "    let state_id2 = StateID(2);",
          "    let state_id3 = StateID(3);",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id1);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id1);",
          "    other_set.add(state_id2);",
          "    other_set.add(state_id3);",
          "    ",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    dest_set.len() == 1",
          "    dest_set.is_empty() == false",
          "    dest_set.iter(|id| assert_eq!(id, state_id1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id1 = StateID(1);",
          "    let state_id2 = StateID(2);",
          "    let state_id3 = StateID(3);",
          "    let state_id4 = StateID(4);",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id1);",
          "    self_set.add(state_id2);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id1);",
          "    other_set.add(state_id2);",
          "    other_set.add(state_id3);",
          "    other_set.add(state_id4);",
          "    ",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(!self_set.is_empty());",
          "    assert!(!other_set.is_empty());",
          "    assert_eq!(dest_set.len(), 2);",
          "    assert!(dest_set.ids.borrow().contains(&state_id1));",
          "    assert!(dest_set.ids.borrow().contains(&state_id2));",
          "    assert!(!dest_set.ids.borrow().contains(&state_id3));",
          "    assert!(!dest_set.ids.borrow().contains(&state_id4));"
        ],
        "code": [
          "{",
          "    let state_id1 = StateID(1);",
          "    let state_id2 = StateID(2);",
          "    let state_id3 = StateID(3);",
          "    let state_id4 = StateID(4);",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    self_set.add(state_id1);",
          "    self_set.add(state_id2);",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id1);",
          "    other_set.add(state_id2);",
          "    other_set.add(state_id3);",
          "    other_set.add(state_id4);",
          "    ",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert!(!self_set.is_empty());",
          "    assert!(!other_set.is_empty());",
          "    assert_eq!(dest_set.len(), 2);",
          "    assert!(dest_set.ids.borrow().contains(&state_id1));",
          "    assert!(dest_set.ids.borrow().contains(&state_id2));",
          "    assert!(!dest_set.ids.borrow().contains(&state_id3));",
          "    assert!(!dest_set.ids.borrow().contains(&state_id4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state_id1 = StateID(1);",
          "    let state_id2 = StateID(2);",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id1);",
          "    other_set.add(state_id2);",
          "    ",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "}"
        ],
        "oracle": [
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert_eq!(dest_set.len(), 0);",
          "    assert!(dest_set.is_empty() == true);",
          "    other_set.iter(|id| assert!(dest_set.ids.borrow().contains(&id)) == false);",
          "    assert_eq!(dest_set.len(), 0);",
          "    dest_set.clear();"
        ],
        "code": [
          "{",
          "    let state_id1 = StateID(1);",
          "    let state_id2 = StateID(2);",
          "    ",
          "    let mut self_set = StateSet::empty();",
          "    ",
          "    let mut other_set = StateSet::empty();",
          "    other_set.add(state_id1);",
          "    other_set.add(state_id2);",
          "    ",
          "    let mut dest_set = StateSet::empty();",
          "    self_set.intersection(&other_set, &mut dest_set);",
          "    assert!(self_set.is_empty() == false);",
          "    assert!(other_set.is_empty() == false);",
          "    assert_eq!(dest_set.len(), 0);",
          "    assert!(dest_set.is_empty() == true);",
          "    other_set.iter(|id| assert!(dest_set.ids.borrow().contains(&id)) == false);",
          "    assert_eq!(dest_set.len(), 0);",
          "    dest_set.clear();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]