[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = 0usize;",
          "    let result = SmallIndex::new_unchecked(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.as_u32(), 0);",
          "    assert_eq!(result.as_usize(), 0);",
          "    assert_eq!(result.as_i32(), 0);",
          "    assert_eq!(result.as_u64(), 0);",
          "    assert_eq!(result, SmallIndex::new_unchecked(0));"
        ],
        "code": [
          "{",
          "    let index = 0usize;",
          "    let result = SmallIndex::new_unchecked(index);",
          "    assert_eq!(result.as_u32(), 0);",
          "    assert_eq!(result.as_usize(), 0);",
          "    assert_eq!(result.as_i32(), 0);",
          "    assert_eq!(result.as_u64(), 0);",
          "    assert_eq!(result, SmallIndex::new_unchecked(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = (u32::MAX / 2) as usize;",
          "    let result = SmallIndex::new_unchecked(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.as_u32(), index as u32);",
          "    assert_eq!(result.as_usize(), index);",
          "    assert_eq!(result.as_i32(), (index as u32) as i32);",
          "    assert_eq!(result.as_u64(), index as u64);",
          "    assert_eq!(result, SmallIndex::new_unchecked(index));",
          "    assert!(result == SmallIndex(index as u32));"
        ],
        "code": [
          "{",
          "    let index = (u32::MAX / 2) as usize;",
          "    let result = SmallIndex::new_unchecked(index);",
          "    assert_eq!(result.as_u32(), index as u32);",
          "    assert_eq!(result.as_usize(), index);",
          "    assert_eq!(result.as_i32(), (index as u32) as i32);",
          "    assert_eq!(result.as_u64(), index as u64);",
          "    assert_eq!(result, SmallIndex::new_unchecked(index));",
          "    assert!(result == SmallIndex(index as u32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let index = u32::MAX as usize;",
          "    let result = SmallIndex::new_unchecked(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.as_u32(), u32::MAX);",
          "    assert_eq!(result.as_usize(), u32::MAX as usize);",
          "    assert_eq!(result.as_i32(), -1);"
        ],
        "code": [
          "{",
          "    let index = u32::MAX as usize;",
          "    let result = SmallIndex::new_unchecked(index);",
          "    assert_eq!(result.as_u32(), u32::MAX);",
          "    assert_eq!(result.as_usize(), u32::MAX as usize);",
          "    assert_eq!(result.as_i32(), -1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]