[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let minimum: usize = 1; // Minimum value to satisfy the condition",
          "    let given: usize = 0; // Given value less than minimum",
          "    ",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given },",
          "    };",
          "    ",
          "    let mut output = String::new();",
          "    let _ = build_error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"given cache capacity (0) is smaller than minimum required (1)\");"
        ],
        "code": [
          "{",
          "    let minimum: usize = 1; // Minimum value to satisfy the condition",
          "    let given: usize = 0; // Given value less than minimum",
          "    ",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given },",
          "    };",
          "    ",
          "    let mut output = String::new();",
          "    let _ = build_error.fmt(&mut output);",
          "    assert_eq!(output, \"given cache capacity (0) is smaller than minimum required (1)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let minimum: usize = usize::MAX; // Maximum possible value for minimum",
          "    let given: usize = usize::MAX - 1; // Given value, just below maximum",
          "    ",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given },",
          "    };",
          "    ",
          "    let mut output = String::new();",
          "    let _ = build_error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"given cache capacity (18446744073709551614) is smaller than minimum required (18446744073709551615)\");",
          "    assert!(output.contains(\"smaller than\"));",
          "    assert!(output.contains(\"minimum required\"));",
          "    assert!(output.contains(\"cache capacity\"));"
        ],
        "code": [
          "{",
          "    let minimum: usize = usize::MAX; // Maximum possible value for minimum",
          "    let given: usize = usize::MAX - 1; // Given value, just below maximum",
          "    ",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given },",
          "    };",
          "    ",
          "    let mut output = String::new();",
          "    let _ = build_error.fmt(&mut output);",
          "    assert_eq!(output, \"given cache capacity (18446744073709551614) is smaller than minimum required (18446744073709551615)\");",
          "    assert!(output.contains(\"smaller than\"));",
          "    assert!(output.contains(\"minimum required\"));",
          "    assert!(output.contains(\"cache capacity\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let minimum: usize = 1000; // A larger minimum value",
          "    let given: usize = 999; // A valid 'given' value less than the minimum",
          "    ",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given },",
          "    };",
          "    ",
          "    let mut output = String::new();",
          "    let _ = build_error.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"given cache capacity (999) is smaller than minimum required (1000)\");"
        ],
        "code": [
          "{",
          "    let minimum: usize = 1000; // A larger minimum value",
          "    let given: usize = 999; // A valid 'given' value less than the minimum",
          "    ",
          "    let build_error = BuildError {",
          "        kind: BuildErrorKind::InsufficientCacheCapacity { minimum, given },",
          "    };",
          "    ",
          "    let mut output = String::new();",
          "    let _ = build_error.fmt(&mut output);",
          "    assert_eq!(output, \"given cache capacity (999) is smaller than minimum required (1000)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]