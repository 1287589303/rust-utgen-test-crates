[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"[^a]\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    let _result = parser.parse_set_class_open();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '[');",
          "    assert!(self.bump_and_bump_space());",
          "    assert_eq!(self.char(), '^');",
          "    assert!(self.bump_and_bump_space());",
          "    assert_eq!(self.char(), '-');",
          "    assert!(union.items.is_empty());",
          "    assert_ne!(self.char(), ']');",
          "    assert!(self.bump_and_bump_space());",
          "    let expected_pattern = \"[^a]\";",
          "    let expected_span = Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 0, line: 1, column: 1 } };",
          "    assert!(matches!(result, Ok((set, union)) if set.span == expected_span && union.items.len() == 1));"
        ],
        "code": [
          "{",
          "    let pattern = \"[^a]\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    let _result = parser.parse_set_class_open();",
          "    assert_eq!(self.char(), '[');",
          "    assert!(self.bump_and_bump_space());",
          "    assert_eq!(self.char(), '^');",
          "    assert!(self.bump_and_bump_space());",
          "    assert_eq!(self.char(), '-');",
          "    assert!(union.items.is_empty());",
          "    assert_ne!(self.char(), ']');",
          "    assert!(self.bump_and_bump_space());",
          "    let expected_pattern = \"[^a]\";",
          "    let expected_span = Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 0, line: 1, column: 1 } };",
          "    assert!(matches!(result, Ok((set, union)) if set.span == expected_span && union.items.len() == 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"[-]\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    let _result = parser.parse_set_class_open();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*left_val, *right_val);",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(self.char() == '^');",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(self.char() == '-');",
          "    assert!(union.items.is_empty());",
          "    assert!(self.char() != ']');",
          "    assert!(self.bump_and_bump_space());",
          "    let expected_span = Span::new(Position { offset: 0, line: 1, column: 1 }, self.pos());",
          "    let expected_set = ast::ClassBracketed { span: expected_span, negated: true, kind: ast::ClassSet::union(ast::ClassSetUnion { span: Span::new(union.span.start, union.span.start), items: vec![] }) };",
          "    let expected_union = ast::ClassSetUnion { span: expected_span, items: vec!(ast::ClassSetItem::Literal(ast::Literal { span: self.span_char(), kind: ast::LiteralKind::Verbatim, c: '-' })) };",
          "    assert_eq!(_result, Ok((expected_set, expected_union)));"
        ],
        "code": [
          "{",
          "    let pattern = \"[-]\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    let _result = parser.parse_set_class_open();",
          "    assert_eq!(*left_val, *right_val);",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(self.char() == '^');",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(self.char() == '-');",
          "    assert!(union.items.is_empty());",
          "    assert!(self.char() != ']');",
          "    assert!(self.bump_and_bump_space());",
          "    let expected_span = Span::new(Position { offset: 0, line: 1, column: 1 }, self.pos());",
          "    let expected_set = ast::ClassBracketed { span: expected_span, negated: true, kind: ast::ClassSet::union(ast::ClassSetUnion { span: Span::new(union.span.start, union.span.start), items: vec![] }) };",
          "    let expected_union = ast::ClassSetUnion { span: expected_span, items: vec!(ast::ClassSetItem::Literal(ast::Literal { span: self.span_char(), kind: ast::LiteralKind::Verbatim, c: '-' })) };",
          "    assert_eq!(_result, Ok((expected_set, expected_union)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"[]\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    let _result = parser.parse_set_class_open();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '[');",
          "    assert!(self.bump_and_bump_space());",
          "    assert_eq!(self.char(), '^');",
          "    assert!(self.bump_and_bump_space());",
          "    assert_eq!(self.char(), '-');",
          "    assert!(union.items.is_empty());",
          "    assert_ne!(self.char(), ']');",
          "    assert!(self.bump_and_bump_space());",
          "    let expected_set = ast::ClassBracketed { span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 2, line: 1, column: 3 }), negated: true, kind: ast::ClassSet::union(ast::ClassSetUnion { span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 0, line: 1, column: 1 }), items: vec![] }) };",
          "    let expected_union = ast::ClassSetUnion { span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 0, line: 1, column: 1 }), items: vec![] };",
          "    assert_eq!(_result, Ok((expected_set, expected_union)));"
        ],
        "code": [
          "{",
          "    let pattern = \"[]\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position { offset: 0, line: 1, column: 1 }),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern,",
          "    };",
          "    let _result = parser.parse_set_class_open();",
          "    assert_eq!(self.char(), '[');",
          "    assert!(self.bump_and_bump_space());",
          "    assert_eq!(self.char(), '^');",
          "    assert!(self.bump_and_bump_space());",
          "    assert_eq!(self.char(), '-');",
          "    assert!(union.items.is_empty());",
          "    assert_ne!(self.char(), ']');",
          "    assert!(self.bump_and_bump_space());",
          "    let expected_set = ast::ClassBracketed { span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 2, line: 1, column: 3 }), negated: true, kind: ast::ClassSet::union(ast::ClassSetUnion { span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 0, line: 1, column: 1 }), items: vec![] }) };",
          "    let expected_union = ast::ClassSetUnion { span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 0, line: 1, column: 1 }), items: vec![] };",
          "    assert_eq!(_result, Ok((expected_set, expected_union)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]