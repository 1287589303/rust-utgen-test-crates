[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(r\"(a)(b)(c)\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 4);",
          "    let nfa = NFA::new(r\"abc\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 1);",
          "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(r\"abc\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 0);",
          "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(r\"(a)(b)(c)\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(r\"(a)(b)(c)\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 4);",
          "    let nfa = NFA::new(r\"abc\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 1);",
          "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(r\"abc\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 0);",
          "    let nfa = NFA::compiler().configure(NFA::config().which_captures(WhichCaptures::None)).build(r\"(a)(b)(c)\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new(r\"abc\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new(r\"abc\").unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::compiler()",
          "        .configure(NFA::config().which_captures(WhichCaptures::None))",
          "        .build(r\"abc\")",
          "        .unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert!(result <= 4);",
          "    assert_eq!(result, nfa.group_info().group_len(PatternID::ZERO));"
        ],
        "code": [
          "{",
          "    let nfa = NFA::compiler()",
          "        .configure(NFA::config().which_captures(WhichCaptures::None))",
          "        .build(r\"abc\")",
          "        .unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 0);",
          "    assert!(result <= 4);",
          "    assert_eq!(result, nfa.group_info().group_len(PatternID::ZERO));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::compiler()",
          "        .configure(NFA::config().which_captures(WhichCaptures::None))",
          "        .build(r\"(a)(b)(c)\")",
          "        .unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert_eq!(nfa.group_info().group_len(PatternID::ZERO), 0);",
          "    ",
          "    let nfa = NFA::new(r\"(a)(b)(c)\").unwrap();",
          "    assert_eq!(nfa.group_info().group_len(PatternID::ZERO), 4);",
          "    ",
          "    let nfa = NFA::new(r\"abc\").unwrap();",
          "    assert_eq!(nfa.group_info().group_len(PatternID::ZERO), 1);",
          "    ",
          "    let nfa = NFA::compiler()",
          "    .configure(NFA::config().which_captures(WhichCaptures::None))",
          "    .build(r\"abc\")",
          "    .unwrap();",
          "    assert_eq!(nfa.group_info().group_len(PatternID::ZERO), 0);"
        ],
        "code": [
          "{",
          "    let nfa = NFA::compiler()",
          "        .configure(NFA::config().which_captures(WhichCaptures::None))",
          "        .build(r\"(a)(b)(c)\")",
          "        .unwrap();",
          "    let result = nfa.group_info().group_len(PatternID::ZERO);",
          "    assert_eq!(result, 0);",
          "    assert_eq!(nfa.group_info().group_len(PatternID::ZERO), 0);",
          "    ",
          "    let nfa = NFA::new(r\"(a)(b)(c)\").unwrap();",
          "    assert_eq!(nfa.group_info().group_len(PatternID::ZERO), 4);",
          "    ",
          "    let nfa = NFA::new(r\"abc\").unwrap();",
          "    assert_eq!(nfa.group_info().group_len(PatternID::ZERO), 1);",
          "    ",
          "    let nfa = NFA::compiler()",
          "    .configure(NFA::config().which_captures(WhichCaptures::None))",
          "    .build(r\"abc\")",
          "    .unwrap();",
          "    assert_eq!(nfa.group_info().group_len(PatternID::ZERO), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]