[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let class_bracketed = ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ClassSet::default(),",
          "    };",
          "    let ast = Ast::class_bracketed(class_bracketed);",
          "    ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ast.has_subexprs(), true);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let class_bracketed = ClassBracketed {",
          "        span,",
          "        negated: true,",
          "        kind: ClassSet::default(),",
          "    };",
          "    let ast = Ast::class_bracketed(class_bracketed);",
          "    ast.has_subexprs();",
          "    assert_eq!(ast.has_subexprs(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let class_bracketed = ClassBracketed {",
          "        span,",
          "        negated: false,",
          "        kind: ClassSet::default(),",
          "    };",
          "    let ast = Ast::class_bracketed(class_bracketed);",
          "    ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ast.has_subexprs(), true);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::default(), end: Position::default() };",
          "    let class_bracketed = ClassBracketed {",
          "        span,",
          "        negated: false,",
          "        kind: ClassSet::default(),",
          "    };",
          "    let ast = Ast::class_bracketed(class_bracketed);",
          "    ast.has_subexprs();",
          "    assert_eq!(ast.has_subexprs(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]