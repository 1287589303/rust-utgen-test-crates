[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::flags(flags);",
          "    let result = ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::flags(flags);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::Example };",
          "    let ast = Ast::class_unicode(unicode_class);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let literal = Literal { span, kind: LiteralKind::Example, c: 'a' };",
          "    let ast = Ast::literal(literal);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::Example, negated: false };",
          "    let ast = Ast::class_perl(perl_class);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let assertion = Assertion { span, kind: AssertionKind::Example };",
          "    let ast = Ast::assertion(assertion);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let dot = Ast::dot(span);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let empty = Ast::empty(span);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::flags(flags);",
          "    let result = ast.has_subexprs();",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let flags = SetFlags { span, flags: Flags::new() };",
          "    let ast = Ast::flags(flags);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let unicode_class = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::Example };",
          "    let ast = Ast::class_unicode(unicode_class);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let literal = Literal { span, kind: LiteralKind::Example, c: 'a' };",
          "    let ast = Ast::literal(literal);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let perl_class = ClassPerl { span, kind: ClassPerlKind::Example, negated: false };",
          "    let ast = Ast::class_perl(perl_class);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let assertion = Assertion { span, kind: AssertionKind::Example };",
          "    let ast = Ast::assertion(assertion);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let dot = Ast::dot(span);",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let empty = Ast::empty(span);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::empty(span);",
          "    let result = ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::flags(SetFlags { span, flags: Flags::new() });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::class_unicode(ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::literal(Literal { span, kind: LiteralKind::SomeKind, c: 'a' });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::class_perl(ClassPerl { span, negated: false, kind: ClassPerlKind::SomeKind });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::empty(span);",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::assertion(Assertion { span, kind: AssertionKind::SomeKind });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::dot(span);",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::empty(span);",
          "    let result = ast.has_subexprs();",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::flags(SetFlags { span, flags: Flags::new() });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::class_unicode(ClassUnicode { span, negated: false, kind: ClassUnicodeKind::SomeKind });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::literal(Literal { span, kind: LiteralKind::SomeKind, c: 'a' });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::class_perl(ClassPerl { span, negated: false, kind: ClassPerlKind::SomeKind });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::empty(span);",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::assertion(Assertion { span, kind: AssertionKind::SomeKind });",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::dot(span);",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let literal = Literal { span, kind: LiteralKind::default(), c: 'a' };",
          "    let ast = Ast::literal(literal);",
          "    let result = ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let literal = Literal { span, kind: LiteralKind::default(), c: 'a' };",
          "    let ast = Ast::literal(literal);",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::dot(span);",
          "    let result = ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::flags(SetFlags { span, flags: Flags });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::class_unicode(ClassUnicode { span, negated: false, kind: ClassUnicodeKind });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::literal(Literal { span, kind: LiteralKind::Unicode, c: 'a' });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::class_perl(ClassPerl { span, negated: false, kind: ClassPerlKind });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::empty(span);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::assertion(Assertion { span, kind: AssertionKind::WordBoundary });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::dot(span);",
          "    assert_eq!(ast.has_subexprs(), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::dot(span);",
          "    let result = ast.has_subexprs();",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::flags(SetFlags { span, flags: Flags });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::class_unicode(ClassUnicode { span, negated: false, kind: ClassUnicodeKind });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::literal(Literal { span, kind: LiteralKind::Unicode, c: 'a' });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::class_perl(ClassPerl { span, negated: false, kind: ClassPerlKind });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::empty(span);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::assertion(Assertion { span, kind: AssertionKind::WordBoundary });",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let ast = Ast::dot(span);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let assertion = Assertion { span, kind: AssertionKind::default() };",
          "    let ast = Ast::assertion(assertion);",
          "    let result = ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let flags = SetFlags { span, flags: Flags::default() };",
          "    let ast = Ast::flags(flags);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let literal = Literal { span, kind: LiteralKind::default(), c: 'a' };",
          "    let ast = Ast::literal(literal);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_unicode = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::default() };",
          "    let ast = Ast::class_unicode(class_unicode);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_perl = ClassPerl { span, kind: ClassPerlKind::default(), negated: false };",
          "    let ast = Ast::class_perl(class_perl);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let empty_ast = Ast::empty(span);",
          "    assert_eq!(empty_ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let assertion = Assertion { span, kind: AssertionKind::default() };",
          "    let ast = Ast::assertion(assertion);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let dot_ast = Ast::dot(span);",
          "    assert_eq!(dot_ast.has_subexprs(), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let assertion = Assertion { span, kind: AssertionKind::default() };",
          "    let ast = Ast::assertion(assertion);",
          "    let result = ast.has_subexprs();",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let flags = SetFlags { span, flags: Flags::default() };",
          "    let ast = Ast::flags(flags);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let literal = Literal { span, kind: LiteralKind::default(), c: 'a' };",
          "    let ast = Ast::literal(literal);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_unicode = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::default() };",
          "    let ast = Ast::class_unicode(class_unicode);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_perl = ClassPerl { span, kind: ClassPerlKind::default(), negated: false };",
          "    let ast = Ast::class_perl(class_perl);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let empty_ast = Ast::empty(span);",
          "    assert_eq!(empty_ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let assertion = Assertion { span, kind: AssertionKind::default() };",
          "    let ast = Ast::assertion(assertion);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let dot_ast = Ast::dot(span);",
          "    assert_eq!(dot_ast.has_subexprs(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_unicode = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::default() };",
          "    let ast = Ast::class_unicode(class_unicode);",
          "    let result = ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_unicode = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::default() };",
          "    let ast = Ast::class_unicode(class_unicode);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let literal = Literal { span, kind: LiteralKind::default(), c: 'a' };",
          "    let ast = Ast::literal(literal);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_perl = ClassPerl { span, kind: ClassPerlKind::default(), negated: false };",
          "    let ast = Ast::class_perl(class_perl);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let assertions = Assertion { span, kind: AssertionKind::default() };",
          "    let ast = Ast::assertion(assertions);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let flags = SetFlags { span, flags: Flags::default() };",
          "    let ast = Ast::flags(flags);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let dot = Dot(span);",
          "    let ast = Ast::dot(dot);",
          "    assert_eq!(ast.has_subexprs(), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_unicode = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::default() };",
          "    let ast = Ast::class_unicode(class_unicode);",
          "    let result = ast.has_subexprs();",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_unicode = ClassUnicode { span, negated: false, kind: ClassUnicodeKind::default() };",
          "    let ast = Ast::class_unicode(class_unicode);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let literal = Literal { span, kind: LiteralKind::default(), c: 'a' };",
          "    let ast = Ast::literal(literal);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_perl = ClassPerl { span, kind: ClassPerlKind::default(), negated: false };",
          "    let ast = Ast::class_perl(class_perl);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let assertions = Assertion { span, kind: AssertionKind::default() };",
          "    let ast = Ast::assertion(assertions);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let flags = SetFlags { span, flags: Flags::default() };",
          "    let ast = Ast::flags(flags);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "    ",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let dot = Dot(span);",
          "    let ast = Ast::dot(dot);",
          "    assert_eq!(ast.has_subexprs(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_perl = ClassPerl { span, kind: ClassPerlKind::default(), negated: false };",
          "    let ast = Ast::class_perl(class_perl);",
          "    let result = ast.has_subexprs();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ast.has_subexprs(), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position(0), end: Position(1) };",
          "    let class_perl = ClassPerl { span, kind: ClassPerlKind::default(), negated: false };",
          "    let ast = Ast::class_perl(class_perl);",
          "    let result = ast.has_subexprs();",
          "    assert_eq!(ast.has_subexprs(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]