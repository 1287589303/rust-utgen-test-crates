[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().specialize_start_states(true);",
          "    let _ = config;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_specialize_start_states(), true);",
          "    let config_false = Config::new().specialize_start_states(false);",
          "    assert_eq!(config_false.get_specialize_start_states(), false);",
          "    let config_default = Config::new();",
          "    assert_eq!(config_default.get_specialize_start_states(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().specialize_start_states(true);",
          "    let _ = config;",
          "    assert_eq!(config.get_specialize_start_states(), true);",
          "    let config_false = Config::new().specialize_start_states(false);",
          "    assert_eq!(config_false.get_specialize_start_states(), false);",
          "    let config_default = Config::new();",
          "    assert_eq!(config_default.get_specialize_start_states(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().specialize_start_states(false);",
          "    let _ = config;",
          "}"
        ],
        "oracle": [
          "    let config = Config::new().specialize_start_states(false); assert_eq!(config.get_specialize_start_states(), false);",
          "    let config = Config::new().specialize_start_states(true); assert_eq!(config.get_specialize_start_states(), true);",
          "    let config1 = Config::new().specialize_start_states(true); let config2 = config1.specialize_start_states(false); assert_eq!(config2.get_specialize_start_states(), false);",
          "    let config1 = Config::new().specialize_start_states(false); let config2 = config1.specialize_start_states(true); assert_eq!(config2.get_specialize_start_states(), true);",
          "    let config = Config::new(); assert_eq!(config.get_specialize_start_states(), false);"
        ],
        "code": [
          "{",
          "    let config = Config::new().specialize_start_states(false);",
          "    let _ = config;",
          "    let config = Config::new().specialize_start_states(false); assert_eq!(config.get_specialize_start_states(), false);",
          "    let config = Config::new().specialize_start_states(true); assert_eq!(config.get_specialize_start_states(), true);",
          "    let config1 = Config::new().specialize_start_states(true); let config2 = config1.specialize_start_states(false); assert_eq!(config2.get_specialize_start_states(), false);",
          "    let config1 = Config::new().specialize_start_states(false); let config2 = config1.specialize_start_states(true); assert_eq!(config2.get_specialize_start_states(), true);",
          "    let config = Config::new(); assert_eq!(config.get_specialize_start_states(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut config = Config::new();",
          "    config.specialize_start_states(false);",
          "    let _ = config;",
          "}"
        ],
        "oracle": [
          "    let config = Config::new();",
          "    assert_eq!(config.get_specialize_start_states(), false);",
          "    let config = config.specialize_start_states(true);",
          "    assert_eq!(config.get_specialize_start_states(), true);",
          "    let config = config.specialize_start_states(false);",
          "    assert_eq!(config.get_specialize_start_states(), false);"
        ],
        "code": [
          "{",
          "    let mut config = Config::new();",
          "    config.specialize_start_states(false);",
          "    let _ = config;",
          "    let config = Config::new();",
          "    assert_eq!(config.get_specialize_start_states(), false);",
          "    let config = config.specialize_start_states(true);",
          "    assert_eq!(config.get_specialize_start_states(), true);",
          "    let config = config.specialize_start_states(false);",
          "    assert_eq!(config.get_specialize_start_states(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]