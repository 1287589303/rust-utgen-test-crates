[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let flags_item = ast::FlagsItem {",
          "        span: Span::default(),",
          "        kind: ast::FlagsItemKind::Flag(Flag::MultiLine),",
          "    };",
          "",
          "    let flags = ast::Flags {",
          "        span: Span::default(),",
          "        items: vec![flags_item],",
          "    };",
          "",
          "    writer.fmt_flags(&flags).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.output.contains(\"m\")",
          "    writer.output.len() == 1",
          "    writer.fmt_flags(&flags).is_ok()",
          "    writer.output == \"m\"",
          "    writer.output.contains(\"-\") == false",
          "    writer.fmt_flags(&flags).err().is_none()"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let flags_item = ast::FlagsItem {",
          "        span: Span::default(),",
          "        kind: ast::FlagsItemKind::Flag(Flag::MultiLine),",
          "    };",
          "",
          "    let flags = ast::Flags {",
          "        span: Span::default(),",
          "        items: vec![flags_item],",
          "    };",
          "",
          "    writer.fmt_flags(&flags).unwrap();",
          "    writer.output.contains(\"m\")",
          "    writer.output.len() == 1",
          "    writer.fmt_flags(&flags).is_ok()",
          "    writer.output == \"m\"",
          "    writer.output.contains(\"-\") == false",
          "    writer.fmt_flags(&flags).err().is_none()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let flags_items = vec![",
          "        ast::FlagsItem {",
          "            span: Span::default(),",
          "            kind: ast::FlagsItemKind::Flag(Flag::MultiLine),",
          "        },",
          "        ast::FlagsItem {",
          "            span: Span::default(),",
          "            kind: ast::FlagsItemKind::Flag(Flag::CaseInsensitive),",
          "        },",
          "    ];",
          "",
          "    let flags = ast::Flags {",
          "        span: Span::default(),",
          "        items: flags_items,",
          "    };",
          "",
          "    writer.fmt_flags(&flags).unwrap();",
          "}"
        ],
        "oracle": [
          "    writer.output == \"m\"",
          "    writer.output == \"im\"",
          "    writer.output.len() == 2",
          "    writer.output.contains(\"m\")",
          "    writer.output.contains(\"i\")",
          "    writer.output.contains(\"-\") == false",
          "    writer.output.contains(\"s\") == false",
          "    writer.output.contains(\"U\") == false",
          "    writer.output.contains(\"u\") == false",
          "    writer.output.contains(\"R\") == false",
          "    writer.output.contains(\"x\") == false"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "",
          "    let flags_items = vec![",
          "        ast::FlagsItem {",
          "            span: Span::default(),",
          "            kind: ast::FlagsItemKind::Flag(Flag::MultiLine),",
          "        },",
          "        ast::FlagsItem {",
          "            span: Span::default(),",
          "            kind: ast::FlagsItemKind::Flag(Flag::CaseInsensitive),",
          "        },",
          "    ];",
          "",
          "    let flags = ast::Flags {",
          "        span: Span::default(),",
          "        items: flags_items,",
          "    };",
          "",
          "    writer.fmt_flags(&flags).unwrap();",
          "    writer.output == \"m\"",
          "    writer.output == \"im\"",
          "    writer.output.len() == 2",
          "    writer.output.contains(\"m\")",
          "    writer.output.contains(\"i\")",
          "    writer.output.contains(\"-\") == false",
          "    writer.output.contains(\"s\") == false",
          "    writer.output.contains(\"U\") == false",
          "    writer.output.contains(\"u\") == false",
          "    writer.output.contains(\"R\") == false",
          "    writer.output.contains(\"x\") == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ErrWriter;",
          "",
          "    impl fmt::Write for ErrWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Err(fmt::Error)",
          "        }",
          "    }",
          "",
          "    let mut writer = ErrWriter;",
          "",
          "    let flags_item = ast::FlagsItem {",
          "        span: Span::default(),",
          "        kind: ast::FlagsItemKind::Flag(Flag::MultiLine),",
          "    };",
          "",
          "    let flags = ast::Flags {",
          "        span: Span::default(),",
          "        items: vec![flags_item],",
          "    };",
          "",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "}"
        ],
        "oracle": [
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Negation };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::CaseInsensitive) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::DotMatchesNewLine) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::SwapGreed) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::Unicode) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::CRLF) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::IgnoreWhitespace) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();"
        ],
        "code": [
          "{",
          "    struct ErrWriter;",
          "",
          "    impl fmt::Write for ErrWriter {",
          "        fn write_str(&mut self, _: &str) -> fmt::Result {",
          "            Err(fmt::Error)",
          "        }",
          "    }",
          "",
          "    let mut writer = ErrWriter;",
          "",
          "    let flags_item = ast::FlagsItem {",
          "        span: Span::default(),",
          "        kind: ast::FlagsItemKind::Flag(Flag::MultiLine),",
          "    };",
          "",
          "    let flags = ast::Flags {",
          "        span: Span::default(),",
          "        items: vec![flags_item],",
          "    };",
          "",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Negation };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::CaseInsensitive) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::DotMatchesNewLine) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::SwapGreed) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::Unicode) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::CRLF) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "    let flags_item = ast::FlagsItem { span: Span::default(), kind: ast::FlagsItemKind::Flag(Flag::IgnoreWhitespace) };",
          "    let flags = ast::Flags { span: Span::default(), items: vec![flags_item] };",
          "    writer.fmt_flags(&flags).unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]