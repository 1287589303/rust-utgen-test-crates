[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"(.+)\").unwrap(),",
          "        pattern: Arc::from(r\"(.+)\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    assert!(locs.0.is_some());",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert_eq!(locs.0.get(0), Some((0, 0)));",
          "    assert_eq!(locs.0.get(1), None);"
        ],
        "code": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"(.+)\").unwrap(),",
          "        pattern: Arc::from(r\"(.+)\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "    assert!(locs.0.is_some());",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert_eq!(locs.0.get(0), Some((0, 0)));",
          "    assert_eq!(locs.0.get(1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"(.)(.)(\\w+)\").unwrap(),",
          "        pattern: Arc::from(r\"(.)(.)(\\w+)\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    let locs = re.capture_locations();",
          "    assert!(locs.0.len() > 0);",
          "    assert_eq!(locs.0.get(0).is_some(), true);",
          "    assert_eq!(locs.0.get(1).is_some(), true);",
          "    assert_eq!(locs.0.get(2).is_some(), true);",
          "    assert_eq!(locs.0.get(3).is_some(), false);",
          "    assert_eq!(locs.0.len(), re.captures_len());",
          "    assert_eq!(locs.0.len(), 4);"
        ],
        "code": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"(.)(.)(\\w+)\").unwrap(),",
          "        pattern: Arc::from(r\"(.)(.)(\\w+)\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "    let locs = re.capture_locations();",
          "    assert!(locs.0.len() > 0);",
          "    assert_eq!(locs.0.get(0).is_some(), true);",
          "    assert_eq!(locs.0.get(1).is_some(), true);",
          "    assert_eq!(locs.0.get(2).is_some(), true);",
          "    assert_eq!(locs.0.get(3).is_some(), false);",
          "    assert_eq!(locs.0.len(), re.captures_len());",
          "    assert_eq!(locs.0.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)\").unwrap(),",
          "        pattern: Arc::from(r\"(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)\").unwrap();",
          "    let locs = re.capture_locations();",
          "    assert!(locs.0.len() > 0);",
          "    assert_eq!(locs.0.as_ref().get(0), Some((0, 10)));",
          "    assert_eq!(locs.0.as_ref().get(1), Some((0, 1)));",
          "    assert_eq!(locs.0.as_ref().get(2), Some((1, 2)));",
          "    assert_eq!(locs.0.as_ref().get(3), Some((2, 3)));",
          "    assert_eq!(locs.0.as_ref().get(4), Some((3, 4)));",
          "    assert_eq!(locs.0.as_ref().get(5), Some((4, 5)));",
          "    assert_eq!(locs.0.as_ref().get(6), Some((5, 6)));",
          "    assert_eq!(locs.0.as_ref().get(7), Some((6, 7)));",
          "    assert_eq!(locs.0.as_ref().get(8), Some((7, 8)));",
          "    assert_eq!(locs.0.as_ref().get(9), Some((8, 9)));",
          "    assert_eq!(locs.0.as_ref().get(10), None);"
        ],
        "code": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)\").unwrap(),",
          "        pattern: Arc::from(r\"(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "    let re = Regex::new(r\"(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)\").unwrap();",
          "    let locs = re.capture_locations();",
          "    assert!(locs.0.len() > 0);",
          "    assert_eq!(locs.0.as_ref().get(0), Some((0, 10)));",
          "    assert_eq!(locs.0.as_ref().get(1), Some((0, 1)));",
          "    assert_eq!(locs.0.as_ref().get(2), Some((1, 2)));",
          "    assert_eq!(locs.0.as_ref().get(3), Some((2, 3)));",
          "    assert_eq!(locs.0.as_ref().get(4), Some((3, 4)));",
          "    assert_eq!(locs.0.as_ref().get(5), Some((4, 5)));",
          "    assert_eq!(locs.0.as_ref().get(6), Some((5, 6)));",
          "    assert_eq!(locs.0.as_ref().get(7), Some((6, 7)));",
          "    assert_eq!(locs.0.as_ref().get(8), Some((7, 8)));",
          "    assert_eq!(locs.0.as_ref().get(9), Some((8, 9)));",
          "    assert_eq!(locs.0.as_ref().get(10), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"()\").unwrap(),",
          "        pattern: Arc::from(r\"()\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(locs.0.len(), 0);",
          "    assert!(locs.0.is_empty());",
          "    let re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    assert!(re.captures_read(&mut locs, \"Padron\").is_some());",
          "    assert_eq!(locs.get(0), Some((0, 6)));",
          "    assert_eq!(locs.get(1), Some((0, 1)));",
          "    assert_eq!(locs.get(2), Some((1, 2)));",
          "    assert_eq!(locs.get(3), Some((2, 6)));"
        ],
        "code": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"()\").unwrap(),",
          "        pattern: Arc::from(r\"()\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "    assert_eq!(locs.0.len(), 0);",
          "    assert!(locs.0.is_empty());",
          "    let re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();",
          "    let mut locs = re.capture_locations();",
          "    assert!(re.captures_read(&mut locs, \"Padron\").is_some());",
          "    assert_eq!(locs.get(0), Some((0, 6)));",
          "    assert_eq!(locs.get(1), Some((0, 1)));",
          "    assert_eq!(locs.get(2), Some((1, 2)));",
          "    assert_eq!(locs.get(3), Some((2, 6)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"^(.*)$\").unwrap(),",
          "        pattern: Arc::from(r\"^(.*)$\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(locs.0.len(), 1);",
          "    assert!(locs.0.get(0).is_some());",
          "    assert_eq!(locs.0.get(0).unwrap(), (0, 0));",
          "    assert_eq!(locs.0.get(1), None);",
          "    assert_eq!(locs.0.get(2), None);",
          "    assert_eq!(locs.0.get(3), None);",
          "    assert_eq!(locs.0.get(4), None);",
          "    assert_eq!(locs.0.get(5), None);",
          "    assert_eq!(locs.0.get(6), None);",
          "    assert_eq!(locs.0.get(7), None);",
          "    assert_eq!(locs.0.get(8), None);",
          "    assert_eq!(locs.0.get(9), None);"
        ],
        "code": [
          "{",
          "    let re = Regex {",
          "        meta: meta::Regex::new(r\"^(.*)$\").unwrap(),",
          "        pattern: Arc::from(r\"^(.*)$\"),",
          "    };",
          "    let locs = re.capture_locations();",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert!(locs.0.get(0).is_some());",
          "    assert_eq!(locs.0.get(0).unwrap(), (0, 0));",
          "    assert_eq!(locs.0.get(1), None);",
          "    assert_eq!(locs.0.get(2), None);",
          "    assert_eq!(locs.0.get(3), None);",
          "    assert_eq!(locs.0.get(4), None);",
          "    assert_eq!(locs.0.get(5), None);",
          "    assert_eq!(locs.0.get(6), None);",
          "    assert_eq!(locs.0.get(7), None);",
          "    assert_eq!(locs.0.get(8), None);",
          "    assert_eq!(locs.0.get(9), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]