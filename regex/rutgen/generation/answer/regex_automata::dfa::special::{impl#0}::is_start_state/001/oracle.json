[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(2),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(5),",
          "        min_start: StateID(6),",
          "        max_start: StateID(9),",
          "    };",
          "    let dead_id = DEAD;",
          "    special.is_start_state(dead_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_dead_state(dead_id), true);",
          "    assert_eq!(special.min_start <= dead_id, false);",
          "    assert_eq!(dead_id <= special.max_start, false);",
          "    assert_eq!(special.is_start_state(dead_id), false);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(2),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(5),",
          "        min_start: StateID(6),",
          "        max_start: StateID(9),",
          "    };",
          "    let dead_id = DEAD;",
          "    special.is_start_state(dead_id);",
          "    assert_eq!(special.is_dead_state(dead_id), true);",
          "    assert_eq!(special.min_start <= dead_id, false);",
          "    assert_eq!(dead_id <= special.max_start, false);",
          "    assert_eq!(special.is_start_state(dead_id), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(2),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(5),",
          "        min_start: StateID(6),",
          "        max_start: StateID(9),",
          "    };",
          "    let below_min_start = StateID(5);",
          "    special.is_start_state(below_min_start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_dead_state(below_min_start), true);",
          "    assert_eq!(special.is_start_state(below_min_start), false);",
          "    assert!(special.min_start > below_min_start);",
          "    assert!(below_min_start < special.min_start);"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(2),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(5),",
          "        min_start: StateID(6),",
          "        max_start: StateID(9),",
          "    };",
          "    let below_min_start = StateID(5);",
          "    special.is_start_state(below_min_start);",
          "    assert_eq!(special.is_dead_state(below_min_start), true);",
          "    assert_eq!(special.is_start_state(below_min_start), false);",
          "    assert!(special.min_start > below_min_start);",
          "    assert!(below_min_start < special.min_start);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(2),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(5),",
          "        min_start: StateID(6),",
          "        max_start: StateID(9),",
          "    };",
          "    let above_max_start = StateID(10);",
          "    special.is_start_state(above_max_start);",
          "}"
        ],
        "oracle": [
          "    assert!(!special.is_dead_state(StateID(10)) || special.is_start_state(StateID(10)) == false);",
          "    assert!(special.min_start <= StateID(10) && StateID(10) <= special.max_start);",
          "    assert!(special.is_dead_state(StateID(0)));",
          "    assert!(!special.is_start_state(StateID(0)));",
          "    assert!(special.is_dead_state(StateID(1)));",
          "    assert!(!special.is_start_state(StateID(1)));",
          "    assert!(!special.is_start_state(StateID(7)));",
          "    assert!(!special.is_start_state(StateID(9)));",
          "    assert!(special.is_start_state(StateID(6)));",
          "    assert!(special.is_start_state(StateID(8)));"
        ],
        "code": [
          "{",
          "    let special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(2),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(5),",
          "        min_start: StateID(6),",
          "        max_start: StateID(9),",
          "    };",
          "    let above_max_start = StateID(10);",
          "    special.is_start_state(above_max_start);",
          "    assert!(!special.is_dead_state(StateID(10)) || special.is_start_state(StateID(10)) == false);",
          "    assert!(special.min_start <= StateID(10) && StateID(10) <= special.max_start);",
          "    assert!(special.is_dead_state(StateID(0)));",
          "    assert!(!special.is_start_state(StateID(0)));",
          "    assert!(special.is_dead_state(StateID(1)));",
          "    assert!(!special.is_start_state(StateID(1)));",
          "    assert!(!special.is_start_state(StateID(7)));",
          "    assert!(!special.is_start_state(StateID(9)));",
          "    assert!(special.is_start_state(StateID(6)));",
          "    assert!(special.is_start_state(StateID(8)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]