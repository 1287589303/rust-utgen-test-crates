[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let head = ast::ClassSetItem::Literal(Literal::from('a'));",
          "    let frame = ClassFrame::Union {",
          "        head: &head,",
          "        tail: &[],",
          "    };",
          "    let _result = frame.child();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, ClassInduct::Item(&head));"
        ],
        "code": [
          "{",
          "    let head = ast::ClassSetItem::Literal(Literal::from('a'));",
          "    let frame = ClassFrame::Union {",
          "        head: &head,",
          "        tail: &[],",
          "    };",
          "    let _result = frame.child();",
          "    assert_eq!(_result, ClassInduct::Item(&head));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let head = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let tail = vec![ast::ClassSetItem::Literal(Literal::from('b'))];",
          "    let frame = ClassFrame::Union {",
          "        head: &head,",
          "        tail: &tail,",
          "    };",
          "    let _result = frame.child();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, ClassInduct::Item(&head));"
        ],
        "code": [
          "{",
          "    let head = ast::ClassSetItem::Range(ClassSetRange::new('a', 'z'));",
          "    let tail = vec![ast::ClassSetItem::Literal(Literal::from('b'))];",
          "    let frame = ClassFrame::Union {",
          "        head: &head,",
          "        tail: &tail,",
          "    };",
          "    let _result = frame.child();",
          "    assert_eq!(_result, ClassInduct::Item(&head));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let head = ast::ClassSetItem::Empty(Span::new(0, 0));",
          "    let frame = ClassFrame::Union {",
          "        head: &head,",
          "        tail: &[],",
          "    };",
          "    let _result = frame.child();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, ClassInduct::Item(&head));"
        ],
        "code": [
          "{",
          "    let head = ast::ClassSetItem::Empty(Span::new(0, 0));",
          "    let frame = ClassFrame::Union {",
          "        head: &head,",
          "        tail: &[],",
          "    };",
          "    let _result = frame.child();",
          "    assert_eq!(_result, ClassInduct::Item(&head));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]