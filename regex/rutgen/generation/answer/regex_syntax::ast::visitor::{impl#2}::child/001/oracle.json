[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::new(0, 5);",
          "    let lhs_item = ClassSetItem::Literal(Literal::from_char('a'));",
          "    let rhs_item = ClassSetItem::Literal(Literal::from_char('b'));",
          "    ",
          "    let class_set_rhs = ClassSet::Item(rhs_item);",
          "    let class_set_lhs = ClassSet::Item(lhs_item);",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind: ClassSetBinaryOpKind::And, // Assuming And is a valid variant",
          "        lhs: Box::new(class_set_lhs),",
          "        rhs: Box::new(class_set_rhs),",
          "    };",
          "",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &binary_op,",
          "        rhs: &class_set_rhs,",
          "    };",
          "",
          "    let _ = frame.child();",
          "}"
        ],
        "oracle": [
          "    let span = Span::new(0, 5);",
          "    let lhs_item = ClassSetItem::Literal(Literal::from_char('a'));",
          "    let rhs_item = ClassSetItem::Literal(Literal::from_char('b'));",
          "    let class_set_rhs = ClassSet::Item(rhs_item);",
          "    let class_set_lhs = ClassSet::Item(lhs_item);",
          "    let binary_op = ClassSetBinaryOp { span, kind: ClassSetBinaryOpKind::And, lhs: Box::new(class_set_lhs), rhs: Box::new(class_set_rhs), };",
          "    let frame = ClassFrame::BinaryRHS { op: &binary_op, rhs: &class_set_rhs, };",
          "    let result = frame.child();",
          "    assert_eq!(result, ClassInduct::BinaryOp(&binary_op));"
        ],
        "code": [
          "{",
          "    let span = Span::new(0, 5);",
          "    let lhs_item = ClassSetItem::Literal(Literal::from_char('a'));",
          "    let rhs_item = ClassSetItem::Literal(Literal::from_char('b'));",
          "    ",
          "    let class_set_rhs = ClassSet::Item(rhs_item);",
          "    let class_set_lhs = ClassSet::Item(lhs_item);",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind: ClassSetBinaryOpKind::And, // Assuming And is a valid variant",
          "        lhs: Box::new(class_set_lhs),",
          "        rhs: Box::new(class_set_rhs),",
          "    };",
          "",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &binary_op,",
          "        rhs: &class_set_rhs,",
          "    };",
          "",
          "    let _ = frame.child();",
          "    let span = Span::new(0, 5);",
          "    let lhs_item = ClassSetItem::Literal(Literal::from_char('a'));",
          "    let rhs_item = ClassSetItem::Literal(Literal::from_char('b'));",
          "    let class_set_rhs = ClassSet::Item(rhs_item);",
          "    let class_set_lhs = ClassSet::Item(lhs_item);",
          "    let binary_op = ClassSetBinaryOp { span, kind: ClassSetBinaryOpKind::And, lhs: Box::new(class_set_lhs), rhs: Box::new(class_set_rhs), };",
          "    let frame = ClassFrame::BinaryRHS { op: &binary_op, rhs: &class_set_rhs, };",
          "    let result = frame.child();",
          "    assert_eq!(result, ClassInduct::BinaryOp(&binary_op));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::new(0, 5);",
          "    let lhs_item = ClassSetItem::Literal(Literal::from_char('a'));",
          "    ",
          "    let class_set_rhs = ClassSet::BinaryOp(ClassSetBinaryOp {",
          "        span,",
          "        kind: ClassSetBinaryOpKind::Or, // Assuming Or is a valid variant",
          "        lhs: Box::new(ClassSet::Item(lhs_item)),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::from_char('c')))),",
          "    });",
          "    ",
          "    let class_set_lhs = ClassSet::Item(ClassSetItem::Literal(Literal::from_char('b')));",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind: ClassSetBinaryOpKind::And, // Assuming And is a valid variant",
          "        lhs: Box::new(class_set_lhs),",
          "        rhs: Box::new(class_set_rhs),",
          "    };",
          "",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &binary_op,",
          "        rhs: &class_set_rhs,",
          "    };",
          "",
          "    let _ = frame.child();",
          "}"
        ],
        "oracle": [
          "    let span = Span::new(0, 5);",
          "    let lhs_item = ClassSetItem::Literal(Literal::from_char('a'));",
          "    let class_set_rhs = ClassSet::BinaryOp(ClassSetBinaryOp {",
          "    span,",
          "    kind: ClassSetBinaryOpKind::Or,",
          "    lhs: Box::new(ClassSet::Item(lhs_item)),",
          "    rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::from_char('c')))),",
          "    });",
          "    let class_set_lhs = ClassSet::Item(ClassSetItem::Literal(Literal::from_char('b')));",
          "    let binary_op = ClassSetBinaryOp {",
          "    span,",
          "    kind: ClassSetBinaryOpKind::And,",
          "    lhs: Box::new(class_set_lhs),",
          "    rhs: Box::new(class_set_rhs),",
          "    };",
          "    let frame = ClassFrame::BinaryRHS {",
          "    op: &binary_op,",
          "    rhs: &class_set_rhs,",
          "    };",
          "    let result = frame.child();",
          "    assert_eq!(result, ClassInduct::BinaryOp(&binary_op.rhs));"
        ],
        "code": [
          "{",
          "    let span = Span::new(0, 5);",
          "    let lhs_item = ClassSetItem::Literal(Literal::from_char('a'));",
          "    ",
          "    let class_set_rhs = ClassSet::BinaryOp(ClassSetBinaryOp {",
          "        span,",
          "        kind: ClassSetBinaryOpKind::Or, // Assuming Or is a valid variant",
          "        lhs: Box::new(ClassSet::Item(lhs_item)),",
          "        rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::from_char('c')))),",
          "    });",
          "    ",
          "    let class_set_lhs = ClassSet::Item(ClassSetItem::Literal(Literal::from_char('b')));",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind: ClassSetBinaryOpKind::And, // Assuming And is a valid variant",
          "        lhs: Box::new(class_set_lhs),",
          "        rhs: Box::new(class_set_rhs),",
          "    };",
          "",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &binary_op,",
          "        rhs: &class_set_rhs,",
          "    };",
          "",
          "    let _ = frame.child();",
          "    let span = Span::new(0, 5);",
          "    let lhs_item = ClassSetItem::Literal(Literal::from_char('a'));",
          "    let class_set_rhs = ClassSet::BinaryOp(ClassSetBinaryOp {",
          "    span,",
          "    kind: ClassSetBinaryOpKind::Or,",
          "    lhs: Box::new(ClassSet::Item(lhs_item)),",
          "    rhs: Box::new(ClassSet::Item(ClassSetItem::Literal(Literal::from_char('c')))),",
          "    });",
          "    let class_set_lhs = ClassSet::Item(ClassSetItem::Literal(Literal::from_char('b')));",
          "    let binary_op = ClassSetBinaryOp {",
          "    span,",
          "    kind: ClassSetBinaryOpKind::And,",
          "    lhs: Box::new(class_set_lhs),",
          "    rhs: Box::new(class_set_rhs),",
          "    };",
          "    let frame = ClassFrame::BinaryRHS {",
          "    op: &binary_op,",
          "    rhs: &class_set_rhs,",
          "    };",
          "    let result = frame.child();",
          "    assert_eq!(result, ClassInduct::BinaryOp(&binary_op.rhs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span::new(0, 5);",
          "    ",
          "    let class_set_rhs = ClassSet::Item(ClassSetItem::Empty(span));",
          "    ",
          "    let class_set_lhs = ClassSet::Item(ClassSetItem::Literal(Literal::from_char('b')));",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind: ClassSetBinaryOpKind::And, // Assuming And is a valid variant",
          "        lhs: Box::new(class_set_lhs),",
          "        rhs: Box::new(class_set_rhs),",
          "    };",
          "",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &binary_op,",
          "        rhs: &class_set_rhs,",
          "    };",
          "",
          "    let _ = frame.child();",
          "}"
        ],
        "oracle": [
          "    let span = Span::new(0, 5);",
          "    let class_set_rhs = ClassSet::Item(ClassSetItem::Empty(span));",
          "    let class_set_lhs = ClassSet::Item(ClassSetItem::Literal(Literal::from_char('b')));",
          "    let binary_op = ClassSetBinaryOp {",
          "    span,",
          "    kind: ClassSetBinaryOpKind::And,",
          "    lhs: Box::new(class_set_lhs),",
          "    rhs: Box::new(class_set_rhs),",
          "    };",
          "    let frame = ClassFrame::BinaryRHS {",
          "    op: &binary_op,",
          "    rhs: &class_set_rhs,",
          "    };",
          "    let result = frame.child();",
          "    assert_eq!(result, ClassInduct::from_set(&class_set_rhs));"
        ],
        "code": [
          "{",
          "    let span = Span::new(0, 5);",
          "    ",
          "    let class_set_rhs = ClassSet::Item(ClassSetItem::Empty(span));",
          "    ",
          "    let class_set_lhs = ClassSet::Item(ClassSetItem::Literal(Literal::from_char('b')));",
          "    ",
          "    let binary_op = ClassSetBinaryOp {",
          "        span,",
          "        kind: ClassSetBinaryOpKind::And, // Assuming And is a valid variant",
          "        lhs: Box::new(class_set_lhs),",
          "        rhs: Box::new(class_set_rhs),",
          "    };",
          "",
          "    let frame = ClassFrame::BinaryRHS {",
          "        op: &binary_op,",
          "        rhs: &class_set_rhs,",
          "    };",
          "",
          "    let _ = frame.child();",
          "    let span = Span::new(0, 5);",
          "    let class_set_rhs = ClassSet::Item(ClassSetItem::Empty(span));",
          "    let class_set_lhs = ClassSet::Item(ClassSetItem::Literal(Literal::from_char('b')));",
          "    let binary_op = ClassSetBinaryOp {",
          "    span,",
          "    kind: ClassSetBinaryOpKind::And,",
          "    lhs: Box::new(class_set_lhs),",
          "    rhs: Box::new(class_set_rhs),",
          "    };",
          "    let frame = ClassFrame::BinaryRHS {",
          "    op: &binary_op,",
          "    rhs: &class_set_rhs,",
          "    };",
          "    let result = frame.child();",
          "    assert_eq!(result, ClassInduct::from_set(&class_set_rhs));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]