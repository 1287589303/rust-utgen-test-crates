[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::OneLetter('a'),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "}"
        ],
        "oracle": [
          "    writer.output == \"\\\\p\"",
          "    writer.output == \"\\\\p{a}\"",
          "    writer.output == \"\\\\p{a=b}\"",
          "    writer.output == \"\\\\p{a:b}\"",
          "    writer.output == \"\\\\p{a!=b}\"",
          "    writer.output.contains(\"a\")",
          "    writer.output.contains(\"b\")",
          "    writer.output.len() > 0"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::OneLetter('a'),",
          "    };",
          "    ",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    writer.output == \"\\\\p\"",
          "    writer.output == \"\\\\p{a}\"",
          "    writer.output == \"\\\\p{a=b}\"",
          "    writer.output == \"\\\\p{a:b}\"",
          "    writer.output == \"\\\\p{a!=b}\"",
          "    writer.output.contains(\"a\")",
          "    writer.output.contains(\"b\")",
          "    writer.output.len() > 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::Equal,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value\"),",
          "        },",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, r\"\\p{name=value}\");",
          "    ",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::NotEqual,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name!=value}\");",
          "    ",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name:value}\");",
          "    ",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::OneLetter('a'),",
          "    };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\pa\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::Equal,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value\"),",
          "        },",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name=value}\");",
          "    ",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::NotEqual,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name!=value}\");",
          "    ",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name:value}\");",
          "    ",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::OneLetter('a'),",
          "    };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\pa\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::NotEqual,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value\"),",
          "        },",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Equal,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name=value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name:value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::OneLetter('A'),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\pA\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::Named(String::from(\"test\")),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{test}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::NotEqual,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\P{name!=value}\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::NotEqual,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value\"),",
          "        },",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Equal,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name=value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name:value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::OneLetter('A'),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\pA\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::Named(String::from(\"test\")),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{test}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::NotEqual,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\P{name!=value}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::Colon,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value\"),",
          "        },",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Equal,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name=value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::NotEqual,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name!=value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name:value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::OneLetter('a'),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{a}\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        output: String,",
          "    }",
          "    ",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: false,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::Colon,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value\"),",
          "        },",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Equal,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name=value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::NotEqual,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name!=value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value\"),",
          "    },",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name:value}\");",
          "    ",
          "    let mut writer = TestWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::OneLetter('a'),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let _ = visitor.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{a}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]