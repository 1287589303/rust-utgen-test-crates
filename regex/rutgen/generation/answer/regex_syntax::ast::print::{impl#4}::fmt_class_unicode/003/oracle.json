[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::Equal,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value1\"),",
          "        },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Equal,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value1\"),",
          "    },",
          "    };",
          "    assert_eq!(writer.output, r\"\\P{name=value1}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::NotEqual,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value2\"),",
          "    },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\P{name!=value2}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value3\"),",
          "    },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\P{name:value3}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::Named(String::from(\"name\")),",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value4\"),",
          "    },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name:value4}\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::Equal,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value1\"),",
          "        },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Equal,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value1\"),",
          "    },",
          "    };",
          "    assert_eq!(writer.output, r\"\\P{name=value1}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::NotEqual,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value2\"),",
          "    },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\P{name!=value2}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: true,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value3\"),",
          "    },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\P{name:value3}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::Named(String::from(\"name\")),",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name}\");",
          "    ",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "    span: Span::default(),",
          "    negated: false,",
          "    kind: ast::ClassUnicodeKind::NamedValue {",
          "    op: ast::ClassUnicodeOpKind::Colon,",
          "    name: String::from(\"name\"),",
          "    value: String::from(\"value4\"),",
          "    },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    assert_eq!(writer.output, r\"\\p{name:value4}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::NotEqual,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value2\"),",
          "        },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    assert_eq!(writer.output, r\"\\P{name!=value2}\");",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    ast.kind = ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Equal, name: String::from(\"name2\"), value: String::from(\"value\") };",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    assert_eq!(writer.output, r\"\\P{name2=value}\");",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    ast.kind = ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Colon, name: String::from(\"name3\"), value: String::from(\"value3\") };",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    assert_eq!(writer.output, r\"\\P{name3:value3}\");",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    ast.kind = ast::ClassUnicodeKind::Named(String::from(\"name4\"));",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    assert_eq!(writer.output, r\"\\P{{name4}}\");",
          "    self.wtr.write_str(r\"\\P\").unwrap();"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::NotEqual,",
          "            name: String::from(\"name\"),",
          "            value: String::from(\"value2\"),",
          "        },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    assert_eq!(writer.output, r\"\\P{name!=value2}\");",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    ast.kind = ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Equal, name: String::from(\"name2\"), value: String::from(\"value\") };",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    assert_eq!(writer.output, r\"\\P{name2=value}\");",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    ast.kind = ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Colon, name: String::from(\"name3\"), value: String::from(\"value3\") };",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    assert_eq!(writer.output, r\"\\P{name3:value3}\");",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    ast.kind = ast::ClassUnicodeKind::Named(String::from(\"name4\"));",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    assert_eq!(writer.output, r\"\\P{{name4}}\");",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::Colon,",
          "            name: String::from(\"anotherName\"),",
          "            value: String::from(\"value2\"),",
          "        },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "}"
        ],
        "oracle": [
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    self.wtr.write_str(r\"\\p\").is_ok();",
          "    match ast.kind {",
          "    NamedValue { op: Equal, ref name, ref value } => assert_eq!(name, \"expectedName\");",
          "    NamedValue { op: NotEqual, ref name, ref value } => assert_eq!(value, \"expectedValue\");",
          "    NamedValue { op: Colon, ref name, ref value } => assert_eq!(name, \"anotherName\");",
          "    }",
          "    match ast.kind {",
          "    Named(ref x) => assert_eq!(x, \"expectedName\");",
          "    }",
          "    match ast.kind {",
          "    NamedValue { op: Colon, ref name, ref value } => assert_eq!(value, \"expectedValue\");",
          "    }",
          "    assert!(writer.output.contains(r\"\\P\"));",
          "    assert!(writer.output.contains(\"anotherName:value2\"));"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ast::ClassUnicodeKind::NamedValue {",
          "            op: ast::ClassUnicodeOpKind::Colon,",
          "            name: String::from(\"anotherName\"),",
          "            value: String::from(\"value2\"),",
          "        },",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    self.wtr.write_str(r\"\\P\").unwrap();",
          "    self.wtr.write_str(r\"\\p\").is_ok();",
          "    match ast.kind {",
          "    NamedValue { op: Equal, ref name, ref value } => assert_eq!(name, \"expectedName\");",
          "    NamedValue { op: NotEqual, ref name, ref value } => assert_eq!(value, \"expectedValue\");",
          "    NamedValue { op: Colon, ref name, ref value } => assert_eq!(name, \"anotherName\");",
          "    }",
          "    match ast.kind {",
          "    Named(ref x) => assert_eq!(x, \"expectedName\");",
          "    }",
          "    match ast.kind {",
          "    NamedValue { op: Colon, ref name, ref value } => assert_eq!(value, \"expectedValue\");",
          "    }",
          "    assert!(writer.output.contains(r\"\\P\"));",
          "    assert!(writer.output.contains(\"anotherName:value2\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ast::ClassUnicodeKind::Named(String::from(\"name1\")),",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "}"
        ],
        "oracle": [
          "    let ast_negated_true = ast::ClassUnicode { span: Span::default(), negated: true, kind: ast::ClassUnicodeKind::Named(String::from(\"name1\")) };",
          "    assert!(writer.fmt_class_unicode(&ast_negated_true).is_ok());",
          "    ",
          "    let ast_negated_true_named_equal = ast::ClassUnicode { span: Span::default(), negated: true, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Equal, name: String::from(\"name2\"), value: String::from(\"value1\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_negated_true_named_equal).is_ok());",
          "    ",
          "    let ast_negated_true_named_not_equal = ast::ClassUnicode { span: Span::default(), negated: true, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::NotEqual, name: String::from(\"name3\"), value: String::from(\"value2\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_negated_true_named_not_equal).is_ok());",
          "    ",
          "    let ast_negated_true_named_colon = ast::ClassUnicode { span: Span::default(), negated: true, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Colon, name: String::from(\"name4\"), value: String::from(\"value3\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_negated_true_named_colon).is_ok());",
          "    ",
          "    let ast_not_negated_name = ast::ClassUnicode { span: Span::default(), negated: false, kind: ast::ClassUnicodeKind::Named(String::from(\"name5\")) };",
          "    assert!(writer.fmt_class_unicode(&ast_not_negated_name).is_ok());",
          "    ",
          "    let ast_not_negated_named_equal = ast::ClassUnicode { span: Span::default(), negated: false, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Equal, name: String::from(\"name6\"), value: String::from(\"value4\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_not_negated_named_equal).is_ok());",
          "    ",
          "    let ast_not_negated_named_not_equal = ast::ClassUnicode { span: Span::default(), negated: false, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::NotEqual, name: String::from(\"name7\"), value: String::from(\"value5\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_not_negated_named_not_equal).is_ok());",
          "    ",
          "    let ast_not_negated_named_colon = ast::ClassUnicode { span: Span::default(), negated: false, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Colon, name: String::from(\"name8\"), value: String::from(\"value6\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_not_negated_named_colon).is_ok());"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let ast = ast::ClassUnicode {",
          "        span: Span::default(),",
          "        negated: true,",
          "        kind: ast::ClassUnicodeKind::Named(String::from(\"name1\")),",
          "    };",
          "    let _ = writer.fmt_class_unicode(&ast);",
          "    let ast_negated_true = ast::ClassUnicode { span: Span::default(), negated: true, kind: ast::ClassUnicodeKind::Named(String::from(\"name1\")) };",
          "    assert!(writer.fmt_class_unicode(&ast_negated_true).is_ok());",
          "    ",
          "    let ast_negated_true_named_equal = ast::ClassUnicode { span: Span::default(), negated: true, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Equal, name: String::from(\"name2\"), value: String::from(\"value1\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_negated_true_named_equal).is_ok());",
          "    ",
          "    let ast_negated_true_named_not_equal = ast::ClassUnicode { span: Span::default(), negated: true, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::NotEqual, name: String::from(\"name3\"), value: String::from(\"value2\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_negated_true_named_not_equal).is_ok());",
          "    ",
          "    let ast_negated_true_named_colon = ast::ClassUnicode { span: Span::default(), negated: true, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Colon, name: String::from(\"name4\"), value: String::from(\"value3\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_negated_true_named_colon).is_ok());",
          "    ",
          "    let ast_not_negated_name = ast::ClassUnicode { span: Span::default(), negated: false, kind: ast::ClassUnicodeKind::Named(String::from(\"name5\")) };",
          "    assert!(writer.fmt_class_unicode(&ast_not_negated_name).is_ok());",
          "    ",
          "    let ast_not_negated_named_equal = ast::ClassUnicode { span: Span::default(), negated: false, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Equal, name: String::from(\"name6\"), value: String::from(\"value4\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_not_negated_named_equal).is_ok());",
          "    ",
          "    let ast_not_negated_named_not_equal = ast::ClassUnicode { span: Span::default(), negated: false, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::NotEqual, name: String::from(\"name7\"), value: String::from(\"value5\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_not_negated_named_not_equal).is_ok());",
          "    ",
          "    let ast_not_negated_named_colon = ast::ClassUnicode { span: Span::default(), negated: false, kind: ast::ClassUnicodeKind::NamedValue { op: ast::ClassUnicodeOpKind::Colon, name: String::from(\"name8\"), value: String::from(\"value6\") }};",
          "    assert!(writer.fmt_class_unicode(&ast_not_negated_named_colon).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]