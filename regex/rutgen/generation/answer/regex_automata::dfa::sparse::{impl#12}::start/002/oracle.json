[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_len = Some(3);",
          "    let stride = 5;",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8 + stride * 3 * 4],  // Initialize with enough size",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(0);  // valid pid",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte;",
          "",
          "    let _ = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_start_table.start(Anchored::Pattern(PatternID(0)), Start::WordByte), Ok(wire::read_state_id_unchecked(&_start_table.table()[start..]).0));",
          "    assert_eq!(_start_table.pattern_len, Some(3));",
          "    assert!(PatternID(0).as_usize() < _start_table.pattern_len.unwrap());",
          "    assert!(_start_table.kind.has_anchored());",
          "    assert!(_start_table.kind.has_unanchored());",
          "    assert!(matches!(_start_table.start_map.map[Start::WordByte as usize], Start::WordByte));"
        ],
        "code": [
          "{",
          "    let pattern_len = Some(3);",
          "    let stride = 5;",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8 + stride * 3 * 4],  // Initialize with enough size",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(0);  // valid pid",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::WordByte;",
          "",
          "    let _ = start_table.start(anchored, start);",
          "    assert_eq!(_start_table.start(Anchored::Pattern(PatternID(0)), Start::WordByte), Ok(wire::read_state_id_unchecked(&_start_table.table()[start..]).0));",
          "    assert_eq!(_start_table.pattern_len, Some(3));",
          "    assert!(PatternID(0).as_usize() < _start_table.pattern_len.unwrap());",
          "    assert!(_start_table.kind.has_anchored());",
          "    assert!(_start_table.kind.has_unanchored());",
          "    assert!(matches!(_start_table.start_map.map[Start::WordByte as usize], Start::WordByte));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_len = Some(4);",
          "    let stride = 5;",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8 + stride * 4 * 4],  // Initialize with enough size",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(3);  // valid pid",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::Text;",
          "",
          "    let _ = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.pattern_len, Some(4));",
          "    assert_eq!(start_table.stride, 5);",
          "    assert!(start_table.kind.has_anchored());",
          "    assert!(start_table.kind.has_unanchored());",
          "    assert!(pid.as_usize() < start_table.pattern_len.unwrap());",
          "    assert!(start_table.start(anchored, start).is_ok());",
          "    assert_eq!(start_table.start(anchored, start).unwrap(), wire::read_state_id_unchecked(&start_table.table()[start_index * StateID::SIZE..]).0);",
          "    assert_eq!(self.table.len(), 8 + stride * 4 * 4);",
          "    assert!(start_table.start(anchored, start).is_ok());",
          "    assert!(start_table.start(anchored, start).unwrap() != DEAD);"
        ],
        "code": [
          "{",
          "    let pattern_len = Some(4);",
          "    let stride = 5;",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8 + stride * 4 * 4],  // Initialize with enough size",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(3);  // valid pid",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::Text;",
          "",
          "    let _ = start_table.start(anchored, start);",
          "    assert_eq!(start_table.pattern_len, Some(4));",
          "    assert_eq!(start_table.stride, 5);",
          "    assert!(start_table.kind.has_anchored());",
          "    assert!(start_table.kind.has_unanchored());",
          "    assert!(pid.as_usize() < start_table.pattern_len.unwrap());",
          "    assert!(start_table.start(anchored, start).is_ok());",
          "    assert_eq!(start_table.start(anchored, start).unwrap(), wire::read_state_id_unchecked(&start_table.table()[start_index * StateID::SIZE..]).0);",
          "    assert_eq!(self.table.len(), 8 + stride * 4 * 4);",
          "    assert!(start_table.start(anchored, start).is_ok());",
          "    assert!(start_table.start(anchored, start).unwrap() != DEAD);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_len = Some(1);",
          "    let stride = 0;  // edge case",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8],  // Only enough for base indices",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(0);  // valid pid",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::NonWordByte;",
          "",
          "    let _ = start_table.start(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(start_table.start(Anchored::Pattern(PatternID(0)), Start::NonWordByte), Ok(wire::read_state_id_unchecked(&start_table.table()[0..]).0));",
          "    assert_eq!(start_table.start(Anchored::Pattern(PatternID(0)), Start::Text), Ok(wire::read_state_id_unchecked(&start_table.table()[0..]).0));",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(1)), Start::NonWordByte).is_err());",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(1)), Start::Text).is_err());",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(0)), Start::WordByte).is_ok());"
        ],
        "code": [
          "{",
          "    let pattern_len = Some(1);",
          "    let stride = 0;  // edge case",
          "    let start_table = StartTable {",
          "        table: vec![0u8; 8],  // Only enough for base indices",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::NonWordByte; 256] },",
          "        stride,",
          "        pattern_len,",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "",
          "    let pid = PatternID(0);  // valid pid",
          "    let anchored = Anchored::Pattern(pid);",
          "    let start = Start::NonWordByte;",
          "",
          "    let _ = start_table.start(anchored, start);",
          "    assert_eq!(start_table.start(Anchored::Pattern(PatternID(0)), Start::NonWordByte), Ok(wire::read_state_id_unchecked(&start_table.table()[0..]).0));",
          "    assert_eq!(start_table.start(Anchored::Pattern(PatternID(0)), Start::Text), Ok(wire::read_state_id_unchecked(&start_table.table()[0..]).0));",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(1)), Start::NonWordByte).is_err());",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(1)), Start::Text).is_err());",
          "    assert!(start_table.start(Anchored::Pattern(PatternID(0)), Start::WordByte).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]