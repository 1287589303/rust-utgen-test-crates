[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = vec![0u8; StateID::SIZE * 12]; // assume stride > 0, here it's 4 patterns",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[0..]).0));",
          "    ",
          "    let result = start_table.start(Anchored::No, Start::from_usize(1));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[1..]).0));",
          "    ",
          "    let result = start_table.start(Anchored::No, Start::from_usize(2));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[2..]).0));",
          "    ",
          "    let result = start_table.start(Anchored::No, Start::from_usize(3));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[3..]).0));"
        ],
        "code": [
          "{",
          "    let table = vec![0u8; StateID::SIZE * 12]; // assume stride > 0, here it's 4 patterns",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(0));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[0..]).0));",
          "    ",
          "    let result = start_table.start(Anchored::No, Start::from_usize(1));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[1..]).0));",
          "    ",
          "    let result = start_table.start(Anchored::No, Start::from_usize(2));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[2..]).0));",
          "    ",
          "    let result = start_table.start(Anchored::No, Start::from_usize(3));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[3..]).0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = vec![0u8; StateID::SIZE * 12]; // assume stride > 0, here it's 4 patterns",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(5));",
          "}"
        ],
        "oracle": [
          "    let table = vec![0u8; StateID::SIZE * 12];",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "    table,",
          "    kind: StartKind::Both,",
          "    start_map,",
          "    stride: 4,",
          "    pattern_len: Some(4),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(5));",
          "    assert!(result.is_ok(), \"Expected Ok result, got: {:?}\", result);"
        ],
        "code": [
          "{",
          "    let table = vec![0u8; StateID::SIZE * 12]; // assume stride > 0, here it's 4 patterns",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(5));",
          "    let table = vec![0u8; StateID::SIZE * 12];",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "    table,",
          "    kind: StartKind::Both,",
          "    start_map,",
          "    stride: 4,",
          "    pattern_len: Some(4),",
          "    universal_start_unanchored: None,",
          "    universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(5));",
          "    assert!(result.is_ok(), \"Expected Ok result, got: {:?}\", result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = vec![0u8; StateID::SIZE * 12]; // assume stride > 0, here it's 4 patterns",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(7));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[StateID::SIZE * 7..]).0));"
        ],
        "code": [
          "{",
          "    let table = vec![0u8; StateID::SIZE * 12]; // assume stride > 0, here it's 4 patterns",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Both,",
          "        start_map,",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(7));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[StateID::SIZE * 7..]).0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table = vec![0u8; StateID::SIZE * 12]; // assume stride > 0, here it's 4 patterns",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Unanchored,",
          "        start_map,",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[0..]).0));",
          "    assert!(start_table.kind.has_unanchored());",
          "    assert_eq!(start_table.stride, 4);",
          "    assert_eq!(start_table.pattern_len, Some(4));",
          "    assert_eq!(start_table.start_map.map[0], Start::NonWordByte);",
          "    assert!(matches!(start_table.start(Anchored::No, Start::from_usize(0)), Ok(_)));",
          "    assert!(matches!(start_table.start(Anchored::No, Start::from_usize(1)), Ok(_)));",
          "    assert!(matches!(start_table.start(Anchored::No, Start::from_usize(2)), Ok(_)));",
          "    assert!(matches!(start_table.start(Anchored::No, Start::from_usize(3)), Ok(_)));"
        ],
        "code": [
          "{",
          "    let table = vec![0u8; StateID::SIZE * 12]; // assume stride > 0, here it's 4 patterns",
          "    let start_map = StartByteMap { map: [Start::NonWordByte; 256] };",
          "    let start_table = StartTable {",
          "        table,",
          "        kind: StartKind::Unanchored,",
          "        start_map,",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    let result = start_table.start(Anchored::No, Start::from_usize(0));",
          "    assert_eq!(result, Ok(wire::read_state_id_unchecked(&start_table.table()[0..]).0));",
          "    assert!(start_table.kind.has_unanchored());",
          "    assert_eq!(start_table.stride, 4);",
          "    assert_eq!(start_table.pattern_len, Some(4));",
          "    assert_eq!(start_table.start_map.map[0], Start::NonWordByte);",
          "    assert!(matches!(start_table.start(Anchored::No, Start::from_usize(0)), Ok(_)));",
          "    assert!(matches!(start_table.start(Anchored::No, Start::from_usize(1)), Ok(_)));",
          "    assert!(matches!(start_table.start(Anchored::No, Start::from_usize(2)), Ok(_)));",
          "    assert!(matches!(start_table.start(Anchored::No, Start::from_usize(3)), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]