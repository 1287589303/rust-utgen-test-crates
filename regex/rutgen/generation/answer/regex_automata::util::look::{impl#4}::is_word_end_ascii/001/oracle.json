[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"hello_world\";",
          "    let at = 11; // at is equal to haystack.len(), should not panic and return false",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_end_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let haystack = b\"hello_world\";",
          "    let at = 11; // at is equal to haystack.len(), should not panic and return false",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_end_ascii(haystack, at);",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"hello_world\";",
          "    let at = 10; // at < haystack.len() and haystack[at - 1] is a word byte ('d'), haystack[at] is not a word byte ('\\0')",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_end_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), true);",
          "    haystack = b\"hello_world\\0\";",
          "    at = 10;",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
          "    at = 1;",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), true);",
          "    at = 11;",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let haystack = b\"hello_world\";",
          "    let at = 10; // at < haystack.len() and haystack[at - 1] is a word byte ('d'), haystack[at] is not a word byte ('\\0')",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_end_ascii(haystack, at);",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), true);",
          "    haystack = b\"hello_world\\0\";",
          "    at = 10;",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
          "    at = 1;",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), true);",
          "    at = 11;",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"hello_world!\";",
          "    let at = 11; // at < haystack.len() (11) and haystack[at - 1] is a word byte ('d'), haystack[at] is '!', not a word byte",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_end_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    matcher.is_word_end_ascii(haystack, at) == false;"
        ],
        "code": [
          "{",
          "    let haystack = b\"hello_world!\";",
          "    let at = 11; // at < haystack.len() (11) and haystack[at - 1] is a word byte ('d'), haystack[at] is '!', not a word byte",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_end_ascii(haystack, at);",
          "    matcher.is_word_end_ascii(haystack, at) == false;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let haystack = b\"hello_\";",
          "    let at = 6; // at < haystack.len() (6) and haystack[at - 1] is a word byte ('_'), haystack[at] is not a word byte (out of bounds)",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_end_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let haystack = b\"hello_\";",
          "    let at = 6; // at < haystack.len() (6) and haystack[at - 1] is a word byte ('_'), haystack[at] is not a word byte (out of bounds)",
          "    let matcher = LookMatcher::new();",
          "    matcher.is_word_end_ascii(haystack, at);",
          "    assert_eq!(matcher.is_word_end_ascii(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]