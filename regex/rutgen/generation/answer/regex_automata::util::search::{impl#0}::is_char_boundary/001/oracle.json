[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"☃\");",
          "    input.is_char_boundary(0);",
          "}"
        ],
        "oracle": [
          "    assert!(input.is_char_boundary(0));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(!input.is_char_boundary(4));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"☃\");",
          "    input.is_char_boundary(0);",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(!input.is_char_boundary(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"☃\");",
          "    input.is_char_boundary(1);",
          "}"
        ],
        "oracle": [
          "    assert!(input.is_char_boundary(0));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(!input.is_char_boundary(4));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"☃\");",
          "    input.is_char_boundary(1);",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(!input.is_char_boundary(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"☃\");",
          "    input.is_char_boundary(3);",
          "}"
        ],
        "oracle": [
          "    assert!(input.is_char_boundary(0));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(!input.is_char_boundary(4));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"☃\");",
          "    input.is_char_boundary(3);",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(!input.is_char_boundary(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"☃\");",
          "    input.is_char_boundary(4);",
          "}"
        ],
        "oracle": [
          "    assert!(input.is_char_boundary(0));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(!input.is_char_boundary(4));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"☃\");",
          "    input.is_char_boundary(4);",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(!input.is_char_boundary(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(\"こんにちは\");",
          "    input.is_char_boundary(0);",
          "    input.is_char_boundary(3);",
          "    input.is_char_boundary(6);",
          "    input.is_char_boundary(15);",
          "}"
        ],
        "oracle": [
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(input.is_char_boundary(6));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(!input.is_char_boundary(4));",
          "    assert!(!input.is_char_boundary(5));",
          "    assert!(!input.is_char_boundary(7));",
          "    assert!(!input.is_char_boundary(8));",
          "    assert!(!input.is_char_boundary(9));",
          "    assert!(!input.is_char_boundary(10));",
          "    assert!(!input.is_char_boundary(11));",
          "    assert!(!input.is_char_boundary(12));",
          "    assert!(!input.is_char_boundary(13));",
          "    assert!(!input.is_char_boundary(14));",
          "    assert!(!input.is_char_boundary(15));",
          "    assert!(input.is_char_boundary(15));"
        ],
        "code": [
          "{",
          "    let input = Input::new(\"こんにちは\");",
          "    input.is_char_boundary(0);",
          "    input.is_char_boundary(3);",
          "    input.is_char_boundary(6);",
          "    input.is_char_boundary(15);",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(3));",
          "    assert!(input.is_char_boundary(6));",
          "    assert!(!input.is_char_boundary(1));",
          "    assert!(!input.is_char_boundary(2));",
          "    assert!(!input.is_char_boundary(4));",
          "    assert!(!input.is_char_boundary(5));",
          "    assert!(!input.is_char_boundary(7));",
          "    assert!(!input.is_char_boundary(8));",
          "    assert!(!input.is_char_boundary(9));",
          "    assert!(!input.is_char_boundary(10));",
          "    assert!(!input.is_char_boundary(11));",
          "    assert!(!input.is_char_boundary(12));",
          "    assert!(!input.is_char_boundary(13));",
          "    assert!(!input.is_char_boundary(14));",
          "    assert!(!input.is_char_boundary(15));",
          "    assert!(input.is_char_boundary(15));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = Input::new(&[0, 159, 146, 150]); // Invalid UTF-8 sequence",
          "    input.is_char_boundary(0);",
          "    input.is_char_boundary(1);",
          "    input.is_char_boundary(2);",
          "    input.is_char_boundary(3);",
          "}"
        ],
        "oracle": [
          "    assert!(!input.is_char_boundary(0)); // Invalid UTF-8 sequence, offset 0",
          "    assert!(!input.is_char_boundary(1)); // Invalid UTF-8 sequence, offset 1",
          "    assert!(!input.is_char_boundary(2)); // Invalid UTF-8 sequence, offset 2",
          "    assert!(!input.is_char_boundary(3)); // Invalid UTF-8 sequence, offset 3"
        ],
        "code": [
          "{",
          "    let input = Input::new(&[0, 159, 146, 150]); // Invalid UTF-8 sequence",
          "    input.is_char_boundary(0);",
          "    input.is_char_boundary(1);",
          "    input.is_char_boundary(2);",
          "    input.is_char_boundary(3);",
          "    assert!(!input.is_char_boundary(0)); // Invalid UTF-8 sequence, offset 0",
          "    assert!(!input.is_char_boundary(1)); // Invalid UTF-8 sequence, offset 1",
          "    assert!(!input.is_char_boundary(2)); // Invalid UTF-8 sequence, offset 2",
          "    assert!(!input.is_char_boundary(3)); // Invalid UTF-8 sequence, offset 3",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]