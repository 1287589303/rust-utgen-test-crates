[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_earliest(true);",
          "}"
        ],
        "oracle": [
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert_eq!(input.earliest, true);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.earliest, false);",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert_eq!(input.earliest, true);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.earliest, false);",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"test\"[..]);",
          "    input.set_earliest(false);",
          "}"
        ],
        "oracle": [
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"test\"[..]);",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"a\"[..]);",
          "    input.set_earliest(true);",
          "    input.set_earliest(false);",
          "}"
        ],
        "oracle": [
          "    assert!(input.get_earliest());",
          "    assert!(!input.get_earliest());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"a\"[..]);",
          "    input.set_earliest(true);",
          "    input.set_earliest(false);",
          "    assert!(input.get_earliest());",
          "    assert!(!input.get_earliest());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"example\"[..]);",
          "    input.set_earliest(true);",
          "    input.set_earliest(true);",
          "    input.set_earliest(false);",
          "}"
        ],
        "oracle": [
          "    assert!(input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"example\"[..]);",
          "    input.set_earliest(true);",
          "    input.set_earliest(true);",
          "    input.set_earliest(false);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"longer example\"[..]).span(Span { start: 0, end: 14 });",
          "    input.set_earliest(true);",
          "}"
        ],
        "oracle": [
          "    assert!(input.get_earliest());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"longer example\"[..]).span(Span { start: 0, end: 14 });",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"byte array\"[..]).anchored(Anchored::No);",
          "    input.set_earliest(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_earliest(), false);",
          "    input.set_earliest(true);",
          "    assert_eq!(input.get_earliest(), true);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.get_earliest(), false);",
          "    input.set_earliest(true);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.get_earliest(), false);",
          "    input.set_earliest(true);",
          "    input.set_earliest(true);",
          "    assert_eq!(input.get_earliest(), true);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.get_earliest(), false);"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"byte array\"[..]).anchored(Anchored::No);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.get_earliest(), false);",
          "    input.set_earliest(true);",
          "    assert_eq!(input.get_earliest(), true);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.get_earliest(), false);",
          "    input.set_earliest(true);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.get_earliest(), false);",
          "    input.set_earliest(true);",
          "    input.set_earliest(true);",
          "    assert_eq!(input.get_earliest(), true);",
          "    input.set_earliest(false);",
          "    assert_eq!(input.get_earliest(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"more tests\"[..]).anchored(Anchored::Yes);",
          "    input.set_earliest(true);",
          "}"
        ],
        "oracle": [
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"more tests\"[..]).anchored(Anchored::Yes);",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"pattern test\"[..]).anchored(Anchored::Pattern(1));",
          "    input.set_earliest(true);",
          "}"
        ],
        "oracle": [
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.anchored(Anchored::No);",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"pattern test\"[..]).anchored(Anchored::Pattern(1));",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "    input.set_earliest(true);",
          "    assert!(input.get_earliest());",
          "    input.anchored(Anchored::No);",
          "    input.set_earliest(false);",
          "    assert!(!input.get_earliest());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]