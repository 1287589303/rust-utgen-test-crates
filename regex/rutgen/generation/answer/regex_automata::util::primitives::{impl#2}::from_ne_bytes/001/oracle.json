[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFF];",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(e) => assert_eq!(e.attempted, 0xFFFFFFFF);",
          "    _ => panic!(\"Expected an error\");",
          "    }"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFF];",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "    assert!(result.is_err());",
          "    match result {",
          "    Err(e) => assert_eq!(e.attempted, 0xFFFFFFFF);",
          "    _ => panic!(\"Expected an error\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [0x80, 0x00, 0x00, 0x00]; // 2^31 (for 32-bit target)",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: [u8; 4] = [0x80, 0x00, 0x00, 0x00]; // 2^31 (for 32-bit target)",
          "    let expected = Err(SmallIndexError { attempted: 2147483648 }); // 2^31",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [0x80, 0x00, 0x00, 0x00]; // 2^31 (for 32-bit target)",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "    let bytes: [u8; 4] = [0x80, 0x00, 0x00, 0x00]; // 2^31 (for 32-bit target)",
          "    let expected = Err(SmallIndexError { attempted: 2147483648 }); // 2^31",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFE]; // Value exceeding max",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e.attempted, 4294967294);",
          "    }"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFE]; // Value exceeding max",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e.attempted, 4294967294);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFD]; // Just above max value for a 32-bit signed integer",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFD];",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e.attempted, u64::from(0xFFFFFFFF));",
          "    }"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFD]; // Just above max value for a 32-bit signed integer",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "    let bytes: [u8; 4] = [0xFF, 0xFF, 0xFF, 0xFD];",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "    assert!(result.is_err());",
          "    if let Err(e) = result {",
          "    assert_eq!(e.attempted, u64::from(0xFFFFFFFF));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]