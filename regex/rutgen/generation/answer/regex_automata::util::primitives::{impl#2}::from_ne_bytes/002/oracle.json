[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: [u8; 4] = [0, 0, 0, 0];",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    let bytes: [u8; 4] = SmallIndex::MAX.to_ne_bytes();",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), SmallIndex::MAX);"
        ],
        "code": [
          "{",
          "    let bytes: [u8; 4] = [0, 0, 0, 0];",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "    let bytes: [u8; 4] = SmallIndex::MAX.to_ne_bytes();",
          "    let result = SmallIndex::from_ne_bytes(bytes);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), SmallIndex::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_value = SmallIndex::MAX.as_u32();",
          "    let bytes: [u8; 4] = max_value.to_ne_bytes();",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(SmallIndex::from_ne_bytes([max_value.to_ne_bytes()]), Ok(SmallIndex::new_unchecked(max_value as usize)));"
        ],
        "code": [
          "{",
          "    let max_value = SmallIndex::MAX.as_u32();",
          "    let bytes: [u8; 4] = max_value.to_ne_bytes();",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "    assert_eq!(SmallIndex::from_ne_bytes([max_value.to_ne_bytes()]), Ok(SmallIndex::new_unchecked(max_value as usize)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mid_value = SmallIndex::MAX.as_u32() / 2;",
          "    let bytes: [u8; 4] = mid_value.to_ne_bytes();",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(SmallIndex::from_ne_bytes(bytes), Ok(SmallIndex::new_unchecked(mid_value)));",
          "    assert!(SmallIndex::from_ne_bytes(bytes).is_ok());",
          "    assert_eq!(SmallIndex::from_ne_bytes(bytes).unwrap().as_u32(), mid_value);",
          "    assert!(SmallIndex::from_ne_bytes(bytes).unwrap().as_usize() <= SmallIndex::MAX.as_usize());",
          "    assert_eq!(SmallIndex::from_ne_bytes(bytes).unwrap().as_usize(), mid_value as usize);"
        ],
        "code": [
          "{",
          "    let mid_value = SmallIndex::MAX.as_u32() / 2;",
          "    let bytes: [u8; 4] = mid_value.to_ne_bytes();",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "    assert_eq!(SmallIndex::from_ne_bytes(bytes), Ok(SmallIndex::new_unchecked(mid_value)));",
          "    assert!(SmallIndex::from_ne_bytes(bytes).is_ok());",
          "    assert_eq!(SmallIndex::from_ne_bytes(bytes).unwrap().as_u32(), mid_value);",
          "    assert!(SmallIndex::from_ne_bytes(bytes).unwrap().as_usize() <= SmallIndex::MAX.as_usize());",
          "    assert_eq!(SmallIndex::from_ne_bytes(bytes).unwrap().as_usize(), mid_value as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let near_max_value = SmallIndex::MAX.as_u32() - 1;",
          "    let bytes: [u8; 4] = near_max_value.to_ne_bytes();",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFF]), Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize())));",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x80, 0x00, 0x00, 0x00]), Err(SmallIndexError { attempted: 2147483648 }));",
          "    assert!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x00]).is_ok());",
          "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFE]), Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1)));"
        ],
        "code": [
          "{",
          "    let near_max_value = SmallIndex::MAX.as_u32() - 1;",
          "    let bytes: [u8; 4] = near_max_value.to_ne_bytes();",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFF]), Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize())));",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x80, 0x00, 0x00, 0x00]), Err(SmallIndexError { attempted: 2147483648 }));",
          "    assert!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x00]).is_ok());",
          "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFE]), Ok(SmallIndex::new_unchecked(SmallIndex::MAX.as_usize() - 1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ranged_value = 123456;",
          "    let bytes: [u8; 4] = ranged_value.to_ne_bytes();",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_unwrap(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0x7F])), Ok(SmallIndex::new_unchecked(123456)));",
          "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x00]), Ok(SmallIndex::new_unchecked(0)));",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x01]), Ok(SmallIndex::new_unchecked(1)));",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x02]), Ok(SmallIndex::new_unchecked(2)));",
          "    assert!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x80]).is_ok());",
          "    assert!(SmallIndex::from_ne_bytes([0x80, 0x00, 0x00, 0x00]).is_err());",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFF]), Ok(SmallIndex::new_unchecked(core::u32::MAX as usize)));",
          "    assert!(SmallIndex::from_ne_bytes_unchecked([0x00, 0x00, 0x00, 0xFF]).as_usize() == 255);",
          "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());"
        ],
        "code": [
          "{",
          "    let ranged_value = 123456;",
          "    let bytes: [u8; 4] = ranged_value.to_ne_bytes();",
          "    let _ = SmallIndex::from_ne_bytes(bytes);",
          "    assert_eq!(_unwrap(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0x7F])), Ok(SmallIndex::new_unchecked(123456)));",
          "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x00]), Ok(SmallIndex::new_unchecked(0)));",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x01]), Ok(SmallIndex::new_unchecked(1)));",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x02]), Ok(SmallIndex::new_unchecked(2)));",
          "    assert!(SmallIndex::from_ne_bytes([0x00, 0x00, 0x00, 0x80]).is_ok());",
          "    assert!(SmallIndex::from_ne_bytes([0x80, 0x00, 0x00, 0x00]).is_err());",
          "    assert_eq!(SmallIndex::from_ne_bytes([0x7F, 0xFF, 0xFF, 0xFF]), Ok(SmallIndex::new_unchecked(core::u32::MAX as usize)));",
          "    assert!(SmallIndex::from_ne_bytes_unchecked([0x00, 0x00, 0x00, 0xFF]).as_usize() == 255);",
          "    assert!(SmallIndex::from_ne_bytes([0xFF, 0xFF, 0xFF, 0xFF]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]