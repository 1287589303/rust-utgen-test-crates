[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 3; // At b'9', which is a word byte",
          "    matcher.is_word_ascii(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true); // At b'_', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 4), false); // At b'!', which is not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 3), true); // At b'9', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 0), false); // At b'a', check at start (not a word byte)",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 5), false); // At b'Z', which is a word byte"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 3; // At b'9', which is a word byte",
          "    matcher.is_word_ascii(&haystack, at);",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true); // At b'_', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 4), false); // At b'!', which is not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 3), true); // At b'9', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 0), false); // At b'a', check at start (not a word byte)",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 5), false); // At b'Z', which is a word byte",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 2; // At b'_', which is a word byte",
          "    matcher.is_word_ascii(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_ascii(&haystack, 1), true);  // At b' ', not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true);  // At b'_', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 3), false);  // At b'9', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 4), true);  // At b'!', not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 5), false);  // At b'Z', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 0), false);  // Out of bounds, should not panic (at = 0)",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 6), false);  // At haystack.len(), should not panic"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 2; // At b'_', which is a word byte",
          "    matcher.is_word_ascii(&haystack, at);",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 1), true);  // At b' ', not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true);  // At b'_', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 3), false);  // At b'9', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 4), true);  // At b'!', not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 5), false);  // At b'Z', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 0), false);  // Out of bounds, should not panic (at = 0)",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 6), false);  // At haystack.len(), should not panic",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 1; // At b' ', which is not a word byte",
          "    matcher.is_word_ascii(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    let matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 1;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
          "    let at = 2;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
          "    ",
          "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
          "    let at = 3;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
          "    let at = 4;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 5;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
          "    ",
          "    let haystack = [b'_', b'9', b'!', b'Z'];",
          "    let at = 0;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'_', b'9', b'!', b'Z'];",
          "    let at = 1;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
          "    ",
          "    let haystack = [b'_', b'9', b'!', b'Z'];",
          "    let at = 2;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'_', b'9', b'!', b'Z'];",
          "    let at = 3;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 1; // At b' ', which is not a word byte",
          "    matcher.is_word_ascii(&haystack, at);",
          "    let matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 1;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
          "    let at = 2;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
          "    ",
          "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
          "    let at = 3;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'a', b'_', b'9', b'!', b'Z'];",
          "    let at = 4;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 5;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
          "    ",
          "    let haystack = [b'_', b'9', b'!', b'Z'];",
          "    let at = 0;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'_', b'9', b'!', b'Z'];",
          "    let at = 1;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), true);",
          "    ",
          "    let haystack = [b'_', b'9', b'!', b'Z'];",
          "    let at = 2;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "    ",
          "    let haystack = [b'_', b'9', b'!', b'Z'];",
          "    let at = 3;",
          "    assert_eq!(matcher.is_word_ascii(&haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 0; // At b'a', which is a word byte",
          "    matcher.is_word_ascii(&haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_ascii(&haystack, 1), false); // At b' ', which is not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true); // At b'_', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 3), true); // At b'9', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 4), false); // At b'!', which is not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 5), true); // At b'Z', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 0), true); // At start, checks boundary, as b'a' is word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 6), true); // At haystack.len(), which is allowed, checks end boundary"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let haystack = [b'a', b' ', b'_', b'9', b'!', b'Z'];",
          "    let at = 0; // At b'a', which is a word byte",
          "    matcher.is_word_ascii(&haystack, at);",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 1), false); // At b' ', which is not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 2), true); // At b'_', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 3), true); // At b'9', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 4), false); // At b'!', which is not a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 5), true); // At b'Z', which is a word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 0), true); // At start, checks boundary, as b'a' is word byte",
          "    assert_eq!(matcher.is_word_ascii(&haystack, 6), true); // At haystack.len(), which is allowed, checks end boundary",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]