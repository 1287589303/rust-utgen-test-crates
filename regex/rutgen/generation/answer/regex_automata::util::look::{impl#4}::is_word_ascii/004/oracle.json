[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[];",
          "    let at = 0;",
          "    matcher.is_word_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[];",
          "    let at = 0;",
          "    assert_eq!(matcher.is_word_ascii(haystack, at), false);",
          "    assert!(std::panic::catch_unwind(|| { matcher.is_word_ascii(haystack, at + 1); }).is_err());",
          "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), false);",
          "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len() - 1), false);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[];",
          "    let at = 0;",
          "    matcher.is_word_ascii(haystack, at);",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[];",
          "    let at = 0;",
          "    assert_eq!(matcher.is_word_ascii(haystack, at), false);",
          "    assert!(std::panic::catch_unwind(|| { matcher.is_word_ascii(haystack, at + 1); }).is_err());",
          "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), false);",
          "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len() - 1), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'a'];",
          "    let at = 0;",
          "    matcher.is_word_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_ascii(haystack, at), false);  // at == 0, word_before is false",
          "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), true);  // at == haystack.len(), word_after is false"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'a'];",
          "    let at = 0;",
          "    matcher.is_word_ascii(haystack, at);",
          "    assert_eq!(matcher.is_word_ascii(haystack, at), false);  // at == 0, word_before is false",
          "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), true);  // at == haystack.len(), word_after is false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'a'];",
          "    let at = haystack.len();",
          "    matcher.is_word_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_ascii(haystack, at), false);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[b'a'];",
          "    let at = haystack.len();",
          "    matcher.is_word_ascii(haystack, at);",
          "    assert_eq!(matcher.is_word_ascii(haystack, at), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[];",
          "    let at = haystack.len();",
          "    matcher.is_word_ascii(haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(matcher.is_word_ascii(haystack, 0), false);",
          "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), false);"
        ],
        "code": [
          "{",
          "    let matcher = LookMatcher::new();",
          "    let haystack: &[u8] = &[];",
          "    let at = haystack.len();",
          "    matcher.is_word_ascii(haystack, at);",
          "    assert_eq!(matcher.is_word_ascii(haystack, 0), false);",
          "    assert_eq!(matcher.is_word_ascii(haystack, haystack.len()), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]