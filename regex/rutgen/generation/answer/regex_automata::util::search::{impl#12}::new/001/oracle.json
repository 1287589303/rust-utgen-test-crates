[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(0); // minimum valid PatternID",
          "    let offset = 0; // minimum offset",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern(), PatternID(0));",
          "    assert_eq!(half_match.offset(), 0);",
          "    assert_eq!(half_match, HalfMatch::new(PatternID(0), 0));",
          "    assert!(half_match.eq(&HalfMatch::new(PatternID(0), 0)));"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(0); // minimum valid PatternID",
          "    let offset = 0; // minimum offset",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "    assert_eq!(half_match.pattern(), PatternID(0));",
          "    assert_eq!(half_match.offset(), 0);",
          "    assert_eq!(half_match, HalfMatch::new(PatternID(0), 0));",
          "    assert!(half_match.eq(&HalfMatch::new(PatternID(0), 0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(usize::MAX as u32); // maximum valid PatternID",
          "    let offset = usize::MAX; // maximum offset",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "}"
        ],
        "oracle": [
          "    half_match.pattern().0 == usize::MAX as u32",
          "    half_match.offset() == usize::MAX",
          "    half_match == HalfMatch::new(pattern, offset)"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(usize::MAX as u32); // maximum valid PatternID",
          "    let offset = usize::MAX; // maximum offset",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "    half_match.pattern().0 == usize::MAX as u32",
          "    half_match.offset() == usize::MAX",
          "    half_match == HalfMatch::new(pattern, offset)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(100); // mid-range valid PatternID",
          "    let offset = 50; // mid-range offset",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern, pattern);",
          "    assert_eq!(half_match.offset, offset);",
          "    assert_eq!(half_match, HalfMatch::new(pattern, offset));",
          "    assert!(half_match.eq(&HalfMatch::new(pattern, offset)));",
          "    assert!(half_match != HalfMatch::new(PatternID(200), 50));",
          "    assert!(half_match != HalfMatch::new(PatternID(100), 100));",
          "    assert!(half_match.pattern() == pattern);",
          "    assert!(half_match.offset() == offset);"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(100); // mid-range valid PatternID",
          "    let offset = 50; // mid-range offset",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "    assert_eq!(half_match.pattern, pattern);",
          "    assert_eq!(half_match.offset, offset);",
          "    assert_eq!(half_match, HalfMatch::new(pattern, offset));",
          "    assert!(half_match.eq(&HalfMatch::new(pattern, offset)));",
          "    assert!(half_match != HalfMatch::new(PatternID(200), 50));",
          "    assert!(half_match != HalfMatch::new(PatternID(100), 100));",
          "    assert!(half_match.pattern() == pattern);",
          "    assert!(half_match.offset() == offset);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(1); // valid PatternID",
          "    let offset = 0; // boundary value for offset",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern(), pattern);",
          "    assert_eq!(half_match.offset(), offset);",
          "    assert_eq!(half_match, HalfMatch::new(pattern, offset));",
          "    assert!(half_match == HalfMatch::new(pattern, offset));",
          "    assert!(half_match.pattern() == PatternID(1));",
          "    assert!(half_match.offset() == 0);"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(1); // valid PatternID",
          "    let offset = 0; // boundary value for offset",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "    assert_eq!(half_match.pattern(), pattern);",
          "    assert_eq!(half_match.offset(), offset);",
          "    assert_eq!(half_match, HalfMatch::new(pattern, offset));",
          "    assert!(half_match == HalfMatch::new(pattern, offset));",
          "    assert!(half_match.pattern() == PatternID(1));",
          "    assert!(half_match.offset() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = PatternID(2); // valid PatternID",
          "    let offset = 1_000_000; // large offset value",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(half_match.pattern(), PatternID(2)); // Check if pattern matches the input",
          "    assert_eq!(half_match.offset(), 1_000_000); // Check if offset matches the input",
          "    assert!(half_match == HalfMatch::new(PatternID(2), 1_000_000)); // Verify equality with a new HalfMatch",
          "    assert!(half_match != HalfMatch::new(PatternID(1), 1_000_000)); // Verify inequality with a different PatternID",
          "    assert!(half_match != HalfMatch::new(PatternID(2), 999_999)); // Verify inequality with a different offset"
        ],
        "code": [
          "{",
          "    let pattern = PatternID(2); // valid PatternID",
          "    let offset = 1_000_000; // large offset value",
          "    let half_match = HalfMatch::new(pattern, offset);",
          "    assert_eq!(half_match.pattern(), PatternID(2)); // Check if pattern matches the input",
          "    assert_eq!(half_match.offset(), 1_000_000); // Check if offset matches the input",
          "    assert!(half_match == HalfMatch::new(PatternID(2), 1_000_000)); // Verify equality with a new HalfMatch",
          "    assert!(half_match != HalfMatch::new(PatternID(1), 1_000_000)); // Verify inequality with a different PatternID",
          "    assert!(half_match != HalfMatch::new(PatternID(2), 999_999)); // Verify inequality with a different offset",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]