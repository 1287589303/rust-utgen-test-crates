[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind = ExtractKind::Prefix;",
          "    let result = kind.is_suffix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let kind = ExtractKind::Prefix;",
          "    let result = kind.is_suffix();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct UndefinedVariant;",
          "    impl Clone for UndefinedVariant {",
          "        fn clone(&self) -> Self {",
          "            UndefinedVariant",
          "        }",
          "    }",
          "    ",
          "    impl std::fmt::Debug for UndefinedVariant {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(f, \"UndefinedVariant\")",
          "        }",
          "    }",
          "",
          "    let kind: &UndefinedVariant = &UndefinedVariant;",
          "    let result = kind.is_suffix();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    struct UndefinedVariant;",
          "    impl Clone for UndefinedVariant {",
          "        fn clone(&self) -> Self {",
          "            UndefinedVariant",
          "        }",
          "    }",
          "    ",
          "    impl std::fmt::Debug for UndefinedVariant {",
          "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
          "            write!(f, \"UndefinedVariant\")",
          "        }",
          "    }",
          "",
          "    let kind: &UndefinedVariant = &UndefinedVariant;",
          "    let result = kind.is_suffix();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]