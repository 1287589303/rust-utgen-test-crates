[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false };",
          "    let transitions = Transitions { sparse: vec![0u8; 32], classes: ByteClasses::new(), state_len: 10, pattern_len: 5 };",
          "    let start_table = StartTable { table: vec![0u32; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 4, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let special = Special { max: 5, quit_id: 1, min_match: 2, max_match: 6, min_accel: 3, max_accel: 4, min_start: 0, max_start: 7 };",
          "    let quitset = ByteSet::empty();",
          "",
          "    let dfa = DFA { tt: transitions, st: start_table, special, pre: None, quitset, flags };",
          "",
          "    let mut buffer = [0u8; 64];",
          "    let _ = dfa.write_to_little_endian(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::write_label(LABEL, &mut buffer[nw..]).is_ok());",
          "    assert!(wire::write_endianness_check::<E>(&mut buffer[nw..]).is_ok());",
          "    assert!(wire::write_version::<E>(VERSION, &mut buffer[nw..]).is_ok());",
          "    assert!(dfa.flags.write_to::<E>(&mut buffer[nw..]).is_ok());",
          "    assert!(dfa.tt.write_to::<E>(&mut buffer[nw..]).is_ok());",
          "    assert!(dfa.st.write_to::<E>(&mut buffer[nw..]).is_err());"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: true, is_always_start_anchored: false };",
          "    let transitions = Transitions { sparse: vec![0u8; 32], classes: ByteClasses::new(), state_len: 10, pattern_len: 5 };",
          "    let start_table = StartTable { table: vec![0u32; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 4, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let special = Special { max: 5, quit_id: 1, min_match: 2, max_match: 6, min_accel: 3, max_accel: 4, min_start: 0, max_start: 7 };",
          "    let quitset = ByteSet::empty();",
          "",
          "    let dfa = DFA { tt: transitions, st: start_table, special, pre: None, quitset, flags };",
          "",
          "    let mut buffer = [0u8; 64];",
          "    let _ = dfa.write_to_little_endian(&mut buffer);",
          "    assert!(wire::write_label(LABEL, &mut buffer[nw..]).is_ok());",
          "    assert!(wire::write_endianness_check::<E>(&mut buffer[nw..]).is_ok());",
          "    assert!(wire::write_version::<E>(VERSION, &mut buffer[nw..]).is_ok());",
          "    assert!(dfa.flags.write_to::<E>(&mut buffer[nw..]).is_ok());",
          "    assert!(dfa.tt.write_to::<E>(&mut buffer[nw..]).is_ok());",
          "    assert!(dfa.st.write_to::<E>(&mut buffer[nw..]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: false, is_always_start_anchored: true };",
          "    let transitions = Transitions { sparse: vec![0u8; 32], classes: ByteClasses::new(), state_len: 12, pattern_len: 3 };",
          "    let start_table = StartTable { table: vec![0u32; 8], kind: StartKind::Anchored, start_map: StartByteMap::new(), stride: 4, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let special = Special { max: 5, quit_id: 2, min_match: 2, max_match: 5, min_accel: 3, max_accel: 4, min_start: 0, max_start: 7 };",
          "    let quitset = ByteSet::empty();",
          "",
          "    let dfa = DFA { tt: transitions, st: start_table, special, pre: None, quitset, flags };",
          "",
          "    let mut buffer = [0u8; 64];",
          "    let _ = dfa.write_to_big_endian(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(wire::write_label(LABEL, &mut buffer[..]), Ok(nwrite_label));",
          "    assert_eq!(wire::write_endianness_check::<BigEndian>(&mut buffer[nwrite_label..]), Ok(nwrite_endianness));",
          "    assert_eq!(wire::write_version::<BigEndian>(VERSION, &mut buffer[nwrite_label + nwrite_endianness..]), Ok(nwrite_version));",
          "    assert_eq!(dfa.flags.write_to::<BigEndian>(&mut buffer[nwrite_label + nwrite_endianness + size_of::<u32>()..]), Ok(nwrite_flags));",
          "    assert_eq!(dfa.tt.write_to::<BigEndian>(&mut buffer[nwrite_label + nwrite_endianness + size_of::<u32>() + nwrite_flags..]), Ok(nwrite_transitions));",
          "    assert_eq!(dfa.st.write_to::<BigEndian>(&mut buffer[nwrite_label + nwrite_endianness + size_of::<u32>() + nwrite_flags + nwrite_transitions..]), Err(SerializeError::buffer_too_small(\"start table\")));"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: true, is_utf8: false, is_always_start_anchored: true };",
          "    let transitions = Transitions { sparse: vec![0u8; 32], classes: ByteClasses::new(), state_len: 12, pattern_len: 3 };",
          "    let start_table = StartTable { table: vec![0u32; 8], kind: StartKind::Anchored, start_map: StartByteMap::new(), stride: 4, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let special = Special { max: 5, quit_id: 2, min_match: 2, max_match: 5, min_accel: 3, max_accel: 4, min_start: 0, max_start: 7 };",
          "    let quitset = ByteSet::empty();",
          "",
          "    let dfa = DFA { tt: transitions, st: start_table, special, pre: None, quitset, flags };",
          "",
          "    let mut buffer = [0u8; 64];",
          "    let _ = dfa.write_to_big_endian(&mut buffer);",
          "    assert_eq!(wire::write_label(LABEL, &mut buffer[..]), Ok(nwrite_label));",
          "    assert_eq!(wire::write_endianness_check::<BigEndian>(&mut buffer[nwrite_label..]), Ok(nwrite_endianness));",
          "    assert_eq!(wire::write_version::<BigEndian>(VERSION, &mut buffer[nwrite_label + nwrite_endianness..]), Ok(nwrite_version));",
          "    assert_eq!(dfa.flags.write_to::<BigEndian>(&mut buffer[nwrite_label + nwrite_endianness + size_of::<u32>()..]), Ok(nwrite_flags));",
          "    assert_eq!(dfa.tt.write_to::<BigEndian>(&mut buffer[nwrite_label + nwrite_endianness + size_of::<u32>() + nwrite_flags..]), Ok(nwrite_transitions));",
          "    assert_eq!(dfa.st.write_to::<BigEndian>(&mut buffer[nwrite_label + nwrite_endianness + size_of::<u32>() + nwrite_flags + nwrite_transitions..]), Err(SerializeError::buffer_too_small(\"start table\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false };",
          "    let transitions = Transitions { sparse: vec![0u8; 32], classes: ByteClasses::new(), state_len: 8, pattern_len: 4 };",
          "    let start_table = StartTable { table: vec![0u32; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 4, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let special = Special { max: 5, quit_id: 0, min_match: 1, max_match: 4, min_accel: 2, max_accel: 3, min_start: 0, max_start: 7 };",
          "    let quitset = ByteSet::empty();",
          "",
          "    let dfa = DFA { tt: transitions, st: start_table, special, pre: None, quitset, flags };",
          "",
          "    let mut buffer = [0u8; 64];",
          "    let _ = dfa.write_to_native_endian(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::write_label(LABEL, &mut buffer).is_ok());",
          "    assert!(wire::write_endianness_check::<NativeEndian>(&mut buffer).is_ok());",
          "    assert!(wire::write_version::<NativeEndian>(VERSION, &mut buffer).is_ok());",
          "    assert!(dfa.flags.write_to::<NativeEndian>(&mut buffer).is_ok());",
          "    assert!(dfa.tt.write_to::<NativeEndian>(&mut buffer).is_ok());",
          "    assert!(dfa.st.write_to::<NativeEndian>(&mut buffer).is_err());"
        ],
        "code": [
          "{",
          "    let flags = Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false };",
          "    let transitions = Transitions { sparse: vec![0u8; 32], classes: ByteClasses::new(), state_len: 8, pattern_len: 4 };",
          "    let start_table = StartTable { table: vec![0u32; 8], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 4, pattern_len: Some(2), universal_start_unanchored: None, universal_start_anchored: None };",
          "    let special = Special { max: 5, quit_id: 0, min_match: 1, max_match: 4, min_accel: 2, max_accel: 3, min_start: 0, max_start: 7 };",
          "    let quitset = ByteSet::empty();",
          "",
          "    let dfa = DFA { tt: transitions, st: start_table, special, pre: None, quitset, flags };",
          "",
          "    let mut buffer = [0u8; 64];",
          "    let _ = dfa.write_to_native_endian(&mut buffer);",
          "    assert!(wire::write_label(LABEL, &mut buffer).is_ok());",
          "    assert!(wire::write_endianness_check::<NativeEndian>(&mut buffer).is_ok());",
          "    assert!(wire::write_version::<NativeEndian>(VERSION, &mut buffer).is_ok());",
          "    assert!(dfa.flags.write_to::<NativeEndian>(&mut buffer).is_ok());",
          "    assert!(dfa.tt.write_to::<NativeEndian>(&mut buffer).is_ok());",
          "    assert!(dfa.st.write_to::<NativeEndian>(&mut buffer).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]