[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: Transitions {",
          "            sparse: vec![0u8; 4],",
          "            classes: ByteClasses::new(),",
          "            state_len: 1,",
          "            pattern_len: 0,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0u32; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(0),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        special: Special::new(),",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let mut buffer = vec![0u8; 128];",
          "    let _ = dfa.write_to::<u32>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::write_label(LABEL, &mut buffer[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(wire::write_version::<u32>(VERSION, &mut buffer[..]).is_ok());",
          "    assert!(dfa.flags.write_to::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(dfa.tt.write_to::<u32>(&mut buffer[..]).is_err());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: Transitions {",
          "            sparse: vec![0u8; 4],",
          "            classes: ByteClasses::new(),",
          "            state_len: 1,",
          "            pattern_len: 0,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0u32; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(0),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        special: Special::new(),",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let mut buffer = vec![0u8; 128];",
          "    let _ = dfa.write_to::<u32>(&mut buffer);",
          "    assert!(wire::write_label(LABEL, &mut buffer[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(wire::write_version::<u32>(VERSION, &mut buffer[..]).is_ok());",
          "    assert!(dfa.flags.write_to::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(dfa.tt.write_to::<u32>(&mut buffer[..]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: Transitions {",
          "            sparse: vec![0u8; 4],",
          "            classes: ByteClasses::new(),",
          "            state_len: 1,",
          "            pattern_len: 0,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0u32; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(0),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        special: Special::new(),",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let mut buffer = vec![0u8; 128];",
          "    let _ = dfa.write_to::<u32>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::write_label(LABEL, &mut buffer[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(wire::write_version::<u32>(VERSION, &mut buffer[..]).is_ok());",
          "    assert!(dfa.flags.write_to::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(dfa.tt.write_to::<u32>(&mut buffer[..]).is_err());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: Transitions {",
          "            sparse: vec![0u8; 4],",
          "            classes: ByteClasses::new(),",
          "            state_len: 1,",
          "            pattern_len: 0,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0u32; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(0),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        special: Special::new(),",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let mut buffer = vec![0u8; 128];",
          "    let _ = dfa.write_to::<u32>(&mut buffer);",
          "    assert!(wire::write_label(LABEL, &mut buffer[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(wire::write_version::<u32>(VERSION, &mut buffer[..]).is_ok());",
          "    assert!(dfa.flags.write_to::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(dfa.tt.write_to::<u32>(&mut buffer[..]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        tt: Transitions {",
          "            sparse: vec![0u8; 4],",
          "            classes: ByteClasses::new(),",
          "            state_len: 1,",
          "            pattern_len: 0,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0u32; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(0),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        special: Special::new(),",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let mut buffer = vec![0u8; 128];",
          "    let _ = dfa.write_to::<u32>(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(wire::write_label(LABEL, &mut buffer[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(wire::write_version::<u32>(VERSION, &mut buffer[..]).is_ok());",
          "    assert!(dfa.flags.write_to::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(dfa.tt.write_to::<u32>(&mut buffer[..]).is_err());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        tt: Transitions {",
          "            sparse: vec![0u8; 4],",
          "            classes: ByteClasses::new(),",
          "            state_len: 1,",
          "            pattern_len: 0,",
          "        },",
          "        st: StartTable {",
          "            table: vec![0u32; 8],",
          "            kind: StartKind::Both,",
          "            start_map: StartByteMap::default(),",
          "            stride: 4,",
          "            pattern_len: Some(0),",
          "            universal_start_unanchored: None,",
          "            universal_start_anchored: None,",
          "        },",
          "        special: Special::new(),",
          "        pre: None,",
          "        quitset: ByteSet::empty(),",
          "        flags: Flags {",
          "            has_empty: true,",
          "            is_utf8: true,",
          "            is_always_start_anchored: false,",
          "        },",
          "    };",
          "    let mut buffer = vec![0u8; 128];",
          "    let _ = dfa.write_to::<u32>(&mut buffer);",
          "    assert!(wire::write_label(LABEL, &mut buffer[..]).is_ok());",
          "    assert!(wire::write_endianness_check::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(wire::write_version::<u32>(VERSION, &mut buffer[..]).is_ok());",
          "    assert!(dfa.flags.write_to::<u32>(&mut buffer[..]).is_ok());",
          "    assert!(dfa.tt.write_to::<u32>(&mut buffer[..]).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]