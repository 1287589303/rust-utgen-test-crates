[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x41, 0x5A), // A-Z",
          "        ClassBytesRange::new(0x61, 0x7A), // a-z",
          "    ]));",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_ascii(), true);",
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert!(class_bytes.ranges().contains(&ClassBytesRange::new(0x41, 0x5A));",
          "    assert!(class_bytes.ranges().contains(&ClassBytesRange::new(0x61, 0x7A));",
          "    assert!(class_bytes.literal().is_none());",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(2));"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x41, 0x5A), // A-Z",
          "        ClassBytesRange::new(0x61, 0x7A), // a-z",
          "    ]));",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "    assert_eq!(class_bytes.is_ascii(), true);",
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert!(class_bytes.ranges().contains(&ClassBytesRange::new(0x41, 0x5A));",
          "    assert!(class_bytes.ranges().contains(&ClassBytesRange::new(0x61, 0x7A));",
          "    assert!(class_bytes.literal().is_none());",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::empty());",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.is_empty(), true);",
          "    assert!(class_bytes.maximum_len().is_none());",
          "    assert!(class_bytes.minimum_len().is_none());",
          "    assert!(class_bytes.literal().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::empty());",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "    assert_eq!(class_bytes.is_empty(), true);",
          "    assert!(class_bytes.maximum_len().is_none());",
          "    assert!(class_bytes.minimum_len().is_none());",
          "    assert!(class_bytes.literal().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x41, 0x41), // A",
          "    ]));",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "}"
        ],
        "oracle": [
          "    class_bytes.try_case_fold_simple().unwrap();"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x41, 0x41), // A",
          "    ]));",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x20, 0x7E), // Space to ~",
          "    ]));",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.try_case_fold_simple(), Ok(()));"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0x20, 0x7E), // Space to ~",
          "    ]));",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "    assert_eq!(class_bytes.try_case_fold_simple(), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0xFF, 0xFF), // Non-ASCII",
          "    ]));",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0xFF, 0xFF)])));",
          "    assert!(class_bytes.try_case_fold_simple().is_ok());",
          "    class_bytes = Class::Bytes(ClassBytes::empty());",
          "    assert!(class_bytes.try_case_fold_simple().is_ok());",
          "    class_bytes = Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0x41, 0x5A), ClassBytesRange::new(0x61, 0x7A)]));",
          "    assert!(class_bytes.try_case_fold_simple().is_ok());"
        ],
        "code": [
          "{",
          "    let mut class_bytes = Class::Bytes(ClassBytes::new(vec![",
          "        ClassBytesRange::new(0xFF, 0xFF), // Non-ASCII",
          "    ]));",
          "    class_bytes.try_case_fold_simple().unwrap();",
          "    assert_eq!(class_bytes, Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0xFF, 0xFF)])));",
          "    assert!(class_bytes.try_case_fold_simple().is_ok());",
          "    class_bytes = Class::Bytes(ClassBytes::empty());",
          "    assert!(class_bytes.try_case_fold_simple().is_ok());",
          "    class_bytes = Class::Bytes(ClassBytes::new(vec![ClassBytesRange::new(0x41, 0x5A), ClassBytesRange::new(0x61, 0x7A)]));",
          "    assert!(class_bytes.try_case_fold_simple().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]