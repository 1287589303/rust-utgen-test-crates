[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_input = \"short\";",
          "    let result = DeserializeError::arithmetic_overflow(test_input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"short\" }));"
        ],
        "code": [
          "{",
          "    let test_input = \"short\";",
          "    let result = DeserializeError::arithmetic_overflow(test_input);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"short\" }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_input = \"this is a medium length test string for arithmetic overflow.\";",
          "    let result = DeserializeError::arithmetic_overflow(test_input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, DeserializeErrorKind::ArithmeticOverflow { what: test_input });"
        ],
        "code": [
          "{",
          "    let test_input = \"this is a medium length test string for arithmetic overflow.\";",
          "    let result = DeserializeError::arithmetic_overflow(test_input);",
          "    assert_eq!(result.0, DeserializeErrorKind::ArithmeticOverflow { what: test_input });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_input = \"a\".repeat(255);",
          "    let result = DeserializeError::arithmetic_overflow(&test_input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"a\".repeat(255) }));"
        ],
        "code": [
          "{",
          "    let test_input = \"a\".repeat(255);",
          "    let result = DeserializeError::arithmetic_overflow(&test_input);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: \"a\".repeat(255) }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_input = \"\";",
          "    let result = DeserializeError::arithmetic_overflow(test_input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: test_input }));"
        ],
        "code": [
          "{",
          "    let test_input = \"\";",
          "    let result = DeserializeError::arithmetic_overflow(test_input);",
          "    assert_eq!(result, DeserializeError(DeserializeErrorKind::ArithmeticOverflow { what: test_input }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]