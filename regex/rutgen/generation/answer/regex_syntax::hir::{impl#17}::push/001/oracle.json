[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range = ClassBytesRange { start: 0, end: 0 };",
          "    class_bytes.push(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 0, end: 0 });",
          "    assert!(class_bytes.is_ascii());",
          "    assert!(class_bytes.minimum_len().is_none());",
          "    assert!(class_bytes.maximum_len().is_none());",
          "    assert!(class_bytes.literal().is_none());",
          "    assert!(class_bytes.to_unicode_class().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range = ClassBytesRange { start: 0, end: 0 };",
          "    class_bytes.push(range);",
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 0, end: 0 });",
          "    assert!(class_bytes.is_ascii());",
          "    assert!(class_bytes.minimum_len().is_none());",
          "    assert!(class_bytes.maximum_len().is_none());",
          "    assert!(class_bytes.literal().is_none());",
          "    assert!(class_bytes.to_unicode_class().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range = ClassBytesRange { start: 100, end: 150 };",
          "    class_bytes.push(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0].start, 100);",
          "    assert_eq!(class_bytes.ranges()[0].end, 150);",
          "    assert!(class_bytes.is_ascii());",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(51));",
          "    assert!(class_bytes.literal().is_none());",
          "    assert!(class_bytes.to_unicode_class().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range = ClassBytesRange { start: 100, end: 150 };",
          "    class_bytes.push(range);",
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0].start, 100);",
          "    assert_eq!(class_bytes.ranges()[0].end, 150);",
          "    assert!(class_bytes.is_ascii());",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(51));",
          "    assert!(class_bytes.literal().is_none());",
          "    assert!(class_bytes.to_unicode_class().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range1 = ClassBytesRange { start: 10, end: 20 };",
          "    let range2 = ClassBytesRange { start: 20, end: 30 };",
          "    class_bytes.push(range1);",
          "    class_bytes.push(range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert_eq!(class_bytes.ranges()[0].start, 10);",
          "    assert_eq!(class_bytes.ranges()[0].end, 20);",
          "    assert_eq!(class_bytes.ranges()[1].start, 20);",
          "    assert_eq!(class_bytes.ranges()[1].end, 30);"
        ],
        "code": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range1 = ClassBytesRange { start: 10, end: 20 };",
          "    let range2 = ClassBytesRange { start: 20, end: 30 };",
          "    class_bytes.push(range1);",
          "    class_bytes.push(range2);",
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert_eq!(class_bytes.ranges()[0].start, 10);",
          "    assert_eq!(class_bytes.ranges()[0].end, 20);",
          "    assert_eq!(class_bytes.ranges()[1].start, 20);",
          "    assert_eq!(class_bytes.ranges()[1].end, 30);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range1 = ClassBytesRange { start: 0, end: 0 };",
          "    let range2 = ClassBytesRange { start: 255, end: 255 };",
          "    class_bytes.push(range1);",
          "    class_bytes.push(range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 0, end: 0 });",
          "    assert_eq!(class_bytes.ranges()[1], ClassBytesRange { start: 255, end: 255 });"
        ],
        "code": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range1 = ClassBytesRange { start: 0, end: 0 };",
          "    let range2 = ClassBytesRange { start: 255, end: 255 };",
          "    class_bytes.push(range1);",
          "    class_bytes.push(range2);",
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 0, end: 0 });",
          "    assert_eq!(class_bytes.ranges()[1], ClassBytesRange { start: 255, end: 255 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range = ClassBytesRange { start: 0, end: 255 };",
          "    class_bytes.push(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0].start, 0);",
          "    assert_eq!(class_bytes.ranges()[0].end, 255);"
        ],
        "code": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range = ClassBytesRange { start: 0, end: 255 };",
          "    class_bytes.push(range);",
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0].start, 0);",
          "    assert_eq!(class_bytes.ranges()[0].end, 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range1 = ClassBytesRange { start: 1, end: 5 };",
          "    let range2 = ClassBytesRange { start: 5, end: 10 };",
          "    class_bytes.push(range1);",
          "    class_bytes.push(range2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 1, end: 5 });",
          "    assert_eq!(class_bytes.ranges()[1], ClassBytesRange { start: 5, end: 10 });",
          "    assert!(class_bytes.is_ascii());",
          "    assert!(class_bytes.minimum_len().is_some());",
          "    assert!(class_bytes.maximum_len().is_some());",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(10));"
        ],
        "code": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range1 = ClassBytesRange { start: 1, end: 5 };",
          "    let range2 = ClassBytesRange { start: 5, end: 10 };",
          "    class_bytes.push(range1);",
          "    class_bytes.push(range2);",
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 1, end: 5 });",
          "    assert_eq!(class_bytes.ranges()[1], ClassBytesRange { start: 5, end: 10 });",
          "    assert!(class_bytes.is_ascii());",
          "    assert!(class_bytes.minimum_len().is_some());",
          "    assert!(class_bytes.maximum_len().is_some());",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range = ClassBytesRange { start: 100, end: 100 };",
          "    class_bytes.push(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 100, end: 100 });",
          "    assert!(class_bytes.is_ascii());",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(1));",
          "    assert!(class_bytes.literal().is_none());"
        ],
        "code": [
          "{",
          "    let mut class_bytes = ClassBytes::empty();",
          "    let range = ClassBytesRange { start: 100, end: 100 };",
          "    class_bytes.push(range);",
          "    assert_eq!(class_bytes.ranges().len(), 1);",
          "    assert_eq!(class_bytes.ranges()[0], ClassBytesRange { start: 100, end: 100 });",
          "    assert!(class_bytes.is_ascii());",
          "    assert_eq!(class_bytes.minimum_len(), Some(1));",
          "    assert_eq!(class_bytes.maximum_len(), Some(1));",
          "    assert!(class_bytes.literal().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]