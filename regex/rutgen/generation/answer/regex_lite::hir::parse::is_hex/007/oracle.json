[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = 'a';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('b'), true);",
          "    assert_eq!(is_hex('c'), true);",
          "    assert_eq!(is_hex('d'), true);",
          "    assert_eq!(is_hex('e'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('9'), false);",
          "    assert_eq!(is_hex('A'), false);",
          "    assert_eq!(is_hex('G'), false);",
          "    assert_eq!(is_hex('Z'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('#'), false);",
          "    assert_eq!(is_hex(';'), false);"
        ],
        "code": [
          "{",
          "    let c: char = 'a';",
          "    is_hex(c);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('b'), true);",
          "    assert_eq!(is_hex('c'), true);",
          "    assert_eq!(is_hex('d'), true);",
          "    assert_eq!(is_hex('e'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('9'), false);",
          "    assert_eq!(is_hex('A'), false);",
          "    assert_eq!(is_hex('G'), false);",
          "    assert_eq!(is_hex('Z'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('#'), false);",
          "    assert_eq!(is_hex(';'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = 'f';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert!(!is_hex('0'));",
          "    assert!(is_hex('a'));",
          "    assert!(is_hex('f'));",
          "    assert!(!is_hex('g'));",
          "    assert!(!is_hex('!'));",
          "    assert!(is_hex('A'));",
          "    assert!(is_hex('F'));",
          "    assert!(!is_hex(' '));",
          "    assert!(!is_hex('@'));",
          "    assert!(!is_hex('9'));",
          "    assert!(!is_hex(':'));"
        ],
        "code": [
          "{",
          "    let c: char = 'f';",
          "    is_hex(c);",
          "    assert!(!is_hex('0'));",
          "    assert!(is_hex('a'));",
          "    assert!(is_hex('f'));",
          "    assert!(!is_hex('g'));",
          "    assert!(!is_hex('!'));",
          "    assert!(is_hex('A'));",
          "    assert!(is_hex('F'));",
          "    assert!(!is_hex(' '));",
          "    assert!(!is_hex('@'));",
          "    assert!(!is_hex('9'));",
          "    assert!(!is_hex(':'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = 'A';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('Z'), false);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('B'), false);",
          "    assert_eq!(is_hex(' '), false);"
        ],
        "code": [
          "{",
          "    let c: char = 'A';",
          "    is_hex(c);",
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('Z'), false);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('B'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = '9';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    let c: char = 'x'; assert!(!is_hex(c));",
          "    let c: char = 'a'; assert!(is_hex(c));",
          "    let c: char = 'f'; assert!(is_hex(c));",
          "    let c: char = 'g'; assert!(!is_hex(c));",
          "    let c: char = 'A'; assert!(is_hex(c));",
          "    let c: char = 'F'; assert!(is_hex(c));",
          "    let c: char = 'Z'; assert!(!is_hex(c));",
          "    let c: char = '@'; assert!(!is_hex(c));",
          "    let c: char = '0'; assert!(is_hex(c));",
          "    let c: char = '9'; assert!(is_hex(c));"
        ],
        "code": [
          "{",
          "    let c: char = '9';",
          "    is_hex(c);",
          "    let c: char = 'x'; assert!(!is_hex(c));",
          "    let c: char = 'a'; assert!(is_hex(c));",
          "    let c: char = 'f'; assert!(is_hex(c));",
          "    let c: char = 'g'; assert!(!is_hex(c));",
          "    let c: char = 'A'; assert!(is_hex(c));",
          "    let c: char = 'F'; assert!(is_hex(c));",
          "    let c: char = 'Z'; assert!(!is_hex(c));",
          "    let c: char = '@'; assert!(!is_hex(c));",
          "    let c: char = '0'; assert!(is_hex(c));",
          "    let c: char = '9'; assert!(is_hex(c));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = '0';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('-'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('!'), false);"
        ],
        "code": [
          "{",
          "    let c: char = '0';",
          "    is_hex(c);",
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('-'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('!'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = 'g';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('9'), false);",
          "    assert_eq!(is_hex('A'), false);",
          "    assert_eq!(is_hex('F'), false);"
        ],
        "code": [
          "{",
          "    let c: char = 'g';",
          "    is_hex(c);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('9'), false);",
          "    assert_eq!(is_hex('A'), false);",
          "    assert_eq!(is_hex('F'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = 'Z';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert!(!is_hex('Z'));",
          "    assert!(is_hex('a'));",
          "    assert!(is_hex('f'));",
          "    assert!(!is_hex('G'));",
          "    assert!(!is_hex('z'));",
          "    assert!(is_hex('0'));",
          "    assert!(is_hex('9'));",
          "    assert!(!is_hex('@'));"
        ],
        "code": [
          "{",
          "    let c: char = 'Z';",
          "    is_hex(c);",
          "    assert!(!is_hex('Z'));",
          "    assert!(is_hex('a'));",
          "    assert!(is_hex('f'));",
          "    assert!(!is_hex('G'));",
          "    assert!(!is_hex('z'));",
          "    assert!(is_hex('0'));",
          "    assert!(is_hex('9'));",
          "    assert!(!is_hex('@'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = '-';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('-'), false);",
          "    let c: char = 'a';",
          "    assert_eq!(is_hex(c), true);",
          "    let c: char = 'f';",
          "    assert_eq!(is_hex(c), true);"
        ],
        "code": [
          "{",
          "    let c: char = '-';",
          "    is_hex(c);",
          "    assert_eq!(is_hex('-'), false);",
          "    let c: char = 'a';",
          "    assert_eq!(is_hex(c), true);",
          "    let c: char = 'f';",
          "    assert_eq!(is_hex(c), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = '!';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('!'), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('9'), false);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('H'), false);"
        ],
        "code": [
          "{",
          "    let c: char = '!';",
          "    is_hex(c);",
          "    assert_eq!(is_hex('!'), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('0'), false);",
          "    assert_eq!(is_hex('9'), false);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('H'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = ' ';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);"
        ],
        "code": [
          "{",
          "    let c: char = ' ';",
          "    is_hex(c);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c: char = '1';",
          "    is_hex(c);",
          "}"
        ],
        "oracle": [
          "    let c: char = '1'; assert_eq!(is_hex(c), true);",
          "    let c: char = 'a'; assert_eq!(is_hex(c), true);",
          "    let c: char = 'f'; assert_eq!(is_hex(c), true);",
          "    let c: char = 'g'; assert_eq!(is_hex(c), false);",
          "    let c: char = 'A'; assert_eq!(is_hex(c), true);",
          "    let c: char = 'F'; assert_eq!(is_hex(c), true);",
          "    let c: char = ' '; assert_eq!(is_hex(c), false);",
          "    let c: char = '0'; assert_eq!(is_hex(c), true);",
          "    let c: char = '9'; assert_eq!(is_hex(c), true);",
          "    let c: char = '!'; assert_eq!(is_hex(c), false);"
        ],
        "code": [
          "{",
          "    let c: char = '1';",
          "    is_hex(c);",
          "    let c: char = '1'; assert_eq!(is_hex(c), true);",
          "    let c: char = 'a'; assert_eq!(is_hex(c), true);",
          "    let c: char = 'f'; assert_eq!(is_hex(c), true);",
          "    let c: char = 'g'; assert_eq!(is_hex(c), false);",
          "    let c: char = 'A'; assert_eq!(is_hex(c), true);",
          "    let c: char = 'F'; assert_eq!(is_hex(c), true);",
          "    let c: char = ' '; assert_eq!(is_hex(c), false);",
          "    let c: char = '0'; assert_eq!(is_hex(c), true);",
          "    let c: char = '9'; assert_eq!(is_hex(c), true);",
          "    let c: char = '!'; assert_eq!(is_hex(c), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]