[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '0';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let c = '0';",
          "    let result = is_hex(c);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '9';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert!(result, \"Expected true for character '9'\");"
        ],
        "code": [
          "{",
          "    let c = '9';",
          "    let result = is_hex(c);",
          "    assert!(result, \"Expected true for character '9'\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('-'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('\\0'), false);"
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    let result = is_hex(c);",
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('-'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('\\0'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'f';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('/'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('\\0'), false);"
        ],
        "code": [
          "{",
          "    let c = 'f';",
          "    let result = is_hex(c);",
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('/'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('\\0'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'A';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert!(is_hex('0'), \"Expected true for '0'\");",
          "    assert!(is_hex('1'), \"Expected true for '1'\");",
          "    assert!(is_hex('2'), \"Expected true for '2'\");",
          "    assert!(is_hex('3'), \"Expected true for '3'\");",
          "    assert!(is_hex('4'), \"Expected true for '4'\");",
          "    assert!(is_hex('5'), \"Expected true for '5'\");",
          "    assert!(is_hex('6'), \"Expected true for '6'\");",
          "    assert!(is_hex('7'), \"Expected true for '7'\");",
          "    assert!(is_hex('8'), \"Expected true for '8'\");",
          "    assert!(is_hex('9'), \"Expected true for '9'\");",
          "    assert!(is_hex('a'), \"Expected true for 'a'\");",
          "    assert!(is_hex('b'), \"Expected true for 'b'\");",
          "    assert!(is_hex('c'), \"Expected true for 'c'\");",
          "    assert!(is_hex('d'), \"Expected true for 'd'\");",
          "    assert!(is_hex('e'), \"Expected true for 'e'\");",
          "    assert!(is_hex('f'), \"Expected true for 'f'\");",
          "    assert!(is_hex('A'), \"Expected true for 'A'\");",
          "    assert!(is_hex('B'), \"Expected true for 'B'\");",
          "    assert!(is_hex('C'), \"Expected true for 'C'\");",
          "    assert!(is_hex('D'), \"Expected true for 'D'\");",
          "    assert!(is_hex('E'), \"Expected true for 'E'\");",
          "    assert!(is_hex('F'), \"Expected true for 'F'\");",
          "    assert!(!is_hex('g'), \"Expected false for 'g'\");",
          "    assert!(!is_hex('G'), \"Expected false for 'G'\");",
          "    assert!(!is_hex('!'), \"Expected false for '!'\");",
          "    assert!(!is_hex(' '), \"Expected false for space\");"
        ],
        "code": [
          "{",
          "    let c = 'A';",
          "    let result = is_hex(c);",
          "    assert!(is_hex('0'), \"Expected true for '0'\");",
          "    assert!(is_hex('1'), \"Expected true for '1'\");",
          "    assert!(is_hex('2'), \"Expected true for '2'\");",
          "    assert!(is_hex('3'), \"Expected true for '3'\");",
          "    assert!(is_hex('4'), \"Expected true for '4'\");",
          "    assert!(is_hex('5'), \"Expected true for '5'\");",
          "    assert!(is_hex('6'), \"Expected true for '6'\");",
          "    assert!(is_hex('7'), \"Expected true for '7'\");",
          "    assert!(is_hex('8'), \"Expected true for '8'\");",
          "    assert!(is_hex('9'), \"Expected true for '9'\");",
          "    assert!(is_hex('a'), \"Expected true for 'a'\");",
          "    assert!(is_hex('b'), \"Expected true for 'b'\");",
          "    assert!(is_hex('c'), \"Expected true for 'c'\");",
          "    assert!(is_hex('d'), \"Expected true for 'd'\");",
          "    assert!(is_hex('e'), \"Expected true for 'e'\");",
          "    assert!(is_hex('f'), \"Expected true for 'f'\");",
          "    assert!(is_hex('A'), \"Expected true for 'A'\");",
          "    assert!(is_hex('B'), \"Expected true for 'B'\");",
          "    assert!(is_hex('C'), \"Expected true for 'C'\");",
          "    assert!(is_hex('D'), \"Expected true for 'D'\");",
          "    assert!(is_hex('E'), \"Expected true for 'E'\");",
          "    assert!(is_hex('F'), \"Expected true for 'F'\");",
          "    assert!(!is_hex('g'), \"Expected false for 'g'\");",
          "    assert!(!is_hex('G'), \"Expected false for 'G'\");",
          "    assert!(!is_hex('!'), \"Expected false for '!'\");",
          "    assert!(!is_hex(' '), \"Expected false for space\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'g';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert!(!result); // 'g' is not a hexadecimal digit, expecting false for input 'g'",
          "    ",
          "    let c = '0';",
          "    let result = is_hex(c);",
          "    assert!(result); // '0' is a hexadecimal digit, expecting true for input '0'",
          "    ",
          "    let c = '9';",
          "    let result = is_hex(c);",
          "    assert!(result); // '9' is a hexadecimal digit, expecting true for input '9'",
          "    ",
          "    let c = 'a';",
          "    let result = is_hex(c);",
          "    assert!(result); // 'a' is a hexadecimal digit, expecting true for input 'a'",
          "    ",
          "    let c = 'f';",
          "    let result = is_hex(c);",
          "    assert!(result); // 'f' is a hexadecimal digit, expecting true for input 'f'",
          "    ",
          "    let c = 'A';",
          "    let result = is_hex(c);",
          "    assert!(result); // 'A' is a hexadecimal digit, expecting true for input 'A'",
          "    ",
          "    let c = 'F';",
          "    let result = is_hex(c);",
          "    assert!(result); // 'F' is a hexadecimal digit, expecting true for input 'F'",
          "    ",
          "    let c = '#';",
          "    let result = is_hex(c);",
          "    assert!(!result); // '#' is not a hexadecimal digit, expecting false for input '#'",
          "    ",
          "    let c = ' ';",
          "    let result = is_hex(c);",
          "    assert!(!result); // ' ' is not a hexadecimal digit, expecting false for input ' '",
          "    ",
          "    let c = 'z';",
          "    let result = is_hex(c);",
          "    assert!(!result); // 'z' is not a hexadecimal digit, expecting false for input 'z'"
        ],
        "code": [
          "{",
          "    let c = 'g';",
          "    let result = is_hex(c);",
          "    assert!(!result); // 'g' is not a hexadecimal digit, expecting false for input 'g'",
          "    ",
          "    let c = '0';",
          "    let result = is_hex(c);",
          "    assert!(result); // '0' is a hexadecimal digit, expecting true for input '0'",
          "    ",
          "    let c = '9';",
          "    let result = is_hex(c);",
          "    assert!(result); // '9' is a hexadecimal digit, expecting true for input '9'",
          "    ",
          "    let c = 'a';",
          "    let result = is_hex(c);",
          "    assert!(result); // 'a' is a hexadecimal digit, expecting true for input 'a'",
          "    ",
          "    let c = 'f';",
          "    let result = is_hex(c);",
          "    assert!(result); // 'f' is a hexadecimal digit, expecting true for input 'f'",
          "    ",
          "    let c = 'A';",
          "    let result = is_hex(c);",
          "    assert!(result); // 'A' is a hexadecimal digit, expecting true for input 'A'",
          "    ",
          "    let c = 'F';",
          "    let result = is_hex(c);",
          "    assert!(result); // 'F' is a hexadecimal digit, expecting true for input 'F'",
          "    ",
          "    let c = '#';",
          "    let result = is_hex(c);",
          "    assert!(!result); // '#' is not a hexadecimal digit, expecting false for input '#'",
          "    ",
          "    let c = ' ';",
          "    let result = is_hex(c);",
          "    assert!(!result); // ' ' is not a hexadecimal digit, expecting false for input ' '",
          "    ",
          "    let c = 'z';",
          "    let result = is_hex(c);",
          "    assert!(!result); // 'z' is not a hexadecimal digit, expecting false for input 'z'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'Z';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('Z'), false);"
        ],
        "code": [
          "{",
          "    let c = 'Z';",
          "    let result = is_hex(c);",
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('Z'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '@';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('@'), false);",
          "    assert_eq!(is_hex('-'), false);",
          "    assert_eq!(is_hex(' '), false);"
        ],
        "code": [
          "{",
          "    let c = '@';",
          "    let result = is_hex(c);",
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), true);",
          "    assert_eq!(is_hex('f'), true);",
          "    assert_eq!(is_hex('A'), true);",
          "    assert_eq!(is_hex('F'), true);",
          "    assert_eq!(is_hex('g'), false);",
          "    assert_eq!(is_hex('@'), false);",
          "    assert_eq!(is_hex('-'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = ' ';",
          "    let result = is_hex(c);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), false);",
          "    assert_eq!(is_hex('f'), false);",
          "    assert_eq!(is_hex('A'), false);",
          "    assert_eq!(is_hex('G'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('1'), true);",
          "    assert_eq!(is_hex('5'), true);",
          "    assert_eq!(is_hex('Z'), false);"
        ],
        "code": [
          "{",
          "    let c = ' ';",
          "    let result = is_hex(c);",
          "    assert_eq!(is_hex('0'), true);",
          "    assert_eq!(is_hex('9'), true);",
          "    assert_eq!(is_hex('a'), false);",
          "    assert_eq!(is_hex('f'), false);",
          "    assert_eq!(is_hex('A'), false);",
          "    assert_eq!(is_hex('G'), false);",
          "    assert_eq!(is_hex(' '), false);",
          "    assert_eq!(is_hex('1'), true);",
          "    assert_eq!(is_hex('5'), true);",
          "    assert_eq!(is_hex('Z'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]