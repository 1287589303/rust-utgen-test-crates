[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"$0\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"CaptureZero\");",
          "            }",
          "        },",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"CaptureZero\");",
          "    assert_eq!(dst.len(), 13);",
          "    assert!(dst.contains(\"CaptureZero\"));",
          "    assert!(!dst.contains(\"$\"));",
          "    assert!(dst.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"$0\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"CaptureZero\");",
          "            }",
          "        },",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "    assert_eq!(dst, \"CaptureZero\");",
          "    assert_eq!(dst.len(), 13);",
          "    assert!(dst.contains(\"CaptureZero\"));",
          "    assert!(!dst.contains(\"$\"));",
          "    assert!(dst.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"Start $0 middle $1 end\",",
          "        |index, dst| {",
          "            match index {",
          "                0 => dst.push_str(\"FirstCapture\"),",
          "                1 => dst.push_str(\"SecondCapture\"),",
          "                _ => {}",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"first\" {",
          "                Some(0)",
          "            } else if name == \"second\" {",
          "                Some(1)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"Start $0 middle $1 end\",",
          "    |index, dst| {",
          "    match index {",
          "    0 => dst.push_str(\"FirstCapture\"),",
          "    1 => dst.push_str(\"SecondCapture\"),",
          "    _ => {}",
          "    }",
          "    },",
          "    |name| {",
          "    if name == \"first\" {",
          "    Some(0)",
          "    } else if name == \"second\" {",
          "    Some(1)",
          "    } else {",
          "    None",
          "    }",
          "    },",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"Start FirstCapture middle SecondCapture end\", dst);",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"No captures here\",",
          "    |index, dst| {",
          "    dst.push_str(\"ShouldNotAppend\");",
          "    },",
          "    |name| None,",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"No captures here\", dst);",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"$$ Single dollar\",",
          "    |index, dst| {},",
          "    |name| None,",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"$ Single dollar\", dst);",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"Mixed $first and $second\",",
          "    |index, dst| {",
          "    match index {",
          "    0 => dst.push_str(\"Capture1\"),",
          "    1 => dst.push_str(\"Capture2\"),",
          "    _ => {}",
          "    }",
          "    },",
          "    |name| {",
          "    if name == \"first\" {",
          "    Some(0)",
          "    } else if name == \"second\" {",
          "    Some(1)",
          "    } else {",
          "    None",
          "    }",
          "    },",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"Mixed Capture1 and Capture2\", dst);",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"$0 as the first capture, but no $3\",",
          "    |index, dst| {",
          "    match index {",
          "    0 => dst.push_str(\"OnlyValidCapture\"),",
          "    _ => {}",
          "    }",
          "    },",
          "    |name| None,",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"OnlyValidCapture as the first capture, but no $3\", dst);"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"Start $0 middle $1 end\",",
          "        |index, dst| {",
          "            match index {",
          "                0 => dst.push_str(\"FirstCapture\"),",
          "                1 => dst.push_str(\"SecondCapture\"),",
          "                _ => {}",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"first\" {",
          "                Some(0)",
          "            } else if name == \"second\" {",
          "                Some(1)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"Start $0 middle $1 end\",",
          "    |index, dst| {",
          "    match index {",
          "    0 => dst.push_str(\"FirstCapture\"),",
          "    1 => dst.push_str(\"SecondCapture\"),",
          "    _ => {}",
          "    }",
          "    },",
          "    |name| {",
          "    if name == \"first\" {",
          "    Some(0)",
          "    } else if name == \"second\" {",
          "    Some(1)",
          "    } else {",
          "    None",
          "    }",
          "    },",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"Start FirstCapture middle SecondCapture end\", dst);",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"No captures here\",",
          "    |index, dst| {",
          "    dst.push_str(\"ShouldNotAppend\");",
          "    },",
          "    |name| None,",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"No captures here\", dst);",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"$$ Single dollar\",",
          "    |index, dst| {},",
          "    |name| None,",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"$ Single dollar\", dst);",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"Mixed $first and $second\",",
          "    |index, dst| {",
          "    match index {",
          "    0 => dst.push_str(\"Capture1\"),",
          "    1 => dst.push_str(\"Capture2\"),",
          "    _ => {}",
          "    }",
          "    },",
          "    |name| {",
          "    if name == \"first\" {",
          "    Some(0)",
          "    } else if name == \"second\" {",
          "    Some(1)",
          "    } else {",
          "    None",
          "    }",
          "    },",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"Mixed Capture1 and Capture2\", dst);",
          "    let mut dst = String::new();",
          "    super::string(",
          "    \"$0 as the first capture, but no $3\",",
          "    |index, dst| {",
          "    match index {",
          "    0 => dst.push_str(\"OnlyValidCapture\"),",
          "    _ => {}",
          "    }",
          "    },",
          "    |name| None,",
          "    &mut dst,",
          "    );",
          "    assert_eq!(\"OnlyValidCapture as the first capture, but no $3\", dst);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"Value: $$0 is not the same as $1\",",
          "        |index, dst| {",
          "            if index == 1 {",
          "                dst.push_str(\"CaptureOne\");",
          "            }",
          "        },",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(\"Value: $0 is not the same as CaptureOne\", dst);",
          "    assert_eq!(dst.is_empty(), false);",
          "    assert!(dst.contains(\"CaptureOne\"));",
          "    assert!(dst.contains(\"$0\"));"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"Value: $$0 is not the same as $1\",",
          "        |index, dst| {",
          "            if index == 1 {",
          "                dst.push_str(\"CaptureOne\");",
          "            }",
          "        },",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "    assert_eq!(\"Value: $0 is not the same as CaptureOne\", dst);",
          "    assert_eq!(dst.is_empty(), false);",
          "    assert!(dst.contains(\"CaptureOne\"));",
          "    assert!(dst.contains(\"$0\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"Hello $name\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"World\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"name\" {",
          "                Some(0)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"Hello World\");",
          "    assert_eq!(dst.len(), 12);",
          "    assert!(dst.contains(\"World\"));",
          "    assert!(!dst.contains(\"name\"));",
          "    assert_eq!(dst, format!(\"Hello {}\", \"World\"));",
          "    assert!(dst.starts_with(\"Hello\"));",
          "    assert!(dst.ends_with(\"World\"));"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"Hello $name\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"World\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"name\" {",
          "                Some(0)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "    assert_eq!(dst, \"Hello World\");",
          "    assert_eq!(dst.len(), 12);",
          "    assert!(dst.contains(\"World\"));",
          "    assert!(!dst.contains(\"name\"));",
          "    assert_eq!(dst, format!(\"Hello {}\", \"World\"));",
          "    assert!(dst.starts_with(\"Hello\"));",
          "    assert!(dst.ends_with(\"World\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"Just testing $invalid_name\",",
          "        |index, dst| {},",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"Just testing $invalid_name\");"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"Just testing $invalid_name\",",
          "        |index, dst| {},",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "    assert_eq!(dst, \"Just testing $invalid_name\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"\",",
          "        |index, dst| {},",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"\");",
          "    let mut dst_zero = String::new();",
          "    super::string(",
          "    \"$$\",",
          "    |index, dst| { dst.push_str(\"APPENDED\"); },",
          "    |name| None,",
          "    &mut dst_zero,",
          "    );",
          "    assert_eq!(dst_zero, \"$\");",
          "    let mut dst_double = String::new();",
          "    super::string(",
          "    \"Hello $$world!\",",
          "    |index, dst| { dst.push_str(\"APPENDED\"); },",
          "    |name| None,",
          "    &mut dst_double,",
          "    );",
          "    assert_eq!(dst_double, \"Hello $world!\");",
          "    let mut dst_number = String::new();",
          "    super::string(",
          "    \"$0\",",
          "    |index, dst| { dst.push_str(\"VALUE\"); },",
          "    |name| Some(0),",
          "    &mut dst_number,",
          "    );",
          "    assert_eq!(dst_number, \"VALUE\");",
          "    let mut dst_named = String::new();",
          "    super::string(",
          "    \"$bar\",",
          "    |index, dst| { dst.push_str(\"NAMED_VALUE\"); },",
          "    |name| if name == \"bar\" { Some(0) } else { None },",
          "    &mut dst_named,",
          "    );",
          "    assert_eq!(dst_named, \"NAMED_VALUE\");",
          "    let mut dst_mixed = String::new();",
          "    super::string(",
          "    \"Escape $$ and $bar\",",
          "    |index, dst| { dst.push_str(\"NAMED_VALUE\"); },",
          "    |name| if name == \"bar\" { Some(0) } else { None },",
          "    &mut dst_mixed,",
          "    );",
          "    assert_eq!(dst_mixed, \"Escape $ and NAMED_VALUE\");",
          "    let mut dst_invalid = String::new();",
          "    super::string(",
          "    \"No capture $invalid_name\",",
          "    |index, dst| { dst.push_str(\"NAMED_VALUE\"); },",
          "    |name| None,",
          "    &mut dst_invalid,",
          "    );",
          "    assert_eq!(dst_invalid, \"No capture $invalid_name\");"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    super::string(",
          "        \"\",",
          "        |index, dst| {},",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "    assert_eq!(dst, \"\");",
          "    let mut dst_zero = String::new();",
          "    super::string(",
          "    \"$$\",",
          "    |index, dst| { dst.push_str(\"APPENDED\"); },",
          "    |name| None,",
          "    &mut dst_zero,",
          "    );",
          "    assert_eq!(dst_zero, \"$\");",
          "    let mut dst_double = String::new();",
          "    super::string(",
          "    \"Hello $$world!\",",
          "    |index, dst| { dst.push_str(\"APPENDED\"); },",
          "    |name| None,",
          "    &mut dst_double,",
          "    );",
          "    assert_eq!(dst_double, \"Hello $world!\");",
          "    let mut dst_number = String::new();",
          "    super::string(",
          "    \"$0\",",
          "    |index, dst| { dst.push_str(\"VALUE\"); },",
          "    |name| Some(0),",
          "    &mut dst_number,",
          "    );",
          "    assert_eq!(dst_number, \"VALUE\");",
          "    let mut dst_named = String::new();",
          "    super::string(",
          "    \"$bar\",",
          "    |index, dst| { dst.push_str(\"NAMED_VALUE\"); },",
          "    |name| if name == \"bar\" { Some(0) } else { None },",
          "    &mut dst_named,",
          "    );",
          "    assert_eq!(dst_named, \"NAMED_VALUE\");",
          "    let mut dst_mixed = String::new();",
          "    super::string(",
          "    \"Escape $$ and $bar\",",
          "    |index, dst| { dst.push_str(\"NAMED_VALUE\"); },",
          "    |name| if name == \"bar\" { Some(0) } else { None },",
          "    &mut dst_mixed,",
          "    );",
          "    assert_eq!(dst_mixed, \"Escape $ and NAMED_VALUE\");",
          "    let mut dst_invalid = String::new();",
          "    super::string(",
          "    \"No capture $invalid_name\",",
          "    |index, dst| { dst.push_str(\"NAMED_VALUE\"); },",
          "    |name| None,",
          "    &mut dst_invalid,",
          "    );",
          "    assert_eq!(dst_invalid, \"No capture $invalid_name\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]