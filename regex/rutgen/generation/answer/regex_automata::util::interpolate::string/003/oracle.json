[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"foo $0 baz\";",
          "    let mut append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"BAR\");",
          "        }",
          "    };",
          "    let mut name_to_index = |_name: &str| None;",
          "    ",
          "    crate::util::interpolate::string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"foo BAR baz\");",
          "    assert!(!dst.is_empty());",
          "    assert!(dst.contains(\"BAR\"));",
          "    assert_eq!(dst.len(), 12);"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"foo $0 baz\";",
          "    let mut append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"BAR\");",
          "        }",
          "    };",
          "    let mut name_to_index = |_name: &str| None;",
          "    ",
          "    crate::util::interpolate::string(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, \"foo BAR baz\");",
          "    assert!(!dst.is_empty());",
          "    assert!(dst.contains(\"BAR\"));",
          "    assert_eq!(dst.len(), 12);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"foo ${name} baz\";",
          "    let mut append = |_index: usize, _dst: &mut String| {};",
          "    let mut name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    crate::util::interpolate::string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    dst.is_empty() == false",
          "    dst == \"foo  baz\"",
          "    replacement == \"${name} baz\"",
          "    memchr(b'$', replacement.as_bytes()) == Some(0)",
          "    replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') == false",
          "    replacement.is_empty() == false"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"foo ${name} baz\";",
          "    let mut append = |_index: usize, _dst: &mut String| {};",
          "    let mut name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    crate::util::interpolate::string(replacement, append, name_to_index, &mut dst);",
          "    dst.is_empty() == false",
          "    dst == \"foo  baz\"",
          "    replacement == \"${name} baz\"",
          "    memchr(b'$', replacement.as_bytes()) == Some(0)",
          "    replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') == false",
          "    replacement.is_empty() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"start $0 middle $name end\";",
          "    let mut append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"BEGIN\");",
          "        }",
          "    };",
          "    let mut name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    crate::util::interpolate::string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"start BEGIN middle  end\");",
          "    assert_eq!(dst, \"start BEGIN middle  end\");",
          "    assert!(dst.contains(\"BEGIN\"));",
          "    assert!(!dst.contains(\"name\"));",
          "    assert_eq!(dst.len(), 25);",
          "    assert!(dst.ends_with(\"end\"));"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let replacement = \"start $0 middle $name end\";",
          "    let mut append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"BEGIN\");",
          "        }",
          "    };",
          "    let mut name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    crate::util::interpolate::string(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, \"start BEGIN middle  end\");",
          "    assert_eq!(dst, \"start BEGIN middle  end\");",
          "    assert!(dst.contains(\"BEGIN\"));",
          "    assert!(!dst.contains(\"name\"));",
          "    assert_eq!(dst.len(), 25);",
          "    assert!(dst.ends_with(\"end\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]