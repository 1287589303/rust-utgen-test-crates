[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"$0\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"VALUE0\");",
          "            }",
          "        },",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"$0\");",
          "    assert!(dst.is_empty());",
          "    assert!(dst.len() == 2);"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"$0\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"VALUE0\");",
          "            }",
          "        },",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "    assert_eq!(dst, \"$0\");",
          "    assert!(dst.is_empty());",
          "    assert!(dst.len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"$name\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"NAMED_VALUE\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"name\" {",
          "                Some(0)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"$name\");",
          "    assert_eq!(dst, \"NAMED_VALUE\");",
          "    assert_eq!(dst, \"NAMED_VALUE\");",
          "    assert!(dst.is_empty());",
          "    assert!(dst.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"$name\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"NAMED_VALUE\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"name\" {",
          "                Some(0)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "    assert_eq!(dst, \"$name\");",
          "    assert_eq!(dst, \"NAMED_VALUE\");",
          "    assert_eq!(dst, \"NAMED_VALUE\");",
          "    assert!(dst.is_empty());",
          "    assert!(dst.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"Start $0 middle $name end\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"FIRST\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"name\" {",
          "                Some(0)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(\"Start FIRST middle FIRST end\", dst);",
          "    assert!(dst.contains(\"FIRST\"));",
          "    assert!(dst.contains(\"middle\"));",
          "    assert!(dst.contains(\"end\"));",
          "    assert!(!dst.contains(\"$\"));"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"Start $0 middle $name end\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"FIRST\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"name\" {",
          "                Some(0)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "    assert_eq!(\"Start FIRST middle FIRST end\", dst);",
          "    assert!(dst.contains(\"FIRST\"));",
          "    assert!(dst.contains(\"middle\"));",
          "    assert!(dst.contains(\"end\"));",
          "    assert!(!dst.contains(\"$\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"Hello $xyz\",",
          "        |index, dst| {},",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    dst.is_empty() == true",
          "    dst == \"Hello $xyz\"",
          "    assert_eq!(dst, \"Hello $xyz\");",
          "    dst == \"Hello $xyz\""
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"Hello $xyz\",",
          "        |index, dst| {},",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "    dst.is_empty() == true",
          "    dst == \"Hello $xyz\"",
          "    assert_eq!(dst, \"Hello $xyz\");",
          "    dst == \"Hello $xyz\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"Value $$ is a thing\",",
          "        |index, dst| {},",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(\"Value $ is a thing\", dst);"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    crate::util::interpolate::string(",
          "        \"Value $$ is a thing\",",
          "        |index, dst| {},",
          "        |name| None,",
          "        &mut dst,",
          "    );",
          "    assert_eq!(\"Value $ is a thing\", dst);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]