[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let mut replacement = \"Hello $0 World\";",
          "",
          "    let append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"CapturedValue\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"0\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"Hello CapturedValue World\");",
          "    assert!(!replacement.is_empty());",
          "    assert_eq!(memchr(b'$', replacement.as_bytes()), Some(6));",
          "    assert!(!replacement.as_bytes().get(1).map_or(false, |&b| b == b'$'));",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(i) if i == 0));",
          "    assert!(replacement.is_empty());"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let mut replacement = \"Hello $0 World\";",
          "",
          "    let append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"CapturedValue\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"0\" {",
          "            Some(0)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, \"Hello CapturedValue World\");",
          "    assert!(!replacement.is_empty());",
          "    assert_eq!(memchr(b'$', replacement.as_bytes()), Some(6));",
          "    assert!(!replacement.as_bytes().get(1).map_or(false, |&b| b == b'$'));",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(i) if i == 0));",
          "    assert!(replacement.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let mut replacement = \"Hello ${name} World\";",
          "",
          "    let append = |index: usize, dst: &mut String| {",
          "        if index == 1 {",
          "            dst.push_str(\"CapturedName\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"Hello CapturedName World\");",
          "    assert!(!replacement.is_empty());",
          "    assert_eq!(memchr(b'$', replacement.as_bytes()), Some(0));",
          "    assert!(!replacement.as_bytes().get(1).map_or(false, |&b| b == b'$'));",
          "    assert!(!replacement.is_empty());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(_)));",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(_)));",
          "    assert!(replacement.is_empty());"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let mut replacement = \"Hello ${name} World\";",
          "",
          "    let append = |index: usize, dst: &mut String| {",
          "        if index == 1 {",
          "            dst.push_str(\"CapturedName\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        if name == \"name\" {",
          "            Some(1)",
          "        } else {",
          "            None",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, \"Hello CapturedName World\");",
          "    assert!(!replacement.is_empty());",
          "    assert_eq!(memchr(b'$', replacement.as_bytes()), Some(0));",
          "    assert!(!replacement.as_bytes().get(1).map_or(false, |&b| b == b'$'));",
          "    assert!(!replacement.is_empty());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(_)));",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(_)));",
          "    assert!(replacement.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let mut replacement = \"Value: $0 and Name: ${name}\";",
          "",
          "    let append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"ValueCaptured\");",
          "        } else if index == 1 {",
          "            dst.push_str(\"NameCaptured\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        match name {",
          "            \"0\" => Some(0),",
          "            \"name\" => Some(1),",
          "            _ => None,",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"Value: ValueCaptured and Name: NameCaptured\");",
          "    assert!(!replacement.is_empty());",
          "    assert_eq!(memchr(b'$', replacement.as_bytes()).is_some(), true);",
          "    assert_eq!(replacement.as_bytes().get(1).map_or(false, |&b| b == b'$'), false);",
          "    assert!(!replacement.is_empty());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(_)));",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(_)));",
          "    assert!(replacement.is_empty());"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let mut replacement = \"Value: $0 and Name: ${name}\";",
          "",
          "    let append = |index: usize, dst: &mut String| {",
          "        if index == 0 {",
          "            dst.push_str(\"ValueCaptured\");",
          "        } else if index == 1 {",
          "            dst.push_str(\"NameCaptured\");",
          "        }",
          "    };",
          "",
          "    let name_to_index = |name: &str| {",
          "        match name {",
          "            \"0\" => Some(0),",
          "            \"name\" => Some(1),",
          "            _ => None,",
          "        }",
          "    };",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, \"Value: ValueCaptured and Name: NameCaptured\");",
          "    assert!(!replacement.is_empty());",
          "    assert_eq!(memchr(b'$', replacement.as_bytes()).is_some(), true);",
          "    assert_eq!(replacement.as_bytes().get(1).map_or(false, |&b| b == b'$'), false);",
          "    assert!(!replacement.is_empty());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_some());",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(_)));",
          "    assert!(matches!(find_cap_ref(replacement.as_bytes()).unwrap().cap, Ref::Number(_)));",
          "    assert!(replacement.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    let mut replacement = \"Hello World\";",
          "",
          "    let append = |index: usize, dst: &mut String| {",
          "        dst.push_str(\"ShouldNotAppend\");",
          "    };",
          "",
          "    let name_to_index = |_name: &str| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"Hello World\");",
          "    assert!(dst.contains(\"ShouldNotAppend\") == false);",
          "    assert!(replacement.is_empty() == true);",
          "    assert!(memchr(b'$', replacement.as_bytes()).is_none());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_none());"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    let mut replacement = \"Hello World\";",
          "",
          "    let append = |index: usize, dst: &mut String| {",
          "        dst.push_str(\"ShouldNotAppend\");",
          "    };",
          "",
          "    let name_to_index = |_name: &str| None;",
          "",
          "    string(replacement, append, name_to_index, &mut dst);",
          "    assert_eq!(dst, \"Hello World\");",
          "    assert!(dst.contains(\"ShouldNotAppend\") == false);",
          "    assert!(replacement.is_empty() == true);",
          "    assert!(memchr(b'$', replacement.as_bytes()).is_none());",
          "    assert!(find_cap_ref(replacement.as_bytes()).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]