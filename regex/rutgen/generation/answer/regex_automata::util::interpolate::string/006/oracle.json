[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    string(",
          "        \"foo $bar baz\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"BAR\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"bar\" {",
          "                Some(0)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.is_empty(), false);",
          "    assert_eq!(memchr(b'$', \"foo $bar baz\".as_bytes()).is_some(), true);",
          "    assert_eq!(\"foo \".to_string(), &dst[..4]);",
          "    assert_eq!(dst.contains(\"$\"), false);",
          "    assert_eq!(find_cap_ref(\"foo $bar baz\".as_bytes()).is_some(), true);",
          "    assert_eq!(find_cap_ref(\"foo $bar baz\".as_bytes()).unwrap().cap, Ref::Named(\"bar\"));",
          "    assert_eq!(name_to_index(\"bar\").is_some(), true);",
          "    assert_eq!(dst, \"foo BAR baz\");"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    string(",
          "        \"foo $bar baz\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"BAR\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"bar\" {",
          "                Some(0)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "    assert_eq!(dst.is_empty(), false);",
          "    assert_eq!(memchr(b'$', \"foo $bar baz\".as_bytes()).is_some(), true);",
          "    assert_eq!(\"foo \".to_string(), &dst[..4]);",
          "    assert_eq!(dst.contains(\"$\"), false);",
          "    assert_eq!(find_cap_ref(\"foo $bar baz\".as_bytes()).is_some(), true);",
          "    assert_eq!(find_cap_ref(\"foo $bar baz\".as_bytes()).unwrap().cap, Ref::Named(\"bar\"));",
          "    assert_eq!(name_to_index(\"bar\").is_some(), true);",
          "    assert_eq!(dst, \"foo BAR baz\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    string(",
          "        \"Hello $name, welcome to $place.\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"Alice\");",
          "            } else if index == 1 {",
          "                dst.push_str(\"Wonderland\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"name\" {",
          "                Some(0)",
          "            } else if name == \"place\" {",
          "                Some(1)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    dst.push_str(\"Hello \");",
          "    assert_eq!(dst, \"Hello \");",
          "    dst.push_str(\"Alice\");",
          "    assert_eq!(dst, \"Hello Alice\");",
          "    dst.push_str(\", welcome to \");",
          "    assert_eq!(dst, \"Hello Alice, welcome to \");",
          "    dst.push_str(\"Wonderland\");",
          "    assert_eq!(dst, \"Hello Alice, welcome to Wonderland.\");",
          "    dst.push_str(\".\");",
          "    assert_eq!(dst, \"Hello Alice, welcome to Wonderland.\");"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    string(",
          "        \"Hello $name, welcome to $place.\",",
          "        |index, dst| {",
          "            if index == 0 {",
          "                dst.push_str(\"Alice\");",
          "            } else if index == 1 {",
          "                dst.push_str(\"Wonderland\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"name\" {",
          "                Some(0)",
          "            } else if name == \"place\" {",
          "                Some(1)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "    dst.push_str(\"Hello \");",
          "    assert_eq!(dst, \"Hello \");",
          "    dst.push_str(\"Alice\");",
          "    assert_eq!(dst, \"Hello Alice\");",
          "    dst.push_str(\", welcome to \");",
          "    assert_eq!(dst, \"Hello Alice, welcome to \");",
          "    dst.push_str(\"Wonderland\");",
          "    assert_eq!(dst, \"Hello Alice, welcome to Wonderland.\");",
          "    dst.push_str(\".\");",
          "    assert_eq!(dst, \"Hello Alice, welcome to Wonderland.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = String::new();",
          "    string(",
          "        \"This is a test for $nonexistent and $valid.\",",
          "        |index, dst| {",
          "            if index == 1 {",
          "                dst.push_str(\"VALID\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"valid\" {",
          "                Some(1)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, \"This is a test for $nonexistent and VALID.\");",
          "    assert!(dst.contains(\"$nonexistent\"));",
          "    assert!(!dst.contains(\"$valid\"));",
          "    assert_eq!(dst.len(), 43);",
          "    assert!(dst.starts_with(\"This is a test for \"));",
          "    assert!(dst.ends_with(\".\"));",
          "    assert!(dst.contains(\" and \"));"
        ],
        "code": [
          "{",
          "    let mut dst = String::new();",
          "    string(",
          "        \"This is a test for $nonexistent and $valid.\",",
          "        |index, dst| {",
          "            if index == 1 {",
          "                dst.push_str(\"VALID\");",
          "            }",
          "        },",
          "        |name| {",
          "            if name == \"valid\" {",
          "                Some(1)",
          "            } else {",
          "                None",
          "            }",
          "        },",
          "        &mut dst,",
          "    );",
          "    assert_eq!(dst, \"This is a test for $nonexistent and VALID.\");",
          "    assert!(dst.contains(\"$nonexistent\"));",
          "    assert!(!dst.contains(\"$valid\"));",
          "    assert_eq!(dst.len(), 43);",
          "    assert!(dst.starts_with(\"This is a test for \"));",
          "    assert!(dst.ends_with(\".\"));",
          "    assert!(dst.contains(\" and \"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]