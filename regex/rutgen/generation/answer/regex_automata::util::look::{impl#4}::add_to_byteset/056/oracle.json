[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let look_matcher = LookMatcher::new();",
          "    let look = Look::WordStartAscii;",
          "",
          "    look_matcher.add_to_byteset(look, &mut set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.byte_classes(), expected_byte_classes);",
          "    assert!(set.is_non_empty());",
          "    assert!(set.contains_range(0, 0));",
          "    assert!(set.contains_range(1, 255));",
          "    assert!(set.contains_range(256, 256) == false);"
        ],
        "code": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let look_matcher = LookMatcher::new();",
          "    let look = Look::WordStartAscii;",
          "",
          "    look_matcher.add_to_byteset(look, &mut set);",
          "    assert_eq!(set.byte_classes(), expected_byte_classes);",
          "    assert!(set.is_non_empty());",
          "    assert!(set.contains_range(0, 0));",
          "    assert!(set.contains_range(1, 255));",
          "    assert!(set.contains_range(256, 256) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let look_matcher = LookMatcher::new();",
          "    let look = Look::WordStartAscii;",
          "",
          "    look_matcher.add_to_byteset(look, &mut set);",
          "}"
        ],
        "oracle": [
          "    assert!(set.byte_classes().is_empty());"
        ],
        "code": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let look_matcher = LookMatcher::new();",
          "    let look = Look::WordStartAscii;",
          "",
          "    look_matcher.add_to_byteset(look, &mut set);",
          "    assert!(set.byte_classes().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]