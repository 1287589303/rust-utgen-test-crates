[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let set = &mut ByteClassSet::empty();",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.byte_classes(), expected_byte_classes);",
          "    assert!(set.is_empty());",
          "    assert!(matcher.get_line_terminator() == 0);",
          "    assert!(matcher.matches(Look::WordEndHalfAscii, b\"example\", 6));",
          "    assert!(!matcher.matches(Look::WordEndHalfAscii, b\"example \", 7));",
          "    assert!(matcher.matches(Look::WordEndHalfAscii, b\" \", 0));",
          "    assert!(set.0 == ByteSet::empty());",
          "    assert!(matcher.is_word_end_half_ascii(b\"example\", 7));",
          "    assert!(!matcher.is_word_end_half_ascii(b\"example\", 6));"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let set = &mut ByteClassSet::empty();",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "    assert_eq!(set.byte_classes(), expected_byte_classes);",
          "    assert!(set.is_empty());",
          "    assert!(matcher.get_line_terminator() == 0);",
          "    assert!(matcher.matches(Look::WordEndHalfAscii, b\"example\", 6));",
          "    assert!(!matcher.matches(Look::WordEndHalfAscii, b\"example \", 7));",
          "    assert!(matcher.matches(Look::WordEndHalfAscii, b\" \", 0));",
          "    assert!(set.0 == ByteSet::empty());",
          "    assert!(matcher.is_word_end_half_ascii(b\"example\", 7));",
          "    assert!(!matcher.is_word_end_half_ascii(b\"example\", 6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let set = &mut ByteClassSet::empty();",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "}"
        ],
        "oracle": [
          "    assert!(matcher.get_line_terminator() == 0);",
          "    assert!(set.byte_classes().is_empty());",
          "    matcher.set_line_terminator(0);",
          "    assert!(set.byte_classes().is_empty());",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "    assert!(set.byte_classes().is_empty());",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "    assert!(set.byte_classes().is_empty());"
        ],
        "code": [
          "{",
          "    let mut matcher = LookMatcher::new();",
          "    let set = &mut ByteClassSet::empty();",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "    assert!(matcher.get_line_terminator() == 0);",
          "    assert!(set.byte_classes().is_empty());",
          "    matcher.set_line_terminator(0);",
          "    assert!(set.byte_classes().is_empty());",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "    assert!(set.byte_classes().is_empty());",
          "    matcher.add_to_byteset(Look::WordEndHalfAscii, set);",
          "    assert!(set.byte_classes().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]