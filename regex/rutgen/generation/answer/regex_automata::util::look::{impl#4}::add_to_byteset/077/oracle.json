[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_class_set = {",
          "        #[cfg(feature = \"alloc\")]",
          "        {",
          "            crate::util::alphabet::ByteClassSet::empty()",
          "        }",
          "    };",
          "    let look = Look::WordAsciiNegate;",
          "    let look_matcher = LookMatcher::new();",
          "",
          "    look_matcher.add_to_byteset(look, &mut byte_class_set);",
          "}"
        ],
        "oracle": [
          "    assert!(byte_class_set.is_empty());",
          "    assert_eq!(look_matcher.lineterm.0, 0);",
          "    assert!(look_matcher.matches(look, b\"example\", 0));",
          "    assert_eq!(look_matcher.get_line_terminator(), 0);"
        ],
        "code": [
          "{",
          "    let mut byte_class_set = {",
          "        #[cfg(feature = \"alloc\")]",
          "        {",
          "            crate::util::alphabet::ByteClassSet::empty()",
          "        }",
          "    };",
          "    let look = Look::WordAsciiNegate;",
          "    let look_matcher = LookMatcher::new();",
          "",
          "    look_matcher.add_to_byteset(look, &mut byte_class_set);",
          "    assert!(byte_class_set.is_empty());",
          "    assert_eq!(look_matcher.lineterm.0, 0);",
          "    assert!(look_matcher.matches(look, b\"example\", 0));",
          "    assert_eq!(look_matcher.get_line_terminator(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut byte_class_set = {",
          "        #[cfg(feature = \"alloc\")]",
          "        {",
          "            crate::util::alphabet::ByteClassSet::empty()",
          "        }",
          "    };",
          "    let look = Look::WordAsciiNegate;",
          "    let look_matcher = LookMatcher::new();",
          "",
          "    look_matcher.add_to_byteset(look, &mut byte_class_set);",
          "    // This call is expected to run without panic, covering the `b1 <= 255` condition",
          "}"
        ],
        "oracle": [
          "    let mut byte_class_set = crate::util::alphabet::ByteClassSet::empty();",
          "    let look = Look::WordAsciiNegate;",
          "    let look_matcher = LookMatcher::new();",
          "    look_matcher.add_to_byteset(look, &mut byte_class_set);",
          "    assert!(true);"
        ],
        "code": [
          "{",
          "    let mut byte_class_set = {",
          "        #[cfg(feature = \"alloc\")]",
          "        {",
          "            crate::util::alphabet::ByteClassSet::empty()",
          "        }",
          "    };",
          "    let look = Look::WordAsciiNegate;",
          "    let look_matcher = LookMatcher::new();",
          "",
          "    look_matcher.add_to_byteset(look, &mut byte_class_set);",
          "    // This call is expected to run without panic, covering the `b1 <= 255` condition",
          "    let mut byte_class_set = crate::util::alphabet::ByteClassSet::empty();",
          "    let look = Look::WordAsciiNegate;",
          "    let look_matcher = LookMatcher::new();",
          "    look_matcher.add_to_byteset(look, &mut byte_class_set);",
          "    assert!(true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]