[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let lineterm = DebugByte(0);",
          "    let matcher = LookMatcher { lineterm };",
          "",
          "    matcher.add_to_byteset(Look::Start, &mut set);",
          "}"
        ],
        "oracle": [
          "    set.set_range(0, 0);",
          "    assert_eq!(set, expected_set_for_start);",
          "    matcher.add_to_byteset(Look::End, &mut set);",
          "    set.set_range(0, 0);",
          "    assert_eq!(set, expected_set_for_end);"
        ],
        "code": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let lineterm = DebugByte(0);",
          "    let matcher = LookMatcher { lineterm };",
          "",
          "    matcher.add_to_byteset(Look::Start, &mut set);",
          "    set.set_range(0, 0);",
          "    assert_eq!(set, expected_set_for_start);",
          "    matcher.add_to_byteset(Look::End, &mut set);",
          "    set.set_range(0, 0);",
          "    assert_eq!(set, expected_set_for_end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let lineterm = DebugByte(255);",
          "    let matcher = LookMatcher { lineterm };",
          "",
          "    matcher.add_to_byteset(Look::End, &mut set);",
          "}"
        ],
        "oracle": [
          "    set.set_range(255, 255);",
          "    set.set_range(b'\\r', b'\\r');",
          "    set.set_range(b'\\n', b'\\n');"
        ],
        "code": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let lineterm = DebugByte(255);",
          "    let matcher = LookMatcher { lineterm };",
          "",
          "    matcher.add_to_byteset(Look::End, &mut set);",
          "    set.set_range(255, 255);",
          "    set.set_range(b'\\r', b'\\r');",
          "    set.set_range(b'\\n', b'\\n');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let lineterm = DebugByte(128);",
          "    let matcher = LookMatcher { lineterm };",
          "",
          "    matcher.add_to_byteset(Look::Start, &mut set);",
          "}"
        ],
        "oracle": [
          "    set.set_range(128, 128);",
          "    set.set_range(b'\\r', b'\\r');",
          "    set.set_range(b'\\n', b'\\n');",
          "    set.set_range(0, 0);",
          "    assert!(set.0.contains(128));"
        ],
        "code": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let lineterm = DebugByte(128);",
          "    let matcher = LookMatcher { lineterm };",
          "",
          "    matcher.add_to_byteset(Look::Start, &mut set);",
          "    set.set_range(128, 128);",
          "    set.set_range(b'\\r', b'\\r');",
          "    set.set_range(b'\\n', b'\\n');",
          "    set.set_range(0, 0);",
          "    assert!(set.0.contains(128));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let lineterm = DebugByte(64);",
          "    let matcher = LookMatcher { lineterm };",
          "",
          "    matcher.add_to_byteset(Look::End, &mut set);",
          "}"
        ],
        "oracle": [
          "    assert!(set.0.is_empty());",
          "    matcher.add_to_byteset(Look::Start, &mut set);",
          "    assert_eq!(set.0.byte_classes(), expected_byte_classes_for_start);",
          "    assert_eq!(set.0.byte_classes(), expected_byte_classes_for_end);"
        ],
        "code": [
          "{",
          "    let mut set = crate::util::alphabet::ByteClassSet::empty();",
          "    let lineterm = DebugByte(64);",
          "    let matcher = LookMatcher { lineterm };",
          "",
          "    matcher.add_to_byteset(Look::End, &mut set);",
          "    assert!(set.0.is_empty());",
          "    matcher.add_to_byteset(Look::Start, &mut set);",
          "    assert_eq!(set.0.byte_classes(), expected_byte_classes_for_start);",
          "    assert_eq!(set.0.byte_classes(), expected_byte_classes_for_end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]