[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"[^-&]\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.err().unwrap().msg, ERR_CLASS_UNCLOSED_AFTER_ITEM);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);"
        ],
        "code": [
          "{",
          "    let pattern = \"[^-&]\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.err().unwrap().msg, ERR_CLASS_UNCLOSED_AFTER_ITEM);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.flags.borrow().case_insensitive, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"[-&]\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.err().unwrap().msg, ERR_CLASS_DIFFERENCE_UNSUPPORTED);",
          "    assert_eq!(parser.pos.get(), 3);",
          "    assert_eq!(parser.char.get(), Some(']'));",
          "    parser.bump_space();",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.bump_and_bump_space(), true);",
          "    assert_eq!(parser.char.get(), Some('-'));"
        ],
        "code": [
          "{",
          "    let pattern = \"[-&]\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.err().unwrap().msg, ERR_CLASS_DIFFERENCE_UNSUPPORTED);",
          "    assert_eq!(parser.pos.get(), 3);",
          "    assert_eq!(parser.char.get(), Some(']'));",
          "    parser.bump_space();",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.bump_and_bump_space(), true);",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"-----&&&\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_DASH);",
          "    assert_eq!(parser.pos.get(), 6);",
          "    assert_eq!(parser.char.get(), Some('&'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let pattern = \"-----&&&\";",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_DASH);",
          "    assert_eq!(parser.pos.get(), 6);",
          "    assert_eq!(parser.char.get(), Some('&'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]