[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[---]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '[');",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(!self.char() != '^');",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(self.char() == '-');",
          "    assert!(union.is_empty());",
          "    assert!(self.char() != ']');",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(!self.is_done());",
          "    assert!(self.char() == '&');",
          "    assert!(self.char() == '[');",
          "    assert!(self.char() == '-');",
          "    assert!(self.char() == '~');",
          "    assert!(self.char() == ']');",
          "    assert!(self.parse_class_range(&mut union).is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[---]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "    assert_eq!(self.char(), '[');",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(!self.char() != '^');",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(self.char() == '-');",
          "    assert!(union.is_empty());",
          "    assert!(self.char() != ']');",
          "    assert!(self.bump_and_bump_space());",
          "    assert!(!self.is_done());",
          "    assert!(self.char() == '&');",
          "    assert!(self.char() == '[');",
          "    assert!(self.char() == '-');",
          "    assert!(self.char() == '~');",
          "    assert!(self.char() == ']');",
          "    assert!(self.parse_class_range(&mut union).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[^x&]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[^x&]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), &HirKind::Class(Class { ranges: /* expected ranges */ }));",
          "    assert_eq!(parser.pos.get(), /* expected position after parsing */);",
          "    assert!(parser.char.get().is_none());"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[^x&]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[^x&]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!(hir.kind(), &HirKind::Class(Class { ranges: /* expected ranges */ }));",
          "    assert_eq!(parser.pos.get(), /* expected position after parsing */);",
          "    assert!(parser.char.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[[:digit:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.char.get() != Some('^'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.char.get() == Some('-'));",
          "    assert!(union.is_empty());",
          "    assert!(parser.char.get() != Some(']'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(!parser.is_done());",
          "    assert!(parser.char.get() == Some('&'));",
          "    assert!(parser.char.get() == Some('['));",
          "    assert!(parser.char.get() == Some('-'));",
          "    assert!(parser.char.get() == Some('~'));",
          "    assert!(parser.char.get() == Some(']'));",
          "    assert!(parser.parse_class_range(&mut union).is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[[:digit:]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.char.get() != Some('^'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.char.get() == Some('-'));",
          "    assert!(union.is_empty());",
          "    assert!(parser.char.get() != Some(']'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(!parser.is_done());",
          "    assert!(parser.char.get() == Some('&'));",
          "    assert!(parser.char.get() == Some('['));",
          "    assert!(parser.char.get() == Some('-'));",
          "    assert!(parser.char.get() == Some('~'));",
          "    assert!(parser.char.get() == Some(']'));",
          "    assert!(parser.parse_class_range(&mut union).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[[abc]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.char.get() != Some('^'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "    assert!(parser.union.is_empty());",
          "    assert!(parser.char.get() != Some(']'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char.get(), Some('&'));",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "    assert_eq!(parser.char.get(), Some('~'));",
          "    assert_eq!(parser.char.get(), Some(']'));",
          "    assert!(parser.parse_class_range(&mut parser.union).is_err());"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[[abc]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(parser.char.get() != Some('^'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "    assert!(parser.union.is_empty());",
          "    assert!(parser.char.get() != Some(']'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char.get(), Some('&'));",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "    assert_eq!(parser.char.get(), Some('~'));",
          "    assert_eq!(parser.char.get(), Some(']'));",
          "    assert!(parser.parse_class_range(&mut parser.union).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[--~]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '[');",
          "    self.bump_and_bump_space();",
          "    assert_eq!(self.char(), '^');",
          "    self.bump_and_bump_space();",
          "    assert_eq!(self.char(), '-');",
          "    assert!(union.is_empty());",
          "    assert_ne!(self.char(), ']');",
          "    self.bump_and_bump_space();",
          "    assert!(!self.is_done());",
          "    assert_eq!(self.char(), '&');",
          "    if let Some(class) = self.maybe_parse_posix_class() {",
          "    // Handle successful POSIX class parsing",
          "    } else {",
          "    return Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED));",
          "    }",
          "    assert_eq!(self.char(), '-');",
          "    assert_eq!(self.char(), '~');",
          "    assert_eq!(self.char(), ']');",
          "    self.parse_class_range(&mut union).is_err();"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: Some(10) };",
          "    let pattern = \"[--~]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_class();",
          "    assert_eq!(self.char(), '[');",
          "    self.bump_and_bump_space();",
          "    assert_eq!(self.char(), '^');",
          "    self.bump_and_bump_space();",
          "    assert_eq!(self.char(), '-');",
          "    assert!(union.is_empty());",
          "    assert_ne!(self.char(), ']');",
          "    self.bump_and_bump_space();",
          "    assert!(!self.is_done());",
          "    assert_eq!(self.char(), '&');",
          "    if let Some(class) = self.maybe_parse_posix_class() {",
          "    // Handle successful POSIX class parsing",
          "    } else {",
          "    return Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED));",
          "    }",
          "    assert_eq!(self.char(), '-');",
          "    assert_eq!(self.char(), '~');",
          "    assert_eq!(self.char(), ']');",
          "    self.parse_class_range(&mut union).is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]