[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[[abc]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED)));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[[abc]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let result = parser.parse_class();",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[^abc]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags { case_insensitive: true, ..Flags::default() }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[^abc]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags { case_insensitive: true, ..Flags::default() }), capture_names: RefCell::new(vec![]), };",
          "    let _ = parser.bump_and_bump_space();",
          "    let _ = parser.char.set(Some('^'));",
          "    let _ = parser.bump_and_bump_space();",
          "    let _ = parser.char.set(Some('-'));",
          "    let _ = parser.union.push(hir::ClassRange { start: ']', end: ']' });",
          "    let result = parser.parse_class();",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED)));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[^abc]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags { case_insensitive: true, ..Flags::default() }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_class();",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[^abc]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags { case_insensitive: true, ..Flags::default() }), capture_names: RefCell::new(vec![]), };",
          "    let _ = parser.bump_and_bump_space();",
          "    let _ = parser.char.set(Some('^'));",
          "    let _ = parser.bump_and_bump_space();",
          "    let _ = parser.char.set(Some('-'));",
          "    let _ = parser.union.push(hir::ClassRange { start: ']', end: ']' });",
          "    let result = parser.parse_class();",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_NEST_UNSUPPORTED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[-abc]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[-abc]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), };",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('^'));",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('-'));",
          "    parser.bump_and_bump_space();",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some(']'));",
          "    parser.is_done();",
          "    parser.char.set(Some('['));",
          "    assert!(matches!(parser.parse_class(), Err(Error { msg: ERR_CLASS_NEST_UNSUPPORTED })));"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[-abc]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let result = parser.parse_class();",
          "    let config = Config { size_limit: None };",
          "    let pattern = \"[-abc]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('[')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]), };",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('^'));",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('-'));",
          "    parser.bump_and_bump_space();",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some(']'));",
          "    parser.is_done();",
          "    parser.char.set(Some('['));",
          "    assert!(matches!(parser.parse_class(), Err(Error { msg: ERR_CLASS_NEST_UNSUPPORTED })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]