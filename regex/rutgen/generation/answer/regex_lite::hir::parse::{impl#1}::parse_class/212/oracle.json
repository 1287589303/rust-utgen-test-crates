[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let pattern = \"[--]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('-')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"[--]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('-')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!( hir.kind(), &HirKind::Class(hir::Class::new(vec![hir::ClassRange {start: '-', end: '-'}])));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let pattern = \"[--]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('-')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.parse_class();",
          "    let config = Config { size_limit: None, nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"[--]\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(Some('-')), capture_index: Cell::new(0), flags: RefCell::new(Flags::default()), capture_names: RefCell::new(vec![]) };",
          "    let result = parser.parse_class();",
          "    assert!(result.is_ok());",
          "    let hir = result.unwrap();",
          "    assert_eq!( hir.kind(), &HirKind::Class(hir::Class::new(vec![hir::ClassRange {start: '-', end: '-'}])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let pattern = \"[a-z-]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    let class = _result.unwrap();",
          "    assert_eq!(class.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'z' }, ClassRange { start: '-', end: '-' }] }));",
          "    assert_eq!(class.is_start_anchored(), false);",
          "    assert_eq!(class.is_match_empty(), false);",
          "    assert_eq!(class.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let pattern = \"[a-z-]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('a')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_ok(), true);",
          "    let class = _result.unwrap();",
          "    assert_eq!(class.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'z' }, ClassRange { start: '-', end: '-' }] }));",
          "    assert_eq!(class.is_start_anchored(), false);",
          "    assert_eq!(class.is_match_empty(), false);",
          "    assert_eq!(class.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let pattern = \"[-]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('-')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    Error::new(ERR_CLASS_UNCLOSED) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_UNCLOSED_AFTER_NEGATION) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_UNCLOSED_AFTER_DASH) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_UNCLOSED_AFTER_CLOSING) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_NEST_UNSUPPORTED) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_INTERSECTION_UNSUPPORTED) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_DIFFERENCE_UNSUPPORTED) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_SYMDIFFERENCE_UNSUPPORTED) == parser.parse_class().unwrap_err()"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let pattern = \"[-]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('-')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.parse_class();",
          "    Error::new(ERR_CLASS_UNCLOSED) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_UNCLOSED_AFTER_NEGATION) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_UNCLOSED_AFTER_DASH) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_UNCLOSED_AFTER_CLOSING) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_NEST_UNSUPPORTED) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_INTERSECTION_UNSUPPORTED) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_DIFFERENCE_UNSUPPORTED) == parser.parse_class().unwrap_err()",
          "    Error::new(ERR_CLASS_SYMDIFFERENCE_UNSUPPORTED) == parser.parse_class().unwrap_err()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let pattern = \"[-a-]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('-')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_DASH);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(!parser.flags.borrow().case_insensitive);",
          "    assert!(!parser.is_done());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        size_limit: None,",
          "        nest_limit: 10,",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let pattern = \"[-a-]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('-')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_DASH);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('-'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(!parser.flags.borrow().case_insensitive);",
          "    assert!(!parser.is_done());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]