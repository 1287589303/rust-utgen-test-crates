[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = {",
          "        let config = Config {",
          "            size_limit: None,",
          "        };",
          "",
          "        let pattern = \"[&--]\";",
          "        let depth = Cell::new(0);",
          "        let pos = Cell::new(0);",
          "        let char = Cell::new(Some('['));",
          "        let capture_index = Cell::new(0);",
          "        let flags = RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        });",
          "        let capture_names = RefCell::new(vec![]);",
          "        Parser {",
          "            config,",
          "            pattern,",
          "            depth,",
          "            pos,",
          "            char,",
          "            capture_index,",
          "            flags,",
          "            capture_names,",
          "        }",
          "    };",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('-'));",
          "    let union = vec!['-', '-'];",
          "    parser.bump_space();",
          "    parser.char.set(Some('&'));",
          "    parser.peek = Some('&');",
          "",
          "    let _ = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('-'));",
          "    let union = vec!['-', '-'];",
          "    parser.bump_space();",
          "    parser.char.set(Some('&'));",
          "    parser.peek = Some('&');",
          "    let result = parser.parse_class();",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INTERSECTION_UNSUPPORTED)));"
        ],
        "code": [
          "{",
          "    let parser = {",
          "        let config = Config {",
          "            size_limit: None,",
          "        };",
          "",
          "        let pattern = \"[&--]\";",
          "        let depth = Cell::new(0);",
          "        let pos = Cell::new(0);",
          "        let char = Cell::new(Some('['));",
          "        let capture_index = Cell::new(0);",
          "        let flags = RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        });",
          "        let capture_names = RefCell::new(vec![]);",
          "        Parser {",
          "            config,",
          "            pattern,",
          "            depth,",
          "            pos,",
          "            char,",
          "            capture_index,",
          "            flags,",
          "            capture_names,",
          "        }",
          "    };",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('-'));",
          "    let union = vec!['-', '-'];",
          "    parser.bump_space();",
          "    parser.char.set(Some('&'));",
          "    parser.peek = Some('&');",
          "",
          "    let _ = parser.parse_class();",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('-'));",
          "    let union = vec!['-', '-'];",
          "    parser.bump_space();",
          "    parser.char.set(Some('&'));",
          "    parser.peek = Some('&');",
          "    let result = parser.parse_class();",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INTERSECTION_UNSUPPORTED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = {",
          "        let config = Config {",
          "            size_limit: None,",
          "        };",
          "",
          "        let pattern = \"[^&--]\";",
          "        let depth = Cell::new(0);",
          "        let pos = Cell::new(0);",
          "        let char = Cell::new(Some('['));",
          "        let capture_index = Cell::new(0);",
          "        let flags = RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        });",
          "        let capture_names = RefCell::new(vec![]);",
          "        Parser {",
          "            config,",
          "            pattern,",
          "            depth,",
          "            pos,",
          "            char,",
          "            capture_index,",
          "            flags,",
          "            capture_names,",
          "        }",
          "    };",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('^'));",
          "    parser.bump_and_bump_space();",
          "    let union = vec!['-', '-'];",
          "    parser.bump_space();",
          "    parser.char.set(Some('&'));",
          "    parser.peek = Some('&');",
          "",
          "    let _ = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    let parser = Parser::new(Config { size_limit: None }, \"[^&--]\");",
          "    assert_eq!(parser.bump_and_bump_space(), true);",
          "    assert_eq!(parser.char(), Some('^'));",
          "    assert_eq!(parser.bump_and_bump_space(), true);",
          "    assert_eq!(parser.char(), Some('-'));",
          "    assert!(!parser.union.is_empty());",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.char(), Some('&'));",
          "    assert_eq!(parser.peek(), Some('&'));",
          "    let result = parser.parse_class();",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INTERSECTION_UNSUPPORTED)));"
        ],
        "code": [
          "{",
          "    let parser = {",
          "        let config = Config {",
          "            size_limit: None,",
          "        };",
          "",
          "        let pattern = \"[^&--]\";",
          "        let depth = Cell::new(0);",
          "        let pos = Cell::new(0);",
          "        let char = Cell::new(Some('['));",
          "        let capture_index = Cell::new(0);",
          "        let flags = RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: false,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        });",
          "        let capture_names = RefCell::new(vec![]);",
          "        Parser {",
          "            config,",
          "            pattern,",
          "            depth,",
          "            pos,",
          "            char,",
          "            capture_index,",
          "            flags,",
          "            capture_names,",
          "        }",
          "    };",
          "    parser.bump_and_bump_space();",
          "    parser.char.set(Some('^'));",
          "    parser.bump_and_bump_space();",
          "    let union = vec!['-', '-'];",
          "    parser.bump_space();",
          "    parser.char.set(Some('&'));",
          "    parser.peek = Some('&');",
          "",
          "    let _ = parser.parse_class();",
          "    let parser = Parser::new(Config { size_limit: None }, \"[^&--]\");",
          "    assert_eq!(parser.bump_and_bump_space(), true);",
          "    assert_eq!(parser.char(), Some('^'));",
          "    assert_eq!(parser.bump_and_bump_space(), true);",
          "    assert_eq!(parser.char(), Some('-'));",
          "    assert!(!parser.union.is_empty());",
          "    assert_eq!(parser.is_done(), false);",
          "    assert_eq!(parser.char(), Some('&'));",
          "    assert_eq!(parser.peek(), Some('&'));",
          "    let result = parser.parse_class();",
          "    assert_eq!(result, Err(Error::new(ERR_CLASS_INTERSECTION_UNSUPPORTED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]