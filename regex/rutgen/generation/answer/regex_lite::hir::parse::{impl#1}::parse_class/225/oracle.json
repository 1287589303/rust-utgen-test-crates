[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[a-zA-Z]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap().kind(), HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'z' }, ClassRange { start: 'A', end: 'Z' }] }));",
          "    assert_eq!(parser.pos.get(), pattern.len());",
          "    assert_eq!(parser.char.get(), None);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[a-zA-Z]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_ok(), true);",
          "    assert_eq!(_result.unwrap().kind(), HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'z' }, ClassRange { start: 'A', end: 'Z' }] }));",
          "    assert_eq!(parser.pos.get(), pattern.len());",
          "    assert_eq!(parser.char.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[^a-z]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_ok(), true);",
          "    let hir = _result.unwrap();",
          "    assert_eq!(hir.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'z' }] }));",
          "    assert_eq!(parser.pos.get(), 7);",
          "    assert!(parser.char.get().is_none());",
          "    assert_eq!(parser.capture_index.get(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[^a-z]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_ok(), true);",
          "    let hir = _result.unwrap();",
          "    assert_eq!(hir.kind(), &HirKind::Class(Class { ranges: vec![ClassRange { start: 'a', end: 'z' }] }));",
          "    assert_eq!(parser.pos.get(), 7);",
          "    assert!(parser.char.get().is_none());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[^^a-z]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_NEGATION);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags().case_insensitive, false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[^^a-z]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED_AFTER_NEGATION);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags().case_insensitive, false);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[a-zA-Z&&[^]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, \"character class intersection is not supported\");"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[a-zA-Z&&[^]]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, \"character class intersection is not supported\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[a--z]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_INVALID_RANGE);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[a--z]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_INVALID_RANGE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[a-b-c]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config { size_limit: None, };",
          "    let pattern = \"[a-b-c]\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('[')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_class();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.unwrap_err().msg, ERR_CLASS_UNCLOSED);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('['));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.depth.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]