[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Writer { wtr: String::new() };",
          "    let mut visitor = writer;",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&hir).unwrap(); // for HirKind::Empty precondition, expected: Ok(())",
          "    let hir = Hir {",
          "    kind: HirKind::Literal(Literal::from('a')),",
          "    props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap(); // for HirKind::Literal, expected: Ok(())",
          "    let hir = Hir {",
          "    kind: HirKind::Class(Class::new(vec!['a', 'b'])),",
          "    props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap(); // for HirKind::Class, expected: Ok(())",
          "    let hir = Hir {",
          "    kind: HirKind::Look(Look::new()),",
          "    props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap(); // for HirKind::Look, expected: Ok(())"
        ],
        "code": [
          "{",
          "    let writer = Writer { wtr: String::new() };",
          "    let mut visitor = writer;",
          "    let hir = Hir {",
          "        kind: HirKind::Empty,",
          "        props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap();",
          "    visitor.visit_post(&hir).unwrap(); // for HirKind::Empty precondition, expected: Ok(())",
          "    let hir = Hir {",
          "    kind: HirKind::Literal(Literal::from('a')),",
          "    props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap(); // for HirKind::Literal, expected: Ok(())",
          "    let hir = Hir {",
          "    kind: HirKind::Class(Class::new(vec!['a', 'b'])),",
          "    props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap(); // for HirKind::Class, expected: Ok(())",
          "    let hir = Hir {",
          "    kind: HirKind::Look(Look::new()),",
          "    props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap(); // for HirKind::Look, expected: Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Writer { wtr: String::new() };",
          "    let mut visitor = writer;",
          "    let literal = Literal::new(\"test\");",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(literal),",
          "        props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Literal",
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Empty",
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Class",
          "    hir.kind = HirKind::Look(Look::new()); // Set kind to Look",
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Look"
        ],
        "code": [
          "{",
          "    let writer = Writer { wtr: String::new() };",
          "    let mut visitor = writer;",
          "    let literal = Literal::new(\"test\");",
          "    let hir = Hir {",
          "        kind: HirKind::Literal(literal),",
          "        props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap();",
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Literal",
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Empty",
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Class",
          "    hir.kind = HirKind::Look(Look::new()); // Set kind to Look",
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Look",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Writer { wtr: String::new() };",
          "    let mut visitor = writer;",
          "    let class = Class::new(vec!['a', 'b', 'c']);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Class(_)",
          "    let lit_hir = Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default() };",
          "    visitor.visit_post(&lit_hir).unwrap(); // Expect Ok(()) for HirKind::Literal(_)",
          "    let empty_hir = Hir { kind: HirKind::Empty, props: Properties::default() };",
          "    visitor.visit_post(&empty_hir).unwrap(); // Expect Ok(()) for HirKind::Empty",
          "    let look_hir = Hir { kind: HirKind::Look(Look::new()), props: Properties::default() };",
          "    visitor.visit_post(&look_hir).unwrap(); // Expect Ok(()) for HirKind::Look(_)",
          "    let class_hir = Hir { kind: HirKind::Class(Class::new(vec!['x', 'y', 'z'])), props: Properties::default() };",
          "    visitor.visit_post(&class_hir).unwrap(); // Expect Ok(()) for HirKind::Class(_)"
        ],
        "code": [
          "{",
          "    let writer = Writer { wtr: String::new() };",
          "    let mut visitor = writer;",
          "    let class = Class::new(vec!['a', 'b', 'c']);",
          "    let hir = Hir {",
          "        kind: HirKind::Class(class),",
          "        props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap();",
          "    visitor.visit_post(&hir).unwrap(); // Expect Ok(()) for HirKind::Class(_)",
          "    let lit_hir = Hir { kind: HirKind::Literal(Literal::new(\"abc\")), props: Properties::default() };",
          "    visitor.visit_post(&lit_hir).unwrap(); // Expect Ok(()) for HirKind::Literal(_)",
          "    let empty_hir = Hir { kind: HirKind::Empty, props: Properties::default() };",
          "    visitor.visit_post(&empty_hir).unwrap(); // Expect Ok(()) for HirKind::Empty",
          "    let look_hir = Hir { kind: HirKind::Look(Look::new()), props: Properties::default() };",
          "    visitor.visit_post(&look_hir).unwrap(); // Expect Ok(()) for HirKind::Look(_)",
          "    let class_hir = Hir { kind: HirKind::Class(Class::new(vec!['x', 'y', 'z'])), props: Properties::default() };",
          "    visitor.visit_post(&class_hir).unwrap(); // Expect Ok(()) for HirKind::Class(_)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let writer = Writer { wtr: String::new() };",
          "    let mut visitor = writer;",
          "    let look = Look::new(\"(?=test)\");",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&hir) == Ok(())",
          "    hir.kind() matches HirKind::Look(_)",
          "    hir.kind() matches HirKind::Literal(_) || HirKind::Empty || HirKind::Class(_) || HirKind::Look(_)",
          "    writer.wtr should be unchanged after visit_post()"
        ],
        "code": [
          "{",
          "    let writer = Writer { wtr: String::new() };",
          "    let mut visitor = writer;",
          "    let look = Look::new(\"(?=test)\");",
          "    let hir = Hir {",
          "        kind: HirKind::Look(look),",
          "        props: Properties::default(),",
          "    };",
          "    visitor.visit_post(&hir).unwrap();",
          "    visitor.visit_post(&hir) == Ok(())",
          "    hir.kind() matches HirKind::Look(_)",
          "    hir.kind() matches HirKind::Literal(_) || HirKind::Empty || HirKind::Class(_) || HirKind::Look(_)",
          "    writer.wtr should be unchanged after visit_post()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]