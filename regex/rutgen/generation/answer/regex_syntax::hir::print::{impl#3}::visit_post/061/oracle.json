[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        buffer: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { buffer: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: writer };",
          "    let _result = visitor.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { buffer: String::new() };",
          "    let repetition = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }), };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default(), };",
          "    let mut visitor = Writer { wtr: writer };",
          "    let _result = visitor.visit_post(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    assert_eq!(writer.buffer, \"*?\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        buffer: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { buffer: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: writer };",
          "    let _result = visitor.visit_post(&hir);",
          "    let mut writer = TestWriter { buffer: String::new() };",
          "    let repetition = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }), };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default(), };",
          "    let mut visitor = Writer { wtr: writer };",
          "    let _result = visitor.visit_post(&hir);",
          "    assert_eq!(_result, Ok(()));",
          "    assert_eq!(writer.buffer, \"*?\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        buffer: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { buffer: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: writer };",
          "    let _result = visitor.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    let mut writer = TestWriter { buffer: String::new() };",
          "    let repetition = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }), };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default(), };",
          "    let mut visitor = Writer { wtr: writer };",
          "    let result = visitor.visit_post(&hir);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(visitor.wtr.buffer, \"*?\");"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        buffer: String,",
          "    }",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.buffer.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter { buffer: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: writer };",
          "    let _result = visitor.visit_post(&hir);",
          "    let mut writer = TestWriter { buffer: String::new() };",
          "    let repetition = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }), };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default(), };",
          "    let mut visitor = Writer { wtr: writer };",
          "    let result = visitor.visit_post(&hir);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(visitor.wtr.buffer, \"*?\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]