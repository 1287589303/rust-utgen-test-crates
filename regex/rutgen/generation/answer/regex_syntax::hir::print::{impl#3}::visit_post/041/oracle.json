[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&hir); // precondition: *hir.kind() matches HirKind::Repetition(ref x) at line 257 is true",
          "    let repetition = Repetition { min: 1, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) }; // precondition: (x.min, x.max) matches (1, None) at line 264 is true",
          "    assert_eq!(writer.output, \"+\"); // precondition: self.wtr.write_str(\"+\")? at line 272 is Ok/Some",
          "    assert!(visitor.wtr.output.contains(\"?\")); // precondition: self.wtr.write_str(\"?\")? at line 291 is Ok/Some",
          "    assert!(visitor.visit_post(&hir).is_ok()); // expected return value/type: Ok(())"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_post(&hir).unwrap();",
          "    visitor.visit_post(&hir); // precondition: *hir.kind() matches HirKind::Repetition(ref x) at line 257 is true",
          "    let repetition = Repetition { min: 1, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) }; // precondition: (x.min, x.max) matches (1, None) at line 264 is true",
          "    assert_eq!(writer.output, \"+\"); // precondition: self.wtr.write_str(\"+\")? at line 272 is Ok/Some",
          "    assert!(visitor.wtr.output.contains(\"?\")); // precondition: self.wtr.write_str(\"?\")? at line 291 is Ok/Some",
          "    assert!(visitor.visit_post(&hir).is_ok()); // expected return value/type: Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let repetition = Repetition { min: 1, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    assert_eq!(visitor.visit_post(&hir), Ok(()));",
          "    assert_eq!(writer.output, \"+\");",
          "    assert_eq!(visitor.visit_post(&hir).is_ok(), true);"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_post(&hir).unwrap();",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let repetition = Repetition { min: 1, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    assert_eq!(visitor.visit_post(&hir), Ok(()));",
          "    assert_eq!(writer.output, \"+\");",
          "    assert_eq!(visitor.visit_post(&hir).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let repetition = Repetition { min: 1, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"+\");",
          "    ",
          "    let repetition = Repetition { min: 1, max: Some(1), greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"\");",
          "    ",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"?\");",
          "    ",
          "    let repetition = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"*\");",
          "    ",
          "    let repetition = Repetition { min: 1, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_post(&hir).unwrap();",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let repetition = Repetition { min: 1, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"+\");",
          "    ",
          "    let repetition = Repetition { min: 1, max: Some(1), greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"\");",
          "    ",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"?\");",
          "    ",
          "    let repetition = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"*\");",
          "    ",
          "    let repetition = Repetition { min: 1, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.output, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&hir).unwrap() == Ok(())",
          "    writer.output == \"\"",
          "    repetition.max == Some(1)",
          "    repetition.min == 1",
          "    repetition.greedy == true",
          "    visitor.visit_post(&hir).unwrap() == Ok(())",
          "    self.wtr.write_str(\"+\")? == Ok(())",
          "    x.greedy == false",
          "    self.wtr.write_str(\"?\")? == Ok(())"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    visitor.visit_post(&hir).unwrap();",
          "    visitor.visit_post(&hir).unwrap() == Ok(())",
          "    writer.output == \"\"",
          "    repetition.max == Some(1)",
          "    repetition.min == 1",
          "    repetition.greedy == true",
          "    visitor.visit_post(&hir).unwrap() == Ok(())",
          "    self.wtr.write_str(\"+\")? == Ok(())",
          "    x.greedy == false",
          "    self.wtr.write_str(\"?\")? == Ok(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]