[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.output, \"?\");",
          "    assert!(writer.output.is_empty() == false);",
          "    assert!(matches!(writer.output, ref s if s == \"?\"));"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_post(&hir);",
          "    assert_eq!(writer.output, \"?\");",
          "    assert!(writer.output.is_empty() == false);",
          "    assert!(matches!(writer.output, ref s if s == \"?\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let repetition = Repetition {",
          "    min: 0,",
          "    max: Some(1),",
          "    greedy: true,",
          "    sub: Box::new(Hir {",
          "    kind: HirKind::Empty,",
          "    props: Properties::default(),",
          "    }),",
          "    };",
          "    let hir = Hir {",
          "    kind: HirKind::Repetition(repetition),",
          "    props: Properties::default(),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_post(&hir);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"?\");"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_post(&hir);",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let repetition = Repetition {",
          "    min: 0,",
          "    max: Some(1),",
          "    greedy: true,",
          "    sub: Box::new(Hir {",
          "    kind: HirKind::Empty,",
          "    props: Properties::default(),",
          "    }),",
          "    };",
          "    let hir = Hir {",
          "    kind: HirKind::Repetition(repetition),",
          "    props: Properties::default(),",
          "    };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_post(&hir);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(writer.output, \"?\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    let mut writer = MockWriter { output: String::new() };",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default(), }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default(), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_post(&hir);",
          "    assert_eq!(writer.output, \"?\");",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_post(&hir);",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default(), }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default(), };",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "    let result = visitor.visit_post(&hir);",
          "    assert_eq!(writer.output, \"?\");",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    writer.output == \"\"",
          "    writer.output == \"?\"",
          "    writer.output == \"*\"",
          "    writer.output == \"+\"",
          "    writer.output == \"{{0,}}\"",
          "    writer.output == \"{{0,1}}\"",
          "    writer.output == \"{{1,}}\"",
          "    writer.output == \"{{1}}\""
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Empty,",
          "            props: Properties::default(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: &mut writer };",
          "",
          "    let _ = visitor.visit_post(&hir);",
          "    writer.output == \"\"",
          "    writer.output == \"?\"",
          "    writer.output == \"*\"",
          "    writer.output == \"+\"",
          "    writer.output == \"{{0,}}\"",
          "    writer.output == \"{{0,1}}\"",
          "    writer.output == \"{{1,}}\"",
          "    writer.output == \"{{1}}\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]