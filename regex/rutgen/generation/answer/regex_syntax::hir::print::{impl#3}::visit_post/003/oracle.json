[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let expr1 = Hir { kind: HirKind::Empty, props: Properties::default() };",
          "    let expr2 = Hir { kind: HirKind::Literal(Literal::new(\"a\")), props: Properties::default() };",
          "    let concat_hir = Hir {",
          "        kind: HirKind::Concat(vec![expr1, expr2]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let mut visitor = Writer { wtr: writer };",
          "",
          "    visitor.visit_post(&concat_hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&concat_hir).unwrap() == Ok(())",
          "    visitor.wtr.output == r\")\""
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let expr1 = Hir { kind: HirKind::Empty, props: Properties::default() };",
          "    let expr2 = Hir { kind: HirKind::Literal(Literal::new(\"a\")), props: Properties::default() };",
          "    let concat_hir = Hir {",
          "        kind: HirKind::Concat(vec![expr1, expr2]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let mut visitor = Writer { wtr: writer };",
          "",
          "    visitor.visit_post(&concat_hir).unwrap();",
          "    visitor.visit_post(&concat_hir).unwrap() == Ok(())",
          "    visitor.wtr.output == r\")\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let expr1 = Hir { kind: HirKind::Class(Class::new()), props: Properties::default() };",
          "    let expr2 = Hir { kind: HirKind::Look(Look::new()), props: Properties::default() };",
          "    let expr3 = Hir { kind: HirKind::Literal(Literal::new(\"b\")), props: Properties::default() };",
          "    let concat_hir = Hir {",
          "        kind: HirKind::Concat(vec![expr1, expr2, expr3]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let mut visitor = Writer { wtr: writer };",
          "",
          "    visitor.visit_post(&concat_hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&concat_hir).unwrap();",
          "    assert_eq!(writer.output, r\")\");",
          "    visitor.wtr.write_str(r\")\").is_ok();",
          "    assert!(visitor.wtr.write_str(r\")\").is_err());"
        ],
        "code": [
          "{",
          "    struct MockWriter {",
          "        output: String,",
          "    }",
          "",
          "    impl fmt::Write for MockWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.output.push_str(s);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let expr1 = Hir { kind: HirKind::Class(Class::new()), props: Properties::default() };",
          "    let expr2 = Hir { kind: HirKind::Look(Look::new()), props: Properties::default() };",
          "    let expr3 = Hir { kind: HirKind::Literal(Literal::new(\"b\")), props: Properties::default() };",
          "    let concat_hir = Hir {",
          "        kind: HirKind::Concat(vec![expr1, expr2, expr3]),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let mut writer = MockWriter { output: String::new() };",
          "    let mut visitor = Writer { wtr: writer };",
          "",
          "    visitor.visit_post(&concat_hir).unwrap();",
          "    visitor.visit_post(&concat_hir).unwrap();",
          "    assert_eq!(writer.output, r\")\");",
          "    visitor.wtr.write_str(r\")\").is_ok();",
          "    assert!(visitor.wtr.write_str(r\")\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]