[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter(Vec<u8>);",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.extend_from_slice(s.as_bytes());",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter(Vec::new());",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Literal(Literal::new(\"a\")),",
          "            props: Properties::new(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::new(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.0, b\"\");",
          "    visitor.finish().unwrap();",
          "    assert!(visitor.finish().is_ok());"
        ],
        "code": [
          "{",
          "    struct TestWriter(Vec<u8>);",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.extend_from_slice(s.as_bytes());",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter(Vec::new());",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Literal(Literal::new(\"a\")),",
          "            props: Properties::new(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::new(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    visitor.visit_post(&hir).unwrap();",
          "    assert_eq!(writer.0, b\"\");",
          "    visitor.finish().unwrap();",
          "    assert!(visitor.finish().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter(Vec<u8>);",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.extend_from_slice(s.as_bytes());",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter(Vec::new());",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: false,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Literal(Literal::new(\"a\")),",
          "            props: Properties::new(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::new(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "}"
        ],
        "oracle": [
          "    visitor.visit_post(&hir) == Ok(())",
          "    hir.kind() == &HirKind::Repetition(repetition)",
          "    repetition.min == 1",
          "    repetition.max == Some(1)",
          "    writer.0 == b\"\""
        ],
        "code": [
          "{",
          "    struct TestWriter(Vec<u8>);",
          "",
          "    impl fmt::Write for TestWriter {",
          "        fn write_str(&mut self, s: &str) -> fmt::Result {",
          "            self.0.extend_from_slice(s.as_bytes());",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut writer = TestWriter(Vec::new());",
          "    ",
          "    let repetition = Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: false,",
          "        sub: Box::new(Hir {",
          "            kind: HirKind::Literal(Literal::new(\"a\")),",
          "            props: Properties::new(),",
          "        }),",
          "    };",
          "",
          "    let hir = Hir {",
          "        kind: HirKind::Repetition(repetition),",
          "        props: Properties::new(),",
          "    };",
          "",
          "    let mut visitor = Writer { wtr: writer };",
          "    visitor.visit_post(&hir).unwrap();",
          "    visitor.visit_post(&hir) == Ok(())",
          "    hir.kind() == &HirKind::Repetition(repetition)",
          "    repetition.min == 1",
          "    repetition.max == Some(1)",
          "    writer.0 == b\"\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]