[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let repetition = Repetition { min: 0, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let _ = writer.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    writer.visit_post(&hir); assert_eq!(output, \"*\");",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"?\");",
          "    let repetition = Repetition { min: 1, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"+\");",
          "    let repetition = Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"\");",
          "    let repetition = Repetition { min: 2, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"{2,}\");",
          "    let repetition = Repetition { min: 3, max: Some(5), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"{3,5}\");",
          "    let repetition = Repetition { min: 3, max: Some(3), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"{3}\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let repetition = Repetition { min: 0, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let _ = writer.visit_post(&hir);",
          "    writer.visit_post(&hir); assert_eq!(output, \"*\");",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"?\");",
          "    let repetition = Repetition { min: 1, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"+\");",
          "    let repetition = Repetition { min: 1, max: Some(1), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"\");",
          "    let repetition = Repetition { min: 2, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"{2,}\");",
          "    let repetition = Repetition { min: 3, max: Some(5), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"{3,5}\");",
          "    let repetition = Repetition { min: 3, max: Some(3), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    writer.visit_post(&hir); assert_eq!(output, \"{3}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let repetition = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let _ = writer.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"*\");",
          "    assert!(writer.finish().is_ok());",
          "    assert!(writer.wtr.write_str(\"?\").is_err());",
          "    assert!(writer.wtr.write_str(\"*\").is_ok());",
          "    assert!(writer.wtr.write_str(\"+\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{},}\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{0,}}\").is_ok());",
          "    assert!(writer.wtr.write_str(\"{{0,1}}\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{1,}}\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{1,1}}\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{0,0}}\").is_err());"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let repetition = Repetition { min: 0, max: None, greedy: false, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let _ = writer.visit_post(&hir);",
          "    assert_eq!(output, \"*\");",
          "    assert!(writer.finish().is_ok());",
          "    assert!(writer.wtr.write_str(\"?\").is_err());",
          "    assert!(writer.wtr.write_str(\"*\").is_ok());",
          "    assert!(writer.wtr.write_str(\"+\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{},}\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{0,}}\").is_ok());",
          "    assert!(writer.wtr.write_str(\"{{0,1}}\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{1,}}\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{1,1}}\").is_err());",
          "    assert!(writer.wtr.write_str(\"{{0,0}}\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let _ = writer.visit_post(&hir);",
          "}"
        ],
        "oracle": [
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let repetition = Repetition { min: 0, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let result = writer.visit_post(&hir);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"{{0,}}\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let repetition = Repetition { min: 0, max: Some(1), greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let _ = writer.visit_post(&hir);",
          "    let mut output = String::new();",
          "    let writer = Writer { wtr: &mut output };",
          "    let repetition = Repetition { min: 0, max: None, greedy: true, sub: Box::new(Hir { kind: HirKind::Empty, props: Properties::default() }) };",
          "    let hir = Hir { kind: HirKind::Repetition(repetition), props: Properties::default() };",
          "    let result = writer.visit_post(&hir);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"{{0,}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]