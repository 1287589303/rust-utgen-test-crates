[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = ParserBuilder::default();",
          "    let _ = builder.build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);"
        ],
        "code": [
          "{",
          "    let builder = ParserBuilder::default();",
          "    let _ = builder.build();",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.nest_limit(0).build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.nest_limit, 0);",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);",
          "    assert_eq!(builder.nest_limit, 0);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.nest_limit(0).build();",
          "    assert_eq!(builder.nest_limit, 0);",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);",
          "    assert_eq!(builder.nest_limit, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.nest_limit(250).build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.nest_limit, 250);",
          "    let default_builder = ParserBuilder::default();",
          "    assert_eq!(default_builder.ignore_whitespace, false);",
          "    assert_eq!(default_builder.nest_limit, 250);",
          "    assert_eq!(default_builder.octal, false);",
          "    assert_eq!(default_builder.empty_min_range, false);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.nest_limit(250).build();",
          "    assert_eq!(builder.nest_limit, 250);",
          "    let default_builder = ParserBuilder::default();",
          "    assert_eq!(default_builder.ignore_whitespace, false);",
          "    assert_eq!(default_builder.nest_limit, 250);",
          "    assert_eq!(default_builder.octal, false);",
          "    assert_eq!(default_builder.empty_min_range, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.nest_limit(251).build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert!(builder.octal == false);",
          "    assert!(builder.ignore_whitespace == false);",
          "    assert!(builder.empty_min_range == false);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.nest_limit(251).build();",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert!(builder.octal == false);",
          "    assert!(builder.ignore_whitespace == false);",
          "    assert!(builder.empty_min_range == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.octal(false).build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);",
          "    assert!(builder.build().is_ok());"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.octal(false).build();",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);",
          "    assert!(builder.build().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.octal(true).build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, true);",
          "    assert_eq!(builder.empty_min_range, false);",
          "    assert!(builder.build().is_ok());"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.octal(true).build();",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, true);",
          "    assert_eq!(builder.empty_min_range, false);",
          "    assert!(builder.build().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.ignore_whitespace(false).build();",
          "}"
        ],
        "oracle": [
          "    assert!(builder.ignore_whitespace == false);",
          "    assert!(builder.nest_limit == 250);",
          "    assert!(builder.octal == false);",
          "    assert!(builder.empty_min_range == false);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.ignore_whitespace(false).build();",
          "    assert!(builder.ignore_whitespace == false);",
          "    assert!(builder.nest_limit == 250);",
          "    assert!(builder.octal == false);",
          "    assert!(builder.empty_min_range == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.ignore_whitespace(true).build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.ignore_whitespace, true);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.ignore_whitespace(true).build();",
          "    assert_eq!(builder.ignore_whitespace, true);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.empty_min_range(false).build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.empty_min_range(false).build();",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.empty_min_range, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.empty_min_range(true).build();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.empty_min_range, true);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.ignore_whitespace, false);"
        ],
        "code": [
          "{",
          "    let mut builder = ParserBuilder::new();",
          "    let _ = builder.empty_min_range(true).build();",
          "    assert_eq!(builder.empty_min_range, true);",
          "    assert_eq!(builder.nest_limit, 250);",
          "    assert_eq!(builder.octal, false);",
          "    assert_eq!(builder.ignore_whitespace, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]