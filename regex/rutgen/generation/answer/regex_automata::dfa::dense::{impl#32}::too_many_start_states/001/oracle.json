[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = BuildError::too_many_start_states();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &BuildErrorKind::TooManyStartStates);"
        ],
        "code": [
          "{",
          "    let result = BuildError::too_many_start_states();",
          "    assert_eq!(result.kind(), &BuildErrorKind::TooManyStartStates);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = BuildError::too_many_start_states();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind(), &BuildErrorKind::TooManyStartStates);",
          "    assert!(matches!(result.kind(), BuildErrorKind::TooManyStartStates));",
          "    assert!(result.kind() == &BuildErrorKind::TooManyStartStates);",
          "    assert!(matches!(BuildError::too_many_start_states(), BuildError { kind: BuildErrorKind::TooManyStartStates }));",
          "    assert!(result == BuildError::too_many_start_states());"
        ],
        "code": [
          "{",
          "    let result = BuildError::too_many_start_states();",
          "    assert_eq!(result.kind(), &BuildErrorKind::TooManyStartStates);",
          "    assert!(matches!(result.kind(), BuildErrorKind::TooManyStartStates));",
          "    assert!(result.kind() == &BuildErrorKind::TooManyStartStates);",
          "    assert!(matches!(BuildError::too_many_start_states(), BuildError { kind: BuildErrorKind::TooManyStartStates }));",
          "    assert!(result == BuildError::too_many_start_states());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]