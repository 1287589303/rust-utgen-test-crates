[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a*b+\";",
          "    let parser = Parser::new(config, pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.config.nest_limit, 10);",
          "    assert_eq!(parser.pattern, pattern);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow() == &Flags::default());",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"a*b+\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.config.nest_limit, 10);",
          "    assert_eq!(parser.pattern, pattern);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow() == &Flags::default());",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1000, flags: Flags::default() };",
          "    let pattern = \"x?y*\";",
          "    let parser = Parser::new(config, pattern);",
          "}"
        ],
        "oracle": [
          "    parser.config.nest_limit == 1000",
          "    parser.flags.case_insensitive == false",
          "    parser.flags.multi_line == false",
          "    parser.flags.dot_matches_new_line == false",
          "    parser.flags.swap_greed == false",
          "    parser.flags.crlf == false",
          "    parser.flags.ignore_whitespace == false",
          "    parser.pattern == \"x?y*\"",
          "    parser.depth.get() == 0",
          "    parser.pos.get() == 0",
          "    parser.char.get() == Some('x')",
          "    parser.capture_index.get() == 0",
          "    parser.capture_names.borrow().is_empty() == true"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1000, flags: Flags::default() };",
          "    let pattern = \"x?y*\";",
          "    let parser = Parser::new(config, pattern);",
          "    parser.config.nest_limit == 1000",
          "    parser.flags.case_insensitive == false",
          "    parser.flags.multi_line == false",
          "    parser.flags.dot_matches_new_line == false",
          "    parser.flags.swap_greed == false",
          "    parser.flags.crlf == false",
          "    parser.flags.ignore_whitespace == false",
          "    parser.pattern == \"x?y*\"",
          "    parser.depth.get() == 0",
          "    parser.pos.get() == 0",
          "    parser.char.get() == Some('x')",
          "    parser.capture_index.get() == 0",
          "    parser.capture_names.borrow().is_empty() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \"ab+c\";",
          "    let parser = Parser::new(config, pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.config.nest_limit, 1);",
          "    assert_eq!(parser.pattern, \"ab+c\");",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 1, flags: Flags::default() };",
          "    let pattern = \"ab+c\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.config.nest_limit, 1);",
          "    assert_eq!(parser.pattern, \"ab+c\");",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.flags.borrow(), &Flags::default());",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 50, flags: Flags::default() };",
          "    let pattern = \"abcde\";",
          "    let parser = Parser::new(config, pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.config.nest_limit, 50);",
          "    assert_eq!(parser.pattern, \"abcde\");",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(*parser.flags.borrow() == Flags::default());",
          "    assert_eq!(*parser.capture_names.borrow(), vec![]);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 50, flags: Flags::default() };",
          "    let pattern = \"abcde\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.config.nest_limit, 50);",
          "    assert_eq!(parser.pattern, \"abcde\");",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(*parser.flags.borrow() == Flags::default());",
          "    assert_eq!(*parser.capture_names.borrow(), vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 20, flags: Flags { case_insensitive: true, ..Flags::default() } };",
          "    let pattern = \".*?+\";",
          "    let parser = Parser::new(config, pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.config.nest_limit, 20);",
          "    assert!(parser.config.flags.case_insensitive);",
          "    assert_eq!(parser.pattern, pattern);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some(pattern.chars().next().unwrap()));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive);",
          "    assert!(parser.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 20, flags: Flags { case_insensitive: true, ..Flags::default() } };",
          "    let pattern = \".*?+\";",
          "    let parser = Parser::new(config, pattern);",
          "    assert_eq!(parser.config.nest_limit, 20);",
          "    assert!(parser.config.flags.case_insensitive);",
          "    assert_eq!(parser.pattern, pattern);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some(pattern.chars().next().unwrap()));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 100, flags: Flags::default() };",
          "    let pattern = \"a\".repeat(500); // Long non-empty string",
          "    let parser = Parser::new(config, &pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.config.nest_limit, 100);",
          "    assert_eq!(parser.pattern, pattern);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 100, flags: Flags::default() };",
          "    let pattern = \"a\".repeat(500); // Long non-empty string",
          "    let parser = Parser::new(config, &pattern);",
          "    assert_eq!(parser.config.nest_limit, 100);",
          "    assert_eq!(parser.pattern, pattern);",
          "    assert_eq!(parser.depth.get(), 0);",
          "    assert_eq!(parser.pos.get(), 0);",
          "    assert_eq!(parser.char.get(), Some('a'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]