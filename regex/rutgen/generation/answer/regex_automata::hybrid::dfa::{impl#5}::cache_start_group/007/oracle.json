[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::NonWordByte;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::NonWordByte).is_ok(), true);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::NonWordByte).unwrap(), expected_lazy_state_id);",
          "    assert!(matches!(lazy.cache_start_group(Anchored::Pattern(PatternID(0)), Start::NonWordByte), Err(StartError::UnsupportedAnchored { .. })));",
          "    assert!(matches!(lazy.cache_start_group(Anchored::No, Start::NonWordByte), Err(StartError::Cache { .. })));",
          "    assert!(matches!(lazy.cache_start_group(Anchored::No, Start::NonWordByte), Ok(lazy_state_id)));",
          "    assert!(lazy.cache.cache_capacity > 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::NonWordByte;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::NonWordByte).is_ok(), true);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::NonWordByte).unwrap(), expected_lazy_state_id);",
          "    assert!(matches!(lazy.cache_start_group(Anchored::Pattern(PatternID(0)), Start::NonWordByte), Err(StartError::UnsupportedAnchored { .. })));",
          "    assert!(matches!(lazy.cache_start_group(Anchored::No, Start::NonWordByte), Err(StartError::Cache { .. })));",
          "    assert!(matches!(lazy.cache_start_group(Anchored::No, Start::NonWordByte), Ok(lazy_state_id)));",
          "    assert!(lazy.cache.cache_capacity > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::LineCR;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::LineCR).is_ok(), true);",
          "    assert!(lazy.cache_start_group(Anchored::Pattern(PatternID(0)), Start::LineCR).is_err());",
          "    assert!(lazy.cache_start_group(Anchored::Yes, Start::LineCR).is_err());",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::Text).unwrap(), lazy.dead_id());",
          "    assert!(lazy.cache_start_group(Anchored::Pattern(PatternID(1)), Start::LineCR).is_err());",
          "    assert!(lazy.cache_start_group(Anchored::Pattern(PatternID(0)), Start::WordByte).is_err());",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).is_ok());",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::NonWordByte).is_ok());",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::LineLF).unwrap(), lazy.dead_id());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::LineCR;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::LineCR).is_ok(), true);",
          "    assert!(lazy.cache_start_group(Anchored::Pattern(PatternID(0)), Start::LineCR).is_err());",
          "    assert!(lazy.cache_start_group(Anchored::Yes, Start::LineCR).is_err());",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::Text).unwrap(), lazy.dead_id());",
          "    assert!(lazy.cache_start_group(Anchored::Pattern(PatternID(1)), Start::LineCR).is_err());",
          "    assert!(lazy.cache_start_group(Anchored::Pattern(PatternID(0)), Start::WordByte).is_err());",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).is_ok());",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::NonWordByte).is_ok());",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::LineLF).unwrap(), lazy.dead_id());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::LineLF;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::LineLF).is_ok(), true);",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::LineLF).is_err());",
          "    assert_eq!(lazy.cache_start_group(Anchored::Pattern(PatternID(0)), Start::LineLF).unwrap_err(), StartError::unsupported_anchored(Anchored::Pattern(PatternID(0))));",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::WordByte).is_ok());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::LineLF;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::LineLF).is_ok(), true);",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::LineLF).is_err());",
          "    assert_eq!(lazy.cache_start_group(Anchored::Pattern(PatternID(0)), Start::LineLF).unwrap_err(), StartError::unsupported_anchored(Anchored::Pattern(PatternID(0))));",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::WordByte).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::Text;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::Text).is_ok(), true);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::Text).unwrap(), lazy.as_ref().dead_id());",
          "    assert!(matches!(lazy.cache_start_group(Anchored::No, Start::Text), Err(StartError::Cache { .. })));"
        ],
        "code": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::Text;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::Text).is_ok(), true);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::Text).unwrap(), lazy.as_ref().dead_id());",
          "    assert!(matches!(lazy.cache_start_group(Anchored::No, Start::Text), Err(StartError::Cache { .. })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::CustomLineTerminator;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).is_ok(), false);",
          "    assert_eq!(lazy.cache.starts.len(), expected_length);",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).is_err());",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).unwrap_err(), StartError::unsupported_anchored(Anchored::No));",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).unwrap(), lazy.as_ref().dead_id());"
        ],
        "code": [
          "{",
          "    let dfa = DFA::new(\"pattern\").unwrap();",
          "    let mut cache = dfa.create_cache();",
          "    let mut lazy = Lazy::new(&dfa, &mut cache);",
          "",
          "    let anchored = Anchored::No;",
          "    let start = Start::CustomLineTerminator;",
          "",
          "    let _ = lazy.cache_start_group(anchored, start);",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).is_ok(), false);",
          "    assert_eq!(lazy.cache.starts.len(), expected_length);",
          "    assert!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).is_err());",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).unwrap_err(), StartError::unsupported_anchored(Anchored::No));",
          "    assert_eq!(lazy.cache_start_group(Anchored::No, Start::CustomLineTerminator).unwrap(), lazy.as_ref().dead_id());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]