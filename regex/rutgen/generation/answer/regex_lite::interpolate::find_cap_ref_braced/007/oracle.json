[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep = &[b'{', b'0', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    let rep = &[b'{', b'0', b'}'];",
          "    let i = 1;",
          "    let expected = Some(CaptureRef { cap: Ref::Number(0), end: 3 });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let rep = &[b'{', b'0', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "    let rep = &[b'{', b'0', b'}'];",
          "    let i = 1;",
          "    let expected = Some(CaptureRef { cap: Ref::Number(0), end: 3 });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep = &[b'{', b'a', b'b', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 4 }));"
        ],
        "code": [
          "{",
          "    let rep = &[b'{', b'a', b'b', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 4 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep = &[b'{', b'1', b'2', b'3', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 5 }));"
        ],
        "code": [
          "{",
          "    let rep = &[b'{', b'1', b'2', b'3', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep = &[b'{', b'f', b'o', b'o', b'_', b'1', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    let expected = Some(CaptureRef { cap: Ref::Number(1), end: 7 });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let rep = &[b'{', b'f', b'o', b'o', b'_', b'1', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "    let expected = Some(CaptureRef { cap: Ref::Number(1), end: 7 });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep = &[b'{', b'@', b'1', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    let rep = &[b'{', b'@', b'1', b'}'];",
          "    let i = 1;",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    assert!(rep.get(i).map_or(false, |&b| b != b'}') == false);",
          "    assert!(rep.get(i + 3).map_or(false, |&b| b == b'}') == true);",
          "    assert!(core::str::from_utf8(&rep[1..3]).is_ok());",
          "    assert!(cap.parse::<usize>().is_ok());"
        ],
        "code": [
          "{",
          "    let rep = &[b'{', b'@', b'1', b'}'];",
          "    let i = 1;",
          "    let result = find_cap_ref_braced(rep, i);",
          "    let rep = &[b'{', b'@', b'1', b'}'];",
          "    let i = 1;",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(1), end: 4 }));",
          "    assert!(rep.get(i).map_or(false, |&b| b != b'}') == false);",
          "    assert!(rep.get(i + 3).map_or(false, |&b| b == b'}') == true);",
          "    assert!(core::str::from_utf8(&rep[1..3]).is_ok());",
          "    assert!(cap.parse::<usize>().is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]