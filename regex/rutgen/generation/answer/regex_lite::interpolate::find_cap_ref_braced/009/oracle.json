[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"${foo}\";",
          "    let index = 4; // index where '}' is expected after '{'",
          "    let result = find_cap_ref_braced(input, index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"foo\"), end: 5 }));",
          "    ",
          "    let input: &[u8] = b\"${123}\";",
          "    let index = 4;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 5 }));",
          "    ",
          "    let input: &[u8] = b\"${invalid\\xFF}\";",
          "    let index = 4;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input: &[u8] = b\"${}\";",
          "    let index = 4;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input: &[u8] = b\"${foo\";",
          "    let index = 4;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input: &[u8] = b\"foo}\";",
          "    let index = 3;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"${foo}\";",
          "    let index = 4; // index where '}' is expected after '{'",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"foo\"), end: 5 }));",
          "    ",
          "    let input: &[u8] = b\"${123}\";",
          "    let index = 4;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 5 }));",
          "    ",
          "    let input: &[u8] = b\"${invalid\\xFF}\";",
          "    let index = 4;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input: &[u8] = b\"${}\";",
          "    let index = 4;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input: &[u8] = b\"${foo\";",
          "    let index = 4;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "    ",
          "    let input: &[u8] = b\"foo}\";",
          "    let index = 3;",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"${123}\";",
          "    let index = 4; // index where '}' is expected after '{'",
          "    let result = find_cap_ref_braced(input, index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 5 }));"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"${123}\";",
          "    let index = 4; // index where '}' is expected after '{'",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"${foo\";",
          "    let index = 4; // index after '{', but no closing '}'",
          "    let result = find_cap_ref_braced(input, index);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"${foo\";",
          "    let index = 4; // index after '{', but no closing '}'",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"${\\xFF}\";",
          "    let index = 4; // index where '}' is expected after '{'",
          "    let result = find_cap_ref_braced(input, index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"${\\xFF}\";",
          "    let index = 4; // index where '}' is expected after '{'",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"${}\";",
          "    let index = 3; // index where '}' is expected after '{'",
          "    let result = find_cap_ref_braced(input, index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert_eq!(rep[0..4], b\"${}\");",
          "    assert_eq!(i, 3);",
          "    assert!(result.is_none());",
          "    assert!(matches!(result, None));"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"${}\";",
          "    let index = 3; // index where '}' is expected after '{'",
          "    let result = find_cap_ref_braced(input, index);",
          "    assert_eq!(result, None);",
          "    assert_eq!(rep[0..4], b\"${}\");",
          "    assert_eq!(i, 3);",
          "    assert!(result.is_none());",
          "    assert!(matches!(result, None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]