[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${foo1}\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    let rep: &[u8] = b\"${foo1}\";",
          "    let i = 3;",
          "    let expected_capture = Ref::Named(\"foo1\");",
          "    let expected_end = 7;",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().cap, expected_capture);",
          "    assert_eq!(result.unwrap().end, expected_end);"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${foo1}\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    let rep: &[u8] = b\"${foo1}\";",
          "    let i = 3;",
          "    let expected_capture = Ref::Named(\"foo1\");",
          "    let expected_end = 7;",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().cap, expected_capture);",
          "    assert_eq!(result.unwrap().end, expected_end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${bar!\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"bar!\"), end: 7 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${bar!\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"bar!\"), end: 7 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${}\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"\"), end: 4 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${}\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"\"), end: 4 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${some_long_name}\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"some_long_name\"), end: 20 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${some_long_name}\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"some_long_name\"), end: 20 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${\\xFF}\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"\\xFF\"), end: 5 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${\\xFF}\";",
          "    let i = 3; // Position right after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"\\xFF\"), end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]