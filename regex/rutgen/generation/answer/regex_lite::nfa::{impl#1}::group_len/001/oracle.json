[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let _ = nfa.group_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.group_len(), 0);",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group1\")));",
          "    assert_eq!(nfa.group_len(), 1);",
          "    nfa.cap_index_to_name.push(None);",
          "    assert_eq!(nfa.group_len(), 2);",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group2\")));",
          "    assert_eq!(nfa.group_len(), 3);"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "    let _ = nfa.group_len();",
          "    assert_eq!(nfa.group_len(), 0);",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group1\")));",
          "    assert_eq!(nfa.group_len(), 1);",
          "    nfa.cap_index_to_name.push(None);",
          "    assert_eq!(nfa.group_len(), 2);",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group2\")));",
          "    assert_eq!(nfa.group_len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"group1\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let _ = nfa.group_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.group_len(), 1);",
          "    nfa.cap_index_to_name = vec![Some(Arc::from(\"group1\")), Some(Arc::from(\"group2\"))];",
          "    assert_eq!(nfa.group_len(), 2);",
          "    nfa.cap_index_to_name = vec![];",
          "    assert_eq!(nfa.group_len(), 0);",
          "    nfa.cap_index_to_name = vec![None];",
          "    assert_eq!(nfa.group_len(), 1);",
          "    nfa.cap_index_to_name = vec![Some(Arc::from(\"group1\")), None];",
          "    assert_eq!(nfa.group_len(), 2);"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"a\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"group1\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let _ = nfa.group_len();",
          "    assert_eq!(nfa.group_len(), 1);",
          "    nfa.cap_index_to_name = vec![Some(Arc::from(\"group1\")), Some(Arc::from(\"group2\"))];",
          "    assert_eq!(nfa.group_len(), 2);",
          "    nfa.cap_index_to_name = vec![];",
          "    assert_eq!(nfa.group_len(), 0);",
          "    nfa.cap_index_to_name = vec![None];",
          "    assert_eq!(nfa.group_len(), 1);",
          "    nfa.cap_index_to_name = vec![Some(Arc::from(\"group1\")), None];",
          "    assert_eq!(nfa.group_len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"abc\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"group1\")), Some(Arc::from(\"group2\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let _ = nfa.group_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.group_len(), 2);",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group3\")));",
          "    assert_eq!(nfa.group_len(), 3);",
          "    nfa.cap_index_to_name.clear();",
          "    assert_eq!(nfa.group_len(), 0);",
          "    nfa.cap_index_to_name.push(None);",
          "    assert_eq!(nfa.group_len(), 1);",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group4\")));",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group5\")));",
          "    assert_eq!(nfa.group_len(), 3);"
        ],
        "code": [
          "{",
          "    let nfa = NFA {",
          "        pattern: String::from(\"abc\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name: vec![Some(Arc::from(\"group1\")), Some(Arc::from(\"group2\"))],",
          "        memory_extra: 0,",
          "    };",
          "    let _ = nfa.group_len();",
          "    assert_eq!(nfa.group_len(), 2);",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group3\")));",
          "    assert_eq!(nfa.group_len(), 3);",
          "    nfa.cap_index_to_name.clear();",
          "    assert_eq!(nfa.group_len(), 0);",
          "    nfa.cap_index_to_name.push(None);",
          "    assert_eq!(nfa.group_len(), 1);",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group4\")));",
          "    nfa.cap_index_to_name.push(Some(Arc::from(\"group5\")));",
          "    assert_eq!(nfa.group_len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cap_index_to_name = Vec::with_capacity(2_usize.pow(32) as usize - 1);",
          "    for i in 0..(2_usize.pow(32) as usize - 1) {",
          "        cap_index_to_name.push(Some(Arc::from(format!(\"group{}\", i))));",
          "    }",
          "    let nfa = NFA {",
          "        pattern: String::from(\".*\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name,",
          "        memory_extra: 0,",
          "    };",
          "    let _ = nfa.group_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.group_len(), 2_usize.pow(32) as usize - 1);"
        ],
        "code": [
          "{",
          "    let mut cap_index_to_name = Vec::with_capacity(2_usize.pow(32) as usize - 1);",
          "    for i in 0..(2_usize.pow(32) as usize - 1) {",
          "        cap_index_to_name.push(Some(Arc::from(format!(\"group{}\", i))));",
          "    }",
          "    let nfa = NFA {",
          "        pattern: String::from(\".*\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: true,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index: CaptureNameMap::new(),",
          "        cap_index_to_name,",
          "        memory_extra: 0,",
          "    };",
          "    let _ = nfa.group_len();",
          "    assert_eq!(nfa.group_len(), 2_usize.pow(32) as usize - 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]