[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = [0xC2, 0xA0]; // U+00A0 (non-breaking space)",
          "    let result = decode(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (Some(' '), 2));  // Validate the decoded character and number of bytes consumed for U+00A0."
        ],
        "code": [
          "{",
          "    let input = [0xC2, 0xA0]; // U+00A0 (non-breaking space)",
          "    let result = decode(&input);",
          "    assert_eq!(result, (Some(' '), 2));  // Validate the decoded character and number of bytes consumed for U+00A0.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = [0xE2, 0x82, 0xAC]; // U+20AC (euro sign)",
          "    let result = decode(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (Some('€'), 3));"
        ],
        "code": [
          "{",
          "    let input = [0xE2, 0x82, 0xAC]; // U+20AC (euro sign)",
          "    let result = decode(&input);",
          "    assert_eq!(result, (Some('€'), 3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = [0xF0, 0x90, 0x8D, 0x88]; // U+10348 (gothic letter hwair)",
          "    let result = decode(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (Some('𐍈'), 4));"
        ],
        "code": [
          "{",
          "    let input = [0xF0, 0x90, 0x8D, 0x88]; // U+10348 (gothic letter hwair)",
          "    let result = decode(&input);",
          "    assert_eq!(result, (Some('𐍈'), 4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]