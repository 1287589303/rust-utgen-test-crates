[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::new(0), end: Position::new(1) };",
          "    let trans = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { case_insensitive: Some(true), unicode: Some(true), ..Default::default() }), ",
          "        utf8: false, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let translator_i = TranslatorI::new(&trans, \"©\");",
          "    let result = translator_i.case_fold_char(span, '©');",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::UnicodeCaseUnavailable);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::new(0), end: Position::new(1) };",
          "    let trans = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { case_insensitive: Some(true), unicode: Some(true), ..Default::default() }), ",
          "        utf8: false, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let translator_i = TranslatorI::new(&trans, \"©\");",
          "    let result = translator_i.case_fold_char(span, '©');",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::UnicodeCaseUnavailable);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::new(1), end: Position::new(2) };",
          "    let trans = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { case_insensitive: Some(true), unicode: Some(true), ..Default::default() }), ",
          "        utf8: false, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let translator_i = TranslatorI::new(&trans, \"µ\");",
          "    let result = translator_i.case_fold_char(span, 'µ');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), None);",
          "    assert_eq!(trans.flags().case_insensitive(), true);",
          "    assert_eq!(trans.flags().unicode(), true);",
          "    assert!(unicode::SimpleCaseFolder::new().is_err());"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::new(1), end: Position::new(2) };",
          "    let trans = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { case_insensitive: Some(true), unicode: Some(true), ..Default::default() }), ",
          "        utf8: false, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let translator_i = TranslatorI::new(&trans, \"µ\");",
          "    let result = translator_i.case_fold_char(span, 'µ');",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), None);",
          "    assert_eq!(trans.flags().case_insensitive(), true);",
          "    assert_eq!(trans.flags().unicode(), true);",
          "    assert!(unicode::SimpleCaseFolder::new().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: Position::new(2), end: Position::new(3) };",
          "    let trans = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { case_insensitive: Some(true), unicode: Some(true), ..Default::default() }), ",
          "        utf8: false, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let translator_i = TranslatorI::new(&trans, \"✓\");",
          "    let result = translator_i.case_fold_char(span, '✓');",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::UnicodeCaseUnavailable);"
        ],
        "code": [
          "{",
          "    let span = Span { start: Position::new(2), end: Position::new(3) };",
          "    let trans = Translator { ",
          "        stack: RefCell::new(vec![]), ",
          "        flags: Cell::new(Flags { case_insensitive: Some(true), unicode: Some(true), ..Default::default() }), ",
          "        utf8: false, ",
          "        line_terminator: b'\\n' ",
          "    };",
          "    let translator_i = TranslatorI::new(&trans, \"✓\");",
          "    let result = translator_i.case_fold_char(span, '✓');",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind, ErrorKind::UnicodeCaseUnavailable);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]