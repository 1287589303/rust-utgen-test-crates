[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::dot(Dot::AnyChar);",
          "}"
        ],
        "oracle": [
          "    Hir::dot(Dot::AnyChar) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')])));",
          "    Hir::dot(Dot::AnyByte) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')])));",
          "    Hir::dot(Dot::AnyCharExceptLF) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')])));",
          "    Hir::dot(Dot::AnyCharExceptCRLF) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')])));",
          "    Hir::dot(Dot::AnyByteExceptLF) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')])));",
          "    Hir::dot(Dot::AnyByteExceptCRLF) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])));",
          "    Hir::dot(Dot::AnyCharExcept('<char>') for <char> in ['A', 'B', 'C', ...]) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('<char>', '<char>')])));",
          "    Hir::dot(Dot::AnyByteExcept(<u8>) for <u8> in [0, 1, 2, 3, ..., 255]) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(<u8>, <u8>)])));"
        ],
        "code": [
          "{",
          "    let result = Hir::dot(Dot::AnyChar);",
          "    Hir::dot(Dot::AnyChar) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')])));",
          "    Hir::dot(Dot::AnyByte) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')])));",
          "    Hir::dot(Dot::AnyCharExceptLF) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')])));",
          "    Hir::dot(Dot::AnyCharExceptCRLF) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')])));",
          "    Hir::dot(Dot::AnyByteExceptLF) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')])));",
          "    Hir::dot(Dot::AnyByteExceptCRLF) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])));",
          "    Hir::dot(Dot::AnyCharExcept('<char>') for <char> in ['A', 'B', 'C', ...]) == Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('<char>', '<char>')])));",
          "    Hir::dot(Dot::AnyByteExcept(<u8>) for <u8> in [0, 1, 2, 3, ..., 255]) == Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(<u8>, <u8>)])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::dot(Dot::AnyByte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
          "    assert_eq!(result.props, Properties::class(&Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
          "    assert!(result.props.is_empty() == false);",
          "    assert!(result.minimum_len().is_none());",
          "    assert!(result.maximum_len().is_none());",
          "    assert!(result.literal().is_none());",
          "    assert_eq!(result.to_unicode_class(), None);"
        ],
        "code": [
          "{",
          "    let result = Hir::dot(Dot::AnyByte);",
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
          "    assert_eq!(result.props, Properties::class(&Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
          "    assert!(result.props.is_empty() == false);",
          "    assert!(result.minimum_len().is_none());",
          "    assert!(result.maximum_len().is_none());",
          "    assert!(result.literal().is_none());",
          "    assert_eq!(result.to_unicode_class(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::dot(Dot::AnyCharExcept('\\0'));",
          "    let result2 = Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}'));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\0')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\0')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{10FFFF}', '\\u{10FFFF}')]));"
        ],
        "code": [
          "{",
          "    let result = Hir::dot(Dot::AnyCharExcept('\\0'));",
          "    let result2 = Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}'));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\0')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\0')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{10FFFF}', '\\u{10FFFF}')]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::dot(Dot::AnyCharExceptLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))) );"
        ],
        "code": [
          "{",
          "    let result = Hir::dot(Dot::AnyCharExceptLF);",
          "    assert_eq!(result.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}')]))) );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::dot(Dot::AnyCharExceptCRLF);",
          "}"
        ],
        "oracle": [
          "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
          "    ClassUnicodeRange::new('\\0', '\\x09'),",
          "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
          "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
          "    ])));",
          "    assert_eq!(expected, result);"
        ],
        "code": [
          "{",
          "    let result = Hir::dot(Dot::AnyCharExceptCRLF);",
          "    let expected = Hir::class(Class::Unicode(ClassUnicode::new([",
          "    ClassUnicodeRange::new('\\0', '\\x09'),",
          "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
          "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
          "    ])));",
          "    assert_eq!(expected, result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::dot(Dot::AnyByteExcept(0));",
          "    let result2 = Hir::dot(Dot::AnyByteExcept(255));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')])));",
          "    assert_eq!(result2, Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]));"
        ],
        "code": [
          "{",
          "    let result = Hir::dot(Dot::AnyByteExcept(0));",
          "    let result2 = Hir::dot(Dot::AnyByteExcept(255));",
          "    assert_eq!(result, Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')])));",
          "    assert_eq!(result2, Hir::class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::dot(Dot::AnyByteExceptLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));"
        ],
        "code": [
          "{",
          "    let result = Hir::dot(Dot::AnyByteExceptLF);",
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Hir::dot(Dot::AnyByteExceptCRLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])),));"
        ],
        "code": [
          "{",
          "    let result = Hir::dot(Dot::AnyByteExceptCRLF);",
          "    assert_eq!(result.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])),));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]