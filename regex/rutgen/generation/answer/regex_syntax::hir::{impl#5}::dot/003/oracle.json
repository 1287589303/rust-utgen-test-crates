[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 0;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );"
        ],
        "code": [
          "{",
          "    let byte = 0;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 255;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])));",
          "    assert!(hir.props.is_empty());"
        ],
        "code": [
          "{",
          "    let byte = 255;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')])));",
          "    assert!(hir.props.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 128;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(0x00, 0x09), ClassBytesRange::new(0x0B, 0xFF)]))));"
        ],
        "code": [
          "{",
          "    let byte = 128;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(0x00, 0x09), ClassBytesRange::new(0x0B, 0xFF)]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 64;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
        ],
        "code": [
          "{",
          "    let byte = 64;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let byte = 100;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
        ],
        "code": [
          "{",
          "    let byte = 100;",
          "    let hir = Hir::dot(Dot::AnyByteExcept(byte));",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]