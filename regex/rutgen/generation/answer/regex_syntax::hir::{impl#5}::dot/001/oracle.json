[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::dot(Dot::AnyChar);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
          "    assert_eq!(hir.props, Properties::class(&Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
          "    assert!(matches!(hir.kind, HirKind::Class(Class::Unicode(_))));",
          "    assert!(hir.props.is_empty() == false);",
          "    assert!(hir.props.minimum_len().is_none());",
          "    assert!(hir.props.maximum_len().is_none());",
          "    assert!(hir.props.literal().is_none());",
          "    assert!(hir.props.is_ascii() == false);"
        ],
        "code": [
          "{",
          "    let hir = Hir::dot(Dot::AnyChar);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
          "    assert_eq!(hir.props, Properties::class(&Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
          "    assert!(matches!(hir.kind, HirKind::Class(Class::Unicode(_))));",
          "    assert!(hir.props.is_empty() == false);",
          "    assert!(hir.props.minimum_len().is_none());",
          "    assert!(hir.props.maximum_len().is_none());",
          "    assert!(hir.props.literal().is_none());",
          "    assert!(hir.props.is_ascii() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::dot(Dot::AnyByte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));"
        ],
        "code": [
          "{",
          "    let hir = Hir::dot(Dot::AnyByte);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::dot(Dot::AnyCharExcept('a'));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('a')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0061'-1'), ClassUnicodeRange::new('\\u{0061'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('b')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0062'-1'), ClassUnicodeRange::new('\\u{0062'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('A')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0041'-1'), ClassUnicodeRange::new('\\u{0041'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{005A'-1'), ClassUnicodeRange::new('\\u{005A'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\n')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{000A'-1'), ClassUnicodeRange::new('\\u{000B}', '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\r')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{000D'-1'), ClassUnicodeRange::new('\\u{000D'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFE}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\0')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0001}', '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('a')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'a'-1'), ClassUnicodeRange::new('a'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'z'-1'), ClassUnicodeRange::new('z'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'Z'-1'), ClassUnicodeRange::new('Z'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('A')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'A'-1'), ClassUnicodeRange::new('A'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('1')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '1'-1'), ClassUnicodeRange::new('1'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('9')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '9'-1'), ClassUnicodeRange::new('9'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\x7F')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\x7F'-1), ClassUnicodeRange::new('\\x7F'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('b')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'b'-1), ClassUnicodeRange::new('b'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('c')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'c'-1), ClassUnicodeRange::new('c'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Y')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'Y'-1), ClassUnicodeRange::new('Y'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('X')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'X'-1), ClassUnicodeRange::new('X'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('B')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'B'-1), ClassUnicodeRange::new('B'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('C')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'C'-1), ClassUnicodeRange::new('C'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\x7E')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\x7E'-1), ClassUnicodeRange::new('\\x7E'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{FFFD}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{FFFD'-1), ClassUnicodeRange::new('\\u{FFFD'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{D800}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{D7FF}'), ClassUnicodeRange::new('\\u{D801}', '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{DFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{DFFF'-1), ClassUnicodeRange::new('\\u{DFFF'+1, '\\u{10FFFF}')])));"
        ],
        "code": [
          "{",
          "    let hir = Hir::dot(Dot::AnyCharExcept('a'));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('a')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0061'-1'), ClassUnicodeRange::new('\\u{0061'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('b')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0062'-1'), ClassUnicodeRange::new('\\u{0062'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('A')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{0041'-1'), ClassUnicodeRange::new('\\u{0041'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{005A'-1'), ClassUnicodeRange::new('\\u{005A'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\n')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{000A'-1'), ClassUnicodeRange::new('\\u{000B}', '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\r')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{000D'-1'), ClassUnicodeRange::new('\\u{000D'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{10FFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{10FFFE}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\0')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0001}', '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('a')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'a'-1'), ClassUnicodeRange::new('a'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'z'-1'), ClassUnicodeRange::new('z'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Z')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'Z'-1'), ClassUnicodeRange::new('Z'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('A')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'A'-1'), ClassUnicodeRange::new('A'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('1')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '1'-1'), ClassUnicodeRange::new('1'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('9')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '9'-1'), ClassUnicodeRange::new('9'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\x7F')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\x7F'-1), ClassUnicodeRange::new('\\x7F'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('b')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'b'-1), ClassUnicodeRange::new('b'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('c')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'c'-1), ClassUnicodeRange::new('c'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('Y')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'Y'-1), ClassUnicodeRange::new('Y'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('X')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'X'-1), ClassUnicodeRange::new('X'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('B')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'B'-1), ClassUnicodeRange::new('B'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('C')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', 'C'-1), ClassUnicodeRange::new('C'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\x7E')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\x7E'-1), ClassUnicodeRange::new('\\x7E'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{FFFD}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{FFFD'-1), ClassUnicodeRange::new('\\u{FFFD'+1, '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{D800}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{D7FF}'), ClassUnicodeRange::new('\\u{D801}', '\\u{10FFFF}')])));",
          "    assert_eq!(Hir::dot(Dot::AnyCharExcept('\\u{DFFF}')), Hir::class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0000}', '\\u{DFFF'-1), ClassUnicodeRange::new('\\u{DFFF'+1, '\\u{10FFFF}')])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::dot(Dot::AnyCharExceptLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange::new('\\0', '\\x09'),",
          "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
          "    ]))));"
        ],
        "code": [
          "{",
          "    let hir = Hir::dot(Dot::AnyCharExceptLF);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange::new('\\0', '\\x09'),",
          "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
          "    ]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::dot(Dot::AnyCharExceptCRLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')]))));"
        ],
        "code": [
          "{",
          "    let hir = Hir::dot(Dot::AnyCharExceptCRLF);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![ClassUnicodeRange::new('\\0', '\\x09'), ClassUnicodeRange::new('\\x0B', '\\x0C'), ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::dot(Dot::AnyByteExcept(100));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
        ],
        "code": [
          "{",
          "    let hir = Hir::dot(Dot::AnyByteExcept(100));",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::dot(Dot::AnyByteExceptLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );"
        ],
        "code": [
          "{",
          "    let hir = Hir::dot(Dot::AnyByteExceptLF);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))) );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::dot(Dot::AnyByteExceptCRLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));"
        ],
        "code": [
          "{",
          "    let hir = Hir::dot(Dot::AnyByteExceptCRLF);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]