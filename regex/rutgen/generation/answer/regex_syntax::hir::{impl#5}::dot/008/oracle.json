[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dot = Dot::AnyChar;",
          "    let hir = Hir::dot(dot);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));"
        ],
        "code": [
          "{",
          "    let dot = Dot::AnyChar;",
          "    let hir = Hir::dot(dot);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\0', '\\u{10FFFF}')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dot = Dot::AnyByte;",
          "    let hir = Hir::dot(dot);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))) );"
        ],
        "code": [
          "{",
          "    let dot = Dot::AnyByte;",
          "    let hir = Hir::dot(dot);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\xFF')]))) );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dot = Dot::AnyCharExcept('\\u{0}');",
          "    let hir = Hir::dot(dot);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0}', '\\u{0}')])),));",
          "    assert!(hir.props.is_empty());",
          "    assert!(hir.props.contains(CharacterSet::AnyCharExcept('\\u{0}')));"
        ],
        "code": [
          "{",
          "    let dot = Dot::AnyCharExcept('\\u{0}');",
          "    let hir = Hir::dot(dot);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new([ClassUnicodeRange::new('\\u{0}', '\\u{0}')])),));",
          "    assert!(hir.props.is_empty());",
          "    assert!(hir.props.contains(CharacterSet::AnyCharExcept('\\u{0}')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dot = Dot::AnyCharExceptLF;",
          "    let hir = Hir::dot(dot);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange::new('\\0', '\\x09'),",
          "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
          "    ]))));"
        ],
        "code": [
          "{",
          "    let dot = Dot::AnyCharExceptLF;",
          "    let hir = Hir::dot(dot);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange::new('\\0', '\\x09'),",
          "    ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
          "    ]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dot = Dot::AnyCharExceptCRLF;",
          "    let hir = Hir::dot(dot);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange::new('\\0', '\\x09'),",
          "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
          "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
          "    ]))));"
        ],
        "code": [
          "{",
          "    let dot = Dot::AnyCharExceptCRLF;",
          "    let hir = Hir::dot(dot);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Unicode(ClassUnicode::new(vec![",
          "    ClassUnicodeRange::new('\\0', '\\x09'),",
          "    ClassUnicodeRange::new('\\x0B', '\\x0C'),",
          "    ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
          "    ]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dot = Dot::AnyByteExcept(0);",
          "    let hir = Hir::dot(dot);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\0')]))));"
        ],
        "code": [
          "{",
          "    let dot = Dot::AnyByteExcept(0);",
          "    let hir = Hir::dot(dot);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\0')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dot = Dot::AnyByteExceptLF;",
          "    let hir = Hir::dot(dot);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));"
        ],
        "code": [
          "{",
          "    let dot = Dot::AnyByteExceptLF;",
          "    let hir = Hir::dot(dot);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\xFF')]))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dot = Dot::AnyByteExceptCRLF;",
          "    let hir = Hir::dot(dot);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))) );",
          "    assert_eq!(hir.props, Properties::class(&Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))) );",
          "    assert!(hir.is_empty() == false);",
          "    assert_eq!(hir.maximum_len(), None);",
          "    assert_eq!(hir.minimum_len(), Some(1));"
        ],
        "code": [
          "{",
          "    let dot = Dot::AnyByteExceptCRLF;",
          "    let hir = Hir::dot(dot);",
          "    assert_eq!(hir.kind, HirKind::Class(Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))) );",
          "    assert_eq!(hir.props, Properties::class(&Class::Bytes(ClassBytes::new([ClassBytesRange::new(b'\\0', b'\\x09'), ClassBytesRange::new(b'\\x0B', b'\\x0C'), ClassBytesRange::new(b'\\x0E', b'\\xFF')]))) );",
          "    assert!(hir.is_empty() == false);",
          "    assert_eq!(hir.maximum_len(), None);",
          "    assert_eq!(hir.minimum_len(), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]