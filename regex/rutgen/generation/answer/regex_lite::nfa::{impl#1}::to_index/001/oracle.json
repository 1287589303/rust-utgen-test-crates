[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"group1\"), 0),",
          "        (Arc::from(\"group2\"), 1),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"group1\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.to_index(\"group1\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"group2\"), Some(1));",
          "    assert_eq!(nfa.to_index(\"group3\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), None);",
          "    assert_eq!(nfa.to_index(\"group1\"), Some(0));"
        ],
        "code": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"group1\"), 0),",
          "        (Arc::from(\"group2\"), 1),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"group1\");",
          "    assert_eq!(nfa.to_index(\"group1\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"group2\"), Some(1));",
          "    assert_eq!(nfa.to_index(\"group3\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), None);",
          "    assert_eq!(nfa.to_index(\"group1\"), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"existing\"), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"non_existent\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.to_index(\"existing\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"non_existent\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), None);",
          "    assert_eq!(nfa.to_index(\"test\"), None);",
          "    assert_eq!(nfa.to_index(\"existing\"), Some(0));"
        ],
        "code": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"existing\"), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"non_existent\");",
          "    assert_eq!(nfa.to_index(\"existing\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"non_existent\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), None);",
          "    assert_eq!(nfa.to_index(\"test\"), None);",
          "    assert_eq!(nfa.to_index(\"existing\"), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"\"), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.to_index(\"\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"non_existent\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), Some(0));",
          "    assert!(nfa.to_index(\"non_existent\").is_none());",
          "    assert!(nfa.to_index(\"test\").is_none());"
        ],
        "code": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"\"), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"\");",
          "    assert_eq!(nfa.to_index(\"\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"non_existent\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), Some(0));",
          "    assert!(nfa.to_index(\"non_existent\").is_none());",
          "    assert!(nfa.to_index(\"test\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"group_with_specials!@#\"), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"group_with_specials!@#\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.to_index(\"group_with_specials!@#\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"non_existent_group\"), None);"
        ],
        "code": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"group_with_specials!@#\"), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"group_with_specials!@#\");",
          "    assert_eq!(nfa.to_index(\"group_with_specials!@#\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"non_existent_group\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"グループ\"), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"グループ\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.to_index(\"グループ\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"non_existent\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), None);",
          "    assert_eq!(nfa.to_index(\"グループ\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"  \"), None);"
        ],
        "code": [
          "{",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(\"グループ\"), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(\"グループ\");",
          "    assert_eq!(nfa.to_index(\"グループ\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"non_existent\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), None);",
          "    assert_eq!(nfa.to_index(\"グループ\"), Some(0));",
          "    assert_eq!(nfa.to_index(\"  \"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let long_name = \"a\".repeat(255);",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(&long_name), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(&long_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(nfa.to_index(\"a\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), None);",
          "    assert_eq!(nfa.to_index(\"non_existent_group\"), None);",
          "    assert_eq!(nfa.to_index(&long_name), Some(0));",
          "    assert_eq!(nfa.to_index(\"a\" + &\"b\".repeat(254), None);"
        ],
        "code": [
          "{",
          "    let long_name = \"a\".repeat(255);",
          "    let cap_name_to_index = std::collections::HashMap::from([",
          "        (Arc::from(&long_name), 0),",
          "    ]);",
          "    let nfa = NFA {",
          "        pattern: String::from(\"test\"),",
          "        states: vec![],",
          "        start: 0,",
          "        is_start_anchored: false,",
          "        is_match_empty: false,",
          "        static_explicit_captures_len: None,",
          "        cap_name_to_index,",
          "        cap_index_to_name: vec![],",
          "        memory_extra: 0,",
          "    };",
          "",
          "    nfa.to_index(&long_name);",
          "    assert_eq!(nfa.to_index(\"a\"), None);",
          "    assert_eq!(nfa.to_index(\"\"), None);",
          "    assert_eq!(nfa.to_index(\"non_existent_group\"), None);",
          "    assert_eq!(nfa.to_index(&long_name), Some(0));",
          "    assert_eq!(nfa.to_index(\"a\" + &\"b\".repeat(254), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]