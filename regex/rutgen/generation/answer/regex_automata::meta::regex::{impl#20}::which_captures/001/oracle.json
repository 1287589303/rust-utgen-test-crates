[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::All);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    ",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    ",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::All);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::All);",
          "    ",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::Implicit);",
          "    ",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "    assert_eq!(config.get_which_captures(), WhichCaptures::None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.which_captures, Some(WhichCaptures::Implicit));"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    assert_eq!(config.which_captures, Some(WhichCaptures::Implicit));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "}"
        ],
        "oracle": [
          "    config.which_captures(WhichCaptures::None).get_which_captures() == WhichCaptures::None",
          "    ",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    config.which_captures(WhichCaptures::Implicit).get_which_captures() == WhichCaptures::Implicit",
          "    ",
          "    let config = Config::new().which_captures(WhichCaptures::All);",
          "    config.which_captures(WhichCaptures::All).get_which_captures() == WhichCaptures::All"
        ],
        "code": [
          "{",
          "    let config = Config::new().which_captures(WhichCaptures::None);",
          "    config.which_captures(WhichCaptures::None).get_which_captures() == WhichCaptures::None",
          "    ",
          "    let config = Config::new().which_captures(WhichCaptures::Implicit);",
          "    config.which_captures(WhichCaptures::Implicit).get_which_captures() == WhichCaptures::Implicit",
          "    ",
          "    let config = Config::new().which_captures(WhichCaptures::All);",
          "    config.which_captures(WhichCaptures::All).get_which_captures() == WhichCaptures::All",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]