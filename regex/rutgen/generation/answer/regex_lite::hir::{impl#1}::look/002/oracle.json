[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::Start;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::Start));",
          "    assert!(result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::Start;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::Start));",
          "    assert!(result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::End;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::End));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::End;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::End));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartLF;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::StartLF));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::StartLF;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::StartLF));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndLF;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::EndLF));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::EndLF;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::EndLF));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::StartCRLF));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::StartCRLF;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::StartCRLF));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    let look = Look::EndCRLF;",
          "    let expected_kind = HirKind::Look(look);",
          "    let expected_is_start_anchored = false;",
          "    let expected_is_match_empty = true;",
          "    let expected_static_explicit_captures_len = Some(0);",
          "    assert_eq!(result.kind(), &expected_kind);",
          "    assert_eq!(result.is_start_anchored(), expected_is_start_anchored);",
          "    assert_eq!(result.is_match_empty(), expected_is_match_empty);",
          "    assert_eq!(result.static_explicit_captures_len(), expected_static_explicit_captures_len);"
        ],
        "code": [
          "{",
          "    let look = Look::EndCRLF;",
          "    let result = Hir::look(look);",
          "    let look = Look::EndCRLF;",
          "    let expected_kind = HirKind::Look(look);",
          "    let expected_is_start_anchored = false;",
          "    let expected_is_match_empty = true;",
          "    let expected_static_explicit_captures_len = Some(0);",
          "    assert_eq!(result.kind(), &expected_kind);",
          "    assert_eq!(result.is_start_anchored(), expected_is_start_anchored);",
          "    assert_eq!(result.is_match_empty(), expected_is_match_empty);",
          "    assert_eq!(result.static_explicit_captures_len(), expected_static_explicit_captures_len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::Word;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::Word));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::Word;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::Word));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordNegate;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::WordNegate));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::WordNegate;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::WordNegate));",
          "    assert!(!result.is_start_anchored());",
          "    assert!(result.is_match_empty());",
          "    assert_eq!(result.static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStart;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::WordStart));",
          "    assert!(result.is_start_anchored());",
          "    assert!(result.is_match_empty);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::WordStart;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::WordStart));",
          "    assert!(result.is_start_anchored());",
          "    assert!(result.is_match_empty);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEnd;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::WordEnd));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::WordEnd;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::WordEnd));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordStartHalf;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    result.kind == HirKind::Look(Look::WordStartHalf)",
          "    result.is_start_anchored == false",
          "    result.is_match_empty == true",
          "    result.static_explicit_captures_len == Some(0)"
        ],
        "code": [
          "{",
          "    let look = Look::WordStartHalf;",
          "    let result = Hir::look(look);",
          "    result.kind == HirKind::Look(Look::WordStartHalf)",
          "    result.is_start_anchored == false",
          "    result.is_match_empty == true",
          "    result.static_explicit_captures_len == Some(0)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let result = Hir::look(look);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.kind, HirKind::Look(Look::WordEndHalf));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));"
        ],
        "code": [
          "{",
          "    let look = Look::WordEndHalf;",
          "    let result = Hir::look(look);",
          "    assert_eq!(result.kind, HirKind::Look(Look::WordEndHalf));",
          "    assert_eq!(result.is_start_anchored, false);",
          "    assert_eq!(result.is_match_empty, true);",
          "    assert_eq!(result.static_explicit_captures_len, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]