[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride2 = 1;",
          "    let state_id = StateID(0); // 0 as usize",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 8], // dummy data",
          "        classes: ByteClasses([0; 256]),",
          "        stride2,",
          "    };",
          "    let _ = transition_table.to_index(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.to_index(StateID(0)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(1)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(2)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(3)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(4)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(5)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(6)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(7)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(8)), 0);"
        ],
        "code": [
          "{",
          "    let stride2 = 1;",
          "    let state_id = StateID(0); // 0 as usize",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 8], // dummy data",
          "        classes: ByteClasses([0; 256]),",
          "        stride2,",
          "    };",
          "    let _ = transition_table.to_index(state_id);",
          "    assert_eq!(transition_table.to_index(StateID(0)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(1)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(2)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(3)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(4)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(5)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(6)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(7)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(8)), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride2 = 5;",
          "    let state_id = StateID(32); // 32 as usize",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 8], // dummy data",
          "        classes: ByteClasses([0; 256]),",
          "        stride2,",
          "    };",
          "    let _ = transition_table.to_index(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.to_index(state_id), 32 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(0)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(31)), 31 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(32)), 32 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(63)), 63 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(64)), 64 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(127)), 127 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(255)), 255 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(256)), 256 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(511)), 511 >> stride2);"
        ],
        "code": [
          "{",
          "    let stride2 = 5;",
          "    let state_id = StateID(32); // 32 as usize",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 8], // dummy data",
          "        classes: ByteClasses([0; 256]),",
          "        stride2,",
          "    };",
          "    let _ = transition_table.to_index(state_id);",
          "    assert_eq!(transition_table.to_index(state_id), 32 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(0)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(31)), 31 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(32)), 32 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(63)), 63 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(64)), 64 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(127)), 127 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(255)), 255 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(256)), 256 >> stride2);",
          "    assert_eq!(transition_table.to_index(StateID(511)), 511 >> stride2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let stride2 = 9;",
          "    let state_id = StateID(256); // 256 as usize",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 8], // dummy data",
          "        classes: ByteClasses([0; 256]),",
          "        stride2,",
          "    };",
          "    let _ = transition_table.to_index(state_id);",
          "}"
        ],
        "oracle": [
          "    let stride2 = 9;",
          "    let state_id = StateID(256);",
          "    let expected_index = 256 >> stride2;",
          "    assert_eq!(transition_table.to_index(state_id), expected_index);"
        ],
        "code": [
          "{",
          "    let stride2 = 9;",
          "    let state_id = StateID(256); // 256 as usize",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 8], // dummy data",
          "        classes: ByteClasses([0; 256]),",
          "        stride2,",
          "    };",
          "    let _ = transition_table.to_index(state_id);",
          "    let stride2 = 9;",
          "    let state_id = StateID(256);",
          "    let expected_index = 256 >> stride2;",
          "    assert_eq!(transition_table.to_index(state_id), expected_index);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let stride2 = 9;",
          "    let state_id = StateID(512); // 512 is out of valid range for as_usize",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 8], // dummy data",
          "        classes: ByteClasses([0; 256]),",
          "        stride2,",
          "    };",
          "    let _ = transition_table.to_index(state_id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition_table.to_index(StateID(0)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(256)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(511)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(512)), 1 << (stride2 - 1));",
          "    assert_eq!(transition_table.to_index(StateID(1024)), 2 << (stride2 - 2));",
          "    assert_eq!(transition_table.to_index(StateID(1)), 1 >> (stride2 - 1));",
          "    assert!(std::panic::catch_unwind(|| transition_table.to_index(StateID(513))).is_err());",
          "    assert!(std::panic::catch_unwind(|| transition_table.to_index(StateID(1000))).is_err());",
          "    assert!(std::panic::catch_unwind(|| transition_table.to_index(StateID(2048))).is_err());"
        ],
        "code": [
          "{",
          "    let stride2 = 9;",
          "    let state_id = StateID(512); // 512 is out of valid range for as_usize",
          "    let transition_table = TransitionTable {",
          "        table: vec![0; 8], // dummy data",
          "        classes: ByteClasses([0; 256]),",
          "        stride2,",
          "    };",
          "    let _ = transition_table.to_index(state_id);",
          "    assert_eq!(transition_table.to_index(StateID(0)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(256)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(511)), 0);",
          "    assert_eq!(transition_table.to_index(StateID(512)), 1 << (stride2 - 1));",
          "    assert_eq!(transition_table.to_index(StateID(1024)), 2 << (stride2 - 2));",
          "    assert_eq!(transition_table.to_index(StateID(1)), 1 >> (stride2 - 1));",
          "    assert!(std::panic::catch_unwind(|| transition_table.to_index(StateID(513))).is_err());",
          "    assert!(std::panic::catch_unwind(|| transition_table.to_index(StateID(1000))).is_err());",
          "    assert!(std::panic::catch_unwind(|| transition_table.to_index(StateID(2048))).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]