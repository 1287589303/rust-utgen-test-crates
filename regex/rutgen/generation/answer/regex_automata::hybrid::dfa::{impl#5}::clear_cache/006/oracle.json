[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: Default::default(),",
          "        backtrack: Default::default(),",
          "        onepass: Default::default(),",
          "        hybrid: Default::default(),",
          "        revhybrid: Default::default(),",
          "    };",
          "",
          "    let progress = SearchProgress { start: 0, at: 1 };",
          "    cache.progress = Some(progress);",
          "    ",
          "    let valid_state = State(Arc::new([0u8, 1, 2].into()));",
          "    let valid_id = LazyStateID(1);",
          "    cache.state_saver = StateSaver::ToSave { id: valid_id, state: valid_state };",
          "",
          "    let dfa = DFA {",
          "        tt: Default::default(),",
          "        st: Default::default(),",
          "        ms: Default::default(),",
          "        special: Default::default(),",
          "        accels: Default::default(),",
          "        pre: None,",
          "        quitset: ByteSet::new(),",
          "        flags: Default::default(),",
          "    };",
          "",
          "    let mut lazy = Lazy { dfa: &dfa, cache: &mut cache };",
          "    ",
          "    lazy.clear_cache();",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cache.trans.is_empty());",
          "    assert!(lazy.cache.starts.is_empty());",
          "    assert!(lazy.cache.states.is_empty());",
          "    assert!(lazy.cache.states_to_id.is_empty());",
          "    assert_eq!(lazy.cache.memory_usage_state, 0);",
          "    assert_eq!(lazy.cache.clear_count, 1);",
          "    assert_eq!(lazy.cache.bytes_searched, 0);",
          "    assert_eq!(lazy.cache.progress.as_ref().unwrap().start, 1);",
          "    assert!(lazy.cache.state_saver.take_saved().is_none());",
          "    assert_eq!(lazy.cache.state_saver.take_to_save().is_some(), true);",
          "    assert!(lazy.cache.state_saver.take_to_save().unwrap().0 != valid_id);",
          "    assert!(lazy.cache.state_saver.take_to_save().unwrap().1 == valid_state);"
        ],
        "code": [
          "{",
          "    let mut cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: Default::default(),",
          "        backtrack: Default::default(),",
          "        onepass: Default::default(),",
          "        hybrid: Default::default(),",
          "        revhybrid: Default::default(),",
          "    };",
          "",
          "    let progress = SearchProgress { start: 0, at: 1 };",
          "    cache.progress = Some(progress);",
          "    ",
          "    let valid_state = State(Arc::new([0u8, 1, 2].into()));",
          "    let valid_id = LazyStateID(1);",
          "    cache.state_saver = StateSaver::ToSave { id: valid_id, state: valid_state };",
          "",
          "    let dfa = DFA {",
          "        tt: Default::default(),",
          "        st: Default::default(),",
          "        ms: Default::default(),",
          "        special: Default::default(),",
          "        accels: Default::default(),",
          "        pre: None,",
          "        quitset: ByteSet::new(),",
          "        flags: Default::default(),",
          "    };",
          "",
          "    let mut lazy = Lazy { dfa: &dfa, cache: &mut cache };",
          "    ",
          "    lazy.clear_cache();",
          "    assert!(lazy.cache.trans.is_empty());",
          "    assert!(lazy.cache.starts.is_empty());",
          "    assert!(lazy.cache.states.is_empty());",
          "    assert!(lazy.cache.states_to_id.is_empty());",
          "    assert_eq!(lazy.cache.memory_usage_state, 0);",
          "    assert_eq!(lazy.cache.clear_count, 1);",
          "    assert_eq!(lazy.cache.bytes_searched, 0);",
          "    assert_eq!(lazy.cache.progress.as_ref().unwrap().start, 1);",
          "    assert!(lazy.cache.state_saver.take_saved().is_none());",
          "    assert_eq!(lazy.cache.state_saver.take_to_save().is_some(), true);",
          "    assert!(lazy.cache.state_saver.take_to_save().unwrap().0 != valid_id);",
          "    assert!(lazy.cache.state_saver.take_to_save().unwrap().1 == valid_state);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: Default::default(),",
          "        backtrack: Default::default(),",
          "        onepass: Default::default(),",
          "        hybrid: Default::default(),",
          "        revhybrid: Default::default(),",
          "    };",
          "",
          "    let progress = SearchProgress { start: 0, at: 2 };",
          "    cache.progress = Some(progress);",
          "    ",
          "    let valid_state = State(Arc::new([3u8, 4, 5].into()));",
          "    let valid_id = LazyStateID(2);",
          "    cache.state_saver = StateSaver::ToSave { id: valid_id, state: valid_state };",
          "",
          "    let dfa = DFA {",
          "        tt: Default::default(),",
          "        st: Default::default(),",
          "        ms: Default::default(),",
          "        special: Default::default(),",
          "        accels: Default::default(),",
          "        pre: None,",
          "        quitset: ByteSet::new(),",
          "        flags: Default::default(),",
          "    };",
          "",
          "    let mut lazy = Lazy { dfa: &dfa, cache: &mut cache };",
          "    ",
          "    lazy.clear_cache();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cache.clear_count, 1);",
          "    assert_eq!(cache.bytes_searched, 0);",
          "    assert_eq!(cache.memory_usage_state, 0);",
          "    assert!(cache.trans.is_empty());",
          "    assert!(cache.starts.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert!(lazy.cache.progress.as_ref().unwrap().start, 2);",
          "    assert!(lazy.cache.state_saver.take_saved().is_some());",
          "    assert!(cache.state_saver.take_to_save().is_some());",
          "    assert!(!lazy.as_ref().is_sentinel(valid_id));"
        ],
        "code": [
          "{",
          "    let mut cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: Default::default(),",
          "        backtrack: Default::default(),",
          "        onepass: Default::default(),",
          "        hybrid: Default::default(),",
          "        revhybrid: Default::default(),",
          "    };",
          "",
          "    let progress = SearchProgress { start: 0, at: 2 };",
          "    cache.progress = Some(progress);",
          "    ",
          "    let valid_state = State(Arc::new([3u8, 4, 5].into()));",
          "    let valid_id = LazyStateID(2);",
          "    cache.state_saver = StateSaver::ToSave { id: valid_id, state: valid_state };",
          "",
          "    let dfa = DFA {",
          "        tt: Default::default(),",
          "        st: Default::default(),",
          "        ms: Default::default(),",
          "        special: Default::default(),",
          "        accels: Default::default(),",
          "        pre: None,",
          "        quitset: ByteSet::new(),",
          "        flags: Default::default(),",
          "    };",
          "",
          "    let mut lazy = Lazy { dfa: &dfa, cache: &mut cache };",
          "    ",
          "    lazy.clear_cache();",
          "    assert_eq!(cache.clear_count, 1);",
          "    assert_eq!(cache.bytes_searched, 0);",
          "    assert_eq!(cache.memory_usage_state, 0);",
          "    assert!(cache.trans.is_empty());",
          "    assert!(cache.starts.is_empty());",
          "    assert!(cache.states.is_empty());",
          "    assert!(cache.states_to_id.is_empty());",
          "    assert!(lazy.cache.progress.as_ref().unwrap().start, 2);",
          "    assert!(lazy.cache.state_saver.take_saved().is_some());",
          "    assert!(cache.state_saver.take_to_save().is_some());",
          "    assert!(!lazy.as_ref().is_sentinel(valid_id));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]