[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\" \").unwrap();",
          "    let hay = \"Mary had a little lamb\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.haystack, \"Mary had a little lamb\");",
          "    assert!(result.finder.haystack == \"Mary had a little lamb\");",
          "    assert_eq!(result.last, 0);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\" \").unwrap();",
          "    let hay = \"Mary had a little lamb\";",
          "    let result = re.split(hay);",
          "    assert_eq!(result.haystack, \"Mary had a little lamb\");",
          "    assert!(result.finder.haystack == \"Mary had a little lamb\");",
          "    assert_eq!(result.last, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"X\").unwrap();",
          "    let hay = \"\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Split { haystack: \"\", finder: re.find_iter(\"\"), last: 0 });"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"X\").unwrap();",
          "    let hay = \"\";",
          "    let result = re.split(hay);",
          "    assert_eq!(result, Split { haystack: \"\", finder: re.find_iter(\"\"), last: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"X\").unwrap();",
          "    let hay = \"lionXXtigerXleopard\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.haystack, \"lionXXtigerXleopard\");",
          "    assert_eq!(result.last, 0);",
          "    assert!(result.finder.haystack == \"lionXXtigerXleopard\");",
          "    assert!(result.finder.it == re.pikevm.find_iter(re.pool.get(), hay.as_bytes()));"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"X\").unwrap();",
          "    let hay = \"lionXXtigerXleopard\";",
          "    let result = re.split(hay);",
          "    assert_eq!(result.haystack, \"lionXXtigerXleopard\");",
          "    assert_eq!(result.last, 0);",
          "    assert!(result.finder.haystack == \"lionXXtigerXleopard\");",
          "    assert!(result.finder.it == re.pikevm.find_iter(re.pool.get(), hay.as_bytes()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"::\").unwrap();",
          "    let hay = \"lion::tiger::leopard\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.haystack, \"lion::tiger::leopard\");",
          "    assert_eq!(result.last, 0);",
          "    assert!(result.finder.haystack == hay);",
          "    assert!(result.finder.it.is_some());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"::\").unwrap();",
          "    let hay = \"lion::tiger::leopard\";",
          "    let result = re.split(hay);",
          "    assert_eq!(result.haystack, \"lion::tiger::leopard\");",
          "    assert_eq!(result.last, 0);",
          "    assert!(result.finder.haystack == hay);",
          "    assert!(result.finder.it.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"X\").unwrap();",
          "    let hay = \"XXXXaXXbXc\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.haystack, \"XXXXaXXbXc\");",
          "    assert_eq!(result.last, 0);",
          "    assert_eq!(result.finder.haystack, \"XXXXaXXbXc\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"X\").unwrap();",
          "    let hay = \"XXXXaXXbXc\";",
          "    let result = re.split(hay);",
          "    assert_eq!(result.haystack, \"XXXXaXXbXc\");",
          "    assert_eq!(result.last, 0);",
          "    assert_eq!(result.finder.haystack, \"XXXXaXXbXc\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"0\").unwrap();",
          "    let hay = \"010\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    let re = Regex::new(r\"0\").unwrap();",
          "    let hay = \"010\";",
          "    let expected = Split { haystack: hay, finder: re.find_iter(hay), last: 0 };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"0\").unwrap();",
          "    let hay = \"010\";",
          "    let result = re.split(hay);",
          "    let re = Regex::new(r\"0\").unwrap();",
          "    let hay = \"010\";",
          "    let expected = Split { haystack: hay, finder: re.find_iter(hay), last: 0 };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let hay = \"rust\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.haystack, \"rust\");",
          "    assert_eq!(result.last, 0);",
          "    assert!(result.finder.it.is_some());",
          "    assert_eq!(result.finder.haystack, \"rust\");"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let hay = \"rust\";",
          "    let result = re.split(hay);",
          "    assert_eq!(result.haystack, \"rust\");",
          "    assert_eq!(result.last, 0);",
          "    assert!(result.finder.it.is_some());",
          "    assert_eq!(result.finder.haystack, \"rust\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let hay = \"☃\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.haystack, \"☃\");",
          "    assert_eq!(result.last, 0);",
          "    assert!(result.finder.haystack == \"☃\");",
          "    assert!(result.finder.it.len() >= 0);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let hay = \"☃\";",
          "    let result = re.split(hay);",
          "    assert_eq!(result.haystack, \"☃\");",
          "    assert_eq!(result.last, 0);",
          "    assert!(result.finder.haystack == \"☃\");",
          "    assert!(result.finder.it.len() >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\" \").unwrap();",
          "    let hay = \"    a  b c\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    let expected = Split { haystack: hay, finder: re.find_iter(hay), last: 0 };",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\" \").unwrap();",
          "    let hay = \"    a  b c\";",
          "    let result = re.split(hay);",
          "    let expected = Split { haystack: hay, finder: re.find_iter(hay), last: 0 };",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\" +\").unwrap();",
          "    let hay = \"    a  b c\";",
          "    let result = re.split(hay);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.haystack, hay);",
          "    assert_eq!(result.last, 0);",
          "    assert_eq!(result.finder.haystack, hay);",
          "    assert!(result.finder.it.is_some());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\" +\").unwrap();",
          "    let hay = \"    a  b c\";",
          "    let result = re.split(hay);",
          "    assert_eq!(result.haystack, hay);",
          "    assert_eq!(result.last, 0);",
          "    assert_eq!(result.finder.haystack, hay);",
          "    assert!(result.finder.it.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]