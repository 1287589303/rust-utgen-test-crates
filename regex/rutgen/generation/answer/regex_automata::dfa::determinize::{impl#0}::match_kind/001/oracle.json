[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut config = Config::new();",
          "    let kind = MatchKind::All;",
          "    config.match_kind(kind);",
          "}"
        ],
        "oracle": [
          "    let mut config = Config::new();",
          "    let kind = MatchKind::All;",
          "    assert_eq!(config.match_kind(kind), &mut config);",
          "    ",
          "    let kind_leftmost = MatchKind::LeftmostFirst;",
          "    assert_eq!(config.match_kind(kind_leftmost), &mut config);",
          "    ",
          "    let kind_default = MatchKind::LeftmostFirst;",
          "    assert_eq!(config.match_kind(MatchKind::LeftmostFirst), &mut config);",
          "    ",
          "    let kind_changed = MatchKind::All;",
          "    config.match_kind(kind_changed);",
          "    assert_eq!(config.match_kind(kind_changed), &mut config);"
        ],
        "code": [
          "{",
          "    let mut config = Config::new();",
          "    let kind = MatchKind::All;",
          "    config.match_kind(kind);",
          "    let mut config = Config::new();",
          "    let kind = MatchKind::All;",
          "    assert_eq!(config.match_kind(kind), &mut config);",
          "    ",
          "    let kind_leftmost = MatchKind::LeftmostFirst;",
          "    assert_eq!(config.match_kind(kind_leftmost), &mut config);",
          "    ",
          "    let kind_default = MatchKind::LeftmostFirst;",
          "    assert_eq!(config.match_kind(MatchKind::LeftmostFirst), &mut config);",
          "    ",
          "    let kind_changed = MatchKind::All;",
          "    config.match_kind(kind_changed);",
          "    assert_eq!(config.match_kind(kind_changed), &mut config);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut config = Config::new();",
          "    let kind = MatchKind::LeftmostFirst;",
          "    config.match_kind(kind);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(config.match_kind(MatchKind::LeftmostFirst).match_kind, MatchKind::LeftmostFirst);",
          "    assert_eq!(config.match_kind(MatchKind::All).match_kind, MatchKind::All);",
          "    assert!(std::ptr::eq(config.match_kind(MatchKind::LeftmostFirst), config.match_kind(MatchKind::LeftmostFirst)));",
          "    assert!(std::ptr::eq(config.match_kind(MatchKind::All), config.match_kind(MatchKind::All)));"
        ],
        "code": [
          "{",
          "    let mut config = Config::new();",
          "    let kind = MatchKind::LeftmostFirst;",
          "    config.match_kind(kind);",
          "    assert_eq!(config.match_kind(MatchKind::LeftmostFirst).match_kind, MatchKind::LeftmostFirst);",
          "    assert_eq!(config.match_kind(MatchKind::All).match_kind, MatchKind::All);",
          "    assert!(std::ptr::eq(config.match_kind(MatchKind::LeftmostFirst), config.match_kind(MatchKind::LeftmostFirst)));",
          "    assert!(std::ptr::eq(config.match_kind(MatchKind::All), config.match_kind(MatchKind::All)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]