[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, re.captures_len());",
          "    assert_eq!(2, Regex::new(r\"(foo)\").unwrap().captures_len());",
          "    assert_eq!(5, Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap().captures_len());",
          "    assert_eq!(1, Regex::new(r\"foo\").unwrap().captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(1, re.captures_len());",
          "    assert_eq!(2, Regex::new(r\"(foo)\").unwrap().captures_len());",
          "    assert_eq!(5, Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap().captures_len());",
          "    assert_eq!(1, Regex::new(r\"foo\").unwrap().captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, re.captures_len());  // Test for empty regex should return 1 capture group (implicit group)",
          "    let re = Regex::new(r\"foo\").unwrap(); assert_eq!(1, re.captures_len());  // Test for \"foo\" should return 1 capture group",
          "    let re = Regex::new(r\"(foo)\").unwrap(); assert_eq!(2, re.captures_len());  // Test for \"(foo)\" should return 2 capture groups",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap(); assert_eq!(5, re.captures_len());  // Test for complex regex with named groups should return 5 capture groups",
          "    let re = Regex::new(r\"[a&&b]\").unwrap(); assert_eq!(1, re.captures_len());  // Test for regex with intersection should return 1 capture group"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(1, re.captures_len());  // Test for empty regex should return 1 capture group (implicit group)",
          "    let re = Regex::new(r\"foo\").unwrap(); assert_eq!(1, re.captures_len());  // Test for \"foo\" should return 1 capture group",
          "    let re = Regex::new(r\"(foo)\").unwrap(); assert_eq!(2, re.captures_len());  // Test for \"(foo)\" should return 2 capture groups",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap(); assert_eq!(5, re.captures_len());  // Test for complex regex with named groups should return 5 capture groups",
          "    let re = Regex::new(r\"[a&&b]\").unwrap(); assert_eq!(1, re.captures_len());  // Test for regex with intersection should return 1 capture group",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(?:test)\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(?:test)\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let _ = Regex::new(r\"(\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, Regex::new(r\"foo\").unwrap().captures_len());",
          "    assert_eq!(2, Regex::new(r\"(foo)\").unwrap().captures_len());",
          "    assert_eq!(5, Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap().captures_len());",
          "    assert_eq!(1, Regex::new(r\"[a&&b]\").unwrap().captures_len());",
          "    assert!(std::panic::catch_unwind(|| { Regex::new(r\"(\"); }).is_err());"
        ],
        "code": [
          "{",
          "    let _ = Regex::new(r\"(\");",
          "    assert_eq!(1, Regex::new(r\"foo\").unwrap().captures_len());",
          "    assert_eq!(2, Regex::new(r\"(foo)\").unwrap().captures_len());",
          "    assert_eq!(5, Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap().captures_len());",
          "    assert_eq!(1, Regex::new(r\"[a&&b]\").unwrap().captures_len());",
          "    assert!(std::panic::catch_unwind(|| { Regex::new(r\"(\"); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"((a)(b)(c))\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(4, re.captures_len());",
          "    let re = Regex::new(r\"\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(?<name>foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(foo|bar)\").unwrap();",
          "    assert_eq!(3, re.captures_len());",
          "    let re = Regex::new(r\"((?P<first>a)(?P<second>b)(?P<third>c))\").unwrap();",
          "    assert_eq!(4, re.captures_len());",
          "    let re = Regex::new(r\"(?P<name>(?P<inner>(foo|bar)))\").unwrap();",
          "    assert_eq!(3, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"((a)(b)(c))\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(4, re.captures_len());",
          "    let re = Regex::new(r\"\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    let re = Regex::new(r\"(?<name>foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    let re = Regex::new(r\"(foo|bar)\").unwrap();",
          "    assert_eq!(3, re.captures_len());",
          "    let re = Regex::new(r\"((?P<first>a)(?P<second>b)(?P<third>c))\").unwrap();",
          "    assert_eq!(4, re.captures_len());",
          "    let re = Regex::new(r\"(?P<name>(?P<inner>(foo|bar)))\").unwrap();",
          "    assert_eq!(3, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"^\\d+$\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1, re.captures_len());",
          "    ",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    ",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    ",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    ",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"^\\d+$\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(1, re.captures_len());",
          "    ",
          "    let re = Regex::new(r\"foo\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "    ",
          "    let re = Regex::new(r\"(foo)\").unwrap();",
          "    assert_eq!(2, re.captures_len());",
          "    ",
          "    let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();",
          "    assert_eq!(5, re.captures_len());",
          "    ",
          "    let re = Regex::new(r\"[a&&b]\").unwrap();",
          "    assert_eq!(1, re.captures_len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = Regex::new(r\"(foo)(bar)(baz)\").unwrap();",
          "    let _ = re.captures_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(re.captures_len(), 4);",
          "    let re = Regex::new(r\"\").unwrap();",
          "    assert_eq!(re.captures_len(), 1);",
          "    let re = Regex::new(r\"(abc)(def)(ghi)(jkl)\").unwrap();",
          "    assert_eq!(re.captures_len(), 5);",
          "    let re = Regex::new(r\"(?<name>foo)(?<value>bar)\").unwrap();",
          "    assert_eq!(re.captures_len(), 3);",
          "    let re = Regex::new(r\"(?<a>.)(?P<b>.)\").unwrap();",
          "    assert_eq!(re.captures_len(), 3);",
          "    let re = Regex::new(r\"(foo|bar)\").unwrap();",
          "    assert_eq!(re.captures_len(), 2);",
          "    let re = Regex::new(r\"(?<x>a)(?<y>b)(?P<z>c)\").unwrap();",
          "    assert_eq!(re.captures_len(), 4);",
          "    let re = Regex::new(r\"(.*)\").unwrap();",
          "    assert_eq!(re.captures_len(), 2);",
          "    let re = Regex::new(r\"(?<name>.*?)(?<id>\\d+)\").unwrap();",
          "    assert_eq!(re.captures_len(), 3);"
        ],
        "code": [
          "{",
          "    let re = Regex::new(r\"(foo)(bar)(baz)\").unwrap();",
          "    let _ = re.captures_len();",
          "    assert_eq!(re.captures_len(), 4);",
          "    let re = Regex::new(r\"\").unwrap();",
          "    assert_eq!(re.captures_len(), 1);",
          "    let re = Regex::new(r\"(abc)(def)(ghi)(jkl)\").unwrap();",
          "    assert_eq!(re.captures_len(), 5);",
          "    let re = Regex::new(r\"(?<name>foo)(?<value>bar)\").unwrap();",
          "    assert_eq!(re.captures_len(), 3);",
          "    let re = Regex::new(r\"(?<a>.)(?P<b>.)\").unwrap();",
          "    assert_eq!(re.captures_len(), 3);",
          "    let re = Regex::new(r\"(foo|bar)\").unwrap();",
          "    assert_eq!(re.captures_len(), 2);",
          "    let re = Regex::new(r\"(?<x>a)(?<y>b)(?P<z>c)\").unwrap();",
          "    assert_eq!(re.captures_len(), 4);",
          "    let re = Regex::new(r\"(.*)\").unwrap();",
          "    assert_eq!(re.captures_len(), 2);",
          "    let re = Regex::new(r\"(?<name>.*?)(?<id>\\d+)\").unwrap();",
          "    assert_eq!(re.captures_len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]