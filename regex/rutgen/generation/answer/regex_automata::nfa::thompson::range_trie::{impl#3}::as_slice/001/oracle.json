[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let split = Split {",
          "        partitions: [SplitRange::Old(Utf8Range::new(0, 0)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0))],",
          "        len: 0,",
          "    };",
          "    let _result = split.as_slice();",
          "}"
        ],
        "oracle": [
          "    _result.should_eq(&[] as &[SplitRange]);",
          "    ",
          "    let split = Split {",
          "    partitions: [SplitRange::New(Utf8Range::new(1, 1)),",
          "    SplitRange::New(Utf8Range::new(2, 2)),",
          "    SplitRange::New(Utf8Range::new(3, 3))],",
          "    len: 1,",
          "    };",
          "    _result.should_eq(&[SplitRange::New(Utf8Range::new(1, 1))]);",
          "    ",
          "    let split = Split {",
          "    partitions: [SplitRange::Both(Utf8Range::new(4, 4)),",
          "    SplitRange::Both(Utf8Range::new(5, 5)),",
          "    SplitRange::Both(Utf8Range::new(6, 6))],",
          "    len: 2,",
          "    };",
          "    _result.should_eq(&[SplitRange::Both(Utf8Range::new(4, 4)),",
          "    SplitRange::Both(Utf8Range::new(5, 5))]);",
          "    ",
          "    let split = Split {",
          "    partitions: [SplitRange::Old(Utf8Range::new(7, 7)),",
          "    SplitRange::Old(Utf8Range::new(8, 8)),",
          "    SplitRange::Old(Utf8Range::new(9, 9))],",
          "    len: 3,",
          "    };",
          "    _result.should_eq(&[SplitRange::Old(Utf8Range::new(7, 7)),",
          "    SplitRange::Old(Utf8Range::new(8, 8)),",
          "    SplitRange::Old(Utf8Range::new(9, 9))]);"
        ],
        "code": [
          "{",
          "    let split = Split {",
          "        partitions: [SplitRange::Old(Utf8Range::new(0, 0)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0))],",
          "        len: 0,",
          "    };",
          "    let _result = split.as_slice();",
          "    _result.should_eq(&[] as &[SplitRange]);",
          "    ",
          "    let split = Split {",
          "    partitions: [SplitRange::New(Utf8Range::new(1, 1)),",
          "    SplitRange::New(Utf8Range::new(2, 2)),",
          "    SplitRange::New(Utf8Range::new(3, 3))],",
          "    len: 1,",
          "    };",
          "    _result.should_eq(&[SplitRange::New(Utf8Range::new(1, 1))]);",
          "    ",
          "    let split = Split {",
          "    partitions: [SplitRange::Both(Utf8Range::new(4, 4)),",
          "    SplitRange::Both(Utf8Range::new(5, 5)),",
          "    SplitRange::Both(Utf8Range::new(6, 6))],",
          "    len: 2,",
          "    };",
          "    _result.should_eq(&[SplitRange::Both(Utf8Range::new(4, 4)),",
          "    SplitRange::Both(Utf8Range::new(5, 5))]);",
          "    ",
          "    let split = Split {",
          "    partitions: [SplitRange::Old(Utf8Range::new(7, 7)),",
          "    SplitRange::Old(Utf8Range::new(8, 8)),",
          "    SplitRange::Old(Utf8Range::new(9, 9))],",
          "    len: 3,",
          "    };",
          "    _result.should_eq(&[SplitRange::Old(Utf8Range::new(7, 7)),",
          "    SplitRange::Old(Utf8Range::new(8, 8)),",
          "    SplitRange::Old(Utf8Range::new(9, 9))]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let split = Split {",
          "        partitions: [SplitRange::Old(Utf8Range::new(0, 1)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0))],",
          "        len: 1,",
          "    };",
          "    let _result = split.as_slice();",
          "}"
        ],
        "oracle": [
          "    let expected_partition = [SplitRange::Old(Utf8Range::new(0, 1))];",
          "    assert_eq!(_result, &expected_partition);",
          "    assert_eq!(_result.len(), 1);",
          "    assert!(matches!(_result[0], SplitRange::Old(_)));",
          "    let split2 = Split { partitions: [SplitRange::New(Utf8Range::new(1, 2)),",
          "    SplitRange::Old(Utf8Range::new(0, 0)),",
          "    SplitRange::Old(Utf8Range::new(0, 0))],",
          "    len: 1 };",
          "    let _result2 = split2.as_slice();",
          "    let expected_partition2 = [SplitRange::New(Utf8Range::new(1, 2))];",
          "    assert_eq!(_result2, &expected_partition2);",
          "    let split3 = Split { partitions: [SplitRange::Both(Utf8Range::new(2, 3)),",
          "    SplitRange::Old(Utf8Range::new(0, 0)),",
          "    SplitRange::New(Utf8Range::new(1, 2))],",
          "    len: 2 };",
          "    let _result3 = split3.as_slice();",
          "    let expected_partition3 = [SplitRange::Both(Utf8Range::new(2, 3)),",
          "    SplitRange::Old(Utf8Range::new(0, 0))];",
          "    assert_eq!(_result3, &expected_partition3);",
          "    assert_eq!(_result3.len(), 2);"
        ],
        "code": [
          "{",
          "    let split = Split {",
          "        partitions: [SplitRange::Old(Utf8Range::new(0, 1)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0))],",
          "        len: 1,",
          "    };",
          "    let _result = split.as_slice();",
          "    let expected_partition = [SplitRange::Old(Utf8Range::new(0, 1))];",
          "    assert_eq!(_result, &expected_partition);",
          "    assert_eq!(_result.len(), 1);",
          "    assert!(matches!(_result[0], SplitRange::Old(_)));",
          "    let split2 = Split { partitions: [SplitRange::New(Utf8Range::new(1, 2)),",
          "    SplitRange::Old(Utf8Range::new(0, 0)),",
          "    SplitRange::Old(Utf8Range::new(0, 0))],",
          "    len: 1 };",
          "    let _result2 = split2.as_slice();",
          "    let expected_partition2 = [SplitRange::New(Utf8Range::new(1, 2))];",
          "    assert_eq!(_result2, &expected_partition2);",
          "    let split3 = Split { partitions: [SplitRange::Both(Utf8Range::new(2, 3)),",
          "    SplitRange::Old(Utf8Range::new(0, 0)),",
          "    SplitRange::New(Utf8Range::new(1, 2))],",
          "    len: 2 };",
          "    let _result3 = split3.as_slice();",
          "    let expected_partition3 = [SplitRange::Both(Utf8Range::new(2, 3)),",
          "    SplitRange::Old(Utf8Range::new(0, 0))];",
          "    assert_eq!(_result3, &expected_partition3);",
          "    assert_eq!(_result3.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let split = Split {",
          "        partitions: [SplitRange::Old(Utf8Range::new(1, 2)), ",
          "                     SplitRange::New(Utf8Range::new(3, 4)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0))],",
          "        len: 2,",
          "    };",
          "    let _result = split.as_slice();",
          "}"
        ],
        "oracle": [
          "    _result.should_eq(&[SplitRange::Old(Utf8Range::new(1, 2)),",
          "    SplitRange::New(Utf8Range::new(3, 4))]);"
        ],
        "code": [
          "{",
          "    let split = Split {",
          "        partitions: [SplitRange::Old(Utf8Range::new(1, 2)), ",
          "                     SplitRange::New(Utf8Range::new(3, 4)), ",
          "                     SplitRange::Old(Utf8Range::new(0, 0))],",
          "        len: 2,",
          "    };",
          "    let _result = split.as_slice();",
          "    _result.should_eq(&[SplitRange::Old(Utf8Range::new(1, 2)),",
          "    SplitRange::New(Utf8Range::new(3, 4))]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let split = Split {",
          "        partitions: [SplitRange::Both(Utf8Range::new(0, 1)), ",
          "                     SplitRange::New(Utf8Range::new(2, 3)), ",
          "                     SplitRange::Old(Utf8Range::new(4, 5))],",
          "        len: 3,",
          "    };",
          "    let _result = split.as_slice();",
          "}"
        ],
        "oracle": [
          "    _result should equal &split.partitions[..split.len];",
          "    assert_eq!(_result[0], SplitRange::Both(Utf8Range::new(0, 1)));",
          "    assert_eq!(_result[1], SplitRange::New(Utf8Range::new(2, 3)));",
          "    assert_eq!(_result[2], SplitRange::Old(Utf8Range::new(4, 5)));",
          "    assert_eq!(_result.len(), split.len);"
        ],
        "code": [
          "{",
          "    let split = Split {",
          "        partitions: [SplitRange::Both(Utf8Range::new(0, 1)), ",
          "                     SplitRange::New(Utf8Range::new(2, 3)), ",
          "                     SplitRange::Old(Utf8Range::new(4, 5))],",
          "        len: 3,",
          "    };",
          "    let _result = split.as_slice();",
          "    _result should equal &split.partitions[..split.len];",
          "    assert_eq!(_result[0], SplitRange::Both(Utf8Range::new(0, 1)));",
          "    assert_eq!(_result[1], SplitRange::New(Utf8Range::new(2, 3)));",
          "    assert_eq!(_result[2], SplitRange::Old(Utf8Range::new(4, 5)));",
          "    assert_eq!(_result.len(), split.len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]