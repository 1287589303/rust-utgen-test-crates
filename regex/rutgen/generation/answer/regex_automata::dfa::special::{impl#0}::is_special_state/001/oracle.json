[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { max: StateID(5), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(4);",
          "    special.is_special_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_special_state(StateID(0)), true);",
          "    assert_eq!(special.is_special_state(StateID(5)), true);",
          "    assert_eq!(special.is_special_state(StateID(6)), false);",
          "    assert_eq!(special.is_special_state(StateID(7)), false);",
          "    assert_eq!(special.is_special_state(StateID(4)), true);"
        ],
        "code": [
          "{",
          "    let special = Special { max: StateID(5), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(4);",
          "    special.is_special_state(id);",
          "    assert_eq!(special.is_special_state(StateID(0)), true);",
          "    assert_eq!(special.is_special_state(StateID(5)), true);",
          "    assert_eq!(special.is_special_state(StateID(6)), false);",
          "    assert_eq!(special.is_special_state(StateID(7)), false);",
          "    assert_eq!(special.is_special_state(StateID(4)), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { max: StateID(5), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(5);",
          "    special.is_special_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_special_state(StateID(4)), true);",
          "    assert_eq!(special.is_special_state(StateID(5)), true);",
          "    assert_eq!(special.is_special_state(StateID(6)), false);",
          "    assert_eq!(special.is_special_state(StateID(3)), true);",
          "    assert_eq!(special.is_special_state(StateID(0)), false);"
        ],
        "code": [
          "{",
          "    let special = Special { max: StateID(5), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(5);",
          "    special.is_special_state(id);",
          "    assert_eq!(special.is_special_state(StateID(4)), true);",
          "    assert_eq!(special.is_special_state(StateID(5)), true);",
          "    assert_eq!(special.is_special_state(StateID(6)), false);",
          "    assert_eq!(special.is_special_state(StateID(3)), true);",
          "    assert_eq!(special.is_special_state(StateID(0)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { max: StateID(5), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(6);",
          "    special.is_special_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_special_state(StateID(5)), true);",
          "    assert_eq!(special.is_special_state(StateID(4)), true);",
          "    assert_eq!(special.is_special_state(StateID(3)), true);",
          "    assert_eq!(special.is_special_state(StateID(2)), true);",
          "    assert_eq!(special.is_special_state(StateID(1)), true);",
          "    assert_eq!(special.is_special_state(StateID(0)), false);",
          "    assert_eq!(special.is_special_state(StateID(7)), false);"
        ],
        "code": [
          "{",
          "    let special = Special { max: StateID(5), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(6);",
          "    special.is_special_state(id);",
          "    assert_eq!(special.is_special_state(StateID(5)), true);",
          "    assert_eq!(special.is_special_state(StateID(4)), true);",
          "    assert_eq!(special.is_special_state(StateID(3)), true);",
          "    assert_eq!(special.is_special_state(StateID(2)), true);",
          "    assert_eq!(special.is_special_state(StateID(1)), true);",
          "    assert_eq!(special.is_special_state(StateID(0)), false);",
          "    assert_eq!(special.is_special_state(StateID(7)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { max: StateID(5), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(0);",
          "    special.is_special_state(id);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_special_state(StateID(0)), false);",
          "    assert_eq!(special.is_special_state(StateID(5)), true);",
          "    assert_eq!(special.is_special_state(StateID(6)), false);",
          "    assert_eq!(special.is_special_state(StateID(3)), true);"
        ],
        "code": [
          "{",
          "    let special = Special { max: StateID(5), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(0);",
          "    special.is_special_state(id);",
          "    assert_eq!(special.is_special_state(StateID(0)), false);",
          "    assert_eq!(special.is_special_state(StateID(5)), true);",
          "    assert_eq!(special.is_special_state(StateID(6)), false);",
          "    assert_eq!(special.is_special_state(StateID(3)), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { max: StateID(0), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(0);",
          "    special.is_special_state(id);",
          "",
          "    let id_greater = StateID(1);",
          "    special.is_special_state(id_greater);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.is_special_state(StateID(0)), true);",
          "    assert_eq!(special.is_special_state(StateID(1)), false);"
        ],
        "code": [
          "{",
          "    let special = Special { max: StateID(0), quit_id: StateID(1), min_match: StateID(2), max_match: StateID(3), min_accel: StateID(4), max_accel: StateID(5), min_start: StateID(6), max_start: StateID(7) };",
          "    let id = StateID(0);",
          "    special.is_special_state(id);",
          "",
          "    let id_greater = StateID(1);",
          "    special.is_special_state(id_greater);",
          "    assert_eq!(special.is_special_state(StateID(0)), true);",
          "    assert_eq!(special.is_special_state(StateID(1)), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]