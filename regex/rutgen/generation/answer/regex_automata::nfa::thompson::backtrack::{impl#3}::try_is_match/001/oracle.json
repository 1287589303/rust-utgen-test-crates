[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"\"[..]).span(0..0);",
          "    re.try_is_match(&mut cache, input).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo12345bar\"[..]).span(0..12)).unwrap());",
          "    assert!(!re.try_is_match(&mut cache, Input::new(&b\"foobar\"[..]).span(0..6)).unwrap());",
          "    assert!(!re.try_is_match(&mut cache, Input::new(&b\"bar\"[..]).span(0..3)).unwrap());",
          "    assert!(!re.try_is_match(&mut cache, Input::new(&b\"foo12345baz\"[..]).span(0..12)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo9bar\"[..]).span(0..7)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo0bar\"[..]).span(0..7)).unwrap());",
          "    assert!(!re.try_is_match(&mut cache, Input::new(&b\"foo00bar\"[..]).span(0..8)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo123bar\"[..]).span(0..8)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo456bar\"[..]).span(0..8)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo9bar\"[..]).span(0..7)).unwrap());"
        ],
        "code": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"\"[..]).span(0..0);",
          "    re.try_is_match(&mut cache, input).unwrap();",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo12345bar\"[..]).span(0..12)).unwrap());",
          "    assert!(!re.try_is_match(&mut cache, Input::new(&b\"foobar\"[..]).span(0..6)).unwrap());",
          "    assert!(!re.try_is_match(&mut cache, Input::new(&b\"bar\"[..]).span(0..3)).unwrap());",
          "    assert!(!re.try_is_match(&mut cache, Input::new(&b\"foo12345baz\"[..]).span(0..12)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo9bar\"[..]).span(0..7)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo0bar\"[..]).span(0..7)).unwrap());",
          "    assert!(!re.try_is_match(&mut cache, Input::new(&b\"foo00bar\"[..]).span(0..8)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo123bar\"[..]).span(0..8)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo456bar\"[..]).span(0..8)).unwrap());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo9bar\"[..]).span(0..7)).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foobar\"[..]).span(0..6);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "}"
        ],
        "oracle": [
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).span(0..12);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"☃\"[..]).span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"☃\"[..]).span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"barfoo123\"[..]).span(0..11);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);"
        ],
        "code": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foobar\"[..]).span(0..6);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).span(0..12);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"☃\"[..]).span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"☃\"[..]).span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"barfoo123\"[..]).span(0..11);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).span(0..12);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "}"
        ],
        "oracle": [
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).span(0..12);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let input = Input::new(&b\"foobar\"[..]).span(0..6);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::new(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::builder()",
          "    .thompson(NFA::config().utf8(false))",
          "    .build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);"
        ],
        "code": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).span(0..12);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).span(0..12);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let input = Input::new(&b\"foobar\"[..]).span(0..6);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::new(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::builder()",
          "    .thompson(NFA::config().utf8(false))",
          "    .build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = BoundedBacktracker::new(\"^foo[0-9]+bar$\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo123bar\"[..]).anchored(Anchored::Yes).span(0..9);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "}"
        ],
        "oracle": [
          "    let re = BoundedBacktracker::new(\"^foo[0-9]+bar$\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo123bar\"[..]).anchored(Anchored::Yes).span(0..9);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);"
        ],
        "code": [
          "{",
          "    let re = BoundedBacktracker::new(\"^foo[0-9]+bar$\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo123bar\"[..]).anchored(Anchored::Yes).span(0..9);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    let re = BoundedBacktracker::new(\"^foo[0-9]+bar$\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo123bar\"[..]).anchored(Anchored::Yes).span(0..9);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).earliest(true).span(0..12);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "}"
        ],
        "oracle": [
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foofoobar\"[..]).earliest(true).span(0..10);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo123bar\"[..]).earliest(true).span(0..10);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").earliest(true).span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").earliest(true).span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);"
        ],
        "code": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).earliest(true).span(0..12);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foofoobar\"[..]).earliest(true).span(0..10);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo123bar\"[..]).earliest(true).span(0..10);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").earliest(true).span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").earliest(true).span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = BoundedBacktracker::builder()",
          "        .thompson(NFA::config().utf8(true))",
          "        .build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(0..1);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "}"
        ],
        "oracle": [
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(true)).build(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let result = re.try_is_match(&mut cache, \"foo12345bar\");",
          "    assert!(result.unwrap() == true);",
          "    let result = re.try_is_match(&mut cache, \"foobar\");",
          "    assert!(result.unwrap() == false);",
          "    let re = BoundedBacktracker::new(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);"
        ],
        "code": [
          "{",
          "    let re = BoundedBacktracker::builder()",
          "        .thompson(NFA::config().utf8(true))",
          "        .build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(0..1);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(true)).build(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let result = re.try_is_match(&mut cache, \"foo12345bar\");",
          "    assert!(result.unwrap() == true);",
          "    let result = re.try_is_match(&mut cache, \"foobar\");",
          "    assert!(result.unwrap() == false);",
          "    let re = BoundedBacktracker::new(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = BoundedBacktracker::builder()",
          "        .thompson(NFA::config().utf8(false))",
          "        .build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(0..1);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "}"
        ],
        "oracle": [
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(0..1);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let result = re.try_is_match(&mut cache, \"foo12345bar\");",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let result = re.try_is_match(&mut cache, \"foobar\");",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let result = re.try_is_match(&mut cache, \"foobarbaz\");",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let input = Input::new(\"foo123bar\").span(0..9);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let input = Input::new(\"12345\").span(0..5);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let input = Input::new(\"abacaba\").span(0..7);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);"
        ],
        "code": [
          "{",
          "    let re = BoundedBacktracker::builder()",
          "        .thompson(NFA::config().utf8(false))",
          "        .build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(0..1);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(0..1);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let result = re.try_is_match(&mut cache, \"foo12345bar\");",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let result = re.try_is_match(&mut cache, \"foobar\");",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let re = BoundedBacktracker::builder().thompson(NFA::config().utf8(false)).build(\"a*\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(\"☃\").span(1..2);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let result = re.try_is_match(&mut cache, \"foobarbaz\");",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let input = Input::new(\"foo123bar\").span(0..9);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == true);",
          "    ",
          "    let input = Input::new(\"12345\").span(0..5);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "    ",
          "    let input = Input::new(\"abacaba\").span(0..7);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.unwrap() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).span(0..20);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo12345baz\"[..]).span(0..20)).unwrap() == false);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foobar\"[..]).span(0..6)).unwrap() == false);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo123bar\"[..]).span(0..10)).unwrap() == true);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo12345bar\"[..]).span(0..20)).unwrap() == true);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo12bar\"[..]).span(0..8)).unwrap() == false);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"fo12345bar\"[..]).span(0..10)).unwrap() == false);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"12345bar\"[..]).span(0..9)).unwrap() == false);"
        ],
        "code": [
          "{",
          "    let re = BoundedBacktracker::new(\"foo[0-9]+bar\").unwrap();",
          "    let mut cache = re.create_cache();",
          "    let input = Input::new(&b\"foo12345bar\"[..]).span(0..20);",
          "    let result = re.try_is_match(&mut cache, input);",
          "    assert!(result.is_err());",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo12345baz\"[..]).span(0..20)).unwrap() == false);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foobar\"[..]).span(0..6)).unwrap() == false);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo123bar\"[..]).span(0..10)).unwrap() == true);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo12345bar\"[..]).span(0..20)).unwrap() == true);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"foo12bar\"[..]).span(0..8)).unwrap() == false);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"fo12345bar\"[..]).span(0..10)).unwrap() == false);",
          "    assert!(re.try_is_match(&mut cache, Input::new(&b\"12345bar\"[..]).span(0..9)).unwrap() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]