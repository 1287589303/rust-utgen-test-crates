[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 1);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 1);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 1);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 1);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 2);",
          "}"
        ],
        "oracle": [
          "    #[should_panic]",
          "    #[test]",
          "    fn test_resize_exceeding_capacity() {",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 1);",
          "    }",
          "    ",
          "    #[should_panic]",
          "    #[test]",
          "    fn test_resize_exceeding_stateid_limit() {",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 2);",
          "    }"
        ],
        "code": [
          "{",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 2);",
          "    #[should_panic]",
          "    #[test]",
          "    fn test_resize_exceeding_capacity() {",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 1);",
          "    }",
          "    ",
          "    #[should_panic]",
          "    #[test]",
          "    fn test_resize_exceeding_stateid_limit() {",
          "    let mut sparse_set = SparseSet::new(10);",
          "    sparse_set.resize(u32::MAX.as_usize() + 2);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]