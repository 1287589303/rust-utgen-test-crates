[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [u8; 2] = [10, 20];",
          "    let haystack: &[u8] = &[5, 10, 15, 20, 25, 30];",
          "    let at: usize = 6; // valid index",
          "    ",
          "    find_rev(&needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[10, 20], &[5, 10, 15, 20, 25, 30], 6), Some(3));",
          "    assert_eq!(find_rev(&[10, 20], &[5, 10, 15, 20, 25, 10], 6), Some(5));",
          "    assert_eq!(find_rev(&[10, 20], &[20, 10, 15, 20, 25, 30], 6), Some(0));",
          "    assert!(find_rev(&[10, 20], &[5, 5, 5, 5, 5, 5], 6).is_none());",
          "    assert!(std::panic::catch_unwind(|| { find_rev(&[], &[5, 10, 15, 20], 4); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { find_rev(&[10, 20, 30], &[5, 10, 15, 20], 4); }).is_err());"
        ],
        "code": [
          "{",
          "    let needles: [u8; 2] = [10, 20];",
          "    let haystack: &[u8] = &[5, 10, 15, 20, 25, 30];",
          "    let at: usize = 6; // valid index",
          "    ",
          "    find_rev(&needles, haystack, at);",
          "    assert_eq!(find_rev(&[10, 20], &[5, 10, 15, 20, 25, 30], 6), Some(3));",
          "    assert_eq!(find_rev(&[10, 20], &[5, 10, 15, 20, 25, 10], 6), Some(5));",
          "    assert_eq!(find_rev(&[10, 20], &[20, 10, 15, 20, 25, 30], 6), Some(0));",
          "    assert!(find_rev(&[10, 20], &[5, 5, 5, 5, 5, 5], 6).is_none());",
          "    assert!(std::panic::catch_unwind(|| { find_rev(&[], &[5, 10, 15, 20], 4); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { find_rev(&[10, 20, 30], &[5, 10, 15, 20], 4); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"invalid needles length: 2\")]"
        ],
        "prefix": [
          "{",
          "    let needles: [u8; 2] = [10, 20];",
          "    let haystack: &[u8] = &[5, 10, 15, 20, 25, 30];",
          "    let at: usize = 1; // valid index in the lower part of the haystack",
          "    ",
          "    let invalid_needles: &[u8] = &[]; // should panic due to empty needles",
          "    find_rev(invalid_needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    let invalid_needles: &[u8] = &[]; // should panic due to empty needles",
          "    find_rev(invalid_needles, haystack, at); // Expect panic with message \"cannot find with empty needles\"",
          "    ",
          "    let needles: [u8; 2] = [10, 20]; // valid needles length of 2",
          "    let haystack: &[u8] = &[5, 10, 15, 20, 25, 30];",
          "    let at: usize = 1; // valid index in the lower part of the haystack",
          "    assert_eq!(find_rev(&needles, haystack, at), Some(1)); // Match for the second needle (20) should be at index 1",
          "    ",
          "    let needles: [u8; 2] = [5, 10]; // valid needles length of 2",
          "    assert_eq!(find_rev(&needles, haystack, at), Some(1)); // Match for the first needle (10) should be at index 1",
          "    ",
          "    let needles: [u8; 2] = [25, 30]; // valid needles length of 2",
          "    assert_eq!(find_rev(&needles, haystack, at), None); // No match should return None"
        ],
        "code": [
          "{",
          "    let needles: [u8; 2] = [10, 20];",
          "    let haystack: &[u8] = &[5, 10, 15, 20, 25, 30];",
          "    let at: usize = 1; // valid index in the lower part of the haystack",
          "    ",
          "    let invalid_needles: &[u8] = &[]; // should panic due to empty needles",
          "    find_rev(invalid_needles, haystack, at);",
          "    let invalid_needles: &[u8] = &[]; // should panic due to empty needles",
          "    find_rev(invalid_needles, haystack, at); // Expect panic with message \"cannot find with empty needles\"",
          "    ",
          "    let needles: [u8; 2] = [10, 20]; // valid needles length of 2",
          "    let haystack: &[u8] = &[5, 10, 15, 20, 25, 30];",
          "    let at: usize = 1; // valid index in the lower part of the haystack",
          "    assert_eq!(find_rev(&needles, haystack, at), Some(1)); // Match for the second needle (20) should be at index 1",
          "    ",
          "    let needles: [u8; 2] = [5, 10]; // valid needles length of 2",
          "    assert_eq!(find_rev(&needles, haystack, at), Some(1)); // Match for the first needle (10) should be at index 1",
          "    ",
          "    let needles: [u8; 2] = [25, 30]; // valid needles length of 2",
          "    assert_eq!(find_rev(&needles, haystack, at), None); // No match should return None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [u8; 2] = [10, 20];",
          "    let haystack: &[u8] = &[5, 10, 15, 20, 10, 30];",
          "    let at: usize = 6; // valid index",
          "    ",
          "    find_rev(&needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[10, 20], &[5, 10, 15, 20, 10, 30], 6), None);",
          "    assert!(find_rev(&[10, 20], &[5, 10, 15, 20, 10, 30], 5).is_some());",
          "    assert_eq!(find_rev(&[10, 20], &[], 0), None);",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[], &[5, 10, 15, 20, 10, 30], 6)).is_err());",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[10, 20, 30], &[5, 10, 15, 20, 10, 30], 6)).is_err());"
        ],
        "code": [
          "{",
          "    let needles: [u8; 2] = [10, 20];",
          "    let haystack: &[u8] = &[5, 10, 15, 20, 10, 30];",
          "    let at: usize = 6; // valid index",
          "    ",
          "    find_rev(&needles, haystack, at);",
          "    assert_eq!(find_rev(&[10, 20], &[5, 10, 15, 20, 10, 30], 6), None);",
          "    assert!(find_rev(&[10, 20], &[5, 10, 15, 20, 10, 30], 5).is_some());",
          "    assert_eq!(find_rev(&[10, 20], &[], 0), None);",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[], &[5, 10, 15, 20, 10, 30], 6)).is_err());",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[10, 20, 30], &[5, 10, 15, 20, 10, 30], 6)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [u8; 2] = [0, 255];",
          "    let haystack: &[u8] = &[0, 1, 2, 3, 255];",
          "    let at: usize = 5; // valid index",
          "    ",
          "    find_rev(&needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&needles, haystack, at), Some(4));"
        ],
        "code": [
          "{",
          "    let needles: [u8; 2] = [0, 255];",
          "    let haystack: &[u8] = &[0, 1, 2, 3, 255];",
          "    let at: usize = 5; // valid index",
          "    ",
          "    find_rev(&needles, haystack, at);",
          "    assert_eq!(find_rev(&needles, haystack, at), Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]