[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [u8; 3] = [1, 2, 3];",
          "    let haystack: [u8; 5] = [0, 1, 2, 3, 4];",
          "    let at: usize = 5;",
          "    let _ = find_rev(&needles, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 1, 2, 3, 4], 5), None);",
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 1, 2, 3, 1], 5), Some(4));",
          "    assert_eq!(find_rev(&[1, 2, 3], &[2, 1, 3, 0, 1], 5), Some(1));",
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 0, 0, 0, 0], 5), None);",
          "    assert_eq!(find_rev(&[1, 2, 3], &[3, 2, 1, 3, 4], 5), Some(0));"
        ],
        "code": [
          "{",
          "    let needles: [u8; 3] = [1, 2, 3];",
          "    let haystack: [u8; 5] = [0, 1, 2, 3, 4];",
          "    let at: usize = 5;",
          "    let _ = find_rev(&needles, &haystack, at);",
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 1, 2, 3, 4], 5), None);",
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 1, 2, 3, 1], 5), Some(4));",
          "    assert_eq!(find_rev(&[1, 2, 3], &[2, 1, 3, 0, 1], 5), Some(1));",
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 0, 0, 0, 0], 5), None);",
          "    assert_eq!(find_rev(&[1, 2, 3], &[3, 2, 1, 3, 4], 5), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [u8; 3] = [1, 2, 3];",
          "    let haystack: [u8; 4] = [2, 1, 3, 4];",
          "    let at: usize = 4;",
          "    let _ = find_rev(&needles, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[1, 2, 3], &[2, 1, 3, 4], 4), Some(2));",
          "    panic::catch_unwind(|| find_rev(&[], &[2, 1, 3, 4], 4)).unwrap_err();",
          "    panic::catch_unwind(|| find_rev(&[1, 2, 3, 4], &[2, 1, 3, 4], 4)).unwrap_err();",
          "    assert_eq!(find_rev(&[1, 2, 3], &[2, 1, 4], 3), Some(1));",
          "    assert_eq!(find_rev(&[1, 2, 3], &[2, 3, 1], 3), Some(2));"
        ],
        "code": [
          "{",
          "    let needles: [u8; 3] = [1, 2, 3];",
          "    let haystack: [u8; 4] = [2, 1, 3, 4];",
          "    let at: usize = 4;",
          "    let _ = find_rev(&needles, &haystack, at);",
          "    assert_eq!(find_rev(&[1, 2, 3], &[2, 1, 3, 4], 4), Some(2));",
          "    panic::catch_unwind(|| find_rev(&[], &[2, 1, 3, 4], 4)).unwrap_err();",
          "    panic::catch_unwind(|| find_rev(&[1, 2, 3, 4], &[2, 1, 3, 4], 4)).unwrap_err();",
          "    assert_eq!(find_rev(&[1, 2, 3], &[2, 1, 4], 3), Some(1));",
          "    assert_eq!(find_rev(&[1, 2, 3], &[2, 3, 1], 3), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: [u8; 3] = [5, 6, 7];",
          "    let haystack: [u8; 6] = [0, 1, 2, 3, 4, 8];",
          "    let at: usize = 6;",
          "    let _ = find_rev(&needles, &haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[5, 6, 7], &[0, 1, 2, 3, 4, 8], 6), None);",
          "    assert_eq!(find_rev(&[5, 6, 7], &[5, 1, 2, 3, 4, 8], 6), Some(0));",
          "    assert_eq!(find_rev(&[5, 6, 7], &[1, 6, 2, 3, 4, 8], 6), Some(1));",
          "    assert_eq!(find_rev(&[5, 6, 7], &[1, 2, 7, 3, 4, 8], 6), Some(2));",
          "    assert_eq!(find_rev(&[5, 6, 7], &[1, 2, 3, 4, 8, 5], 6), Some(5));",
          "    assert_eq!(find_rev(&[5, 6, 7], &[7, 6, 5, 3, 4, 8], 6), Some(0));"
        ],
        "code": [
          "{",
          "    let needles: [u8; 3] = [5, 6, 7];",
          "    let haystack: [u8; 6] = [0, 1, 2, 3, 4, 8];",
          "    let at: usize = 6;",
          "    let _ = find_rev(&needles, &haystack, at);",
          "    assert_eq!(find_rev(&[5, 6, 7], &[0, 1, 2, 3, 4, 8], 6), None);",
          "    assert_eq!(find_rev(&[5, 6, 7], &[5, 1, 2, 3, 4, 8], 6), Some(0));",
          "    assert_eq!(find_rev(&[5, 6, 7], &[1, 6, 2, 3, 4, 8], 6), Some(1));",
          "    assert_eq!(find_rev(&[5, 6, 7], &[1, 2, 7, 3, 4, 8], 6), Some(2));",
          "    assert_eq!(find_rev(&[5, 6, 7], &[1, 2, 3, 4, 8, 5], 6), Some(5));",
          "    assert_eq!(find_rev(&[5, 6, 7], &[7, 6, 5, 3, 4, 8], 6), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]