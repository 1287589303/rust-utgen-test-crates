[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[42]; // Example needle",
          "    let haystack: &[u8] = &[1, 2, 42, 3, 4]; // Needle is present",
          "    let at = haystack.len();",
          "    let _ = find_rev(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[42], &[1, 2, 42, 3, 4], 5), Some(2));",
          "    assert_eq!(find_rev(&[42], &[1, 2, 3, 4], 4), None);",
          "    assert_eq!(find_rev(&[42], &[42, 42, 42], 3), Some(2));",
          "    assert_eq!(find_rev(&[42], &[1, 2, 3, 42], 4), Some(3));",
          "    assert_eq!(find_rev(&[42], &[0, 1, 2, 3], 4), None);",
          "    assert_eq!(find_rev(&[0], &[0, 1, 0], 3), Some(2));",
          "    assert_eq!(find_rev(&[255], &[1, 2, 255, 3, 4], 5), Some(2));",
          "    assert_eq!(find_rev(&[42], &[3, 4, 5], 3), None);",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[], &[1, 2, 3], 3)).is_err());",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[1, 2, 3, 4], &[1, 2, 3], 3)).is_err());"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[42]; // Example needle",
          "    let haystack: &[u8] = &[1, 2, 42, 3, 4]; // Needle is present",
          "    let at = haystack.len();",
          "    let _ = find_rev(needles, haystack, at);",
          "    assert_eq!(find_rev(&[42], &[1, 2, 42, 3, 4], 5), Some(2));",
          "    assert_eq!(find_rev(&[42], &[1, 2, 3, 4], 4), None);",
          "    assert_eq!(find_rev(&[42], &[42, 42, 42], 3), Some(2));",
          "    assert_eq!(find_rev(&[42], &[1, 2, 3, 42], 4), Some(3));",
          "    assert_eq!(find_rev(&[42], &[0, 1, 2, 3], 4), None);",
          "    assert_eq!(find_rev(&[0], &[0, 1, 0], 3), Some(2));",
          "    assert_eq!(find_rev(&[255], &[1, 2, 255, 3, 4], 5), Some(2));",
          "    assert_eq!(find_rev(&[42], &[3, 4, 5], 3), None);",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[], &[1, 2, 3], 3)).is_err());",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[1, 2, 3, 4], &[1, 2, 3], 3)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[255]; // Example needle not in haystack",
          "    let haystack: &[u8] = &[1, 2, 42, 3, 4];",
          "    let at = haystack.len();",
          "    let _ = find_rev(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[255], &[1, 2, 42, 3, 4], 5), None);"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[255]; // Example needle not in haystack",
          "    let haystack: &[u8] = &[1, 2, 42, 3, 4];",
          "    let at = haystack.len();",
          "    let _ = find_rev(needles, haystack, at);",
          "    assert_eq!(find_rev(&[255], &[1, 2, 42, 3, 4], 5), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[2]; // Needle at first position",
          "    let haystack: &[u8] = &[2, 3, 4, 5];",
          "    let at = 1; // Only looking at first element",
          "    let _ = find_rev(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[2], &[2, 3, 4, 5], 1), Some(0));",
          "    assert_eq!(find_rev(&[2], &[3, 2, 4, 5], 3), Some(1));",
          "    assert_eq!(find_rev(&[2], &[3, 4, 5, 2], 4), Some(3));",
          "    assert_eq!(find_rev(&[2], &[3, 4, 5], 3), None);",
          "    assert_eq!(find_rev(&[2], &[], 0), None);"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[2]; // Needle at first position",
          "    let haystack: &[u8] = &[2, 3, 4, 5];",
          "    let at = 1; // Only looking at first element",
          "    let _ = find_rev(needles, haystack, at);",
          "    assert_eq!(find_rev(&[2], &[2, 3, 4, 5], 1), Some(0));",
          "    assert_eq!(find_rev(&[2], &[3, 2, 4, 5], 3), Some(1));",
          "    assert_eq!(find_rev(&[2], &[3, 4, 5, 2], 4), Some(3));",
          "    assert_eq!(find_rev(&[2], &[3, 4, 5], 3), None);",
          "    assert_eq!(find_rev(&[2], &[], 0), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[1]; // Any single needle",
          "    let haystack: &[u8] = &[];",
          "    let at = 0; // the haystack is empty",
          "    let _ = find_rev(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert!(find_rev(&[1], &[], 0).is_none());",
          "    assert!(find_rev(&[1], &[2], 0).is_none());",
          "    assert_eq!(find_rev(&[1], &[1], 1), Some(0));",
          "    assert_eq!(find_rev(&[1], &[2, 1], 2), Some(1));",
          "    assert_eq!(find_rev(&[0], &[0, 1, 2, 0], 4), Some(3));",
          "    assert_eq!(find_rev(&[2], &[0, 1, 2], 3), Some(2));",
          "    assert_eq!(find_rev(&[3], &[3, 2, 1], 3), Some(0));",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[], &[], 0)).is_err());",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[1, 2, 3, 4], &[], 0)).is_err());"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[1]; // Any single needle",
          "    let haystack: &[u8] = &[];",
          "    let at = 0; // the haystack is empty",
          "    let _ = find_rev(needles, haystack, at);",
          "    assert!(find_rev(&[1], &[], 0).is_none());",
          "    assert!(find_rev(&[1], &[2], 0).is_none());",
          "    assert_eq!(find_rev(&[1], &[1], 1), Some(0));",
          "    assert_eq!(find_rev(&[1], &[2, 1], 2), Some(1));",
          "    assert_eq!(find_rev(&[0], &[0, 1, 2, 0], 4), Some(3));",
          "    assert_eq!(find_rev(&[2], &[0, 1, 2], 3), Some(2));",
          "    assert_eq!(find_rev(&[3], &[3, 2, 1], 3), Some(0));",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[], &[], 0)).is_err());",
          "    assert!(std::panic::catch_unwind(|| find_rev(&[1, 2, 3, 4], &[], 0)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]