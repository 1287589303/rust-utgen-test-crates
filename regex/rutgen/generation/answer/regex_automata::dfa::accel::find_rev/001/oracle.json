[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles = &[1, 2, 3];",
          "    let haystack = &[0, 1, 2, 3, 2, 1, 0];",
          "    let at = 7;",
          "    let _ = find_rev(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 1, 2, 3, 2, 1, 0], 7), Some(5));",
          "    assert_eq!(find_rev(&[1], &[0, 1, 2, 3, 2, 1, 0], 7), Some(1));",
          "    assert_eq!(find_rev(&[1, 2], &[0, 1, 2, 3, 2, 1, 0], 7), Some(5));",
          "    panic! == find_rev(&[], &[0, 1, 2, 3, 2, 1, 0], 7);"
        ],
        "code": [
          "{",
          "    let needles = &[1, 2, 3];",
          "    let haystack = &[0, 1, 2, 3, 2, 1, 0];",
          "    let at = 7;",
          "    let _ = find_rev(needles, haystack, at);",
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 1, 2, 3, 2, 1, 0], 7), Some(5));",
          "    assert_eq!(find_rev(&[1], &[0, 1, 2, 3, 2, 1, 0], 7), Some(1));",
          "    assert_eq!(find_rev(&[1, 2], &[0, 1, 2, 3, 2, 1, 0], 7), Some(5));",
          "    panic! == find_rev(&[], &[0, 1, 2, 3, 2, 1, 0], 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles = &[1];",
          "    let haystack = &[0, 1, 2, 3, 1, 0];",
          "    let at = 5;",
          "    let _ = find_rev(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    find_rev(&[1], &[0, 1, 2, 3, 1, 0], 5).unwrap() == 5",
          "    find_rev(&[1, 0], &[0, 1, 2, 3, 1, 0], 5).unwrap() == 5",
          "    find_rev(&[1, 2, 3], &[0, 1, 2, 3, 1, 0], 5).unwrap() == 3",
          "    std::panic::catch_unwind(|| find_rev(&[], &[0, 1, 2, 3, 1, 0], 5)).is_err()",
          "    std::panic::catch_unwind(|| find_rev(&[1, 2, 3, 4], &[0, 1, 2, 3, 1, 0], 5)).is_err()"
        ],
        "code": [
          "{",
          "    let needles = &[1];",
          "    let haystack = &[0, 1, 2, 3, 1, 0];",
          "    let at = 5;",
          "    let _ = find_rev(needles, haystack, at);",
          "    find_rev(&[1], &[0, 1, 2, 3, 1, 0], 5).unwrap() == 5",
          "    find_rev(&[1, 0], &[0, 1, 2, 3, 1, 0], 5).unwrap() == 5",
          "    find_rev(&[1, 2, 3], &[0, 1, 2, 3, 1, 0], 5).unwrap() == 3",
          "    std::panic::catch_unwind(|| find_rev(&[], &[0, 1, 2, 3, 1, 0], 5)).is_err()",
          "    std::panic::catch_unwind(|| find_rev(&[1, 2, 3, 4], &[0, 1, 2, 3, 1, 0], 5)).is_err()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let needles = &[1, 2];",
          "    let haystack = &[0, 2, 1, 2, 3, 0];",
          "    let at = 6;",
          "    let _ = find_rev(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_rev(&[1, 2], &[0, 2, 1, 2, 3, 0], 6), Some(4));",
          "    assert_eq!(find_rev(&[1], &[0, 2, 1, 2, 3, 0], 6), Some(2));",
          "    assert_eq!(find_rev(&[1, 2], &[0, 2, 1, 2, 3, 0], 5), Some(4));",
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 2, 1, 2, 3, 0], 6), Some(5));",
          "    panic::catch_unwind(|| { find_rev(&[], &[0, 2, 1, 2, 3, 0], 6); }).unwrap_err();",
          "    panic::catch_unwind(|| { find_rev(&[1, 2, 3, 4], &[0, 2, 1, 2, 3, 0], 6); }).unwrap_err();"
        ],
        "code": [
          "{",
          "    let needles = &[1, 2];",
          "    let haystack = &[0, 2, 1, 2, 3, 0];",
          "    let at = 6;",
          "    let _ = find_rev(needles, haystack, at);",
          "    assert_eq!(find_rev(&[1, 2], &[0, 2, 1, 2, 3, 0], 6), Some(4));",
          "    assert_eq!(find_rev(&[1], &[0, 2, 1, 2, 3, 0], 6), Some(2));",
          "    assert_eq!(find_rev(&[1, 2], &[0, 2, 1, 2, 3, 0], 5), Some(4));",
          "    assert_eq!(find_rev(&[1, 2, 3], &[0, 2, 1, 2, 3, 0], 6), Some(5));",
          "    panic::catch_unwind(|| { find_rev(&[], &[0, 2, 1, 2, 3, 0], 6); }).unwrap_err();",
          "    panic::catch_unwind(|| { find_rev(&[1, 2, 3, 4], &[0, 2, 1, 2, 3, 0], 6); }).unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let needles: &[u8] = &[];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let _ = find_rev(needles, haystack, at);",
          "}"
        ],
        "oracle": [
          "    let needles: &[u8] = &[];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert!(result.is_none());",
          "    ",
          "    let needles: &[u8] = &[1];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let needles: &[u8] = &[1, 2];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let needles: &[u8] = &[1, 2, 3];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(3));",
          "    ",
          "    let needles: &[u8] = &[4];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert!(result.is_none());",
          "    ",
          "    let needles: &[u8] = &[5, 6];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert!(result.is_none());",
          "    ",
          "    let needles: &[u8] = &[7, 8, 9];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert!(result.is_none());",
          "    ",
          "    let needles: &[u8] = &[1, 2];",
          "    let haystack = &[0, 3, 2, 1];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let needles: &[u8] = &[1, 2, 3];",
          "    let haystack = &[3, 1, 2, 0];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let needles: &[u8] = &[3];",
          "    let haystack = &[3, 2, 1, 0];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(0));"
        ],
        "code": [
          "{",
          "    let needles: &[u8] = &[];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let _ = find_rev(needles, haystack, at);",
          "    let needles: &[u8] = &[];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert!(result.is_none());",
          "    ",
          "    let needles: &[u8] = &[1];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let needles: &[u8] = &[1, 2];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let needles: &[u8] = &[1, 2, 3];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(3));",
          "    ",
          "    let needles: &[u8] = &[4];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert!(result.is_none());",
          "    ",
          "    let needles: &[u8] = &[5, 6];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert!(result.is_none());",
          "    ",
          "    let needles: &[u8] = &[7, 8, 9];",
          "    let haystack = &[0, 1, 2, 3];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert!(result.is_none());",
          "    ",
          "    let needles: &[u8] = &[1, 2];",
          "    let haystack = &[0, 3, 2, 1];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let needles: &[u8] = &[1, 2, 3];",
          "    let haystack = &[3, 1, 2, 0];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let needles: &[u8] = &[3];",
          "    let haystack = &[3, 2, 1, 0];",
          "    let at = 4;",
          "    let result = find_rev(needles, haystack, at);",
          "    assert_eq!(result, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]