[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_ids = &[1, 2, 3];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[0, 1, 2];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 0,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.is_match, true);",
          "    assert_eq!(state.ntrans, 0);",
          "    assert_eq!(state.pattern_ids.len(), 3);",
          "    assert_eq!(state.accel.len(), 3);",
          "    assert_eq!(state.write_to_len(), 2 + (state.ntrans * 2) + (state.ntrans * StateID::SIZE) + (1 + state.accel.len()) + size_of::<u32>() + state.pattern_ids.len());"
        ],
        "code": [
          "{",
          "    let pattern_ids = &[1, 2, 3];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[0, 1, 2];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 0,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "    assert_eq!(state.is_match, true);",
          "    assert_eq!(state.ntrans, 0);",
          "    assert_eq!(state.pattern_ids.len(), 3);",
          "    assert_eq!(state.accel.len(), 3);",
          "    assert_eq!(state.write_to_len(), 2 + (state.ntrans * 2) + (state.ntrans * StateID::SIZE) + (1 + state.accel.len()) + size_of::<u32>() + state.pattern_ids.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_ids = &[1, 2, 3, 4, 5];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 10,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "}"
        ],
        "oracle": [
          "    _len_eq_42 = _len == 42",
          "    _len_gt_40 = _len > 40",
          "    _len_lt_50 = _len < 50",
          "    _len_not_negative = _len >= 0",
          "    _len_is_correct_based_on_ntrans = _len == 2 + (state.ntrans * 2) + (state.ntrans * StateID::SIZE) + (1 + state.accel.len()) + size_of::<u32>() + state.pattern_ids.len()"
        ],
        "code": [
          "{",
          "    let pattern_ids = &[1, 2, 3, 4, 5];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 10,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "    _len_eq_42 = _len == 42",
          "    _len_gt_40 = _len > 40",
          "    _len_lt_50 = _len < 50",
          "    _len_not_negative = _len >= 0",
          "    _len_is_correct_based_on_ntrans = _len == 2 + (state.ntrans * 2) + (state.ntrans * StateID::SIZE) + (1 + state.accel.len()) + size_of::<u32>() + state.pattern_ids.len()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_ids = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[0, 1, 2];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 5,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "}"
        ],
        "oracle": [
          "    len = 2 + (5 * 2) + (5 * StateID::SIZE) + (1 + 3) + size_of::<u32>() + pattern_ids.len();",
          "    expected_len = 2 + 10 + (5 * StateID::SIZE) + 4 + 4;",
          "    assert_eq!(_len, expected_len);",
          "    assert!(_len > 0);",
          "    assert!(_len >= 14 + (5 * StateID::SIZE));",
          "    assert_eq!(state.is_match, true);",
          "    assert_eq!(state.ntrans, 5);",
          "    assert_eq!(state.accel.len(), 3);",
          "    assert!(state.pattern_ids.len() > 0);"
        ],
        "code": [
          "{",
          "    let pattern_ids = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[0, 1, 2];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 5,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "    len = 2 + (5 * 2) + (5 * StateID::SIZE) + (1 + 3) + size_of::<u32>() + pattern_ids.len();",
          "    expected_len = 2 + 10 + (5 * StateID::SIZE) + 4 + 4;",
          "    assert_eq!(_len, expected_len);",
          "    assert!(_len > 0);",
          "    assert!(_len >= 14 + (5 * StateID::SIZE));",
          "    assert_eq!(state.is_match, true);",
          "    assert_eq!(state.ntrans, 5);",
          "    assert_eq!(state.accel.len(), 3);",
          "    assert!(state.pattern_ids.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_ids = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[0];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 3,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(state.write_to_len(), 2 + (3 * 2) + (3 * StateID::SIZE) + (1 + 1) + size_of::<u32>() + pattern_ids.len());",
          "    assert!(state.is_match);",
          "    assert_eq!(state.ntrans, 3);",
          "    assert_eq!(state.accel.len(), 1);",
          "    assert_eq!(state.pattern_ids.len(), 20);",
          "    assert_eq!(state.input_ranges.len(), 0);",
          "    assert_eq!(state.next.len(), 0);"
        ],
        "code": [
          "{",
          "    let pattern_ids = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[0];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 3,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "    assert_eq!(state.write_to_len(), 2 + (3 * 2) + (3 * StateID::SIZE) + (1 + 1) + size_of::<u32>() + pattern_ids.len());",
          "    assert!(state.is_match);",
          "    assert_eq!(state.ntrans, 3);",
          "    assert_eq!(state.accel.len(), 1);",
          "    assert_eq!(state.pattern_ids.len(), 20);",
          "    assert_eq!(state.input_ranges.len(), 0);",
          "    assert_eq!(state.next.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_ids = &[];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[0, 1];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 4,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "}"
        ],
        "oracle": [
          "    _len == 2 + (4 * 2) + (4 * StateID::SIZE) + (1 + accel.len()) + size_of::<u32>() + pattern_ids.len()",
          "    _len == 2 + 8 + (4 * StateID::SIZE) + (1 + 2) + 4",
          "    _len == 11 + (4 * StateID::SIZE)",
          "    assert!(_len == expected_value);"
        ],
        "code": [
          "{",
          "    let pattern_ids = &[];",
          "    let input_ranges = &[];",
          "    let next = &[];",
          "    let accel = &[0, 1];",
          "    let state = State {",
          "        id: StateID::default(),",
          "        is_match: true,",
          "        ntrans: 4,",
          "        input_ranges,",
          "        next,",
          "        pattern_ids: &pattern_ids[..],",
          "        accel,",
          "    };",
          "    let _len = state.write_to_len();",
          "    _len == 2 + (4 * 2) + (4 * StateID::SIZE) + (1 + accel.len()) + size_of::<u32>() + pattern_ids.len()",
          "    _len == 2 + 8 + (4 * StateID::SIZE) + (1 + 2) + 4",
          "    _len == 11 + (4 * StateID::SIZE)",
          "    assert!(_len == expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]