[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_sparse_set_new_exceeding_capacity() {",
      "    let capacity = StateID::LIMIT + 1; // Exceeding the limit",
      "    let set = SparseSet::new(capacity);",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 0;",
          "    let set = SparseSet::new(capacity);",
          "}"
        ],
        "oracle": [
          "    SparseSet::new(StateID::LIMIT + 1); // Ensure panic is triggered when exceeding capacity",
          "    let set = SparseSet::new(0); // Ensure set is created with zero capacity",
          "    assert_eq!(set.len(), 0); // Validate length is zero for empty set",
          "    assert_eq!(set.capacity(), 0); // Validate capacity is zero for empty set",
          "    assert!(set.is_empty()); // Validate that the set is empty"
        ],
        "code": [
          "{",
          "    let capacity = 0;",
          "    let set = SparseSet::new(capacity);",
          "    SparseSet::new(StateID::LIMIT + 1); // Ensure panic is triggered when exceeding capacity",
          "    let set = SparseSet::new(0); // Ensure set is created with zero capacity",
          "    assert_eq!(set.len(), 0); // Validate length is zero for empty set",
          "    assert_eq!(set.capacity(), 0); // Validate capacity is zero for empty set",
          "    assert!(set.is_empty()); // Validate that the set is empty",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 1; // Minimum capacity greater than zero",
          "    let set = SparseSet::new(capacity);",
          "}"
        ],
        "oracle": [
          "    assert!(set.len == 0);",
          "    assert_eq!(set.dense.len(), 1);",
          "    assert_eq!(set.sparse.len(), 1);",
          "    assert!(set.capacity() == 1);",
          "    assert!(set.is_empty() == true);",
          "    assert!(set.memory_usage() > 0);"
        ],
        "code": [
          "{",
          "    let capacity = 1; // Minimum capacity greater than zero",
          "    let set = SparseSet::new(capacity);",
          "    assert!(set.len == 0);",
          "    assert_eq!(set.dense.len(), 1);",
          "    assert_eq!(set.sparse.len(), 1);",
          "    assert!(set.capacity() == 1);",
          "    assert!(set.is_empty() == true);",
          "    assert!(set.memory_usage() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = StateID::LIMIT / 2; // Mid range capacity",
          "    let set = SparseSet::new(capacity);",
          "}"
        ],
        "oracle": [
          "    let set = SparseSet::new(StateID::LIMIT + 1); // Expect panic for exceeding capacity",
          "    let set = SparseSet::new(StateID::LIMIT / 2); // Expect valid SparseSet creation with mid range capacity",
          "    let set = SparseSet::new(0); // Expect valid SparseSet creation with zero capacity",
          "    let set = SparseSet::new(StateID::LIMIT); // Expect valid SparseSet creation at upper limit capacity"
        ],
        "code": [
          "{",
          "    let capacity = StateID::LIMIT / 2; // Mid range capacity",
          "    let set = SparseSet::new(capacity);",
          "    let set = SparseSet::new(StateID::LIMIT + 1); // Expect panic for exceeding capacity",
          "    let set = SparseSet::new(StateID::LIMIT / 2); // Expect valid SparseSet creation with mid range capacity",
          "    let set = SparseSet::new(0); // Expect valid SparseSet creation with zero capacity",
          "    let set = SparseSet::new(StateID::LIMIT); // Expect valid SparseSet creation at upper limit capacity",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = StateID::LIMIT; // Maximum capacity",
          "    let set = SparseSet::new(capacity);",
          "}"
        ],
        "oracle": [
          "    let capacity = StateID::LIMIT + 1; // Expect panic for exceeding limit",
          "    assert!(std::panic::catch_unwind(|| SparseSet::new(capacity)).is_err());",
          "    ",
          "    let capacity = StateID::LIMIT; // Check valid creation with maximum capacity",
          "    let set = SparseSet::new(capacity);",
          "    assert_eq!(set.len(), 0);",
          "    assert_eq!(set.capacity(), capacity);",
          "    assert!(set.is_empty());"
        ],
        "code": [
          "{",
          "    let capacity = StateID::LIMIT; // Maximum capacity",
          "    let set = SparseSet::new(capacity);",
          "    let capacity = StateID::LIMIT + 1; // Expect panic for exceeding limit",
          "    assert!(std::panic::catch_unwind(|| SparseSet::new(capacity)).is_err());",
          "    ",
          "    let capacity = StateID::LIMIT; // Check valid creation with maximum capacity",
          "    let set = SparseSet::new(capacity);",
          "    assert_eq!(set.len(), 0);",
          "    assert_eq!(set.capacity(), capacity);",
          "    assert!(set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]