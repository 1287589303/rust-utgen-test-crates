[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let _ = captures.group_info();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    assert_eq!(captures.group_info(), &group_info);",
          "    let captures_empty = Captures::empty(group_info.clone());",
          "    assert_eq!(captures_empty.group_info(), &group_info);",
          "    let captures_matches = Captures::matches(group_info.clone());",
          "    assert_eq!(captures_matches.group_info(), &group_info);",
          "    let non_matching_captures = Captures::all(GroupInfo::default());",
          "    assert_ne!(non_matching_captures.group_info(), &GroupInfo::default());"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    let _ = captures.group_info();",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::all(group_info.clone());",
          "    assert_eq!(captures.group_info(), &group_info);",
          "    let captures_empty = Captures::empty(group_info.clone());",
          "    assert_eq!(captures_empty.group_info(), &group_info);",
          "    let captures_matches = Captures::matches(group_info.clone());",
          "    assert_eq!(captures_matches.group_info(), &group_info);",
          "    let non_matching_captures = Captures::all(GroupInfo::default());",
          "    assert_ne!(non_matching_captures.group_info(), &GroupInfo::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::matches(group_info.clone());",
          "    let _ = captures.group_info();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::matches(group_info.clone());",
          "    let result = captures.group_info();",
          "    assert_eq!(result, &group_info);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::matches(group_info.clone());",
          "    let _ = captures.group_info();",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::matches(group_info.clone());",
          "    let result = captures.group_info();",
          "    assert_eq!(result, &group_info);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::empty(group_info.clone());",
          "    let _ = captures.group_info();",
          "}"
        ],
        "oracle": [
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::empty(group_info.clone());",
          "    assert_eq!(captures.group_info(), &group_info);",
          "    let captures_matches = Captures::matches(group_info.clone());",
          "    assert_eq!(captures_matches.group_info(), &group_info);",
          "    let captures_all = Captures::all(group_info.clone());",
          "    assert_eq!(captures_all.group_info(), &group_info);"
        ],
        "code": [
          "{",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::empty(group_info.clone());",
          "    let _ = captures.group_info();",
          "    let group_info = GroupInfo::default();",
          "    let captures = Captures::empty(group_info.clone());",
          "    assert_eq!(captures.group_info(), &group_info);",
          "    let captures_matches = Captures::matches(group_info.clone());",
          "    assert_eq!(captures_matches.group_info(), &group_info);",
          "    let captures_all = Captures::all(group_info.clone());",
          "    assert_eq!(captures_all.group_info(), &group_info);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]