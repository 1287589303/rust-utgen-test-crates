[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: flags.clone() },",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_flag(&mut flags.clone(), true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: flags.clone() },",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_flag(&mut flags.clone(), true);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: flags.clone() },",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_flag(&mut flags.clone(), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: flags.clone() },",
          "        pattern: \"\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_flag(&mut flags.clone(), false);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]