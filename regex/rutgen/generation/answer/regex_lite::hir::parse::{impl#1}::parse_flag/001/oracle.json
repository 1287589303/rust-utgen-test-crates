[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"i\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('i')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('i'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('m'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('R'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('x'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('s'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('U'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('u'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('z'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Err(Error::new(ERR_FLAG_UNRECOGNIZED)));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"i\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('i')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('i'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('m'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('R'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('x'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('s'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('U'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('u'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('z'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"m\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('m')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('m'));",
          "    let mut flags = Flags::default();",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.multi_line, true);",
          "    ",
          "    parser.char.set(Some('R'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.crlf, true);",
          "    ",
          "    parser.char.set(Some('x'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.ignore_whitespace, true);",
          "    ",
          "    parser.char.set(Some('s'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.dot_matches_new_line, true);",
          "    ",
          "    parser.char.set(Some('U'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.swap_greed, true);",
          "    ",
          "    parser.char.set(Some('i'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.case_insensitive, true);",
          "    ",
          "    parser.char.set(Some('u'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    ",
          "    parser.char.set(Some('z'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"m\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('m')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('m'));",
          "    let mut flags = Flags::default();",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.multi_line, true);",
          "    ",
          "    parser.char.set(Some('R'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.crlf, true);",
          "    ",
          "    parser.char.set(Some('x'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.ignore_whitespace, true);",
          "    ",
          "    parser.char.set(Some('s'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.dot_matches_new_line, true);",
          "    ",
          "    parser.char.set(Some('U'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.swap_greed, true);",
          "    ",
          "    parser.char.set(Some('i'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    assert_eq!(flags.case_insensitive, true);",
          "    ",
          "    parser.char.set(Some('u'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    ",
          "    parser.char.set(Some('z'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"s\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('m'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.multi_line);",
          "    ",
          "    parser.char.set(Some('R'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.crlf);",
          "    ",
          "    parser.char.set(Some('x'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.ignore_whitespace);",
          "    ",
          "    parser.char.set(Some('s'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.dot_matches_new_line);",
          "    ",
          "    parser.char.set(Some('U'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.swap_greed);",
          "    ",
          "    parser.char.set(Some('i'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.case_insensitive);",
          "    ",
          "    parser.char.set(Some('u'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    ",
          "    parser.char.set(Some('z')); // Unrecognized flag",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_FLAG_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"s\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('s')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('m'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.multi_line);",
          "    ",
          "    parser.char.set(Some('R'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.crlf);",
          "    ",
          "    parser.char.set(Some('x'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.ignore_whitespace);",
          "    ",
          "    parser.char.set(Some('s'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.dot_matches_new_line);",
          "    ",
          "    parser.char.set(Some('U'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.swap_greed);",
          "    ",
          "    parser.char.set(Some('i'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    assert!(flags.case_insensitive);",
          "    ",
          "    parser.char.set(Some('u'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    ",
          "    parser.char.set(Some('z')); // Unrecognized flag",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().msg, ERR_FLAG_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"U\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('U')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.parse_flag(&mut flags, false).unwrap_err();",
          "    parser.char.set(Some('m'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('R'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('x'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('s'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('U'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('i'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('u'));",
          "    parser.parse_flag(&mut flags, true).unwrap();",
          "    parser.char.set(Some('z'));",
          "    parser.parse_flag(&mut flags, false).unwrap_err();"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"U\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('U')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.parse_flag(&mut flags, false).unwrap_err();",
          "    parser.char.set(Some('m'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('R'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('x'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('s'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('U'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('i'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('u'));",
          "    parser.parse_flag(&mut flags, true).unwrap();",
          "    parser.char.set(Some('z'));",
          "    parser.parse_flag(&mut flags, false).unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"R\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('R')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('i'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('m'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('s'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('U'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('R'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('x'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('u'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('z')); // Invalid flag for testing unrecognized",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Err(Error::new(ERR_FLAG_UNRECOGNIZED)));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"R\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('R')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('i'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('m'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('s'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('U'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('R'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('x'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('u'));",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('z')); // Invalid flag for testing unrecognized",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"x\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('x')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('i'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('m'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('s'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('U'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('R'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('x'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('u'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('z'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Err(Error::new(ERR_FLAG_UNRECOGNIZED)));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"x\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('x')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    parser.char.set(Some('i'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('m'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('s'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('U'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('R'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('x'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('u'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Ok(()));",
          "    parser.char.set(Some('z'));",
          "    assert_eq!(parser.parse_flag(&mut flags, false), Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"u\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "}"
        ],
        "oracle": [
          "    flags.case_insensitive == false",
          "    flags.multi_line == false",
          "    flags.dot_matches_new_line == false",
          "    flags.swap_greed == false",
          "    flags.crlf == false",
          "    flags.ignore_whitespace == false",
          "    parser.parse_flag(&mut flags, false).is_ok()",
          "    parser.char().unwrap() == 'u'",
          "    parser.parse_flag(&mut flags, false).err().unwrap().msg == ERR_FLAG_UNRECOGNIZED"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"u\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('u')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_flag(&mut flags, false).unwrap();",
          "    flags.case_insensitive == false",
          "    flags.multi_line == false",
          "    flags.dot_matches_new_line == false",
          "    flags.swap_greed == false",
          "    flags.crlf == false",
          "    flags.ignore_whitespace == false",
          "    parser.parse_flag(&mut flags, false).is_ok()",
          "    parser.char().unwrap() == 'u'",
          "    parser.parse_flag(&mut flags, false).err().unwrap().msg == ERR_FLAG_UNRECOGNIZED",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"z\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('z')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    let mut flags = Flags::default();",
          "    char.set(Some('i'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('m'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('s'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('U'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('R'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('x'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('u'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('z'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config { nest_limit: 10, flags: Flags::default() },",
          "        pattern: \"z\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('z')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags.clone()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_err());",
          "    let mut flags = Flags::default();",
          "    char.set(Some('i'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('m'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('s'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('U'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('R'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('x'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('u'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert!(result.is_ok());",
          "    ",
          "    let mut flags = Flags::default();",
          "    char.set(Some('z'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Err(Error::new(ERR_FLAG_UNRECOGNIZED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]