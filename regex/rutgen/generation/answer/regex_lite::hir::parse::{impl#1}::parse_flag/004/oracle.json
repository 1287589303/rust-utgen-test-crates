[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"R\";",
          "    let depth = Cell::new(0);",
          "    let pos = Cell::new(0);",
          "    let char = Cell::new(Some('R'));",
          "    let capture_index = Cell::new(0);",
          "    let flags = RefCell::new(Flags::default());",
          "    let capture_names = RefCell::new(vec![]);",
          "    ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth,",
          "        pos,",
          "        char,",
          "        capture_index,",
          "        flags,",
          "        capture_names,",
          "    };",
          "",
          "    let mut flags_instance = Flags::default();",
          "    let _result = parser.parse_flag(&mut flags_instance, false);",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"R\";",
          "    let depth = Cell::new(0);",
          "    let pos = Cell::new(0);",
          "    let char = Cell::new(Some('R'));",
          "    let capture_index = Cell::new(0);",
          "    let flags = RefCell::new(Flags::default());",
          "    let capture_names = RefCell::new(vec![]);",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth,",
          "    pos,",
          "    char,",
          "    capture_index,",
          "    flags,",
          "    capture_names,",
          "    };",
          "    ",
          "    let mut flags_instance = Flags::default();",
          "    let _result = parser.parse_flag(&mut flags_instance, false);",
          "    assert_eq!(_result, Ok(()));",
          "    assert!(flags_instance.crlf);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"R\";",
          "    let depth = Cell::new(0);",
          "    let pos = Cell::new(0);",
          "    let char = Cell::new(Some('R'));",
          "    let capture_index = Cell::new(0);",
          "    let flags = RefCell::new(Flags::default());",
          "    let capture_names = RefCell::new(vec![]);",
          "    ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth,",
          "        pos,",
          "        char,",
          "        capture_index,",
          "        flags,",
          "        capture_names,",
          "    };",
          "",
          "    let mut flags_instance = Flags::default();",
          "    let _result = parser.parse_flag(&mut flags_instance, false);",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"R\";",
          "    let depth = Cell::new(0);",
          "    let pos = Cell::new(0);",
          "    let char = Cell::new(Some('R'));",
          "    let capture_index = Cell::new(0);",
          "    let flags = RefCell::new(Flags::default());",
          "    let capture_names = RefCell::new(vec![]);",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth,",
          "    pos,",
          "    char,",
          "    capture_index,",
          "    flags,",
          "    capture_names,",
          "    };",
          "    ",
          "    let mut flags_instance = Flags::default();",
          "    let _result = parser.parse_flag(&mut flags_instance, false);",
          "    assert_eq!(_result, Ok(()));",
          "    assert!(flags_instance.crlf);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"R\";",
          "    let depth = Cell::new(0);",
          "    let pos = Cell::new(0);",
          "    let char = Cell::new(Some('R'));",
          "    let capture_index = Cell::new(0);",
          "    let flags = RefCell::new(Flags {",
          "        case_insensitive: true,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        swap_greed: true,",
          "        crlf: false,",
          "        ignore_whitespace: true,",
          "    });",
          "    let capture_names = RefCell::new(vec![]);",
          "    ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth,",
          "        pos,",
          "        char,",
          "        capture_index,",
          "        flags,",
          "        capture_names,",
          "    };",
          "",
          "    let mut flags_instance = Flags::default();",
          "    let _result = parser.parse_flag(&mut flags_instance, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(()));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"R\";",
          "    let depth = Cell::new(0);",
          "    let pos = Cell::new(0);",
          "    let char = Cell::new(Some('R'));",
          "    let capture_index = Cell::new(0);",
          "    let flags = RefCell::new(Flags {",
          "        case_insensitive: true,",
          "        multi_line: false,",
          "        dot_matches_new_line: false,",
          "        swap_greed: true,",
          "        crlf: false,",
          "        ignore_whitespace: true,",
          "    });",
          "    let capture_names = RefCell::new(vec![]);",
          "    ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth,",
          "        pos,",
          "        char,",
          "        capture_index,",
          "        flags,",
          "        capture_names,",
          "    };",
          "",
          "    let mut flags_instance = Flags::default();",
          "    let _result = parser.parse_flag(&mut flags_instance, false);",
          "    assert_eq!(_result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"R\";",
          "    let depth = Cell::new(0);",
          "    let pos = Cell::new(0);",
          "    let char = Cell::new(Some('R'));",
          "    let capture_index = Cell::new(0);",
          "    let flags = RefCell::new(Flags {",
          "        case_insensitive: false,",
          "        multi_line: true,",
          "        dot_matches_new_line: true,",
          "        swap_greed: false,",
          "        crlf: false,",
          "        ignore_whitespace: true,",
          "    });",
          "    let capture_names = RefCell::new(vec![]);",
          "    ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth,",
          "        pos,",
          "        char,",
          "        capture_index,",
          "        flags,",
          "        capture_names,",
          "    };",
          "",
          "    let mut flags_instance = Flags::default();",
          "    let _result = parser.parse_flag(&mut flags_instance, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(()));",
          "    assert!(flags_instance.crlf);",
          "    assert!(!flags_instance.case_insensitive);",
          "    assert!(!flags_instance.multi_line);",
          "    assert!(!flags_instance.dot_matches_new_line);",
          "    assert!(!flags_instance.swap_greed);",
          "    assert!(!flags_instance.ignore_whitespace);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"R\";",
          "    let depth = Cell::new(0);",
          "    let pos = Cell::new(0);",
          "    let char = Cell::new(Some('R'));",
          "    let capture_index = Cell::new(0);",
          "    let flags = RefCell::new(Flags {",
          "        case_insensitive: false,",
          "        multi_line: true,",
          "        dot_matches_new_line: true,",
          "        swap_greed: false,",
          "        crlf: false,",
          "        ignore_whitespace: true,",
          "    });",
          "    let capture_names = RefCell::new(vec![]);",
          "    ",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth,",
          "        pos,",
          "        char,",
          "        capture_index,",
          "        flags,",
          "        capture_names,",
          "    };",
          "",
          "    let mut flags_instance = Flags::default();",
          "    let _result = parser.parse_flag(&mut flags_instance, false);",
          "    assert_eq!(_result, Ok(()));",
          "    assert!(flags_instance.crlf);",
          "    assert!(!flags_instance.case_insensitive);",
          "    assert!(!flags_instance.multi_line);",
          "    assert!(!flags_instance.dot_matches_new_line);",
          "    assert!(!flags_instance.swap_greed);",
          "    assert!(!flags_instance.ignore_whitespace);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]