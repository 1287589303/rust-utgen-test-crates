[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config {",
          "            size_limit: None,",
          "            nest_limit: 10,",
          "            flags: flags.clone(),",
          "        },",
          "        pattern: \"test pattern\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('i')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_flag(&mut flags, false);",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('i'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut flags = Flags::default();",
          "    let parser = Parser {",
          "        config: Config {",
          "            size_limit: None,",
          "            nest_limit: 10,",
          "            flags: flags.clone(),",
          "        },",
          "        pattern: \"test pattern\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('i')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_flag(&mut flags, false);",
          "    parser.char.set(Some('i'));",
          "    let result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut flags = Flags {",
          "        case_insensitive: true,",
          "        ..Flags::default()",
          "    };",
          "    let parser = Parser {",
          "        config: Config {",
          "            size_limit: None,",
          "            nest_limit: 10,",
          "            flags: flags.clone(),",
          "        },",
          "        pattern: \"test pattern\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('i')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_flag(&mut flags, false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(()));",
          "    assert!(flags.case_insensitive);",
          "    assert_eq!(flags.multi_line, false);",
          "    assert_eq!(flags.dot_matches_new_line, false);",
          "    assert_eq!(flags.swap_greed, false);",
          "    assert_eq!(flags.crlf, false);",
          "    assert_eq!(flags.ignore_whitespace, false);"
        ],
        "code": [
          "{",
          "    let mut flags = Flags {",
          "        case_insensitive: true,",
          "        ..Flags::default()",
          "    };",
          "    let parser = Parser {",
          "        config: Config {",
          "            size_limit: None,",
          "            nest_limit: 10,",
          "            flags: flags.clone(),",
          "        },",
          "        pattern: \"test pattern\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('i')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _result = parser.parse_flag(&mut flags, false);",
          "    assert_eq!(_result, Ok(()));",
          "    assert!(flags.case_insensitive);",
          "    assert_eq!(flags.multi_line, false);",
          "    assert_eq!(flags.dot_matches_new_line, false);",
          "    assert_eq!(flags.swap_greed, false);",
          "    assert_eq!(flags.crlf, false);",
          "    assert_eq!(flags.ignore_whitespace, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]