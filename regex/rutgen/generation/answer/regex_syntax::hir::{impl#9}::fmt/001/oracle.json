[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_ascii: Box<[u8]> = Box::new(b\"Hello, World!\"[0..13].to_vec());",
          "    let literal = Literal(valid_ascii);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), b\"Hello, World!\");",
          "    assert!(formatter.is_complete());"
        ],
        "code": [
          "{",
          "    let valid_ascii: Box<[u8]> = Box::new(b\"Hello, World!\"[0..13].to_vec());",
          "    let literal = Literal(valid_ascii);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), b\"Hello, World!\");",
          "    assert!(formatter.is_complete());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_bytes: Box<[u8]> = Box::new(vec![0x00, 0x01, 0x02, 0x03]);",
          "    let literal = Literal(invalid_bytes);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), expected_output);",
          "    assert!(formatter.is_valid());",
          "    assert_eq!(formatter.write_count(), expected_count);",
          "    assert!(!formatter.has_error());",
          "    assert!(formatter.buffer().contains(expected_literal));",
          "    assert_eq!(literal.0.len(), expected_length);",
          "    assert!(literal.0.iter().all(|&byte| byte.is_ascii()));",
          "    assert!(formatter.buffer().chars().all(|c| c.is_printable()));",
          "    assert!(formatter.output().len() > 0);"
        ],
        "code": [
          "{",
          "    let invalid_bytes: Box<[u8]> = Box::new(vec![0x00, 0x01, 0x02, 0x03]);",
          "    let literal = Literal(invalid_bytes);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), expected_output);",
          "    assert!(formatter.is_valid());",
          "    assert_eq!(formatter.write_count(), expected_count);",
          "    assert!(!formatter.has_error());",
          "    assert!(formatter.buffer().contains(expected_literal));",
          "    assert_eq!(literal.0.len(), expected_length);",
          "    assert!(literal.0.iter().all(|&byte| byte.is_ascii()));",
          "    assert!(formatter.buffer().chars().all(|c| c.is_printable()));",
          "    assert!(formatter.output().len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_bytes: Box<[u8]> = Box::new([]);",
          "    let literal = Literal(empty_bytes);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.0, Box::new([]));",
          "    assert!(formatter.is_empty());",
          "    assert_eq!(literal.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"\");",
          "    let non_empty_bytes: Box<[u8]> = Box::new([1, 2, 3]);",
          "    let non_empty_literal = Literal(non_empty_bytes);",
          "    let _ = non_empty_literal.fmt(&mut formatter);",
          "    assert_ne!(formatter.to_string(), \"\");",
          "    assert_eq!(literal.fmt(&mut formatter).is_ok(), true);",
          "    assert!(non_empty_literal.0.len() > 0);"
        ],
        "code": [
          "{",
          "    let empty_bytes: Box<[u8]> = Box::new([]);",
          "    let literal = Literal(empty_bytes);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    assert_eq!(literal.0, Box::new([]));",
          "    assert!(formatter.is_empty());",
          "    assert_eq!(literal.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"\");",
          "    let non_empty_bytes: Box<[u8]> = Box::new([1, 2, 3]);",
          "    let non_empty_literal = Literal(non_empty_bytes);",
          "    let _ = non_empty_literal.fmt(&mut formatter);",
          "    assert_ne!(formatter.to_string(), \"\");",
          "    assert_eq!(literal.fmt(&mut formatter).is_ok(), true);",
          "    assert!(non_empty_literal.0.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_size_bytes: Box<[u8]> = Box::new(vec![b'A'; core::usize::MAX]);",
          "    let literal = Literal(max_size_bytes);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(literal.0.len() == core::usize::MAX);",
          "    assert!(_is_fmt_result_valid(core::fmt::Result));"
        ],
        "code": [
          "{",
          "    let max_size_bytes: Box<[u8]> = Box::new(vec![b'A'; core::usize::MAX]);",
          "    let literal = Literal(max_size_bytes);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    assert!(literal.0.len() == core::usize::MAX);",
          "    assert!(_is_fmt_result_valid(core::fmt::Result));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mixed_bytes: Box<[u8]> = Box::new(b\"Hello\\x00World\"[0..11].to_vec());",
          "    let literal = Literal(mixed_bytes);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(literal.0.as_ref(), b\"Hello\\x00World\");",
          "    assert!(formatter.has_written());",
          "    assert!(formatter.write_str(\"Bytes\"));",
          "    assert!(formatter.write_str(\"Hello\\x00World\"));",
          "    assert!(formatter.debug_bytes().is_ok());",
          "    assert!(formatter.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mixed_bytes: Box<[u8]> = Box::new(b\"Hello\\x00World\"[0..11].to_vec());",
          "    let literal = Literal(mixed_bytes);",
          "    let mut formatter = core::fmt::Formatter::new();",
          "    let _ = literal.fmt(&mut formatter);",
          "    assert_eq!(literal.0.as_ref(), b\"Hello\\x00World\");",
          "    assert!(formatter.has_written());",
          "    assert!(formatter.write_str(\"Bytes\"));",
          "    assert!(formatter.write_str(\"Hello\\x00World\"));",
          "    assert!(formatter.debug_bytes().is_ok());",
          "    assert!(formatter.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]