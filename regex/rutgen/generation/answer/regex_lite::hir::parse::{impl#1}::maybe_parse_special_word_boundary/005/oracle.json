[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{start-half\";",
          "    let mut parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.bump_and_bump_space = || {",
          "        parser.pos.set(1);",
          "        parser.char.set(Some('s'));",
          "        true",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_some());",
          "    assert_eq!(result.unwrap().unwrap().kind(), HirKind::Look(Look::WordStartHalf));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{start-half\";",
          "    let mut parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.bump_and_bump_space = || {",
          "        parser.pos.set(1);",
          "        parser.char.set(Some('s'));",
          "        true",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_some());",
          "    assert_eq!(result.unwrap().unwrap().kind(), HirKind::Look(Look::WordStartHalf));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{unknown}\";",
          "    let mut parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.bump_and_bump_space = || {",
          "        parser.pos.set(1);",
          "        parser.char.set(Some('u'));",
          "        true",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(Hir::look(Look::WordStartHalf))));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{unknown}\";",
          "    let mut parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.bump_and_bump_space = || {",
          "        parser.pos.set(1);",
          "        parser.char.set(Some('u'));",
          "        true",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert_eq!(result, Ok(Some(Hir::look(Look::WordStartHalf))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{end-half}\";",
          "    let mut parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.bump_and_bump_space = || {",
          "        parser.pos.set(1);",
          "        parser.char.set(Some('e'));",
          "        true",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(Hir::look(hir::Look::WordStartHalf))));",
          "    assert_eq!(parser.pos.get(), 8);",
          "    assert_eq!(parser.char.get(), Some('}'));",
          "    assert!(parser.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{end-half}\";",
          "    let mut parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.bump_and_bump_space = || {",
          "        parser.pos.set(1);",
          "        parser.char.set(Some('e'));",
          "        true",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert_eq!(result, Ok(Some(Hir::look(hir::Look::WordStartHalf))));",
          "    assert_eq!(parser.pos.get(), 8);",
          "    assert_eq!(parser.char.get(), Some('}'));",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{start-half\";",
          "    let mut parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.bump_and_bump_space = || {",
          "        parser.pos.set(1);",
          "        parser.char.set(Some('s'));",
          "        true",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Some(Hir::look(hir::Look::WordStartHalf))));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(!parser.is_done());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.char.get().is_some());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{start-half\";",
          "    let mut parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.bump_and_bump_space = || {",
          "        parser.pos.set(1);",
          "        parser.char.set(Some('s'));",
          "        true",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert_eq!(result, Ok(Some(Hir::look(hir::Look::WordStartHalf))));",
          "    assert_eq!(parser.pos.get(), 1);",
          "    assert_eq!(parser.char.get(), Some('s'));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.flags.borrow().case_insensitive == false);",
          "    assert!(!parser.is_done());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.depth.get() == 0);",
          "    assert!(parser.char.get().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]