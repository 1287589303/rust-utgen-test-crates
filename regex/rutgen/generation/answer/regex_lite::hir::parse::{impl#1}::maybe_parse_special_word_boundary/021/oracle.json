[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{invalid}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self.char(), '{');",
          "    self.bump_and_bump_space();",
          "    assert!(is_valid_char(self.char()));",
          "    assert!(!self.is_done());",
          "    assert!(!is_valid_char(self.char()));",
          "    assert!(!self.is_done());",
          "    assert_eq!(self.char(), '}');",
          "    assert_ne!(scratch.as_str(), \"start\");",
          "    assert_ne!(scratch.as_str(), \"end\");",
          "    assert_ne!(scratch.as_str(), \"start-half\");",
          "    assert_ne!(scratch.as_str(), \"end-half\");",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{invalid}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.maybe_parse_special_word_boundary();",
          "    assert_eq!(self.char(), '{');",
          "    self.bump_and_bump_space();",
          "    assert!(is_valid_char(self.char()));",
          "    assert!(!self.is_done());",
          "    assert!(!is_valid_char(self.char()));",
          "    assert!(!self.is_done());",
          "    assert_eq!(self.char(), '}');",
          "    assert_ne!(scratch.as_str(), \"start\");",
          "    assert_ne!(scratch.as_str(), \"end\");",
          "    assert_ne!(scratch.as_str(), \"start-half\");",
          "    assert_ne!(scratch.as_str(), \"end-half\");",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{not_a_keyword}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), Some('{'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(is_valid_char(parser.char().unwrap()));",
          "    assert!(!parser.is_done());",
          "    assert!(!is_valid_char(parser.char().unwrap()));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char(), '}');",
          "    assert_ne!(scratch.as_str(), \"start\");",
          "    assert_ne!(scratch.as_str(), \"end\");",
          "    assert_ne!(scratch.as_str(), \"start-half\");",
          "    assert_ne!(scratch.as_str(), \"end-half\");",
          "    assert!(matches!(_ , Err(Error::new(ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED))));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{not_a_keyword}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.maybe_parse_special_word_boundary();",
          "    assert_eq!(parser.char(), Some('{'));",
          "    assert!(parser.bump_and_bump_space());",
          "    assert!(is_valid_char(parser.char().unwrap()));",
          "    assert!(!parser.is_done());",
          "    assert!(!is_valid_char(parser.char().unwrap()));",
          "    assert!(!parser.is_done());",
          "    assert_eq!(parser.char(), '}');",
          "    assert_ne!(scratch.as_str(), \"start\");",
          "    assert_ne!(scratch.as_str(), \"end\");",
          "    assert_ne!(scratch.as_str(), \"start-half\");",
          "    assert_ne!(scratch.as_str(), \"end-half\");",
          "    assert!(matches!(_ , Err(Error::new(ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{unexpected_keyword}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.maybe_parse_special_word_boundary(), Err(Error::new(ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"\\\\b{unexpected_keyword}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.maybe_parse_special_word_boundary();",
          "    assert_eq!(parser.maybe_parse_special_word_boundary(), Err(Error::new(ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]