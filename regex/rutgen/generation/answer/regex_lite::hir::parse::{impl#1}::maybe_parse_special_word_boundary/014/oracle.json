[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = r\"\\b{invalid_name\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _ = parser.bump_and_bump_space();",
          "    parser.char.set(Some('i')); // set to a valid character",
          "    parser.pos.set(2); // simulate moving position after whitespace",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::new(ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = r\"\\b{invalid_name\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _ = parser.bump_and_bump_space();",
          "    parser.char.set(Some('i')); // set to a valid character",
          "    parser.pos.set(2); // simulate moving position after whitespace",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert_eq!(result, Err(Error::new(ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = r\"\\b{start-half\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _ = parser.bump_and_bump_space();",
          "    parser.char.set(Some('s')); // set to a valid character",
          "    parser.pos.set(2); // simulate moving position after whitespace",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::new(ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED)));",
          "    assert_eq!(parser.pos.get(), 2);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(!parser.flags.borrow().case_insensitive);",
          "    assert!(!parser.is_done());",
          "    assert!(parser.capture_names.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = r\"\\b{start-half\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _ = parser.bump_and_bump_space();",
          "    parser.char.set(Some('s')); // set to a valid character",
          "    parser.pos.set(2); // simulate moving position after whitespace",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert_eq!(result, Err(Error::new(ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED)));",
          "    assert_eq!(parser.pos.get(), 2);",
          "    assert_eq!(parser.char.get(), None);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(!parser.flags.borrow().case_insensitive);",
          "    assert!(!parser.is_done());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = r\"\\b{random_string}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _ = parser.bump_and_bump_space();",
          "    parser.char.set(Some('r')); // simulate a valid char",
          "    parser.pos.set(2); // adjust position",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = r\"\\b{random_string}\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = r\"\\b{random_string}\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    ",
          "    let _ = parser.bump_and_bump_space();",
          "    parser.char.set(Some('r')); // simulate a valid char",
          "    parser.pos.set(2); // adjust position",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = r\"\\b{random_string}\";",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.maybe_parse_special_word_boundary();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().msg, ERR_SPECIAL_WORD_BOUNDARY_UNRECOGNIZED);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]