[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut extractor = Extractor::new();",
          "    extractor.limit_class(5);",
          "",
          "    let range1 = ClassBytesRange::new(0, 2); // Length 3",
          "    let range2 = ClassBytesRange::new(3, 5); // Length 3",
          "    // Cumulative length: 6 (exceeds limit 5)",
          "",
          "    let mut class_bytes = ClassBytes::new(vec![range1, range2]);",
          "    ",
          "    let result = extractor.class_over_limit_bytes(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut extractor = Extractor::new();",
          "    extractor.limit_class(5);",
          "",
          "    let range1 = ClassBytesRange::new(0, 2); // Length 3",
          "    let range2 = ClassBytesRange::new(3, 5); // Length 3",
          "    // Cumulative length: 6 (exceeds limit 5)",
          "",
          "    let mut class_bytes = ClassBytes::new(vec![range1, range2]);",
          "    ",
          "    let result = extractor.class_over_limit_bytes(&class_bytes);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut extractor = Extractor::new();",
          "    extractor.limit_class(5);",
          "",
          "    let range1 = ClassBytesRange::new(0, 2); // Length 3",
          "    let range2 = ClassBytesRange::new(3, 4); // Length 2",
          "    // Cumulative length: 5 (equal to limit)",
          "",
          "    let mut class_bytes = ClassBytes::new(vec![range1, range2]);",
          "    ",
          "    let result = extractor.class_over_limit_bytes(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut extractor = Extractor::new();",
          "    extractor.limit_class(5);",
          "",
          "    let range1 = ClassBytesRange::new(0, 2); // Length 3",
          "    let range2 = ClassBytesRange::new(3, 4); // Length 2",
          "    // Cumulative length: 5 (equal to limit)",
          "",
          "    let mut class_bytes = ClassBytes::new(vec![range1, range2]);",
          "    ",
          "    let result = extractor.class_over_limit_bytes(&class_bytes);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut extractor = Extractor::new();",
          "    extractor.limit_class(3);",
          "",
          "    let range = ClassBytesRange::new(0, 5); // Length 6",
          "",
          "    let mut class_bytes = ClassBytes::new(vec![range]);",
          "    ",
          "    let result = extractor.class_over_limit_bytes(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    let mut extractor = Extractor::new();",
          "    extractor.limit_class(3);",
          "    let range = ClassBytesRange::new(0, 5); // Length 6",
          "    let mut class_bytes = ClassBytes::new(vec![range]);",
          "    let result = extractor.class_over_limit_bytes(&class_bytes);",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let mut extractor = Extractor::new();",
          "    extractor.limit_class(3);",
          "",
          "    let range = ClassBytesRange::new(0, 5); // Length 6",
          "",
          "    let mut class_bytes = ClassBytes::new(vec![range]);",
          "    ",
          "    let result = extractor.class_over_limit_bytes(&class_bytes);",
          "    let mut extractor = Extractor::new();",
          "    extractor.limit_class(3);",
          "    let range = ClassBytesRange::new(0, 5); // Length 6",
          "    let mut class_bytes = ClassBytes::new(vec![range]);",
          "    let result = extractor.class_over_limit_bytes(&class_bytes);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]