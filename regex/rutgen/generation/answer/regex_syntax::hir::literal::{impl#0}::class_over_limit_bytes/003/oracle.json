[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(0);",
          "    let class_bytes = ClassBytes::empty();",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(0);",
          "    let class_bytes = ClassBytes::empty();",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(2);",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    let extractor = Extractor::new().limit_class(2);",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
          "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(2);",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "    let extractor = Extractor::new().limit_class(2);",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 2)]);",
          "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(5);",
          "    let class_bytes = ClassBytes::new(vec![",
          "        ClassBytesRange::new(1, 2),",
          "        ClassBytesRange::new(3, 3)",
          "    ]);",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    extractor.limit_class(5);",
          "    class_bytes.push(ClassBytesRange::new(1, 2));",
          "    class_bytes.push(ClassBytesRange::new(3, 3));",
          "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(5);",
          "    let class_bytes = ClassBytes::new(vec![",
          "        ClassBytesRange::new(1, 2),",
          "        ClassBytesRange::new(3, 3)",
          "    ]);",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "    extractor.limit_class(5);",
          "    class_bytes.push(ClassBytesRange::new(1, 2));",
          "    class_bytes.push(ClassBytesRange::new(3, 3));",
          "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(1);",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 3)]);",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    let extractor = Extractor::new().limit_class(1);",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 3)]);",
          "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), true);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(1);",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 3)]);",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "    let extractor = Extractor::new().limit_class(1);",
          "    let class_bytes = ClassBytes::new(vec![ClassBytesRange::new(1, 3)]);",
          "    assert_eq!(extractor.class_over_limit_bytes(&class_bytes), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new().limit_class(3);",
          "    let class_bytes = ClassBytes::new(vec![",
          "        ClassBytesRange::new(1, 2),",
          "        ClassBytesRange::new(3, 4)",
          "    ]);",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_class, 3);",
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert_eq!(class_bytes.minimum_len(), Some(2));",
          "    assert_eq!(class_bytes.maximum_len(), Some(3));",
          "    assert!(!extractor.class_over_limit_bytes(&class_bytes));"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new().limit_class(3);",
          "    let class_bytes = ClassBytes::new(vec![",
          "        ClassBytesRange::new(1, 2),",
          "        ClassBytesRange::new(3, 4)",
          "    ]);",
          "    extractor.class_over_limit_bytes(&class_bytes);",
          "    assert_eq!(extractor.limit_class, 3);",
          "    assert_eq!(class_bytes.ranges().len(), 2);",
          "    assert_eq!(class_bytes.minimum_len(), Some(2));",
          "    assert_eq!(class_bytes.maximum_len(), Some(3));",
          "    assert!(!extractor.class_over_limit_bytes(&class_bytes));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]