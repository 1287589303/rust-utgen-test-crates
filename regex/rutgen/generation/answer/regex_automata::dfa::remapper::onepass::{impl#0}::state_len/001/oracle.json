[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![Transition(0)],",
          "        starts: vec![StateID(0)],",
          "        min_match_id: StateID(1),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 1,",
          "        stride2: 1,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let _ = dfa.state_len();",
          "}"
        ],
        "oracle": [
          "    let dfa = DFA {",
          "    config: Config::default(),",
          "    nfa: NFA::default(),",
          "    table: vec![Transition(0)],",
          "    starts: vec![StateID(0)],",
          "    min_match_id: StateID(1),",
          "    classes: ByteClasses([0; 256]),",
          "    alphabet_len: 1,",
          "    stride2: 1,",
          "    pateps_offset: 0,",
          "    explicit_slot_start: 0,",
          "    };",
          "    assert_eq!(dfa.state_len(), 1);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![Transition(0)],",
          "        starts: vec![StateID(0)],",
          "        min_match_id: StateID(1),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 1,",
          "        stride2: 1,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let _ = dfa.state_len();",
          "    let dfa = DFA {",
          "    config: Config::default(),",
          "    nfa: NFA::default(),",
          "    table: vec![Transition(0)],",
          "    starts: vec![StateID(0)],",
          "    min_match_id: StateID(1),",
          "    classes: ByteClasses([0; 256]),",
          "    alphabet_len: 1,",
          "    stride2: 1,",
          "    pateps_offset: 0,",
          "    explicit_slot_start: 0,",
          "    };",
          "    assert_eq!(dfa.state_len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![StateID(0)],",
          "        min_match_id: StateID(1),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 1,",
          "        stride2: 1,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let _ = dfa.state_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.state_len(), 0);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![],",
          "        starts: vec![StateID(0)],",
          "        min_match_id: StateID(1),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 1,",
          "        stride2: 1,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let _ = dfa.state_len();",
          "    assert_eq!(dfa.state_len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![Transition(0), Transition(1), Transition(2)],",
          "        starts: vec![StateID(0)],",
          "        min_match_id: StateID(1),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 3,",
          "        stride2: 2,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let _ = dfa.state_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.state_len(), 3);",
          "    assert!(dfa.state_len() > 0);",
          "    assert!(dfa.state_len() <= dfa.table.len() >> dfa.stride2());",
          "    assert_eq!(dfa.state_len(), dfa.table.len() >> 2);",
          "    assert!(dfa.state_len() < 4);",
          "    assert!(dfa.state_len() == dfa.starts.len());"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![Transition(0), Transition(1), Transition(2)],",
          "        starts: vec![StateID(0)],",
          "        min_match_id: StateID(1),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 3,",
          "        stride2: 2,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let _ = dfa.state_len();",
          "    assert_eq!(dfa.state_len(), 3);",
          "    assert!(dfa.state_len() > 0);",
          "    assert!(dfa.state_len() <= dfa.table.len() >> dfa.stride2());",
          "    assert_eq!(dfa.state_len(), dfa.table.len() >> 2);",
          "    assert!(dfa.state_len() < 4);",
          "    assert!(dfa.state_len() == dfa.starts.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![Transition(0)],",
          "        starts: vec![StateID(u32::MAX)],",
          "        min_match_id: StateID(u32::MAX - 1),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 256,",
          "        stride2: 8,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let _ = dfa.state_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.state_len(), 1);"
        ],
        "code": [
          "{",
          "    let dfa = DFA {",
          "        config: Config::default(),",
          "        nfa: NFA::default(),",
          "        table: vec![Transition(0)],",
          "        starts: vec![StateID(u32::MAX)],",
          "        min_match_id: StateID(u32::MAX - 1),",
          "        classes: ByteClasses([0; 256]),",
          "        alphabet_len: 256,",
          "        stride2: 8,",
          "        pateps_offset: 0,",
          "        explicit_slot_start: 0,",
          "    };",
          "    let _ = dfa.state_len();",
          "    assert_eq!(dfa.state_len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]