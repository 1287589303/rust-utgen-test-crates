[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet::empty();",
          "    look_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet::empty();",
          "    look_set.len();",
          "    assert_eq!(look_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 1 };",
          "    look_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 1);",
          "    let look_set_empty = LookSet::empty();",
          "    assert_eq!(look_set_empty.len(), 0);",
          "    let look_set_full = LookSet::full();",
          "    assert_eq!(look_set_full.len(), usize::from(u32::BITS));",
          "    let look_set_multiple = LookSet { bits: 0b1010 };",
          "    assert_eq!(look_set_multiple.len(), 2);",
          "    let look_set_zero = LookSet { bits: 0 };",
          "    assert_eq!(look_set_zero.len(), 0);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 1 };",
          "    look_set.len();",
          "    assert_eq!(look_set.len(), 1);",
          "    let look_set_empty = LookSet::empty();",
          "    assert_eq!(look_set_empty.len(), 0);",
          "    let look_set_full = LookSet::full();",
          "    assert_eq!(look_set_full.len(), usize::from(u32::BITS));",
          "    let look_set_multiple = LookSet { bits: 0b1010 };",
          "    assert_eq!(look_set_multiple.len(), 2);",
          "    let look_set_zero = LookSet { bits: 0 };",
          "    assert_eq!(look_set_zero.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 2 };",
          "    look_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 1);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 2 };",
          "    look_set.len();",
          "    assert_eq!(look_set.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 4 };",
          "    look_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 2);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 4 };",
          "    look_set.len();",
          "    assert_eq!(look_set.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 8 };",
          "    look_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 3);",
          "    let look_set_empty = LookSet::empty();",
          "    assert_eq!(look_set_empty.len(), 0);",
          "    let look_set_full = LookSet::full();",
          "    assert_eq!(look_set_full.len(), 16);",
          "    let look_set_singleton = LookSet::singleton(Look::SomeVariant);",
          "    assert_eq!(look_set_singleton.len(), 1);",
          "    let look_set_multiple = LookSet { bits: 0b101010 };",
          "    assert_eq!(look_set_multiple.len(), 3);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 8 };",
          "    look_set.len();",
          "    assert_eq!(look_set.len(), 3);",
          "    let look_set_empty = LookSet::empty();",
          "    assert_eq!(look_set_empty.len(), 0);",
          "    let look_set_full = LookSet::full();",
          "    assert_eq!(look_set_full.len(), 16);",
          "    let look_set_singleton = LookSet::singleton(Look::SomeVariant);",
          "    assert_eq!(look_set_singleton.len(), 1);",
          "    let look_set_multiple = LookSet { bits: 0b101010 };",
          "    assert_eq!(look_set_multiple.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 15 }; // 1 + 2 + 4 + 8",
          "    look_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 4);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 15 }; // 1 + 2 + 4 + 8",
          "    look_set.len();",
          "    assert_eq!(look_set.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let look_set = LookSet { bits: 4294967295 }; // all bits set",
          "    look_set.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 32);"
        ],
        "code": [
          "{",
          "    let look_set = LookSet { bits: 4294967295 }; // all bits set",
          "    look_set.len();",
          "    assert_eq!(look_set.len(), 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]