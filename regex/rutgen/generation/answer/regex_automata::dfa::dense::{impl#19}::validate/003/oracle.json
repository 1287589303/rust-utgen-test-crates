[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tt = TransitionTable {",
          "        table: vec![0, 1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        stride2: 9,",
          "    };",
          "    let st = StartTable {",
          "        table: vec![StateID(0), StateID(1), StateID(2), StateID(3)],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        tt,",
          "        st,",
          "        ms: MatchStates::default(),",
          "        special: Special::default(),",
          "        accels: Accels::default(),",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let result = dfa.st.validate(&dfa);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(()));",
          "    assert!(dfa.st.universal_start_unanchored.is_none());",
          "    assert!(dfa.st.universal_start_anchored.is_none());",
          "    assert!(dfa.st.table().contains(&StateID(4)) == false);",
          "    assert!(dfa.tt.is_valid(StateID(0)));",
          "    assert!(dfa.tt.is_valid(StateID(1)));",
          "    assert!(dfa.tt.is_valid(StateID(2)));",
          "    assert!(dfa.tt.is_valid(StateID(3)));"
        ],
        "code": [
          "{",
          "    let tt = TransitionTable {",
          "        table: vec![0, 1, 2, 3],",
          "        classes: ByteClasses::default(),",
          "        stride2: 9,",
          "    };",
          "    let st = StartTable {",
          "        table: vec![StateID(0), StateID(1), StateID(2), StateID(3)],",
          "        kind: StartKind::Both,",
          "        start_map: StartByteMap { map: [Start::default(); 256] },",
          "        stride: 4,",
          "        pattern_len: Some(4),",
          "        universal_start_unanchored: None,",
          "        universal_start_anchored: None,",
          "    };",
          "    ",
          "    let dfa = DFA {",
          "        tt,",
          "        st,",
          "        ms: MatchStates::default(),",
          "        special: Special::default(),",
          "        accels: Accels::default(),",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags::default(),",
          "    };",
          "",
          "    let result = dfa.st.validate(&dfa);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result, Ok(()));",
          "    assert!(dfa.st.universal_start_unanchored.is_none());",
          "    assert!(dfa.st.universal_start_anchored.is_none());",
          "    assert!(dfa.st.table().contains(&StateID(4)) == false);",
          "    assert!(dfa.tt.is_valid(StateID(0)));",
          "    assert!(dfa.tt.is_valid(StateID(1)));",
          "    assert!(dfa.tt.is_valid(StateID(2)));",
          "    assert!(dfa.tt.is_valid(StateID(3)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]