[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let props = hir::Properties::new();",
          "    let mut props_union = props.clone();",
          "    props_union.set_look_set_suffix(vec![Look::End]);",
          "    ",
          "    let regex_info = RegexInfo(Arc::new(RegexInfoI {",
          "        config: Config::default(),",
          "        props: vec![props],",
          "        props_union,",
          "    }));",
          "",
          "    let result = regex_info.is_always_anchored_end();",
          "}"
        ],
        "oracle": [
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let props = hir::Properties::new();",
          "    let mut props_union = props.clone();",
          "    props_union.set_look_set_suffix(vec![Look::End]);",
          "    ",
          "    let regex_info = RegexInfo(Arc::new(RegexInfoI {",
          "        config: Config::default(),",
          "        props: vec![props],",
          "        props_union,",
          "    }));",
          "",
          "    let result = regex_info.is_always_anchored_end();",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let props = hir::Properties::new();",
          "    let mut props_union = props.clone();",
          "    props_union.set_look_set_suffix(vec![]); // No Look::End present",
          "    ",
          "    let regex_info = RegexInfo(Arc::new(RegexInfoI {",
          "        config: Config::default(),",
          "        props: vec![props],",
          "        props_union,",
          "    }));",
          "",
          "    let result = regex_info.is_always_anchored_end();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false); // No Look::End present in props_union",
          "    ",
          "    let mut props_union_with_end = props.clone();",
          "    props_union_with_end.set_look_set_suffix(vec![Look::End]); // Look::End present",
          "    ",
          "    let regex_info_with_end = RegexInfo(Arc::new(RegexInfoI {",
          "    config: Config::default(),",
          "    props: vec![props],",
          "    props_union: props_union_with_end,",
          "    }));",
          "    ",
          "    let result_with_end = regex_info_with_end.is_always_anchored_end();",
          "    assert_eq!(result_with_end, true); // Look::End present in props_union"
        ],
        "code": [
          "{",
          "    let props = hir::Properties::new();",
          "    let mut props_union = props.clone();",
          "    props_union.set_look_set_suffix(vec![]); // No Look::End present",
          "    ",
          "    let regex_info = RegexInfo(Arc::new(RegexInfoI {",
          "        config: Config::default(),",
          "        props: vec![props],",
          "        props_union,",
          "    }));",
          "",
          "    let result = regex_info.is_always_anchored_end();",
          "    assert_eq!(result, false); // No Look::End present in props_union",
          "    ",
          "    let mut props_union_with_end = props.clone();",
          "    props_union_with_end.set_look_set_suffix(vec![Look::End]); // Look::End present",
          "    ",
          "    let regex_info_with_end = RegexInfo(Arc::new(RegexInfoI {",
          "    config: Config::default(),",
          "    props: vec![props],",
          "    props_union: props_union_with_end,",
          "    }));",
          "    ",
          "    let result_with_end = regex_info_with_end.is_always_anchored_end();",
          "    assert_eq!(result_with_end, true); // Look::End present in props_union",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]