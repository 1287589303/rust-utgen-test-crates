[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Position { offset: 0, line: 1, column: 1 };",
          "    let end = Position { offset: 1, line: 1, column: 1 };",
          "    let span = Span::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span, Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 1 } });"
        ],
        "code": [
          "{",
          "    let start = Position { offset: 0, line: 1, column: 1 };",
          "    let end = Position { offset: 1, line: 1, column: 1 };",
          "    let span = Span::new(start, end);",
          "    assert_eq!(span, Span { start: Position { offset: 0, line: 1, column: 1 }, end: Position { offset: 1, line: 1, column: 1 } });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Position { offset: 0, line: 1, column: 1 };",
          "    let end = Position { offset: 0, line: 1, column: 1 };",
          "    let span = Span::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.start.offset, 0);",
          "    assert_eq!(span.start.line, 1);",
          "    assert_eq!(span.start.column, 1);",
          "    assert_eq!(span.end.offset, 0);",
          "    assert_eq!(span.end.line, 1);",
          "    assert_eq!(span.end.column, 1);"
        ],
        "code": [
          "{",
          "    let start = Position { offset: 0, line: 1, column: 1 };",
          "    let end = Position { offset: 0, line: 1, column: 1 };",
          "    let span = Span::new(start, end);",
          "    assert_eq!(span.start.offset, 0);",
          "    assert_eq!(span.start.line, 1);",
          "    assert_eq!(span.start.column, 1);",
          "    assert_eq!(span.end.offset, 0);",
          "    assert_eq!(span.end.line, 1);",
          "    assert_eq!(span.end.column, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Position { offset: 1, line: 1, column: 1 };",
          "    let end = Position { offset: 0, line: 1, column: 1 };",
          "    let span = Span::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.start.offset, 1);",
          "    assert_eq!(span.start.line, 1);",
          "    assert_eq!(span.start.column, 1);",
          "    assert_eq!(span.end.offset, 0);",
          "    assert_eq!(span.end.line, 1);",
          "    assert_eq!(span.end.column, 1);",
          "    assert_eq!(span, Span { start: Position { offset: 1, line: 1, column: 1 }, end: Position { offset: 0, line: 1, column: 1 } });"
        ],
        "code": [
          "{",
          "    let start = Position { offset: 1, line: 1, column: 1 };",
          "    let end = Position { offset: 0, line: 1, column: 1 };",
          "    let span = Span::new(start, end);",
          "    assert_eq!(span.start.offset, 1);",
          "    assert_eq!(span.start.line, 1);",
          "    assert_eq!(span.start.column, 1);",
          "    assert_eq!(span.end.offset, 0);",
          "    assert_eq!(span.end.line, 1);",
          "    assert_eq!(span.end.column, 1);",
          "    assert_eq!(span, Span { start: Position { offset: 1, line: 1, column: 1 }, end: Position { offset: 0, line: 1, column: 1 } });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Position { offset: 10, line: 1, column: 11 };",
          "    let end = Position { offset: 5, line: 1, column: 6 };",
          "    let span = Span::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.start.offset, 10);",
          "    assert_eq!(span.start.line, 1);",
          "    assert_eq!(span.start.column, 11);",
          "    assert_eq!(span.end.offset, 5);",
          "    assert_eq!(span.end.line, 1);",
          "    assert_eq!(span.end.column, 6);"
        ],
        "code": [
          "{",
          "    let start = Position { offset: 10, line: 1, column: 11 };",
          "    let end = Position { offset: 5, line: 1, column: 6 };",
          "    let span = Span::new(start, end);",
          "    assert_eq!(span.start.offset, 10);",
          "    assert_eq!(span.start.line, 1);",
          "    assert_eq!(span.start.column, 11);",
          "    assert_eq!(span.end.offset, 5);",
          "    assert_eq!(span.end.line, 1);",
          "    assert_eq!(span.end.column, 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let start = Position { offset: usize::MAX, line: usize::MAX, column: usize::MAX };",
          "    let end = Position { offset: usize::MAX - 1, line: usize::MAX, column: usize::MAX };",
          "    let span = Span::new(start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.start.offset, usize::MAX);",
          "    assert_eq!(span.start.line, usize::MAX);",
          "    assert_eq!(span.start.column, usize::MAX);",
          "    assert_eq!(span.end.offset, usize::MAX - 1);",
          "    assert_eq!(span.end.line, usize::MAX);",
          "    assert_eq!(span.end.column, usize::MAX);"
        ],
        "code": [
          "{",
          "    let start = Position { offset: usize::MAX, line: usize::MAX, column: usize::MAX };",
          "    let end = Position { offset: usize::MAX - 1, line: usize::MAX, column: usize::MAX };",
          "    let span = Span::new(start, end);",
          "    assert_eq!(span.start.offset, usize::MAX);",
          "    assert_eq!(span.start.line, usize::MAX);",
          "    assert_eq!(span.start.column, usize::MAX);",
          "    assert_eq!(span.end.offset, usize::MAX - 1);",
          "    assert_eq!(span.end.line, usize::MAX);",
          "    assert_eq!(span.end.column, usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]