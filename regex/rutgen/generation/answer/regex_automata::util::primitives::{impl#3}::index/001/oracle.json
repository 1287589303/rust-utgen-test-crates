[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        data: Vec<i32>,",
          "    }",
          "",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "",
          "    let index = SmallIndex::ZERO;",
          "    let _result = test_struct.index(index);",
          "}"
        ],
        "oracle": [
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "    let index_zero = SmallIndex::ZERO;",
          "    let result_zero = test_struct.index(index_zero);",
          "    assert_eq!(result_zero, &0);",
          "    let index_max = SmallIndex::MAX;",
          "    let result_max = test_struct.index(index_max);",
          "    assert_eq!(result_max, &(SmallIndex::MAX.as_usize() as i32));",
          "    let index_out_of_bounds = SmallIndex::new(SmallIndex::LIMIT).unwrap_err();",
          "    assert!(matches!(index_out_of_bounds, SmallIndexError::OutOfBounds));"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        data: Vec<i32>,",
          "    }",
          "",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "",
          "    let index = SmallIndex::ZERO;",
          "    let _result = test_struct.index(index);",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "    let index_zero = SmallIndex::ZERO;",
          "    let result_zero = test_struct.index(index_zero);",
          "    assert_eq!(result_zero, &0);",
          "    let index_max = SmallIndex::MAX;",
          "    let result_max = test_struct.index(index_max);",
          "    assert_eq!(result_max, &(SmallIndex::MAX.as_usize() as i32));",
          "    let index_out_of_bounds = SmallIndex::new(SmallIndex::LIMIT).unwrap_err();",
          "    assert!(matches!(index_out_of_bounds, SmallIndexError::OutOfBounds));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        data: Vec<i32>,",
          "    }",
          "",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "",
          "    let index = SmallIndex::MAX;",
          "    let _result = test_struct.index(index);",
          "}"
        ],
        "oracle": [
          "    _assert_eq!(test_struct.index(SmallIndex::new(0).unwrap()), &test_struct.data[0]);",
          "    _assert_eq!(test_struct.index(SmallIndex::new(1).unwrap()), &test_struct.data[1]);",
          "    _assert_eq!(test_struct.index(SmallIndex::new(SmallIndex::MAX.as_usize()).unwrap()), &test_struct.data[SmallIndex::MAX.as_usize()]);",
          "    _assert!(std::panic::catch_unwind(|| test_struct.index(SmallIndex::new(SmallIndex::MAX.as_usize() + 1).unwrap())).is_err());",
          "    _assert!(std::panic::catch_unwind(|| test_struct.index(SmallIndex::new(SmallIndex::LIMIT).unwrap())).is_err());",
          "    _assert_eq!(test_struct.index(SmallIndex::new(SmallIndex::ZERO.as_usize()).unwrap()), &test_struct.data[SmallIndex::ZERO.as_usize()]);"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        data: Vec<i32>,",
          "    }",
          "",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "",
          "    let index = SmallIndex::MAX;",
          "    let _result = test_struct.index(index);",
          "    _assert_eq!(test_struct.index(SmallIndex::new(0).unwrap()), &test_struct.data[0]);",
          "    _assert_eq!(test_struct.index(SmallIndex::new(1).unwrap()), &test_struct.data[1]);",
          "    _assert_eq!(test_struct.index(SmallIndex::new(SmallIndex::MAX.as_usize()).unwrap()), &test_struct.data[SmallIndex::MAX.as_usize()]);",
          "    _assert!(std::panic::catch_unwind(|| test_struct.index(SmallIndex::new(SmallIndex::MAX.as_usize() + 1).unwrap())).is_err());",
          "    _assert!(std::panic::catch_unwind(|| test_struct.index(SmallIndex::new(SmallIndex::LIMIT).unwrap())).is_err());",
          "    _assert_eq!(test_struct.index(SmallIndex::new(SmallIndex::ZERO.as_usize()).unwrap()), &test_struct.data[SmallIndex::ZERO.as_usize()]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        data: Vec<i32>,",
          "    }",
          "",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "",
          "    let index = SmallIndex::new((SmallIndex::MAX.as_usize() / 2)).unwrap();",
          "    let _result = test_struct.index(index);",
          "}"
        ],
        "oracle": [
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let index = SmallIndex::new((SmallIndex::MAX.as_usize() / 2)).unwrap();",
          "    assert_eq!(_result, &test_struct.data[index.as_usize()]);",
          "    assert!(index.as_usize() <= SmallIndex::MAX.as_usize());",
          "    assert_eq!(_result, &test_struct.data[(SmallIndex::MAX.as_usize() / 2)]);",
          "    assert_eq!(test_struct.index(SmallIndex::ZERO), &test_struct.data[0]);",
          "    assert_eq!(test_struct.index(SmallIndex::new(SmallIndex::LIMIT).unwrap_err()), Err(SmallIndexError::OutOfBounds));",
          "    assert_eq!(test_struct.index(SmallIndex::new(SmallIndex::MAX.as_usize()).unwrap()), &test_struct.data[SmallIndex::MAX.as_usize()]);",
          "    assert_eq!(test_struct.index(SmallIndex::new(1).unwrap()), &test_struct.data[1]);"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        data: Vec<i32>,",
          "    }",
          "",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "",
          "    let index = SmallIndex::new((SmallIndex::MAX.as_usize() / 2)).unwrap();",
          "    let _result = test_struct.index(index);",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let index = SmallIndex::new((SmallIndex::MAX.as_usize() / 2)).unwrap();",
          "    assert_eq!(_result, &test_struct.data[index.as_usize()]);",
          "    assert!(index.as_usize() <= SmallIndex::MAX.as_usize());",
          "    assert_eq!(_result, &test_struct.data[(SmallIndex::MAX.as_usize() / 2)]);",
          "    assert_eq!(test_struct.index(SmallIndex::ZERO), &test_struct.data[0]);",
          "    assert_eq!(test_struct.index(SmallIndex::new(SmallIndex::LIMIT).unwrap_err()), Err(SmallIndexError::OutOfBounds));",
          "    assert_eq!(test_struct.index(SmallIndex::new(SmallIndex::MAX.as_usize()).unwrap()), &test_struct.data[SmallIndex::MAX.as_usize()]);",
          "    assert_eq!(test_struct.index(SmallIndex::new(1).unwrap()), &test_struct.data[1]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        data: Vec<i32>,",
          "    }",
          "",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "",
          "    let index = SmallIndex::must(SmallIndex::MAX.as_usize() + 1);",
          "    let _result = test_struct.index(index);",
          "}"
        ],
        "oracle": [
          "    let index = SmallIndex::must(SmallIndex::ZERO.as_usize());",
          "    assert_eq!(test_struct.index(index), &test_struct.data[0]);",
          "    ",
          "    let index = SmallIndex::must(SmallIndex::new(1).unwrap().as_usize());",
          "    assert_eq!(test_struct.index(index), &test_struct.data[1]);",
          "    ",
          "    let index = SmallIndex::must(SmallIndex::new(SmallIndex::MAX.as_usize()).unwrap().as_usize());",
          "    assert_eq!(test_struct.index(index), &test_struct.data[SmallIndex::MAX.as_usize()]);",
          "    ",
          "    let index = SmallIndex::must(SmallIndex::new(SmallIndex::LIMIT).unwrap_err());",
          "    assert!(index.is_err());"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        data: Vec<i32>,",
          "    }",
          "",
          "    let data = (0..=SmallIndex::MAX.as_usize()).map(|i| i as i32).collect();",
          "    let test_struct = TestStruct { data };",
          "",
          "    let index = SmallIndex::must(SmallIndex::MAX.as_usize() + 1);",
          "    let _result = test_struct.index(index);",
          "    let index = SmallIndex::must(SmallIndex::ZERO.as_usize());",
          "    assert_eq!(test_struct.index(index), &test_struct.data[0]);",
          "    ",
          "    let index = SmallIndex::must(SmallIndex::new(1).unwrap().as_usize());",
          "    assert_eq!(test_struct.index(index), &test_struct.data[1]);",
          "    ",
          "    let index = SmallIndex::must(SmallIndex::new(SmallIndex::MAX.as_usize()).unwrap().as_usize());",
          "    assert_eq!(test_struct.index(index), &test_struct.data[SmallIndex::MAX.as_usize()]);",
          "    ",
          "    let index = SmallIndex::must(SmallIndex::new(SmallIndex::LIMIT).unwrap_err());",
          "    assert!(index.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]