[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"\";",
          "    let builder = RegexBuilder::new(pattern);",
          "}"
        ],
        "oracle": [
          "    let pattern = \"\";",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "    ",
          "    let pattern = \"valid_pattern\";",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "    ",
          "    let pattern = \".*\"; // edge case, valid regex",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "    ",
          "    let pattern = \"a|b\"; // valid regex with alternation",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());"
        ],
        "code": [
          "{",
          "    let pattern = \"\";",
          "    let builder = RegexBuilder::new(pattern);",
          "    let pattern = \"\";",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "    ",
          "    let pattern = \"valid_pattern\";",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "    ",
          "    let pattern = \".*\"; // edge case, valid regex",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "    ",
          "    let pattern = \"a|b\"; // valid regex with alternation",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"a*b+?c\";",
          "    let builder = RegexBuilder::new(pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.pattern, \"a*b+?c\");",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());"
        ],
        "code": [
          "{",
          "    let pattern = \"a*b+?c\";",
          "    let builder = RegexBuilder::new(pattern);",
          "    assert_eq!(builder.pattern, \"a*b+?c\");",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"a\".repeat(10 * 1024 * 1024); // 10MB pattern",
          "    let builder = RegexBuilder::new(&pattern);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());"
        ],
        "code": [
          "{",
          "    let pattern = \"a\".repeat(10 * 1024 * 1024); // 10MB pattern",
          "    let builder = RegexBuilder::new(&pattern);",
          "    assert_eq!(builder.pattern, pattern.to_string());",
          "    assert_eq!(builder.hir_config, hir::Config::default());",
          "    assert_eq!(builder.nfa_config, nfa::Config::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]