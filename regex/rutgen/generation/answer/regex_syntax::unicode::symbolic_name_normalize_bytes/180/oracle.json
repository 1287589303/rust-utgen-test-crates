[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'c', b'1'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'c', b'1'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c', b'1']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(slice[0] == b'c');",
          "    assert!(slice[1] == b'1');",
          "    assert!(slice[2..].is_empty());"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'c', b'1'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'c', b'1'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c', b'1']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(slice[0] == b'c');",
          "    assert!(slice[1] == b'1');",
          "    assert!(slice[2..].is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'c', b'2'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'c', b'2'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'2']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert_eq!(slice[0], b'2');",
          "    assert_eq!(slice[1], b'2');"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'c', b'2'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'c', b'2'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'2']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert_eq!(slice[0], b'2');",
          "    assert_eq!(slice[1], b'2');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'c', b'3'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'c', b'3'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c', b'3']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(slice[0] == b'c' && slice[1] == b'3');"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'c', b'3'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'c', b'3'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c', b'3']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(slice[0] == b'c' && slice[1] == b'3');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'c', b'4'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'c', b'4'];",
          "    let expected: &mut [u8] = &mut [b'4'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, expected);",
          "    assert!(slice.len() == 1);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'c', b'4'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'c', b'4'];",
          "    let expected: &mut [u8] = &mut [b'4'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, expected);",
          "    assert!(slice.len() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]