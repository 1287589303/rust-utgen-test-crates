[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'A', b'Z'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'A', b'Z']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'b', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'b', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'c', b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c', b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'a', b'_', b' ', b'-', b'_'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'1', b'2', b'3'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'_', b'1', b'2', b'3']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'A', b'Z'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'A', b'Z']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'b', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'b', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'c', b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c', b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'a', b'_', b' ', b'-', b'_'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'1', b'2', b'3'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'_', b'1', b'2', b'3']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'c', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'c', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'x', b'y', b'z'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y', b'z']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'c', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'c', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'x', b'y', b'z'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y', b'z']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'_'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'_'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'_']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ', b'-']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'_'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'_'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'_']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ', b'-']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'-'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_', b'c', b'A', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'-', b'b', b' ', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'_', b'A', b' ', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'A', b'_', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'-', b'-', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b' ', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ', b' ', b' ']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'is', b' ', b'a'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'a'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'-'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'_']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_', b'c', b'A', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'-', b'b', b' ', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'_', b'A', b' ', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'A', b'_', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'-', b'-', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b' ', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ', b' ', b' ']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'is', b' ', b'a'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'a'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c', b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ']);",
          "    assert!(result.len() < slice.len());",
          "    assert_eq!(slice[0], b' ');",
          "    assert_eq!(slice[1], b' ');",
          "    assert_eq!(slice[2..].len(), 0);",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(result.is_ascii());",
          "    assert!(result.iter().all(|&b| b == b' '));"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ']);",
          "    assert!(result.len() < slice.len());",
          "    assert_eq!(slice[0], b' ');",
          "    assert_eq!(slice[1], b' ');",
          "    assert_eq!(slice[2..].len(), 0);",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(result.is_ascii());",
          "    assert!(result.iter().all(|&b| b == b' '));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ', b'_']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_', b'b'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'-', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'!'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'!']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'-', b'Z'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ', b'_']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_', b'b'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'-', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'!'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'!']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'B', b'C'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'-', b'Z'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'z']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b'_', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'A'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'\\x80'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b'A', b'\\x7F'];",
          "    let expected: &mut [u8] = &mut [b'a', b'\\x7F'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), expected);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b'_', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'A'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'\\x80'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b' ']);",
          "    let mut slice: &mut [u8] = &mut [b'A', b'\\x7F'];",
          "    let expected: &mut [u8] = &mut [b'a', b'\\x7F'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
          "    let mut slice: &mut [u8] = &mut [b'A', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
          "    let mut slice: &mut [u8] = &mut [b'_', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'B']);",
          "    let mut slice: &mut [u8] = &mut [b'\\\\', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
          "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'B', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'B']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'-', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
          "    let mut slice: &mut [u8] = &mut [b'A', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'-']);",
          "    let mut slice: &mut [u8] = &mut [b'_', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'B']);",
          "    let mut slice: &mut [u8] = &mut [b'\\\\', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'-', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut []);",
          "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'B', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'B']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'a', b'b', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ', b'_', b'-', b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_', b'-', b'_', b'A', b'B', b'C'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'_', b'-', b'_', b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b'-', b'B', b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'_', b'-', b'a', b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b't', b' ', b'_', b'_', b'B', b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b't', b' ', b'_', b'_', b'a', b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c', b' ', b'b', b'a', b's', b'e'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'b', b'a', b's', b'e']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'I', b'S', b'_' , b'S', b'1'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'_', b's', b'1']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'_'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_', b'-', b'a', b'b', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ', b'_', b'-', b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'_', b'-', b'_', b'A', b'B', b'C'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'_', b'-', b'_', b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'_', b'-', b'B', b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'_', b'-', b'a', b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b't', b' ', b'_', b'_', b'B', b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b't', b' ', b'_', b'_', b'a', b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c', b' ', b'b', b'a', b's', b'e'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'b', b'a', b's', b'e']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b' ', b'I', b'S', b'_' , b'S', b'1'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b' ', b'_', b's', b'1']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'c', b'_'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b', b'c']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b' ']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]