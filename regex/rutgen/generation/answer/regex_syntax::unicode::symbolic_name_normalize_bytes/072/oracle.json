[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'i', b's'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(slice[0] == b'i' && slice[1] == b's');"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert!(slice[0] == b'i' && slice[1] == b's');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b' '];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    slice = &mut [b'I', b'S', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    slice = &mut [b'i', b's', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    slice = &mut [b'I', b'S', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    slice = &mut [b'X', b'Y', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
          "    slice = &mut [b'X', b'Y', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
          "    slice = &mut [b'X', b'Y', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
          "    slice = &mut [b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b' '];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    slice = &mut [b'I', b'S', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    slice = &mut [b'i', b's', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    slice = &mut [b'I', b'S', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    slice = &mut [b'X', b'Y', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
          "    slice = &mut [b'X', b'Y', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
          "    slice = &mut [b'X', b'Y', b'-'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'x', b'y']);",
          "    slice = &mut [b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's', b'c']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert_eq!(slice[0], b'i');",
          "    assert_eq!(slice[1], b's');"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'i', b's']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert_eq!(slice[0], b'i');",
          "    assert_eq!(slice[1], b's');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert_eq!(slice[0], b'i');",
          "    assert_eq!(slice[1], b's');"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert_eq!(slice[0], b'i');",
          "    assert_eq!(slice[1], b's');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'A'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'A'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-', b'A'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_', b'A'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'A'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'A'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'-', b'A'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'_', b'A'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'_', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), &mut [b'a', b'b']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'Z'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'Z'];",
          "    let expected_result: &mut [u8] = &mut [b'z'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), expected_result);",
          "    assert!(slice.len() == 1);",
          "    assert!(slice[0] == b'z');"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'Z'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'Z'];",
          "    let expected_result: &mut [u8] = &mut [b'z'];",
          "    assert_eq!(symbolic_name_normalize_bytes(slice), expected_result);",
          "    assert!(slice.len() == 1);",
          "    assert!(slice[0] == b'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'a'];",
          "    symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'a'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'a'];",
          "    symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'a'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]