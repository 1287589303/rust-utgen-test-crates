[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [];",
          "    symbolic_name_normalize_bytes(&mut slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut []);",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'i', b's', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'c', b'a', b'b'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b' ', b'b', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'b', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'i', b's', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'f', b'o', b'o', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'f', b'o', b'o']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [];",
          "    symbolic_name_normalize_bytes(&mut slice);",
          "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut []);",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'i', b's', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'c', b'a', b'b'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b', b' '];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b' ', b' ', b'b', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'b', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'i', b's', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'c'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'f', b'o', b'o', b'_'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'f', b'o', b'o']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [0x80];",
          "    symbolic_name_normalize_bytes(&mut slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [0x80];",
          "    let result = symbolic_name_normalize_bytes(&mut slice);",
          "    assert_eq!(result, &mut []);",
          "    assert!(slice.is_empty());",
          "    assert!(slice.len() <= 1);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [0x80];",
          "    symbolic_name_normalize_bytes(&mut slice);",
          "    let mut slice: &mut [u8] = &mut [0x80];",
          "    let result = symbolic_name_normalize_bytes(&mut slice);",
          "    assert_eq!(result, &mut []);",
          "    assert!(slice.is_empty());",
          "    assert!(slice.len() <= 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [0x80, 0x81];",
          "    symbolic_name_normalize_bytes(&mut slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [0x80, 0x81];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [0x80, 0x81]);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [0x80, 0x81];",
          "    symbolic_name_normalize_bytes(&mut slice);",
          "    let mut slice: &mut [u8] = &mut [0x80, 0x81];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [0x80, 0x81]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [0x80, b'a'];",
          "    symbolic_name_normalize_bytes(&mut slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [0x80, b'a'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a']);",
          "    assert_eq!(slice.len(), 1);",
          "    assert_eq!(slice[0], b'a');",
          "    assert!(slice.iter().all(|&b| b.is_ascii()));",
          "    assert!(slice.len() >= 1);",
          "    assert!(slice == &mut [b'a']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [0x80, b'a'];",
          "    symbolic_name_normalize_bytes(&mut slice);",
          "    let mut slice: &mut [u8] = &mut [0x80, b'a'];",
          "    assert_eq!(symbolic_name_normalize_bytes(&mut slice), &mut [b'a']);",
          "    assert_eq!(slice.len(), 1);",
          "    assert_eq!(slice[0], b'a');",
          "    assert!(slice.iter().all(|&b| b.is_ascii()));",
          "    assert!(slice.len() >= 1);",
          "    assert!(slice == &mut [b'a']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]