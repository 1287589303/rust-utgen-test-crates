[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'a', b'b'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'_', b'a'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'-', b'b'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b' ', b'_', b'b', b'B'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'b']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'a', b'b'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'_', b'a'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'a']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'-', b'b'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'b']);",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b' ', b'_', b'b', b'B'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'b']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(result == slice);",
          "    assert!(slice[0] == b'i');",
          "    assert!(slice[1] == b's');",
          "    assert!(slice[2] == b'c');"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(result == slice);",
          "    assert!(slice[0] == b'i');",
          "    assert!(slice[1] == b's');",
          "    assert!(slice[2] == b'c');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'i', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(slice.is_ascii());",
          "    assert!(result.is_ascii());",
          "    assert!(slice[0..result.len()] == *result);",
          "    assert!(result.len() == 3);",
          "    assert!(result[0] == b'i');",
          "    assert!(result[1] == b's');",
          "    assert!(result[2] == b'c');"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'i', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'i', b'S', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(slice.is_ascii());",
          "    assert!(result.is_ascii());",
          "    assert!(slice[0..result.len()] == *result);",
          "    assert!(result.len() == 3);",
          "    assert!(result[0] == b'i');",
          "    assert!(result[1] == b's');",
          "    assert!(result[2] == b'c');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b'_', b'x'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'x']);",
          "    assert_eq!(slice.len(), 4);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'-', b'a', b'b'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b'a', b'b']);",
          "    assert_eq!(slice.len(), 3);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b'_'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'c', b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b'_', b'x'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'x']);",
          "    assert_eq!(slice.len(), 4);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'-', b'a', b'b'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b'a', b'b']);",
          "    assert_eq!(slice.len(), 3);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'I', b's', b'c', b'_'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c']);",
          "    assert_eq!(slice.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]