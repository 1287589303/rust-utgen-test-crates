[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'$'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'$'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    assert_eq!(slice.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'$'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'A', b' ', b'_', b'$'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    assert_eq!(slice.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'\\x80', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'\\x80', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'C', b'_', b'A', b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c', b'a', b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B', b'_', b'\\x80'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'_', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'c']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'\\x80', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'\\x80', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'-'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b' '];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'C', b'_', b'A', b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'c', b'a', b'a']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'A', b'_', b'B', b'_', b'\\x80'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a', b'b']);",
          "    ",
          "    let mut slice: &mut [u8] = &mut [b'i', b's', b'c', b'_', b'c'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's', b'c', b'c']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'$', b' ', b'_', b'\\xFF'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut [b'$']);",
          "    assert_eq!(slice.len(), 4);",
          "    assert_eq!(slice[0], b'$');",
          "    assert_eq!(slice[1], b' ');",
          "    assert_eq!(slice[2], b'_');",
          "    assert_eq!(slice[3], b'\\xFF');",
          "    assert!(result as *const _ != slice as *const _);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'$', b' ', b'_', b'\\xFF'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'$']);",
          "    assert_eq!(slice.len(), 4);",
          "    assert_eq!(slice[0], b'$');",
          "    assert_eq!(slice[1], b' ');",
          "    assert_eq!(slice[2], b'_');",
          "    assert_eq!(slice[3], b'\\xFF');",
          "    assert!(result as *const _ != slice as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'A'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'a']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]