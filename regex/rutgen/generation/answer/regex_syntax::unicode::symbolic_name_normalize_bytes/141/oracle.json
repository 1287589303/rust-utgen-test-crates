[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
          "    assert_eq!(result, &mut [b'a', b'b']);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'A', b'B'];",
          "    assert_eq!(result, &mut [b'a', b'b']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "}"
        ],
        "oracle": [
          "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert_eq!(slice[0], b'i');",
          "    assert_eq!(slice[1], b's');",
          "    assert!(slice[0..2] != b\"is\"[..]);",
          "    assert!(slice[0..2] == b\"IS\"[..]);",
          "    assert!(slice.len() == 2);",
          "    assert!(result as *mut _ == slice as *mut _);"
        ],
        "code": [
          "{",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    let mut slice: &mut [u8] = &mut [b'I', b'S'];",
          "    let result = symbolic_name_normalize_bytes(slice);",
          "    assert_eq!(result, &mut [b'i', b's']);",
          "    assert_eq!(slice.len(), 2);",
          "    assert_eq!(slice[0], b'i');",
          "    assert_eq!(slice[1], b's');",
          "    assert!(slice[0..2] != b\"is\"[..]);",
          "    assert!(slice[0..2] == b\"IS\"[..]);",
          "    assert!(slice.len() == 2);",
          "    assert!(result as *mut _ == slice as *mut _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]