[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(5),",
          "        quit_id: StateID(2),",
          "        min_match: StateID(1),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(6),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.max, StateID(6));",
          "    assert_eq!(special.min_start, DEAD);",
          "    assert_eq!(special.max_start, DEAD);",
          "    assert!(!special.is_start_state(StateID(0)));",
          "    assert!(!special.is_start_state(StateID(1)));",
          "    assert!(!special.is_start_state(StateID(5)));",
          "    assert!(!special.is_start_state(StateID(6)));"
        ],
        "code": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(5),",
          "        quit_id: StateID(2),",
          "        min_match: StateID(1),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(4),",
          "        max_accel: StateID(6),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "    assert_eq!(special.max, StateID(6));",
          "    assert_eq!(special.min_start, DEAD);",
          "    assert_eq!(special.max_start, DEAD);",
          "    assert!(!special.is_start_state(StateID(0)));",
          "    assert!(!special.is_start_state(StateID(1)));",
          "    assert!(!special.is_start_state(StateID(5)));",
          "    assert!(!special.is_start_state(StateID(6)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(7),",
          "        min_match: StateID(5),",
          "        max_match: StateID(8),",
          "        min_accel: StateID(9),",
          "        max_accel: StateID(10),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.max, StateID(10));",
          "    assert_eq!(special.min_start, DEAD);",
          "    assert_eq!(special.max_start, DEAD);",
          "    assert!(special.is_start_state(StateID(0)) == false);",
          "    assert!(special.is_start_state(StateID(1)) == false);",
          "    assert!(special.is_start_state(StateID(10)) == false);",
          "    assert!(special.is_special_state(StateID(1)));",
          "    assert!(special.is_special_state(StateID(7)));",
          "    assert!(special.is_special_state(StateID(9)));",
          "    assert!(special.is_special_state(StateID(10)));",
          "    assert!(!special.is_special_state(StateID(11)));"
        ],
        "code": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(10),",
          "        quit_id: StateID(7),",
          "        min_match: StateID(5),",
          "        max_match: StateID(8),",
          "        min_accel: StateID(9),",
          "        max_accel: StateID(10),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "    assert_eq!(special.max, StateID(10));",
          "    assert_eq!(special.min_start, DEAD);",
          "    assert_eq!(special.max_start, DEAD);",
          "    assert!(special.is_start_state(StateID(0)) == false);",
          "    assert!(special.is_start_state(StateID(1)) == false);",
          "    assert!(special.is_start_state(StateID(10)) == false);",
          "    assert!(special.is_special_state(StateID(1)));",
          "    assert!(special.is_special_state(StateID(7)));",
          "    assert!(special.is_special_state(StateID(9)));",
          "    assert!(special.is_special_state(StateID(10)));",
          "    assert!(!special.is_special_state(StateID(11)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(3),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(0),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.max, StateID(4));",
          "    assert_eq!(special.min_start, DEAD);",
          "    assert_eq!(special.max_start, DEAD);",
          "    assert!(!special.is_start_state(StateID(0)));",
          "    assert!(!special.is_start_state(StateID(1)));",
          "    assert!(!special.is_start_state(StateID(2)));",
          "    assert!(!special.is_start_state(StateID(3)));",
          "    assert!(!special.is_start_state(StateID(4)));"
        ],
        "code": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(3),",
          "        quit_id: StateID(1),",
          "        min_match: StateID(0),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(2),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "    assert_eq!(special.max, StateID(4));",
          "    assert_eq!(special.min_start, DEAD);",
          "    assert_eq!(special.max_start, DEAD);",
          "    assert!(!special.is_start_state(StateID(0)));",
          "    assert!(!special.is_start_state(StateID(1)));",
          "    assert!(!special.is_start_state(StateID(2)));",
          "    assert!(!special.is_start_state(StateID(3)));",
          "    assert!(!special.is_start_state(StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(6),",
          "        quit_id: StateID(6),",
          "        min_match: StateID(0),",
          "        max_match: StateID(5),",
          "        min_accel: StateID(3),",
          "        max_accel: StateID(5),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.max, StateID(6));",
          "    assert_eq!(special.min_start, DEAD);",
          "    assert_eq!(special.max_start, DEAD);",
          "    assert!(special.is_start_state(StateID(0)) == false);",
          "    assert!(special.is_start_state(StateID(1)) == false);",
          "    assert!(special.is_start_state(StateID(5)) == false);"
        ],
        "code": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(6),",
          "        quit_id: StateID(6),",
          "        min_match: StateID(0),",
          "        max_match: StateID(5),",
          "        min_accel: StateID(3),",
          "        max_accel: StateID(5),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "    assert_eq!(special.max, StateID(6));",
          "    assert_eq!(special.min_start, DEAD);",
          "    assert_eq!(special.max_start, DEAD);",
          "    assert!(special.is_start_state(StateID(0)) == false);",
          "    assert!(special.is_start_state(StateID(1)) == false);",
          "    assert!(special.is_start_state(StateID(5)) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(4),",
          "        quit_id: StateID(2),",
          "        min_match: StateID(1),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(special.max.0, 4);",
          "    assert_eq!(special.min_start.0, DEAD);",
          "    assert_eq!(special.max_start.0, DEAD);",
          "    assert!(special.is_start_state(special.min_start));",
          "    assert!(special.is_start_state(special.max_start));",
          "    assert_eq!(special.quit_id.0, 2);",
          "    assert_eq!(special.min_match.0, 1);",
          "    assert_eq!(special.max_match.0, 3);",
          "    assert_eq!(special.min_accel.0, 0);",
          "    assert_eq!(special.max_accel.0, 4);",
          "    assert!(special.is_special_state(StateID(4)));"
        ],
        "code": [
          "{",
          "    let mut special = Special {",
          "        max: StateID(4),",
          "        quit_id: StateID(2),",
          "        min_match: StateID(1),",
          "        max_match: StateID(3),",
          "        min_accel: StateID(0),",
          "        max_accel: StateID(4),",
          "        min_start: StateID(0),",
          "        max_start: StateID(0),",
          "    };",
          "    special.set_no_special_start_states();",
          "    assert_eq!(special.max.0, 4);",
          "    assert_eq!(special.min_start.0, DEAD);",
          "    assert_eq!(special.max_start.0, DEAD);",
          "    assert!(special.is_start_state(special.min_start));",
          "    assert!(special.is_start_state(special.max_start));",
          "    assert_eq!(special.quit_id.0, 2);",
          "    assert_eq!(special.min_match.0, 1);",
          "    assert_eq!(special.max_match.0, 3);",
          "    assert_eq!(special.min_accel.0, 0);",
          "    assert_eq!(special.max_accel.0, 4);",
          "    assert!(special.is_special_state(StateID(4)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]