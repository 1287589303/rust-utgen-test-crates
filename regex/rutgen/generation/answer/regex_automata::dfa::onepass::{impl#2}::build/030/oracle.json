[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::always_match(); // An NFA that always matches",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::LeftmostLongest)",
          "        .starts_for_each_pattern(true)",
          "        .byte_classes(true);",
          "    ",
          "    let mut builder = InternalBuilder {",
          "        dfa: DFA::new(config.clone(), &nfa),",
          "        uncompiled_nfa_ids: vec![StateID::ZERO],",
          "        nfa_to_dfa_id: vec![StateID::ZERO; nfa.pattern_len()],",
          "        stack: vec![],",
          "        seen: SparseSet::new(32), ",
          "        matched: false,",
          "        config: config,",
          "        nfa: &nfa,",
          "        classes: ByteClasses::default(),",
          "    };",
          "    ",
          "    builder.add_empty_state().unwrap();",
          "    builder.add_start_state(None, nfa.start_anchored()).unwrap();",
          "",
          "    for pid in nfa.patterns() {",
          "        builder.add_start_state(Some(pid), nfa.start_pattern(pid).unwrap()).unwrap();",
          "    }",
          "",
          "    while let Some(nfa_id) = builder.uncompiled_nfa_ids.pop() {",
          "        builder.stack_push(nfa_id, Epsilons::empty()).unwrap();",
          "        while let Some((id, epsilons)) = builder.stack.pop() {",
          "            match *nfa.state(id) {",
          "                thompson::State::Sparse(ref sparse) => {",
          "                    for trans in sparse.transitions.iter() {",
          "                        builder.compile_transition(builder.dfa_id, trans, epsilons).unwrap();",
          "                    }",
          "                }",
          "                _ => {}",
          "            }",
          "        }",
          "    }",
          "",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    self.nfa.look_set_any().available().map_err(BuildError::word)? is Ok",
          "    self.nfa.look_set_any().iter().next().is_some() is true",
          "    look.as_repr() <= Look::WordUnicodeNegate.as_repr() is true",
          "    self.nfa.look_set_any().iter().next().is_none() is false",
          "    self.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT is true",
          "    self.nfa.group_info().explicit_slot_len() <= Slots::LIMIT is true",
          "    self.add_empty_state()? is Ok",
          "    self.dfa.starts.is_empty() is true",
          "    self.add_start_state(None, self.nfa.start_anchored())? is Ok",
          "    self.config.get_starts_for_each_pattern() is true",
          "    self.nfa.patterns().next().is_some() is true",
          "    self.add_start_state(Some(pid), self.nfa.start_pattern(pid).unwrap())? is Ok",
          "    self.nfa.patterns().next().is_none() is false",
          "    let Some(nfa_id) = self.uncompiled_nfa_ids.pop() is true",
          "    self.stack_push(nfa_id, Epsilons::empty())? is Ok",
          "    let Some((id, epsilons)) = self.stack.pop() is true",
          "    * self.nfa.state(id) matches thompson::State::Sparse(ref sparse) is true",
          "    trans in sparse.transitions.iter() is true",
          "    self.compile_transition(dfa_id, trans, epsilons)? is Ok",
          "    trans in sparse.transitions.iter() is false",
          "    let Some((id, epsilons)) = self.stack.pop() is true",
          "    let Some(nfa_id) = self.uncompiled_nfa_ids.pop() is true",
          "    result is Ok()"
        ],
        "code": [
          "{",
          "    let nfa = NFA::always_match(); // An NFA that always matches",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::LeftmostLongest)",
          "        .starts_for_each_pattern(true)",
          "        .byte_classes(true);",
          "    ",
          "    let mut builder = InternalBuilder {",
          "        dfa: DFA::new(config.clone(), &nfa),",
          "        uncompiled_nfa_ids: vec![StateID::ZERO],",
          "        nfa_to_dfa_id: vec![StateID::ZERO; nfa.pattern_len()],",
          "        stack: vec![],",
          "        seen: SparseSet::new(32), ",
          "        matched: false,",
          "        config: config,",
          "        nfa: &nfa,",
          "        classes: ByteClasses::default(),",
          "    };",
          "    ",
          "    builder.add_empty_state().unwrap();",
          "    builder.add_start_state(None, nfa.start_anchored()).unwrap();",
          "",
          "    for pid in nfa.patterns() {",
          "        builder.add_start_state(Some(pid), nfa.start_pattern(pid).unwrap()).unwrap();",
          "    }",
          "",
          "    while let Some(nfa_id) = builder.uncompiled_nfa_ids.pop() {",
          "        builder.stack_push(nfa_id, Epsilons::empty()).unwrap();",
          "        while let Some((id, epsilons)) = builder.stack.pop() {",
          "            match *nfa.state(id) {",
          "                thompson::State::Sparse(ref sparse) => {",
          "                    for trans in sparse.transitions.iter() {",
          "                        builder.compile_transition(builder.dfa_id, trans, epsilons).unwrap();",
          "                    }",
          "                }",
          "                _ => {}",
          "            }",
          "        }",
          "    }",
          "",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "    self.nfa.look_set_any().available().map_err(BuildError::word)? is Ok",
          "    self.nfa.look_set_any().iter().next().is_some() is true",
          "    look.as_repr() <= Look::WordUnicodeNegate.as_repr() is true",
          "    self.nfa.look_set_any().iter().next().is_none() is false",
          "    self.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT is true",
          "    self.nfa.group_info().explicit_slot_len() <= Slots::LIMIT is true",
          "    self.add_empty_state()? is Ok",
          "    self.dfa.starts.is_empty() is true",
          "    self.add_start_state(None, self.nfa.start_anchored())? is Ok",
          "    self.config.get_starts_for_each_pattern() is true",
          "    self.nfa.patterns().next().is_some() is true",
          "    self.add_start_state(Some(pid), self.nfa.start_pattern(pid).unwrap())? is Ok",
          "    self.nfa.patterns().next().is_none() is false",
          "    let Some(nfa_id) = self.uncompiled_nfa_ids.pop() is true",
          "    self.stack_push(nfa_id, Epsilons::empty())? is Ok",
          "    let Some((id, epsilons)) = self.stack.pop() is true",
          "    * self.nfa.state(id) matches thompson::State::Sparse(ref sparse) is true",
          "    trans in sparse.transitions.iter() is true",
          "    self.compile_transition(dfa_id, trans, epsilons)? is Ok",
          "    trans in sparse.transitions.iter() is false",
          "    let Some((id, epsilons)) = self.stack.pop() is true",
          "    let Some(nfa_id) = self.uncompiled_nfa_ids.pop() is true",
          "    result is Ok()",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new_many(&[\"pattern1\", \"pattern2\"]).unwrap();",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::LeftmostLongest)",
          "        .starts_for_each_pattern(true);",
          "    ",
          "    let mut builder = InternalBuilder {",
          "        dfa: DFA::new(config.clone(), &nfa),",
          "        uncompiled_nfa_ids: vec![StateID::ZERO],",
          "        nfa_to_dfa_id: vec![StateID::ZERO; nfa.pattern_len()],",
          "        stack: vec![],",
          "        seen: SparseSet::new(32),",
          "        matched: false,",
          "        config,",
          "        nfa: &nfa,",
          "        classes: ByteClasses::default(),",
          "    };",
          "",
          "    builder.add_empty_state().unwrap();",
          "    builder.add_start_state(None, nfa.start_anchored()).unwrap();",
          "",
          "    for pid in nfa.patterns() {",
          "        builder.add_start_state(Some(pid), nfa.start_pattern(pid).unwrap()).unwrap();",
          "    }",
          "",
          "    while let Some(nfa_id) = builder.uncompiled_nfa_ids.pop() {",
          "        builder.stack_push(nfa_id, Epsilons::empty()).unwrap();",
          "        while let Some((id, epsilons)) = builder.stack.pop() {",
          "            match *nfa.state(id) {",
          "                thompson::State::Sparse(ref sparse) => {",
          "                    for trans in sparse.transitions.iter() {",
          "                        builder.compile_transition(builder.dfa_id, trans, epsilons).unwrap();",
          "                    }",
          "                }",
          "                _ => {}",
          "            }",
          "        }",
          "    }",
          "",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    self.nfa.look_set_any().available().map_err(BuildError::word)?;",
          "    self.nfa.look_set_any().iter().next().is_some();",
          "    assert!(look.as_repr() <= Look::WordUnicodeNegate.as_repr());",
          "    self.nfa.look_set_any().iter().all(|look| look.as_repr() != Look::WordUnicodeNegate.as_repr());",
          "    assert!(self.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT);",
          "    assert!(self.nfa.group_info().explicit_slot_len() <= Slots::LIMIT);",
          "    self.add_empty_state().is_ok();",
          "    assert_eq!(DEAD, self.add_empty_state()?);",
          "    self.add_start_state(None, self.nfa.start_anchored()).is_ok();",
          "    assert!(self.config.get_starts_for_each_pattern());",
          "    self.nfa.patterns().next().is_some();",
          "    self.add_start_state(Some(pid), self.nfa.start_pattern(pid).unwrap()).is_ok();",
          "    self.nfa.patterns().next().is_none();",
          "    let Some(nfa_id) = self.uncompiled_nfa_ids.pop();",
          "    self.stack_push(nfa_id, Epsilons::empty()).is_ok();",
          "    let Some((id, epsilons)) = self.stack.pop();",
          "    matches!(self.nfa.state(id), thompson::State::Sparse(_));",
          "    matches!(self.nfa.state(id), thompson::State::Sparse(_));",
          "    assert!(sparse.transitions.iter().next().is_some());",
          "    self.compile_transition(dfa_id, trans, epsilons).is_ok();",
          "    assert!(sparse.transitions.iter().next().is_none());",
          "    let Some((id, epsilons)) = self.stack.pop();",
          "    let Some(nfa_id) = self.uncompiled_nfa_ids.pop();",
          "    result.is_ok() && assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new_many(&[\"pattern1\", \"pattern2\"]).unwrap();",
          "    let config = Config::new()",
          "        .match_kind(MatchKind::LeftmostLongest)",
          "        .starts_for_each_pattern(true);",
          "    ",
          "    let mut builder = InternalBuilder {",
          "        dfa: DFA::new(config.clone(), &nfa),",
          "        uncompiled_nfa_ids: vec![StateID::ZERO],",
          "        nfa_to_dfa_id: vec![StateID::ZERO; nfa.pattern_len()],",
          "        stack: vec![],",
          "        seen: SparseSet::new(32),",
          "        matched: false,",
          "        config,",
          "        nfa: &nfa,",
          "        classes: ByteClasses::default(),",
          "    };",
          "",
          "    builder.add_empty_state().unwrap();",
          "    builder.add_start_state(None, nfa.start_anchored()).unwrap();",
          "",
          "    for pid in nfa.patterns() {",
          "        builder.add_start_state(Some(pid), nfa.start_pattern(pid).unwrap()).unwrap();",
          "    }",
          "",
          "    while let Some(nfa_id) = builder.uncompiled_nfa_ids.pop() {",
          "        builder.stack_push(nfa_id, Epsilons::empty()).unwrap();",
          "        while let Some((id, epsilons)) = builder.stack.pop() {",
          "            match *nfa.state(id) {",
          "                thompson::State::Sparse(ref sparse) => {",
          "                    for trans in sparse.transitions.iter() {",
          "                        builder.compile_transition(builder.dfa_id, trans, epsilons).unwrap();",
          "                    }",
          "                }",
          "                _ => {}",
          "            }",
          "        }",
          "    }",
          "",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "    self.nfa.look_set_any().available().map_err(BuildError::word)?;",
          "    self.nfa.look_set_any().iter().next().is_some();",
          "    assert!(look.as_repr() <= Look::WordUnicodeNegate.as_repr());",
          "    self.nfa.look_set_any().iter().all(|look| look.as_repr() != Look::WordUnicodeNegate.as_repr());",
          "    assert!(self.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT);",
          "    assert!(self.nfa.group_info().explicit_slot_len() <= Slots::LIMIT);",
          "    self.add_empty_state().is_ok();",
          "    assert_eq!(DEAD, self.add_empty_state()?);",
          "    self.add_start_state(None, self.nfa.start_anchored()).is_ok();",
          "    assert!(self.config.get_starts_for_each_pattern());",
          "    self.nfa.patterns().next().is_some();",
          "    self.add_start_state(Some(pid), self.nfa.start_pattern(pid).unwrap()).is_ok();",
          "    self.nfa.patterns().next().is_none();",
          "    let Some(nfa_id) = self.uncompiled_nfa_ids.pop();",
          "    self.stack_push(nfa_id, Epsilons::empty()).is_ok();",
          "    let Some((id, epsilons)) = self.stack.pop();",
          "    matches!(self.nfa.state(id), thompson::State::Sparse(_));",
          "    matches!(self.nfa.state(id), thompson::State::Sparse(_));",
          "    assert!(sparse.transitions.iter().next().is_some());",
          "    self.compile_transition(dfa_id, trans, epsilons).is_ok();",
          "    assert!(sparse.transitions.iter().next().is_none());",
          "    let Some((id, epsilons)) = self.stack.pop();",
          "    let Some(nfa_id) = self.uncompiled_nfa_ids.pop();",
          "    result.is_ok() && assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nfa = NFA::new_many(&[\"pattern_with_slots\"]).unwrap();",
          "    ",
          "    let mut config = Config::new()",
          "        .match_kind(MatchKind::LeftmostLongest)",
          "        .starts_for_each_pattern(true);",
          "    ",
          "    config.make_slot_limit(Slots::LIMIT);",
          "    ",
          "    let mut builder = InternalBuilder {",
          "        dfa: DFA::new(config.clone(), &nfa),",
          "        uncompiled_nfa_ids: vec![StateID::ZERO],",
          "        nfa_to_dfa_id: vec![StateID::ZERO; nfa.pattern_len()],",
          "        stack: vec![],",
          "        seen: SparseSet::new(32),",
          "        matched: false,",
          "        config,",
          "        nfa: &nfa,",
          "        classes: ByteClasses::default(),",
          "    };",
          "",
          "    builder.add_empty_state().unwrap();",
          "    builder.add_start_state(None, nfa.start_anchored()).unwrap();",
          "",
          "    for pid in nfa.patterns() {",
          "        builder.add_start_state(Some(pid), nfa.start_pattern(pid).unwrap()).unwrap();",
          "    }",
          "",
          "    while let Some(nfa_id) = builder.uncompiled_nfa_ids.pop() {",
          "        builder.stack_push(nfa_id, Epsilons::empty()).unwrap();",
          "        while let Some((id, epsilons)) = builder.stack.pop() {",
          "            match *nfa.state(id) {",
          "                thompson::State::Sparse(ref sparse) => {",
          "                    for trans in sparse.transitions.iter() {",
          "                        builder.compile_transition(builder.dfa_id, trans, epsilons).unwrap();",
          "                    }",
          "                }",
          "                _ => {}",
          "            }",
          "        }",
          "    }",
          "",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert!(self.nfa.look_set_any().available().is_ok());",
          "    assert!(self.nfa.look_set_any().iter().next().is_some());",
          "    assert!(look.as_repr() <= Look::WordUnicodeNegate.as_repr());",
          "    assert!(self.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT);",
          "    assert!(self.nfa.group_info().explicit_slot_len() <= Slots::LIMIT);",
          "    assert!(self.add_empty_state().is_ok());",
          "    assert!(self.add_start_state(None, self.nfa.start_anchored()).is_ok());",
          "    assert!(self.config.get_starts_for_each_pattern());",
          "    assert!(self.nfa.patterns().next().is_some());",
          "    assert!(self.add_start_state(Some(pid), self.nfa.start_pattern(pid).unwrap()).is_ok());",
          "    assert!(self.uncompiled_nfa_ids.pop().is_some());",
          "    assert!(self.stack_push(nfa_id, Epsilons::empty()).is_ok());",
          "    assert!(self.stack.pop().is_some());",
          "    assert!(matches!(*self.nfa.state(id), thompson::State::Sparse(_)));",
          "    assert!(transitions_iter().next().is_some());",
          "    assert!(self.compile_transition(dfa_id, trans, epsilons).is_ok());",
          "    assert!(self.stack.pop().is_some());",
          "    assert!(self.uncompiled_nfa_ids.pop().is_some());",
          "    assert_eq!(result, Ok(self.dfa));"
        ],
        "code": [
          "{",
          "    let nfa = NFA::new_many(&[\"pattern_with_slots\"]).unwrap();",
          "    ",
          "    let mut config = Config::new()",
          "        .match_kind(MatchKind::LeftmostLongest)",
          "        .starts_for_each_pattern(true);",
          "    ",
          "    config.make_slot_limit(Slots::LIMIT);",
          "    ",
          "    let mut builder = InternalBuilder {",
          "        dfa: DFA::new(config.clone(), &nfa),",
          "        uncompiled_nfa_ids: vec![StateID::ZERO],",
          "        nfa_to_dfa_id: vec![StateID::ZERO; nfa.pattern_len()],",
          "        stack: vec![],",
          "        seen: SparseSet::new(32),",
          "        matched: false,",
          "        config,",
          "        nfa: &nfa,",
          "        classes: ByteClasses::default(),",
          "    };",
          "",
          "    builder.add_empty_state().unwrap();",
          "    builder.add_start_state(None, nfa.start_anchored()).unwrap();",
          "",
          "    for pid in nfa.patterns() {",
          "        builder.add_start_state(Some(pid), nfa.start_pattern(pid).unwrap()).unwrap();",
          "    }",
          "",
          "    while let Some(nfa_id) = builder.uncompiled_nfa_ids.pop() {",
          "        builder.stack_push(nfa_id, Epsilons::empty()).unwrap();",
          "        while let Some((id, epsilons)) = builder.stack.pop() {",
          "            match *nfa.state(id) {",
          "                thompson::State::Sparse(ref sparse) => {",
          "                    for trans in sparse.transitions.iter() {",
          "                        builder.compile_transition(builder.dfa_id, trans, epsilons).unwrap();",
          "                    }",
          "                }",
          "                _ => {}",
          "            }",
          "        }",
          "    }",
          "",
          "    let result = builder.build();",
          "    assert!(result.is_ok());",
          "    assert!(self.nfa.look_set_any().available().is_ok());",
          "    assert!(self.nfa.look_set_any().iter().next().is_some());",
          "    assert!(look.as_repr() <= Look::WordUnicodeNegate.as_repr());",
          "    assert!(self.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT);",
          "    assert!(self.nfa.group_info().explicit_slot_len() <= Slots::LIMIT);",
          "    assert!(self.add_empty_state().is_ok());",
          "    assert!(self.add_start_state(None, self.nfa.start_anchored()).is_ok());",
          "    assert!(self.config.get_starts_for_each_pattern());",
          "    assert!(self.nfa.patterns().next().is_some());",
          "    assert!(self.add_start_state(Some(pid), self.nfa.start_pattern(pid).unwrap()).is_ok());",
          "    assert!(self.uncompiled_nfa_ids.pop().is_some());",
          "    assert!(self.stack_push(nfa_id, Epsilons::empty()).is_ok());",
          "    assert!(self.stack.pop().is_some());",
          "    assert!(matches!(*self.nfa.state(id), thompson::State::Sparse(_)));",
          "    assert!(transitions_iter().next().is_some());",
          "    assert!(self.compile_transition(dfa_id, trans, epsilons).is_ok());",
          "    assert!(self.stack.pop().is_some());",
          "    assert!(self.uncompiled_nfa_ids.pop().is_some());",
          "    assert_eq!(result, Ok(self.dfa));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]