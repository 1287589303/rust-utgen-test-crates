[
  {
    "uses": [
      "use crate::util::look::LookSet;",
      "use crate::dfa::DFA;",
      "use crate::dfa::onepass::InternalBuilder;",
      "use crate::util::primitives::PatternID;",
      "use crate::nfa::thompson::NFA;",
      "use crate::util::alphabet::ByteClasses;",
      "use crate::util::primitives::StateID;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use crate::dfa::onepass::InternalBuilder;",
          "    use crate::dfa::DFA;",
          "    use crate::nfa::thompson::NFA;",
          "    use crate::util::alphabet::ByteClasses;",
          "    use crate::util::primitives::{PatternID, StateID};",
          "    use crate::util::look::LookSet;",
          "",
          "    let nfa = NFA::always_match(); // or some other method to create an NFA",
          "    let config = Config::new()",
          "        .starts_for_each_pattern(true);",
          "    ",
          "    let mut builder = InternalBuilder {",
          "        dfa: DFA::new(config.clone(), nfa.clone()),",
          "        uncompiled_nfa_ids: vec![StateID::ZERO],",
          "        nfa_to_dfa_id: vec![StateID::ZERO; nfa.pattern_len()],",
          "        stack: Vec::new(),",
          "        seen: SparseSet::new(0),",
          "        matched: false,",
          "        config,",
          "        nfa: &nfa,",
          "        classes: ByteClasses::default(),",
          "    };",
          "",
          "    // Set up the conditions",
          "    assert!(builder.nfa.look_set_any().available().is_ok());",
          "    assert_eq!(builder.nfa.look_set_any().iter().count(), 0);",
          "    assert!(builder.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT);",
          "    assert!(builder.nfa.group_info().explicit_slot_len() <= Slots::LIMIT);",
          "    assert!(builder.add_empty_state().is_ok());",
          "    assert!(builder.add_start_state(None, builder.nfa.start_anchored()).is_ok());",
          "",
          "    let pid = PatternID::default(); // choose a valid PatternID from nfa.patterns()",
          "    assert!(builder.config.get_starts_for_each_pattern());",
          "    assert!(builder.nfa.patterns().len() > 0);",
          "    ",
          "    // Ensure calling add_start_state with the pid gives an error",
          "    assert!(builder.add_start_state(Some(pid), builder.nfa.start_pattern(pid).unwrap()).is_err());",
          "}"
        ],
        "oracle": [
          "    assert!(builder.nfa.look_set_any().available().is_ok());",
          "    assert_eq!(builder.nfa.look_set_any().iter().count(), 0);",
          "    assert!(builder.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT);",
          "    assert!(builder.nfa.group_info().explicit_slot_len() <= Slots::LIMIT);",
          "    assert!(builder.add_empty_state().is_ok());",
          "    assert!(builder.add_start_state(None, builder.nfa.start_anchored()).is_ok());",
          "    let pid = PatternID::default();",
          "    assert!(builder.config.get_starts_for_each_pattern());",
          "    assert!(builder.nfa.patterns().len() > 0);",
          "    assert!(builder.add_start_state(Some(pid), builder.nfa.start_pattern(pid).unwrap()).is_err());"
        ],
        "code": [
          "{",
          "    use crate::dfa::onepass::InternalBuilder;",
          "    use crate::dfa::DFA;",
          "    use crate::nfa::thompson::NFA;",
          "    use crate::util::alphabet::ByteClasses;",
          "    use crate::util::primitives::{PatternID, StateID};",
          "    use crate::util::look::LookSet;",
          "",
          "    let nfa = NFA::always_match(); // or some other method to create an NFA",
          "    let config = Config::new()",
          "        .starts_for_each_pattern(true);",
          "    ",
          "    let mut builder = InternalBuilder {",
          "        dfa: DFA::new(config.clone(), nfa.clone()),",
          "        uncompiled_nfa_ids: vec![StateID::ZERO],",
          "        nfa_to_dfa_id: vec![StateID::ZERO; nfa.pattern_len()],",
          "        stack: Vec::new(),",
          "        seen: SparseSet::new(0),",
          "        matched: false,",
          "        config,",
          "        nfa: &nfa,",
          "        classes: ByteClasses::default(),",
          "    };",
          "",
          "    // Set up the conditions",
          "    assert!(builder.nfa.look_set_any().available().is_ok());",
          "    assert_eq!(builder.nfa.look_set_any().iter().count(), 0);",
          "    assert!(builder.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT);",
          "    assert!(builder.nfa.group_info().explicit_slot_len() <= Slots::LIMIT);",
          "    assert!(builder.add_empty_state().is_ok());",
          "    assert!(builder.add_start_state(None, builder.nfa.start_anchored()).is_ok());",
          "",
          "    let pid = PatternID::default(); // choose a valid PatternID from nfa.patterns()",
          "    assert!(builder.config.get_starts_for_each_pattern());",
          "    assert!(builder.nfa.patterns().len() > 0);",
          "    ",
          "    // Ensure calling add_start_state with the pid gives an error",
          "    assert!(builder.add_start_state(Some(pid), builder.nfa.start_pattern(pid).unwrap()).is_err());",
          "    assert!(builder.nfa.look_set_any().available().is_ok());",
          "    assert_eq!(builder.nfa.look_set_any().iter().count(), 0);",
          "    assert!(builder.nfa.pattern_len().as_u64() <= PatternEpsilons::PATTERN_ID_LIMIT);",
          "    assert!(builder.nfa.group_info().explicit_slot_len() <= Slots::LIMIT);",
          "    assert!(builder.add_empty_state().is_ok());",
          "    assert!(builder.add_start_state(None, builder.nfa.start_anchored()).is_ok());",
          "    let pid = PatternID::default();",
          "    assert!(builder.config.get_starts_for_each_pattern());",
          "    assert!(builder.nfa.patterns().len() > 0);",
          "    assert!(builder.add_start_state(Some(pid), builder.nfa.start_pattern(pid).unwrap()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]