[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder {",
          "            config: Config::default(),",
          "            #[cfg(feature = \"syntax\")]",
          "            thompson: thompson::Compiler::default(),",
          "        }),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: Vec::new(),",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie {",
          "            states: Vec::new(),",
          "            free: Vec::new(),",
          "            iter_stack: RefCell::new(Vec::new()),",
          "            iter_ranges: RefCell::new(Vec::new()),",
          "            dupe_stack: Vec::new(),",
          "            insert_stack: Vec::new(),",
          "        }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let thompson_ref1 = ThompsonRef {",
          "        start: StateID(1),",
          "        end: StateID(2),",
          "    };",
          "",
          "    let thompson_ref2 = ThompsonRef {",
          "        start: StateID(3),",
          "        end: StateID(4),",
          "    };",
          "",
          "    let result_iter = vec![",
          "        Ok(thompson_ref1),",
          "        Ok(thompson_ref2),",
          "    ].into_iter();",
          "",
          "    let result = compiler.c_alt_iter(result_iter);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start.0, expected_union_start);",
          "    assert_eq!(thompson_ref.end.0, expected_end);"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder {",
          "            config: Config::default(),",
          "            #[cfg(feature = \"syntax\")]",
          "            thompson: thompson::Compiler::default(),",
          "        }),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: Vec::new(),",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie {",
          "            states: Vec::new(),",
          "            free: Vec::new(),",
          "            iter_stack: RefCell::new(Vec::new()),",
          "            iter_ranges: RefCell::new(Vec::new()),",
          "            dupe_stack: Vec::new(),",
          "            insert_stack: Vec::new(),",
          "        }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let thompson_ref1 = ThompsonRef {",
          "        start: StateID(1),",
          "        end: StateID(2),",
          "    };",
          "",
          "    let thompson_ref2 = ThompsonRef {",
          "        start: StateID(3),",
          "        end: StateID(4),",
          "    };",
          "",
          "    let result_iter = vec![",
          "        Ok(thompson_ref1),",
          "        Ok(thompson_ref2),",
          "    ].into_iter();",
          "",
          "    let result = compiler.c_alt_iter(result_iter);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start.0, expected_union_start);",
          "    assert_eq!(thompson_ref.end.0, expected_end);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder {",
          "            config: Config::default(),",
          "            #[cfg(feature = \"syntax\")]",
          "            thompson: thompson::Compiler::default(),",
          "        }),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: Vec::new(),",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie {",
          "            states: Vec::new(),",
          "            free: Vec::new(),",
          "            iter_stack: RefCell::new(Vec::new()),",
          "            iter_ranges: RefCell::new(Vec::new()),",
          "            dupe_stack: Vec::new(),",
          "            insert_stack: Vec::new(),",
          "        }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let thompson_ref1 = ThompsonRef {",
          "        start: StateID(1),",
          "        end: StateID(2),",
          "    };",
          "",
          "    let thompson_ref2 = ThompsonRef {",
          "        start: StateID(3),",
          "        end: StateID(4),",
          "    };",
          "",
          "    let thompson_ref3 = ThompsonRef {",
          "        start: StateID(5),",
          "        end: StateID(6),",
          "    };",
          "",
          "    let result_iter = vec![",
          "        Ok(thompson_ref1),",
          "        Ok(thompson_ref2),",
          "        Ok(thompson_ref3),",
          "    ].into_iter();",
          "",
          "    let result = compiler.c_alt_iter(result_iter);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_union_id);",
          "    assert_eq!(thompson_ref.end, expected_end_id);",
          "    assert!(compiler.patch.called_with(expected_union_id, thompson_ref.start).is_ok());",
          "    assert!(compiler.patch.called_with(thompson_ref.end, expected_end_id).is_ok());",
          "    assert!(compiler.add_union().is_ok());",
          "    assert!(compiler.add_empty().is_ok());",
          "    assert!(compiler.patch.called_with(thompson_ref1.end, thompson_ref.end).is_ok());",
          "    assert!(compiler.patch.called_with(thompson_ref2.end, thompson_ref.end).is_ok());",
          "    assert!(compiler.patch.called_with(thompson_ref3.end, thompson_ref.end).is_ok());"
        ],
        "code": [
          "{",
          "    let compiler = Compiler {",
          "        parser: ParserBuilder::new(),",
          "        config: Config::default(),",
          "        builder: RefCell::new(Builder {",
          "            config: Config::default(),",
          "            #[cfg(feature = \"syntax\")]",
          "            thompson: thompson::Compiler::default(),",
          "        }),",
          "        utf8_state: RefCell::new(Utf8State {",
          "            compiled: Utf8BoundedMap::default(),",
          "            uncompiled: Vec::new(),",
          "        }),",
          "        trie_state: RefCell::new(RangeTrie {",
          "            states: Vec::new(),",
          "            free: Vec::new(),",
          "            iter_stack: RefCell::new(Vec::new()),",
          "            iter_ranges: RefCell::new(Vec::new()),",
          "            dupe_stack: Vec::new(),",
          "            insert_stack: Vec::new(),",
          "        }),",
          "        utf8_suffix: RefCell::new(Utf8SuffixMap {",
          "            version: 0,",
          "            capacity: 0,",
          "            map: Vec::new(),",
          "        }),",
          "    };",
          "",
          "    let thompson_ref1 = ThompsonRef {",
          "        start: StateID(1),",
          "        end: StateID(2),",
          "    };",
          "",
          "    let thompson_ref2 = ThompsonRef {",
          "        start: StateID(3),",
          "        end: StateID(4),",
          "    };",
          "",
          "    let thompson_ref3 = ThompsonRef {",
          "        start: StateID(5),",
          "        end: StateID(6),",
          "    };",
          "",
          "    let result_iter = vec![",
          "        Ok(thompson_ref1),",
          "        Ok(thompson_ref2),",
          "        Ok(thompson_ref3),",
          "    ].into_iter();",
          "",
          "    let result = compiler.c_alt_iter(result_iter);",
          "    assert!(result.is_ok());",
          "    let thompson_ref = result.unwrap();",
          "    assert_eq!(thompson_ref.start, expected_union_id);",
          "    assert_eq!(thompson_ref.end, expected_end_id);",
          "    assert!(compiler.patch.called_with(expected_union_id, thompson_ref.start).is_ok());",
          "    assert!(compiler.patch.called_with(thompson_ref.end, expected_end_id).is_ok());",
          "    assert!(compiler.add_union().is_ok());",
          "    assert!(compiler.add_empty().is_ok());",
          "    assert!(compiler.patch.called_with(thompson_ref1.end, thompson_ref.end).is_ok());",
          "    assert!(compiler.patch.called_with(thompson_ref2.end, thompson_ref.end).is_ok());",
          "    assert!(compiler.patch.called_with(thompson_ref3.end, thompson_ref.end).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]