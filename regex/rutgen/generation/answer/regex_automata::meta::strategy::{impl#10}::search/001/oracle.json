[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "    let input = Input::new(&b\"example\"[..])",
          "        .span(0..7)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let reverse_inner = ReverseInner {",
          "        core,",
          "        preinner: Prefilter::default(),",
          "        nfarev: NFA::default(),",
          "        hybrid: wrappers::ReverseHybrid::default(),",
          "        dfa: wrappers::ReverseDFA::default(),",
          "    };",
          "",
          "    let _ = reverse_inner.search(&mut cache, &input);",
          "}"
        ],
        "oracle": [
          "    let cache = Cache { capmatches: Captures::new(), pikevm: wrappers::PikeVMCache::default(), backtrack: wrappers::BoundedBacktrackerCache::default(), onepass: wrappers::OnePassCache::default(), hybrid: wrappers::HybridCache::default(), revhybrid: wrappers::ReverseHybridCache::default() };",
          "    let input = Input::new(&b\"example\"[..]).span(0..7).anchored(Anchored::Yes).earliest(true);",
          "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
          "    let reverse_inner = ReverseInner { core, preinner: Prefilter::default(), nfarev: NFA::default(), hybrid: wrappers::ReverseHybrid::default(), dfa: wrappers::ReverseDFA::default() };",
          "    let result = reverse_inner.search(&mut cache, &input);",
          "    assert!(result.is_some());"
        ],
        "code": [
          "{",
          "    let cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "    let input = Input::new(&b\"example\"[..])",
          "        .span(0..7)",
          "        .anchored(Anchored::Yes)",
          "        .earliest(true);",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let reverse_inner = ReverseInner {",
          "        core,",
          "        preinner: Prefilter::default(),",
          "        nfarev: NFA::default(),",
          "        hybrid: wrappers::ReverseHybrid::default(),",
          "        dfa: wrappers::ReverseDFA::default(),",
          "    };",
          "",
          "    let _ = reverse_inner.search(&mut cache, &input);",
          "    let cache = Cache { capmatches: Captures::new(), pikevm: wrappers::PikeVMCache::default(), backtrack: wrappers::BoundedBacktrackerCache::default(), onepass: wrappers::OnePassCache::default(), hybrid: wrappers::HybridCache::default(), revhybrid: wrappers::ReverseHybridCache::default() };",
          "    let input = Input::new(&b\"example\"[..]).span(0..7).anchored(Anchored::Yes).earliest(true);",
          "    let core = Core { info: RegexInfo::default(), pre: None, nfa: NFA::default(), nfarev: None, pikevm: wrappers::PikeVM::default(), backtrack: wrappers::BoundedBacktracker::default(), onepass: wrappers::OnePass::default(), hybrid: wrappers::Hybrid::default(), dfa: wrappers::DFA::default() };",
          "    let reverse_inner = ReverseInner { core, preinner: Prefilter::default(), nfarev: NFA::default(), hybrid: wrappers::ReverseHybrid::default(), dfa: wrappers::ReverseDFA::default() };",
          "    let result = reverse_inner.search(&mut cache, &input);",
          "    assert!(result.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern_id = PatternID::new(1);",
          "    let cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "    let input = Input::new(&b\"example\"[..])",
          "        .span(0..7)",
          "        .anchored(Anchored::Pattern(pattern_id))",
          "        .earliest(true);",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let reverse_inner = ReverseInner {",
          "        core,",
          "        preinner: Prefilter::default(),",
          "        nfarev: NFA::default(),",
          "        hybrid: wrappers::ReverseHybrid::default(),",
          "        dfa: wrappers::ReverseDFA::default(),",
          "    };",
          "",
          "    let _ = reverse_inner.search(&mut cache, &input);",
          "}"
        ],
        "oracle": [
          "    assert!(reverse_inner.search(&mut cache, &input).is_some());",
          "    assert_eq!(cache.capmatches.get_match().is_some(), true);",
          "    assert_eq!(input.get_anchored().is_anchored(), true);",
          "    assert_eq!(input.get_span(), Span::from(0..7));",
          "    assert_eq!(cache.pikevm, wrappers::PikeVMCache::default());",
          "    assert_eq!(cache.backtrack, wrappers::BoundedBacktrackerCache::default());",
          "    assert_eq!(cache.onepass, wrappers::OnePassCache::default());",
          "    assert_eq!(cache.hybrid, wrappers::HybridCache::default());",
          "    assert_eq!(cache.revhybrid, wrappers::ReverseHybridCache::default());",
          "    assert_eq!(reverse_inner.is_accelerated(), false);",
          "    assert!(reverse_inner.memory_usage() > 0);",
          "    assert_eq!(reverse_inner.group_info(), &GroupInfo::default());",
          "    assert!(reverse_inner.create_cache().capmatches.is_empty());",
          "    reverse_inner.reset_cache(&mut cache);",
          "    assert!(cache.capmatches.is_empty());"
        ],
        "code": [
          "{",
          "    let pattern_id = PatternID::new(1);",
          "    let cache = Cache {",
          "        capmatches: Captures::new(),",
          "        pikevm: wrappers::PikeVMCache::default(),",
          "        backtrack: wrappers::BoundedBacktrackerCache::default(),",
          "        onepass: wrappers::OnePassCache::default(),",
          "        hybrid: wrappers::HybridCache::default(),",
          "        revhybrid: wrappers::ReverseHybridCache::default(),",
          "    };",
          "    let input = Input::new(&b\"example\"[..])",
          "        .span(0..7)",
          "        .anchored(Anchored::Pattern(pattern_id))",
          "        .earliest(true);",
          "    ",
          "    let core = Core {",
          "        info: RegexInfo::default(),",
          "        pre: None,",
          "        nfa: NFA::default(),",
          "        nfarev: None,",
          "        pikevm: wrappers::PikeVM::default(),",
          "        backtrack: wrappers::BoundedBacktracker::default(),",
          "        onepass: wrappers::OnePass::default(),",
          "        hybrid: wrappers::Hybrid::default(),",
          "        dfa: wrappers::DFA::default(),",
          "    };",
          "    ",
          "    let reverse_inner = ReverseInner {",
          "        core,",
          "        preinner: Prefilter::default(),",
          "        nfarev: NFA::default(),",
          "        hybrid: wrappers::ReverseHybrid::default(),",
          "        dfa: wrappers::ReverseDFA::default(),",
          "    };",
          "",
          "    let _ = reverse_inner.search(&mut cache, &input);",
          "    assert!(reverse_inner.search(&mut cache, &input).is_some());",
          "    assert_eq!(cache.capmatches.get_match().is_some(), true);",
          "    assert_eq!(input.get_anchored().is_anchored(), true);",
          "    assert_eq!(input.get_span(), Span::from(0..7));",
          "    assert_eq!(cache.pikevm, wrappers::PikeVMCache::default());",
          "    assert_eq!(cache.backtrack, wrappers::BoundedBacktrackerCache::default());",
          "    assert_eq!(cache.onepass, wrappers::OnePassCache::default());",
          "    assert_eq!(cache.hybrid, wrappers::HybridCache::default());",
          "    assert_eq!(cache.revhybrid, wrappers::ReverseHybridCache::default());",
          "    assert_eq!(reverse_inner.is_accelerated(), false);",
          "    assert!(reverse_inner.memory_usage() > 0);",
          "    assert_eq!(reverse_inner.group_info(), &GroupInfo::default());",
          "    assert!(reverse_inner.create_cache().capmatches.is_empty());",
          "    reverse_inner.reset_cache(&mut cache);",
          "    assert!(cache.capmatches.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]