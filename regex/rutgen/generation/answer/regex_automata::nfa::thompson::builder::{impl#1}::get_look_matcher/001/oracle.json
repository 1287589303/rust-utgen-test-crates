[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::default();",
          "    let matcher = builder.get_look_matcher();",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::default();",
          "    let matcher = builder.get_look_matcher();",
          "    assert_eq!(matcher, &LookMatcher::default());"
        ],
        "code": [
          "{",
          "    let builder = Builder::default();",
          "    let matcher = builder.get_look_matcher();",
          "    let builder = Builder::default();",
          "    let matcher = builder.get_look_matcher();",
          "    assert_eq!(matcher, &LookMatcher::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut builder = Builder::default();",
          "    let look_matcher = LookMatcher {",
          "        lineterm: DebugByte::default(),",
          "    };",
          "    builder.set_look_matcher(look_matcher);",
          "    let matcher = builder.get_look_matcher();",
          "}"
        ],
        "oracle": [
          "    let builder = Builder::default();",
          "    assert_eq!(builder.get_look_matcher(), &LookMatcher::default());",
          "    ",
          "    let mut builder = Builder::default();",
          "    let look_matcher = LookMatcher {",
          "    lineterm: DebugByte::default(),",
          "    };",
          "    builder.set_look_matcher(look_matcher);",
          "    let matcher = builder.get_look_matcher();",
          "    assert_eq!(matcher.lineterm, DebugByte::default());"
        ],
        "code": [
          "{",
          "    let mut builder = Builder::default();",
          "    let look_matcher = LookMatcher {",
          "        lineterm: DebugByte::default(),",
          "    };",
          "    builder.set_look_matcher(look_matcher);",
          "    let matcher = builder.get_look_matcher();",
          "    let builder = Builder::default();",
          "    assert_eq!(builder.get_look_matcher(), &LookMatcher::default());",
          "    ",
          "    let mut builder = Builder::default();",
          "    let look_matcher = LookMatcher {",
          "    lineterm: DebugByte::default(),",
          "    };",
          "    builder.set_look_matcher(look_matcher);",
          "    let matcher = builder.get_look_matcher();",
          "    assert_eq!(matcher.lineterm, DebugByte::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]