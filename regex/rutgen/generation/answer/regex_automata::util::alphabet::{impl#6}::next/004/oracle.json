[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 0,",
          "        end_byte: Some(5),",
          "        last_class: Some(1),",
          "    };",
          "    ",
          "    let _ = representatives.next();",
          "}"
        ],
        "oracle": [
          "    representatives.cur_byte = 0; representatives.end_byte = Some(5); representatives.last_class = Some(1); assert_eq!(representatives.next().is_none(), false); // preconditions met: cur_byte < end_byte, last_class != class",
          "    ",
          "    representatives.cur_byte = 1; representatives.end_byte = Some(5); representatives.last_class = Some(1); assert_eq!(representatives.next().is_none(), true); // precondition: last_class == class",
          "    ",
          "    representatives.cur_byte = 5; representatives.end_byte = Some(5); assert_eq!(representatives.next(), None); // precondition: cur_byte == end_byte",
          "    ",
          "    representatives.cur_byte = usize::MAX; representatives.end_byte = None; assert_eq!(representatives.next(), None); // precondition: cur_byte == usize::MAX"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 0,",
          "        end_byte: Some(5),",
          "        last_class: Some(1),",
          "    };",
          "    ",
          "    let _ = representatives.next();",
          "    representatives.cur_byte = 0; representatives.end_byte = Some(5); representatives.last_class = Some(1); assert_eq!(representatives.next().is_none(), false); // preconditions met: cur_byte < end_byte, last_class != class",
          "    ",
          "    representatives.cur_byte = 1; representatives.end_byte = Some(5); representatives.last_class = Some(1); assert_eq!(representatives.next().is_none(), true); // precondition: last_class == class",
          "    ",
          "    representatives.cur_byte = 5; representatives.end_byte = Some(5); assert_eq!(representatives.next(), None); // precondition: cur_byte == end_byte",
          "    ",
          "    representatives.cur_byte = usize::MAX; representatives.end_byte = None; assert_eq!(representatives.next(), None); // precondition: cur_byte == usize::MAX",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 1,",
          "        end_byte: Some(5),",
          "        last_class: Some(0),",
          "    };",
          "    ",
          "    let _ = representatives.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(representatives.cur_byte, 2);",
          "    assert_eq!(representatives.last_class, Some(0));",
          "    assert_eq!(representatives.next(), Some(Unit::u8(1)));",
          "    assert_eq!(representatives.next(), Some(Unit::u8(2)));",
          "    assert_eq!(representatives.next(), Some(Unit::u8(3)));",
          "    assert_eq!(representatives.next(), Some(Unit::u8(4)));",
          "    assert_eq!(representatives.next(), None);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 1,",
          "        end_byte: Some(5),",
          "        last_class: Some(0),",
          "    };",
          "    ",
          "    let _ = representatives.next();",
          "    assert_eq!(representatives.cur_byte, 2);",
          "    assert_eq!(representatives.last_class, Some(0));",
          "    assert_eq!(representatives.next(), Some(Unit::u8(1)));",
          "    assert_eq!(representatives.next(), Some(Unit::u8(2)));",
          "    assert_eq!(representatives.next(), Some(Unit::u8(3)));",
          "    assert_eq!(representatives.next(), Some(Unit::u8(4)));",
          "    assert_eq!(representatives.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 256,",
          "        end_byte: Some(256),",
          "        last_class: Some(1),",
          "    };",
          "    ",
          "    let result = representatives.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 256,",
          "        end_byte: Some(256),",
          "        last_class: Some(1),",
          "    };",
          "    ",
          "    let result = representatives.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: usize::MAX,",
          "        end_byte: None,",
          "        last_class: Some(0),",
          "    };",
          "    ",
          "    let result = representatives.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: usize::MAX,",
          "        end_byte: None,",
          "        last_class: Some(0),",
          "    };",
          "    ",
          "    let result = representatives.next();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]