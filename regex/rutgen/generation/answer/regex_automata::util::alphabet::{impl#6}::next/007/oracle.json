[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 256,",
          "        end_byte: None,",
          "        last_class: None,",
          "    };",
          "    representatives.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(representatives.cur_byte, 256);",
          "    assert_eq!(representatives.last_class, None);",
          "    assert_eq!(representatives.next(), None);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 256,",
          "        end_byte: None,",
          "        last_class: None,",
          "    };",
          "    representatives.next();",
          "    assert_eq!(representatives.cur_byte, 256);",
          "    assert_eq!(representatives.last_class, None);",
          "    assert_eq!(representatives.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 256,",
          "        end_byte: None,",
          "        last_class: Some(0),",
          "    };",
          "    representatives.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(representatives.next(), None);",
          "    representatives.cur_byte = usize::MAX;",
          "    assert_eq!(representatives.next(), None);"
        ],
        "code": [
          "{",
          "    let classes = ByteClasses([0; 256]);",
          "    let mut representatives = ByteClassRepresentatives {",
          "        classes: &classes,",
          "        cur_byte: 256,",
          "        end_byte: None,",
          "        last_class: Some(0),",
          "    };",
          "    representatives.next();",
          "    assert_eq!(representatives.next(), None);",
          "    representatives.cur_byte = usize::MAX;",
          "    assert_eq!(representatives.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]