[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::new(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\n\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), '\\\\');",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert_eq!(parser.pos.get(), Position::new(1));",
          "    assert_eq!(parser.scratch.borrow().is_empty(), true);",
          "    assert_eq!(parser.stack_class.borrow().is_empty(), true);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert!(parser.parser.nest_limit > 0);",
          "    assert!(parser.parser.octal);",
          "    assert_eq!(parser.parser.initial_ignore_whitespace, false);",
          "    assert_eq!(parser.parser.capture_index.get(), 0);",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert_eq!(parser.stack_group.borrow().len(), 0);",
          "    assert_eq!(parser.scratch.borrow().is_empty(), true);",
          "    assert_eq!(parser.stack_class.borrow().len(), 0);",
          "    assert_eq!(parser.char(), 'n');",
          "    assert!(matches!(parser.parse_set_class_item().unwrap(), Primitive::Literal(_)));",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert_eq!(parser.char(), 'n');",
          "    assert!(parser.char() != '\\\\');"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::new(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\n\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    assert_eq!(parser.char(), '\\\\');",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert_eq!(parser.pos.get(), Position::new(1));",
          "    assert_eq!(parser.scratch.borrow().is_empty(), true);",
          "    assert_eq!(parser.stack_class.borrow().is_empty(), true);",
          "    assert_eq!(parser.capture_names.borrow().len(), 0);",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert!(parser.parser.nest_limit > 0);",
          "    assert!(parser.parser.octal);",
          "    assert_eq!(parser.parser.initial_ignore_whitespace, false);",
          "    assert_eq!(parser.parser.capture_index.get(), 0);",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert_eq!(parser.stack_group.borrow().len(), 0);",
          "    assert_eq!(parser.scratch.borrow().is_empty(), true);",
          "    assert_eq!(parser.stack_class.borrow().len(), 0);",
          "    assert_eq!(parser.char(), 'n');",
          "    assert!(matches!(parser.parse_set_class_item().unwrap(), Primitive::Literal(_)));",
          "    assert!(parser.parse_escape().is_ok());",
          "    assert_eq!(parser.char(), 'n');",
          "    assert!(parser.char() != '\\\\');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::new(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\t\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), '\\\\');",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.pos.get(), Position::new(1));",
          "    assert!(parser.scratch.borrow().is_empty());",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::new(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\t\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    assert_eq!(parser.char(), '\\\\');",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.pos.get(), Position::new(1));",
          "    assert!(parser.scratch.borrow().is_empty());",
          "    assert_eq!(parser.comments.borrow().len(), 0);",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::new(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\141\", // octal for 'a'",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), '\\\\');",
          "    let result = parser.parse_set_class_item();",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result.unwrap(), Primitive::Literal(ast::Literal { kind: LiteralKind::Verbatim, c: 'a', .. })));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::new(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\141\", // octal for 'a'",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    assert_eq!(parser.char(), '\\\\');",
          "    let result = parser.parse_set_class_item();",
          "    assert!(result.is_ok());",
          "    assert!(matches!(result.unwrap(), Primitive::Literal(ast::Literal { kind: LiteralKind::Verbatim, c: 'a', .. })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::new(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\u03A9\", // Unicode for 'Ω'",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), '\\\\');",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert_eq!(parser.scratch.borrow().len(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert_eq!(parser.stack_class.borrow().len(), 0);",
          "    assert_eq!(parser.stack_group.borrow().len(), 0);",
          "    assert_eq!(parser.pos.get(), Position::new(0));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.nest_limit, 10);",
          "    assert!(parser.parser.octal);"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::new(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\u03A9\", // Unicode for 'Ω'",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    assert_eq!(parser.char(), '\\\\');",
          "    assert!(parser.parse_set_class_item().is_ok());",
          "    assert_eq!(parser.scratch.borrow().len(), 0);",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert_eq!(parser.stack_class.borrow().len(), 0);",
          "    assert_eq!(parser.stack_group.borrow().len(), 0);",
          "    assert_eq!(parser.pos.get(), Position::new(0));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert_eq!(parser.nest_limit, 10);",
          "    assert!(parser.parser.octal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]