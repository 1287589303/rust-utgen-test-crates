[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"a\")),",
          "        },",
          "        pattern: \"a\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(Position::from(0)), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::from(\"b\")), }, pattern: \"b\", }; assert_eq!(parser.parse_set_class_item().unwrap(), Primitive::Literal(ast::Literal { span: parser.span_char(), kind: ast::LiteralKind::Verbatim, c: 'b' })); let parser = ParserI { parser: Parser { pos: Cell::new(Position::from(0)), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::from(\"c\")), }, pattern: \"c\", }; assert_eq!(parser.parse_set_class_item().unwrap(), Primitive::Literal(ast::Literal { span: parser.span_char(), kind: ast::LiteralKind::Verbatim, c: 'c' }));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"a\")),",
          "        },",
          "        pattern: \"a\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(Position::from(0)), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::from(\"b\")), }, pattern: \"b\", }; assert_eq!(parser.parse_set_class_item().unwrap(), Primitive::Literal(ast::Literal { span: parser.span_char(), kind: ast::LiteralKind::Verbatim, c: 'b' })); let parser = ParserI { parser: Parser { pos: Cell::new(Position::from(0)), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::from(\"c\")), }, pattern: \"c\", }; assert_eq!(parser.parse_set_class_item().unwrap(), Primitive::Literal(ast::Literal { span: parser.span_char(), kind: ast::LiteralKind::Verbatim, c: 'c' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(input)),",
          "        },",
          "        pattern: input,",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), 'a');",
          "    assert_eq!(parser.char(), 'z');",
          "    assert_eq!(parser.char(), 'A');",
          "    assert_eq!(parser.char(), 'Z');",
          "    assert_eq!(parser.char(), '0');",
          "    assert_eq!(parser.char(), '9');",
          "    assert_eq!(parser.bump(), true);",
          "    assert_eq!(parser.parse_set_class_item().is_ok(), true);",
          "    assert!(parser.scratch.borrow().len() > 0);",
          "    assert_eq!(parser.capture_index.get(), 0);"
        ],
        "code": [
          "{",
          "    let input = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(input)),",
          "        },",
          "        pattern: input,",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    assert_eq!(parser.char(), 'a');",
          "    assert_eq!(parser.char(), 'z');",
          "    assert_eq!(parser.char(), 'A');",
          "    assert_eq!(parser.char(), 'Z');",
          "    assert_eq!(parser.char(), '0');",
          "    assert_eq!(parser.char(), '9');",
          "    assert_eq!(parser.bump(), true);",
          "    assert_eq!(parser.parse_set_class_item().is_ok(), true);",
          "    assert!(parser.scratch.borrow().len() > 0);",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"☃\")),",
          "        },",
          "        pattern: \"☃\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), '☃');",
          "    assert_eq!(parser.pos.get(), Position::from(0));",
          "    assert_eq!(parser.scratch.borrow(), \"☃\");",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.capture_index.get(), 0);"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"☃\")),",
          "        },",
          "        pattern: \"☃\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    assert_eq!(parser.char(), '☃');",
          "    assert_eq!(parser.pos.get(), Position::from(0));",
          "    assert_eq!(parser.scratch.borrow(), \"☃\");",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"hello\")),",
          "        },",
          "        pattern: \"hello\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.pos.get(), Position::from(0));",
          "    assert_eq!(parser.scratch.borrow().as_str(), \"hello\");",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.parser.capture_index.get(), 0);",
          "    assert_eq!(parser.parser.nest_limit, 10);",
          "    assert!(!parser.parser.octal);",
          "    assert!(!parser.parser.empty_min_range);",
          "    assert!(!parser.parser.initial_ignore_whitespace);",
          "    assert!(!parser.parser.ignore_whitespace.get());",
          "    assert!(matches!(parser.parse_set_class_item().unwrap(), Ok(Primitive::Literal(_))));",
          "    assert!(parser.pos.get() > Position::from(0));",
          "    assert_eq!(parser.scratch.borrow().as_str(), \"hello\");"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\"hello\")),",
          "        },",
          "        pattern: \"hello\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    assert_eq!(parser.pos.get(), Position::from(0));",
          "    assert_eq!(parser.scratch.borrow().as_str(), \"hello\");",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.parser.capture_index.get(), 0);",
          "    assert_eq!(parser.parser.nest_limit, 10);",
          "    assert!(!parser.parser.octal);",
          "    assert!(!parser.parser.empty_min_range);",
          "    assert!(!parser.parser.initial_ignore_whitespace);",
          "    assert!(!parser.parser.ignore_whitespace.get());",
          "    assert!(matches!(parser.parse_set_class_item().unwrap(), Ok(Primitive::Literal(_))));",
          "    assert!(parser.pos.get() > Position::from(0));",
          "    assert_eq!(parser.scratch.borrow().as_str(), \"hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\".*?\")),",
          "        },",
          "        pattern: \".*?\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), '.');",
          "    assert_eq!(parser.pos.get(), Position::from(0));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.scratch.borrow().as_str(), \".*?\");",
          "    assert!(matches!(parser.parse_set_class_item().unwrap(), Primitive::Literal(ast::Literal { kind: LiteralKind::Verbatim, c: '.', .. })));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(Position::from(0)),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::from(\".*?\")),",
          "        },",
          "        pattern: \".*?\",",
          "    };",
          "    parser.parse_set_class_item().unwrap();",
          "    assert_eq!(parser.char(), '.');",
          "    assert_eq!(parser.pos.get(), Position::from(0));",
          "    assert_eq!(parser.capture_index.get(), 0);",
          "    assert!(parser.comments.borrow().is_empty());",
          "    assert!(parser.stack_group.borrow().is_empty());",
          "    assert!(parser.stack_class.borrow().is_empty());",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    assert_eq!(parser.scratch.borrow().as_str(), \".*?\");",
          "    assert!(matches!(parser.parse_set_class_item().unwrap(), Primitive::Literal(ast::Literal { kind: LiteralKind::Verbatim, c: '.', .. })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]