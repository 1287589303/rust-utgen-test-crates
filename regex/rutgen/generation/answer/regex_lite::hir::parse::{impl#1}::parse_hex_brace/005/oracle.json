[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{1a3f}\"; // valid hex representation",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')), // starting at a valid hex character",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_hex_brace().unwrap(), Hir::char('ǿ')); // valid hex conversion",
          "    assert!(parser.parse_hex_brace().is_ok()); // confirming successful parsing",
          "    let pattern = \"{g12}\"; // invalid hex character",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('g')); // starting with an invalid hex character",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT))); // expected error for invalid hex digit",
          "    let pattern = \"{}\"; // empty hex representation",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('{')); // starting brace",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY))); // expected error for empty hex",
          "    let pattern = \"{1g}\"; // invalid hex character following valid one",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('1')); // starting with valid hex character",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT))); // expected error for invalid hex digit",
          "    let pattern = \"{1a3f\"; // uncaptured closing brace",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('1')); // starting with valid hex character",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF))); // expected error for unexpected EOF",
          "    let pattern = \"{1A3F}\"; // valid hex representation with uppercase",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('1')); // starting with valid hex character",
          "    assert_eq!(parser.parse_hex_brace().unwrap(), Hir::char('ǿ')); // valid hex conversion with uppercase",
          "    let pattern = \"{123456}\"; // valid hex representation exceeding range",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('1')); // starting with valid hex character",
          "    assert_eq!(parser.parse_hex_brace().unwrap(), Hir::char('ÿ')); // valid hex conversion, should succeed"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{1a3f}\"; // valid hex representation",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')), // starting at a valid hex character",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    assert_eq!(parser.parse_hex_brace().unwrap(), Hir::char('ǿ')); // valid hex conversion",
          "    assert!(parser.parse_hex_brace().is_ok()); // confirming successful parsing",
          "    let pattern = \"{g12}\"; // invalid hex character",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('g')); // starting with an invalid hex character",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT))); // expected error for invalid hex digit",
          "    let pattern = \"{}\"; // empty hex representation",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('{')); // starting brace",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY))); // expected error for empty hex",
          "    let pattern = \"{1g}\"; // invalid hex character following valid one",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('1')); // starting with valid hex character",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT))); // expected error for invalid hex digit",
          "    let pattern = \"{1a3f\"; // uncaptured closing brace",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('1')); // starting with valid hex character",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF))); // expected error for unexpected EOF",
          "    let pattern = \"{1A3F}\"; // valid hex representation with uppercase",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('1')); // starting with valid hex character",
          "    assert_eq!(parser.parse_hex_brace().unwrap(), Hir::char('ǿ')); // valid hex conversion with uppercase",
          "    let pattern = \"{123456}\"; // valid hex representation exceeding range",
          "    parser.pos.set(0); // reset position",
          "    parser.char.set(Some('1')); // starting with valid hex character",
          "    assert_eq!(parser.parse_hex_brace().unwrap(), Hir::char('ÿ')); // valid hex conversion, should succeed",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{2b4c}\"; // valid hex representation with multiple characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('2')), // starting at a valid hex character",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{xyz}\"; // invalid hex representation",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('x')), // starting at an invalid hex character",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{2b4c\"; // missing closing brace",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('2')), // valid start",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{}\"; // empty hex braces",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')), // starting at opening brace",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{2g4b}\"; // invalid hex representation",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('2')), // starting at valid hex character",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{2b4c}\"; // valid hex representation with multiple characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('2')), // starting at a valid hex character",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{xyz}\"; // invalid hex representation",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('x')), // starting at an invalid hex character",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{2b4c\"; // missing closing brace",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('2')), // valid start",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{}\"; // empty hex braces",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')), // starting at opening brace",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    ",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{2g4b}\"; // invalid hex representation",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('2')), // starting at valid hex character",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{ABCDEF}\"; // valid hex representation with capital letters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('A')), // starting at a valid hex character",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('A')));",
          "    parser.char.set(Some('G'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char.set(None);",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    parser.char.set(Some('}'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    parser.char.set(Some('1'));",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('1')));",
          "    parser.char.set(Some('{'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char.set(Some('F'));",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('F')));",
          "    parser.char.set(Some('G'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parse_hex_brace();",
          "    parser.char.set(Some('X'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char.set(Some('3'));",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('3')));",
          "    parser.char.set(Some('}'));",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('3')));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{ABCDEF}\"; // valid hex representation with capital letters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('A')), // starting at a valid hex character",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('A')));",
          "    parser.char.set(Some('G'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char.set(None);",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    parser.char.set(Some('}'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    parser.char.set(Some('1'));",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('1')));",
          "    parser.char.set(Some('{'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char.set(Some('F'));",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('F')));",
          "    parser.char.set(Some('G'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parse_hex_brace();",
          "    parser.char.set(Some('X'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char.set(Some('3'));",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('3')));",
          "    parser.char.set(Some('}'));",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('3')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{}\"; // empty hex representation",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')), // correctly positioned at opening brace",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    ",
          "    let pattern = \"{g}\"; // invalid hex character",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    ",
          "    let pattern = \"{123g}\"; // invalid hex character in the middle",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    ",
          "    let pattern = \"{123\"; // missing closing brace",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    ",
          "    let pattern = \"{1a}\"; // valid hex representation",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('\\u{1a}')));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{}\"; // empty hex representation",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')), // correctly positioned at opening brace",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    ",
          "    let pattern = \"{g}\"; // invalid hex character",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    ",
          "    let pattern = \"{123g}\"; // invalid hex character in the middle",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    ",
          "    let pattern = \"{123\"; // missing closing brace",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    ",
          "    let pattern = \"{1a}\"; // valid hex representation",
          "    let parser = Parser {",
          "    config,",
          "    pattern,",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('{')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(Flags::default()),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Ok(parser.hir_char('\\u{1a}')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{1g3h}\"; // invalid hex representation with non-hex characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')), // starting at a valid hex character",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char.get(), Some('1'));",
          "    ",
          "    assert!(parser.bump_and_bump_space());",
          "    ",
          "    assert!(is_hex(parser.char.get().unwrap()));",
          "    ",
          "    assert!(!parser.bump_and_bump_space());",
          "    ",
          "    assert!(!parser.is_done());",
          "    ",
          "    assert!(parser.char.get() == Some('}'));",
          "    ",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    ",
          "    assert!(parser.capture_index.get() == 0);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"{1g3h}\"; // invalid hex representation with non-hex characters",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('1')), // starting at a valid hex character",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    assert_eq!(parser.char.get(), Some('1'));",
          "    ",
          "    assert!(parser.bump_and_bump_space());",
          "    ",
          "    assert!(is_hex(parser.char.get().unwrap()));",
          "    ",
          "    assert!(!parser.bump_and_bump_space());",
          "    ",
          "    assert!(!parser.is_done());",
          "    ",
          "    assert!(parser.char.get() == Some('}'));",
          "    ",
          "    assert!(parser.capture_names.borrow().is_empty());",
          "    ",
          "    assert!(parser.capture_index.get() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]