[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.parse_hex_brace().unwrap_err().msg, ERR_HEX_BRACE_INVALID_DIGIT);",
          "    assert_eq!(parser.parse_hex_brace().unwrap_err().msg, ERR_HEX_BRACE_UNEXPECTED_EOF);",
          "    assert_eq!(parser.parse_hex_brace().unwrap_err().msg, ERR_HEX_BRACE_EMPTY);",
          "    assert_eq!(parser.parse_hex_brace().unwrap_err().msg, ERR_HEX_BRACE_INVALID);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_hex_brace();",
          "    assert_eq!(parser.parse_hex_brace().unwrap_err().msg, ERR_HEX_BRACE_INVALID_DIGIT);",
          "    assert_eq!(parser.parse_hex_brace().unwrap_err().msg, ERR_HEX_BRACE_UNEXPECTED_EOF);",
          "    assert_eq!(parser.parse_hex_brace().unwrap_err().msg, ERR_HEX_BRACE_EMPTY);",
          "    assert_eq!(parser.parse_hex_brace().unwrap_err().msg, ERR_HEX_BRACE_INVALID);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{g}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    parser.bump_and_bump_space() = false;",
          "    parser.is_done() = false;",
          "    parser.char() = 'g';",
          "    parser.char() = '}';",
          "    parser.char() = None;",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char() = '{';",
          "    parser.char() = None;",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    parser.char() = '}';",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    parser.char() = 'g';",
          "    assert_eq!(parser.parse_hex_brace(), Ok(hir::char('g')));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{g}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_hex_brace();",
          "    parser.bump_and_bump_space() = false;",
          "    parser.is_done() = false;",
          "    parser.char() = 'g';",
          "    parser.char() = '}';",
          "    parser.char() = None;",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char() = '{';",
          "    parser.char() = None;",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    parser.char() = '}';",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    parser.char() = 'g';",
          "    assert_eq!(parser.parse_hex_brace(), Ok(hir::char('g')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{1F}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    parser.char.set(Some('x'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char.set(None);",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    parser.char.set(Some('}'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    parser.char.set(Some('G'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{1F}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('{')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags::default()),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    parser.parse_hex_brace();",
          "    parser.char.set(Some('x'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "    parser.char.set(None);",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF)));",
          "    parser.char.set(Some('}'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_EMPTY)));",
          "    parser.char.set(Some('G'));",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]