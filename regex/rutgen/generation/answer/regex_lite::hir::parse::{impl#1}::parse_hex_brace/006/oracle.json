[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{g}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('g')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"{g}\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('g')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{g}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('g')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"{g}\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('g')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{!}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('!')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"{!}\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('!')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{!}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('!')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"{!}\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('!')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{ }\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"{ g }\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('g')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{ }\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some(' ')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"{ g }\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('g')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    assert_eq!(parser.parse_hex_brace(), Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{\\n}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\n')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "}"
        ],
        "oracle": [
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"{\\n}\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('\\n')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));"
        ],
        "code": [
          "{",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "        config,",
          "        pattern: \"{\\n}\",",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(Some('\\n')),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(flags),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "    let _ = parser.parse_hex_brace();",
          "    let flags = Flags::default();",
          "    let config = Config::default();",
          "    let parser = Parser {",
          "    config,",
          "    pattern: \"{\\n}\",",
          "    depth: Cell::new(0),",
          "    pos: Cell::new(0),",
          "    char: Cell::new(Some('\\n')),",
          "    capture_index: Cell::new(0),",
          "    flags: RefCell::new(flags),",
          "    capture_names: RefCell::new(vec![]),",
          "    };",
          "    let result = parser.parse_hex_brace();",
          "    assert_eq!(result, Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]