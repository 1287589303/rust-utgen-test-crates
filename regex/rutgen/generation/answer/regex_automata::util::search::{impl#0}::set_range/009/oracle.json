[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(0..=5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_range(), 0..5);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
          "    assert!(!input.is_done());",
          "    assert_eq!(input.start(), 0);",
          "    assert_eq!(input.end(), 5);",
          "    assert_eq!(input.haystack(), b\"foobar\");",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(5));"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(0..=5);",
          "    assert_eq!(input.get_range(), 0..5);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
          "    assert!(!input.is_done());",
          "    assert_eq!(input.start(), 0);",
          "    assert_eq!(input.end(), 5);",
          "    assert_eq!(input.haystack(), b\"foobar\");",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(1..=4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_range(), 1..5);",
          "    assert_eq!(input.get_span().start, 1);",
          "    assert_eq!(input.get_span().end, 5);",
          "    assert!(input.haystack() == b\"foobar\");",
          "    assert!(!input.is_done());",
          "    assert!(input.is_char_boundary(1));",
          "    assert!(input.is_char_boundary(4));"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(1..=4);",
          "    assert_eq!(input.get_range(), 1..5);",
          "    assert_eq!(input.get_span().start, 1);",
          "    assert_eq!(input.get_span().end, 5);",
          "    assert!(input.haystack() == b\"foobar\");",
          "    assert!(!input.is_done());",
          "    assert!(input.is_char_boundary(1));",
          "    assert!(input.is_char_boundary(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(0..=0);",
          "}"
        ],
        "oracle": [
          "    input.set_range(0..=0);",
          "    assert_eq!(input.get_range(), 0..1);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 1 });",
          "    input.set_range(0..=1);",
          "    assert_eq!(input.get_range(), 0..2);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 2 });",
          "    input.set_range(1..=1);",
          "    assert_eq!(input.get_range(), 1..2);",
          "    assert_eq!(input.get_span(), Span { start: 1, end: 2 });",
          "    input.set_range(2..=4);",
          "    assert_eq!(input.get_range(), 2..5);",
          "    assert_eq!(input.get_span(), Span { start: 2, end: 5 });",
          "    input.set_range(0..=6);  // This will panic since 6 is out of bounds.",
          "    input.set_range(4..=4);",
          "    assert_eq!(input.get_range(), 4..5);",
          "    assert_eq!(input.get_span(), Span { start: 4, end: 5 });"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(0..=0);",
          "    input.set_range(0..=0);",
          "    assert_eq!(input.get_range(), 0..1);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 1 });",
          "    input.set_range(0..=1);",
          "    assert_eq!(input.get_range(), 0..2);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 2 });",
          "    input.set_range(1..=1);",
          "    assert_eq!(input.get_range(), 1..2);",
          "    assert_eq!(input.get_span(), Span { start: 1, end: 2 });",
          "    input.set_range(2..=4);",
          "    assert_eq!(input.get_range(), 2..5);",
          "    assert_eq!(input.get_span(), Span { start: 2, end: 5 });",
          "    input.set_range(0..=6);  // This will panic since 6 is out of bounds.",
          "    input.set_range(4..=4);",
          "    assert_eq!(input.get_range(), 4..5);",
          "    assert_eq!(input.get_span(), Span { start: 4, end: 5 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(3..=5);",
          "}"
        ],
        "oracle": [
          "    input.set_range(3..=5);",
          "    assert_eq!(input.get_range(), 3..=5);",
          "    assert_eq!(input.get_span(), Span { start: 3, end: 6 });",
          "    input.set_range(0..=2);",
          "    assert_eq!(input.get_range(), 0..=2);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 3 });",
          "    input.set_range(1..=4);",
          "    assert_eq!(input.get_range(), 1..=4);",
          "    assert_eq!(input.get_span(), Span { start: 1, end: 5 });"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(3..=5);",
          "    input.set_range(3..=5);",
          "    assert_eq!(input.get_range(), 3..=5);",
          "    assert_eq!(input.get_span(), Span { start: 3, end: 6 });",
          "    input.set_range(0..=2);",
          "    assert_eq!(input.get_range(), 0..=2);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 3 });",
          "    input.set_range(1..=4);",
          "    assert_eq!(input.get_range(), 1..=4);",
          "    assert_eq!(input.get_span(), Span { start: 1, end: 5 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(0..=5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_range(), 0..5);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
          "    assert!(!input.is_done());",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(5));"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"foobar\"[..]);",
          "    input.set_range(0..=5);",
          "    assert_eq!(input.get_range(), 0..5);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
          "    assert!(!input.is_done());",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]