[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"test input\"[..]);",
          "    input.set_range(..);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_range(), 0..11);",
          "    assert_eq!(input.get_span().start, 0);",
          "    assert_eq!(input.get_span().end, 11);",
          "    assert!(!input.is_done());",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(5));",
          "    assert!(input.is_char_boundary(10));"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"test input\"[..]);",
          "    input.set_range(..);",
          "    assert_eq!(input.get_range(), 0..11);",
          "    assert_eq!(input.get_span().start, 0);",
          "    assert_eq!(input.get_span().end, 11);",
          "    assert!(!input.is_done());",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(5));",
          "    assert!(input.is_char_boundary(10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"hello\"[..]);",
          "    input.set_range(..5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_range(), 0..5);",
          "    assert_eq!(input.start(), 0);",
          "    assert_eq!(input.end(), 5);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"hello\"[..]);",
          "    input.set_range(..5);",
          "    assert_eq!(input.get_range(), 0..5);",
          "    assert_eq!(input.start(), 0);",
          "    assert_eq!(input.end(), 5);",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut input = Input::new(&b\"world\"[..]);",
          "    input.set_range(..usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.get_range(), 0..5);",
          "    assert!(input.is_done());",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(4));",
          "    assert!(!input.is_char_boundary(5));",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
          "    assert_eq!(input.get_anchored(), Anchored::No);"
        ],
        "code": [
          "{",
          "    let mut input = Input::new(&b\"world\"[..]);",
          "    input.set_range(..usize::MAX);",
          "    assert_eq!(input.get_range(), 0..5);",
          "    assert!(input.is_done());",
          "    assert!(input.is_char_boundary(0));",
          "    assert!(input.is_char_boundary(4));",
          "    assert!(!input.is_char_boundary(5));",
          "    assert_eq!(input.get_span(), Span { start: 0, end: 5 });",
          "    assert_eq!(input.get_anchored(), Anchored::No);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]