[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::Repetition;",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(frame.unwrap_repetition(), ());",
          "    assert!(matches!(frame, HirFrame::Repetition));"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Repetition;",
          "    frame.unwrap_repetition();",
          "    assert_eq!(frame.unwrap_repetition(), ());",
          "    assert!(matches!(frame, HirFrame::Repetition));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Default::default() });",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), true)",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Default::default() }); frame.unwrap_repetition(); }).is_err(), true)",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Default::default() });",
          "    frame.unwrap_repetition();",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), true)",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Expr(Hir { kind: HirKind::Literal, props: Default::default() }); frame.unwrap_repetition(); }).is_err(), true)",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
          "    assert_eq!(std::panic::catch_unwind(|| { let frame = HirFrame::Repetition; frame.unwrap_repetition(); }).is_err(), false)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]