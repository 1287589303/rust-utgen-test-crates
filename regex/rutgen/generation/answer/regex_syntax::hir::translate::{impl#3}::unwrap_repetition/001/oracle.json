[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::Expr(Hir { kind: HirKind::from(0), props: Properties::default() });",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| { HirFrame::Expr(Hir { kind: HirKind::from(0), props: Properties::default() }).unwrap_repetition(); }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Expr(Hir { kind: HirKind::from(0), props: Properties::default() });",
          "    frame.unwrap_repetition();",
          "    assert_eq!(std::panic::catch_unwind(|| { HirFrame::Expr(Hir { kind: HirKind::from(0), props: Properties::default() }).unwrap_repetition(); }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::Literal(vec![b'a', b'b', b'c']);",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame);"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Literal(vec![b'a', b'b', b'c']);",
          "    frame.unwrap_repetition();",
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::ClassUnicode(ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::from(0) });",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame)"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::ClassUnicode(ClassUnicode { span: Span::default(), negated: false, kind: ClassUnicodeKind::from(0) });",
          "    frame.unwrap_repetition();",
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::ClassBytes(ClassBytes { set: IntervalSet::default() });",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame)"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::ClassBytes(ClassBytes { set: IntervalSet::default() });",
          "    frame.unwrap_repetition();",
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::Group { old_flags: Flags::default() };",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame);"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Group { old_flags: Flags::default() };",
          "    frame.unwrap_repetition();",
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", frame);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::Concat;",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| { Let frame = HirFrame::Concat; frame.unwrap_repetition(); }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Concat;",
          "    frame.unwrap_repetition();",
          "    assert_eq!(std::panic::catch_unwind(|| { Let frame = HirFrame::Concat; frame.unwrap_repetition(); }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::Alternation;",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let frame = HirFrame::Alternation;",
          "    frame.unwrap_repetition();",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::Alternation;",
          "    frame.unwrap_repetition();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let frame = HirFrame::Alternation;",
          "    frame.unwrap_repetition();",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let frame = HirFrame::AlternationBranch;",
          "    frame.unwrap_repetition();",
          "}"
        ],
        "oracle": [
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", HirFrame::AlternationBranch)"
        ],
        "code": [
          "{",
          "    let frame = HirFrame::AlternationBranch;",
          "    frame.unwrap_repetition();",
          "    panic!(\"tried to unwrap repetition from HirFrame, got: {:?}\", HirFrame::AlternationBranch)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]