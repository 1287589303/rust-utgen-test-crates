[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::EndLF));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::EndLF));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr_start: u32 = 0b00_0000_0000_0000_0001;",
          "    let result_start = Look::from_repr(repr_start);",
          "    ",
          "    let repr_end: u32 = 0b00_0000_0000_0000_0010;",
          "    let result_end = Look::from_repr(repr_end);",
          "    ",
          "    let repr_startlf: u32 = 0b00_0000_0000_0000_0100;",
          "    let result_startlf = Look::from_repr(repr_startlf);",
          "    ",
          "    let repr_startcrlf: u32 = 0b00_0000_0000_0001_0000;",
          "    let result_startcrlf = Look::from_repr(repr_startcrlf);",
          "    ",
          "    let repr_endcrlf: u32 = 0b00_0000_0000_0010_0000;",
          "    let result_endcrlf = Look::from_repr(repr_endcrlf);",
          "    ",
          "    let repr_wordascii: u32 = 0b00_0000_0000_0100_0000;",
          "    let result_wordascii = Look::from_repr(repr_wordascii);",
          "    ",
          "    let repr_wordasciineg: u32 = 0b00_0000_0000_1000_0000;",
          "    let result_wordasciineg = Look::from_repr(repr_wordasciineg);",
          "    ",
          "    let repr_wordunicode: u32 = 0b00_0000_0001_0000_0000;",
          "    let result_wordunicode = Look::from_repr(repr_wordunicode);",
          "    ",
          "    let repr_wordunicodeng: u32 = 0b00_0000_0010_0000_0000;",
          "    let result_wordunicodeng = Look::from_repr(repr_wordunicodeng);",
          "    ",
          "    let repr_wordstartascii: u32 = 0b00_0000_0100_0000_0000;",
          "    let result_wordstartascii = Look::from_repr(repr_wordstartascii);",
          "    ",
          "    let repr_wordendascii: u32 = 0b00_0000_1000_0000_0000;",
          "    let result_wordendascii = Look::from_repr(repr_wordendascii);",
          "    ",
          "    let repr_wordstartunicode: u32 = 0b00_0001_0000_0000_0000;",
          "    let result_wordstartunicode = Look::from_repr(repr_wordstartunicode);",
          "    ",
          "    let repr_wordendunicode: u32 = 0b00_0010_0000_0000_0000;",
          "    let result_wordendunicode = Look::from_repr(repr_wordendunicode);",
          "    ",
          "    let repr_wordstarthalfascii: u32 = 0b00_0100_0000_0000_0000;",
          "    let result_wordstarthalfascii = Look::from_repr(repr_wordstarthalfascii);",
          "    ",
          "    let repr_wordendhalfascii: u32 = 0b00_1000_0000_0000_0000;",
          "    let result_wordendhalfascii = Look::from_repr(repr_wordendhalfascii);",
          "    ",
          "    let repr_wordstarthalfunicode: u32 = 0b01_0000_0000_0000_0000;",
          "    let result_wordstarthalfunicode = Look::from_repr(repr_wordstarthalfunicode);",
          "    ",
          "    let repr_wordendhalfunicode: u32 = 0b10_0000_0000_0000_0000;",
          "    let result_wordendhalfunicode = Look::from_repr(repr_wordendhalfunicode);",
          "}"
        ],
        "oracle": [
          "    let repr_endlf: u32 = 0b00_0000_0000_0000_1000;",
          "    let result_endlf = Look::from_repr(repr_endlf);",
          "    assert_eq!(result_endlf, Some(Look::EndLF));",
          "    ",
          "    let repr_invalid: u32 = 0b1111_1111_1111_1111_1111;",
          "    let result_invalid = Look::from_repr(repr_invalid);",
          "    assert_eq!(result_invalid, None);",
          "    ",
          "    let repr_start: u32 = 0b00_0000_0000_0000_0001;",
          "    let result_start = Look::from_repr(repr_start);",
          "    assert_eq!(result_start, Some(Look::Start));",
          "    ",
          "    let repr_end: u32 = 0b00_0000_0000_0000_0010;",
          "    let result_end = Look::from_repr(repr_end);",
          "    assert_eq!(result_end, Some(Look::End));",
          "    ",
          "    let repr_startlf: u32 = 0b00_0000_0000_0000_0100;",
          "    let result_startlf = Look::from_repr(repr_startlf);",
          "    assert_eq!(result_startlf, Some(Look::StartLF));",
          "    ",
          "    let repr_wordascii: u32 = 0b00_0000_0000_0100_0000;",
          "    let result_wordascii = Look::from_repr(repr_wordascii);",
          "    assert_eq!(result_wordascii, Some(Look::WordAscii));",
          "    ",
          "    let repr_wordasciineg: u32 = 0b00_0000_0000_1000_0000;",
          "    let result_wordasciineg = Look::from_repr(repr_wordasciineg);",
          "    assert_eq!(result_wordasciineg, Some(Look::WordAsciiNegate));",
          "    ",
          "    let repr_wordunicode: u32 = 0b00_0000_0001_0000_0000;",
          "    let result_wordunicode = Look::from_repr(repr_wordunicode);",
          "    assert_eq!(result_wordunicode, Some(Look::WordUnicode));",
          "    ",
          "    let repr_wordunicodeng: u32 = 0b00_0000_0010_0000_0000;",
          "    let result_wordunicodeng = Look::from_repr(repr_wordunicodeng);",
          "    assert_eq!(result_wordunicodeng, Some(Look::WordUnicodeNegate));",
          "    ",
          "    let repr_wordstartascii: u32 = 0b00_0000_0100_0000_0000;",
          "    let result_wordstartascii = Look::from_repr(repr_wordstartascii);",
          "    assert_eq!(result_wordstartascii, Some(Look::WordStartAscii));",
          "    ",
          "    let repr_wordendascii: u32 = 0b00_0000_1000_0000_0000;",
          "    let result_wordendascii = Look::from_repr(repr_wordendascii);",
          "    assert_eq!(result_wordendascii, Some(Look::WordEndAscii));",
          "    ",
          "    let repr_wordstartunicode: u32 = 0b00_0001_0000_0000_0000;",
          "    let result_wordstartunicode = Look::from_repr(repr_wordstartunicode);",
          "    assert_eq!(result_wordstartunicode, Some(Look::WordStartUnicode));",
          "    ",
          "    let repr_wordendunicode: u32 = 0b00_0010_0000_0000_0000;",
          "    let result_wordendunicode = Look::from_repr(repr_wordendunicode);",
          "    assert_eq!(result_wordendunicode, Some(Look::WordEndUnicode));",
          "    ",
          "    let repr_wordstarthalfascii: u32 = 0b00_0100_0000_0000_0000;",
          "    let result_wordstarthalfascii = Look::from_repr(repr_wordstarthalfascii);",
          "    assert_eq!(result_wordstarthalfascii, Some(Look::WordStartHalfAscii));",
          "    ",
          "    let repr_wordendhalfascii: u32 = 0b00_1000_0000_0000_0000;",
          "    let result_wordendhalfascii = Look::from_repr(repr_wordendhalfascii);",
          "    assert_eq!(result_wordendhalfascii, Some(Look::WordEndHalfAscii));",
          "    ",
          "    let repr_wordstarthalfunicode: u32 = 0b01_0000_0000_0000_0000;",
          "    let result_wordstarthalfunicode = Look::from_repr(repr_wordstarthalfunicode);",
          "    assert_eq!(result_wordstarthalfunicode, Some(Look::WordStartHalfUnicode));",
          "    ",
          "    let repr_wordendhalfunicode: u32 = 0b10_0000_0000_0000_0000;",
          "    let result_wordendhalfunicode = Look::from_repr(repr_wordendhalfunicode);",
          "    assert_eq!(result_wordendhalfunicode, Some(Look::WordEndHalfUnicode));"
        ],
        "code": [
          "{",
          "    let repr_start: u32 = 0b00_0000_0000_0000_0001;",
          "    let result_start = Look::from_repr(repr_start);",
          "    ",
          "    let repr_end: u32 = 0b00_0000_0000_0000_0010;",
          "    let result_end = Look::from_repr(repr_end);",
          "    ",
          "    let repr_startlf: u32 = 0b00_0000_0000_0000_0100;",
          "    let result_startlf = Look::from_repr(repr_startlf);",
          "    ",
          "    let repr_startcrlf: u32 = 0b00_0000_0000_0001_0000;",
          "    let result_startcrlf = Look::from_repr(repr_startcrlf);",
          "    ",
          "    let repr_endcrlf: u32 = 0b00_0000_0000_0010_0000;",
          "    let result_endcrlf = Look::from_repr(repr_endcrlf);",
          "    ",
          "    let repr_wordascii: u32 = 0b00_0000_0000_0100_0000;",
          "    let result_wordascii = Look::from_repr(repr_wordascii);",
          "    ",
          "    let repr_wordasciineg: u32 = 0b00_0000_0000_1000_0000;",
          "    let result_wordasciineg = Look::from_repr(repr_wordasciineg);",
          "    ",
          "    let repr_wordunicode: u32 = 0b00_0000_0001_0000_0000;",
          "    let result_wordunicode = Look::from_repr(repr_wordunicode);",
          "    ",
          "    let repr_wordunicodeng: u32 = 0b00_0000_0010_0000_0000;",
          "    let result_wordunicodeng = Look::from_repr(repr_wordunicodeng);",
          "    ",
          "    let repr_wordstartascii: u32 = 0b00_0000_0100_0000_0000;",
          "    let result_wordstartascii = Look::from_repr(repr_wordstartascii);",
          "    ",
          "    let repr_wordendascii: u32 = 0b00_0000_1000_0000_0000;",
          "    let result_wordendascii = Look::from_repr(repr_wordendascii);",
          "    ",
          "    let repr_wordstartunicode: u32 = 0b00_0001_0000_0000_0000;",
          "    let result_wordstartunicode = Look::from_repr(repr_wordstartunicode);",
          "    ",
          "    let repr_wordendunicode: u32 = 0b00_0010_0000_0000_0000;",
          "    let result_wordendunicode = Look::from_repr(repr_wordendunicode);",
          "    ",
          "    let repr_wordstarthalfascii: u32 = 0b00_0100_0000_0000_0000;",
          "    let result_wordstarthalfascii = Look::from_repr(repr_wordstarthalfascii);",
          "    ",
          "    let repr_wordendhalfascii: u32 = 0b00_1000_0000_0000_0000;",
          "    let result_wordendhalfascii = Look::from_repr(repr_wordendhalfascii);",
          "    ",
          "    let repr_wordstarthalfunicode: u32 = 0b01_0000_0000_0000_0000;",
          "    let result_wordstarthalfunicode = Look::from_repr(repr_wordstarthalfunicode);",
          "    ",
          "    let repr_wordendhalfunicode: u32 = 0b10_0000_0000_0000_0000;",
          "    let result_wordendhalfunicode = Look::from_repr(repr_wordendhalfunicode);",
          "    let repr_endlf: u32 = 0b00_0000_0000_0000_1000;",
          "    let result_endlf = Look::from_repr(repr_endlf);",
          "    assert_eq!(result_endlf, Some(Look::EndLF));",
          "    ",
          "    let repr_invalid: u32 = 0b1111_1111_1111_1111_1111;",
          "    let result_invalid = Look::from_repr(repr_invalid);",
          "    assert_eq!(result_invalid, None);",
          "    ",
          "    let repr_start: u32 = 0b00_0000_0000_0000_0001;",
          "    let result_start = Look::from_repr(repr_start);",
          "    assert_eq!(result_start, Some(Look::Start));",
          "    ",
          "    let repr_end: u32 = 0b00_0000_0000_0000_0010;",
          "    let result_end = Look::from_repr(repr_end);",
          "    assert_eq!(result_end, Some(Look::End));",
          "    ",
          "    let repr_startlf: u32 = 0b00_0000_0000_0000_0100;",
          "    let result_startlf = Look::from_repr(repr_startlf);",
          "    assert_eq!(result_startlf, Some(Look::StartLF));",
          "    ",
          "    let repr_wordascii: u32 = 0b00_0000_0000_0100_0000;",
          "    let result_wordascii = Look::from_repr(repr_wordascii);",
          "    assert_eq!(result_wordascii, Some(Look::WordAscii));",
          "    ",
          "    let repr_wordasciineg: u32 = 0b00_0000_0000_1000_0000;",
          "    let result_wordasciineg = Look::from_repr(repr_wordasciineg);",
          "    assert_eq!(result_wordasciineg, Some(Look::WordAsciiNegate));",
          "    ",
          "    let repr_wordunicode: u32 = 0b00_0000_0001_0000_0000;",
          "    let result_wordunicode = Look::from_repr(repr_wordunicode);",
          "    assert_eq!(result_wordunicode, Some(Look::WordUnicode));",
          "    ",
          "    let repr_wordunicodeng: u32 = 0b00_0000_0010_0000_0000;",
          "    let result_wordunicodeng = Look::from_repr(repr_wordunicodeng);",
          "    assert_eq!(result_wordunicodeng, Some(Look::WordUnicodeNegate));",
          "    ",
          "    let repr_wordstartascii: u32 = 0b00_0000_0100_0000_0000;",
          "    let result_wordstartascii = Look::from_repr(repr_wordstartascii);",
          "    assert_eq!(result_wordstartascii, Some(Look::WordStartAscii));",
          "    ",
          "    let repr_wordendascii: u32 = 0b00_0000_1000_0000_0000;",
          "    let result_wordendascii = Look::from_repr(repr_wordendascii);",
          "    assert_eq!(result_wordendascii, Some(Look::WordEndAscii));",
          "    ",
          "    let repr_wordstartunicode: u32 = 0b00_0001_0000_0000_0000;",
          "    let result_wordstartunicode = Look::from_repr(repr_wordstartunicode);",
          "    assert_eq!(result_wordstartunicode, Some(Look::WordStartUnicode));",
          "    ",
          "    let repr_wordendunicode: u32 = 0b00_0010_0000_0000_0000;",
          "    let result_wordendunicode = Look::from_repr(repr_wordendunicode);",
          "    assert_eq!(result_wordendunicode, Some(Look::WordEndUnicode));",
          "    ",
          "    let repr_wordstarthalfascii: u32 = 0b00_0100_0000_0000_0000;",
          "    let result_wordstarthalfascii = Look::from_repr(repr_wordstarthalfascii);",
          "    assert_eq!(result_wordstarthalfascii, Some(Look::WordStartHalfAscii));",
          "    ",
          "    let repr_wordendhalfascii: u32 = 0b00_1000_0000_0000_0000;",
          "    let result_wordendhalfascii = Look::from_repr(repr_wordendhalfascii);",
          "    assert_eq!(result_wordendhalfascii, Some(Look::WordEndHalfAscii));",
          "    ",
          "    let repr_wordstarthalfunicode: u32 = 0b01_0000_0000_0000_0000;",
          "    let result_wordstarthalfunicode = Look::from_repr(repr_wordstarthalfunicode);",
          "    assert_eq!(result_wordstarthalfunicode, Some(Look::WordStartHalfUnicode));",
          "    ",
          "    let repr_wordendhalfunicode: u32 = 0b10_0000_0000_0000_0000;",
          "    let result_wordendhalfunicode = Look::from_repr(repr_wordendhalfunicode);",
          "    assert_eq!(result_wordendhalfunicode, Some(Look::WordEndHalfUnicode));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]