[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = 0b00_0000_0000_0000_0100;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::StartLF));"
        ],
        "code": [
          "{",
          "    let repr = 0b00_0000_0000_0000_0100;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartLF));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = 0b00_0000_0000_0000_0001;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr = 0b00_0000_0000_0000_0100;",
          "    let expected = Some(Look::StartLF);",
          "    assert_eq!(Look::from_repr(repr), expected);"
        ],
        "code": [
          "{",
          "    let repr = 0b00_0000_0000_0000_0001;",
          "    let result = Look::from_repr(repr);",
          "    let repr = 0b00_0000_0000_0000_0100;",
          "    let expected = Some(Look::StartLF);",
          "    assert_eq!(Look::from_repr(repr), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = 0b00_0000_0000_0000_0010;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::End));",
          "    repr = 0b00_0000_0000_0000_0100;",
          "    let repr = 0b00_0000_0000_0000_0100;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartLF));"
        ],
        "code": [
          "{",
          "    let repr = 0b00_0000_0000_0000_0010;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::End));",
          "    repr = 0b00_0000_0000_0000_0100;",
          "    let repr = 0b00_0000_0000_0000_0100;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::StartLF));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = 0b11_1111_1111_1111_1111; // Invalid representation",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0000_0000_0000_0100) == Some(Look::StartLF)",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_1000) == Some(Look::EndLF)",
          "    Look::from_repr(0b00_0000_0000_0001_0000) == Some(Look::StartCRLF)",
          "    Look::from_repr(0b00_0000_0000_0010_0000) == Some(Look::EndCRLF)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_1000_0000) == Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0b11_1111_1111_1111_1111) == None"
        ],
        "code": [
          "{",
          "    let repr = 0b11_1111_1111_1111_1111; // Invalid representation",
          "    let result = Look::from_repr(repr);",
          "    Look::from_repr(0b00_0000_0000_0000_0100) == Some(Look::StartLF)",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_1000) == Some(Look::EndLF)",
          "    Look::from_repr(0b00_0000_0000_0001_0000) == Some(Look::StartCRLF)",
          "    Look::from_repr(0b00_0000_0000_0010_0000) == Some(Look::EndCRLF)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_1000_0000) == Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0b11_1111_1111_1111_1111) == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]