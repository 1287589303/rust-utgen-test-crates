[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let expected = Some(Look::WordEndUnicode);",
          "    // Here we just call the function; no assertions are included",
          "    let _ = (result, expected);",
          "}"
        ],
        "oracle": [
          "    let repr = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let expected = Some(Look::WordEndUnicode);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let repr = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let expected = Some(Look::WordEndUnicode);",
          "    // Here we just call the function; no assertions are included",
          "    let _ = (result, expected);",
          "    let repr = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let expected = Some(Look::WordEndUnicode);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let expected = Some(Look::WordEndUnicode);",
          "    // Here we just call the function; no assertions are included",
          "    let _ = (result, expected);",
          "}"
        ],
        "oracle": [
          "    let repr = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let expected = Some(Look::WordEndUnicode);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let repr = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let expected = Some(Look::WordEndUnicode);",
          "    // Here we just call the function; no assertions are included",
          "    let _ = (result, expected);",
          "    let repr = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let expected = Some(Look::WordEndUnicode);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]