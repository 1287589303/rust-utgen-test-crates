[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // Matches WordStartHalfAscii",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordStartHalfAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // Matches WordStartHalfAscii",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0001; // Matches Start",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // Matches WordStartHalfAscii",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii));",
          "    ",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // Check representation validity",
          "    let result = Look::from_repr(repr);",
          "    assert!(result.is_some());",
          "    ",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // Validity expected for line 183",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0001; // Matches Start",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // Matches WordStartHalfAscii",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii));",
          "    ",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // Check representation validity",
          "    let result = Look::from_repr(repr);",
          "    assert!(result.is_some());",
          "    ",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; // Validity expected for line 183",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordStartHalfAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; // Matches End",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0100_0000_0000_0000).unwrap() == Look::WordStartHalfAscii",
          "    Look::from_repr(0b00_0100_0000_0000_0000).is_some()",
          "    Look::from_repr(0b00_0100_0000_0000_0000).unwrap_err() == None",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_0010).is_none() == false"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; // Matches End",
          "    let result = Look::from_repr(repr);",
          "    Look::from_repr(0b00_0100_0000_0000_0000).unwrap() == Look::WordStartHalfAscii",
          "    Look::from_repr(0b00_0100_0000_0000_0000).is_some()",
          "    Look::from_repr(0b00_0100_0000_0000_0000).unwrap_err() == None",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_0010).is_none() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; // Matches StartLF",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; // Matches StartLF",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; // Matches EndLF",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0000_0000_0000_0001) == Some(Look::Start)",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_0100) == Some(Look::StartLF)",
          "    Look::from_repr(0b00_0000_0000_0000_1000) == Some(Look::EndLF)",
          "    Look::from_repr(0b00_0000_0000_0001_0000) == Some(Look::StartCRLF)",
          "    Look::from_repr(0b00_0000_0000_0010_0000) == Some(Look::EndCRLF)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_1000_0000) == Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; // Matches EndLF",
          "    let result = Look::from_repr(repr);",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0000_0000_0000_0001) == Some(Look::Start)",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_0100) == Some(Look::StartLF)",
          "    Look::from_repr(0b00_0000_0000_0000_1000) == Some(Look::EndLF)",
          "    Look::from_repr(0b00_0000_0000_0001_0000) == Some(Look::StartCRLF)",
          "    Look::from_repr(0b00_0000_0000_0010_0000) == Some(Look::EndCRLF)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_1000_0000) == Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0; // Invalid representation",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0000_0000_0000_0001) == Some(Look::Start)",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_0100) == Some(Look::StartLF)",
          "    Look::from_repr(0b00_0000_0000_0000_1000) == Some(Look::EndLF)",
          "    Look::from_repr(0b00_0000_0000_0001_0000) == Some(Look::StartCRLF)",
          "    Look::from_repr(0b00_0000_0000_0010_0000) == Some(Look::EndCRLF)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_1000_0000) == Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0) == None",
          "    Look::from_repr(0b11_1111_1111_1111_1111) == None"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0; // Invalid representation",
          "    let result = Look::from_repr(repr);",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0000_0000_0000_0001) == Some(Look::Start)",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_0100) == Some(Look::StartLF)",
          "    Look::from_repr(0b00_0000_0000_0000_1000) == Some(Look::EndLF)",
          "    Look::from_repr(0b00_0000_0000_0001_0000) == Some(Look::StartCRLF)",
          "    Look::from_repr(0b00_0000_0000_0010_0000) == Some(Look::EndCRLF)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_1000_0000) == Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0) == None",
          "    Look::from_repr(0b11_1111_1111_1111_1111) == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b11; // Invalid representation, greater than defined max",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::End)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::Start)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != None"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b11; // Invalid representation, greater than defined max",
          "    let result = Look::from_repr(repr);",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::End)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::Start)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; // Invalid representation",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != None"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; // Invalid representation",
          "    let result = Look::from_repr(repr);",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) != None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]