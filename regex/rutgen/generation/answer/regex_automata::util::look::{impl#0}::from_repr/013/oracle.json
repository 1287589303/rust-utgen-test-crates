[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0100_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0100_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0001;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0000_0000_0000_0001) == Some(Look::Start)",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_0100) == Some(Look::StartLF)",
          "    Look::from_repr(0b00_0000_0000_0000_1000) == Some(Look::EndLF)",
          "    Look::from_repr(0b00_0000_0000_0001_0000) == Some(Look::StartCRLF)",
          "    Look::from_repr(0b00_0000_0000_0010_0000) == Some(Look::EndCRLF)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_1000_0000) == Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0b0000_1111_1111_1111_1111) == None",
          "    Look::from_repr(0b1111_1111_1111_1111_1111) == None"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0001;",
          "    let result = Look::from_repr(repr);",
          "    Look::from_repr(0b00_0000_0000_0000_0001) == Some(Look::Start)",
          "    Look::from_repr(0b00_0000_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0000_0100) == Some(Look::StartLF)",
          "    Look::from_repr(0b00_0000_0000_0000_1000) == Some(Look::EndLF)",
          "    Look::from_repr(0b00_0000_0000_0001_0000) == Some(Look::StartCRLF)",
          "    Look::from_repr(0b00_0000_0000_0010_0000) == Some(Look::EndCRLF)",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_1000_0000) == Some(Look::WordAsciiNegate)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0b0000_1111_1111_1111_1111) == None",
          "    Look::from_repr(0b1111_1111_1111_1111_1111) == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0010;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1111_1111), None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0010;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1111_1111), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0100;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_0100;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0000_1000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0001_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b0000_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b1111_1111_1111_1111_1111), None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0001_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b0000_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b1111_1111_1111_1111_1111), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0010_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0000_0010_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0001_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0000_0000_0100_0000;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::WordAscii));",
          "    let repr: u32 = 0b00_0000_0000_0000_0001;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::Start));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0001_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0000_0000_0100_0000;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::WordAscii));",
          "    let repr: u32 = 0b00_0000_0000_0000_0001;",
          "    assert_eq!(Look::from_repr(repr), Some(Look::Start));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0010_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0010_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_0100_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_0100_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0000_1000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(Look::WordAscii)));",
          "    assert!(!matches!(result, None));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0000_1000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    assert!(result.is_some());",
          "    assert!(matches!(result, Some(Look::WordAscii)));",
          "    assert!(!matches!(result, None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    let repr: u32 = 0b00_0000_0000_0100_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordAscii));",
          "    let repr: u32 = 0b00_0000_0000_0000_0001; assert_eq!(Look::from_repr(repr), Some(Look::Start));",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; assert_eq!(Look::from_repr(repr), Some(Look::End));",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; assert_eq!(Look::from_repr(repr), Some(Look::StartLF));",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; assert_eq!(Look::from_repr(repr), Some(Look::EndLF));",
          "    let repr: u32 = 0b00_0000_0000_0001_0000; assert_eq!(Look::from_repr(repr), Some(Look::StartCRLF));",
          "    let repr: u32 = 0b00_0000_0000_0010_0000; assert_eq!(Look::from_repr(repr), Some(Look::EndCRLF));",
          "    let repr: u32 = 0b00_0000_0000_1000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordAsciiNegate));",
          "    let repr: u32 = 0b00_0000_0001_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordUnicode));",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordUnicodeNegate));",
          "    let repr: u32 = 0b00_0000_0100_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordStartAscii));",
          "    let repr: u32 = 0b00_0000_1000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordEndAscii));",
          "    let repr: u32 = 0b00_0001_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordStartUnicode));",
          "    let repr: u32 = 0b00_0010_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordEndUnicode));",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordStartHalfAscii));",
          "    let repr: u32 = 0b00_1000_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordEndHalfAscii));",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordStartHalfUnicode));",
          "    let repr: u32 = 0b10_0000_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordEndHalfUnicode));",
          "    let repr: u32 = 0b11_1111_1111_1111_1111; assert_eq!(Look::from_repr(repr), None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0001_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    let repr: u32 = 0b00_0000_0000_0100_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordAscii));",
          "    let repr: u32 = 0b00_0000_0000_0000_0001; assert_eq!(Look::from_repr(repr), Some(Look::Start));",
          "    let repr: u32 = 0b00_0000_0000_0000_0010; assert_eq!(Look::from_repr(repr), Some(Look::End));",
          "    let repr: u32 = 0b00_0000_0000_0000_0100; assert_eq!(Look::from_repr(repr), Some(Look::StartLF));",
          "    let repr: u32 = 0b00_0000_0000_0000_1000; assert_eq!(Look::from_repr(repr), Some(Look::EndLF));",
          "    let repr: u32 = 0b00_0000_0000_0001_0000; assert_eq!(Look::from_repr(repr), Some(Look::StartCRLF));",
          "    let repr: u32 = 0b00_0000_0000_0010_0000; assert_eq!(Look::from_repr(repr), Some(Look::EndCRLF));",
          "    let repr: u32 = 0b00_0000_0000_1000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordAsciiNegate));",
          "    let repr: u32 = 0b00_0000_0001_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordUnicode));",
          "    let repr: u32 = 0b00_0000_0010_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordUnicodeNegate));",
          "    let repr: u32 = 0b00_0000_0100_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordStartAscii));",
          "    let repr: u32 = 0b00_0000_1000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordEndAscii));",
          "    let repr: u32 = 0b00_0001_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordStartUnicode));",
          "    let repr: u32 = 0b00_0010_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordEndUnicode));",
          "    let repr: u32 = 0b00_0100_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordStartHalfAscii));",
          "    let repr: u32 = 0b00_1000_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordEndHalfAscii));",
          "    let repr: u32 = 0b01_0000_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordStartHalfUnicode));",
          "    let repr: u32 = 0b10_0000_0000_0000_0000; assert_eq!(Look::from_repr(repr), Some(Look::WordEndHalfUnicode));",
          "    let repr: u32 = 0b11_1111_1111_1111_1111; assert_eq!(Look::from_repr(repr), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b0000_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b1111_1111_1111_1111_1111), None);",
          "    assert_eq!(Look::from_repr(0xFFFFFFFF), None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0010_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b0000_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b1111_1111_1111_1111_1111), None);",
          "    assert_eq!(Look::from_repr(0xFFFFFFFF), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_0100_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Look::WordAscii));"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_0100_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b00_1000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0001) == Some(Look::Start)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0000_0000_0000_0000) == None",
          "    Look::from_repr(0xFFFFFFFF) == None",
          "    Look::from_repr(0) == None"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b00_1000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    Look::from_repr(0b00_0000_0000_0100_0000) == Some(Look::WordAscii)",
          "    Look::from_repr(0b00_0000_0000_0010) == Some(Look::End)",
          "    Look::from_repr(0b00_0000_0000_0001) == Some(Look::Start)",
          "    Look::from_repr(0b00_0000_0001_0000_0000) == Some(Look::WordUnicode)",
          "    Look::from_repr(0b00_0000_0010_0000_0000) == Some(Look::WordUnicodeNegate)",
          "    Look::from_repr(0b00_0000_1000_0000_0000) == Some(Look::WordEndAscii)",
          "    Look::from_repr(0b00_0000_0100_0000_0000) == Some(Look::WordStartAscii)",
          "    Look::from_repr(0b01_0000_0000_0000_0000) == Some(Look::WordStartHalfUnicode)",
          "    Look::from_repr(0b10_0000_0000_0000_0000) == Some(Look::WordEndHalfUnicode)",
          "    Look::from_repr(0b00_0010_0000_0000_0000) == Some(Look::WordEndUnicode)",
          "    Look::from_repr(0b00_0001_0000_0000_0000) == Some(Look::WordStartUnicode)",
          "    Look::from_repr(0b00_1000_0000_0000_0000) == Some(Look::WordEndHalfAscii)",
          "    Look::from_repr(0b00_0100_0000_0000_0000) == Some(Look::WordStartHalfAscii)",
          "    Look::from_repr(0b00_0000_0000_0000_0000) == None",
          "    Look::from_repr(0xFFFFFFFF) == None",
          "    Look::from_repr(0) == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b01_0000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b11_1111_1111_1111_1111), None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b01_0000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), None);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b11_1111_1111_1111_1111), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b10_0000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    Let result = Look::from_repr(0b00_0000_0000_0100_0000);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    let result = Look::from_repr(0b10_0000_0000_0000_0000);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b10_0000_0000_0000_0000;",
          "    let result = Look::from_repr(repr);",
          "    Let result = Look::from_repr(0b00_0000_0000_0100_0000);",
          "    assert_eq!(result, Some(Look::WordAscii));",
          "    let result = Look::from_repr(0b10_0000_0000_0000_0000);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: u32 = 0b11111111111111111111111111111111;",
          "    let result = Look::from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b00000000000000000000000000000000), None);",
          "    assert_eq!(Look::from_repr(0b11111111111111111111111111111111), None);"
        ],
        "code": [
          "{",
          "    let repr: u32 = 0b11111111111111111111111111111111;",
          "    let result = Look::from_repr(repr);",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0100_0000), Some(Look::WordAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0001), Some(Look::Start));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0010), Some(Look::End));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_0100), Some(Look::StartLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0000_1000), Some(Look::EndLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0001_0000), Some(Look::StartCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_0010_0000), Some(Look::EndCRLF));",
          "    assert_eq!(Look::from_repr(0b00_0000_0000_1000_0000), Some(Look::WordAsciiNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0001_0000_0000), Some(Look::WordUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0000_0010_0000_0000), Some(Look::WordUnicodeNegate));",
          "    assert_eq!(Look::from_repr(0b00_0000_0100_0000_0000), Some(Look::WordStartAscii));",
          "    assert_eq!(Look::from_repr(0b00_0000_1000_0000_0000), Some(Look::WordEndAscii));",
          "    assert_eq!(Look::from_repr(0b00_0001_0000_0000_0000), Some(Look::WordStartUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0010_0000_0000_0000), Some(Look::WordEndUnicode));",
          "    assert_eq!(Look::from_repr(0b00_0100_0000_0000_0000), Some(Look::WordStartHalfAscii));",
          "    assert_eq!(Look::from_repr(0b00_1000_0000_0000_0000), Some(Look::WordEndHalfAscii));",
          "    assert_eq!(Look::from_repr(0b01_0000_0000_0000_0000), Some(Look::WordStartHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b10_0000_0000_0000_0000), Some(Look::WordEndHalfUnicode));",
          "    assert_eq!(Look::from_repr(0b00000000000000000000000000000000), None);",
          "    assert_eq!(Look::from_repr(0b11111111111111111111111111111111), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]