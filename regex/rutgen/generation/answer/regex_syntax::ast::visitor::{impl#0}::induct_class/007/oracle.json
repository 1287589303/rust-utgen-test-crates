[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_span = Span::new(0, 5); // Example valid span",
          "    let valid_item = ClassSetItem::Literal(Literal::from('a')); // Example character item",
          "",
          "    let class_bracketed = ClassBracketed {",
          "        span: valid_span,",
          "        negated: false,",
          "        kind: ClassSet::Item(valid_item.clone()),",
          "    };",
          "",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(class_bracketed));",
          "    let heap_visitor = HeapVisitor::new();",
          "",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "}"
        ],
        "oracle": [
          "    let valid_span = Span::new(0, 5);",
          "    let valid_item = ClassSetItem::Literal(Literal::from('a'));",
          "    let class_bracketed = ClassBracketed { span: valid_span, negated: false, kind: ClassSet::Item(valid_item.clone()) };",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(class_bracketed));",
          "    let heap_visitor = HeapVisitor::new();",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "    assert_eq!(result, Some(ClassFrame::Union { head: &valid_item, tail: &[] }));",
          "    ",
          "    let union_item = ClassSetItem::Union(ClassSetUnion { span: valid_span, items: vec![valid_item.clone()] });",
          "    let union_class_bracketed = ClassBracketed { span: valid_span, negated: false, kind: ClassSet::Union(union_item.clone()) };",
          "    let union_class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(union_class_bracketed));",
          "    let union_result = heap_visitor.induct_class(&union_class_induct);",
          "    assert_eq!(union_result, Some(ClassFrame::Union { head: &union_item, tail: &[] }));"
        ],
        "code": [
          "{",
          "    let valid_span = Span::new(0, 5); // Example valid span",
          "    let valid_item = ClassSetItem::Literal(Literal::from('a')); // Example character item",
          "",
          "    let class_bracketed = ClassBracketed {",
          "        span: valid_span,",
          "        negated: false,",
          "        kind: ClassSet::Item(valid_item.clone()),",
          "    };",
          "",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(class_bracketed));",
          "    let heap_visitor = HeapVisitor::new();",
          "",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "    let valid_span = Span::new(0, 5);",
          "    let valid_item = ClassSetItem::Literal(Literal::from('a'));",
          "    let class_bracketed = ClassBracketed { span: valid_span, negated: false, kind: ClassSet::Item(valid_item.clone()) };",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(class_bracketed));",
          "    let heap_visitor = HeapVisitor::new();",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "    assert_eq!(result, Some(ClassFrame::Union { head: &valid_item, tail: &[] }));",
          "    ",
          "    let union_item = ClassSetItem::Union(ClassSetUnion { span: valid_span, items: vec![valid_item.clone()] });",
          "    let union_class_bracketed = ClassBracketed { span: valid_span, negated: false, kind: ClassSet::Union(union_item.clone()) };",
          "    let union_class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(union_class_bracketed));",
          "    let union_result = heap_visitor.induct_class(&union_class_induct);",
          "    assert_eq!(union_result, Some(ClassFrame::Union { head: &union_item, tail: &[] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_span = Span::new(0, 5); // Example valid span",
          "    let valid_item_one = ClassSetItem::Literal(Literal::from('a')); // Example character item",
          "    let valid_item_two = ClassSetItem::Literal(Literal::from('b')); // Another example character item",
          "",
          "    let class_set_union = ClassSetUnion {",
          "        span: valid_span,",
          "        items: vec![valid_item_one, valid_item_two],",
          "    };",
          "",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Union(class_set_union));",
          "    let heap_visitor = HeapVisitor::new();",
          "",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(ClassBracketed { span: valid_span, negated: false, kind: ClassSet::Item(valid_item_one) }));",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "    assert!(result.is_some());",
          "    if let Some(ClassFrame::Union { head, tail }) = result {",
          "    assert_eq!(head, &valid_item_one);",
          "    assert!(tail.is_empty());",
          "    }",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(ClassBracketed { span: valid_span, negated: false, kind: ClassSet::BinaryOp(ClassSetBinaryOp { span: valid_span, kind: ClassSetBinaryOpKind::Union, lhs: Box::new(valid_item_one), rhs: Box::new(valid_item_two) }) }));",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "    assert!(result.is_some());",
          "    if let Some(ClassFrame::Binary { op }) = result {",
          "    assert_eq!(op.lhs.as_ref(), &valid_item_one);",
          "    assert_eq!(op.rhs.as_ref(), &valid_item_two);",
          "    }"
        ],
        "code": [
          "{",
          "    let valid_span = Span::new(0, 5); // Example valid span",
          "    let valid_item_one = ClassSetItem::Literal(Literal::from('a')); // Example character item",
          "    let valid_item_two = ClassSetItem::Literal(Literal::from('b')); // Another example character item",
          "",
          "    let class_set_union = ClassSetUnion {",
          "        span: valid_span,",
          "        items: vec![valid_item_one, valid_item_two],",
          "    };",
          "",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Union(class_set_union));",
          "    let heap_visitor = HeapVisitor::new();",
          "",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "    assert!(result.is_none());",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(ClassBracketed { span: valid_span, negated: false, kind: ClassSet::Item(valid_item_one) }));",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "    assert!(result.is_some());",
          "    if let Some(ClassFrame::Union { head, tail }) = result {",
          "    assert_eq!(head, &valid_item_one);",
          "    assert!(tail.is_empty());",
          "    }",
          "    let class_induct = ClassInduct::Item(&ClassSetItem::Bracketed(ClassBracketed { span: valid_span, negated: false, kind: ClassSet::BinaryOp(ClassSetBinaryOp { span: valid_span, kind: ClassSetBinaryOpKind::Union, lhs: Box::new(valid_item_one), rhs: Box::new(valid_item_two) }) }));",
          "    let result = heap_visitor.induct_class(&class_induct);",
          "    assert!(result.is_some());",
          "    if let Some(ClassFrame::Binary { op }) = result {",
          "    assert_eq!(op.lhs.as_ref(), &valid_item_one);",
          "    assert_eq!(op.rhs.as_ref(), &valid_item_two);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]