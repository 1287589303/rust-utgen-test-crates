[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 1;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let mut output = core::fmt::Formatter::new();",
          "    non_max_usize.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"0\");"
        ],
        "code": [
          "{",
          "    let value = 1;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let mut output = core::fmt::Formatter::new();",
          "    non_max_usize.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"0\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 2;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let mut output = core::fmt::Formatter::new();",
          "    non_max_usize.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output.to_string(), \"1\");",
          "    assert!(output.is_ok());"
        ],
        "code": [
          "{",
          "    let value = 2;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let mut output = core::fmt::Formatter::new();",
          "    non_max_usize.fmt(&mut output);",
          "    assert_eq!(output.to_string(), \"1\");",
          "    assert!(output.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 100;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let mut output = core::fmt::Formatter::new();",
          "    non_max_usize.fmt(&mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut output), Ok(()));",
          "    assert_eq!(non_max_usize.get(), 99);",
          "    assert!(NonMaxUsize::new(1).is_some());",
          "    assert!(NonMaxUsize::new(0).is_none());",
          "    assert!(NonMaxUsize::new(usize::MAX).is_some());"
        ],
        "code": [
          "{",
          "    let value = 100;",
          "    let non_max_usize = NonMaxUsize::new(value).unwrap();",
          "    let mut output = core::fmt::Formatter::new();",
          "    non_max_usize.fmt(&mut output);",
          "    assert_eq!(core::fmt::Debug::fmt(&non_max_usize, &mut output), Ok(()));",
          "    assert_eq!(non_max_usize.get(), 99);",
          "    assert!(NonMaxUsize::new(1).is_some());",
          "    assert!(NonMaxUsize::new(0).is_none());",
          "    assert!(NonMaxUsize::new(usize::MAX).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let value = 0;",
          "    let non_max_usize = NonMaxUsize::new(value);",
          "    if let Some(non_max) = non_max_usize {",
          "        let mut output = core::fmt::Formatter::new();",
          "        non_max.fmt(&mut output);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(NonMaxUsize::new(0).is_none());",
          "    assert!(NonMaxUsize::new(1).is_some());",
          "    assert_eq!(NonMaxUsize::new(2).unwrap().get(), 1);",
          "    assert_eq!(NonMaxUsize::new(3).unwrap().get(), 2);",
          "    assert_eq!(NonMaxUsize::new(10).unwrap().get(), 9);"
        ],
        "code": [
          "{",
          "    let value = 0;",
          "    let non_max_usize = NonMaxUsize::new(value);",
          "    if let Some(non_max) = non_max_usize {",
          "        let mut output = core::fmt::Formatter::new();",
          "        non_max.fmt(&mut output);",
          "    }",
          "    assert!(NonMaxUsize::new(0).is_none());",
          "    assert!(NonMaxUsize::new(1).is_some());",
          "    assert_eq!(NonMaxUsize::new(2).unwrap().get(), 1);",
          "    assert_eq!(NonMaxUsize::new(3).unwrap().get(), 2);",
          "    assert_eq!(NonMaxUsize::new(10).unwrap().get(), 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]