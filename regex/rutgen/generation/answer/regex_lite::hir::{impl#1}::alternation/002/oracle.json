[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Char('a'),",
          "            is_start_anchored: true,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('b'),",
          "            is_start_anchored: true,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "}"
        ],
        "oracle": [
          "    _result.kind == HirKind::Alternation(subs)",
          "    _result.is_start_anchored == true",
          "    _result.is_match_empty == false",
          "    _result.static_explicit_captures_len == Some(1)"
        ],
        "code": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Char('a'),",
          "            is_start_anchored: true,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('b'),",
          "            is_start_anchored: true,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "    _result.kind == HirKind::Alternation(subs)",
          "    _result.is_start_anchored == true",
          "    _result.is_match_empty == false",
          "    _result.static_explicit_captures_len == Some(1)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Char('x'),",
          "            is_start_anchored: true,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('y'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind, HirKind::Alternation(subs));",
          "    assert_eq!(_result.is_start_anchored, true);",
          "    assert_eq!(_result.is_match_empty, false);",
          "    assert_eq!(_result.static_explicit_captures_len, Some(1));"
        ],
        "code": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Char('x'),",
          "            is_start_anchored: true,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('y'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "    assert_eq!(_result.kind, HirKind::Alternation(subs));",
          "    assert_eq!(_result.is_start_anchored, true);",
          "    assert_eq!(_result.is_match_empty, false);",
          "    assert_eq!(_result.static_explicit_captures_len, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: false,",
          "            is_match_empty: true,",
          "            static_explicit_captures_len: None,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: false,",
          "            is_match_empty: true,",
          "            static_explicit_captures_len: None,",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind, HirKind::Alternation(subs));",
          "    assert_eq!(_result.is_start_anchored, false);",
          "    assert_eq!(_result.is_match_empty, true);",
          "    assert_eq!(_result.static_explicit_captures_len, None);"
        ],
        "code": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: false,",
          "            is_match_empty: true,",
          "            static_explicit_captures_len: None,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: false,",
          "            is_match_empty: true,",
          "            static_explicit_captures_len: None,",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "    assert_eq!(_result.kind, HirKind::Alternation(subs));",
          "    assert_eq!(_result.is_start_anchored, false);",
          "    assert_eq!(_result.is_match_empty, true);",
          "    assert_eq!(_result.static_explicit_captures_len, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Char('m'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(2),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('n'),",
          "            is_start_anchored: false,",
          "            is_match_empty: true,",
          "            static_explicit_captures_len: Some(3),",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind, HirKind::Alternation(vec![HirKind::Char('m'), HirKind::Char('n')]));",
          "    assert_eq!(_result.is_start_anchored, false);",
          "    assert_eq!(_result.is_match_empty, true);",
          "    assert_eq!(_result.static_explicit_captures_len, None);"
        ],
        "code": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Char('m'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(2),",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('n'),",
          "            is_start_anchored: false,",
          "            is_match_empty: true,",
          "            static_explicit_captures_len: Some(3),",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "    assert_eq!(_result.kind, HirKind::Alternation(vec![HirKind::Char('m'), HirKind::Char('n')]));",
          "    assert_eq!(_result.is_start_anchored, false);",
          "    assert_eq!(_result.is_match_empty, true);",
          "    assert_eq!(_result.static_explicit_captures_len, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: true,",
          "            is_match_empty: true,",
          "            static_explicit_captures_len: None,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('z'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind, HirKind::Alternation(vec![HirKind::Empty, HirKind::Char('z')]));",
          "    assert!(_result.is_start_anchored);",
          "    assert!(!_result.is_match_empty);",
          "    assert_eq!(_result.static_explicit_captures_len, None);"
        ],
        "code": [
          "{",
          "    let subs = vec![",
          "        Hir {",
          "            kind: HirKind::Empty,",
          "            is_start_anchored: true,",
          "            is_match_empty: true,",
          "            static_explicit_captures_len: None,",
          "        },",
          "        Hir {",
          "            kind: HirKind::Char('z'),",
          "            is_start_anchored: false,",
          "            is_match_empty: false,",
          "            static_explicit_captures_len: Some(1),",
          "        }",
          "    ];",
          "    let _result = Hir::alternation(subs);",
          "    assert_eq!(_result.kind, HirKind::Alternation(vec![HirKind::Empty, HirKind::Char('z')]));",
          "    assert!(_result.is_start_anchored);",
          "    assert!(!_result.is_match_empty);",
          "    assert_eq!(_result.static_explicit_captures_len, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]