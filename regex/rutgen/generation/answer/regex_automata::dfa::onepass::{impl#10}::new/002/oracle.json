[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sid = StateID(0);",
          "    let epsilons = Epsilons(0);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition, Transition(0));"
        ],
        "code": [
          "{",
          "    let sid = StateID(0);",
          "    let epsilons = Epsilons(0);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "    assert_eq!(transition, Transition(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sid = StateID(2097151);",
          "    let epsilons = Epsilons(0);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.0, (sid.as_u64() << Transition::STATE_ID_SHIFT) | epsilons.0);",
          "    assert!(!transition.match_wins());",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert_eq!(transition.epsilons(), epsilons);"
        ],
        "code": [
          "{",
          "    let sid = StateID(2097151);",
          "    let epsilons = Epsilons(0);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "    assert_eq!(transition.0, (sid.as_u64() << Transition::STATE_ID_SHIFT) | epsilons.0);",
          "    assert!(!transition.match_wins());",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert_eq!(transition.epsilons(), epsilons);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sid = StateID(0);",
          "    let epsilons = Epsilons(u64::MAX);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.0, sid.as_u64() << Transition::STATE_ID_SHIFT | epsilons.0);",
          "    assert!(transition.match_wins() == false);",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert_eq!(transition.epsilons().0, epsilons.0);",
          "    assert!(transition.is_dead() == false);"
        ],
        "code": [
          "{",
          "    let sid = StateID(0);",
          "    let epsilons = Epsilons(u64::MAX);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "    assert_eq!(transition.0, sid.as_u64() << Transition::STATE_ID_SHIFT | epsilons.0);",
          "    assert!(transition.match_wins() == false);",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert_eq!(transition.epsilons().0, epsilons.0);",
          "    assert!(transition.is_dead() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sid = StateID(2097151);",
          "    let epsilons = Epsilons(u64::MAX);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.0, (sid.as_u64() << Transition::STATE_ID_SHIFT) | epsilons.0);",
          "    assert_eq!(transition.match_wins(), false);",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert_eq!(transition.epsilons(), epsilons);",
          "    assert!(!transition.is_dead());",
          "    assert!(transition.0 & Transition::INFO_MASK == epsilons.0);"
        ],
        "code": [
          "{",
          "    let sid = StateID(2097151);",
          "    let epsilons = Epsilons(u64::MAX);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "    assert_eq!(transition.0, (sid.as_u64() << Transition::STATE_ID_SHIFT) | epsilons.0);",
          "    assert_eq!(transition.match_wins(), false);",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert_eq!(transition.epsilons(), epsilons);",
          "    assert!(!transition.is_dead());",
          "    assert!(transition.0 & Transition::INFO_MASK == epsilons.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sid = StateID(1048575);",
          "    let epsilons = Epsilons(9223372036854775807);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.0, sid.as_u64() << Transition::STATE_ID_SHIFT | epsilons.0);",
          "    assert_eq!(transition.match_wins(), false);",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert_eq!(transition.epsilons().0, epsilons.0);",
          "    assert!(transition.is_dead() == false);"
        ],
        "code": [
          "{",
          "    let sid = StateID(1048575);",
          "    let epsilons = Epsilons(9223372036854775807);",
          "    let transition = Transition::new(false, sid, epsilons);",
          "    assert_eq!(transition.0, sid.as_u64() << Transition::STATE_ID_SHIFT | epsilons.0);",
          "    assert_eq!(transition.match_wins(), false);",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert_eq!(transition.epsilons().0, epsilons.0);",
          "    assert!(transition.is_dead() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]