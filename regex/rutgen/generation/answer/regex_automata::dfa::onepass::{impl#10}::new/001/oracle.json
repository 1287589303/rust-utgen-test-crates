[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let match_wins = true;",
          "    let sid = StateID(0);",
          "    let epsilons = Epsilons(0);",
          "    let _transition = Transition::new(match_wins, sid, epsilons);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_transition.state_id(), StateID(0));",
          "    assert!(_transition.match_wins());",
          "    assert_eq!(_transition.epsilons(), Epsilons(0));",
          "    assert!(!_transition.is_dead());",
          "    assert_eq!(_transition.0, 0 | (1 << Transition::MATCH_WINS_SHIFT) | 0);"
        ],
        "code": [
          "{",
          "    let match_wins = true;",
          "    let sid = StateID(0);",
          "    let epsilons = Epsilons(0);",
          "    let _transition = Transition::new(match_wins, sid, epsilons);",
          "    assert_eq!(_transition.state_id(), StateID(0));",
          "    assert!(_transition.match_wins());",
          "    assert_eq!(_transition.epsilons(), Epsilons(0));",
          "    assert!(!_transition.is_dead());",
          "    assert_eq!(_transition.0, 0 | (1 << Transition::MATCH_WINS_SHIFT) | 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let match_wins = true;",
          "    let sid = StateID(1048575); // mid value for StateID(0 to 2097151)",
          "    let epsilons = Epsilons(2147483648); // mid value for Epsilons(0 to 4294967295)",
          "    let _transition = Transition::new(match_wins, sid, epsilons);",
          "}"
        ],
        "oracle": [
          "    let match_wins = true;",
          "    let sid = StateID(1048575);",
          "    let epsilons = Epsilons(2147483648);",
          "    let transition = Transition::new(match_wins, sid, epsilons);",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(transition.epsilons().0, epsilons.0);",
          "    assert!(!transition.is_dead());"
        ],
        "code": [
          "{",
          "    let match_wins = true;",
          "    let sid = StateID(1048575); // mid value for StateID(0 to 2097151)",
          "    let epsilons = Epsilons(2147483648); // mid value for Epsilons(0 to 4294967295)",
          "    let _transition = Transition::new(match_wins, sid, epsilons);",
          "    let match_wins = true;",
          "    let sid = StateID(1048575);",
          "    let epsilons = Epsilons(2147483648);",
          "    let transition = Transition::new(match_wins, sid, epsilons);",
          "    assert_eq!(transition.state_id(), sid);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(transition.epsilons().0, epsilons.0);",
          "    assert!(!transition.is_dead());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let match_wins = true;",
          "    let sid = StateID(2097151);",
          "    let epsilons = Epsilons(4294967295);",
          "    let _transition = Transition::new(match_wins, sid, epsilons);",
          "}"
        ],
        "oracle": [
          "    let match_wins = true;",
          "    let sid = StateID(2097151);",
          "    let epsilons = Epsilons(4294967295);",
          "    let expected_transition = Transition((2097151 << Transition::STATE_ID_SHIFT) | (1 << Transition::MATCH_WINS_SHIFT) | 4294967295);",
          "    assert_eq!(_transition, expected_transition);",
          "    assert!(_transition.match_wins());",
          "    assert_eq!(_transition.state_id(), sid);",
          "    assert_eq!(_transition.epsilons(), epsilons);"
        ],
        "code": [
          "{",
          "    let match_wins = true;",
          "    let sid = StateID(2097151);",
          "    let epsilons = Epsilons(4294967295);",
          "    let _transition = Transition::new(match_wins, sid, epsilons);",
          "    let match_wins = true;",
          "    let sid = StateID(2097151);",
          "    let epsilons = Epsilons(4294967295);",
          "    let expected_transition = Transition((2097151 << Transition::STATE_ID_SHIFT) | (1 << Transition::MATCH_WINS_SHIFT) | 4294967295);",
          "    assert_eq!(_transition, expected_transition);",
          "    assert!(_transition.match_wins());",
          "    assert_eq!(_transition.state_id(), sid);",
          "    assert_eq!(_transition.epsilons(), epsilons);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let match_wins = true;",
          "    let sid = StateID(419430); // a random valid sid",
          "    let epsilons_values = vec![0, 1, 4294967295]; // testing boundary and common cases",
          "    ",
          "    for epsilons in epsilons_values {",
          "        let _transition = Transition::new(match_wins, sid, Epsilons(epsilons));",
          "    }",
          "}"
        ],
        "oracle": [
          "    _transition.state_id() == sid << Transition::STATE_ID_SHIFT",
          "    _transition.match_wins() == true",
          "    _transition.epsilons().0 == epsilons",
          "    _transition.is_dead() == false"
        ],
        "code": [
          "{",
          "    let match_wins = true;",
          "    let sid = StateID(419430); // a random valid sid",
          "    let epsilons_values = vec![0, 1, 4294967295]; // testing boundary and common cases",
          "    ",
          "    for epsilons in epsilons_values {",
          "        let _transition = Transition::new(match_wins, sid, Epsilons(epsilons));",
          "    }",
          "    _transition.state_id() == sid << Transition::STATE_ID_SHIFT",
          "    _transition.match_wins() == true",
          "    _transition.epsilons().0 == epsilons",
          "    _transition.is_dead() == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]