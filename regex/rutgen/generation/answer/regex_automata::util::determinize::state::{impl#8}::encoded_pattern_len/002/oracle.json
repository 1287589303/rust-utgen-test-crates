[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = Repr(&[0x00]); // First byte with bit 1 set to 0",
          "    let result = repr.encoded_pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let repr = Repr(&[0x00]); // First byte with bit 1 set to 0",
          "    let result = repr.encoded_pattern_len();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = Repr(&[0x02]); // First byte with bit 1 set to 0",
          "    let result = repr.encoded_pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let repr = Repr(&[0x02]); // First byte with bit 1 set to 0",
          "    let result = repr.encoded_pattern_len();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr = Repr(&[0xFD]); // First byte with bit 1 set to 0",
          "    let result = repr.encoded_pattern_len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let repr = Repr(&[0xFD]); // First byte with bit 1 set to 0",
          "    let result = repr.encoded_pattern_len();",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]