[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slots = Slots(0b0111); // Binary representation with trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 0; // First trailing zero index",
          "    assert_eq!(result, Some(expected_slot));",
          "}"
        ],
        "oracle": [
          "    let mut slots = Slots(0b0111);",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 0;",
          "    assert_eq!(result, Some(expected_slot));"
        ],
        "code": [
          "{",
          "    let mut slots = Slots(0b0111); // Binary representation with trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 0; // First trailing zero index",
          "    assert_eq!(result, Some(expected_slot));",
          "    let mut slots = Slots(0b0111);",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 0;",
          "    assert_eq!(result, Some(expected_slot));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slots = Slots(0b1010); // Binary representation with trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 1; // Second trailing zero index",
          "    assert_eq!(result, Some(expected_slot));",
          "}"
        ],
        "oracle": [
          "    let mut slots = Slots(0b1010);",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 1;",
          "    assert_eq!(result, Some(expected_slot));",
          "    slots = Slots(0b1110);",
          "    iter = SlotsIter { slots };",
          "    result = iter.next();",
          "    expected_slot = 1;",
          "    assert_eq!(result, Some(expected_slot));",
          "    slots = Slots(0b0010);",
          "    iter = SlotsIter { slots };",
          "    result = iter.next();",
          "    expected_slot = 1;",
          "    assert_eq!(result, Some(expected_slot));",
          "    slots = Slots(0b0000);",
          "    iter = SlotsIter { slots };",
          "    result = iter.next();",
          "    assert_eq!(result, None);",
          "    slots = Slots(0b0001);",
          "    iter = SlotsIter { slots };",
          "    result = iter.next();",
          "    expected_slot = 0;",
          "    assert_eq!(result, Some(expected_slot));"
        ],
        "code": [
          "{",
          "    let mut slots = Slots(0b1010); // Binary representation with trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 1; // Second trailing zero index",
          "    assert_eq!(result, Some(expected_slot));",
          "    let mut slots = Slots(0b1010);",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 1;",
          "    assert_eq!(result, Some(expected_slot));",
          "    slots = Slots(0b1110);",
          "    iter = SlotsIter { slots };",
          "    result = iter.next();",
          "    expected_slot = 1;",
          "    assert_eq!(result, Some(expected_slot));",
          "    slots = Slots(0b0010);",
          "    iter = SlotsIter { slots };",
          "    result = iter.next();",
          "    expected_slot = 1;",
          "    assert_eq!(result, Some(expected_slot));",
          "    slots = Slots(0b0000);",
          "    iter = SlotsIter { slots };",
          "    result = iter.next();",
          "    assert_eq!(result, None);",
          "    slots = Slots(0b0001);",
          "    iter = SlotsIter { slots };",
          "    result = iter.next();",
          "    expected_slot = 0;",
          "    assert_eq!(result, Some(expected_slot));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slots = Slots(0b00011100); // Binary representation with trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 2; // First available slot with three trailing zeros",
          "    assert_eq!(result, Some(expected_slot));",
          "}"
        ],
        "oracle": [
          "    let mut slots = Slots(0b00011100);",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 2;",
          "    assert_eq!(result, Some(expected_slot));"
        ],
        "code": [
          "{",
          "    let mut slots = Slots(0b00011100); // Binary representation with trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 2; // First available slot with three trailing zeros",
          "    assert_eq!(result, Some(expected_slot));",
          "    let mut slots = Slots(0b00011100);",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 2;",
          "    assert_eq!(result, Some(expected_slot));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slots = Slots(0b11111111); // No trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(0));",
          "    ",
          "    let next_result = iter.next(); // Should return next slot",
          "    assert_eq!(next_result, Some(1));",
          "}"
        ],
        "oracle": [
          "    let mut slots = Slots(0b11111111); // No trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(0));",
          "    let next_result = iter.next(); // Should return next slot",
          "    assert_eq!(next_result, Some(1));"
        ],
        "code": [
          "{",
          "    let mut slots = Slots(0b11111111); // No trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(0));",
          "    ",
          "    let next_result = iter.next(); // Should return next slot",
          "    assert_eq!(next_result, Some(1));",
          "    let mut slots = Slots(0b11111111); // No trailing zeros",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    assert_eq!(result, Some(0));",
          "    let next_result = iter.next(); // Should return next slot",
          "    assert_eq!(next_result, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut slots = Slots(0b00000001); // Only one slot",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 0; // Only one available slot",
          "    assert_eq!(result, Some(expected_slot));",
          "}"
        ],
        "oracle": [
          "    let mut slots = Slots(0b00000001); // Only one slot",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 0; // Only one available slot",
          "    assert_eq!(result, Some(expected_slot));"
        ],
        "code": [
          "{",
          "    let mut slots = Slots(0b00000001); // Only one slot",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 0; // Only one available slot",
          "    assert_eq!(result, Some(expected_slot));",
          "    let mut slots = Slots(0b00000001); // Only one slot",
          "    let mut iter = SlotsIter { slots };",
          "    let result = iter.next();",
          "    let expected_slot = 0; // Only one available slot",
          "    assert_eq!(result, Some(expected_slot));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]