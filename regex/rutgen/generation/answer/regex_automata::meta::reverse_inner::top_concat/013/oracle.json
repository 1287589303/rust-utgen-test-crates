[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::empty();",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"a\")), None);",
          "    assert_eq!(top_concat(&Hir::class(vec![])), None);",
          "    assert_eq!(top_concat(&Hir::look()), None);",
          "    assert_eq!(top_concat(&Hir::repetition()), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![])), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::empty();",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"a\")), None);",
          "    assert_eq!(top_concat(&Hir::class(vec![])), None);",
          "    assert_eq!(top_concat(&Hir::look()), None);",
          "    assert_eq!(top_concat(&Hir::repetition()), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::literal(\"test\".into());",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::look(hir::Look::new())), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"example\".into())), None);",
          "    assert_eq!(top_concat(&Hir::class(hir::Class::new())), None);",
          "    assert_eq!(top_concat(&Hir::repetition(hir::Repetition::new())), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"alt\".into())])), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::literal(\"test\".into());",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::look(hir::Look::new())), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"example\".into())), None);",
          "    assert_eq!(top_concat(&Hir::class(hir::Class::new())), None);",
          "    assert_eq!(top_concat(&Hir::repetition(hir::Repetition::new())), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"alt\".into())])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::class(vec!['a', 'b', 'c']);",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    top_concat(&Hir::look()) == None",
          "    top_concat(&Hir::empty()) == None",
          "    top_concat(&Hir::literal('x')) == None",
          "    top_concat(&Hir::repetition(Hir::literal('y'))) == None",
          "    top_concat(&Hir::alternation(vec![Hir::literal('z'), Hir::literal('w')])) == None",
          "    top_concat(&Hir::class(vec!['d', 'e', 'f'])) == None"
        ],
        "code": [
          "{",
          "    let hir = Hir::class(vec!['a', 'b', 'c']);",
          "    top_concat(&hir);",
          "    top_concat(&Hir::look()) == None",
          "    top_concat(&Hir::empty()) == None",
          "    top_concat(&Hir::literal('x')) == None",
          "    top_concat(&Hir::repetition(Hir::literal('y'))) == None",
          "    top_concat(&Hir::alternation(vec![Hir::literal('z'), Hir::literal('w')])) == None",
          "    top_concat(&Hir::class(vec!['d', 'e', 'f'])) == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::look(hir::Look::Assert(hir::LookAssert::Positive, Box::new(Hir::literal(\"look\".into()))));",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::look(hir::Look::Assert(hir::LookAssert::Positive, Box::new(Hir::literal(\"look\".into()))))), None);",
          "    ",
          "    let hir_empty = Hir::empty();",
          "    assert_eq!(top_concat(&hir_empty), None);",
          "    ",
          "    let hir_literal = Hir::literal(\"literal\".into());",
          "    assert_eq!(top_concat(&hir_literal), None);",
          "    ",
          "    let hir_class = Hir::class(vec![b'a', b'b', b'c']);",
          "    assert_eq!(top_concat(&hir_class), None);",
          "    ",
          "    let hir_repetition = Hir::repetition(Box::new(Hir::literal(\"repetition\".into())), 1..=5);",
          "    assert_eq!(top_concat(&hir_repetition), None);",
          "    ",
          "    let hir_alternation = Hir::alternation(vec![Hir::literal(\"option1\".into()), Hir::literal(\"option2\".into())]);",
          "    assert_eq!(top_concat(&hir_alternation), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::look(hir::Look::Assert(hir::LookAssert::Positive, Box::new(Hir::literal(\"look\".into()))));",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::look(hir::Look::Assert(hir::LookAssert::Positive, Box::new(Hir::literal(\"look\".into()))))), None);",
          "    ",
          "    let hir_empty = Hir::empty();",
          "    assert_eq!(top_concat(&hir_empty), None);",
          "    ",
          "    let hir_literal = Hir::literal(\"literal\".into());",
          "    assert_eq!(top_concat(&hir_literal), None);",
          "    ",
          "    let hir_class = Hir::class(vec![b'a', b'b', b'c']);",
          "    assert_eq!(top_concat(&hir_class), None);",
          "    ",
          "    let hir_repetition = Hir::repetition(Box::new(Hir::literal(\"repetition\".into())), 1..=5);",
          "    assert_eq!(top_concat(&hir_repetition), None);",
          "    ",
          "    let hir_alternation = Hir::alternation(vec![Hir::literal(\"option1\".into()), Hir::literal(\"option2\".into())]);",
          "    assert_eq!(top_concat(&hir_alternation), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::repetition(Box::new(Hir::literal(\"repeat\".into())), 0..1, false);",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::look(&Hir::literal(\"look\".into()))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"literal\".into())), None);",
          "    assert_eq!(top_concat(&Hir::class(vec!['a'..='z'])), None);",
          "    assert_eq!(top_concat(&Hir::repetition(Box::new(Hir::literal(\"repeat\".into())), 0..1, false)), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Box::new(Hir::literal(\"alt1\".into())), Box::new(Hir::literal(\"alt2\".into()))])), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::repetition(Box::new(Hir::literal(\"repeat\".into())), 0..1, false);",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::look(&Hir::literal(\"look\".into()))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"literal\".into())), None);",
          "    assert_eq!(top_concat(&Hir::class(vec!['a'..='z'])), None);",
          "    assert_eq!(top_concat(&Hir::repetition(Box::new(Hir::literal(\"repeat\".into())), 0..1, false)), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Box::new(Hir::literal(\"alt1\".into())), Box::new(Hir::literal(\"alt2\".into()))])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::alternation(vec![Hir::literal(\"alt1\".into()), Hir::literal(\"alt2\".into())]);",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::look(Hir::literal(\"look\".into()))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"literal\".into())), None);",
          "    assert_eq!(top_concat(&Hir::class(\"class\".into())), None);",
          "    assert_eq!(top_concat(&Hir::repetition(Box::new(Hir::literal(\"repeat\".into())))), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"alternative1\".into()), Hir::literal(\"alternative2\".into())])), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::alternation(vec![Hir::literal(\"alt1\".into()), Hir::literal(\"alt2\".into())]);",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::look(Hir::literal(\"look\".into()))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"literal\".into())), None);",
          "    assert_eq!(top_concat(&Hir::class(\"class\".into())), None);",
          "    assert_eq!(top_concat(&Hir::repetition(Box::new(Hir::literal(\"repeat\".into())))), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"alternative1\".into()), Hir::literal(\"alternative2\".into())])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let nested_hir = Hir::look(hir::Look::Assert(hir::LookAssert::Positive, Box::new(Hir::literal(\"nested_look\".into()))));",
          "    let hir = Hir::capture(hir::Capture { sub: Box::new(nested_hir), name: None });",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::look(hir::Look::Assert(hir::LookAssert::Positive, Box::new(Hir::literal(\"nested_look\".into()))))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"test\".into())), None);",
          "    assert_eq!(top_concat(&Hir::class(vec![])), None);",
          "    assert_eq!(top_concat(&Hir::repetition(Box::new(Hir::literal(\"test\".into())), None)), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![])), None);"
        ],
        "code": [
          "{",
          "    let nested_hir = Hir::look(hir::Look::Assert(hir::LookAssert::Positive, Box::new(Hir::literal(\"nested_look\".into()))));",
          "    let hir = Hir::capture(hir::Capture { sub: Box::new(nested_hir), name: None });",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::look(hir::Look::Assert(hir::LookAssert::Positive, Box::new(Hir::literal(\"nested_look\".into()))))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"test\".into())), None);",
          "    assert_eq!(top_concat(&Hir::class(vec![])), None);",
          "    assert_eq!(top_concat(&Hir::repetition(Box::new(Hir::literal(\"test\".into())), None)), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]