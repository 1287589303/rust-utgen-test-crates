[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::empty();",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"test\")), None);",
          "    assert_eq!(top_concat(&Hir::class(vec![])), None);",
          "    assert_eq!(top_concat(&Hir::look()), None);",
          "    assert_eq!(top_concat(&Hir::repetition(hir::Repetition::zero_or_more(hir::literal(\"a\")))), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"x\"), Hir::literal(\"y\")])), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::empty();",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"test\")), None);",
          "    assert_eq!(top_concat(&Hir::class(vec![])), None);",
          "    assert_eq!(top_concat(&Hir::look()), None);",
          "    assert_eq!(top_concat(&Hir::repetition(hir::Repetition::zero_or_more(hir::literal(\"a\")))), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"x\"), Hir::literal(\"y\")])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::literal(\"test\");",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"sample\")), None);",
          "    assert_eq!(top_concat(&Hir::class(vec!['a', 'b'])), None);",
          "    assert_eq!(top_concat(&Hir::look_ahead(Hir::literal(\"look\"))), None);",
          "    assert_eq!(top_concat(&Hir::repetition(Hir::literal(\"repeat\"))), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"alt1\"), Hir::literal(\"alt2\")])), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::literal(\"test\");",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"sample\")), None);",
          "    assert_eq!(top_concat(&Hir::class(vec!['a', 'b'])), None);",
          "    assert_eq!(top_concat(&Hir::look_ahead(Hir::literal(\"look\"))), None);",
          "    assert_eq!(top_concat(&Hir::repetition(Hir::literal(\"repeat\"))), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"alt1\"), Hir::literal(\"alt2\")])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::class(vec!['a', 'b', 'c']);",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    top_concat(&Hir::repetition(...)) == None",
          "    top_concat(&Hir::empty()) == None",
          "    top_concat(&Hir::literal(\"test\")) == None",
          "    top_concat(&Hir::look(...)) == None",
          "    top_concat(&Hir::class(vec!['x', 'y'])) == None",
          "    top_concat(&Hir::alternation(vec![hir1, hir2])) == None"
        ],
        "code": [
          "{",
          "    let hir = Hir::class(vec!['a', 'b', 'c']);",
          "    top_concat(&hir);",
          "    top_concat(&Hir::repetition(...)) == None",
          "    top_concat(&Hir::empty()) == None",
          "    top_concat(&Hir::literal(\"test\")) == None",
          "    top_concat(&Hir::look(...)) == None",
          "    top_concat(&Hir::class(vec!['x', 'y'])) == None",
          "    top_concat(&Hir::alternation(vec![hir1, hir2])) == None",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::look(hir::Look::assert(true, Hir::literal(\"lookahead\")));",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::repeat(Hir::literal(\"repeat\"))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::class(vec![], false)), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"literal\")), None);",
          "    assert_eq!(top_concat(&Hir::look(hir::Look::assert(true, Hir::literal(\"lookahead\")))), None);",
          "    assert_eq!(top_concat(&Hir::alt(vec![Hir::literal(\"alt1\"), Hir::literal(\"alt2\")])), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::look(hir::Look::assert(true, Hir::literal(\"lookahead\")));",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::repeat(Hir::literal(\"repeat\"))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::class(vec![], false)), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"literal\")), None);",
          "    assert_eq!(top_concat(&Hir::look(hir::Look::assert(true, Hir::literal(\"lookahead\")))), None);",
          "    assert_eq!(top_concat(&Hir::alt(vec![Hir::literal(\"alt1\"), Hir::literal(\"alt2\")])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::repetition(Box::new(Hir::literal(\"repeated\")), hir::Repetition::zero_or_more());",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&hir), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::repetition(Box::new(Hir::literal(\"repeated\")), hir::Repetition::zero_or_more());",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&hir), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hir = Hir::alternation(vec![Hir::literal(\"option1\"), Hir::literal(\"option2\")]);",
          "    top_concat(&hir);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(top_concat(&Hir::repetition(Hir::literal(\"rep1\"))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"literal_test\")), None);",
          "    assert_eq!(top_concat(&Hir::look(Hir::literal(\"lookahead\"))), None);",
          "    assert_eq!(top_concat(&Hir::class(vec!['a', 'b', 'c'])), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"alt1\"), Hir::look(Hir::literal(\"look\"))])), None);"
        ],
        "code": [
          "{",
          "    let hir = Hir::alternation(vec![Hir::literal(\"option1\"), Hir::literal(\"option2\")]);",
          "    top_concat(&hir);",
          "    assert_eq!(top_concat(&Hir::repetition(Hir::literal(\"rep1\"))), None);",
          "    assert_eq!(top_concat(&Hir::empty()), None);",
          "    assert_eq!(top_concat(&Hir::literal(\"literal_test\")), None);",
          "    assert_eq!(top_concat(&Hir::look(Hir::literal(\"lookahead\"))), None);",
          "    assert_eq!(top_concat(&Hir::class(vec!['a', 'b', 'c'])), None);",
          "    assert_eq!(top_concat(&Hir::alternation(vec![Hir::literal(\"alt1\"), Hir::look(Hir::literal(\"look\"))])), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]