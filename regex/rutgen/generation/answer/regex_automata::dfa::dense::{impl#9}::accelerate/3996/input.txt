self.state_len() > 2, state in self.states() == true, state.accelerate(self.byte_classes()) == true, is_match_state(state.id()) == false, is_start_state(state.id()) == false, is_dead_state(state.id()) == false, is_quit_state(state.id()) == false, accels.is_empty() == false, cmatch > 0 == true, self.special.matches() == true, cur_id == self.special.min_match, accels.remove(&cur_id) == true, cur_id != next_id == false, cnormal > 0 == true, cur_id == next_norm_id, accels.remove(&cur_id) == true, accels.remove(&next_norm_id) == true, accels.remove(&next_start_id) == true, accels.contains_key(&cur_id) == false, cstart > 0 == true, cur_id == self.special.max_start, accels.remove(&cur_id) == true, (*left_val == *right_val) == true, (id, accel) in accels == true, prev.map_or(true, |p| self.tt.next_state_id(p) == id) == true
