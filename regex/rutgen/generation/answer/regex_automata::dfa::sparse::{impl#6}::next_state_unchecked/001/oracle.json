[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let current = StateID(0);",
          "    let input: u8 = 0;",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special: Special { max: StateID(0), quit_id: StateID(0), min_match: StateID(0), max_match: StateID(0), min_accel: StateID(0), max_accel: StateID(0), min_start: StateID(0), max_start: StateID(0) },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    unsafe { dfa.next_state_unchecked(current, input) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 0) }, StateID(0));",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 1) }, StateID(0));",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 255) }, StateID(0));"
        ],
        "code": [
          "{",
          "    let current = StateID(0);",
          "    let input: u8 = 0;",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special: Special { max: StateID(0), quit_id: StateID(0), min_match: StateID(0), max_match: StateID(0), min_accel: StateID(0), max_accel: StateID(0), min_start: StateID(0), max_start: StateID(0) },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    unsafe { dfa.next_state_unchecked(current, input) };",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 0) }, StateID(0));",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 1) }, StateID(0));",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 255) }, StateID(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let current = StateID(0);",
          "    let input: u8 = 255;",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special: Special { max: StateID(0), quit_id: StateID(0), min_match: StateID(0), max_match: StateID(0), min_accel: StateID(0), max_accel: StateID(0), min_start: StateID(0), max_start: StateID(0) },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    unsafe { dfa.next_state_unchecked(StateID(0), input) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 255) }, unsafe { dfa.next_state(StateID(0), 255) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 0) }, unsafe { dfa.next_state(StateID(0), 0) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 128) }, unsafe { dfa.next_state(StateID(0), 128) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(1), 255) }, unsafe { dfa.next_state(StateID(1), 255) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(2), 0) }, unsafe { dfa.next_state(StateID(2), 0) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(1), 128) }, unsafe { dfa.next_state(StateID(1), 128) });"
        ],
        "code": [
          "{",
          "    let current = StateID(0);",
          "    let input: u8 = 255;",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special: Special { max: StateID(0), quit_id: StateID(0), min_match: StateID(0), max_match: StateID(0), min_accel: StateID(0), max_accel: StateID(0), min_start: StateID(0), max_start: StateID(0) },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    unsafe { dfa.next_state_unchecked(StateID(0), input) };",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 255) }, unsafe { dfa.next_state(StateID(0), 255) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 0) }, unsafe { dfa.next_state(StateID(0), 0) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(0), 128) }, unsafe { dfa.next_state(StateID(0), 128) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(1), 255) }, unsafe { dfa.next_state(StateID(1), 255) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(2), 0) }, unsafe { dfa.next_state(StateID(2), 0) });",
          "    assert_eq!(unsafe { dfa.next_state_unchecked(StateID(1), 128) }, unsafe { dfa.next_state(StateID(1), 128) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let current = StateID(0);",
          "    let input: u8 = 128;",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special: Special { max: StateID(0), quit_id: StateID(0), min_match: StateID(0), max_match: StateID(0), min_accel: StateID(0), max_accel: StateID(0), min_start: StateID(0), max_start: StateID(0) },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    unsafe { dfa.next_state_unchecked(current, input) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dfa.next_state_unchecked(StateID(0), 128), dfa.next_state(StateID(0), 128));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(0), 0), dfa.next_state(StateID(0), 0));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(1), 255), dfa.next_state(StateID(1), 255));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(0), 64), dfa.next_state(StateID(0), 64));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(2), 127), dfa.next_state(StateID(2), 127));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(5), 32), dfa.next_state(StateID(5), 32));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(255), 128), dfa.next_state(StateID(255), 128));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(1), 1), dfa.next_state(StateID(1), 1));"
        ],
        "code": [
          "{",
          "    let current = StateID(0);",
          "    let input: u8 = 128;",
          "    let dfa = DFA {",
          "        tt: Transitions { sparse: vec![], classes: ByteClasses::default(), state_len: 1, pattern_len: 0 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::default(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        special: Special { max: StateID(0), quit_id: StateID(0), min_match: StateID(0), max_match: StateID(0), min_accel: StateID(0), max_accel: StateID(0), min_start: StateID(0), max_start: StateID(0) },",
          "        pre: None,",
          "        quitset: ByteSet::default(),",
          "        flags: Flags { has_empty: false, is_utf8: false, is_always_start_anchored: false },",
          "    };",
          "    unsafe { dfa.next_state_unchecked(current, input) };",
          "    assert_eq!(dfa.next_state_unchecked(StateID(0), 128), dfa.next_state(StateID(0), 128));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(0), 0), dfa.next_state(StateID(0), 0));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(1), 255), dfa.next_state(StateID(1), 255));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(0), 64), dfa.next_state(StateID(0), 64));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(2), 127), dfa.next_state(StateID(2), 127));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(5), 32), dfa.next_state(StateID(5), 32));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(255), 128), dfa.next_state(StateID(255), 128));",
          "    assert_eq!(dfa.next_state_unchecked(StateID(1), 1), dfa.next_state(StateID(1), 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]