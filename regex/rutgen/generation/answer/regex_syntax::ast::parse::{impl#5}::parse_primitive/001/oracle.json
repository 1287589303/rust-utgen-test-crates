[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(0),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \".\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \".\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Dot(parser.span_char())));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \"$\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: ast::AssertionKind::EndLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \"^\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: ast::AssertionKind::StartLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \"\\\\a\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: ast::LiteralKind::Superfluous, c: 'a' })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \"c\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: ast::LiteralKind::Verbatim, c: 'c' })));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(0),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \".\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \".\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Dot(parser.span_char())));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \"$\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: ast::AssertionKind::EndLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \"^\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: ast::AssertionKind::StartLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \"\\\\a\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: ast::LiteralKind::Superfluous, c: 'a' })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(0), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()) }, pattern: \"c\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: ast::LiteralKind::Verbatim, c: 'c' })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(1),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"$\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \".\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Dot(/* span values */)));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"^\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion { span: /* span values */, kind: AssertionKind::StartLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"$\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion { span: /* span values */, kind: AssertionKind::EndLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"\\\\\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: /* span values */, kind: LiteralKind::Meta, c: '\\\\' })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"c\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: /* span values */, kind: LiteralKind::Verbatim, c: 'c' })));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(1),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"$\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \".\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Dot(/* span values */)));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"^\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion { span: /* span values */, kind: AssertionKind::StartLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"$\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Assertion(ast::Assertion { span: /* span values */, kind: AssertionKind::EndLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"\\\\\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: /* span values */, kind: LiteralKind::Meta, c: '\\\\' })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(1), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"c\" }; let _result = parser.parse_primitive(); assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: /* span values */, kind: LiteralKind::Verbatim, c: 'c' })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(2),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \".\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Dot(parser.span_char()));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"^\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: AssertionKind::StartLine }));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"$\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: AssertionKind::EndLine }));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"\\\\a\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Special(ast::SpecialLiteralKind::Bell), c: '\\x07' }));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"a\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Verbatim, c: 'a' }));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(2),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"\\\\\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \".\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Dot(parser.span_char()));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"^\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: AssertionKind::StartLine }));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"$\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: AssertionKind::EndLine }));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"\\\\a\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Special(ast::SpecialLiteralKind::Bell), c: '\\x07' }));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(2), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"a\", }; let result = parser.parse_primitive(); assert!(result.is_ok()); assert_eq!(result.unwrap(), Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Verbatim, c: 'a' }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(3),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"^\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \".\", }; assert_eq!(_result, Ok(Primitive::Dot(parser.span_char())));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"^\", }; assert_eq!(_result, Ok(Primitive::Assertion(Assertion { span: parser.span_char(), kind: AssertionKind::StartLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"$\", }; assert_eq!(_result, Ok(Primitive::Assertion(Assertion { span: parser.span_char(), kind: AssertionKind::EndLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"\\\\a\", }; assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Special(SpecialLiteralKind::Bell), c: '\\x07' })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"c\", }; assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Verbatim, c: 'c' })));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(3),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"^\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \".\", }; assert_eq!(_result, Ok(Primitive::Dot(parser.span_char())));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"^\", }; assert_eq!(_result, Ok(Primitive::Assertion(Assertion { span: parser.span_char(), kind: AssertionKind::StartLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"$\", }; assert_eq!(_result, Ok(Primitive::Assertion(Assertion { span: parser.span_char(), kind: AssertionKind::EndLine })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"\\\\a\", }; assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Special(SpecialLiteralKind::Bell), c: '\\x07' })));",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(3), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"c\", }; assert_eq!(_result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Verbatim, c: 'c' })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(4),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"a\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \".\", }; let result = parser.parse_primitive(); assert_eq!(result, Ok(Primitive::Dot(parser.span_char())));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"$\", }; let result = parser.parse_primitive(); assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: AssertionKind::EndLine, })));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"\\\\\", }; let result = parser.parse_primitive(); assert!(result.is_ok());",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"^\", }; let result = parser.parse_primitive(); assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: AssertionKind::StartLine, })));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"c\", }; let result = parser.parse_primitive(); assert_eq!(result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Verbatim, c: 'c', })));"
        ],
        "code": [
          "{",
          "    let parser = ParserI {",
          "        parser: Parser {",
          "            pos: Cell::new(4),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: false,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: false,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        },",
          "        pattern: \"a\",",
          "    };",
          "    let _result = parser.parse_primitive();",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \".\", }; let result = parser.parse_primitive(); assert_eq!(result, Ok(Primitive::Dot(parser.span_char())));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"$\", }; let result = parser.parse_primitive(); assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: AssertionKind::EndLine, })));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"\\\\\", }; let result = parser.parse_primitive(); assert!(result.is_ok());",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"^\", }; let result = parser.parse_primitive(); assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion { span: parser.span_char(), kind: AssertionKind::StartLine, })));",
          "    ",
          "    let parser = ParserI { parser: Parser { pos: Cell::new(4), capture_index: Cell::new(0), nest_limit: 10, octal: false, initial_ignore_whitespace: false, empty_min_range: false, ignore_whitespace: Cell::new(false), comments: RefCell::new(vec![]), stack_group: RefCell::new(vec![]), stack_class: RefCell::new(vec![]), capture_names: RefCell::new(vec![]), scratch: RefCell::new(String::new()), }, pattern: \"c\", }; let result = parser.parse_primitive(); assert_eq!(result, Ok(Primitive::Literal(ast::Literal { span: parser.span_char(), kind: LiteralKind::Verbatim, c: 'c', })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]