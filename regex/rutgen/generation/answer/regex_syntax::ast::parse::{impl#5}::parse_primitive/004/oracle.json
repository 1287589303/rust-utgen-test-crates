[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \".\";",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    let result = parser_i.parse_primitive();    ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Primitive::Dot(parser_i.span_char())));",
          "    assert!(parser_i.pos.get() > 0);",
          "    assert!(parser_i.comments.borrow().is_empty());",
          "    assert!(parser_i.stack_group.borrow().is_empty());",
          "    assert!(parser_i.stack_class.borrow().is_empty());",
          "    assert!(parser_i.capture_names.borrow().is_empty());",
          "    assert_eq!(parser_i.scratch.borrow().len(), 0);",
          "    assert_eq!(parser_i.capture_index.get(), 0);",
          "    assert_eq!(parser_i.parser.nest_limit, 10);",
          "    assert!(parser_i.parser.octal);",
          "    assert!(!parser_i.parser.initial_ignore_whitespace);",
          "    assert!(!parser_i.parser.empty_min_range);",
          "    assert!(!parser_i.parser.ignore_whitespace.get());"
        ],
        "code": [
          "{",
          "    let pattern = \".\";",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    let result = parser_i.parse_primitive();    ",
          "    assert_eq!(result, Ok(Primitive::Dot(parser_i.span_char())));",
          "    assert!(parser_i.pos.get() > 0);",
          "    assert!(parser_i.comments.borrow().is_empty());",
          "    assert!(parser_i.stack_group.borrow().is_empty());",
          "    assert!(parser_i.stack_class.borrow().is_empty());",
          "    assert!(parser_i.capture_names.borrow().is_empty());",
          "    assert_eq!(parser_i.scratch.borrow().len(), 0);",
          "    assert_eq!(parser_i.capture_index.get(), 0);",
          "    assert_eq!(parser_i.parser.nest_limit, 10);",
          "    assert!(parser_i.parser.octal);",
          "    assert!(!parser_i.parser.initial_ignore_whitespace);",
          "    assert!(!parser_i.parser.empty_min_range);",
          "    assert!(!parser_i.parser.ignore_whitespace.get());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"a\";",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    let result = parser_i.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    if let Ok(ast) = result {",
          "    match ast {",
          "    Primitive::Dot(span) => {",
          "    assert_eq!(span.start, 0);",
          "    assert_eq!(span.end, 1);",
          "    }",
          "    _ => panic!(\"Expected a Dot primitive\");",
          "    }",
          "    }"
        ],
        "code": [
          "{",
          "    let pattern = \"a\";",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    let result = parser_i.parse_primitive();",
          "    assert!(result.is_ok());",
          "    if let Ok(ast) = result {",
          "    match ast {",
          "    Primitive::Dot(span) => {",
          "    assert_eq!(span.start, 0);",
          "    assert_eq!(span.end, 1);",
          "    }",
          "    _ => panic!(\"Expected a Dot primitive\");",
          "    }",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"^\";",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    let result = parser_i.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    let parser = Parser {",
          "    pos: Cell::new(0),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 10,",
          "    octal: true,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "    parser: &parser,",
          "    pattern: \".\",",
          "    };",
          "    let result = parser_i.parse_primitive();",
          "    assert_eq!(result, Ok(Primitive::Dot(parser_i.span_char())));"
        ],
        "code": [
          "{",
          "    let pattern = \"^\";",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    let result = parser_i.parse_primitive();",
          "    let parser = Parser {",
          "    pos: Cell::new(0),",
          "    capture_index: Cell::new(0),",
          "    nest_limit: 10,",
          "    octal: true,",
          "    initial_ignore_whitespace: false,",
          "    empty_min_range: false,",
          "    ignore_whitespace: Cell::new(false),",
          "    comments: RefCell::new(vec![]),",
          "    stack_group: RefCell::new(vec![]),",
          "    stack_class: RefCell::new(vec![]),",
          "    capture_names: RefCell::new(vec![]),",
          "    scratch: RefCell::new(String::new()),",
          "    };",
          "    let parser_i = ParserI {",
          "    parser: &parser,",
          "    pattern: \".\",",
          "    };",
          "    let result = parser_i.parse_primitive();",
          "    assert_eq!(result, Ok(Primitive::Dot(parser_i.span_char())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let pattern = \"$\";",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    let result = parser_i.parse_primitive();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion { span: parser_i.span_char(), kind: ast::AssertionKind::EndLine })));",
          "    assert!(parser_i.pos.get() > 0);",
          "    assert_eq!(parser_i.parser.capture_index.get(), 0);",
          "    assert_eq!(parser_i.parser.comments.borrow().len(), 0);",
          "    assert!(parser_i.parser.stack_group.borrow().is_empty());",
          "    assert!(parser_i.parser.stack_class.borrow().is_empty());",
          "    assert_eq!(parser_i.parser.capture_names.borrow().len(), 0);",
          "    assert!(parser_i.parser.scratch.borrow().is_empty());",
          "    assert!(parser_i.parser.ignore_whitespace.get() == false);",
          "    assert!(parser_i.parser.octal == true);",
          "    assert!(parser_i.parser.nest_limit == 10);"
        ],
        "code": [
          "{",
          "    let pattern = \"$\";",
          "    let parser = Parser {",
          "        pos: Cell::new(0),",
          "        capture_index: Cell::new(0),",
          "        nest_limit: 10,",
          "        octal: true,",
          "        initial_ignore_whitespace: false,",
          "        empty_min_range: false,",
          "        ignore_whitespace: Cell::new(false),",
          "        comments: RefCell::new(vec![]),",
          "        stack_group: RefCell::new(vec![]),",
          "        stack_class: RefCell::new(vec![]),",
          "        capture_names: RefCell::new(vec![]),",
          "        scratch: RefCell::new(String::new()),",
          "    };",
          "",
          "    let parser_i = ParserI {",
          "        parser: &parser,",
          "        pattern,",
          "    };",
          "",
          "    let result = parser_i.parse_primitive();",
          "    assert_eq!(result, Ok(Primitive::Assertion(ast::Assertion { span: parser_i.span_char(), kind: ast::AssertionKind::EndLine })));",
          "    assert!(parser_i.pos.get() > 0);",
          "    assert_eq!(parser_i.parser.capture_index.get(), 0);",
          "    assert_eq!(parser_i.parser.comments.borrow().len(), 0);",
          "    assert!(parser_i.parser.stack_group.borrow().is_empty());",
          "    assert!(parser_i.parser.stack_class.borrow().is_empty());",
          "    assert_eq!(parser_i.parser.capture_names.borrow().len(), 0);",
          "    assert!(parser_i.parser.scratch.borrow().is_empty());",
          "    assert!(parser_i.parser.ignore_whitespace.get() == false);",
          "    assert!(parser_i.parser.octal == true);",
          "    assert!(parser_i.parser.nest_limit == 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]