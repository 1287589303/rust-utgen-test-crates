[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let position_start = Position { offset: 0, line: 1, column: 1 };",
          "    let position_end = Position { offset: 1, line: 1, column: 2 };",
          "    let span = Span::new(position_start, position_end);",
          "    ",
          "    let ast = Ast::literal(Box::new(ast::Literal { span: span.clone() }));",
          "    ",
          "    let concat = Concat {",
          "        span: span.clone(),",
          "        asts: vec![ast],",
          "    };",
          "",
          "    let parser = ParserI {",
          "        parser: Box::new(Parser {",
          "            pos: Cell::new(position_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: true,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        }),",
          "        pattern: \"*\",",
          "    };",
          "",
          "    parser.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrMore).unwrap();",
          "}"
        ],
        "oracle": [
          "    self.parser.char() == '?'",
          "    self.parser.char() == '*'",
          "    self.parser.char() == '+'",
          "    self.parser.concat.asts.pop().is_some()",
          "    self.parser.concat.asts.pop().is_some()",
          "    matches!(self.parser.concat.asts.last(), Some(Ast::Flags(_)))",
          "    matches!(self.parser.concat.asts.last(), Some(Ast::Empty(_)))",
          "    self.parser.bump()",
          "    self.parser.char() == '?'",
          "    Ok(concat)"
        ],
        "code": [
          "{",
          "    let position_start = Position { offset: 0, line: 1, column: 1 };",
          "    let position_end = Position { offset: 1, line: 1, column: 2 };",
          "    let span = Span::new(position_start, position_end);",
          "    ",
          "    let ast = Ast::literal(Box::new(ast::Literal { span: span.clone() }));",
          "    ",
          "    let concat = Concat {",
          "        span: span.clone(),",
          "        asts: vec![ast],",
          "    };",
          "",
          "    let parser = ParserI {",
          "        parser: Box::new(Parser {",
          "            pos: Cell::new(position_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: true,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        }),",
          "        pattern: \"*\",",
          "    };",
          "",
          "    parser.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrMore).unwrap();",
          "    self.parser.char() == '?'",
          "    self.parser.char() == '*'",
          "    self.parser.char() == '+'",
          "    self.parser.concat.asts.pop().is_some()",
          "    self.parser.concat.asts.pop().is_some()",
          "    matches!(self.parser.concat.asts.last(), Some(Ast::Flags(_)))",
          "    matches!(self.parser.concat.asts.last(), Some(Ast::Empty(_)))",
          "    self.parser.bump()",
          "    self.parser.char() == '?'",
          "    Ok(concat)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let position_start = Position { offset: 0, line: 1, column: 1 };",
          "    let position_end = Position { offset: 1, line: 1, column: 2 };",
          "    let span = Span::new(position_start, position_end);",
          "    ",
          "    let ast = Ast::literal(Box::new(ast::Literal { span: span.clone() }));",
          "    ",
          "    let concat = Concat {",
          "        span: span.clone(),",
          "        asts: vec![ast],",
          "    };",
          "",
          "    let parser = ParserI {",
          "        parser: Box::new(Parser {",
          "            pos: Cell::new(position_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: true,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        }),",
          "        pattern: \"?\",",
          "    };",
          "",
          "    parser.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrOne).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.char(), '?');",
          "    assert!(matches!(concat.asts.pop(), Some(_)));",
          "    assert!(!matches!(ast, Ast::Flags(_)));",
          "    assert!(!matches!(ast, Ast::Empty(_)));",
          "    assert!(parser.bump());",
          "    assert_ne!(parser.char(), '?');",
          "    assert!(parser.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrOne).is_ok());"
        ],
        "code": [
          "{",
          "    let position_start = Position { offset: 0, line: 1, column: 1 };",
          "    let position_end = Position { offset: 1, line: 1, column: 2 };",
          "    let span = Span::new(position_start, position_end);",
          "    ",
          "    let ast = Ast::literal(Box::new(ast::Literal { span: span.clone() }));",
          "    ",
          "    let concat = Concat {",
          "        span: span.clone(),",
          "        asts: vec![ast],",
          "    };",
          "",
          "    let parser = ParserI {",
          "        parser: Box::new(Parser {",
          "            pos: Cell::new(position_start),",
          "            capture_index: Cell::new(0),",
          "            nest_limit: 10,",
          "            octal: true,",
          "            initial_ignore_whitespace: false,",
          "            empty_min_range: true,",
          "            ignore_whitespace: Cell::new(false),",
          "            comments: RefCell::new(vec![]),",
          "            stack_group: RefCell::new(vec![]),",
          "            stack_class: RefCell::new(vec![]),",
          "            capture_names: RefCell::new(vec![]),",
          "            scratch: RefCell::new(String::new()),",
          "        }),",
          "        pattern: \"?\",",
          "    };",
          "",
          "    parser.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrOne).unwrap();",
          "    assert_eq!(parser.char(), '?');",
          "    assert!(matches!(concat.asts.pop(), Some(_)));",
          "    assert!(!matches!(ast, Ast::Flags(_)));",
          "    assert!(!matches!(ast, Ast::Empty(_)));",
          "    assert!(parser.bump());",
          "    assert_ne!(parser.char(), '?');",
          "    assert!(parser.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrOne).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]