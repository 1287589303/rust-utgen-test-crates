[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockParser {",
          "        char: char,",
          "        pos: Position,",
          "    }",
          "",
          "    impl Borrow<Parser> for MockParser {",
          "        fn borrow(&self) -> &Parser {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = MockParser { char: 'a', pos: position };",
          "    ",
          "    let concat = ast::Concat {",
          "        span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 0, line: 1, column: 1 }),",
          "        asts: vec![],",
          "    };",
          "",
          "    let result = parser.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrMore);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(parser.error(parser.span(), ast::ErrorKind::RepetitionMissing)));"
        ],
        "code": [
          "{",
          "    struct MockParser {",
          "        char: char,",
          "        pos: Position,",
          "    }",
          "",
          "    impl Borrow<Parser> for MockParser {",
          "        fn borrow(&self) -> &Parser {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = MockParser { char: 'a', pos: position };",
          "    ",
          "    let concat = ast::Concat {",
          "        span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 0, line: 1, column: 1 }),",
          "        asts: vec![],",
          "    };",
          "",
          "    let result = parser.parse_uncounted_repetition(concat, ast::RepetitionKind::ZeroOrMore);",
          "    assert_eq!(result, Err(parser.error(parser.span(), ast::ErrorKind::RepetitionMissing)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockParser {",
          "        char: char,",
          "        pos: Position,",
          "    }",
          "",
          "    impl Borrow<Parser> for MockParser {",
          "        fn borrow(&self) -> &Parser {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = MockParser { char: '!', pos: position };",
          "",
          "    let concat = ast::Concat {",
          "        span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 0, line: 1, column: 1 }),",
          "        asts: vec![],",
          "    };",
          "",
          "    let result = parser.parse_uncounted_repetition(concat, ast::RepetitionKind::OneOrMore);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(parser.error(parser.span(), ast::ErrorKind::RepetitionMissing)));"
        ],
        "code": [
          "{",
          "    struct MockParser {",
          "        char: char,",
          "        pos: Position,",
          "    }",
          "",
          "    impl Borrow<Parser> for MockParser {",
          "        fn borrow(&self) -> &Parser {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let position = Position { offset: 0, line: 1, column: 1 };",
          "    let parser = MockParser { char: '!', pos: position };",
          "",
          "    let concat = ast::Concat {",
          "        span: Span::new(Position { offset: 0, line: 1, column: 1 }, Position { offset: 0, line: 1, column: 1 }),",
          "        asts: vec![],",
          "    };",
          "",
          "    let result = parser.parse_uncounted_repetition(concat, ast::RepetitionKind::OneOrMore);",
          "    assert_eq!(result, Err(parser.error(parser.span(), ast::ErrorKind::RepetitionMissing)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]