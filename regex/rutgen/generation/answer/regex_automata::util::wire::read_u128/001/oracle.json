[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_slice: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];",
          "    let _result = read_u128(valid_slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(read_u128(&[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 0x0102030405060708090A0B0C0D0E0F10);",
          "    assert_panics!(read_u128(&[1, 2, 3]));",
          "    assert_panics!(read_u128(&[]));",
          "    assert_panics!(read_u128(&[1; 15]));",
          "    assert_panics!(read_u128(&[0; 15]));"
        ],
        "code": [
          "{",
          "    let valid_slice: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];",
          "    let _result = read_u128(valid_slice);",
          "    assert_eq!(read_u128(&[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 0x0102030405060708090A0B0C0D0E0F10);",
          "    assert_panics!(read_u128(&[1, 2, 3]));",
          "    assert_panics!(read_u128(&[]));",
          "    assert_panics!(read_u128(&[1; 15]));",
          "    assert_panics!(read_u128(&[0; 15]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let short_slice: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];",
          "    let _result = read_u128(short_slice);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| read_u128(&[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])).is_err());"
        ],
        "code": [
          "{",
          "    let short_slice: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];",
          "    let _result = read_u128(short_slice);",
          "    assert!(std::panic::catch_unwind(|| read_u128(&[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let exact_short_slice: &[u8] = &[1; 15];",
          "    let _result = read_u128(exact_short_slice);",
          "}"
        ],
        "oracle": [
          "    let exact_short_slice: &[u8] = &[1; 15];",
          "    let result = std::panic::catch_unwind(|| read_u128(exact_short_slice));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().downcast_ref::<&str>(), None);"
        ],
        "code": [
          "{",
          "    let exact_short_slice: &[u8] = &[1; 15];",
          "    let _result = read_u128(exact_short_slice);",
          "    let exact_short_slice: &[u8] = &[1; 15];",
          "    let result = std::panic::catch_unwind(|| read_u128(exact_short_slice));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().downcast_ref::<&str>(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let boundary_slice: &[u8] = &[0; 16];",
          "    let _result = read_u128(boundary_slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(read_u128(&[0; 16]), 0);"
        ],
        "code": [
          "{",
          "    let boundary_slice: &[u8] = &[0; 16];",
          "    let _result = read_u128(boundary_slice);",
          "    assert_eq!(read_u128(&[0; 16]), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]