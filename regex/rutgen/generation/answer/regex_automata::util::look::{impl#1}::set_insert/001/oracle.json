[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::Start);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::Start as u32);",
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.bits, (Look::Start | Look::End) as u32);",
          "    assert!(look_set.contains(Look::End));",
          "    assert_eq!(look_set.len(), 2);",
          "    look_set.set_remove(Look::Start);",
          "    assert_eq!(look_set.bits, Look::End as u32);",
          "    assert!(!look_set.contains(Look::Start));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_remove(Look::End);",
          "    assert!(look_set.is_empty());",
          "    assert_eq!(look_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::Start);",
          "    assert_eq!(look_set.bits, Look::Start as u32);",
          "    assert!(look_set.contains(Look::Start));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.bits, (Look::Start | Look::End) as u32);",
          "    assert!(look_set.contains(Look::End));",
          "    assert_eq!(look_set.len(), 2);",
          "    look_set.set_remove(Look::Start);",
          "    assert_eq!(look_set.bits, Look::End as u32);",
          "    assert!(!look_set.contains(Look::Start));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_remove(Look::End);",
          "    assert!(look_set.is_empty());",
          "    assert_eq!(look_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::End);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::End as u32);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::End));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::End);",
          "    assert_eq!(look_set.bits, Look::End as u32);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::End));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::StartLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::StartLF as u32);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::StartLF);",
          "    assert_eq!(look_set.bits, Look::StartLF as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::EndLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::EndLF as u32);",
          "    assert!(look_set.contains(Look::EndLF));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::EndLF);",
          "    assert_eq!(look_set.bits, Look::EndLF as u32);",
          "    assert!(look_set.contains(Look::EndLF));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::StartCRLF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::StartCRLF as u32);",
          "    assert!(look_set.contains(Look::StartCRLF));",
          "    assert!(!look_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::StartCRLF);",
          "    assert_eq!(look_set.bits, Look::StartCRLF as u32);",
          "    assert!(look_set.contains(Look::StartCRLF));",
          "    assert!(!look_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::EndCRLF);",
          "}"
        ],
        "oracle": [
          "    assert!(look_set.contains(Look::EndCRLF));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::EndCRLF);",
          "    assert!(look_set.contains(Look::EndCRLF));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordAscii as u32);",
          "    assert!(look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAscii);",
          "    assert_eq!(look_set.bits, Look::WordAscii as u32);",
          "    assert!(look_set.contains(Look::WordAscii));",
          "    assert!(!look_set.contains(Look::WordUnicode));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::WordAsciiNegate), true);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert_eq!(look_set.is_empty(), false);",
          "    assert_eq!(look_set.bits & (1 << 7) != 0, true);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert_eq!(look_set.contains(Look::WordAsciiNegate), true);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert_eq!(look_set.is_empty(), false);",
          "    assert_eq!(look_set.bits & (1 << 7) != 0, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordUnicode as u32);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicode);",
          "    assert_eq!(look_set.bits, Look::WordUnicode as u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicodeNegate);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits & Look::WordUnicodeNegate as u32, Look::WordUnicodeNegate as u32);",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert!(look_set.contains(Look::WordAsciiNegate));",
          "    assert_eq!(look_set.len(), 2);",
          "    assert_eq!(look_set.bits & Look::WordAsciiNegate as u32, Look::WordAsciiNegate as u32);",
          "    look_set.set_remove(Look::WordUnicodeNegate);",
          "    assert!(!look_set.contains(Look::WordUnicodeNegate));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_remove(Look::WordAsciiNegate);",
          "    assert!(look_set.is_empty());",
          "    assert_eq!(look_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordUnicodeNegate);",
          "    assert_eq!(look_set.bits & Look::WordUnicodeNegate as u32, Look::WordUnicodeNegate as u32);",
          "    assert!(look_set.contains(Look::WordUnicodeNegate));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_insert(Look::WordAsciiNegate);",
          "    assert!(look_set.contains(Look::WordAsciiNegate));",
          "    assert_eq!(look_set.len(), 2);",
          "    assert_eq!(look_set.bits & Look::WordAsciiNegate as u32, Look::WordAsciiNegate as u32);",
          "    look_set.set_remove(Look::WordUnicodeNegate);",
          "    assert!(!look_set.contains(Look::WordUnicodeNegate));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_remove(Look::WordAsciiNegate);",
          "    assert!(look_set.is_empty());",
          "    assert_eq!(look_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordStartAscii as u32);",
          "    assert!(look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartAscii);",
          "    assert_eq!(look_set.bits, Look::WordStartAscii as u32);",
          "    assert!(look_set.contains(Look::WordStartAscii));",
          "    assert!(!look_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.contains(Look::WordEndAscii), true);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert_eq!(look_set.is_empty(), false);",
          "    assert_eq!(look_set.bits & (1 << 11) != 0, true);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndAscii);",
          "    assert_eq!(look_set.contains(Look::WordEndAscii), true);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert_eq!(look_set.is_empty(), false);",
          "    assert_eq!(look_set.bits & (1 << 11) != 0, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordStartUnicode as u32);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains_word_unicode());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartUnicode);",
          "    assert_eq!(look_set.bits, Look::WordStartUnicode as u32);",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordStartUnicode));",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains_word_unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "}"
        ],
        "oracle": [
          "    let mut look_set = LookSet::empty();",
          "    let expected_bits_after_insert = Look::WordEndUnicode as u32;",
          "    assert_eq!(look_set.bits, 0);",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "    assert_eq!(look_set.bits, expected_bits_after_insert);",
          "    assert!(look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "    let mut look_set = LookSet::empty();",
          "    let expected_bits_after_insert = Look::WordEndUnicode as u32;",
          "    assert_eq!(look_set.bits, 0);",
          "    look_set.set_insert(Look::WordEndUnicode);",
          "    assert_eq!(look_set.bits, expected_bits_after_insert);",
          "    assert!(look_set.contains(Look::WordEndUnicode));",
          "    assert!(!look_set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartHalfAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordStartHalfAscii.as_repr());",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordStartHalfAscii));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_insert(Look::End);",
          "    assert!(look_set.contains(Look::End));",
          "    assert_eq!(look_set.len(), 2);",
          "    look_set.set_insert(Look::WordStartHalfAscii);",
          "    assert_eq!(look_set.len(), 2);",
          "    assert!(look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(look_set.contains(Look::End));",
          "    look_set.set_remove(Look::End);",
          "    assert!(!look_set.contains(Look::End));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_remove(Look::WordStartHalfAscii);",
          "    assert!(look_set.is_empty());",
          "    assert_eq!(look_set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartHalfAscii);",
          "    assert_eq!(look_set.bits, Look::WordStartHalfAscii.as_repr());",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordStartHalfAscii));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_insert(Look::End);",
          "    assert!(look_set.contains(Look::End));",
          "    assert_eq!(look_set.len(), 2);",
          "    look_set.set_insert(Look::WordStartHalfAscii);",
          "    assert_eq!(look_set.len(), 2);",
          "    assert!(look_set.contains(Look::WordStartHalfAscii));",
          "    assert!(look_set.contains(Look::End));",
          "    look_set.set_remove(Look::End);",
          "    assert!(!look_set.contains(Look::End));",
          "    assert_eq!(look_set.len(), 1);",
          "    look_set.set_remove(Look::WordStartHalfAscii);",
          "    assert!(look_set.is_empty());",
          "    assert_eq!(look_set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndHalfAscii);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordEndHalfAscii as u32);",
          "    assert!(look_set.contains(Look::WordEndHalfAscii));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(!look_set.contains(Look::WordStartHalfAscii));"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndHalfAscii);",
          "    assert_eq!(look_set.bits, Look::WordEndHalfAscii as u32);",
          "    assert!(look_set.contains(Look::WordEndHalfAscii));",
          "    assert!(!look_set.is_empty());",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(!look_set.contains(Look::WordStartHalfAscii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartHalfUnicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.is_empty());",
          "    assert!(!look_set.contains_word());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.contains_word_unicode());"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordStartHalfUnicode);",
          "    assert_eq!(look_set.len(), 1);",
          "    assert!(look_set.contains(Look::WordStartHalfUnicode));",
          "    assert!(!look_set.is_empty());",
          "    assert!(!look_set.contains_word());",
          "    assert!(!look_set.contains_word_ascii());",
          "    assert!(look_set.contains_word_unicode());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndHalfUnicode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(look_set.bits, Look::WordEndHalfUnicode.as_repr());",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordEndHalfUnicode));",
          "    assert_eq!(look_set.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut look_set = LookSet::empty();",
          "    look_set.set_insert(Look::WordEndHalfUnicode);",
          "    assert_eq!(look_set.bits, Look::WordEndHalfUnicode.as_repr());",
          "    assert!(!look_set.is_empty());",
          "    assert!(look_set.contains(Look::WordEndHalfUnicode));",
          "    assert_eq!(look_set.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]