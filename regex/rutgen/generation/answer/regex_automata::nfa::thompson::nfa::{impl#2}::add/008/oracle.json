[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let transitions = vec![",
          "        Transition { start: 1, end: 5, next: StateID::default() },",
          "        Transition { start: 6, end: 10, next: StateID::default() },",
          "    ];",
          "    let sparse = SparseTransitions { transitions: transitions.into_boxed_slice() };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(inner.states.len(), 1);",
          "    assert!(inner.states[0].is_sparse());",
          "    assert_eq!(inner.memory_extra, state.memory_usage());",
          "    assert_eq!(inner.byte_class_set.0.range_count(), 2);",
          "    assert!(inner.look_set_any.is_empty());",
          "    assert!(inner.has_capture == false);",
          "    assert_eq!(id, StateID::new(0).unwrap());"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let transitions = vec![",
          "        Transition { start: 1, end: 5, next: StateID::default() },",
          "        Transition { start: 6, end: 10, next: StateID::default() },",
          "    ];",
          "    let sparse = SparseTransitions { transitions: transitions.into_boxed_slice() };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "    assert_eq!(inner.states.len(), 1);",
          "    assert!(inner.states[0].is_sparse());",
          "    assert_eq!(inner.memory_extra, state.memory_usage());",
          "    assert_eq!(inner.byte_class_set.0.range_count(), 2);",
          "    assert!(inner.look_set_any.is_empty());",
          "    assert!(inner.has_capture == false);",
          "    assert_eq!(id, StateID::new(0).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let transitions = vec![",
          "        Transition { start: 0, end: 1, next: StateID::default() },",
          "    ];",
          "    let sparse = SparseTransitions { transitions: transitions.into_boxed_slice() };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "}"
        ],
        "oracle": [
          "    let mut inner = Inner::default();",
          "    let transitions = vec![",
          "    Transition { start: 0, end: 1, next: StateID::default() },",
          "    ];",
          "    let sparse = SparseTransitions { transitions: transitions.into_boxed_slice() };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "    assert!(id == StateID::new(inner.states.len() - 1).unwrap());",
          "    assert!(inner.memory_extra > 0);",
          "    assert!(inner.byte_class_set.0.is_empty() == false);",
          "    assert!(inner.look_set_any.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let transitions = vec![",
          "        Transition { start: 0, end: 1, next: StateID::default() },",
          "    ];",
          "    let sparse = SparseTransitions { transitions: transitions.into_boxed_slice() };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "    let mut inner = Inner::default();",
          "    let transitions = vec![",
          "    Transition { start: 0, end: 1, next: StateID::default() },",
          "    ];",
          "    let sparse = SparseTransitions { transitions: transitions.into_boxed_slice() };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "    assert!(id == StateID::new(inner.states.len() - 1).unwrap());",
          "    assert!(inner.memory_extra > 0);",
          "    assert!(inner.byte_class_set.0.is_empty() == false);",
          "    assert!(inner.look_set_any.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let transitions: Vec<Transition> = (0..256)",
          "        .map(|i| Transition { start: i as u8, end: i as u8, next: StateID::default() })",
          "        .collect();",
          "    let sparse = SparseTransitions { transitions: transitions.into_boxed_slice() };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "}"
        ],
        "oracle": [
          "    assert!(inner.states.len() == 0);",
          "    assert!(inner.memory_extra == 0);",
          "    assert!(inner.has_capture == false);",
          "    assert!(inner.byte_class_set.0.is_empty());",
          "    assert!(inner.look_set_any.is_empty());",
          "    assert!(inner.look_matcher.get_line_terminator() == 0);",
          "    assert!(inner.start_anchored == StateID::default());",
          "    assert!(inner.start_unanchored == StateID::default());",
          "    assert!(inner.start_pattern.is_empty());",
          "    assert!(inner.utf8 == false);",
          "    assert!(inner.reverse == false);",
          "    assert!(id == StateID::new(0).unwrap());"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let transitions: Vec<Transition> = (0..256)",
          "        .map(|i| Transition { start: i as u8, end: i as u8, next: StateID::default() })",
          "        .collect();",
          "    let sparse = SparseTransitions { transitions: transitions.into_boxed_slice() };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "    assert!(inner.states.len() == 0);",
          "    assert!(inner.memory_extra == 0);",
          "    assert!(inner.has_capture == false);",
          "    assert!(inner.byte_class_set.0.is_empty());",
          "    assert!(inner.look_set_any.is_empty());",
          "    assert!(inner.look_matcher.get_line_terminator() == 0);",
          "    assert!(inner.start_anchored == StateID::default());",
          "    assert!(inner.start_unanchored == StateID::default());",
          "    assert!(inner.start_pattern.is_empty());",
          "    assert!(inner.utf8 == false);",
          "    assert!(inner.reverse == false);",
          "    assert!(id == StateID::new(0).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let sparse = SparseTransitions { transitions: Box::new([]) };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "}"
        ],
        "oracle": [
          "    let mut inner = Inner::default();",
          "    let sparse = SparseTransitions { transitions: Box::new([]) };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "    assert_eq!(id.0, 0);",
          "    assert!(inner.states.len() == 1);",
          "    assert!(inner.byte_class_set.0.is_empty());",
          "    assert!(!inner.has_capture);",
          "    assert!(!inner.look_set_any.contains_anchor());",
          "    assert_eq!(inner.memory_extra, 0);"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let sparse = SparseTransitions { transitions: Box::new([]) };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "    let mut inner = Inner::default();",
          "    let sparse = SparseTransitions { transitions: Box::new([]) };",
          "    let state = State::Sparse(sparse);",
          "    let id = inner.add(state);",
          "    assert_eq!(id.0, 0);",
          "    assert!(inner.states.len() == 1);",
          "    assert!(inner.byte_class_set.0.is_empty());",
          "    assert!(!inner.has_capture);",
          "    assert!(!inner.look_set_any.contains_anchor());",
          "    assert_eq!(inner.memory_extra, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]