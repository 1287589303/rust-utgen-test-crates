[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let alternate1 = StateID(SmallIndex::from(0));",
          "    let alternate2 = StateID(SmallIndex::from(1));",
          "    let state = State::Union {",
          "        alternates: vec![alternate1, alternate2].into_boxed_slice(),",
          "    };",
          "    let _id = inner.add(state);",
          "}"
        ],
        "oracle": [
          "    assert!(inner.states.len() == 1);",
          "    assert!(inner.has_capture == false);",
          "    assert!(inner.memory_extra > 0);",
          "    assert!(inner.look_set_any.is_empty());",
          "    assert!(inner.byte_class_set.0.is_empty());",
          "    assert!(inner.byte_class_set.byte_classes().0 == [0; 256]);",
          "    assert!(inner.start_pattern.is_empty());",
          "    assert!(inner.start_anchored == StateID(SmallIndex::from(0)));",
          "    assert!(inner.start_unanchored == StateID(SmallIndex::from(0)));"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let alternate1 = StateID(SmallIndex::from(0));",
          "    let alternate2 = StateID(SmallIndex::from(1));",
          "    let state = State::Union {",
          "        alternates: vec![alternate1, alternate2].into_boxed_slice(),",
          "    };",
          "    let _id = inner.add(state);",
          "    assert!(inner.states.len() == 1);",
          "    assert!(inner.has_capture == false);",
          "    assert!(inner.memory_extra > 0);",
          "    assert!(inner.look_set_any.is_empty());",
          "    assert!(inner.byte_class_set.0.is_empty());",
          "    assert!(inner.byte_class_set.byte_classes().0 == [0; 256]);",
          "    assert!(inner.start_pattern.is_empty());",
          "    assert!(inner.start_anchored == StateID(SmallIndex::from(0)));",
          "    assert!(inner.start_unanchored == StateID(SmallIndex::from(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner = Inner::default();",
          "    let state = State::Union {",
          "        alternates: Box::new([]),",
          "    };",
          "    let _id = inner.add(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(inner.states.len(), 1);",
          "    assert!(matches!(inner.states[0], State::Union { .. }));",
          "    assert_eq!(inner.memory_extra, 0);",
          "    assert!(!inner.has_capture);",
          "    assert!(inner.byte_class_set.0.is_empty());",
          "    assert!(inner.look_set_any.is_empty());",
          "    assert_eq!(inner.start_anchored, StateID(SmallIndex(0)));",
          "    assert_eq!(inner.start_unanchored, StateID(SmallIndex(0)));",
          "    assert!(inner.start_pattern.is_empty());"
        ],
        "code": [
          "{",
          "    let mut inner = Inner::default();",
          "    let state = State::Union {",
          "        alternates: Box::new([]),",
          "    };",
          "    let _id = inner.add(state);",
          "    assert_eq!(inner.states.len(), 1);",
          "    assert!(matches!(inner.states[0], State::Union { .. }));",
          "    assert_eq!(inner.memory_extra, 0);",
          "    assert!(!inner.has_capture);",
          "    assert!(inner.byte_class_set.0.is_empty());",
          "    assert!(inner.look_set_any.is_empty());",
          "    assert_eq!(inner.start_anchored, StateID(SmallIndex(0)));",
          "    assert_eq!(inner.start_unanchored, StateID(SmallIndex(0)));",
          "    assert!(inner.start_pattern.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]