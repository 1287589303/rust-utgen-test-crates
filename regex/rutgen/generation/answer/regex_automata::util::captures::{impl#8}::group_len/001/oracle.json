[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::new_unchecked(0);",
          "    let end_index = SmallIndex::new_unchecked(4);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "}"
        ],
        "oracle": [
          "    let expected_start = SmallIndex::new_unchecked(0);",
          "    let expected_end = SmallIndex::new_unchecked(4);",
          "    let expected_group_count = 1 + ((expected_end.as_usize() - expected_start.as_usize()) / 2);",
          "    assert_eq!(result, expected_group_count);"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::new_unchecked(0);",
          "    let end_index = SmallIndex::new_unchecked(4);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "    let expected_start = SmallIndex::new_unchecked(0);",
          "    let expected_end = SmallIndex::new_unchecked(4);",
          "    let expected_group_count = 1 + ((expected_end.as_usize() - expected_start.as_usize()) / 2);",
          "    assert_eq!(result, expected_group_count);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::new_unchecked(2);",
          "    let end_index = SmallIndex::new_unchecked(8);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "}"
        ],
        "oracle": [
          "    let expected_result = 1 + ((end_index.as_usize() - start_index.as_usize()) / 2);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::new_unchecked(2);",
          "    let end_index = SmallIndex::new_unchecked(8);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "    let expected_result = 1 + ((end_index.as_usize() - start_index.as_usize()) / 2);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::new_unchecked(3);",
          "    let end_index = SmallIndex::new_unchecked(5);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2);"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::new_unchecked(3);",
          "    let end_index = SmallIndex::new_unchecked(5);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "    assert_eq!(result, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::new_unchecked(6);",
          "    let end_index = SmallIndex::new_unchecked(6);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "}"
        ],
        "oracle": [
          "    let expected_result = 1 + ((end_index.as_usize() - start_index.as_usize()) / 2);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::new_unchecked(6);",
          "    let end_index = SmallIndex::new_unchecked(6);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "    let expected_result = 1 + ((end_index.as_usize() - start_index.as_usize()) / 2);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::MAX;",
          "    let end_index = SmallIndex::new_unchecked(6);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "}"
        ],
        "oracle": [
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::MAX;",
          "    let end_index = SmallIndex::new_unchecked(6);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let expected_result = 1 + ((end_index.as_usize() - start_index.as_usize()) / 2);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::MAX;",
          "    let end_index = SmallIndex::new_unchecked(6);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let result = group_info.group_len(pid);",
          "    let mut group_info = GroupInfoInner::default();",
          "    let start_index = SmallIndex::MAX;",
          "    let end_index = SmallIndex::new_unchecked(6);",
          "    group_info.slot_ranges.push((start_index, end_index));",
          "    let pid = PatternID(start_index);",
          "    let expected_result = 1 + ((end_index.as_usize() - start_index.as_usize()) / 2);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]