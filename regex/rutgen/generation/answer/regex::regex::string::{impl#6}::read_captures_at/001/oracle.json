[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"\", 0);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"b\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"b\", 0);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"a\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert_eq!(locs.0.get(0).unwrap().start(), 0);",
          "    assert_eq!(locs.0.get(0).unwrap().end(), 1);"
        ],
        "code": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"a\", 0);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert_eq!(locs.0.get(0).unwrap().start(), 0);",
          "    assert_eq!(locs.0.get(0).unwrap().end(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"bcdef\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let result = regex.read_captures_at(&mut locs, \"abcdef\", 0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 0);",
          "    assert_eq!(result.unwrap().end, 1);",
          "    let result = regex.read_captures_at(&mut locs, \"aabc\", 1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 1);",
          "    assert_eq!(result.unwrap().end, 2);",
          "    let result = regex.read_captures_at(&mut locs, \"aaa\", 0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 0);",
          "    assert_eq!(result.unwrap().end, 1);",
          "    let result = regex.read_captures_at(&mut locs, \"aaa\", 1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 1);",
          "    assert_eq!(result.unwrap().end, 2);",
          "    let result = regex.read_captures_at(&mut locs, \"aaa\", 2);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 2);",
          "    assert_eq!(result.unwrap().end, 3);",
          "    let result = regex.read_captures_at(&mut locs, \"bcd\", 0);",
          "    assert_eq!(result, None);",
          "    let result = regex.read_captures_at(&mut locs, \"a\", 0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 0);",
          "    assert_eq!(result.unwrap().end, 1);"
        ],
        "code": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"bcdef\", 0);",
          "    assert_eq!(result, None);",
          "    let result = regex.read_captures_at(&mut locs, \"abcdef\", 0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 0);",
          "    assert_eq!(result.unwrap().end, 1);",
          "    let result = regex.read_captures_at(&mut locs, \"aabc\", 1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 1);",
          "    assert_eq!(result.unwrap().end, 2);",
          "    let result = regex.read_captures_at(&mut locs, \"aaa\", 0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 0);",
          "    assert_eq!(result.unwrap().end, 1);",
          "    let result = regex.read_captures_at(&mut locs, \"aaa\", 1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 1);",
          "    assert_eq!(result.unwrap().end, 2);",
          "    let result = regex.read_captures_at(&mut locs, \"aaa\", 2);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 2);",
          "    assert_eq!(result.unwrap().end, 3);",
          "    let result = regex.read_captures_at(&mut locs, \"bcd\", 0);",
          "    assert_eq!(result, None);",
          "    let result = regex.read_captures_at(&mut locs, \"a\", 0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().start, 0);",
          "    assert_eq!(result.unwrap().end, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"abcabc\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.as_ref().map(|m| m.start), Some(0));",
          "    assert_eq!(result.as_ref().map(|m| m.end), Some(1));",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert_eq!(locs.0.get(0), Some(&Match { haystack: \"abcabc\", start: 0, end: 1 }));"
        ],
        "code": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"abcabc\", 0);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.as_ref().map(|m| m.start), Some(0));",
          "    assert_eq!(result.as_ref().map(|m| m.end), Some(1));",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert_eq!(locs.0.get(0), Some(&Match { haystack: \"abcabc\", start: 0, end: 1 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"[!@#]\").unwrap(), pattern: Arc::from(\"[!@#]\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"!@#$%^&*\", 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().haystack, \"!@#$%^&*\");",
          "    assert_eq!(result.unwrap().start, 0);",
          "    assert_eq!(result.unwrap().end, 1);",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert_eq!(locs.0.get(0).is_some(), true);"
        ],
        "code": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"[!@#]\").unwrap(), pattern: Arc::from(\"[!@#]\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"!@#$%^&*\", 0);",
          "    assert_eq!(result.is_some(), true);",
          "    assert_eq!(result.unwrap().haystack, \"!@#$%^&*\");",
          "    assert_eq!(result.unwrap().start, 0);",
          "    assert_eq!(result.unwrap().end, 1);",
          "    assert_eq!(locs.0.len(), 1);",
          "    assert_eq!(locs.0.get(0).is_some(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"abc\", 4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"abc\", 4);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"abc\", 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert_eq!(locs.0.len(), 0);"
        ],
        "code": [
          "{",
          "    let regex = Regex { meta: meta::Regex::new(r\"a\").unwrap(), pattern: Arc::from(\"a\") };",
          "    let mut locs = CaptureLocations(captures::Captures::new());",
          "    let result = regex.read_captures_at(&mut locs, \"abc\", 3);",
          "    assert_eq!(result, None);",
          "    assert_eq!(locs.0.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]