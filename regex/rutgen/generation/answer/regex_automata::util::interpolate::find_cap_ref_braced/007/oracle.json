[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${123}\";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 6 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${123}\";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 6 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${456} \";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(456), end: 6 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${456} \";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(456), end: 6 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${789}abc\";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    let rep: &[u8] = b\"${789}abc\";",
          "    let i: usize = 2;",
          "    let expected = Some(CaptureRef {",
          "    cap: Ref::Number(789),",
          "    end: 6,",
          "    });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${789}abc\";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    let rep: &[u8] = b\"${789}abc\";",
          "    let i: usize = 2;",
          "    let expected = Some(CaptureRef {",
          "    cap: Ref::Number(789),",
          "    end: 6,",
          "    });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${foo}\";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"foo\"), end: 6 }));",
          "    assert_eq!(rep.len(), 6);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"foo\"));",
          "    assert_eq!(result.unwrap().end, 6);",
          "    assert!(matches!(result.unwrap().cap, Ref::Named(_)));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${foo}\";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Named(\"foo\"), end: 6 }));",
          "    assert_eq!(rep.len(), 6);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().cap, Ref::Named(\"foo\"));",
          "    assert_eq!(result.unwrap().end, 6);",
          "    assert!(matches!(result.unwrap().cap, Ref::Named(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"${foo123}\";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 9 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"${foo123}\";",
          "    let i: usize = 2; // Pointing to the byte after '{'",
          "    let result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(result, Some(CaptureRef { cap: Ref::Number(123), end: 9 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]