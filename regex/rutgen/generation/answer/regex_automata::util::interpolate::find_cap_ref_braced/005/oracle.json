[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"{\\xFF\"; // Invalid UTF-8 content",
          "    let i = 2; // i points to the character after '{'",
          "    assert_eq!(find_cap_ref_braced(rep, i), None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref_braced(b\"{\\xFF\", 2), None);"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"{\\xFF\"; // Invalid UTF-8 content",
          "    let i = 2; // i points to the character after '{'",
          "    assert_eq!(find_cap_ref_braced(rep, i), None);",
          "    assert_eq!(find_cap_ref_braced(b\"{\\xFF\", 2), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"{\\xFF\\xFE\\xFD\"; // Invalid UTF-8 content",
          "    let i = 4; // i points to the character after '{'",
          "    assert_eq!(find_cap_ref_braced(rep, i), None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref_braced(b\"{\\xFF\\xFE\\xFD\", 4), None);"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"{\\xFF\\xFE\\xFD\"; // Invalid UTF-8 content",
          "    let i = 4; // i points to the character after '{'",
          "    assert_eq!(find_cap_ref_braced(rep, i), None);",
          "    assert_eq!(find_cap_ref_braced(b\"{\\xFF\\xFE\\xFD\", 4), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = b\"{\\xED\\xA0\\x80\"; // Invalid UTF-8 content (surrogate pair)",
          "    let i = 3; // i points to the character after '{'",
          "    assert_eq!(find_cap_ref_braced(rep, i), None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(find_cap_ref_braced(b\"{\\xED\\xA0\\x80\", 3), None);"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = b\"{\\xED\\xA0\\x80\"; // Invalid UTF-8 content (surrogate pair)",
          "    let i = 3; // i points to the character after '{'",
          "    assert_eq!(find_cap_ref_braced(rep, i), None);",
          "    assert_eq!(find_cap_ref_braced(b\"{\\xED\\xA0\\x80\", 3), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]