[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'1', b'}'];",
          "    let i: usize = 5;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"foo1\"), end: 6 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'1', b'}'];",
          "    let i: usize = 5;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"foo1\"), end: 6 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = &[b'{', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"\"), end: 2 }));",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'1', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"foo1\"), end: 6 }));",
          "    let rep: &[u8] = &[b'{', b'1', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Number(1), end: 3 }));",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'2', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"foo2\"), end: 6 }));",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'o', b'}', b'{', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"fooo\"), end: 7 }));",
          "    let rep: &[u8] = &[b'{', b'1', b'a', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"1a\"), end: 4 }));",
          "    let rep: &[u8] = &[b'{', b'a', b'b', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 4 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = &[b'{', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"\"), end: 2 }));",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'1', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"foo1\"), end: 6 }));",
          "    let rep: &[u8] = &[b'{', b'1', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Number(1), end: 3 }));",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'2', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"foo2\"), end: 6 }));",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'o', b'}', b'{', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"fooo\"), end: 7 }));",
          "    let rep: &[u8] = &[b'{', b'1', b'a', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"1a\"), end: 4 }));",
          "    let rep: &[u8] = &[b'{', b'a', b'b', b'}'];",
          "    let i: usize = 1;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"ab\"), end: 4 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'}'];",
          "    let i: usize = 4;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"foo\"), end: 5 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = &[b'{', b'f', b'o', b'o', b'}'];",
          "    let i: usize = 4;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"foo\"), end: 5 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = &[b'{', b'1', b'}'];",
          "    let i: usize = 3;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"1\"), end: 4 }));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = &[b'{', b'1', b'}'];",
          "    let i: usize = 3;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    assert_eq!(_result, Some(CaptureRef { cap: Ref::Named(\"1\"), end: 4 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rep: &[u8] = &[b'{', b'\\xFF', b'}'];",
          "    let i: usize = 3;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "}"
        ],
        "oracle": [
          "    let rep: &[u8] = &[b'{', b'\\xFF', b'}'];",
          "    let i: usize = 3;",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"\\xFF\"), end: 4 });",
          "    assert_eq!(_result, expected);",
          "    assert_eq!(_result.is_some(), true);",
          "    assert_eq!(_result.unwrap().cap, Ref::Named(\"\\xFF\"));"
        ],
        "code": [
          "{",
          "    let rep: &[u8] = &[b'{', b'\\xFF', b'}'];",
          "    let i: usize = 3;",
          "    let _result = find_cap_ref_braced(rep, i);",
          "    let rep: &[u8] = &[b'{', b'\\xFF', b'}'];",
          "    let i: usize = 3;",
          "    let expected = Some(CaptureRef { cap: Ref::Named(\"\\xFF\"), end: 4 });",
          "    assert_eq!(_result, expected);",
          "    assert_eq!(_result.is_some(), true);",
          "    assert_eq!(_result.unwrap().cap, Ref::Named(\"\\xFF\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]