[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition = Transition::new(true, StateID(1), Epsilons(0));",
          "    transition.set_state_id(StateID(100));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.state_id(), StateID(100));",
          "    assert!(transition.match_wins());",
          "    assert_eq!(transition.epsilons(), Epsilons(0));",
          "    assert!(!transition.is_dead());"
        ],
        "code": [
          "{",
          "    let mut transition = Transition::new(true, StateID(1), Epsilons(0));",
          "    transition.set_state_id(StateID(100));",
          "    assert_eq!(transition.state_id(), StateID(100));",
          "    assert!(transition.match_wins());",
          "    assert_eq!(transition.epsilons(), Epsilons(0));",
          "    assert!(!transition.is_dead());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition = Transition::new(false, StateID(2), Epsilons(0));",
          "    transition.set_state_id(StateID(200));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.match_wins(), false);",
          "    assert_eq!(transition.epsilons().0, 0);",
          "    assert_eq!(transition.state_id().0, 200 << Transition::STATE_ID_BITS);"
        ],
        "code": [
          "{",
          "    let mut transition = Transition::new(false, StateID(2), Epsilons(0));",
          "    transition.set_state_id(StateID(200));",
          "    assert_eq!(transition.match_wins(), false);",
          "    assert_eq!(transition.epsilons().0, 0);",
          "    assert_eq!(transition.state_id().0, 200 << Transition::STATE_ID_BITS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition = Transition::new(false, StateID(0), Epsilons(0));",
          "    transition.set_state_id(StateID(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.state_id(), StateID(0));",
          "    assert_eq!(transition.epsilons(), Epsilons(0));",
          "    assert!(!transition.match_wins());",
          "    transition.set_state_id(StateID(1));",
          "    assert_eq!(transition.state_id(), StateID(1));",
          "    transition.set_state_id(StateID(2));",
          "    assert_eq!(transition.state_id(), StateID(2));"
        ],
        "code": [
          "{",
          "    let mut transition = Transition::new(false, StateID(0), Epsilons(0));",
          "    transition.set_state_id(StateID(0));",
          "    assert_eq!(transition.state_id(), StateID(0));",
          "    assert_eq!(transition.epsilons(), Epsilons(0));",
          "    assert!(!transition.match_wins());",
          "    transition.set_state_id(StateID(1));",
          "    assert_eq!(transition.state_id(), StateID(1));",
          "    transition.set_state_id(StateID(2));",
          "    assert_eq!(transition.state_id(), StateID(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition = Transition::new(true, StateID(0), Epsilons(0));",
          "    transition.set_state_id(StateID(2097151)); // 2^21 - 1",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.state_id().0, 2097151);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(transition.epsilons().0, 0);",
          "    transition.set_state_id(StateID(0));",
          "    assert_eq!(transition.state_id().0, 0);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(transition.epsilons().0, 0);"
        ],
        "code": [
          "{",
          "    let mut transition = Transition::new(true, StateID(0), Epsilons(0));",
          "    transition.set_state_id(StateID(2097151)); // 2^21 - 1",
          "    assert_eq!(transition.state_id().0, 2097151);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(transition.epsilons().0, 0);",
          "    transition.set_state_id(StateID(0));",
          "    assert_eq!(transition.state_id().0, 0);",
          "    assert!(transition.match_wins());",
          "    assert_eq!(transition.epsilons().0, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut transition = Transition::new(true, StateID(5), Epsilons(123456789));",
          "    transition.set_state_id(StateID(300));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(transition.state_id(), StateID(300));",
          "    assert_eq!(transition.epsilons(), Epsilons(123456789));",
          "    assert!(transition.match_wins());"
        ],
        "code": [
          "{",
          "    let mut transition = Transition::new(true, StateID(5), Epsilons(123456789));",
          "    transition.set_state_id(StateID(300));",
          "    assert_eq!(transition.state_id(), StateID(300));",
          "    assert_eq!(transition.epsilons(), Epsilons(123456789));",
          "    assert!(transition.match_wins());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]