[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"\");",
          "    let result = replacement.no_expansion();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Cow::Borrowed(\"\")));",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"No special char\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"No special char\")));",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"Contains $ symbol\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(\"Another $ example\".to_string());",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(\"Just a normal string\".to_string());",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(\"Just a normal string\".to_string())));"
        ],
        "code": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"\")));",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"No special char\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"No special char\")));",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"Contains $ symbol\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(\"Another $ example\".to_string());",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(\"Just a normal string\".to_string());",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(\"Just a normal string\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"a\");",
          "    let result = replacement.no_expansion();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Cow::Borrowed(\"a\")));",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"a$\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"b\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(String::from(\"b\"))));",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"c$\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"\")));"
        ],
        "code": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"a\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"a\")));",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"a$\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"b\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(String::from(\"b\"))));",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"c$\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"$\");",
          "    let result = replacement.no_expansion();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"$\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"ab\");",
          "    let result = replacement.no_expansion();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Cow::Borrowed(\"ab\")));"
        ],
        "code": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"ab\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"ab\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"a$\");",
          "    let result = replacement.no_expansion();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"abc\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"abc\")));",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"a$b$c\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"abcd\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(String::from(\"abcd\"))));"
        ],
        "code": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"a$\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"abc\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"abc\")));",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"a$b$c\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"abcd\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(String::from(\"abcd\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"$a\");",
          "    let result = replacement.no_expansion();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"no special char\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"no special char\")));",
          "    ",
          "    let mut replacement: Cow<str> = Cow::Owned(\"$abc\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    ",
          "    let mut replacement: Cow<str> = Cow::Owned(\"normal text\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(\"normal text\")));"
        ],
        "code": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"$a\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    ",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"no special char\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"no special char\")));",
          "    ",
          "    let mut replacement: Cow<str> = Cow::Owned(\"$abc\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    ",
          "    let mut replacement: Cow<str> = Cow::Owned(\"normal text\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(\"normal text\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"$$\");",
          "    let result = replacement.no_expansion();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"hello\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"hello\")));",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"world\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(String::from(\"world\"))));",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"$hello$\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"test\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"test\")));",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"$$$\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"single\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(String::from(\"single\"))));"
        ],
        "code": [
          "{",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"$$\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"hello\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"hello\")));",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"world\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(String::from(\"world\"))));",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"$hello$\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Borrowed(\"test\");",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Borrowed(\"test\")));",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"$$$\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, None);",
          "    let mut replacement: Cow<str> = Cow::Owned(String::from(\"single\"));",
          "    let result = replacement.no_expansion();",
          "    assert_eq!(result, Some(Cow::Owned(String::from(\"single\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]