[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'a']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    assert_eq!(rep.min, 0);",
          "    assert_eq!(rep.max, Some(2));",
          "    assert!(rep.greedy);",
          "    assert!(matches!(extractor.extract_repetition(&rep).literals(), Some(lits) if lits.len() == 2));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_exact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[1].bytes, vec![b'a']);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'a']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    assert_eq!(rep.min, 0);",
          "    assert_eq!(rep.max, Some(2));",
          "    assert!(rep.greedy);",
          "    assert!(matches!(extractor.extract_repetition(&rep).literals(), Some(lits) if lits.len() == 2));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_exact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[1].bytes, vec![b'a']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::inexact(vec![b'a']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(1),",
          "        greedy: false,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    assert_eq!(subseq.literals().unwrap()[0].is_inexact(), true);",
          "    assert_eq!(rep.min, 0);",
          "    assert_eq!(rep.max, Some(1));",
          "    assert_eq!(rep.greedy, false);",
          "    assert_eq!(extractor.extract_repetition(&rep).is_inexact(), true);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().len() > 0);",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[0].exact, false);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::inexact(vec![b'a']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(1),",
          "        greedy: false,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    assert_eq!(subseq.literals().unwrap()[0].is_inexact(), true);",
          "    assert_eq!(rep.min, 0);",
          "    assert_eq!(rep.max, Some(1));",
          "    assert_eq!(rep.greedy, false);",
          "    assert_eq!(extractor.extract_repetition(&rep).is_inexact(), true);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().len() > 0);",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[0].exact, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::inexact(vec![b'a']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    assert_eq!(rep.min, 0);",
          "    assert_eq!(rep.max, Some(2));",
          "    assert!(rep.greedy);",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).len().is_some());",
          "    assert!(extractor.extract_repetition(&rep).max_literal_len().is_none());",
          "    assert!(extractor.extract_repetition(&rep).min_literal_len().is_none());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap().len(), 1);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_inexact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[0].bytes, vec![b'a']);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::inexact(vec![b'a']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: true,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    assert_eq!(rep.min, 0);",
          "    assert_eq!(rep.max, Some(2));",
          "    assert!(rep.greedy);",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).len().is_some());",
          "    assert!(extractor.extract_repetition(&rep).max_literal_len().is_none());",
          "    assert!(extractor.extract_repetition(&rep).min_literal_len().is_none());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap().len(), 1);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_inexact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[0].bytes, vec![b'a']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'b']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(3),",
          "        greedy: false,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    extractor.limit_repeat().unwrap() == 0",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'b']));",
          "    rep.min == 0",
          "    rep.max == Some(3)",
          "    rep.greedy == false",
          "    extractor.extract_repetition(&rep).len() == Some(2)",
          "    extractor.extract_repetition(&rep).literals().unwrap()[0].is_inexact() == true",
          "    extractor.extract_repetition(&rep).literals().unwrap()[1].is_exact() == true"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'b']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(3),",
          "        greedy: false,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    extractor.limit_repeat().unwrap() == 0",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'b']));",
          "    rep.min == 0",
          "    rep.max == Some(3)",
          "    rep.greedy == false",
          "    extractor.extract_repetition(&rep).len() == Some(2)",
          "    extractor.extract_repetition(&rep).literals().unwrap()[0].is_inexact() == true",
          "    extractor.extract_repetition(&rep).literals().unwrap()[1].is_exact() == true",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::inexact(vec![b'c']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(4),",
          "        greedy: true,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    assert_eq!(rep.min, 0);",
          "    assert_eq!(rep.max, Some(4));",
          "    assert!(rep.greedy);",
          "    assert!(subseq.is_inexact());",
          "    assert_eq!(extractor.extract_repetition(&rep).len(), Some(2));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::inexact(vec![b'c']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(4),",
          "        greedy: true,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    assert_eq!(rep.min, 0);",
          "    assert_eq!(rep.max, Some(4));",
          "    assert!(rep.greedy);",
          "    assert!(subseq.is_inexact());",
          "    assert_eq!(extractor.extract_repetition(&rep).len(), Some(2));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'd']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: false,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    let result = extractor.extract_repetition(&rep);",
          "    assert!(result.is_inexact());",
          "    assert!(result.len().unwrap() == 1);",
          "    assert!(result.literals().unwrap()[0].is_exact() == false);",
          "    assert_eq!(result.literals().unwrap()[0].bytes, vec![b'd']);",
          "    assert!(result.max_cross_len(&Seq::singleton(Literal::exact(vec![]))).is_some());",
          "    assert!(result.max_union_len(&Seq::singleton(Literal::exact(vec![]))).is_some());"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(0);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'd']));",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(5),",
          "        greedy: false,",
          "        sub: Box::new(subseq),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.limit_repeat, 0);",
          "    let result = extractor.extract_repetition(&rep);",
          "    assert!(result.is_inexact());",
          "    assert!(result.len().unwrap() == 1);",
          "    assert!(result.literals().unwrap()[0].is_exact() == false);",
          "    assert_eq!(result.literals().unwrap()[0].bytes, vec![b'd']);",
          "    assert!(result.max_cross_len(&Seq::singleton(Literal::exact(vec![]))).is_some());",
          "    assert!(result.max_union_len(&Seq::singleton(Literal::exact(vec![]))).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]