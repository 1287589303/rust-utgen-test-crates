[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new();",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(hir::Hir { kind: hir::HirKind::Literal(hir::Literal(vec![b'a'])), props: Default::default() }),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().len() == 2);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[1].is_exact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[1].bytes, b\"\");"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new();",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(hir::Hir { kind: hir::HirKind::Literal(hir::Literal(vec![b'a'])), props: Default::default() }),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().len() == 2);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[1].is_exact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[1].bytes, b\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new();",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: false,",
          "        sub: Box::new(hir::Hir { kind: hir::HirKind::Literal(hir::Literal(vec![b'a'])), props: Default::default() }),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.extract_repetition(&rep).is_inexact(), true);",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap().len(), 2);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[1].is_exact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[1].bytes, vec![]);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new();",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: Some(2),",
          "        greedy: false,",
          "        sub: Box::new(hir::Hir { kind: hir::HirKind::Literal(hir::Literal(vec![b'a'])), props: Default::default() }),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.extract_repetition(&rep).is_inexact(), true);",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap().len(), 2);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[1].is_exact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[1].bytes, vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new();",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(hir::Hir { kind: hir::HirKind::Literal(hir::Literal(vec![b'a'])), props: Default::default() }),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.extract_repetition(&rep).is_inexact(), true);",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap().len(), 2);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().iter().any(|lit| lit.is_exact()));",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().iter().any(|lit| lit.is_inexact()));"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new();",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: true,",
          "        sub: Box::new(hir::Hir { kind: hir::HirKind::Literal(hir::Literal(vec![b'a'])), props: Default::default() }),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.extract_repetition(&rep).is_inexact(), true);",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap().len(), 2);",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().iter().any(|lit| lit.is_exact()));",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().iter().any(|lit| lit.is_inexact()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new();",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(hir::Hir { kind: hir::HirKind::Literal(hir::Literal(vec![b'a'])), props: Default::default() }),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.extract_repetition(&rep).len(), Some(2));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().iter().any(|lit| lit.is_exact() && lit.bytes == vec![]));",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().iter().any(|lit| lit.is_inexact() && lit.bytes == vec![b'a']));"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new();",
          "    let rep = hir::Repetition {",
          "        min: 0,",
          "        max: None,",
          "        greedy: false,",
          "        sub: Box::new(hir::Hir { kind: hir::HirKind::Literal(hir::Literal(vec![b'a'])), props: Default::default() }),",
          "    };",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.extract_repetition(&rep).len(), Some(2));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().iter().any(|lit| lit.is_exact() && lit.bytes == vec![]));",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap().iter().any(|lit| lit.is_inexact() && lit.bytes == vec![b'a']));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]