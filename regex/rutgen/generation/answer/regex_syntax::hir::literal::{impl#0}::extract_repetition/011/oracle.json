[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(5)",
          "        .limit_total(10);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'a']));",
          "    let rep = hir::Repetition {",
          "        min: 2,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(Hir { kind: HirKind::Literal(hir::Literal(vec![b'a'])), props: Properties::default() }),",
          "    };",
          "    ",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert!(extractor.limit_repeat == 5);",
          "    assert!(extractor.limit_total == 10);",
          "    assert!(rep.min == 2);",
          "    assert!(rep.max == Some(3));",
          "    assert!(rep.greedy == true);",
          "    assert_eq!(extractor.extract_repetition(&rep).len(), Some(2));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[0].bytes, vec![b'a']);",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[1].bytes, vec![b'a']);"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(5)",
          "        .limit_total(10);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'a']));",
          "    let rep = hir::Repetition {",
          "        min: 2,",
          "        max: Some(3),",
          "        greedy: true,",
          "        sub: Box::new(Hir { kind: HirKind::Literal(hir::Literal(vec![b'a'])), props: Properties::default() }),",
          "    };",
          "    ",
          "    extractor.extract_repetition(&rep);",
          "    assert!(extractor.limit_repeat == 5);",
          "    assert!(extractor.limit_total == 10);",
          "    assert!(rep.min == 2);",
          "    assert!(rep.max == Some(3));",
          "    assert!(rep.greedy == true);",
          "    assert_eq!(extractor.extract_repetition(&rep).len(), Some(2));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[0].bytes, vec![b'a']);",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[1].bytes, vec![b'a']);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(5)",
          "        .limit_total(10);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'b']));",
          "    let rep = hir::Repetition {",
          "        min: 3,",
          "        max: Some(3),",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Literal(hir::Literal(vec![b'b'])), props: Properties::default() }),",
          "    };",
          "    ",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_repeat, 5);",
          "    assert_eq!(extractor.limit_total, 10);",
          "    assert!(subseq.is_exact());",
          "    assert_eq!(rep.min, 3);",
          "    assert_eq!(rep.max, Some(3));",
          "    assert!(!rep.greedy);",
          "    assert_eq!(extractor.extract_repetition(&rep).len(), Some(1));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_exact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[0].bytes, vec![b'b']);",
          "    assert!(extractor.extract_repetition(&rep).max_cross_len(&subseq).is_none());"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(5)",
          "        .limit_total(10);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'b']));",
          "    let rep = hir::Repetition {",
          "        min: 3,",
          "        max: Some(3),",
          "        greedy: false,",
          "        sub: Box::new(Hir { kind: HirKind::Literal(hir::Literal(vec![b'b'])), props: Properties::default() }),",
          "    };",
          "    ",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.limit_repeat, 5);",
          "    assert_eq!(extractor.limit_total, 10);",
          "    assert!(subseq.is_exact());",
          "    assert_eq!(rep.min, 3);",
          "    assert_eq!(rep.max, Some(3));",
          "    assert!(!rep.greedy);",
          "    assert_eq!(extractor.extract_repetition(&rep).len(), Some(1));",
          "    assert!(extractor.extract_repetition(&rep).is_inexact());",
          "    assert!(extractor.extract_repetition(&rep).literals().unwrap()[0].is_exact());",
          "    assert_eq!(extractor.extract_repetition(&rep).literals().unwrap()[0].bytes, vec![b'b']);",
          "    assert!(extractor.extract_repetition(&rep).max_cross_len(&subseq).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(5)",
          "        .limit_total(10);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'c']));",
          "    let rep = hir::Repetition {",
          "        min: 1,",
          "        max: Some(5),",
          "        greedy: true,",
          "        sub: Box::new(Hir { kind: HirKind::Literal(hir::Literal(vec![b'c'])), props: Properties::default() }),",
          "    };",
          "    ",
          "    extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(extractor.limit_repeat, 5);",
          "    assert_eq!(extractor.limit_total, 10);",
          "    assert_eq!(subseq.literals(), Some(&[Literal::exact(vec![b'c'])]));",
          "    assert_eq!(rep.min, 1);",
          "    assert!(rep.max.is_some());",
          "    assert!(rep.greedy);",
          "    assert!(rep.sub.literals().is_some());",
          "    assert!(seq.is_inexact());"
        ],
        "code": [
          "{",
          "    let extractor = Extractor::new()",
          "        .limit_repeat(5)",
          "        .limit_total(10);",
          "    let subseq = Seq::singleton(Literal::exact(vec![b'c']));",
          "    let rep = hir::Repetition {",
          "        min: 1,",
          "        max: Some(5),",
          "        greedy: true,",
          "        sub: Box::new(Hir { kind: HirKind::Literal(hir::Literal(vec![b'c'])), props: Properties::default() }),",
          "    };",
          "    ",
          "    extractor.extract_repetition(&rep);",
          "    assert_eq!(extractor.limit_repeat, 5);",
          "    assert_eq!(extractor.limit_total, 10);",
          "    assert_eq!(subseq.literals(), Some(&[Literal::exact(vec![b'c'])]));",
          "    assert_eq!(rep.min, 1);",
          "    assert!(rep.max.is_some());",
          "    assert!(rep.greedy);",
          "    assert!(rep.sub.literals().is_some());",
          "    assert!(seq.is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]