[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut extractor = Extractor::new()",
          "        .limit_repeat(1);",
          "    ",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(vec![b'a'])),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let rep = hir::Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let result = extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), Some(1));",
          "    assert!(result.is_exact());",
          "    assert_eq!(result.literals().unwrap()[0].bytes, vec![b'a']);",
          "    assert!(result.literals().unwrap()[0].exact);",
          "    assert!(!result.is_inexact());"
        ],
        "code": [
          "{",
          "    let mut extractor = Extractor::new()",
          "        .limit_repeat(1);",
          "    ",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(vec![b'a'])),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let rep = hir::Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: true,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let result = extractor.extract_repetition(&rep);",
          "    assert_eq!(result.len(), Some(1));",
          "    assert!(result.is_exact());",
          "    assert_eq!(result.literals().unwrap()[0].bytes, vec![b'a']);",
          "    assert!(result.literals().unwrap()[0].exact);",
          "    assert!(!result.is_inexact());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut extractor = Extractor::new()",
          "        .limit_repeat(1);",
          "    ",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(vec![b'b'])),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let rep = hir::Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let result = extractor.extract_repetition(&rep);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_inexact() == false);",
          "    assert!(result.literals().unwrap().len() == 1);",
          "    assert!(result.literals().unwrap()[0].is_exact());",
          "    assert!(result.literals().unwrap()[0].bytes == vec![b'b']);",
          "    assert!(result.len().unwrap() <= extractor.limit_total);"
        ],
        "code": [
          "{",
          "    let mut extractor = Extractor::new()",
          "        .limit_repeat(1);",
          "    ",
          "    let sub_hir = Hir {",
          "        kind: HirKind::Literal(hir::Literal(vec![b'b'])),",
          "        props: Properties::default(),",
          "    };",
          "",
          "    let rep = hir::Repetition {",
          "        min: 1,",
          "        max: Some(1),",
          "        greedy: false,",
          "        sub: Box::new(sub_hir),",
          "    };",
          "",
          "    let result = extractor.extract_repetition(&rep);",
          "    assert!(result.is_inexact() == false);",
          "    assert!(result.literals().unwrap().len() == 1);",
          "    assert!(result.literals().unwrap()[0].is_exact());",
          "    assert!(result.literals().unwrap()[0].bytes == vec![b'b']);",
          "    assert!(result.len().unwrap() <= extractor.limit_total);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]