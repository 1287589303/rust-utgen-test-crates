[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = [1, 0, 0, 0];",
          "    let expected_version = 0;",
          "    let _ = read_version(&slice, expected_version);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(read_version(&[1, 0, 0, 0], 0).unwrap_err(), DeserializeError::version_mismatch(0, 1));",
          "    assert_eq!(read_version(&[1, 0, 0], 1).unwrap_err(), DeserializeError::generic(\"buffer too small\"));",
          "    assert_eq!(read_version(&[0, 0, 0, 0], 1).unwrap_err(), DeserializeError::version_mismatch(1, 0));",
          "    assert_eq!(read_version(&[], 0).unwrap_err(), DeserializeError::generic(\"buffer too small\"));",
          "    assert_eq!(read_version(&[2, 0, 0, 0], 1).unwrap_err(), DeserializeError::version_mismatch(1, 2));",
          "    assert_eq!(read_version(&[1, 0, 0, 0], 1).unwrap(), 4);",
          "    assert_eq!(read_version(&[0, 0, 0, 1], 1).unwrap_err(), DeserializeError::version_mismatch(1, 0));"
        ],
        "code": [
          "{",
          "    let slice = [1, 0, 0, 0];",
          "    let expected_version = 0;",
          "    let _ = read_version(&slice, expected_version);",
          "    assert_eq!(read_version(&[1, 0, 0, 0], 0).unwrap_err(), DeserializeError::version_mismatch(0, 1));",
          "    assert_eq!(read_version(&[1, 0, 0], 1).unwrap_err(), DeserializeError::generic(\"buffer too small\"));",
          "    assert_eq!(read_version(&[0, 0, 0, 0], 1).unwrap_err(), DeserializeError::version_mismatch(1, 0));",
          "    assert_eq!(read_version(&[], 0).unwrap_err(), DeserializeError::generic(\"buffer too small\"));",
          "    assert_eq!(read_version(&[2, 0, 0, 0], 1).unwrap_err(), DeserializeError::version_mismatch(1, 2));",
          "    assert_eq!(read_version(&[1, 0, 0, 0], 1).unwrap(), 4);",
          "    assert_eq!(read_version(&[0, 0, 0, 1], 1).unwrap_err(), DeserializeError::version_mismatch(1, 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = [1, 0, 0, 0];",
          "    let expected_version = 2;",
          "    let _ = read_version(&slice, expected_version);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(read_version(&[1, 0, 0, 0], 2), Err(DeserializeError::VersionMismatch { expected: 2, found: 1 })));"
        ],
        "code": [
          "{",
          "    let slice = [1, 0, 0, 0];",
          "    let expected_version = 2;",
          "    let _ = read_version(&slice, expected_version);",
          "    assert!(matches!(read_version(&[1, 0, 0, 0], 2), Err(DeserializeError::VersionMismatch { expected: 2, found: 1 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: [u8; 3] = [0; 3];",
          "    let expected_version = 0;",
          "    let _ = read_version(&slice, expected_version);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(read_version(&[0; 3], 0), Err(DeserializeError::VersionMismatch { expected: 0, found: _ })));",
          "    assert!(matches!(read_version(&[1, 0, 0, 0], 2), Err(DeserializeError::VersionMismatch { expected: 2, found: 1 })));",
          "    assert!(matches!(read_version(&[0; 4], 1), Err(DeserializeError::VersionMismatch { expected: 1, found: 0 })));",
          "    assert!(matches!(read_version(&[0, 0, 0], 0), Err(DeserializeError::BufferTooSmall(_))));",
          "    assert!(matches!(read_version(&[], 0), Err(DeserializeError::BufferTooSmall(_))));"
        ],
        "code": [
          "{",
          "    let slice: [u8; 3] = [0; 3];",
          "    let expected_version = 0;",
          "    let _ = read_version(&slice, expected_version);",
          "    assert!(matches!(read_version(&[0; 3], 0), Err(DeserializeError::VersionMismatch { expected: 0, found: _ })));",
          "    assert!(matches!(read_version(&[1, 0, 0, 0], 2), Err(DeserializeError::VersionMismatch { expected: 2, found: 1 })));",
          "    assert!(matches!(read_version(&[0; 4], 1), Err(DeserializeError::VersionMismatch { expected: 1, found: 0 })));",
          "    assert!(matches!(read_version(&[0, 0, 0], 0), Err(DeserializeError::BufferTooSmall(_))));",
          "    assert!(matches!(read_version(&[], 0), Err(DeserializeError::BufferTooSmall(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = [1, 0, 0, 0];",
          "    let expected_version = 1;",
          "    let _ = read_version(&slice, expected_version);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(read_version(&[0, 0, 0, 0], 1).is_err(), true);",
          "    assert_eq!(read_version(&[2, 0, 0, 0], 1).unwrap_err(), DeserializeError::version_mismatch(1, 2));",
          "    assert_eq!(read_version(&[1, 0], 1).is_err(), true);",
          "    assert_eq!(read_version(&[1, 0, 0, 0], 2).unwrap_err(), DeserializeError::version_mismatch(2, 1));",
          "    assert_eq!(read_version(&[127, 0, 0, 0], 127).is_ok(), true);"
        ],
        "code": [
          "{",
          "    let slice = [1, 0, 0, 0];",
          "    let expected_version = 1;",
          "    let _ = read_version(&slice, expected_version);",
          "    assert_eq!(read_version(&[0, 0, 0, 0], 1).is_err(), true);",
          "    assert_eq!(read_version(&[2, 0, 0, 0], 1).unwrap_err(), DeserializeError::version_mismatch(1, 2));",
          "    assert_eq!(read_version(&[1, 0], 1).is_err(), true);",
          "    assert_eq!(read_version(&[1, 0, 0, 0], 2).unwrap_err(), DeserializeError::version_mismatch(2, 1));",
          "    assert_eq!(read_version(&[127, 0, 0, 0], 127).is_ok(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = [0, 0, 0, 0];",
          "    let expected_version = 0;",
          "    let _ = read_version(&slice, expected_version);",
          "}"
        ],
        "oracle": [
          "    assert!(read_version(&[0, 0, 0, 0], 1).is_err());",
          "    assert_eq!(read_version(&[0, 0, 0, 0], 0).unwrap(), 4);",
          "    assert!(read_version(&[1, 0, 0, 0], 0).is_err());",
          "    assert!(read_version(&[0, 0], 0).is_err());",
          "    assert!(read_version(&[0, 0, 0, 0, 0], 0).is_err());"
        ],
        "code": [
          "{",
          "    let slice = [0, 0, 0, 0];",
          "    let expected_version = 0;",
          "    let _ = read_version(&slice, expected_version);",
          "    assert!(read_version(&[0, 0, 0, 0], 1).is_err());",
          "    assert_eq!(read_version(&[0, 0, 0, 0], 0).unwrap(), 4);",
          "    assert!(read_version(&[1, 0, 0, 0], 0).is_err());",
          "    assert!(read_version(&[0, 0], 0).is_err());",
          "    assert!(read_version(&[0, 0, 0, 0, 0], 0).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = [0, 0, 0, 0];",
          "    let expected_version = 2;",
          "    let _ = read_version(&slice, expected_version);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(read_version(&slice, expected_version), Err(DeserializeError::VersionMismatch { expected: 2, found: 0 })));",
          "    assert!(matches!(try_read_u32(&slice, \"version\"), Ok((0, 4))));",
          "    assert_eq!(write_version_len(), 4);",
          "    assert!(matches!(read_version(&slice, expected_version), Err(DeserializeError::generic(\"version mismatch\"))));",
          "    assert!(matches!(read_version(&[0, 0, 0, 0, 0], expected_version), Err(DeserializeError::buffer_too_small(\"version\"))));"
        ],
        "code": [
          "{",
          "    let slice = [0, 0, 0, 0];",
          "    let expected_version = 2;",
          "    let _ = read_version(&slice, expected_version);",
          "    assert!(matches!(read_version(&slice, expected_version), Err(DeserializeError::VersionMismatch { expected: 2, found: 0 })));",
          "    assert!(matches!(try_read_u32(&slice, \"version\"), Ok((0, 4))));",
          "    assert_eq!(write_version_len(), 4);",
          "    assert!(matches!(read_version(&slice, expected_version), Err(DeserializeError::generic(\"version mismatch\"))));",
          "    assert!(matches!(read_version(&[0, 0, 0, 0, 0], expected_version), Err(DeserializeError::buffer_too_small(\"version\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = [2, 0, 0, 0];",
          "    let expected_version = 1;",
          "    let _ = read_version(&slice, expected_version);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(read_version(&[2, 0, 0, 0], 1), Err(DeserializeError::VersionMismatch { expected: 1, found: 2 })));",
          "    assert!(matches!(read_version(&[0, 0, 0, 0], 1), Err(DeserializeError::VersionMismatch { expected: 1, found: 0 })));",
          "    assert!(matches!(read_version(&[1, 0, 0, 0], 2), Err(DeserializeError::VersionMismatch { expected: 2, found: 1 })));",
          "    assert!(matches!(read_version(&[255, 255, 255, 255], 1), Err(DeserializeError::VersionMismatch { expected: 1, found: 4294967295 })));",
          "    assert!(matches!(read_version(&[], 1), Err(DeserializeError::buffer_too_small(\"version\"))));",
          "    assert!(matches!(read_version(&[1, 0], 1), Err(DeserializeError::buffer_too_small(\"version\"))));",
          "    assert!(matches!(read_version(&[1, 0, 0], 1), Err(DeserializeError::buffer_too_small(\"version\"))));",
          "    assert!(matches!(read_version(&[1, 0, 0, 0, 0], 1), Ok(4)));",
          "    assert!(matches!(read_version(&[0, 2, 0, 0], 2), Err(DeserializeError::VersionMismatch { expected: 2, found: 0 })));"
        ],
        "code": [
          "{",
          "    let slice = [2, 0, 0, 0];",
          "    let expected_version = 1;",
          "    let _ = read_version(&slice, expected_version);",
          "    assert!(matches!(read_version(&[2, 0, 0, 0], 1), Err(DeserializeError::VersionMismatch { expected: 1, found: 2 })));",
          "    assert!(matches!(read_version(&[0, 0, 0, 0], 1), Err(DeserializeError::VersionMismatch { expected: 1, found: 0 })));",
          "    assert!(matches!(read_version(&[1, 0, 0, 0], 2), Err(DeserializeError::VersionMismatch { expected: 2, found: 1 })));",
          "    assert!(matches!(read_version(&[255, 255, 255, 255], 1), Err(DeserializeError::VersionMismatch { expected: 1, found: 4294967295 })));",
          "    assert!(matches!(read_version(&[], 1), Err(DeserializeError::buffer_too_small(\"version\"))));",
          "    assert!(matches!(read_version(&[1, 0], 1), Err(DeserializeError::buffer_too_small(\"version\"))));",
          "    assert!(matches!(read_version(&[1, 0, 0], 1), Err(DeserializeError::buffer_too_small(\"version\"))));",
          "    assert!(matches!(read_version(&[1, 0, 0, 0, 0], 1), Ok(4)));",
          "    assert!(matches!(read_version(&[0, 2, 0, 0], 2), Err(DeserializeError::VersionMismatch { expected: 2, found: 0 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]