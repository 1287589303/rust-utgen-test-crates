[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_alnum\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"NOT_ALPHA\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"foo\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"blankish\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"control\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"8\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"graphite\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"lowercase\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"printable\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"punctuation\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"spacebar\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"upper_case\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"wordy\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"hexadecimal\");",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_alnum\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"NOT_ALPHA\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"foo\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"blankish\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"control\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"8\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"graphite\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"lowercase\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"printable\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"punctuation\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"spacebar\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"upper_case\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"wordy\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"hexadecimal\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_alpha\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_alpha\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_ascii\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_ascii\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_blank\");",
          "}"
        ],
        "oracle": [
          "    let result = ClassAsciiKind::from_name(\"not_blank\"); assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"random\"); assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"wrong\"); assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"\"); assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"12345\"); assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_blank\");",
          "    let result = ClassAsciiKind::from_name(\"not_blank\"); assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"random\"); assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"wrong\"); assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"\"); assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"12345\"); assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
          "}"
        ],
        "oracle": [
          "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"non_existent\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"ALPHA\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"!!punct!!\");",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
          "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"non_existent\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"ALPHA\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"!!punct!!\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_digit\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_digit\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_graph\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_graph\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_lower\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_lower\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_print\");",
          "}"
        ],
        "oracle": [
          "    let result = ClassAsciiKind::from_name(\"not_print\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_alpha\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_alnum\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_ascii\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_blank\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_digit\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_graph\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_lower\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_punct\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_space\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_upper\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_word\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_xdigit\");",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_print\");",
          "    let result = ClassAsciiKind::from_name(\"not_print\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_alpha\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_alnum\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_ascii\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_blank\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_cntrl\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_digit\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_graph\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_lower\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_punct\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_space\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_upper\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_word\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_xdigit\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_punct\");",
          "}"
        ],
        "oracle": [
          "    let result = ClassAsciiKind::from_name(\"not_punct\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"INVALID\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"empty\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"ALNUM\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"alpha!\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"special&char\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\" \");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"newline\\n\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"tab\\t\");",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_punct\");",
          "    let result = ClassAsciiKind::from_name(\"not_punct\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"INVALID\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"empty\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"ALNUM\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"alpha!\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"special&char\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\" \");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"newline\\n\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"tab\\t\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_space\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_space\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_upper\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_upper\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_word\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_word\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_xdigit\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"not_xdigit\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]