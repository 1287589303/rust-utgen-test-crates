[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "}"
        ],
        "oracle": [
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"\");",
          "}"
        ],
        "oracle": [
          "    let result = ClassAsciiKind::from_name(\"alnum\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"alpha\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"ascii\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"blank\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"cntrl\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"digit\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"graph\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"lower\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"print\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"punct\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"space\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"upper\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"\");",
          "    let result = ClassAsciiKind::from_name(\"alnum\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"alpha\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"ascii\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"blank\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"cntrl\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"digit\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"graph\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"lower\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"print\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"punct\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"space\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"upper\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "}"
        ],
        "oracle": [
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"alnum\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"alpha\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"ascii\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"blank\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"cntrl\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"digit\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"graph\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"lower\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"print\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"punct\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"space\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"upper\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"xdigit\");",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"alnum\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"alpha\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"ascii\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"blank\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"cntrl\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"digit\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"graph\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"lower\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"print\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"punct\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"space\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"upper\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"xdigit\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"!@#\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_a_variant\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\"!@#\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"123\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"not_a_variant\");",
          "    assert_eq!(result, None);",
          "    ",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ClassAsciiKind::from_name(\" \");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"alnum\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"alpha\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"ascii\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"blank\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"cntrl\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"digit\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"graph\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"lower\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"print\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"punct\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"space\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"upper\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));",
          "    let result = ClassAsciiKind::from_name(\"xdigit\");",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = ClassAsciiKind::from_name(\" \");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"alnum\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"alpha\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"ascii\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"blank\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"cntrl\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"digit\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"graph\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"lower\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"print\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"punct\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"space\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"upper\");",
          "    assert_eq!(result, None);",
          "    let result = ClassAsciiKind::from_name(\"word\");",
          "    assert_eq!(result, Some(ClassAsciiKind::Word));",
          "    let result = ClassAsciiKind::from_name(\"xdigit\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]