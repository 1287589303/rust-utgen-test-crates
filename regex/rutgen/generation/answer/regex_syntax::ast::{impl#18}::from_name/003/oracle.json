[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let name = \"ascii\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(ClassAsciiKind::Ascii));"
        ],
        "code": [
          "{",
          "    let name = \"ascii\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "    assert_eq!(result, Some(ClassAsciiKind::Ascii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let name = \"ALNUM\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "}"
        ],
        "oracle": [
          "    let name = \"ascii\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "    assert_eq!(result, Some(ClassAsciiKind::Ascii));"
        ],
        "code": [
          "{",
          "    let name = \"ALNUM\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "    let name = \"ascii\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "    assert_eq!(result, Some(ClassAsciiKind::Ascii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let name = \"ALPHA\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "}"
        ],
        "oracle": [
          "    let name = \"ascii\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "    assert_eq!(result, Some(ClassAsciiKind::Ascii));"
        ],
        "code": [
          "{",
          "    let name = \"ALPHA\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "    let name = \"ascii\";",
          "    let result = ClassAsciiKind::from_name(name);",
          "    assert_eq!(result, Some(ClassAsciiKind::Ascii));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]