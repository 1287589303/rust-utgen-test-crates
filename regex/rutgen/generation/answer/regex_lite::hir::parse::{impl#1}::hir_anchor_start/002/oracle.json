[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: true,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "",
          "    let pattern = \"some_pattern\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: true,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.hir_anchor_start();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags { case_insensitive: false, multi_line: true, dot_matches_new_line: false, swap_greed: false, crlf: false, ignore_whitespace: false, }, };",
          "    let pattern = \"some_pattern\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(Flags { case_insensitive: false, multi_line: true, dot_matches_new_line: false, swap_greed: false, crlf: false, ignore_whitespace: false, }), capture_names: RefCell::new(vec![]), };",
          "    assert_eq!(parser.hir_anchor_start().kind(), &HirKind::Look(Look::StartLF));",
          "    assert!(parser.hir_anchor_start().is_start_anchored());",
          "    assert!(parser.hir_anchor_start().is_match_empty());",
          "    assert_eq!(parser.hir_anchor_start().static_explicit_captures_len(), Some(0));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: true,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "",
          "    let pattern = \"some_pattern\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: true,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: false,",
          "            ignore_whitespace: false,",
          "        }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.hir_anchor_start();",
          "    let config = Config { nest_limit: 10, flags: Flags { case_insensitive: false, multi_line: true, dot_matches_new_line: false, swap_greed: false, crlf: false, ignore_whitespace: false, }, };",
          "    let pattern = \"some_pattern\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(Flags { case_insensitive: false, multi_line: true, dot_matches_new_line: false, swap_greed: false, crlf: false, ignore_whitespace: false, }), capture_names: RefCell::new(vec![]), };",
          "    assert_eq!(parser.hir_anchor_start().kind(), &HirKind::Look(Look::StartLF));",
          "    assert!(parser.hir_anchor_start().is_start_anchored());",
          "    assert!(parser.hir_anchor_start().is_match_empty());",
          "    assert_eq!(parser.hir_anchor_start().static_explicit_captures_len(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: true,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "",
          "    let pattern = \"some_pattern\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: true,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.hir_anchor_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.flags().multi_line, true);",
          "    assert_eq!(parser.flags().crlf, false);",
          "    assert_eq!(_look, hir::Look::StartLF);",
          "    assert!(Hir::is_start_anchored(&result));",
          "    assert!(Hir::is_match_empty(&result));"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        nest_limit: 10,",
          "        flags: Flags {",
          "            case_insensitive: false,",
          "            multi_line: true,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        },",
          "    };",
          "",
          "    let pattern = \"some_pattern\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags {",
          "            case_insensitive: false,",
          "            multi_line: true,",
          "            dot_matches_new_line: false,",
          "            swap_greed: false,",
          "            crlf: true,",
          "            ignore_whitespace: false,",
          "        }),",
          "        capture_names: RefCell::new(vec![]),",
          "    };",
          "",
          "    let _ = parser.hir_anchor_start();",
          "    assert_eq!(parser.flags().multi_line, true);",
          "    assert_eq!(parser.flags().crlf, false);",
          "    assert_eq!(_look, hir::Look::StartLF);",
          "    assert!(Hir::is_start_anchored(&result));",
          "    assert!(Hir::is_match_empty(&result));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]