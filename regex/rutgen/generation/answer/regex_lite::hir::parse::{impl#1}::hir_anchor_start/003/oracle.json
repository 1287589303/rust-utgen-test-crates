[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags { multi_line: false, crlf: false, ..Flags::default() }),",
          "        capture_names: RefCell::new(Vec::new()),",
          "    };",
          "    parser.hir_anchor_start();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parser.hir_anchor_start().is_start_anchored(), true);",
          "    assert_eq!(parser.hir_anchor_start().kind(), &HirKind::Look(Look::Start));",
          "    assert_eq!(parser.hir_anchor_start().static_explicit_captures_len(), Some(0));",
          "    assert!(parser.hir_anchor_start().is_match_empty());"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags { multi_line: false, crlf: false, ..Flags::default() }),",
          "        capture_names: RefCell::new(Vec::new()),",
          "    };",
          "    parser.hir_anchor_start();",
          "    assert_eq!(parser.hir_anchor_start().is_start_anchored(), true);",
          "    assert_eq!(parser.hir_anchor_start().kind(), &HirKind::Look(Look::Start));",
          "    assert_eq!(parser.hir_anchor_start().static_explicit_captures_len(), Some(0));",
          "    assert!(parser.hir_anchor_start().is_match_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags { multi_line: false, crlf: true, ..Flags::default() }),",
          "        capture_names: RefCell::new(Vec::new()),",
          "    };",
          "    parser.hir_anchor_start();",
          "}"
        ],
        "oracle": [
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(Flags { multi_line: false, crlf: false, ..Flags::default() }), capture_names: RefCell::new(Vec::new()) };",
          "    let result = parser.hir_anchor_start();",
          "    let expected = Hir::look(hir::Look::Start);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser {",
          "        config,",
          "        pattern,",
          "        depth: Cell::new(0),",
          "        pos: Cell::new(0),",
          "        char: Cell::new(None),",
          "        capture_index: Cell::new(0),",
          "        flags: RefCell::new(Flags { multi_line: false, crlf: true, ..Flags::default() }),",
          "        capture_names: RefCell::new(Vec::new()),",
          "    };",
          "    parser.hir_anchor_start();",
          "    let config = Config { nest_limit: 10, flags: Flags::default() };",
          "    let pattern = \"abc\";",
          "    let parser = Parser { config, pattern, depth: Cell::new(0), pos: Cell::new(0), char: Cell::new(None), capture_index: Cell::new(0), flags: RefCell::new(Flags { multi_line: false, crlf: false, ..Flags::default() }), capture_names: RefCell::new(Vec::new()) };",
          "    let result = parser.hir_anchor_start();",
          "    let expected = Hir::look(hir::Look::Start);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]