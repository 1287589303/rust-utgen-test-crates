[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { max: 10, quit_id: 1, min_match: 2, max_match: 3, min_accel: 4, max_accel: 5, min_start: 6, max_start: 7 };",
          "    let match_states = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![],",
          "        pattern_len: 0,",
          "    };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: match_states,",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let result = dfa.special();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.max, 10);",
          "    assert_eq!(result.quit_id, 1);",
          "    assert_eq!(result.min_match, 2);",
          "    assert_eq!(result.max_match, 3);",
          "    assert_eq!(result.min_accel, 4);",
          "    assert_eq!(result.max_accel, 5);",
          "    assert_eq!(result.min_start, 6);",
          "    assert_eq!(result.max_start, 7);"
        ],
        "code": [
          "{",
          "    let special = Special { max: 10, quit_id: 1, min_match: 2, max_match: 3, min_accel: 4, max_accel: 5, min_start: 6, max_start: 7 };",
          "    let match_states = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![],",
          "        pattern_len: 0,",
          "    };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: match_states,",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let result = dfa.special();",
          "    assert_eq!(result.max, 10);",
          "    assert_eq!(result.quit_id, 1);",
          "    assert_eq!(result.min_match, 2);",
          "    assert_eq!(result.max_match, 3);",
          "    assert_eq!(result.min_accel, 4);",
          "    assert_eq!(result.max_accel, 5);",
          "    assert_eq!(result.min_start, 6);",
          "    assert_eq!(result.max_start, 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let special = Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 };",
          "    let match_states = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![],",
          "        pattern_len: 0,",
          "    };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: match_states,",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let result = dfa.special();",
          "}"
        ],
        "oracle": [
          "    let expected_special = Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 };",
          "    assert_eq!(result, &expected_special);"
        ],
        "code": [
          "{",
          "    let special = Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 };",
          "    let match_states = MatchStates {",
          "        slices: vec![],",
          "        pattern_ids: vec![],",
          "        pattern_len: 0,",
          "    };",
          "    let dfa = DFA {",
          "        tt: TransitionTable { table: vec![], classes: ByteClasses::default(), stride2: 1 },",
          "        st: StartTable { table: vec![], kind: StartKind::Both, start_map: StartByteMap::new(), stride: 0, pattern_len: None, universal_start_unanchored: None, universal_start_anchored: None },",
          "        ms: match_states,",
          "        special,",
          "        accels: Accels { accels: vec![] },",
          "        pre: None,",
          "        quitset: ByteSet([false; 256]),",
          "        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: false },",
          "    };",
          "    let result = dfa.special();",
          "    let expected_special = Special { max: 0, quit_id: 0, min_match: 0, max_match: 0, min_accel: 0, max_accel: 0, min_start: 0, max_start: 0 };",
          "    assert_eq!(result, &expected_special);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]