[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    span.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 1, end: 0 };",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 2, end: 2 };",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 3, end: 4 };",
          "    assert!(span.is_empty() == false);",
          "    let span = Span { start: 5, end: 10 };",
          "    assert!(span.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 0, end: 0 };",
          "    span.is_empty();",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 1, end: 0 };",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 2, end: 2 };",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 3, end: 4 };",
          "    assert!(span.is_empty() == false);",
          "    let span = Span { start: 5, end: 10 };",
          "    assert!(span.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 1, end: 0 };",
          "    span.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 0, end: 0 };",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 5, end: 10 };",
          "    assert!(span.is_empty() == false);",
          "    let span = Span { start: 10, end: 10 };",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 2, end: 1 };",
          "    assert!(span.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 1, end: 0 };",
          "    span.is_empty();",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 0, end: 0 };",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 5, end: 10 };",
          "    assert!(span.is_empty() == false);",
          "    let span = Span { start: 10, end: 10 };",
          "    assert!(span.is_empty() == true);",
          "    let span = Span { start: 2, end: 1 };",
          "    assert!(span.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 2, end: 2 };",
          "    span.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.is_empty(), true);",
          "    ",
          "    let span = Span { start: 3, end: 5 };",
          "    assert_eq!(span.is_empty(), false);",
          "    ",
          "    let span = Span { start: 0, end: 1 };",
          "    assert_eq!(span.is_empty(), false);",
          "    ",
          "    let span = Span { start: 10, end: 10 };",
          "    assert_eq!(span.is_empty(), true);",
          "    ",
          "    let span = Span { start: 5, end: 5 };",
          "    assert_eq!(span.is_empty(), true);",
          "    ",
          "    let span = Span { start: 4, end: 3 };",
          "    assert_eq!(span.is_empty(), true);",
          "    ",
          "    let span = Span { start: usize::MAX, end: usize::MAX };",
          "    assert_eq!(span.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 2, end: 2 };",
          "    span.is_empty();",
          "    assert_eq!(span.is_empty(), true);",
          "    ",
          "    let span = Span { start: 3, end: 5 };",
          "    assert_eq!(span.is_empty(), false);",
          "    ",
          "    let span = Span { start: 0, end: 1 };",
          "    assert_eq!(span.is_empty(), false);",
          "    ",
          "    let span = Span { start: 10, end: 10 };",
          "    assert_eq!(span.is_empty(), true);",
          "    ",
          "    let span = Span { start: 5, end: 5 };",
          "    assert_eq!(span.is_empty(), true);",
          "    ",
          "    let span = Span { start: 4, end: 3 };",
          "    assert_eq!(span.is_empty(), true);",
          "    ",
          "    let span = Span { start: usize::MAX, end: usize::MAX };",
          "    assert_eq!(span.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 5, end: 5 };",
          "    span.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 10, end: 15 };",
          "    assert_eq!(span.is_empty(), false);",
          "    let span = Span { start: 0, end: 0 };",
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 3, end: 3 };",
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 7, end: 12 };",
          "    assert_eq!(span.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 5, end: 5 };",
          "    span.is_empty();",
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 10, end: 15 };",
          "    assert_eq!(span.is_empty(), false);",
          "    let span = Span { start: 0, end: 0 };",
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 3, end: 3 };",
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 7, end: 12 };",
          "    assert_eq!(span.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let span = Span { start: 10, end: 8 };",
          "    span.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 5, end: 5 };",
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 0, end: 1 };",
          "    assert_eq!(span.is_empty(), false);",
          "    let span = Span { start: 0, end: 10 };",
          "    assert_eq!(span.is_empty(), false);",
          "    let span = Span { start: usize::MAX, end: usize::MAX };",
          "    assert_eq!(span.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let span = Span { start: 10, end: 8 };",
          "    span.is_empty();",
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 5, end: 5 };",
          "    assert_eq!(span.is_empty(), true);",
          "    let span = Span { start: 0, end: 1 };",
          "    assert_eq!(span.is_empty(), false);",
          "    let span = Span { start: 0, end: 10 };",
          "    assert_eq!(span.is_empty(), false);",
          "    let span = Span { start: usize::MAX, end: usize::MAX };",
          "    assert_eq!(span.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]