[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let dfa_builder = builder.dfa;",
          "}"
        ],
        "oracle": [
          "    assert!(builder.dfa.is_some());",
          "    assert_eq!(builder.dfa, DFA::builder());",
          "    assert_eq!(std::mem::size_of::<Builder>(), expected_size_of_builder);",
          "    assert_eq!(builder.dfa().config(), expected_default_config);",
          "    assert!(builder.dfa().get_nfa().is_some());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let dfa_builder = builder.dfa;",
          "    assert!(builder.dfa.is_some());",
          "    assert_eq!(builder.dfa, DFA::builder());",
          "    assert_eq!(std::mem::size_of::<Builder>(), expected_size_of_builder);",
          "    assert_eq!(builder.dfa().config(), expected_default_config);",
          "    assert!(builder.dfa().get_nfa().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let builder = Builder::new();",
          "    let dfa_builder = builder.dfa;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(builder.dfa, DFA::builder());",
          "    assert!(builder.dfa.is_instance_of::<dfa::Builder>());",
          "    assert!(builder.pattern_id.is_none());",
          "    assert!(builder.states.is_empty());",
          "    assert!(builder.start_pattern.is_empty());",
          "    assert!(builder.captures.is_empty());",
          "    assert_eq!(builder.memory_states, 0);",
          "    assert!(!builder.utf8);",
          "    assert!(!builder.reverse);",
          "    assert!(builder.look_matcher.is_default());",
          "    assert!(builder.size_limit.is_none());"
        ],
        "code": [
          "{",
          "    let builder = Builder::new();",
          "    let dfa_builder = builder.dfa;",
          "    assert_eq!(builder.dfa, DFA::builder());",
          "    assert!(builder.dfa.is_instance_of::<dfa::Builder>());",
          "    assert!(builder.pattern_id.is_none());",
          "    assert!(builder.states.is_empty());",
          "    assert!(builder.start_pattern.is_empty());",
          "    assert!(builder.captures.is_empty());",
          "    assert_eq!(builder.memory_states, 0);",
          "    assert!(!builder.utf8);",
          "    assert!(!builder.reverse);",
          "    assert!(builder.look_matcher.is_default());",
          "    assert!(builder.size_limit.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]