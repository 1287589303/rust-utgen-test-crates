[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = canonical_gencat(\"any\");",
          "    // Result will be Ok(Some(\"Any\"))",
          "}"
        ],
        "oracle": [
          "    let result = canonical_gencat(\"any\");",
          "    assert_eq!(result, Ok(Some(\"Any\")));",
          "    ",
          "    let result = canonical_gencat(\"assigned\");",
          "    assert_eq!(result, Ok(Some(\"Assigned\")));",
          "    ",
          "    let result = canonical_gencat(\"ascii\");",
          "    assert_eq!(result, Ok(Some(\"ASCII\")));",
          "    ",
          "    let result = canonical_gencat(\"unknown\");",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_none());"
        ],
        "code": [
          "{",
          "    let result = canonical_gencat(\"any\");",
          "    // Result will be Ok(Some(\"Any\"))",
          "    let result = canonical_gencat(\"any\");",
          "    assert_eq!(result, Ok(Some(\"Any\")));",
          "    ",
          "    let result = canonical_gencat(\"assigned\");",
          "    assert_eq!(result, Ok(Some(\"Assigned\")));",
          "    ",
          "    let result = canonical_gencat(\"ascii\");",
          "    assert_eq!(result, Ok(Some(\"ASCII\")));",
          "    ",
          "    let result = canonical_gencat(\"unknown\");",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = canonical_gencat(\"assigned\");",
          "    // Result will be Ok(Some(\"Assigned\"))",
          "}"
        ],
        "oracle": [
          "    assert_eq!(canonical_gencat(\"any\"), Ok(Some(\"Any\")));",
          "    assert_eq!(canonical_gencat(\"assigned\"), Ok(Some(\"Assigned\")));",
          "    assert_eq!(canonical_gencat(\"ascii\"), Ok(Some(\"ASCII\")));",
          "    assert!(canonical_gencat(\"unknown\").is_ok());"
        ],
        "code": [
          "{",
          "    let result = canonical_gencat(\"assigned\");",
          "    // Result will be Ok(Some(\"Assigned\"))",
          "    assert_eq!(canonical_gencat(\"any\"), Ok(Some(\"Any\")));",
          "    assert_eq!(canonical_gencat(\"assigned\"), Ok(Some(\"Assigned\")));",
          "    assert_eq!(canonical_gencat(\"ascii\"), Ok(Some(\"ASCII\")));",
          "    assert!(canonical_gencat(\"unknown\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = canonical_gencat(\"ascii\");",
          "    // Result will be Ok(Some(\"ASCII\"))",
          "}"
        ],
        "oracle": [
          "    let result = canonical_gencat(\"any\");",
          "    assert_eq!(result, Ok(Some(\"Any\")));",
          "    ",
          "    let result = canonical_gencat(\"assigned\");",
          "    assert_eq!(result, Ok(Some(\"Assigned\")));",
          "    ",
          "    let result = canonical_gencat(\"ascii\");",
          "    assert_eq!(result, Ok(Some(\"ASCII\")));",
          "    ",
          "    let result = canonical_gencat(\"unknown\");",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_none());"
        ],
        "code": [
          "{",
          "    let result = canonical_gencat(\"ascii\");",
          "    // Result will be Ok(Some(\"ASCII\"))",
          "    let result = canonical_gencat(\"any\");",
          "    assert_eq!(result, Ok(Some(\"Any\")));",
          "    ",
          "    let result = canonical_gencat(\"assigned\");",
          "    assert_eq!(result, Ok(Some(\"Assigned\")));",
          "    ",
          "    let result = canonical_gencat(\"ascii\");",
          "    assert_eq!(result, Ok(Some(\"ASCII\")));",
          "    ",
          "    let result = canonical_gencat(\"unknown\");",
          "    assert!(result.is_ok());",
          "    assert!(result.unwrap().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]